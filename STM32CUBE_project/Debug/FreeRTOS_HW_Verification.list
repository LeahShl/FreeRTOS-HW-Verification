
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002106c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d78  0802123c  0802123c  0002223c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08024fb4  08024fb4  000261cc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08024fb4  08024fb4  00025fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08024fbc  08024fbc  000261cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08024fbc  08024fbc  00025fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08024fc0  08024fc0  00025fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08024fc4  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000008c  08025050  0002608c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  2000012c  080250f0  0002612c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000256f0  200001cc  08025190  000261cc  2**2
                  ALLOC
 12 ._user_heap_stack 00005004  200258bc  08025190  000268bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000261cc  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045ae3  00000000  00000000  000261fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000ada3  00000000  00000000  0006bcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003060  00000000  00000000  00076a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000025f1  00000000  00000000  00079ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003fdce  00000000  00000000  0007c0d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00050c52  00000000  00000000  000bbea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00123a28  00000000  00000000  0010caf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00230521  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cd00  00000000  00000000  00230564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0023d264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001cc 	.word	0x200001cc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08021224 	.word	0x08021224

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d0 	.word	0x200001d0
 800020c:	08021224 	.word	0x08021224

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 fec7 	bl	80023d0 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fdd6 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f867 	bl	8002730 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fdc6 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200001e8 	.word	0x200001e8
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fcd3 	bl	8005090 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fdc1 	bl	80032b4 <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fd5e 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000230 	.word	0x20000230
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fb87 	bl	8002ea0 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fd2e 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20000290 	.word	0x20000290
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fb12 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fb2b 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fb0a 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fb23 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fb02 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fb1b 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fafa 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fb13 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 faf2 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fb0b 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 faea 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fb03 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 fae2 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fafb 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 fada 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 faf3 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 fad2 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 faeb 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 faca 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 fae3 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fac2 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 fadb 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 faba 	bl	8002e4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 fad3 	bl	8002e84 <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
#ifdef PRINT_TESTS_DEBUG
	printf("stack overflow from task '%s'\n", pcTaskName);
#endif
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000914:	4a43      	ldr	r2, [pc, #268]	@ (8000a24 <MX_FREERTOS_Init+0x114>)
 8000916:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800091a:	2010      	movs	r0, #16
 800091c:	f00d f81e 	bl	800d95c <osMessageQueueNew>
 8000920:	4603      	mov	r3, r0
 8000922:	4a41      	ldr	r2, [pc, #260]	@ (8000a28 <MX_FREERTOS_Init+0x118>)
 8000924:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000926:	4a41      	ldr	r2, [pc, #260]	@ (8000a2c <MX_FREERTOS_Init+0x11c>)
 8000928:	2110      	movs	r1, #16
 800092a:	2010      	movs	r0, #16
 800092c:	f00d f816 	bl	800d95c <osMessageQueueNew>
 8000930:	4603      	mov	r3, r0
 8000932:	4a3f      	ldr	r2, [pc, #252]	@ (8000a30 <MX_FREERTOS_Init+0x120>)
 8000934:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000936:	4a3f      	ldr	r2, [pc, #252]	@ (8000a34 <MX_FREERTOS_Init+0x124>)
 8000938:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800093c:	2008      	movs	r0, #8
 800093e:	f00d f80d 	bl	800d95c <osMessageQueueNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a3c      	ldr	r2, [pc, #240]	@ (8000a38 <MX_FREERTOS_Init+0x128>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 8000948:	4a3c      	ldr	r2, [pc, #240]	@ (8000a3c <MX_FREERTOS_Init+0x12c>)
 800094a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800094e:	2008      	movs	r0, #8
 8000950:	f00d f804 	bl	800d95c <osMessageQueueNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a3a      	ldr	r2, [pc, #232]	@ (8000a40 <MX_FREERTOS_Init+0x130>)
 8000958:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 800095a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a44 <MX_FREERTOS_Init+0x134>)
 800095c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000960:	2008      	movs	r0, #8
 8000962:	f00c fffb 	bl	800d95c <osMessageQueueNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a37      	ldr	r2, [pc, #220]	@ (8000a48 <MX_FREERTOS_Init+0x138>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800096c:	4a37      	ldr	r2, [pc, #220]	@ (8000a4c <MX_FREERTOS_Init+0x13c>)
 800096e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000972:	2008      	movs	r0, #8
 8000974:	f00c fff2 	bl	800d95c <osMessageQueueNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a35      	ldr	r2, [pc, #212]	@ (8000a50 <MX_FREERTOS_Init+0x140>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 800097e:	4a35      	ldr	r2, [pc, #212]	@ (8000a54 <MX_FREERTOS_Init+0x144>)
 8000980:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000984:	2008      	movs	r0, #8
 8000986:	f00c ffe9 	bl	800d95c <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a32      	ldr	r2, [pc, #200]	@ (8000a58 <MX_FREERTOS_Init+0x148>)
 800098e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000990:	4a32      	ldr	r2, [pc, #200]	@ (8000a5c <MX_FREERTOS_Init+0x14c>)
 8000992:	2100      	movs	r1, #0
 8000994:	4832      	ldr	r0, [pc, #200]	@ (8000a60 <MX_FREERTOS_Init+0x150>)
 8000996:	f00c fc2d 	bl	800d1f4 <osThreadNew>
 800099a:	4603      	mov	r3, r0
 800099c:	4a31      	ldr	r2, [pc, #196]	@ (8000a64 <MX_FREERTOS_Init+0x154>)
 800099e:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009a0:	4a31      	ldr	r2, [pc, #196]	@ (8000a68 <MX_FREERTOS_Init+0x158>)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4831      	ldr	r0, [pc, #196]	@ (8000a6c <MX_FREERTOS_Init+0x15c>)
 80009a6:	f00c fc25 	bl	800d1f4 <osThreadNew>
 80009aa:	4603      	mov	r3, r0
 80009ac:	4a30      	ldr	r2, [pc, #192]	@ (8000a70 <MX_FREERTOS_Init+0x160>)
 80009ae:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009b0:	4a30      	ldr	r2, [pc, #192]	@ (8000a74 <MX_FREERTOS_Init+0x164>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	4830      	ldr	r0, [pc, #192]	@ (8000a78 <MX_FREERTOS_Init+0x168>)
 80009b6:	f00c fc1d 	bl	800d1f4 <osThreadNew>
 80009ba:	4603      	mov	r3, r0
 80009bc:	4a2f      	ldr	r2, [pc, #188]	@ (8000a7c <MX_FREERTOS_Init+0x16c>)
 80009be:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000a80 <MX_FREERTOS_Init+0x170>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	482f      	ldr	r0, [pc, #188]	@ (8000a84 <MX_FREERTOS_Init+0x174>)
 80009c6:	f00c fc15 	bl	800d1f4 <osThreadNew>
 80009ca:	4603      	mov	r3, r0
 80009cc:	4a2e      	ldr	r2, [pc, #184]	@ (8000a88 <MX_FREERTOS_Init+0x178>)
 80009ce:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009d0:	4a2e      	ldr	r2, [pc, #184]	@ (8000a8c <MX_FREERTOS_Init+0x17c>)
 80009d2:	2100      	movs	r1, #0
 80009d4:	482e      	ldr	r0, [pc, #184]	@ (8000a90 <MX_FREERTOS_Init+0x180>)
 80009d6:	f00c fc0d 	bl	800d1f4 <osThreadNew>
 80009da:	4603      	mov	r3, r0
 80009dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000a94 <MX_FREERTOS_Init+0x184>)
 80009de:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000a98 <MX_FREERTOS_Init+0x188>)
 80009e2:	2100      	movs	r1, #0
 80009e4:	482d      	ldr	r0, [pc, #180]	@ (8000a9c <MX_FREERTOS_Init+0x18c>)
 80009e6:	f00c fc05 	bl	800d1f4 <osThreadNew>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa0 <MX_FREERTOS_Init+0x190>)
 80009ee:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 80009f0:	4a2c      	ldr	r2, [pc, #176]	@ (8000aa4 <MX_FREERTOS_Init+0x194>)
 80009f2:	2100      	movs	r1, #0
 80009f4:	482c      	ldr	r0, [pc, #176]	@ (8000aa8 <MX_FREERTOS_Init+0x198>)
 80009f6:	f00c fbfd 	bl	800d1f4 <osThreadNew>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a2b      	ldr	r2, [pc, #172]	@ (8000aac <MX_FREERTOS_Init+0x19c>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a00:	4a2b      	ldr	r2, [pc, #172]	@ (8000ab0 <MX_FREERTOS_Init+0x1a0>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	482b      	ldr	r0, [pc, #172]	@ (8000ab4 <MX_FREERTOS_Init+0x1a4>)
 8000a06:	f00c fbf5 	bl	800d1f4 <osThreadNew>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8000ab8 <MX_FREERTOS_Init+0x1a8>)
 8000a0e:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a10:	4a2a      	ldr	r2, [pc, #168]	@ (8000abc <MX_FREERTOS_Init+0x1ac>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	482a      	ldr	r0, [pc, #168]	@ (8000ac0 <MX_FREERTOS_Init+0x1b0>)
 8000a16:	f00c fbed 	bl	800d1f4 <osThreadNew>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a29      	ldr	r2, [pc, #164]	@ (8000ac4 <MX_FREERTOS_Init+0x1b4>)
 8000a1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08024ca4 	.word	0x08024ca4
 8000a28:	200002d8 	.word	0x200002d8
 8000a2c:	08024cbc 	.word	0x08024cbc
 8000a30:	200002dc 	.word	0x200002dc
 8000a34:	08024cd4 	.word	0x08024cd4
 8000a38:	200002e0 	.word	0x200002e0
 8000a3c:	08024cec 	.word	0x08024cec
 8000a40:	200002e4 	.word	0x200002e4
 8000a44:	08024d04 	.word	0x08024d04
 8000a48:	200002e8 	.word	0x200002e8
 8000a4c:	08024d1c 	.word	0x08024d1c
 8000a50:	200002ec 	.word	0x200002ec
 8000a54:	08024d34 	.word	0x08024d34
 8000a58:	200002f0 	.word	0x200002f0
 8000a5c:	08024b60 	.word	0x08024b60
 8000a60:	08000ac9 	.word	0x08000ac9
 8000a64:	200002b4 	.word	0x200002b4
 8000a68:	08024b84 	.word	0x08024b84
 8000a6c:	08000af9 	.word	0x08000af9
 8000a70:	200002b8 	.word	0x200002b8
 8000a74:	08024ba8 	.word	0x08024ba8
 8000a78:	08000b0d 	.word	0x08000b0d
 8000a7c:	200002bc 	.word	0x200002bc
 8000a80:	08024bcc 	.word	0x08024bcc
 8000a84:	08000b21 	.word	0x08000b21
 8000a88:	200002c0 	.word	0x200002c0
 8000a8c:	08024bf0 	.word	0x08024bf0
 8000a90:	08000b35 	.word	0x08000b35
 8000a94:	200002c4 	.word	0x200002c4
 8000a98:	08024c14 	.word	0x08024c14
 8000a9c:	08000b49 	.word	0x08000b49
 8000aa0:	200002c8 	.word	0x200002c8
 8000aa4:	08024c38 	.word	0x08024c38
 8000aa8:	08000b5d 	.word	0x08000b5d
 8000aac:	200002cc 	.word	0x200002cc
 8000ab0:	08024c5c 	.word	0x08024c5c
 8000ab4:	08000b71 	.word	0x08000b71
 8000ab8:	200002d0 	.word	0x200002d0
 8000abc:	08024c80 	.word	0x08024c80
 8000ac0:	08000b85 	.word	0x08000b85
 8000ac4:	200002d4 	.word	0x200002d4

08000ac8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000ad0:	f00b fc9e 	bl	800c410 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  if (Init_CRC() == CRC_MATCH_FAIL)
 8000ad4:	f01e fb04 	bl	801f0e0 <Init_CRC>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <StartDefaultTask+0x1a>
  {
	  Error_Handler();
 8000ade:	f000 fb8b 	bl	80011f8 <Error_Handler>
  }
  vTaskDelete(defaultTaskHandle);
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <StartDefaultTask+0x2c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f00e fd2c 	bl	800f544 <vTaskDelete>
  /* USER CODE END StartDefaultTask */
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	200002b4 	.word	0x200002b4

08000af8 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  UDP_Listen(); // loops here
 8000b00:	f01e fb5c 	bl	801f1bc <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcherTask(); // loops here
 8000b14:	f01e fa2c 	bl	801ef70 <TestDispatcherTask>
  /* USER CODE END StartTaskDispatcher */
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b28:	f01f f96c 	bl	801fe04 <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000b3c:	f01e fcec 	bl	801f518 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000b50:	f01e fea2 	bl	801f898 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000b64:	f01e f93c 	bl	801ede0 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000b78:	f01f f846 	bl	801fc08 <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000b8c:	f01e fc3e 	bl	801f40c <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b9e:	4b27      	ldr	r3, [pc, #156]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba2:	4a26      	ldr	r2, [pc, #152]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000ba4:	f043 0310 	orr.w	r3, r3, #16
 8000ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000baa:	4b24      	ldr	r3, [pc, #144]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a20      	ldr	r2, [pc, #128]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	4a14      	ldr	r2, [pc, #80]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MX_GPIO_Init+0xa4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

}
 8000c2e:	bf00      	nop
 8000c30:	371c      	adds	r7, #28
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40023800 	.word	0x40023800

08000c40 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	@ (8000cb8 <MX_I2C1_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cbc <MX_I2C1_Init+0x7c>)
 8000c4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c50:	4b18      	ldr	r3, [pc, #96]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c5c:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c7a:	480e      	ldr	r0, [pc, #56]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c7c:	f004 fbb4 	bl	80053e8 <HAL_I2C_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c86:	f000 fab7 	bl	80011f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000c8e:	f006 fd57 	bl	8007740 <HAL_I2CEx_ConfigAnalogFilter>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c98:	f000 faae 	bl	80011f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <MX_I2C1_Init+0x74>)
 8000ca0:	f006 fd99 	bl	80077d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f000 faa5 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200002f4 	.word	0x200002f4
 8000cb8:	40005400 	.word	0x40005400
 8000cbc:	20404768 	.word	0x20404768

08000cc0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000cc6:	4a1c      	ldr	r2, [pc, #112]	@ (8000d38 <MX_I2C2_Init+0x78>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <MX_I2C2_Init+0x7c>)
 8000cce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000cd2:	2214      	movs	r2, #20
 8000cd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd6:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000cd8:	2201      	movs	r2, #1
 8000cda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ce2:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000cfa:	480e      	ldr	r0, [pc, #56]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000cfc:	f004 fb74 	bl	80053e8 <HAL_I2C_Init>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d06:	f000 fa77 	bl	80011f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000d0e:	f006 fd17 	bl	8007740 <HAL_I2CEx_ConfigAnalogFilter>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d18:	f000 fa6e 	bl	80011f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_I2C2_Init+0x74>)
 8000d20:	f006 fd59 	bl	80077d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000d2a:	f000 fa65 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000348 	.word	0x20000348
 8000d38:	40005800 	.word	0x40005800
 8000d3c:	20404768 	.word	0x20404768

08000d40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b0ac      	sub	sp, #176	@ 0xb0
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d58:	f107 0318 	add.w	r3, r7, #24
 8000d5c:	2284      	movs	r2, #132	@ 0x84
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f01f fbf3 	bl	802054c <memset>
  if(i2cHandle->Instance==I2C1)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a57      	ldr	r2, [pc, #348]	@ (8000ec8 <HAL_I2C_MspInit+0x188>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	f040 80b9 	bne.w	8000ee4 <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000d76:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7c:	f107 0318 	add.w	r3, r7, #24
 8000d80:	4618      	mov	r0, r3
 8000d82:	f007 fa81 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000d8c:	f000 fa34 	bl	80011f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d90:	4b4e      	ldr	r3, [pc, #312]	@ (8000ecc <HAL_I2C_MspInit+0x18c>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	4a4d      	ldr	r2, [pc, #308]	@ (8000ecc <HAL_I2C_MspInit+0x18c>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000ecc <HAL_I2C_MspInit+0x18c>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000da8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4840      	ldr	r0, [pc, #256]	@ (8000ed0 <HAL_I2C_MspInit+0x190>)
 8000dd0:	f004 f95e 	bl	8005090 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8000ecc <HAL_I2C_MspInit+0x18c>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a3c      	ldr	r2, [pc, #240]	@ (8000ecc <HAL_I2C_MspInit+0x18c>)
 8000dda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b3a      	ldr	r3, [pc, #232]	@ (8000ecc <HAL_I2C_MspInit+0x18c>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000dec:	4b39      	ldr	r3, [pc, #228]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000dee:	4a3a      	ldr	r2, [pc, #232]	@ (8000ed8 <HAL_I2C_MspInit+0x198>)
 8000df0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000df2:	4b38      	ldr	r3, [pc, #224]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000df4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000df8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfa:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e00:	4b34      	ldr	r3, [pc, #208]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e0e:	4b31      	ldr	r3, [pc, #196]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e14:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e20:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e26:	4b2b      	ldr	r3, [pc, #172]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e2c:	4829      	ldr	r0, [pc, #164]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e2e:	f002 fa41 	bl	80032b4 <HAL_DMA_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000e38:	f000 f9de 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	4a25      	ldr	r2, [pc, #148]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e40:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e42:	4a24      	ldr	r2, [pc, #144]	@ (8000ed4 <HAL_I2C_MspInit+0x194>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000e48:	4b24      	ldr	r3, [pc, #144]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ee0 <HAL_I2C_MspInit+0x1a0>)
 8000e4c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000e4e:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000e54:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e56:	4b21      	ldr	r3, [pc, #132]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e58:	2240      	movs	r2, #64	@ 0x40
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e62:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e88:	4814      	ldr	r0, [pc, #80]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e8a:	f002 fa13 	bl	80032b4 <HAL_DMA_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000e94:	f000 f9b0 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000e9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000edc <HAL_I2C_MspInit+0x19c>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2105      	movs	r1, #5
 8000ea8:	201f      	movs	r0, #31
 8000eaa:	f001 ffcf 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000eae:	201f      	movs	r0, #31
 8000eb0:	f001 ffe8 	bl	8002e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2105      	movs	r1, #5
 8000eb8:	2020      	movs	r0, #32
 8000eba:	f001 ffc7 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ebe:	2020      	movs	r0, #32
 8000ec0:	f001 ffe0 	bl	8002e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ec4:	e0be      	b.n	8001044 <HAL_I2C_MspInit+0x304>
 8000ec6:	bf00      	nop
 8000ec8:	40005400 	.word	0x40005400
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40020400 	.word	0x40020400
 8000ed4:	2000039c 	.word	0x2000039c
 8000ed8:	40026088 	.word	0x40026088
 8000edc:	200003fc 	.word	0x200003fc
 8000ee0:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a58      	ldr	r2, [pc, #352]	@ (800104c <HAL_I2C_MspInit+0x30c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	f040 80aa 	bne.w	8001044 <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ef0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ef4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000efc:	f107 0318 	add.w	r3, r7, #24
 8000f00:	4618      	mov	r0, r3
 8000f02:	f007 f9c1 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8000f0c:	f000 f974 	bl	80011f8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f10:	4b4f      	ldr	r3, [pc, #316]	@ (8001050 <HAL_I2C_MspInit+0x310>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f14:	4a4e      	ldr	r2, [pc, #312]	@ (8001050 <HAL_I2C_MspInit+0x310>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001050 <HAL_I2C_MspInit+0x310>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f28:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f2c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f30:	2312      	movs	r3, #18
 8000f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f36:	2301      	movs	r3, #1
 8000f38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f42:	2304      	movs	r3, #4
 8000f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4841      	ldr	r0, [pc, #260]	@ (8001054 <HAL_I2C_MspInit+0x314>)
 8000f50:	f004 f89e 	bl	8005090 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f54:	4b3e      	ldr	r3, [pc, #248]	@ (8001050 <HAL_I2C_MspInit+0x310>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	4a3d      	ldr	r2, [pc, #244]	@ (8001050 <HAL_I2C_MspInit+0x310>)
 8000f5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f60:	4b3b      	ldr	r3, [pc, #236]	@ (8001050 <HAL_I2C_MspInit+0x310>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000f6e:	4a3b      	ldr	r2, [pc, #236]	@ (800105c <HAL_I2C_MspInit+0x31c>)
 8000f70:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8000f72:	4b39      	ldr	r3, [pc, #228]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000f74:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b35      	ldr	r3, [pc, #212]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000f88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f8c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f8e:	4b32      	ldr	r3, [pc, #200]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f94:	4b30      	ldr	r3, [pc, #192]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fa0:	4b2d      	ldr	r3, [pc, #180]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8000fac:	482a      	ldr	r0, [pc, #168]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000fae:	f002 f981 	bl	80032b4 <HAL_DMA_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 8000fb8:	f000 f91e 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	4a26      	ldr	r2, [pc, #152]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000fc0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fc2:	4a25      	ldr	r2, [pc, #148]	@ (8001058 <HAL_I2C_MspInit+0x318>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8000fc8:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000fca:	4a26      	ldr	r2, [pc, #152]	@ (8001064 <HAL_I2C_MspInit+0x324>)
 8000fcc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8000fce:	4b24      	ldr	r3, [pc, #144]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000fd0:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8000fd4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000fd8:	2240      	movs	r2, #64	@ 0x40
 8000fda:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000fe4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fe8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fea:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001002:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8001004:	2200      	movs	r2, #0
 8001006:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001008:	4815      	ldr	r0, [pc, #84]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 800100a:	f002 f953 	bl	80032b4 <HAL_DMA_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 8001014:	f000 f8f0 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a11      	ldr	r2, [pc, #68]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 800101c:	639a      	str	r2, [r3, #56]	@ 0x38
 800101e:	4a10      	ldr	r2, [pc, #64]	@ (8001060 <HAL_I2C_MspInit+0x320>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001024:	2200      	movs	r2, #0
 8001026:	2105      	movs	r1, #5
 8001028:	2021      	movs	r0, #33	@ 0x21
 800102a:	f001 ff0f 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800102e:	2021      	movs	r0, #33	@ 0x21
 8001030:	f001 ff28 	bl	8002e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2105      	movs	r1, #5
 8001038:	2022      	movs	r0, #34	@ 0x22
 800103a:	f001 ff07 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 800103e:	2022      	movs	r0, #34	@ 0x22
 8001040:	f001 ff20 	bl	8002e84 <HAL_NVIC_EnableIRQ>
}
 8001044:	bf00      	nop
 8001046:	37b0      	adds	r7, #176	@ 0xb0
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40005800 	.word	0x40005800
 8001050:	40023800 	.word	0x40023800
 8001054:	40020400 	.word	0x40020400
 8001058:	2000045c 	.word	0x2000045c
 800105c:	40026058 	.word	0x40026058
 8001060:	200004bc 	.word	0x200004bc
 8001064:	400260b8 	.word	0x400260b8

08001068 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <_write+0x3c>)
 8001076:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	b29a      	uxth	r2, r3
 800107c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <_write+0x40>)
 8001084:	f009 fd76 	bl	800ab74 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 8001088:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800108c:	2201      	movs	r2, #1
 800108e:	6979      	ldr	r1, [r7, #20]
 8001090:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <_write+0x40>)
 8001092:	f009 fd6f 	bl	800ab74 <HAL_UART_Transmit>
	return len + 1;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	3301      	adds	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0802130c 	.word	0x0802130c
 80010a8:	200009bc 	.word	0x200009bc

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f001 f93d 	bl	800232e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f822 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f7ff fd6e 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f7ff fb94 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80010c0:	f000 fe4c 	bl	8001d5c <MX_USART3_UART_Init>
  MX_CRC_Init();
 80010c4:	f7ff fb4e 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 80010c8:	f000 fde8 	bl	8001c9c <MX_UART4_Init>
  MX_UART5_Init();
 80010cc:	f000 fe16 	bl	8001cfc <MX_UART5_Init>
  MX_I2C1_Init();
 80010d0:	f7ff fdb6 	bl	8000c40 <MX_I2C1_Init>
  MX_I2C2_Init();
 80010d4:	f7ff fdf4 	bl	8000cc0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80010d8:	f000 f894 	bl	8001204 <MX_SPI1_Init>
  MX_SPI4_Init();
 80010dc:	f000 f8d0 	bl	8001280 <MX_SPI4_Init>
  MX_ADC1_Init();
 80010e0:	f7ff fa7c 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 80010e4:	f000 fd38 	bl	8001b58 <MX_TIM6_Init>
  MX_TIM2_Init();
 80010e8:	f000 fce8 	bl	8001abc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010ec:	f00b fff0 	bl	800d0d0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80010f0:	f7ff fc0e 	bl	8000910 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80010f4:	f00c f820 	bl	800d138 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <main+0x4c>

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	@ 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	@ 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f01f fa1e 	bl	802054c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	4b2a      	ldr	r3, [pc, #168]	@ (80011cc <SystemClock_Config+0xd0>)
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	4a29      	ldr	r2, [pc, #164]	@ (80011cc <SystemClock_Config+0xd0>)
 8001126:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112a:	6413      	str	r3, [r2, #64]	@ 0x40
 800112c:	4b27      	ldr	r3, [pc, #156]	@ (80011cc <SystemClock_Config+0xd0>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001130:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001138:	4b25      	ldr	r3, [pc, #148]	@ (80011d0 <SystemClock_Config+0xd4>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a24      	ldr	r2, [pc, #144]	@ (80011d0 <SystemClock_Config+0xd4>)
 800113e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <SystemClock_Config+0xd4>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001150:	2302      	movs	r3, #2
 8001152:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001154:	2301      	movs	r3, #1
 8001156:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001158:	2310      	movs	r3, #16
 800115a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800115c:	2302      	movs	r3, #2
 800115e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001160:	2300      	movs	r3, #0
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001164:	2308      	movs	r3, #8
 8001166:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001168:	23d8      	movs	r3, #216	@ 0xd8
 800116a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800116c:	2302      	movs	r3, #2
 800116e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001170:	2302      	movs	r3, #2
 8001172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	4618      	mov	r0, r3
 800117a:	f006 fbc9 	bl	8007910 <HAL_RCC_OscConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001184:	f000 f838 	bl	80011f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001188:	f006 fb72 	bl	8007870 <HAL_PWREx_EnableOverDrive>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001192:	f000 f831 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001196:	230f      	movs	r3, #15
 8001198:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800119a:	2302      	movs	r3, #2
 800119c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80011ae:	f107 030c 	add.w	r3, r7, #12
 80011b2:	2107      	movs	r1, #7
 80011b4:	4618      	mov	r0, r3
 80011b6:	f006 fe4f 	bl	8007e58 <HAL_RCC_ClockConfig>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80011c0:	f000 f81a 	bl	80011f8 <Error_Handler>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3750      	adds	r7, #80	@ 0x50
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40007000 	.word	0x40007000

080011d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d101      	bne.n	80011ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80011e6:	f001 f8af 	bl	8002348 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40001400 	.word	0x40001400

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <MX_SPI1_Init+0x74>)
 800120a:	4a1c      	ldr	r2, [pc, #112]	@ (800127c <MX_SPI1_Init+0x78>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b18      	ldr	r3, [pc, #96]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <MX_SPI1_Init+0x74>)
 800121e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001222:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800122a:	4b13      	ldr	r3, [pc, #76]	@ (8001278 <MX_SPI1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001232:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001236:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_SPI1_Init+0x74>)
 800123a:	2218      	movs	r2, #24
 800123c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_SPI1_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001252:	2207      	movs	r2, #7
 8001254:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_SPI1_Init+0x74>)
 800125e:	2208      	movs	r2, #8
 8001260:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_SPI1_Init+0x74>)
 8001264:	f007 fc00 	bl	8008a68 <HAL_SPI_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800126e:	f7ff ffc3 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000051c 	.word	0x2000051c
 800127c:	40013000 	.word	0x40013000

08001280 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <MX_SPI4_Init+0x68>)
 8001286:	4a19      	ldr	r2, [pc, #100]	@ (80012ec <MX_SPI4_Init+0x6c>)
 8001288:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 800128a:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <MX_SPI4_Init+0x68>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <MX_SPI4_Init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8001296:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <MX_SPI4_Init+0x68>)
 8001298:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800129c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80012aa:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80012b6:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012be:	2200      	movs	r2, #0
 80012c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <MX_SPI4_Init+0x68>)
 80012d6:	f007 fbc7 	bl	8008a68 <HAL_SPI_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 80012e0:	f7ff ff8a 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000580 	.word	0x20000580
 80012ec:	40013400 	.word	0x40013400

080012f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08c      	sub	sp, #48	@ 0x30
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4aa1      	ldr	r2, [pc, #644]	@ (8001594 <HAL_SPI_MspInit+0x2a4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	f040 80a9 	bne.w	8001466 <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001314:	4ba0      	ldr	r3, [pc, #640]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001316:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001318:	4a9f      	ldr	r2, [pc, #636]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 800131a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800131e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001320:	4b9d      	ldr	r3, [pc, #628]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001324:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001328:	61bb      	str	r3, [r7, #24]
 800132a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132c:	4b9a      	ldr	r3, [pc, #616]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 800132e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001330:	4a99      	ldr	r2, [pc, #612]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	6313      	str	r3, [r2, #48]	@ 0x30
 8001338:	4b97      	ldr	r3, [pc, #604]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 800133a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b94      	ldr	r3, [pc, #592]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001348:	4a93      	ldr	r2, [pc, #588]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001350:	4b91      	ldr	r3, [pc, #580]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800135c:	2370      	movs	r3, #112	@ 0x70
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800136c:	2305      	movs	r3, #5
 800136e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	4619      	mov	r1, r3
 8001376:	4889      	ldr	r0, [pc, #548]	@ (800159c <HAL_SPI_MspInit+0x2ac>)
 8001378:	f003 fe8a 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800137c:	2320      	movs	r3, #32
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800138c:	2305      	movs	r3, #5
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	4619      	mov	r1, r3
 8001396:	4882      	ldr	r0, [pc, #520]	@ (80015a0 <HAL_SPI_MspInit+0x2b0>)
 8001398:	f003 fe7a 	bl	8005090 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 800139c:	4b81      	ldr	r3, [pc, #516]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 800139e:	4a82      	ldr	r2, [pc, #520]	@ (80015a8 <HAL_SPI_MspInit+0x2b8>)
 80013a0:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80013a2:	4b80      	ldr	r3, [pc, #512]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013a4:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80013a8:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013aa:	4b7e      	ldr	r3, [pc, #504]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b0:	4b7c      	ldr	r3, [pc, #496]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b6:	4b7b      	ldr	r3, [pc, #492]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013bc:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013be:	4b79      	ldr	r3, [pc, #484]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c4:	4b77      	ldr	r3, [pc, #476]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80013ca:	4b76      	ldr	r3, [pc, #472]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013d0:	4b74      	ldr	r3, [pc, #464]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d6:	4b73      	ldr	r3, [pc, #460]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80013dc:	4871      	ldr	r0, [pc, #452]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013de:	f001 ff69 	bl	80032b4 <HAL_DMA_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 80013e8:	f7ff ff06 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a6d      	ldr	r2, [pc, #436]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013f0:	659a      	str	r2, [r3, #88]	@ 0x58
 80013f2:	4a6c      	ldr	r2, [pc, #432]	@ (80015a4 <HAL_SPI_MspInit+0x2b4>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80013f8:	4b6c      	ldr	r3, [pc, #432]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 80013fa:	4a6d      	ldr	r2, [pc, #436]	@ (80015b0 <HAL_SPI_MspInit+0x2c0>)
 80013fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80013fe:	4b6b      	ldr	r3, [pc, #428]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 8001400:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001404:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001406:	4b69      	ldr	r3, [pc, #420]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 8001408:	2240      	movs	r2, #64	@ 0x40
 800140a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800140c:	4b67      	ldr	r3, [pc, #412]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001412:	4b66      	ldr	r3, [pc, #408]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 8001414:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001418:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800141a:	4b64      	ldr	r3, [pc, #400]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 800141c:	2200      	movs	r2, #0
 800141e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001420:	4b62      	ldr	r3, [pc, #392]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 8001422:	2200      	movs	r2, #0
 8001424:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001426:	4b61      	ldr	r3, [pc, #388]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 8001428:	2200      	movs	r2, #0
 800142a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800142c:	4b5f      	ldr	r3, [pc, #380]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 800142e:	2200      	movs	r2, #0
 8001430:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001432:	4b5e      	ldr	r3, [pc, #376]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 8001434:	2200      	movs	r2, #0
 8001436:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001438:	485c      	ldr	r0, [pc, #368]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 800143a:	f001 ff3b 	bl	80032b4 <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 8001444:	f7ff fed8 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a58      	ldr	r2, [pc, #352]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 800144c:	655a      	str	r2, [r3, #84]	@ 0x54
 800144e:	4a57      	ldr	r2, [pc, #348]	@ (80015ac <HAL_SPI_MspInit+0x2bc>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2105      	movs	r1, #5
 8001458:	2023      	movs	r0, #35	@ 0x23
 800145a:	f001 fcf7 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800145e:	2023      	movs	r0, #35	@ 0x23
 8001460:	f001 fd10 	bl	8002e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8001464:	e091      	b.n	800158a <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a52      	ldr	r2, [pc, #328]	@ (80015b4 <HAL_SPI_MspInit+0x2c4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	f040 808c 	bne.w	800158a <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001472:	4b49      	ldr	r3, [pc, #292]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001476:	4a48      	ldr	r2, [pc, #288]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001478:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800147c:	6453      	str	r3, [r2, #68]	@ 0x44
 800147e:	4b46      	ldr	r3, [pc, #280]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800148a:	4b43      	ldr	r3, [pc, #268]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a42      	ldr	r2, [pc, #264]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001490:	f043 0310 	orr.w	r3, r3, #16
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b40      	ldr	r3, [pc, #256]	@ (8001598 <HAL_SPI_MspInit+0x2a8>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80014a2:	2374      	movs	r3, #116	@ 0x74
 80014a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ae:	2303      	movs	r3, #3
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80014b2:	2305      	movs	r3, #5
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b6:	f107 031c 	add.w	r3, r7, #28
 80014ba:	4619      	mov	r1, r3
 80014bc:	483e      	ldr	r0, [pc, #248]	@ (80015b8 <HAL_SPI_MspInit+0x2c8>)
 80014be:	f003 fde7 	bl	8005090 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80014c2:	4b3e      	ldr	r3, [pc, #248]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014c4:	4a3e      	ldr	r2, [pc, #248]	@ (80015c0 <HAL_SPI_MspInit+0x2d0>)
 80014c6:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 80014c8:	4b3c      	ldr	r3, [pc, #240]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80014ce:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d0:	4b3a      	ldr	r3, [pc, #232]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014d6:	4b39      	ldr	r3, [pc, #228]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014dc:	4b37      	ldr	r3, [pc, #220]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014e2:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e4:	4b35      	ldr	r3, [pc, #212]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ea:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 80014f0:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014f6:	4b31      	ldr	r3, [pc, #196]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014fc:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001502:	482e      	ldr	r0, [pc, #184]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 8001504:	f001 fed6 	bl	80032b4 <HAL_DMA_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_SPI_MspInit+0x222>
      Error_Handler();
 800150e:	f7ff fe73 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a29      	ldr	r2, [pc, #164]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 8001516:	659a      	str	r2, [r3, #88]	@ 0x58
 8001518:	4a28      	ldr	r2, [pc, #160]	@ (80015bc <HAL_SPI_MspInit+0x2cc>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 800151e:	4b29      	ldr	r3, [pc, #164]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001520:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <HAL_SPI_MspInit+0x2d8>)
 8001522:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8001524:	4b27      	ldr	r3, [pc, #156]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001526:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800152a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800152c:	4b25      	ldr	r3, [pc, #148]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 800152e:	2240      	movs	r2, #64	@ 0x40
 8001530:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001532:	4b24      	ldr	r3, [pc, #144]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001534:	2200      	movs	r2, #0
 8001536:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001538:	4b22      	ldr	r3, [pc, #136]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 800153a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800153e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001540:	4b20      	ldr	r3, [pc, #128]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001546:	4b1f      	ldr	r3, [pc, #124]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 800154c:	4b1d      	ldr	r3, [pc, #116]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001552:	4b1c      	ldr	r3, [pc, #112]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001558:	4b1a      	ldr	r3, [pc, #104]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 800155e:	4819      	ldr	r0, [pc, #100]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001560:	f001 fea8 	bl	80032b4 <HAL_DMA_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 800156a:	f7ff fe45 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a14      	ldr	r2, [pc, #80]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001572:	655a      	str	r2, [r3, #84]	@ 0x54
 8001574:	4a13      	ldr	r2, [pc, #76]	@ (80015c4 <HAL_SPI_MspInit+0x2d4>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2105      	movs	r1, #5
 800157e:	2054      	movs	r0, #84	@ 0x54
 8001580:	f001 fc64 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001584:	2054      	movs	r0, #84	@ 0x54
 8001586:	f001 fc7d 	bl	8002e84 <HAL_NVIC_EnableIRQ>
}
 800158a:	bf00      	nop
 800158c:	3730      	adds	r7, #48	@ 0x30
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40013000 	.word	0x40013000
 8001598:	40023800 	.word	0x40023800
 800159c:	40020000 	.word	0x40020000
 80015a0:	40020400 	.word	0x40020400
 80015a4:	200005e4 	.word	0x200005e4
 80015a8:	40026440 	.word	0x40026440
 80015ac:	20000644 	.word	0x20000644
 80015b0:	40026458 	.word	0x40026458
 80015b4:	40013400 	.word	0x40013400
 80015b8:	40021000 	.word	0x40021000
 80015bc:	200006a4 	.word	0x200006a4
 80015c0:	40026410 	.word	0x40026410
 80015c4:	20000704 	.word	0x20000704
 80015c8:	40026428 	.word	0x40026428

080015cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015d2:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <HAL_MspInit+0x4c>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	4a10      	ldr	r2, [pc, #64]	@ (8001618 <HAL_MspInit+0x4c>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <HAL_MspInit+0x4c>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <HAL_MspInit+0x4c>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	210f      	movs	r1, #15
 8001606:	f06f 0001 	mvn.w	r0, #1
 800160a:	f001 fc1f 	bl	8002e4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	@ 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800162c:	4b33      	ldr	r3, [pc, #204]	@ (80016fc <HAL_InitTick+0xe0>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001630:	4a32      	ldr	r2, [pc, #200]	@ (80016fc <HAL_InitTick+0xe0>)
 8001632:	f043 0320 	orr.w	r3, r3, #32
 8001636:	6413      	str	r3, [r2, #64]	@ 0x40
 8001638:	4b30      	ldr	r3, [pc, #192]	@ (80016fc <HAL_InitTick+0xe0>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	f003 0320 	and.w	r3, r3, #32
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001644:	f107 0210 	add.w	r2, r7, #16
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f006 fde8 	bl	8008224 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165a:	2b00      	cmp	r3, #0
 800165c:	d103      	bne.n	8001666 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800165e:	f006 fdb9 	bl	80081d4 <HAL_RCC_GetPCLK1Freq>
 8001662:	6378      	str	r0, [r7, #52]	@ 0x34
 8001664:	e004      	b.n	8001670 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001666:	f006 fdb5 	bl	80081d4 <HAL_RCC_GetPCLK1Freq>
 800166a:	4603      	mov	r3, r0
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001672:	4a23      	ldr	r2, [pc, #140]	@ (8001700 <HAL_InitTick+0xe4>)
 8001674:	fba2 2303 	umull	r2, r3, r2, r3
 8001678:	0c9b      	lsrs	r3, r3, #18
 800167a:	3b01      	subs	r3, #1
 800167c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800167e:	4b21      	ldr	r3, [pc, #132]	@ (8001704 <HAL_InitTick+0xe8>)
 8001680:	4a21      	ldr	r2, [pc, #132]	@ (8001708 <HAL_InitTick+0xec>)
 8001682:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001684:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <HAL_InitTick+0xe8>)
 8001686:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800168a:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800168c:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <HAL_InitTick+0xe8>)
 800168e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001690:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <HAL_InitTick+0xe8>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001698:	4b1a      	ldr	r3, [pc, #104]	@ (8001704 <HAL_InitTick+0xe8>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_InitTick+0xe8>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80016a4:	4817      	ldr	r0, [pc, #92]	@ (8001704 <HAL_InitTick+0xe8>)
 80016a6:	f008 fcc9 	bl	800a03c <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d11b      	bne.n	80016f0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80016b8:	4812      	ldr	r0, [pc, #72]	@ (8001704 <HAL_InitTick+0xe8>)
 80016ba:	f008 fdaf 	bl	800a21c <HAL_TIM_Base_Start_IT>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d111      	bne.n	80016f0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016cc:	2037      	movs	r0, #55	@ 0x37
 80016ce:	f001 fbd9 	bl	8002e84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b0f      	cmp	r3, #15
 80016d6:	d808      	bhi.n	80016ea <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80016d8:	2200      	movs	r2, #0
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	2037      	movs	r0, #55	@ 0x37
 80016de:	f001 fbb5 	bl	8002e4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <HAL_InitTick+0xf0>)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	e002      	b.n	80016f0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3738      	adds	r7, #56	@ 0x38
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40023800 	.word	0x40023800
 8001700:	431bde83 	.word	0x431bde83
 8001704:	20000764 	.word	0x20000764
 8001708:	40001400 	.word	0x40001400
 800170c:	20000004 	.word	0x20000004

08001710 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <NMI_Handler+0x4>

08001718 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800171c:	bf00      	nop
 800171e:	e7fd      	b.n	800171c <HardFault_Handler+0x4>

08001720 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001724:	bf00      	nop
 8001726:	e7fd      	b.n	8001724 <MemManage_Handler+0x4>

08001728 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <BusFault_Handler+0x4>

08001730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001734:	bf00      	nop
 8001736:	e7fd      	b.n	8001734 <UsageFault_Handler+0x4>

08001738 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <DMA1_Stream0_IRQHandler+0x10>)
 800174e:	f001 ff51 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000aa4 	.word	0x20000aa4

0800175c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001760:	4802      	ldr	r0, [pc, #8]	@ (800176c <DMA1_Stream1_IRQHandler+0x10>)
 8001762:	f001 ff47 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000084c 	.word	0x2000084c

08001770 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001774:	4802      	ldr	r0, [pc, #8]	@ (8001780 <DMA1_Stream2_IRQHandler+0x10>)
 8001776:	f001 ff3d 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000a44 	.word	0x20000a44

08001784 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <DMA1_Stream3_IRQHandler+0x10>)
 800178a:	f001 ff33 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000045c 	.word	0x2000045c

08001798 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800179c:	4802      	ldr	r0, [pc, #8]	@ (80017a8 <DMA1_Stream5_IRQHandler+0x10>)
 800179e:	f001 ff29 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	2000039c 	.word	0x2000039c

080017ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80017b0:	4802      	ldr	r0, [pc, #8]	@ (80017bc <DMA1_Stream6_IRQHandler+0x10>)
 80017b2:	f001 ff1f 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200003fc 	.word	0x200003fc

080017c0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80017c4:	4802      	ldr	r0, [pc, #8]	@ (80017d0 <I2C1_EV_IRQHandler+0x10>)
 80017c6:	f004 fa51 	bl	8005c6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200002f4 	.word	0x200002f4

080017d4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80017d8:	4802      	ldr	r0, [pc, #8]	@ (80017e4 <I2C1_ER_IRQHandler+0x10>)
 80017da:	f004 fa61 	bl	8005ca0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	200002f4 	.word	0x200002f4

080017e8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80017ec:	4802      	ldr	r0, [pc, #8]	@ (80017f8 <I2C2_EV_IRQHandler+0x10>)
 80017ee:	f004 fa3d 	bl	8005c6c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000348 	.word	0x20000348

080017fc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <I2C2_ER_IRQHandler+0x10>)
 8001802:	f004 fa4d 	bl	8005ca0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000348 	.word	0x20000348

08001810 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <SPI1_IRQHandler+0x10>)
 8001816:	f007 fe87 	bl	8009528 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	2000051c 	.word	0x2000051c

08001824 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <USART3_IRQHandler+0x10>)
 800182a:	f009 fbc9 	bl	800afc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200009bc 	.word	0x200009bc

08001838 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <DMA1_Stream7_IRQHandler+0x10>)
 800183e:	f001 fed9 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	200004bc 	.word	0x200004bc

0800184c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <UART4_IRQHandler+0x10>)
 8001852:	f009 fbb5 	bl	800afc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200008ac 	.word	0x200008ac

08001860 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <UART5_IRQHandler+0x10>)
 8001866:	f009 fbab 	bl	800afc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000934 	.word	0x20000934

08001874 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <TIM6_DAC_IRQHandler+0x10>)
 800187a:	f008 fd47 	bl	800a30c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000800 	.word	0x20000800

08001888 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800188c:	4802      	ldr	r0, [pc, #8]	@ (8001898 <TIM7_IRQHandler+0x10>)
 800188e:	f008 fd3d 	bl	800a30c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000764 	.word	0x20000764

0800189c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80018a0:	4802      	ldr	r0, [pc, #8]	@ (80018ac <DMA2_Stream0_IRQHandler+0x10>)
 80018a2:	f001 fea7 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200006a4 	.word	0x200006a4

080018b0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80018b4:	4802      	ldr	r0, [pc, #8]	@ (80018c0 <DMA2_Stream1_IRQHandler+0x10>)
 80018b6:	f001 fe9d 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000704 	.word	0x20000704

080018c4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <DMA2_Stream2_IRQHandler+0x10>)
 80018ca:	f001 fe93 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200005e4 	.word	0x200005e4

080018d8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80018dc:	4802      	ldr	r0, [pc, #8]	@ (80018e8 <DMA2_Stream3_IRQHandler+0x10>)
 80018de:	f001 fe89 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000644 	.word	0x20000644

080018ec <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018f0:	4802      	ldr	r0, [pc, #8]	@ (80018fc <DMA2_Stream4_IRQHandler+0x10>)
 80018f2:	f001 fe7f 	bl	80035f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000230 	.word	0x20000230

08001900 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001904:	4802      	ldr	r0, [pc, #8]	@ (8001910 <ETH_IRQHandler+0x10>)
 8001906:	f002 fcdb 	bl	80042c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000cf98 	.word	0x2000cf98

08001914 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001918:	4802      	ldr	r0, [pc, #8]	@ (8001924 <ETH_WKUP_IRQHandler+0x10>)
 800191a:	f002 fcd1 	bl	80042c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000cf98 	.word	0x2000cf98

08001928 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 800192c:	4802      	ldr	r0, [pc, #8]	@ (8001938 <SPI4_IRQHandler+0x10>)
 800192e:	f007 fdfb 	bl	8009528 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001932:	bf00      	nop
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	20000580 	.word	0x20000580

0800193c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  return 1;
 8001940:	2301      	movs	r3, #1
}
 8001942:	4618      	mov	r0, r3
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_kill>:

int _kill(int pid, int sig)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001956:	4b05      	ldr	r3, [pc, #20]	@ (800196c <_kill+0x20>)
 8001958:	2216      	movs	r2, #22
 800195a:	601a      	str	r2, [r3, #0]
  return -1;
 800195c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001960:	4618      	mov	r0, r3
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	200258ac 	.word	0x200258ac

08001970 <_exit>:

void _exit (int status)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001978:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ffe5 	bl	800194c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001982:	bf00      	nop
 8001984:	e7fd      	b.n	8001982 <_exit+0x12>

08001986 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b086      	sub	sp, #24
 800198a:	af00      	add	r7, sp, #0
 800198c:	60f8      	str	r0, [r7, #12]
 800198e:	60b9      	str	r1, [r7, #8]
 8001990:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
 8001996:	e00a      	b.n	80019ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001998:	f3af 8000 	nop.w
 800199c:	4601      	mov	r1, r0
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	60ba      	str	r2, [r7, #8]
 80019a4:	b2ca      	uxtb	r2, r1
 80019a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	3301      	adds	r3, #1
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbf0      	blt.n	8001998 <_read+0x12>
  }

  return len;
 80019b6:	687b      	ldr	r3, [r7, #4]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019e8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <_isatty>:

int _isatty(int file)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a00:	2301      	movs	r3, #1
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b085      	sub	sp, #20
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b087      	sub	sp, #28
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <_sbrk+0x5c>)
 8001a32:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <_sbrk+0x60>)
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	@ (8001a8c <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d102      	bne.n	8001a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <_sbrk+0x64>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <_sbrk+0x68>)
 8001a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <_sbrk+0x64>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4413      	add	r3, r2
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d205      	bcs.n	8001a64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a58:	4b0e      	ldr	r3, [pc, #56]	@ (8001a94 <_sbrk+0x6c>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a62:	e009      	b.n	8001a78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a64:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a06      	ldr	r2, [pc, #24]	@ (8001a8c <_sbrk+0x64>)
 8001a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a76:	68fb      	ldr	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	20050000 	.word	0x20050000
 8001a88:	00002000 	.word	0x00002000
 8001a8c:	200007b0 	.word	0x200007b0
 8001a90:	200258c0 	.word	0x200258c0
 8001a94:	200258ac 	.word	0x200258ac

08001a98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a9c:	4b06      	ldr	r3, [pc, #24]	@ (8001ab8 <SystemInit+0x20>)
 8001a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aa2:	4a05      	ldr	r2, [pc, #20]	@ (8001ab8 <SystemInit+0x20>)
 8001aa4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aa8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aac:	bf00      	nop
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ada:	4b1e      	ldr	r3, [pc, #120]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001adc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001aee:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001af4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afc:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b02:	4814      	ldr	r0, [pc, #80]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001b04:	f008 fa9a 	bl	800a03c <HAL_TIM_Base_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b0e:	f7ff fb73 	bl	80011f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001b20:	f008 fcfc 	bl	800a51c <HAL_TIM_ConfigClockSource>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b2a:	f7ff fb65 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b32:	2300      	movs	r3, #0
 8001b34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b36:	1d3b      	adds	r3, r7, #4
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4806      	ldr	r0, [pc, #24]	@ (8001b54 <MX_TIM2_Init+0x98>)
 8001b3c:	f008 ff20 	bl	800a980 <HAL_TIMEx_MasterConfigSynchronization>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001b46:	f7ff fb57 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b4a:	bf00      	nop
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200007b4 	.word	0x200007b4

08001b58 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b68:	4b14      	ldr	r3, [pc, #80]	@ (8001bbc <MX_TIM6_Init+0x64>)
 8001b6a:	4a15      	ldr	r2, [pc, #84]	@ (8001bc0 <MX_TIM6_Init+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	@ (8001bbc <MX_TIM6_Init+0x64>)
 8001b70:	f240 221b 	movw	r2, #539	@ 0x21b
 8001b74:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b76:	4b11      	ldr	r3, [pc, #68]	@ (8001bbc <MX_TIM6_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bbc <MX_TIM6_Init+0x64>)
 8001b7e:	2263      	movs	r2, #99	@ 0x63
 8001b80:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <MX_TIM6_Init+0x64>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b88:	480c      	ldr	r0, [pc, #48]	@ (8001bbc <MX_TIM6_Init+0x64>)
 8001b8a:	f008 fa57 	bl	800a03c <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001b94:	f7ff fb30 	bl	80011f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b98:	2320      	movs	r3, #32
 8001b9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	@ (8001bbc <MX_TIM6_Init+0x64>)
 8001ba6:	f008 feeb 	bl	800a980 <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bb0:	f7ff fb22 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	20000800 	.word	0x20000800
 8001bc0:	40001000 	.word	0x40001000

08001bc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bd4:	d10c      	bne.n	8001bf0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c8c <HAL_TIM_Base_MspInit+0xc8>)
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	4a2c      	ldr	r2, [pc, #176]	@ (8001c8c <HAL_TIM_Base_MspInit+0xc8>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c8c <HAL_TIM_Base_MspInit+0xc8>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001bee:	e049      	b.n	8001c84 <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a26      	ldr	r2, [pc, #152]	@ (8001c90 <HAL_TIM_Base_MspInit+0xcc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d144      	bne.n	8001c84 <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001bfa:	4b24      	ldr	r3, [pc, #144]	@ (8001c8c <HAL_TIM_Base_MspInit+0xc8>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfe:	4a23      	ldr	r2, [pc, #140]	@ (8001c8c <HAL_TIM_Base_MspInit+0xc8>)
 8001c00:	f043 0310 	orr.w	r3, r3, #16
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c06:	4b21      	ldr	r3, [pc, #132]	@ (8001c8c <HAL_TIM_Base_MspInit+0xc8>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001c12:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c14:	4a20      	ldr	r2, [pc, #128]	@ (8001c98 <HAL_TIM_Base_MspInit+0xd4>)
 8001c16:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c1a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001c1e:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c26:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001c2c:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c32:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c34:	4b17      	ldr	r3, [pc, #92]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c36:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001c3a:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c42:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001c44:	4b13      	ldr	r3, [pc, #76]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001c4a:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c50:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c52:	4b10      	ldr	r3, [pc, #64]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001c58:	480e      	ldr	r0, [pc, #56]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c5a:	f001 fb2b 	bl	80032b4 <HAL_DMA_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001c64:	f7ff fac8 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c6c:	621a      	str	r2, [r3, #32]
 8001c6e:	4a09      	ldr	r2, [pc, #36]	@ (8001c94 <HAL_TIM_Base_MspInit+0xd0>)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2105      	movs	r1, #5
 8001c78:	2036      	movs	r0, #54	@ 0x36
 8001c7a:	f001 f8e7 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c7e:	2036      	movs	r0, #54	@ 0x36
 8001c80:	f001 f900 	bl	8002e84 <HAL_NVIC_EnableIRQ>
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40001000 	.word	0x40001000
 8001c94:	2000084c 	.word	0x2000084c
 8001c98:	40026028 	.word	0x40026028

08001c9c <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001ca2:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <MX_UART4_Init+0x5c>)
 8001ca4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001ca8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <MX_UART4_Init+0x58>)
 8001ce0:	f008 fefa 	bl	800aad8 <HAL_UART_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001cea:	f7ff fa85 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	200008ac 	.word	0x200008ac
 8001cf8:	40004c00 	.word	0x40004c00

08001cfc <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d00:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d02:	4a15      	ldr	r2, [pc, #84]	@ (8001d58 <MX_UART5_Init+0x5c>)
 8001d04:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d0c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d0e:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d14:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d22:	220c      	movs	r2, #12
 8001d24:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d2c:	4b09      	ldr	r3, [pc, #36]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d38:	4b06      	ldr	r3, [pc, #24]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d3e:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <MX_UART5_Init+0x58>)
 8001d40:	f008 feca 	bl	800aad8 <HAL_UART_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d4a:	f7ff fa55 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000934 	.word	0x20000934
 8001d58:	40005000 	.word	0x40005000

08001d5c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d60:	4b14      	ldr	r3, [pc, #80]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d62:	4a15      	ldr	r2, [pc, #84]	@ (8001db8 <MX_USART3_UART_Init+0x5c>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d66:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0f      	ldr	r3, [pc, #60]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b0c      	ldr	r3, [pc, #48]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b09      	ldr	r3, [pc, #36]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d98:	4b06      	ldr	r3, [pc, #24]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d9e:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <MX_USART3_UART_Init+0x58>)
 8001da0:	f008 fe9a 	bl	800aad8 <HAL_UART_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001daa:	f7ff fa25 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200009bc 	.word	0x200009bc
 8001db8:	40004800 	.word	0x40004800

08001dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b0b0      	sub	sp, #192	@ 0xc0
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	609a      	str	r2, [r3, #8]
 8001dd0:	60da      	str	r2, [r3, #12]
 8001dd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dd8:	2284      	movs	r2, #132	@ 0x84
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f01e fbb5 	bl	802054c <memset>
  if(uartHandle->Instance==UART4)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4ab0      	ldr	r2, [pc, #704]	@ (80020a8 <HAL_UART_MspInit+0x2ec>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d173      	bne.n	8001ed4 <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001df0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f006 fa44 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001e06:	f7ff f9f7 	bl	80011f8 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e0a:	4ba8      	ldr	r3, [pc, #672]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	4aa7      	ldr	r2, [pc, #668]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001e10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e16:	4ba5      	ldr	r3, [pc, #660]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e22:	4ba2      	ldr	r3, [pc, #648]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4aa1      	ldr	r2, [pc, #644]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b9f      	ldr	r3, [pc, #636]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	623b      	str	r3, [r7, #32]
 8001e38:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e3a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e54:	2308      	movs	r3, #8
 8001e56:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4893      	ldr	r0, [pc, #588]	@ (80020b0 <HAL_UART_MspInit+0x2f4>)
 8001e62:	f003 f915 	bl	8005090 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001e66:	4b93      	ldr	r3, [pc, #588]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e68:	4a93      	ldr	r2, [pc, #588]	@ (80020b8 <HAL_UART_MspInit+0x2fc>)
 8001e6a:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001e6c:	4b91      	ldr	r3, [pc, #580]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e72:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e74:	4b8f      	ldr	r3, [pc, #572]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e7a:	4b8e      	ldr	r3, [pc, #568]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e80:	4b8c      	ldr	r3, [pc, #560]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e86:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e88:	4b8a      	ldr	r3, [pc, #552]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e8e:	4b89      	ldr	r3, [pc, #548]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001e94:	4b87      	ldr	r3, [pc, #540]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e9a:	4b86      	ldr	r3, [pc, #536]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ea0:	4b84      	ldr	r3, [pc, #528]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001ea6:	4883      	ldr	r0, [pc, #524]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001ea8:	f001 fa04 	bl	80032b4 <HAL_DMA_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001eb2:	f7ff f9a1 	bl	80011f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a7e      	ldr	r2, [pc, #504]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001eba:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ebc:	4a7d      	ldr	r2, [pc, #500]	@ (80020b4 <HAL_UART_MspInit+0x2f8>)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2105      	movs	r1, #5
 8001ec6:	2034      	movs	r0, #52	@ 0x34
 8001ec8:	f000 ffc0 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001ecc:	2034      	movs	r0, #52	@ 0x34
 8001ece:	f000 ffd9 	bl	8002e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ed2:	e0e4      	b.n	800209e <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a78      	ldr	r2, [pc, #480]	@ (80020bc <HAL_UART_MspInit+0x300>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	f040 8095 	bne.w	800200a <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001eea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f006 f9ca 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_UART_MspInit+0x142>
      Error_Handler();
 8001efa:	f7ff f97d 	bl	80011f8 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001efe:	4b6b      	ldr	r3, [pc, #428]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	4a6a      	ldr	r2, [pc, #424]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f04:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f0a:	4b68      	ldr	r3, [pc, #416]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f16:	4b65      	ldr	r3, [pc, #404]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a64      	ldr	r2, [pc, #400]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f1c:	f043 0304 	orr.w	r3, r3, #4
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b62      	ldr	r3, [pc, #392]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f003 0304 	and.w	r3, r3, #4
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a5e      	ldr	r2, [pc, #376]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b5c      	ldr	r3, [pc, #368]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f60:	2308      	movs	r3, #8
 8001f62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f66:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4850      	ldr	r0, [pc, #320]	@ (80020b0 <HAL_UART_MspInit+0x2f4>)
 8001f6e:	f003 f88f 	bl	8005090 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f72:	2304      	movs	r3, #4
 8001f74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f90:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f94:	4619      	mov	r1, r3
 8001f96:	484a      	ldr	r0, [pc, #296]	@ (80020c0 <HAL_UART_MspInit+0x304>)
 8001f98:	f003 f87a 	bl	8005090 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8001f9c:	4b49      	ldr	r3, [pc, #292]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80020c8 <HAL_UART_MspInit+0x30c>)
 8001fa0:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8001fa2:	4b48      	ldr	r3, [pc, #288]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fa4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fa8:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001faa:	4b46      	ldr	r3, [pc, #280]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb0:	4b44      	ldr	r3, [pc, #272]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb6:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fb8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fbc:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fbe:	4b41      	ldr	r3, [pc, #260]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8001fca:	4b3e      	ldr	r3, [pc, #248]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8001fdc:	4839      	ldr	r0, [pc, #228]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001fde:	f001 f969 	bl	80032b4 <HAL_DMA_Init>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_UART_MspInit+0x230>
      Error_Handler();
 8001fe8:	f7ff f906 	bl	80011f8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a35      	ldr	r2, [pc, #212]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001ff0:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ff2:	4a34      	ldr	r2, [pc, #208]	@ (80020c4 <HAL_UART_MspInit+0x308>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	2105      	movs	r1, #5
 8001ffc:	2035      	movs	r0, #53	@ 0x35
 8001ffe:	f000 ff25 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002002:	2035      	movs	r0, #53	@ 0x35
 8002004:	f000 ff3e 	bl	8002e84 <HAL_NVIC_EnableIRQ>
}
 8002008:	e049      	b.n	800209e <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2f      	ldr	r2, [pc, #188]	@ (80020cc <HAL_UART_MspInit+0x310>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d144      	bne.n	800209e <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002014:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002018:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800201a:	2300      	movs	r3, #0
 800201c:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800201e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002022:	4618      	mov	r0, r3
 8002024:	f006 f930 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_UART_MspInit+0x276>
      Error_Handler();
 800202e:	f7ff f8e3 	bl	80011f8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002032:	4b1e      	ldr	r3, [pc, #120]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	4a1d      	ldr	r2, [pc, #116]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8002038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800203c:	6413      	str	r3, [r2, #64]	@ 0x40
 800203e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800204a:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	4a17      	ldr	r2, [pc, #92]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6313      	str	r3, [r2, #48]	@ 0x30
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_UART_MspInit+0x2f0>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002062:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002066:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800207c:	2307      	movs	r3, #7
 800207e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002082:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002086:	4619      	mov	r1, r3
 8002088:	480d      	ldr	r0, [pc, #52]	@ (80020c0 <HAL_UART_MspInit+0x304>)
 800208a:	f003 f801 	bl	8005090 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2105      	movs	r1, #5
 8002092:	2027      	movs	r0, #39	@ 0x27
 8002094:	f000 feda 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002098:	2027      	movs	r0, #39	@ 0x27
 800209a:	f000 fef3 	bl	8002e84 <HAL_NVIC_EnableIRQ>
}
 800209e:	bf00      	nop
 80020a0:	37c0      	adds	r7, #192	@ 0xc0
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40004c00 	.word	0x40004c00
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020800 	.word	0x40020800
 80020b4:	20000a44 	.word	0x20000a44
 80020b8:	40026040 	.word	0x40026040
 80020bc:	40005000 	.word	0x40005000
 80020c0:	40020c00 	.word	0x40020c00
 80020c4:	20000aa4 	.word	0x20000aa4
 80020c8:	40026010 	.word	0x40026010
 80020cc:	40004800 	.word	0x40004800

080020d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002108 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d4:	f7ff fce0 	bl	8001a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020d8:	480c      	ldr	r0, [pc, #48]	@ (800210c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020da:	490d      	ldr	r1, [pc, #52]	@ (8002110 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002114 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e0:	e002      	b.n	80020e8 <LoopCopyDataInit>

080020e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020e6:	3304      	adds	r3, #4

080020e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ec:	d3f9      	bcc.n	80020e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020f0:	4c0a      	ldr	r4, [pc, #40]	@ (800211c <LoopFillZerobss+0x22>)
  movs r3, #0
 80020f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020f4:	e001      	b.n	80020fa <LoopFillZerobss>

080020f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f8:	3204      	adds	r2, #4

080020fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020fc:	d3fb      	bcc.n	80020f6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80020fe:	f01e fad1 	bl	80206a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002102:	f7fe ffd3 	bl	80010ac <main>
  bx  lr    
 8002106:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002108:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800210c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002110:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002114:	08024fc4 	.word	0x08024fc4
  ldr r2, =_sbss
 8002118:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 800211c:	200258bc 	.word	0x200258bc

08002120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC_IRQHandler>

08002122 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00b      	beq.n	800214a <LAN8742_RegisterBusIO+0x28>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d007      	beq.n	800214a <LAN8742_RegisterBusIO+0x28>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <LAN8742_RegisterBusIO+0x28>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800214a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800214e:	e014      	b.n	800217a <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d139      	bne.n	8002216 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e01c      	b.n	80021f6 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	f107 020c 	add.w	r2, r7, #12
 80021c4:	2112      	movs	r1, #18
 80021c6:	6978      	ldr	r0, [r7, #20]
 80021c8:	4798      	blx	r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	da03      	bge.n	80021d8 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80021d0:	f06f 0304 	mvn.w	r3, #4
 80021d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80021d6:	e00b      	b.n	80021f0 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 031f 	and.w	r3, r3, #31
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d105      	bne.n	80021f0 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
         break;
 80021ee:	e005      	b.n	80021fc <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3301      	adds	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b1f      	cmp	r3, #31
 80021fa:	d9df      	bls.n	80021bc <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2b1f      	cmp	r3, #31
 8002202:	d902      	bls.n	800220a <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002204:	f06f 0302 	mvn.w	r3, #2
 8002208:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d102      	bne.n	8002216 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002216:	693b      	ldr	r3, [r7, #16]
 }
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	695b      	ldr	r3, [r3, #20]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6810      	ldr	r0, [r2, #0]
 8002234:	f107 020c 	add.w	r2, r7, #12
 8002238:	2101      	movs	r1, #1
 800223a:	4798      	blx	r3
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	da02      	bge.n	8002248 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002242:	f06f 0304 	mvn.w	r3, #4
 8002246:	e06e      	b.n	8002326 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6810      	ldr	r0, [r2, #0]
 8002250:	f107 020c 	add.w	r2, r7, #12
 8002254:	2101      	movs	r1, #1
 8002256:	4798      	blx	r3
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	da02      	bge.n	8002264 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800225e:	f06f 0304 	mvn.w	r3, #4
 8002262:	e060      	b.n	8002326 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800226e:	2301      	movs	r3, #1
 8002270:	e059      	b.n	8002326 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6810      	ldr	r0, [r2, #0]
 800227a:	f107 020c 	add.w	r2, r7, #12
 800227e:	2100      	movs	r1, #0
 8002280:	4798      	blx	r3
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	da02      	bge.n	800228e <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002288:	f06f 0304 	mvn.w	r3, #4
 800228c:	e04b      	b.n	8002326 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d11b      	bne.n	80022d0 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d006      	beq.n	80022b0 <LAN8742_GetLinkState+0x90>
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80022ac:	2302      	movs	r3, #2
 80022ae:	e03a      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e033      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80022c8:	2304      	movs	r3, #4
 80022ca:	e02c      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80022cc:	2305      	movs	r3, #5
 80022ce:	e02a      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6810      	ldr	r0, [r2, #0]
 80022d8:	f107 020c 	add.w	r2, r7, #12
 80022dc:	211f      	movs	r1, #31
 80022de:	4798      	blx	r3
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da02      	bge.n	80022ec <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80022e6:	f06f 0304 	mvn.w	r3, #4
 80022ea:	e01c      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80022f6:	2306      	movs	r3, #6
 80022f8:	e015      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f003 031c 	and.w	r3, r3, #28
 8002300:	2b18      	cmp	r3, #24
 8002302:	d101      	bne.n	8002308 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002304:	2302      	movs	r3, #2
 8002306:	e00e      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 031c 	and.w	r3, r3, #28
 800230e:	2b08      	cmp	r3, #8
 8002310:	d101      	bne.n	8002316 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002312:	2303      	movs	r3, #3
 8002314:	e007      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 031c 	and.w	r3, r3, #28
 800231c:	2b14      	cmp	r3, #20
 800231e:	d101      	bne.n	8002324 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002320:	2304      	movs	r3, #4
 8002322:	e000      	b.n	8002326 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002324:	2305      	movs	r3, #5
    }
  }
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002332:	2003      	movs	r0, #3
 8002334:	f000 fd7f 	bl	8002e36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002338:	200f      	movs	r0, #15
 800233a:	f7ff f96f 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233e:	f7ff f945 	bl	80015cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800234c:	4b06      	ldr	r3, [pc, #24]	@ (8002368 <HAL_IncTick+0x20>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	@ (800236c <HAL_IncTick+0x24>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a04      	ldr	r2, [pc, #16]	@ (800236c <HAL_IncTick+0x24>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000008 	.word	0x20000008
 800236c:	20000b04 	.word	0x20000b04

08002370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b03      	ldr	r3, [pc, #12]	@ (8002384 <HAL_GetTick+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	20000b04 	.word	0x20000b04

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff ffee 	bl	8002370 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	@ (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023ae:	bf00      	nop
 80023b0:	f7ff ffde 	bl	8002370 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000008 	.word	0x20000008

080023d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d8:	2300      	movs	r3, #0
 80023da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e031      	b.n	800244a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d109      	bne.n	8002402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe f946 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	2b00      	cmp	r3, #0
 800240c:	d116      	bne.n	800243c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002412:	4b10      	ldr	r3, [pc, #64]	@ (8002454 <HAL_ADC_Init+0x84>)
 8002414:	4013      	ands	r3, r2
 8002416:	f043 0202 	orr.w	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 fae0 	bl	80029e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
 800243a:	e001      	b.n	8002440 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	ffffeefd 	.word	0xffffeefd

08002458 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002464:	2300      	movs	r3, #0
 8002466:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002472:	2b01      	cmp	r3, #1
 8002474:	d101      	bne.n	800247a <HAL_ADC_Start_DMA+0x22>
 8002476:	2302      	movs	r3, #2
 8002478:	e0d6      	b.n	8002628 <HAL_ADC_Start_DMA+0x1d0>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b01      	cmp	r3, #1
 800248e:	d018      	beq.n	80024c2 <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80024a0:	4b63      	ldr	r3, [pc, #396]	@ (8002630 <HAL_ADC_Start_DMA+0x1d8>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a63      	ldr	r2, [pc, #396]	@ (8002634 <HAL_ADC_Start_DMA+0x1dc>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0c9a      	lsrs	r2, r3, #18
 80024ac:	4613      	mov	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	4413      	add	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024b4:	e002      	b.n	80024bc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1f9      	bne.n	80024b6 <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	f040 809e 	bne.w	800260e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024d6:	4b58      	ldr	r3, [pc, #352]	@ (8002638 <HAL_ADC_Start_DMA+0x1e0>)
 80024d8:	4013      	ands	r3, r2
 80024da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d007      	beq.n	8002500 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024f4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024f8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002504:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800250c:	d106      	bne.n	800251c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002512:	f023 0206 	bic.w	r2, r3, #6
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	645a      	str	r2, [r3, #68]	@ 0x44
 800251a:	e002      	b.n	8002522 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800252e:	4a43      	ldr	r2, [pc, #268]	@ (800263c <HAL_ADC_Start_DMA+0x1e4>)
 8002530:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002536:	4a42      	ldr	r2, [pc, #264]	@ (8002640 <HAL_ADC_Start_DMA+0x1e8>)
 8002538:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800253e:	4a41      	ldr	r2, [pc, #260]	@ (8002644 <HAL_ADC_Start_DMA+0x1ec>)
 8002540:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800254a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800255a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800256a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	334c      	adds	r3, #76	@ 0x4c
 8002576:	4619      	mov	r1, r3
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f000 ff48 	bl	8003410 <HAL_DMA_Start_IT>
 8002580:	4603      	mov	r3, r0
 8002582:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002584:	4b30      	ldr	r3, [pc, #192]	@ (8002648 <HAL_ADC_Start_DMA+0x1f0>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2b00      	cmp	r3, #0
 800258e:	d10f      	bne.n	80025b0 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d143      	bne.n	8002626 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	e03a      	b.n	8002626 <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a25      	ldr	r2, [pc, #148]	@ (800264c <HAL_ADC_Start_DMA+0x1f4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d10e      	bne.n	80025d8 <HAL_ADC_Start_DMA+0x180>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025d6:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <HAL_ADC_Start_DMA+0x1f0>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0310 	and.w	r3, r3, #16
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d120      	bne.n	8002626 <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a19      	ldr	r2, [pc, #100]	@ (8002650 <HAL_ADC_Start_DMA+0x1f8>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d11b      	bne.n	8002626 <HAL_ADC_Start_DMA+0x1ce>
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d114      	bne.n	8002626 <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e00b      	b.n	8002626 <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f043 0210 	orr.w	r2, r3, #16
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	f043 0201 	orr.w	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	20000000 	.word	0x20000000
 8002634:	431bde83 	.word	0x431bde83
 8002638:	fffff8fe 	.word	0xfffff8fe
 800263c:	08002bd9 	.word	0x08002bd9
 8002640:	08002c93 	.word	0x08002c93
 8002644:	08002caf 	.word	0x08002caf
 8002648:	40012300 	.word	0x40012300
 800264c:	40012000 	.word	0x40012000
 8002650:	40012200 	.word	0x40012200

08002654 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800265c:	2300      	movs	r3, #0
 800265e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_ADC_Stop_DMA+0x1a>
 800266a:	2302      	movs	r3, #2
 800266c:	e046      	b.n	80026fc <HAL_ADC_Stop_DMA+0xa8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b00      	cmp	r3, #0
 8002692:	d12e      	bne.n	80026f2 <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026a2:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d10f      	bne.n	80026d2 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 ff0a 	bl	80034d0 <HAL_DMA_Abort>
 80026bc:	4603      	mov	r3, r0
 80026be:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 80026e0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026e6:	4b07      	ldr	r3, [pc, #28]	@ (8002704 <HAL_ADC_Stop_DMA+0xb0>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	ffffeefe 	.word	0xffffeefe

08002708 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800273a:	2300      	movs	r3, #0
 800273c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002744:	2b01      	cmp	r3, #1
 8002746:	d101      	bne.n	800274c <HAL_ADC_ConfigChannel+0x1c>
 8002748:	2302      	movs	r3, #2
 800274a:	e13a      	b.n	80029c2 <HAL_ADC_ConfigChannel+0x292>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b09      	cmp	r3, #9
 800275a:	d93a      	bls.n	80027d2 <HAL_ADC_ConfigChannel+0xa2>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002764:	d035      	beq.n	80027d2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68d9      	ldr	r1, [r3, #12]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	461a      	mov	r2, r3
 8002774:	4613      	mov	r3, r2
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4413      	add	r3, r2
 800277a:	3b1e      	subs	r3, #30
 800277c:	2207      	movs	r2, #7
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43da      	mvns	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	400a      	ands	r2, r1
 800278a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a8f      	ldr	r2, [pc, #572]	@ (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	061a      	lsls	r2, r3, #24
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027aa:	e039      	b.n	8002820 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68d9      	ldr	r1, [r3, #12]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4403      	add	r3, r0
 80027c4:	3b1e      	subs	r3, #30
 80027c6:	409a      	lsls	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027d0:	e026      	b.n	8002820 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6919      	ldr	r1, [r3, #16]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2207      	movs	r2, #7
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43da      	mvns	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	400a      	ands	r2, r1
 80027f8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	4618      	mov	r0, r3
 800280c:	4603      	mov	r3, r0
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4403      	add	r3, r0
 8002812:	f003 031f 	and.w	r3, r3, #31
 8002816:	409a      	lsls	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b06      	cmp	r3, #6
 8002826:	d824      	bhi.n	8002872 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	3b05      	subs	r3, #5
 800283a:	221f      	movs	r2, #31
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43da      	mvns	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	400a      	ands	r2, r1
 8002848:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b05      	subs	r3, #5
 8002864:	fa00 f203 	lsl.w	r2, r0, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002870:	e04c      	b.n	800290c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d824      	bhi.n	80028c4 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b23      	subs	r3, #35	@ 0x23
 800288c:	221f      	movs	r2, #31
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	400a      	ands	r2, r1
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b23      	subs	r3, #35	@ 0x23
 80028b6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80028c2:	e023      	b.n	800290c <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	3b41      	subs	r3, #65	@ 0x41
 80028d6:	221f      	movs	r2, #31
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43da      	mvns	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	400a      	ands	r2, r1
 80028e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	4618      	mov	r0, r3
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685a      	ldr	r2, [r3, #4]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	3b41      	subs	r3, #65	@ 0x41
 8002900:	fa00 f203 	lsl.w	r2, r0, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	430a      	orrs	r2, r1
 800290a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a30      	ldr	r2, [pc, #192]	@ (80029d4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d10a      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1fc>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800291e:	d105      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002920:	4b2d      	ldr	r3, [pc, #180]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a2c      	ldr	r2, [pc, #176]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002926:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800292a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a28      	ldr	r2, [pc, #160]	@ (80029d4 <HAL_ADC_ConfigChannel+0x2a4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d10f      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x226>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b12      	cmp	r3, #18
 800293c:	d10b      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800293e:	4b26      	ldr	r3, [pc, #152]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a25      	ldr	r2, [pc, #148]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002944:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002948:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800294a:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	4a22      	ldr	r2, [pc, #136]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002950:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002954:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a1e      	ldr	r2, [pc, #120]	@ (80029d4 <HAL_ADC_ConfigChannel+0x2a4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d12b      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x288>
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a1a      	ldr	r2, [pc, #104]	@ (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d003      	beq.n	8002972 <HAL_ADC_ConfigChannel+0x242>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b11      	cmp	r3, #17
 8002970:	d122      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002972:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002978:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800297c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800297e:	4b16      	ldr	r3, [pc, #88]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4a15      	ldr	r2, [pc, #84]	@ (80029d8 <HAL_ADC_ConfigChannel+0x2a8>)
 8002984:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002988:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a10      	ldr	r2, [pc, #64]	@ (80029d0 <HAL_ADC_ConfigChannel+0x2a0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <HAL_ADC_ConfigChannel+0x2ac>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a11      	ldr	r2, [pc, #68]	@ (80029e0 <HAL_ADC_ConfigChannel+0x2b0>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0c9a      	lsrs	r2, r3, #18
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029aa:	e002      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d1f9      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	10000012 	.word	0x10000012
 80029d4:	40012000 	.word	0x40012000
 80029d8:	40012300 	.word	0x40012300
 80029dc:	20000000 	.word	0x20000000
 80029e0:	431bde83 	.word	0x431bde83

080029e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029ec:	4b78      	ldr	r3, [pc, #480]	@ (8002bd0 <ADC_Init+0x1ec>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4a77      	ldr	r2, [pc, #476]	@ (8002bd0 <ADC_Init+0x1ec>)
 80029f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80029f6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029f8:	4b75      	ldr	r3, [pc, #468]	@ (8002bd0 <ADC_Init+0x1ec>)
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	4973      	ldr	r1, [pc, #460]	@ (8002bd0 <ADC_Init+0x1ec>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6859      	ldr	r1, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	691b      	ldr	r3, [r3, #16]
 8002a20:	021a      	lsls	r2, r3, #8
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689a      	ldr	r2, [r3, #8]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6899      	ldr	r1, [r3, #8]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68da      	ldr	r2, [r3, #12]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	4a58      	ldr	r2, [pc, #352]	@ (8002bd4 <ADC_Init+0x1f0>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d022      	beq.n	8002abe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6899      	ldr	r1, [r3, #8]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002aa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6899      	ldr	r1, [r3, #8]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	e00f      	b.n	8002ade <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002acc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002adc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0202 	bic.w	r2, r2, #2
 8002aec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	6899      	ldr	r1, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	699b      	ldr	r3, [r3, #24]
 8002af8:	005a      	lsls	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d01b      	beq.n	8002b44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b36:	3b01      	subs	r3, #1
 8002b38:	035a      	lsls	r2, r3, #13
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	e007      	b.n	8002b54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b62:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	051a      	lsls	r2, r3, #20
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	430a      	orrs	r2, r1
 8002b78:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6899      	ldr	r1, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b96:	025a      	lsls	r2, r3, #9
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6899      	ldr	r1, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	029a      	lsls	r2, r3, #10
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	40012300 	.word	0x40012300
 8002bd4:	0f000001 	.word	0x0f000001

08002bd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d13c      	bne.n	8002c6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d12b      	bne.n	8002c64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d127      	bne.n	8002c64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d119      	bne.n	8002c64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f022 0220 	bic.w	r2, r2, #32
 8002c3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d105      	bne.n	8002c64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5c:	f043 0201 	orr.w	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f01c f969 	bl	801ef3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c6a:	e00e      	b.n	8002c8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff fd4f 	bl	800271c <HAL_ADC_ErrorCallback>
}
 8002c7e:	e004      	b.n	8002c8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
}
 8002c8a:	bf00      	nop
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f7ff fd31 	bl	8002708 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ca6:	bf00      	nop
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b084      	sub	sp, #16
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2240      	movs	r2, #64	@ 0x40
 8002cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc6:	f043 0204 	orr.w	r2, r3, #4
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff fd24 	bl	800271c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <__NVIC_SetPriorityGrouping+0x40>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d04:	4b06      	ldr	r3, [pc, #24]	@ (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0a:	4a04      	ldr	r2, [pc, #16]	@ (8002d1c <__NVIC_SetPriorityGrouping+0x40>)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	60d3      	str	r3, [r2, #12]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	e000ed00 	.word	0xe000ed00
 8002d20:	05fa0000 	.word	0x05fa0000

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	db0b      	blt.n	8002d6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4907      	ldr	r1, [pc, #28]	@ (8002d78 <__NVIC_EnableIRQ+0x38>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2001      	movs	r0, #1
 8002d62:	fa00 f202 	lsl.w	r2, r0, r2
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	@ (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	@ (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	@ 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	@ 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b082      	sub	sp, #8
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f7ff ff4c 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	4603      	mov	r3, r0
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
 8002e58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e5e:	f7ff ff61 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002e62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	68b9      	ldr	r1, [r7, #8]
 8002e68:	6978      	ldr	r0, [r7, #20]
 8002e6a:	f7ff ffb1 	bl	8002dd0 <NVIC_EncodePriority>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff80 	bl	8002d7c <__NVIC_SetPriority>
}
 8002e7c:	bf00      	nop
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff54 	bl	8002d40 <__NVIC_EnableIRQ>
}
 8002e98:	bf00      	nop
 8002e9a:	3708      	adds	r7, #8
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e054      	b.n	8002f5c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	7f5b      	ldrb	r3, [r3, #29]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d105      	bne.n	8002ec8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd fc70 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	791b      	ldrb	r3, [r3, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10c      	bne.n	8002ef0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a22      	ldr	r2, [pc, #136]	@ (8002f64 <HAL_CRC_Init+0xc4>)
 8002edc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0218 	bic.w	r2, r2, #24
 8002eec:	609a      	str	r2, [r3, #8]
 8002eee:	e00c      	b.n	8002f0a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6899      	ldr	r1, [r3, #8]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	461a      	mov	r2, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f94c 	bl	8003198 <HAL_CRCEx_Polynomial_Set>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e028      	b.n	8002f5c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	795b      	ldrb	r3, [r3, #5]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f1a:	611a      	str	r2, [r3, #16]
 8002f1c:	e004      	b.n	8002f28 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6912      	ldr	r2, [r2, #16]
 8002f26:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699a      	ldr	r2, [r3, #24]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	04c11db7 	.word	0x04c11db7

08002f68 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689a      	ldr	r2, [r3, #8]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	2b03      	cmp	r3, #3
 8002f94:	d006      	beq.n	8002fa4 <HAL_CRC_Calculate+0x3c>
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d829      	bhi.n	8002fee <HAL_CRC_Calculate+0x86>
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d019      	beq.n	8002fd2 <HAL_CRC_Calculate+0x6a>
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d01e      	beq.n	8002fe0 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8002fa2:	e024      	b.n	8002fee <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e00a      	b.n	8002fc0 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	441a      	add	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697a      	ldr	r2, [r7, #20]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d3f0      	bcc.n	8002faa <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	613b      	str	r3, [r7, #16]
      break;
 8002fd0:	e00e      	b.n	8002ff0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f812 	bl	8003000 <CRC_Handle_8>
 8002fdc:	6138      	str	r0, [r7, #16]
      break;
 8002fde:	e007      	b.n	8002ff0 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	68f8      	ldr	r0, [r7, #12]
 8002fe6:	f000 f89d 	bl	8003124 <CRC_Handle_16>
 8002fea:	6138      	str	r0, [r7, #16]
      break;
 8002fec:	e000      	b.n	8002ff0 <HAL_CRC_Calculate+0x88>
      break;
 8002fee:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8002ff6:	693b      	ldr	r3, [r7, #16]
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	@ 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800300c:	2300      	movs	r3, #0
 800300e:	61fb      	str	r3, [r7, #28]
 8003010:	e023      	b.n	800305a <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	68ba      	ldr	r2, [r7, #8]
 8003018:	4413      	add	r3, r2
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	3301      	adds	r3, #1
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	440b      	add	r3, r1
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800302c:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	440b      	add	r3, r1
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800303c:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	3303      	adds	r3, #3
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	440b      	add	r3, r1
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003050:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003052:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	3301      	adds	r3, #1
 8003058:	61fb      	str	r3, [r7, #28]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	429a      	cmp	r2, r3
 8003062:	d3d6      	bcc.n	8003012 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d051      	beq.n	8003112 <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d108      	bne.n	800308a <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	4413      	add	r3, r2
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	7013      	strb	r3, [r2, #0]
 8003088:	e043      	b.n	8003112 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d118      	bne.n	80030c6 <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	68ba      	ldr	r2, [r7, #8]
 800309a:	4413      	add	r3, r2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	b21b      	sxth	r3, r3
 80030a0:	021b      	lsls	r3, r3, #8
 80030a2:	b21a      	sxth	r2, r3
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	3301      	adds	r3, #1
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	440b      	add	r3, r1
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	b21b      	sxth	r3, r3
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b21b      	sxth	r3, r3
 80030b6:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	8b7a      	ldrh	r2, [r7, #26]
 80030c2:	801a      	strh	r2, [r3, #0]
 80030c4:	e025      	b.n	8003112 <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d120      	bne.n	8003112 <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4413      	add	r3, r2
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b21b      	sxth	r3, r3
 80030dc:	021b      	lsls	r3, r3, #8
 80030de:	b21a      	sxth	r2, r3
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	3301      	adds	r3, #1
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	440b      	add	r3, r1
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	4313      	orrs	r3, r2
 80030f0:	b21b      	sxth	r3, r3
 80030f2:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	8b7a      	ldrh	r2, [r7, #26]
 80030fe:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	4413      	add	r3, r2
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3724      	adds	r7, #36	@ 0x24
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8003124:	b480      	push	{r7}
 8003126:	b087      	sub	sp, #28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003130:	2300      	movs	r3, #0
 8003132:	617b      	str	r3, [r7, #20]
 8003134:	e013      	b.n	800315e <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	4413      	add	r3, r2
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	041a      	lsls	r2, r3, #16
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	3302      	adds	r3, #2
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	440b      	add	r3, r1
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	4619      	mov	r1, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	d3e6      	bcc.n	8003136 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	4413      	add	r3, r2
 8003180:	881a      	ldrh	r2, [r3, #0]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80031a8:	231f      	movs	r3, #31
 80031aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
 80031ba:	e063      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80031bc:	bf00      	nop
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	613a      	str	r2, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <HAL_CRCEx_Polynomial_Set+0x44>
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b18      	cmp	r3, #24
 80031e0:	d846      	bhi.n	8003270 <HAL_CRCEx_Polynomial_Set+0xd8>
 80031e2:	a201      	add	r2, pc, #4	@ (adr r2, 80031e8 <HAL_CRCEx_Polynomial_Set+0x50>)
 80031e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e8:	08003277 	.word	0x08003277
 80031ec:	08003271 	.word	0x08003271
 80031f0:	08003271 	.word	0x08003271
 80031f4:	08003271 	.word	0x08003271
 80031f8:	08003271 	.word	0x08003271
 80031fc:	08003271 	.word	0x08003271
 8003200:	08003271 	.word	0x08003271
 8003204:	08003271 	.word	0x08003271
 8003208:	08003265 	.word	0x08003265
 800320c:	08003271 	.word	0x08003271
 8003210:	08003271 	.word	0x08003271
 8003214:	08003271 	.word	0x08003271
 8003218:	08003271 	.word	0x08003271
 800321c:	08003271 	.word	0x08003271
 8003220:	08003271 	.word	0x08003271
 8003224:	08003271 	.word	0x08003271
 8003228:	08003259 	.word	0x08003259
 800322c:	08003271 	.word	0x08003271
 8003230:	08003271 	.word	0x08003271
 8003234:	08003271 	.word	0x08003271
 8003238:	08003271 	.word	0x08003271
 800323c:	08003271 	.word	0x08003271
 8003240:	08003271 	.word	0x08003271
 8003244:	08003271 	.word	0x08003271
 8003248:	0800324d 	.word	0x0800324d
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	2b06      	cmp	r3, #6
 8003250:	d913      	bls.n	800327a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003256:	e010      	b.n	800327a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	2b07      	cmp	r3, #7
 800325c:	d90f      	bls.n	800327e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8003262:	e00c      	b.n	800327e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d90b      	bls.n	8003282 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800326e:	e008      	b.n	8003282 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
        break;
 8003274:	e006      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003276:	bf00      	nop
 8003278:	e004      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800327a:	bf00      	nop
 800327c:	e002      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800327e:	bf00      	nop
 8003280:	e000      	b.n	8003284 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8003282:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68ba      	ldr	r2, [r7, #8]
 8003290:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 0118 	bic.w	r1, r3, #24
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80032a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	371c      	adds	r7, #28
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b086      	sub	sp, #24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032c0:	f7ff f856 	bl	8002370 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e099      	b.n	8003404 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032f0:	e00f      	b.n	8003312 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032f2:	f7ff f83d 	bl	8002370 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b05      	cmp	r3, #5
 80032fe:	d908      	bls.n	8003312 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2203      	movs	r2, #3
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e078      	b.n	8003404 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1e8      	bne.n	80032f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	4b38      	ldr	r3, [pc, #224]	@ (800340c <HAL_DMA_Init+0x158>)
 800332c:	4013      	ands	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003356:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a1b      	ldr	r3, [r3, #32]
 800335c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	2b04      	cmp	r3, #4
 800336a:	d107      	bne.n	800337c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	4313      	orrs	r3, r2
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	697a      	ldr	r2, [r7, #20]
 8003382:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f023 0307 	bic.w	r3, r3, #7
 8003392:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	697a      	ldr	r2, [r7, #20]
 800339a:	4313      	orrs	r3, r2
 800339c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d117      	bne.n	80033d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00e      	beq.n	80033d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 fb77 	bl	8003aac <DMA_CheckFifoParam>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d008      	beq.n	80033d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2240      	movs	r2, #64	@ 0x40
 80033c8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033d2:	2301      	movs	r3, #1
 80033d4:	e016      	b.n	8003404 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fb2e 	bl	8003a40 <DMA_CalcBaseAndBitshift>
 80033e4:	4603      	mov	r3, r0
 80033e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ec:	223f      	movs	r2, #63	@ 0x3f
 80033ee:	409a      	lsls	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	f010803f 	.word	0xf010803f

08003410 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <HAL_DMA_Start_IT+0x26>
 8003432:	2302      	movs	r3, #2
 8003434:	e048      	b.n	80034c8 <HAL_DMA_Start_IT+0xb8>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b01      	cmp	r3, #1
 8003448:	d137      	bne.n	80034ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2202      	movs	r2, #2
 800344e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	68b9      	ldr	r1, [r7, #8]
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fac0 	bl	80039e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	223f      	movs	r2, #63	@ 0x3f
 800346a:	409a      	lsls	r2, r3
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f042 0216 	orr.w	r2, r2, #22
 800347e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800348e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	2b00      	cmp	r3, #0
 8003496:	d007      	beq.n	80034a8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0208 	orr.w	r2, r2, #8
 80034a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	e005      	b.n	80034c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
 80034c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034de:	f7fe ff47 	bl	8002370 <HAL_GetTick>
 80034e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d008      	beq.n	8003502 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2280      	movs	r2, #128	@ 0x80
 80034f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e052      	b.n	80035a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003520:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_Abort+0x62>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0201 	bic.w	r2, r2, #1
 8003550:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003552:	e013      	b.n	800357c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003554:	f7fe ff0c 	bl	8002370 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b05      	cmp	r3, #5
 8003560:	d90c      	bls.n	800357c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2220      	movs	r2, #32
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2203      	movs	r2, #3
 800356c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e015      	b.n	80035a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e4      	bne.n	8003554 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358e:	223f      	movs	r2, #63	@ 0x3f
 8003590:	409a      	lsls	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2280      	movs	r2, #128	@ 0x80
 80035c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00c      	b.n	80035e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2205      	movs	r2, #5
 80035d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0201 	bic.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003600:	4b8e      	ldr	r3, [pc, #568]	@ (800383c <HAL_DMA_IRQHandler+0x248>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a8e      	ldr	r2, [pc, #568]	@ (8003840 <HAL_DMA_IRQHandler+0x24c>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a9b      	lsrs	r3, r3, #10
 800360c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003612:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	2208      	movs	r2, #8
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d01a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	2b00      	cmp	r3, #0
 8003636:	d013      	beq.n	8003660 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0204 	bic.w	r2, r2, #4
 8003646:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	2208      	movs	r2, #8
 800364e:	409a      	lsls	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003658:	f043 0201 	orr.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003664:	2201      	movs	r2, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00b      	beq.n	8003696 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800369a:	2204      	movs	r2, #4
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00b      	beq.n	80036cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b8:	2204      	movs	r2, #4
 80036ba:	409a      	lsls	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	2210      	movs	r2, #16
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d043      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d03c      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ee:	2210      	movs	r2, #16
 80036f0:	409a      	lsls	r2, r3
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d018      	beq.n	8003736 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d108      	bne.n	8003724 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d024      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e01f      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e016      	b.n	8003764 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003740:	2b00      	cmp	r3, #0
 8003742:	d107      	bne.n	8003754 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0208 	bic.w	r2, r2, #8
 8003752:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003768:	2220      	movs	r2, #32
 800376a:	409a      	lsls	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	f000 808f 	beq.w	8003894 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8087 	beq.w	8003894 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800378a:	2220      	movs	r2, #32
 800378c:	409a      	lsls	r2, r3
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b05      	cmp	r3, #5
 800379c:	d136      	bne.n	800380c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0216 	bic.w	r2, r2, #22
 80037ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695a      	ldr	r2, [r3, #20]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d103      	bne.n	80037ce <HAL_DMA_IRQHandler+0x1da>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0208 	bic.w	r2, r2, #8
 80037dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037e2:	223f      	movs	r2, #63	@ 0x3f
 80037e4:	409a      	lsls	r2, r3
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d07e      	beq.n	8003900 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
        }
        return;
 800380a:	e079      	b.n	8003900 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01d      	beq.n	8003856 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10d      	bne.n	8003844 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382c:	2b00      	cmp	r3, #0
 800382e:	d031      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4798      	blx	r3
 8003838:	e02c      	b.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
 800383a:	bf00      	nop
 800383c:	20000000 	.word	0x20000000
 8003840:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d023      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e01e      	b.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10f      	bne.n	8003884 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0210 	bic.w	r2, r2, #16
 8003872:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003888:	2b00      	cmp	r3, #0
 800388a:	d003      	beq.n	8003894 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003898:	2b00      	cmp	r3, #0
 800389a:	d032      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d022      	beq.n	80038ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2205      	movs	r2, #5
 80038ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0201 	bic.w	r2, r2, #1
 80038be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	697a      	ldr	r2, [r7, #20]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d307      	bcc.n	80038dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f2      	bne.n	80038c0 <HAL_DMA_IRQHandler+0x2cc>
 80038da:	e000      	b.n	80038de <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
 80038fe:	e000      	b.n	8003902 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003900:	bf00      	nop
    }
  }
}
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	460b      	mov	r3, r1
 8003912:	607a      	str	r2, [r7, #4]
 8003914:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <HAL_DMA_RegisterCallback+0x20>
 8003924:	2302      	movs	r3, #2
 8003926:	e03d      	b.n	80039a4 <HAL_DMA_RegisterCallback+0x9c>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b01      	cmp	r3, #1
 800393a:	d12c      	bne.n	8003996 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 800393c:	7afb      	ldrb	r3, [r7, #11]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d826      	bhi.n	8003990 <HAL_DMA_RegisterCallback+0x88>
 8003942:	a201      	add	r2, pc, #4	@ (adr r2, 8003948 <HAL_DMA_RegisterCallback+0x40>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	08003961 	.word	0x08003961
 800394c:	08003969 	.word	0x08003969
 8003950:	08003971 	.word	0x08003971
 8003954:	08003979 	.word	0x08003979
 8003958:	08003981 	.word	0x08003981
 800395c:	08003989 	.word	0x08003989
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	63da      	str	r2, [r3, #60]	@ 0x3c
      break;
 8003966:	e018      	b.n	800399a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800396e:	e014      	b.n	800399a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	645a      	str	r2, [r3, #68]	@ 0x44
      break;
 8003976:	e010      	b.n	800399a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	649a      	str	r2, [r3, #72]	@ 0x48
      break;
 800397e:	e00c      	b.n	800399a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	64da      	str	r2, [r3, #76]	@ 0x4c
      break;
 8003986:	e008      	b.n	800399a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800398e:	e004      	b.n	800399a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	e001      	b.n	800399a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  return status;
 80039a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039be:	b2db      	uxtb	r3, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80039d8:	4618      	mov	r0, r3
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
 80039f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	2b40      	cmp	r3, #64	@ 0x40
 8003a10:	d108      	bne.n	8003a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a22:	e007      	b.n	8003a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]
}
 8003a34:	bf00      	nop
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	3b10      	subs	r3, #16
 8003a50:	4a13      	ldr	r2, [pc, #76]	@ (8003aa0 <DMA_CalcBaseAndBitshift+0x60>)
 8003a52:	fba2 2303 	umull	r2, r3, r2, r3
 8003a56:	091b      	lsrs	r3, r3, #4
 8003a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003a5a:	4a12      	ldr	r2, [pc, #72]	@ (8003aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d908      	bls.n	8003a80 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	461a      	mov	r2, r3
 8003a74:	4b0c      	ldr	r3, [pc, #48]	@ (8003aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	1d1a      	adds	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a7e:	e006      	b.n	8003a8e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	461a      	mov	r2, r3
 8003a86:	4b08      	ldr	r3, [pc, #32]	@ (8003aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	aaaaaaab 	.word	0xaaaaaaab
 8003aa4:	08024d64 	.word	0x08024d64
 8003aa8:	fffffc00 	.word	0xfffffc00

08003aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d11f      	bne.n	8003b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d856      	bhi.n	8003b7a <DMA_CheckFifoParam+0xce>
 8003acc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <DMA_CheckFifoParam+0x28>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003ae5 	.word	0x08003ae5
 8003ad8:	08003af7 	.word	0x08003af7
 8003adc:	08003ae5 	.word	0x08003ae5
 8003ae0:	08003b7b 	.word	0x08003b7b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d046      	beq.n	8003b7e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af4:	e043      	b.n	8003b7e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003afa:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003afe:	d140      	bne.n	8003b82 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b04:	e03d      	b.n	8003b82 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b0e:	d121      	bne.n	8003b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d837      	bhi.n	8003b86 <DMA_CheckFifoParam+0xda>
 8003b16:	a201      	add	r2, pc, #4	@ (adr r2, 8003b1c <DMA_CheckFifoParam+0x70>)
 8003b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b33 	.word	0x08003b33
 8003b24:	08003b2d 	.word	0x08003b2d
 8003b28:	08003b45 	.word	0x08003b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b30:	e030      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d025      	beq.n	8003b8a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b42:	e022      	b.n	8003b8a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b48:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b4c:	d11f      	bne.n	8003b8e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003b52:	e01c      	b.n	8003b8e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d903      	bls.n	8003b62 <DMA_CheckFifoParam+0xb6>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b03      	cmp	r3, #3
 8003b5e:	d003      	beq.n	8003b68 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003b60:	e018      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	73fb      	strb	r3, [r7, #15]
      break;
 8003b66:	e015      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	73fb      	strb	r3, [r7, #15]
      break;
 8003b78:	e00b      	b.n	8003b92 <DMA_CheckFifoParam+0xe6>
      break;
 8003b7a:	bf00      	nop
 8003b7c:	e00a      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b7e:	bf00      	nop
 8003b80:	e008      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b82:	bf00      	nop
 8003b84:	e006      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b86:	bf00      	nop
 8003b88:	e004      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b8a:	bf00      	nop
 8003b8c:	e002      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b8e:	bf00      	nop
 8003b90:	e000      	b.n	8003b94 <DMA_CheckFifoParam+0xe8>
      break;
 8003b92:	bf00      	nop
    }
  } 
  
  return status; 
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop

08003ba4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e086      	b.n	8003cc4 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d106      	bne.n	8003bce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2220      	movs	r2, #32
 8003bc4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f009 f859 	bl	800cc80 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bce:	4b3f      	ldr	r3, [pc, #252]	@ (8003ccc <HAL_ETH_Init+0x128>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	4a3e      	ldr	r2, [pc, #248]	@ (8003ccc <HAL_ETH_Init+0x128>)
 8003bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bda:	4b3c      	ldr	r3, [pc, #240]	@ (8003ccc <HAL_ETH_Init+0x128>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be2:	60bb      	str	r3, [r7, #8]
 8003be4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003be6:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd0 <HAL_ETH_Init+0x12c>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4a39      	ldr	r2, [pc, #228]	@ (8003cd0 <HAL_ETH_Init+0x12c>)
 8003bec:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003bf0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003bf2:	4b37      	ldr	r3, [pc, #220]	@ (8003cd0 <HAL_ETH_Init+0x12c>)
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	4935      	ldr	r1, [pc, #212]	@ (8003cd0 <HAL_ETH_Init+0x12c>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c00:	4b33      	ldr	r3, [pc, #204]	@ (8003cd0 <HAL_ETH_Init+0x12c>)
 8003c02:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6812      	ldr	r2, [r2, #0]
 8003c12:	f043 0301 	orr.w	r3, r3, #1
 8003c16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003c1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c1c:	f7fe fba8 	bl	8002370 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c22:	e011      	b.n	8003c48 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c24:	f7fe fba4 	bl	8002370 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003c32:	d909      	bls.n	8003c48 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	22e0      	movs	r2, #224	@ 0xe0
 8003c40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e03d      	b.n	8003cc4 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e4      	bne.n	8003c24 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 ff5c 	bl	8004b18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f001 f807 	bl	8004c74 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f001 f85d 	bl	8004d26 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	461a      	mov	r2, r3
 8003c72:	2100      	movs	r1, #0
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 ffc5 	bl	8004c04 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003c88:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	4b0f      	ldr	r3, [pc, #60]	@ (8003cd4 <HAL_ETH_Init+0x130>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003cae:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	40013800 	.word	0x40013800
 8003cd4:	00020060 	.word	0x00020060

08003cd8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d15f      	bne.n	8003daa <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2204      	movs	r2, #4
 8003cfc:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9f6 	bl	80040f0 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	f7fe fb3b 	bl	8002388 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6812      	ldr	r2, [r2, #0]
 8003d28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d2c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d30:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6812      	ldr	r2, [r2, #0]
 8003d40:	f043 0302 	orr.w	r3, r3, #2
 8003d44:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d48:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fd80 	bl	8004850 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0208 	orr.w	r2, r2, #8
 8003d5e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f7fe fb0d 	bl	8002388 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f042 0204 	orr.w	r2, r2, #4
 8003d84:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003d8e:	69d9      	ldr	r1, [r3, #28]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	4b07      	ldr	r3, [pc, #28]	@ (8003db4 <HAL_ETH_Start_IT+0xdc>)
 8003d96:	430b      	orrs	r3, r1
 8003d98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003d9c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2240      	movs	r2, #64	@ 0x40
 8003da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	e000      	b.n	8003dac <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
  }
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	0001a0c1 	.word	0x0001a0c1

08003db8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d16e      	bne.n	8003ea8 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dda:	69d9      	ldr	r1, [r3, #28]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b34      	ldr	r3, [pc, #208]	@ (8003eb4 <HAL_ETH_Stop_IT+0xfc>)
 8003de2:	400b      	ands	r3, r1
 8003de4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003de8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003df2:	699b      	ldr	r3, [r3, #24]
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6812      	ldr	r2, [r2, #0]
 8003df8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dfc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e00:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	6812      	ldr	r2, [r2, #0]
 8003e10:	f023 0302 	bic.w	r3, r3, #2
 8003e14:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e18:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0204 	bic.w	r2, r2, #4
 8003e28:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e32:	2001      	movs	r0, #1
 8003e34:	f7fe faa8 	bl	8002388 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 fd05 	bl	8004850 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0208 	bic.w	r2, r2, #8
 8003e54:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7fe fa92 	bl	8002388 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e00e      	b.n	8003e90 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	697a      	ldr	r2, [r7, #20]
 8003e76:	3212      	adds	r2, #18
 8003e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e7c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	617b      	str	r3, [r7, #20]
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d9ed      	bls.n	8003e72 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2210      	movs	r2, #16
 8003ea0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	fffe5f3e 	.word	0xfffe5f3e

08003eb8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d109      	bne.n	8003edc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e045      	b.n	8003f68 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ee2:	2b40      	cmp	r3, #64	@ 0x40
 8003ee4:	d13f      	bne.n	8003f66 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003eee:	2201      	movs	r2, #1
 8003ef0:	6839      	ldr	r1, [r7, #0]
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 ff86 	bl	8004e04 <ETH_Prepare_Tx_Descriptors>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d009      	beq.n	8003f12 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f04:	f043 0202 	orr.w	r2, r3, #2
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e02a      	b.n	8003f68 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003f12:	f3bf 8f4f 	dsb	sy
}
 8003f16:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d904      	bls.n	8003f34 <HAL_ETH_Transmit_IT+0x7c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2e:	1f1a      	subs	r2, r3, #4
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00d      	beq.n	8003f62 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f4e:	461a      	mov	r2, r3
 8003f50:	2304      	movs	r3, #4
 8003f52:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	2300      	movs	r3, #0
 8003f60:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3708      	adds	r7, #8
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f8e:	f043 0201 	orr.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0a4      	b.n	80040e6 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fa2:	2b40      	cmp	r3, #64	@ 0x40
 8003fa4:	d001      	beq.n	8003faa <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e09d      	b.n	80040e6 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fae:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69fa      	ldr	r2, [r7, #28]
 8003fb4:	3212      	adds	r2, #18
 8003fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fba:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fc0:	f1c3 0304 	rsb	r3, r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003fc6:	e066      	b.n	8004096 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	699a      	ldr	r2, [r3, #24]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <HAL_ETH_ReadData+0x88>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d03c      	beq.n	8004072 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004000:	2b00      	cmp	r3, #0
 8004002:	d005      	beq.n	8004010 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800401a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8004030:	2301      	movs	r3, #1
 8004032:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800404c:	461a      	mov	r2, r3
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	b29b      	uxth	r3, r3
 8004052:	f008 ffe9 	bl	800d028 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	441a      	add	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2200      	movs	r2, #0
 8004070:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	3301      	adds	r3, #1
 8004076:	61fb      	str	r3, [r7, #28]
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	2b03      	cmp	r3, #3
 800407c:	d902      	bls.n	8004084 <HAL_ETH_ReadData+0x114>
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	3b04      	subs	r3, #4
 8004082:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	69fa      	ldr	r2, [r7, #28]
 8004088:	3212      	adds	r2, #18
 800408a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800408e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3301      	adds	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800409a:	2b00      	cmp	r3, #0
 800409c:	db06      	blt.n	80040ac <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d202      	bcs.n	80040ac <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80040a6:	7cfb      	ldrb	r3, [r7, #19]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d08d      	beq.n	8003fc8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	441a      	add	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f815 	bl	80040f0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69fa      	ldr	r2, [r7, #28]
 80040ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d108      	bne.n	80040e4 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e000      	b.n	80040e6 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80040fc:	2301      	movs	r3, #1
 80040fe:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004104:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69fa      	ldr	r2, [r7, #28]
 800410a:	3212      	adds	r2, #18
 800410c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004110:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004116:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004118:	e042      	b.n	80041a0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d112      	bne.n	8004148 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004122:	f107 0308 	add.w	r3, r7, #8
 8004126:	4618      	mov	r0, r3
 8004128:	f008 ff4e 	bl	800cfc8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d102      	bne.n	8004138 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	74fb      	strb	r3, [r7, #19]
 8004136:	e007      	b.n	8004148 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	461a      	mov	r2, r3
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	461a      	mov	r2, r3
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004148:	7cfb      	ldrb	r3, [r7, #19]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d028      	beq.n	80041a0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	2b00      	cmp	r3, #0
 8004154:	d106      	bne.n	8004164 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	4b26      	ldr	r3, [pc, #152]	@ (80041f4 <ETH_UpdateDescriptor+0x104>)
 800415c:	4313      	orrs	r3, r2
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	6053      	str	r3, [r2, #4]
 8004162:	e005      	b.n	8004170 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b03      	cmp	r3, #3
 8004186:	d902      	bls.n	800418e <ETH_UpdateDescriptor+0x9e>
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	3b04      	subs	r3, #4
 800418c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	3212      	adds	r2, #18
 8004194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004198:	617b      	str	r3, [r7, #20]
      desccount--;
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	3b01      	subs	r3, #1
 800419e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <ETH_UpdateDescriptor+0xbc>
 80041a6:	7cfb      	ldrb	r3, [r7, #19]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1b6      	bne.n	800411a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d01a      	beq.n	80041ec <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	3303      	adds	r3, #3
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80041c0:	f3bf 8f5f 	dmb	sy
}
 80041c4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6919      	ldr	r1, [r3, #16]
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	18ca      	adds	r2, r1, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041de:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69ba      	ldr	r2, [r7, #24]
 80041ea:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80041ec:	bf00      	nop
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	80004000 	.word	0x80004000

080041f8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	3318      	adds	r3, #24
 8004204:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004210:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004212:	2301      	movs	r3, #1
 8004214:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004216:	e047      	b.n	80042a8 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004218:	2301      	movs	r3, #1
 800421a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	3b01      	subs	r3, #1
 8004220:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	3304      	adds	r3, #4
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	3301      	adds	r3, #1
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b03      	cmp	r3, #3
 800423c:	d902      	bls.n	8004244 <HAL_ETH_ReleaseTxPacket+0x4c>
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	3b04      	subs	r3, #4
 8004242:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004244:	2300      	movs	r3, #0
 8004246:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004248:	7bbb      	ldrb	r3, [r7, #14]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d02c      	beq.n	80042a8 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68d9      	ldr	r1, [r3, #12]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4613      	mov	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	4413      	add	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	440b      	add	r3, r1
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	db1f      	blt.n	80042a4 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	3304      	adds	r3, #4
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4413      	add	r3, r2
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	4618      	mov	r0, r3
 8004272:	f008 ff1b 	bl	800d0ac <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004276:	68ba      	ldr	r2, [r7, #8]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3304      	adds	r3, #4
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3301      	adds	r3, #1
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d902      	bls.n	8004296 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	3b04      	subs	r3, #4
 8004294:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80042a2:	e001      	b.n	80042a8 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_ETH_ReleaseTxPacket+0xbc>
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d1b1      	bne.n	8004218 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
	...

080042c0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80042e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004418 <HAL_ETH_IRQHandler+0x158>)
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00e      	beq.n	8004316 <HAL_ETH_IRQHandler+0x56>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d009      	beq.n	8004316 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800430a:	461a      	mov	r2, r3
 800430c:	4b43      	ldr	r3, [pc, #268]	@ (800441c <HAL_ETH_IRQHandler+0x15c>)
 800430e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f008 f9f5 	bl	800c700 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00f      	beq.n	8004340 <HAL_ETH_IRQHandler+0x80>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0301 	and.w	r3, r3, #1
 8004326:	2b00      	cmp	r3, #0
 8004328:	d00a      	beq.n	8004340 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004332:	461a      	mov	r2, r3
 8004334:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8004338:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f008 f9f0 	bl	800c720 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d042      	beq.n	80043d0 <HAL_ETH_IRQHandler+0x110>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d03d      	beq.n	80043d0 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435a:	f043 0208 	orr.w	r2, r3, #8
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d01a      	beq.n	80043a4 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004376:	695a      	ldr	r2, [r3, #20]
 8004378:	4b29      	ldr	r3, [pc, #164]	@ (8004420 <HAL_ETH_IRQHandler+0x160>)
 800437a:	4013      	ands	r3, r2
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800438a:	69db      	ldr	r3, [r3, #28]
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004394:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004398:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	22e0      	movs	r2, #224	@ 0xe0
 800439e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80043a2:	e012      	b.n	80043ca <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043b2:	4013      	ands	r3, r2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c2:	461a      	mov	r2, r3
 80043c4:	f248 6380 	movw	r3, #34432	@ 0x8680
 80043c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f008 f9b8 	bl	800c740 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00e      	beq.n	80043f8 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f81a 	bl	8004424 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d006      	beq.n	8004410 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004402:	4b05      	ldr	r3, [pc, #20]	@ (8004418 <HAL_ETH_IRQHandler+0x158>)
 8004404:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004408:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 f814 	bl	8004438 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004410:	bf00      	nop
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40013c00 	.word	0x40013c00
 800441c:	00010040 	.word	0x00010040
 8004420:	007e2000 	.word	0x007e2000

08004424 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 031c 	and.w	r3, r3, #28
 8004468:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	02db      	lsls	r3, r3, #11
 800446e:	b29b      	uxth	r3, r3
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	4313      	orrs	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	019b      	lsls	r3, r3, #6
 800447a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0302 	bic.w	r3, r3, #2
 800448a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800449c:	f7fd ff68 	bl	8002370 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044a2:	e00d      	b.n	80044c0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80044a4:	f7fd ff64 	bl	8002370 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044b2:	d301      	bcc.n	80044b8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e010      	b.n	80044da <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1ec      	bne.n	80044a4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f003 031c 	and.w	r3, r3, #28
 80044fe:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	02db      	lsls	r3, r3, #11
 8004504:	b29b      	uxth	r3, r3
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	019b      	lsls	r3, r3, #6
 8004510:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	4313      	orrs	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f043 0302 	orr.w	r3, r3, #2
 8004520:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f043 0301 	orr.w	r3, r3, #1
 8004528:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	b29a      	uxth	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800453c:	f7fd ff18 	bl	8002370 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004542:	e00d      	b.n	8004560 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004544:	f7fd ff14 	bl	8002370 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004552:	d301      	bcc.n	8004558 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e009      	b.n	800456c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1ec      	bne.n	8004544 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e0e6      	b.n	8004756 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	2b00      	cmp	r3, #0
 8004594:	bf14      	ite	ne
 8004596:	2301      	movne	r3, #1
 8004598:	2300      	moveq	r3, #0
 800459a:	b2db      	uxtb	r3, r3
 800459c:	461a      	mov	r2, r3
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf0c      	ite	eq
 80045c0:	2301      	moveq	r3, #1
 80045c2:	2300      	movne	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	461a      	mov	r2, r3
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf14      	ite	ne
 8004610:	2301      	movne	r3, #1
 8004612:	2300      	moveq	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf0c      	ite	eq
 8004646:	2301      	moveq	r3, #1
 8004648:	2300      	movne	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf0c      	ite	eq
 8004660:	2301      	moveq	r3, #1
 8004662:	2300      	movne	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	bf14      	ite	ne
 800467a:	2301      	movne	r3, #1
 800467c:	2300      	moveq	r3, #0
 800467e:	b2db      	uxtb	r3, r3
 8004680:	461a      	mov	r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bf14      	ite	ne
 80046a2:	2301      	movne	r3, #1
 80046a4:	2300      	moveq	r3, #0
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	461a      	mov	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	bf14      	ite	ne
 80046bc:	2301      	movne	r3, #1
 80046be:	2300      	moveq	r3, #0
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf0c      	ite	eq
 80046f2:	2301      	moveq	r3, #1
 80046f4:	2300      	movne	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	461a      	mov	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	699b      	ldr	r3, [r3, #24]
 8004714:	0c1b      	lsrs	r3, r3, #16
 8004716:	b29a      	uxth	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	461a      	mov	r2, r3
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8004742:	2b00      	cmp	r3, #0
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d101      	bne.n	8004776 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e00b      	b.n	800478e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800477c:	2b10      	cmp	r3, #16
 800477e:	d105      	bne.n	800478c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f88a 	bl	800489c <ETH_SetMACConfig>

    return HAL_OK;
 8004788:	2300      	movs	r3, #0
 800478a:	e000      	b.n	800478e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
  }
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
	...

08004798 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f023 031c 	bic.w	r3, r3, #28
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80047b0:	f003 fd04 	bl	80081bc <HAL_RCC_GetHCLKFreq>
 80047b4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	4a14      	ldr	r2, [pc, #80]	@ (800480c <HAL_ETH_SetMDIOClockRange+0x74>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d804      	bhi.n	80047c8 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f043 0308 	orr.w	r3, r3, #8
 80047c4:	60fb      	str	r3, [r7, #12]
 80047c6:	e019      	b.n	80047fc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4a11      	ldr	r2, [pc, #68]	@ (8004810 <HAL_ETH_SetMDIOClockRange+0x78>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d204      	bcs.n	80047da <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f043 030c 	orr.w	r3, r3, #12
 80047d6:	60fb      	str	r3, [r7, #12]
 80047d8:	e010      	b.n	80047fc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	@ (8004814 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d90c      	bls.n	80047fc <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004818 <HAL_ETH_SetMDIOClockRange+0x80>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d804      	bhi.n	80047f4 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e003      	b.n	80047fc <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f043 0310 	orr.w	r3, r3, #16
 80047fa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	611a      	str	r2, [r3, #16]
}
 8004804:	bf00      	nop
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	02160ebf 	.word	0x02160ebf
 8004810:	03938700 	.word	0x03938700
 8004814:	05f5e0ff 	.word	0x05f5e0ff
 8004818:	08f0d17f 	.word	0x08f0d17f

0800481c <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800482a:	4618      	mov	r0, r3
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800486e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004872:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004880:	2001      	movs	r0, #1
 8004882:	f7fd fd81 	bl	8002388 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004890:	6193      	str	r3, [r2, #24]
}
 8004892:	bf00      	nop
 8004894:	3710      	adds	r7, #16
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
	...

0800489c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	4b53      	ldr	r3, [pc, #332]	@ (8004a00 <ETH_SetMACConfig+0x164>)
 80048b2:	4013      	ands	r3, r2
 80048b4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	7b9b      	ldrb	r3, [r3, #14]
 80048ba:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	7c12      	ldrb	r2, [r2, #16]
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	d102      	bne.n	80048ca <ETH_SetMACConfig+0x2e>
 80048c4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80048c8:	e000      	b.n	80048cc <ETH_SetMACConfig+0x30>
 80048ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80048cc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	7c52      	ldrb	r2, [r2, #17]
 80048d2:	2a00      	cmp	r2, #0
 80048d4:	d102      	bne.n	80048dc <ETH_SetMACConfig+0x40>
 80048d6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80048da:	e000      	b.n	80048de <ETH_SetMACConfig+0x42>
 80048dc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80048de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80048e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	7fdb      	ldrb	r3, [r3, #31]
 80048ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80048ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80048f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	7f92      	ldrb	r2, [r2, #30]
 80048f8:	2a00      	cmp	r2, #0
 80048fa:	d102      	bne.n	8004902 <ETH_SetMACConfig+0x66>
 80048fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004900:	e000      	b.n	8004904 <ETH_SetMACConfig+0x68>
 8004902:	2200      	movs	r2, #0
                        macconf->Speed |
 8004904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	7f1b      	ldrb	r3, [r3, #28]
 800490a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800490c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004912:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	791b      	ldrb	r3, [r3, #4]
 8004918:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800491a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004922:	2a00      	cmp	r2, #0
 8004924:	d102      	bne.n	800492c <ETH_SetMACConfig+0x90>
 8004926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800492a:	e000      	b.n	800492e <ETH_SetMACConfig+0x92>
 800492c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800492e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	7bdb      	ldrb	r3, [r3, #15]
 8004934:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8004936:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800493c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004944:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004946:	4313      	orrs	r3, r2
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800495e:	2001      	movs	r0, #1
 8004960:	f7fd fd12 	bl	8002388 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800497a:	4013      	ands	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004982:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800498a:	2a00      	cmp	r2, #0
 800498c:	d101      	bne.n	8004992 <ETH_SetMACConfig+0xf6>
 800498e:	2280      	movs	r2, #128	@ 0x80
 8004990:	e000      	b.n	8004994 <ETH_SetMACConfig+0xf8>
 8004992:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004994:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800499a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80049a2:	2a01      	cmp	r2, #1
 80049a4:	d101      	bne.n	80049aa <ETH_SetMACConfig+0x10e>
 80049a6:	2208      	movs	r2, #8
 80049a8:	e000      	b.n	80049ac <ETH_SetMACConfig+0x110>
 80049aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80049ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80049b4:	2a01      	cmp	r2, #1
 80049b6:	d101      	bne.n	80049bc <ETH_SetMACConfig+0x120>
 80049b8:	2204      	movs	r2, #4
 80049ba:	e000      	b.n	80049be <ETH_SetMACConfig+0x122>
 80049bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80049be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80049c6:	2a01      	cmp	r2, #1
 80049c8:	d101      	bne.n	80049ce <ETH_SetMACConfig+0x132>
 80049ca:	2202      	movs	r2, #2
 80049cc:	e000      	b.n	80049d0 <ETH_SetMACConfig+0x134>
 80049ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80049d0:	4313      	orrs	r3, r2
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049e8:	2001      	movs	r0, #1
 80049ea:	f7fd fccd 	bl	8002388 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	619a      	str	r2, [r3, #24]
}
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	fd20810f 	.word	0xfd20810f

08004a04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004b14 <ETH_SetDMAConfig+0x110>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	7b1b      	ldrb	r3, [r3, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d102      	bne.n	8004a30 <ETH_SetDMAConfig+0x2c>
 8004a2a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004a2e:	e000      	b.n	8004a32 <ETH_SetDMAConfig+0x2e>
 8004a30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	7b5b      	ldrb	r3, [r3, #13]
 8004a36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a3a:	683a      	ldr	r2, [r7, #0]
 8004a3c:	7f52      	ldrb	r2, [r2, #29]
 8004a3e:	2a00      	cmp	r2, #0
 8004a40:	d102      	bne.n	8004a48 <ETH_SetDMAConfig+0x44>
 8004a42:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a46:	e000      	b.n	8004a4a <ETH_SetDMAConfig+0x46>
 8004a48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004a4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	7b9b      	ldrb	r3, [r3, #14]
 8004a50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004a52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004a58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	7f1b      	ldrb	r3, [r3, #28]
 8004a5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004a60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	7f9b      	ldrb	r3, [r3, #30]
 8004a66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004a68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004a6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a88:	461a      	mov	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004a96:	699b      	ldr	r3, [r3, #24]
 8004a98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	f7fd fc74 	bl	8002388 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	791b      	ldrb	r3, [r3, #4]
 8004ab2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ab8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004abe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004ac4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004acc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004ace:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004ad6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004adc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	6812      	ldr	r2, [r2, #0]
 8004ae2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ae6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004aea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004af8:	2001      	movs	r0, #1
 8004afa:	f7fd fc45 	bl	8002388 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b06:	461a      	mov	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6013      	str	r3, [r2, #0]
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	f8de3f23 	.word	0xf8de3f23

08004b18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b0a6      	sub	sp, #152	@ 0x98
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004b20:	2301      	movs	r3, #1
 8004b22:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004b26:	2301      	movs	r3, #1
 8004b28:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004b42:	2301      	movs	r3, #1
 8004b44:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004b54:	2300      	movs	r3, #0
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004b64:	2300      	movs	r3, #0
 8004b66:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b80:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004b84:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004b86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b92:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7ff fe7f 	bl	800489c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004bce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bd2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004bd4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004bd8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004bda:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bde:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004be6:	2300      	movs	r3, #0
 8004be8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff ff05 	bl	8004a04 <ETH_SetDMAConfig>
}
 8004bfa:	bf00      	nop
 8004bfc:	3798      	adds	r7, #152	@ 0x98
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b087      	sub	sp, #28
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3305      	adds	r3, #5
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	3204      	adds	r2, #4
 8004c1c:	7812      	ldrb	r2, [r2, #0]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	4b11      	ldr	r3, [pc, #68]	@ (8004c6c <ETH_MACAddressConfig+0x68>)
 8004c26:	4413      	add	r3, r2
 8004c28:	461a      	mov	r2, r3
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3303      	adds	r3, #3
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	061a      	lsls	r2, r3, #24
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3302      	adds	r3, #2
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	041b      	lsls	r3, r3, #16
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3301      	adds	r3, #1
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	021b      	lsls	r3, r3, #8
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	7812      	ldrb	r2, [r2, #0]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4b06      	ldr	r3, [pc, #24]	@ (8004c70 <ETH_MACAddressConfig+0x6c>)
 8004c56:	4413      	add	r3, r2
 8004c58:	461a      	mov	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	6013      	str	r3, [r2, #0]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	40028040 	.word	0x40028040
 8004c70:	40028044 	.word	0x40028044

08004c74 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e03e      	b.n	8004d00 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68d9      	ldr	r1, [r3, #12]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	440b      	add	r3, r1
 8004c92:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	3206      	adds	r2, #6
 8004cb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d80c      	bhi.n	8004ce4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68d9      	ldr	r1, [r3, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4413      	add	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	440b      	add	r3, r1
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	60da      	str	r2, [r3, #12]
 8004ce2:	e004      	b.n	8004cee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d9bd      	bls.n	8004c82 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d18:	611a      	str	r2, [r3, #16]
}
 8004d1a:	bf00      	nop
 8004d1c:	3714      	adds	r7, #20
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b085      	sub	sp, #20
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	e048      	b.n	8004dc6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6919      	ldr	r1, [r3, #16]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	440b      	add	r3, r1
 8004d44:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2200      	movs	r2, #0
 8004d62:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004d70:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	3212      	adds	r2, #18
 8004d92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d80c      	bhi.n	8004db6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6919      	ldr	r1, [r3, #16]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	4613      	mov	r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	00db      	lsls	r3, r3, #3
 8004dac:	440b      	add	r3, r1
 8004dae:	461a      	mov	r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	e004      	b.n	8004dc0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3301      	adds	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d9b3      	bls.n	8004d34 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691a      	ldr	r2, [r3, #16]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004df6:	60da      	str	r2, [r3, #12]
}
 8004df8:	bf00      	nop
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b091      	sub	sp, #68	@ 0x44
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	3318      	adds	r3, #24
 8004e14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e2e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004e42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004e46:	d007      	beq.n	8004e58 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e111      	b.n	8005080 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e5e:	3301      	adds	r3, #1
 8004e60:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	4b86      	ldr	r3, [pc, #536]	@ (800508c <ETH_Prepare_Tx_Descriptors+0x288>)
 8004e72:	4013      	ands	r3, r2
 8004e74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e76:	6852      	ldr	r2, [r2, #4]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e7c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0301 	and.w	r3, r3, #1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d008      	beq.n	8004e9c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d008      	beq.n	8004eba <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	431a      	orrs	r2, r3
 8004eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d005      	beq.n	8004ed2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004edc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004ede:	e082      	b.n	8004fe6 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eea:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d006      	beq.n	8004f00 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	e005      	b.n	8004f0c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0e:	3301      	adds	r3, #1
 8004f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f14:	2b03      	cmp	r3, #3
 8004f16:	d902      	bls.n	8004f1e <ETH_Prepare_Tx_Descriptors+0x11a>
 8004f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f1a:	3b04      	subs	r3, #4
 8004f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f26:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f34:	d007      	beq.n	8004f46 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d029      	beq.n	8004f9a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f52:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004f54:	2300      	movs	r3, #0
 8004f56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f58:	e019      	b.n	8004f8e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004f5a:	f3bf 8f5f 	dmb	sy
}
 8004f5e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f6e:	3301      	adds	r3, #1
 8004f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d902      	bls.n	8004f7e <ETH_Prepare_Tx_Descriptors+0x17a>
 8004f78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f7a:	3b04      	subs	r3, #4
 8004f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f86:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d3e1      	bcc.n	8004f5a <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8004f96:	2302      	movs	r3, #2
 8004f98:	e072      	b.n	8005080 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa4:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fa8:	3301      	adds	r3, #1
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	4b32      	ldr	r3, [pc, #200]	@ (800508c <ETH_Prepare_Tx_Descriptors+0x288>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004fc6:	6852      	ldr	r2, [r2, #4]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004fd4:	f3bf 8f5f 	dmb	sy
}
 8004fd8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fe4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8004fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f47f af78 	bne.w	8004ee0 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d006      	beq.n	8005004 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	e005      	b.n	8005010 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800500c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800500e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800501c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501e:	6a3a      	ldr	r2, [r7, #32]
 8005020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005024:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005026:	f3bf 8f5f 	dmb	sy
}
 800502a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800502c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800503c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800503e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005040:	3304      	adds	r3, #4
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800504c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800504e:	f3ef 8310 	mrs	r3, PRIMASK
 8005052:	613b      	str	r3, [r7, #16]
  return(result);
 8005054:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	2301      	movs	r3, #1
 800505a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f383 8810 	msr	PRIMASK, r3
}
 8005062:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	4413      	add	r3, r2
 800506c:	1c5a      	adds	r2, r3, #1
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	629a      	str	r2, [r3, #40]	@ 0x28
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	f383 8810 	msr	PRIMASK, r3
}
 800507c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3744      	adds	r7, #68	@ 0x44
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	ffffe000 	.word	0xffffe000

08005090 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005090:	b480      	push	{r7}
 8005092:	b089      	sub	sp, #36	@ 0x24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800509e:	2300      	movs	r3, #0
 80050a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80050a6:	2300      	movs	r3, #0
 80050a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	61fb      	str	r3, [r7, #28]
 80050ae:	e175      	b.n	800539c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80050b0:	2201      	movs	r2, #1
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	fa02 f303 	lsl.w	r3, r2, r3
 80050b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	f040 8164 	bne.w	8005396 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d005      	beq.n	80050e6 <HAL_GPIO_Init+0x56>
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d130      	bne.n	8005148 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	2203      	movs	r2, #3
 80050f2:	fa02 f303 	lsl.w	r3, r2, r3
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	4313      	orrs	r3, r2
 800510e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	69ba      	ldr	r2, [r7, #24]
 8005114:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800511c:	2201      	movs	r2, #1
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	43db      	mvns	r3, r3
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	4013      	ands	r3, r2
 800512a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 0201 	and.w	r2, r3, #1
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	4313      	orrs	r3, r2
 8005140:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f003 0303 	and.w	r3, r3, #3
 8005150:	2b03      	cmp	r3, #3
 8005152:	d017      	beq.n	8005184 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	005b      	lsls	r3, r3, #1
 800515e:	2203      	movs	r2, #3
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	43db      	mvns	r3, r3
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	4013      	ands	r3, r2
 800516a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689a      	ldr	r2, [r3, #8]
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	69ba      	ldr	r2, [r7, #24]
 800517a:	4313      	orrs	r3, r2
 800517c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69ba      	ldr	r2, [r7, #24]
 8005182:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f003 0303 	and.w	r3, r3, #3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d123      	bne.n	80051d8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	08da      	lsrs	r2, r3, #3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	3208      	adds	r2, #8
 8005198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	220f      	movs	r2, #15
 80051a8:	fa02 f303 	lsl.w	r3, r2, r3
 80051ac:	43db      	mvns	r3, r3
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4013      	ands	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	691a      	ldr	r2, [r3, #16]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	f003 0307 	and.w	r3, r3, #7
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	3208      	adds	r2, #8
 80051d2:	69b9      	ldr	r1, [r7, #24]
 80051d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69ba      	ldr	r2, [r7, #24]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 0203 	and.w	r2, r3, #3
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4313      	orrs	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005214:	2b00      	cmp	r3, #0
 8005216:	f000 80be 	beq.w	8005396 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800521a:	4b66      	ldr	r3, [pc, #408]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 800521c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800521e:	4a65      	ldr	r2, [pc, #404]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 8005220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005224:	6453      	str	r3, [r2, #68]	@ 0x44
 8005226:	4b63      	ldr	r3, [pc, #396]	@ (80053b4 <HAL_GPIO_Init+0x324>)
 8005228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800522a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005232:	4a61      	ldr	r2, [pc, #388]	@ (80053b8 <HAL_GPIO_Init+0x328>)
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	089b      	lsrs	r3, r3, #2
 8005238:	3302      	adds	r3, #2
 800523a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	220f      	movs	r2, #15
 800524a:	fa02 f303 	lsl.w	r3, r2, r3
 800524e:	43db      	mvns	r3, r3
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	4013      	ands	r3, r2
 8005254:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a58      	ldr	r2, [pc, #352]	@ (80053bc <HAL_GPIO_Init+0x32c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d037      	beq.n	80052ce <HAL_GPIO_Init+0x23e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a57      	ldr	r2, [pc, #348]	@ (80053c0 <HAL_GPIO_Init+0x330>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d031      	beq.n	80052ca <HAL_GPIO_Init+0x23a>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a56      	ldr	r2, [pc, #344]	@ (80053c4 <HAL_GPIO_Init+0x334>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d02b      	beq.n	80052c6 <HAL_GPIO_Init+0x236>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a55      	ldr	r2, [pc, #340]	@ (80053c8 <HAL_GPIO_Init+0x338>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d025      	beq.n	80052c2 <HAL_GPIO_Init+0x232>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a54      	ldr	r2, [pc, #336]	@ (80053cc <HAL_GPIO_Init+0x33c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <HAL_GPIO_Init+0x22e>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a53      	ldr	r2, [pc, #332]	@ (80053d0 <HAL_GPIO_Init+0x340>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d019      	beq.n	80052ba <HAL_GPIO_Init+0x22a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a52      	ldr	r2, [pc, #328]	@ (80053d4 <HAL_GPIO_Init+0x344>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d013      	beq.n	80052b6 <HAL_GPIO_Init+0x226>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a51      	ldr	r2, [pc, #324]	@ (80053d8 <HAL_GPIO_Init+0x348>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d00d      	beq.n	80052b2 <HAL_GPIO_Init+0x222>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a50      	ldr	r2, [pc, #320]	@ (80053dc <HAL_GPIO_Init+0x34c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d007      	beq.n	80052ae <HAL_GPIO_Init+0x21e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a4f      	ldr	r2, [pc, #316]	@ (80053e0 <HAL_GPIO_Init+0x350>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d101      	bne.n	80052aa <HAL_GPIO_Init+0x21a>
 80052a6:	2309      	movs	r3, #9
 80052a8:	e012      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052aa:	230a      	movs	r3, #10
 80052ac:	e010      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ae:	2308      	movs	r3, #8
 80052b0:	e00e      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052b2:	2307      	movs	r3, #7
 80052b4:	e00c      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052b6:	2306      	movs	r3, #6
 80052b8:	e00a      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ba:	2305      	movs	r3, #5
 80052bc:	e008      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052be:	2304      	movs	r3, #4
 80052c0:	e006      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052c2:	2303      	movs	r3, #3
 80052c4:	e004      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052c6:	2302      	movs	r3, #2
 80052c8:	e002      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <HAL_GPIO_Init+0x240>
 80052ce:	2300      	movs	r3, #0
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	f002 0203 	and.w	r2, r2, #3
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	4093      	lsls	r3, r2
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	4313      	orrs	r3, r2
 80052de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80052e0:	4935      	ldr	r1, [pc, #212]	@ (80053b8 <HAL_GPIO_Init+0x328>)
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	089b      	lsrs	r3, r3, #2
 80052e6:	3302      	adds	r3, #2
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80052ee:	4b3d      	ldr	r3, [pc, #244]	@ (80053e4 <HAL_GPIO_Init+0x354>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	43db      	mvns	r3, r3
 80052f8:	69ba      	ldr	r2, [r7, #24]
 80052fa:	4013      	ands	r3, r2
 80052fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800530a:	69ba      	ldr	r2, [r7, #24]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005312:	4a34      	ldr	r2, [pc, #208]	@ (80053e4 <HAL_GPIO_Init+0x354>)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005318:	4b32      	ldr	r3, [pc, #200]	@ (80053e4 <HAL_GPIO_Init+0x354>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	43db      	mvns	r3, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4013      	ands	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005334:	69ba      	ldr	r2, [r7, #24]
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800533c:	4a29      	ldr	r2, [pc, #164]	@ (80053e4 <HAL_GPIO_Init+0x354>)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005342:	4b28      	ldr	r3, [pc, #160]	@ (80053e4 <HAL_GPIO_Init+0x354>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	43db      	mvns	r3, r3
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	4013      	ands	r3, r2
 8005350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4313      	orrs	r3, r2
 8005364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005366:	4a1f      	ldr	r2, [pc, #124]	@ (80053e4 <HAL_GPIO_Init+0x354>)
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800536c:	4b1d      	ldr	r3, [pc, #116]	@ (80053e4 <HAL_GPIO_Init+0x354>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	43db      	mvns	r3, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4013      	ands	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d003      	beq.n	8005390 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	4313      	orrs	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005390:	4a14      	ldr	r2, [pc, #80]	@ (80053e4 <HAL_GPIO_Init+0x354>)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	3301      	adds	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	f67f ae86 	bls.w	80050b0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80053a4:	bf00      	nop
 80053a6:	bf00      	nop
 80053a8:	3724      	adds	r7, #36	@ 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40023800 	.word	0x40023800
 80053b8:	40013800 	.word	0x40013800
 80053bc:	40020000 	.word	0x40020000
 80053c0:	40020400 	.word	0x40020400
 80053c4:	40020800 	.word	0x40020800
 80053c8:	40020c00 	.word	0x40020c00
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40021400 	.word	0x40021400
 80053d4:	40021800 	.word	0x40021800
 80053d8:	40021c00 	.word	0x40021c00
 80053dc:	40022000 	.word	0x40022000
 80053e0:	40022400 	.word	0x40022400
 80053e4:	40013c00 	.word	0x40013c00

080053e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e08b      	b.n	8005512 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f7fb fc96 	bl	8000d40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2224      	movs	r2, #36	@ 0x24
 8005418:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0201 	bic.w	r2, r2, #1
 800542a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d107      	bne.n	8005462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800545e:	609a      	str	r2, [r3, #8]
 8005460:	e006      	b.n	8005470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800546e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	2b02      	cmp	r3, #2
 8005476:	d108      	bne.n	800548a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005486:	605a      	str	r2, [r3, #4]
 8005488:	e007      	b.n	800549a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005498:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6859      	ldr	r1, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b1d      	ldr	r3, [pc, #116]	@ (800551c <HAL_I2C_Init+0x134>)
 80054a6:	430b      	orrs	r3, r1
 80054a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	430a      	orrs	r2, r1
 80054d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69d9      	ldr	r1, [r3, #28]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a1a      	ldr	r2, [r3, #32]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2220      	movs	r2, #32
 80054fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	02008000 	.word	0x02008000

08005520 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	@ 0x28
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	461a      	mov	r2, r3
 800552c:	460b      	mov	r3, r1
 800552e:	817b      	strh	r3, [r7, #10]
 8005530:	4613      	mov	r3, r2
 8005532:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b20      	cmp	r3, #32
 8005542:	f040 80ef 	bne.w	8005724 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005554:	d101      	bne.n	800555a <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 8005556:	2302      	movs	r3, #2
 8005558:	e0e5      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_I2C_Master_Transmit_DMA+0x48>
 8005564:	2302      	movs	r3, #2
 8005566:	e0de      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2221      	movs	r2, #33	@ 0x21
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2210      	movs	r2, #16
 800557c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	893a      	ldrh	r2, [r7, #8]
 8005590:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	4a66      	ldr	r2, [pc, #408]	@ (8005730 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005596:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a66      	ldr	r2, [pc, #408]	@ (8005734 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800559c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2bff      	cmp	r3, #255	@ 0xff
 80055a6:	d906      	bls.n	80055b6 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	22ff      	movs	r2, #255	@ 0xff
 80055ac:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80055ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055b2:	61fb      	str	r3, [r7, #28]
 80055b4:	e007      	b.n	80055c6 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80055c0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80055c4:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01a      	beq.n	8005604 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e8:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005608:	2b00      	cmp	r3, #0
 800560a:	d074      	beq.n	80056f6 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	2b00      	cmp	r3, #0
 8005612:	d022      	beq.n	800565a <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005618:	4a47      	ldr	r2, [pc, #284]	@ (8005738 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800561a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	4a46      	ldr	r2, [pc, #280]	@ (800573c <HAL_I2C_Master_Transmit_DMA+0x21c>)
 8005622:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005628:	2200      	movs	r2, #0
 800562a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	2200      	movs	r2, #0
 8005632:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 8005644:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800564a:	f7fd fee1 	bl	8003410 <HAL_DMA_Start_IT>
 800564e:	4603      	mov	r3, r0
 8005650:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005652:	7dfb      	ldrb	r3, [r7, #23]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d13a      	bne.n	80056ce <HAL_I2C_Master_Transmit_DMA+0x1ae>
 8005658:	e013      	b.n	8005682 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e051      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	b2db      	uxtb	r3, r3
 8005688:	3301      	adds	r3, #1
 800568a:	b2da      	uxtb	r2, r3
 800568c:	8979      	ldrh	r1, [r7, #10]
 800568e:	4b2c      	ldr	r3, [pc, #176]	@ (8005740 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f001 ff3f 	bl	8007518 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800569e:	b29a      	uxth	r2, r3
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80056b4:	2110      	movs	r1, #16
 80056b6:	68f8      	ldr	r0, [r7, #12]
 80056b8:	f001 ff60 	bl	800757c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	e028      	b.n	8005720 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f043 0210 	orr.w	r2, r3, #16
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e017      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4a12      	ldr	r2, [pc, #72]	@ (8005744 <HAL_I2C_Master_Transmit_DMA+0x224>)
 80056fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	8979      	ldrh	r1, [r7, #10]
 8005702:	4b0f      	ldr	r3, [pc, #60]	@ (8005740 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005704:	9300      	str	r3, [sp, #0]
 8005706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f001 ff04 	bl	8007518 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005718:	2101      	movs	r1, #1
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f001 ff2e 	bl	800757c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	e000      	b.n	8005726 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005724:	2302      	movs	r3, #2
  }
}
 8005726:	4618      	mov	r0, r3
 8005728:	3720      	adds	r7, #32
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	ffff0000 	.word	0xffff0000
 8005734:	0800626f 	.word	0x0800626f
 8005738:	0800729b 	.word	0x0800729b
 800573c:	08007469 	.word	0x08007469
 8005740:	80002000 	.word	0x80002000
 8005744:	08005de3 	.word	0x08005de3

08005748 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	607a      	str	r2, [r7, #4]
 8005752:	461a      	mov	r2, r3
 8005754:	460b      	mov	r3, r1
 8005756:	817b      	strh	r3, [r7, #10]
 8005758:	4613      	mov	r3, r2
 800575a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b20      	cmp	r3, #32
 8005766:	f040 80cd 	bne.w	8005904 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005774:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005778:	d101      	bne.n	800577e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
 800577c:	e0c3      	b.n	8005906 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_I2C_Master_Receive_DMA+0x44>
 8005788:	2302      	movs	r3, #2
 800578a:	e0bc      	b.n	8005906 <HAL_I2C_Master_Receive_DMA+0x1be>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2222      	movs	r2, #34	@ 0x22
 8005798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2210      	movs	r2, #16
 80057a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	893a      	ldrh	r2, [r7, #8]
 80057b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a55      	ldr	r2, [pc, #340]	@ (8005910 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80057ba:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4a55      	ldr	r2, [pc, #340]	@ (8005914 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80057c0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2bff      	cmp	r3, #255	@ 0xff
 80057ca:	d906      	bls.n	80057da <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80057d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e007      	b.n	80057ea <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80057e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057e8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d070      	beq.n	80058d4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057fe:	4a46      	ldr	r2, [pc, #280]	@ (8005918 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005800:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	4a45      	ldr	r2, [pc, #276]	@ (800591c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005808:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580e:	2200      	movs	r2, #0
 8005810:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005816:	2200      	movs	r2, #0
 8005818:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3324      	adds	r3, #36	@ 0x24
 8005824:	4619      	mov	r1, r3
 8005826:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800582c:	f7fd fdf0 	bl	8003410 <HAL_DMA_Start_IT>
 8005830:	4603      	mov	r3, r0
 8005832:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005834:	7cfb      	ldrb	r3, [r7, #19]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d138      	bne.n	80058ac <HAL_I2C_Master_Receive_DMA+0x164>
 800583a:	e013      	b.n	8005864 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2220      	movs	r2, #32
 8005840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005850:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e050      	b.n	8005906 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005868:	b2da      	uxtb	r2, r3
 800586a:	8979      	ldrh	r1, [r7, #10]
 800586c:	4b2c      	ldr	r3, [pc, #176]	@ (8005920 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f001 fe50 	bl	8007518 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005892:	2110      	movs	r1, #16
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 fe71 	bl	800757c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	e029      	b.n	8005900 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058c0:	f043 0210 	orr.w	r2, r3, #16
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e018      	b.n	8005906 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a13      	ldr	r2, [pc, #76]	@ (8005924 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80058d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	8979      	ldrh	r1, [r7, #10]
 80058e2:	4b0f      	ldr	r3, [pc, #60]	@ (8005920 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f001 fe14 	bl	8007518 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80058f8:	2102      	movs	r1, #2
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f001 fe3e 	bl	800757c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	e000      	b.n	8005906 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005904:	2302      	movs	r3, #2
  }
}
 8005906:	4618      	mov	r0, r3
 8005908:	3718      	adds	r7, #24
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	ffff0000 	.word	0xffff0000
 8005914:	0800626f 	.word	0x0800626f
 8005918:	08007371 	.word	0x08007371
 800591c:	08007469 	.word	0x08007469
 8005920:	80002400 	.word	0x80002400
 8005924:	08005de3 	.word	0x08005de3

08005928 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b20      	cmp	r3, #32
 8005940:	f040 80d1 	bne.w	8005ae6 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d002      	beq.n	8005950 <HAL_I2C_Slave_Transmit_DMA+0x28>
 800594a:	88fb      	ldrh	r3, [r7, #6]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d105      	bne.n	800595c <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005956:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e0c5      	b.n	8005ae8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005962:	2b01      	cmp	r3, #1
 8005964:	d101      	bne.n	800596a <HAL_I2C_Slave_Transmit_DMA+0x42>
 8005966:	2302      	movs	r3, #2
 8005968:	e0be      	b.n	8005ae8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2221      	movs	r2, #33	@ 0x21
 8005976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2220      	movs	r2, #32
 800597e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	88fa      	ldrh	r2, [r7, #6]
 8005992:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4a53      	ldr	r2, [pc, #332]	@ (8005af0 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 80059a2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	4a53      	ldr	r2, [pc, #332]	@ (8005af4 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 80059a8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059b2:	d117      	bne.n	80059e4 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d068      	beq.n	8005ac0 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d022      	beq.n	8005a3c <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059fa:	4a3f      	ldr	r2, [pc, #252]	@ (8005af8 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 80059fc:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a02:	4a3e      	ldr	r2, [pc, #248]	@ (8005afc <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005a04:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a12:	2200      	movs	r2, #0
 8005a14:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a1e:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a26:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005a2c:	f7fd fcf0 	bl	8003410 <HAL_DMA_Start_IT>
 8005a30:	4603      	mov	r3, r0
 8005a32:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d12e      	bne.n	8005a98 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005a3a:	e013      	b.n	8005a64 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2228      	movs	r2, #40	@ 0x28
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e041      	b.n	8005ae8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a72:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f001 fd7b 	bl	800757c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	e024      	b.n	8005ae2 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2228      	movs	r2, #40	@ 0x28
 8005a9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aac:	f043 0210 	orr.w	r2, r3, #16
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e013      	b.n	8005ae8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685a      	ldr	r2, [r3, #4]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ace:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005ad8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f001 fd4d 	bl	800757c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e000      	b.n	8005ae8 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005ae6:	2302      	movs	r3, #2
  }
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3718      	adds	r7, #24
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	ffff0000 	.word	0xffff0000
 8005af4:	08006711 	.word	0x08006711
 8005af8:	08007331 	.word	0x08007331
 8005afc:	08007469 	.word	0x08007469

08005b00 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b086      	sub	sp, #24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b20      	cmp	r3, #32
 8005b18:	f040 809b 	bne.w	8005c52 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d105      	bne.n	8005b34 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b2e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e08f      	b.n	8005c54 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_I2C_Slave_Receive_DMA+0x42>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e088      	b.n	8005c54 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2222      	movs	r2, #34	@ 0x22
 8005b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	88fa      	ldrh	r2, [r7, #6]
 8005b6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	4a38      	ldr	r2, [pc, #224]	@ (8005c5c <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a38      	ldr	r2, [pc, #224]	@ (8005c60 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005b80:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d020      	beq.n	8005bcc <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b8e:	4a35      	ldr	r2, [pc, #212]	@ (8005c64 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005b90:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b96:	4a34      	ldr	r2, [pc, #208]	@ (8005c68 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005b98:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3324      	adds	r3, #36	@ 0x24
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005bbc:	f7fd fc28 	bl	8003410 <HAL_DMA_Start_IT>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005bc4:	7dfb      	ldrb	r3, [r7, #23]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d12f      	bne.n	8005c2a <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005bca:	e013      	b.n	8005bf4 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2228      	movs	r2, #40	@ 0x28
 8005bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005be0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e02f      	b.n	8005c54 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c02:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f001 fcb3 	bl	800757c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005c24:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	e014      	b.n	8005c54 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2228      	movs	r2, #40	@ 0x28
 8005c2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c3e:	f043 0210 	orr.w	r2, r3, #16
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
  }
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	ffff0000 	.word	0xffff0000
 8005c60:	08006711 	.word	0x08006711
 8005c64:	08007423 	.word	0x08007423
 8005c68:	08007469 	.word	0x08007469

08005c6c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	68f9      	ldr	r1, [r7, #12]
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	4798      	blx	r3
  }
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d010      	beq.n	8005ce6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	09db      	lsrs	r3, r3, #7
 8005cc8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cd4:	f043 0201 	orr.w	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005ce4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	0a9b      	lsrs	r3, r3, #10
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d010      	beq.n	8005d14 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	09db      	lsrs	r3, r3, #7
 8005cf6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d02:	f043 0208 	orr.w	r2, r3, #8
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d12:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	0a5b      	lsrs	r3, r3, #9
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d010      	beq.n	8005d42 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	09db      	lsrs	r3, r3, #7
 8005d24:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00a      	beq.n	8005d42 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d30:	f043 0202 	orr.w	r2, r3, #2
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d40:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f003 030b 	and.w	r3, r3, #11
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005d52:	68f9      	ldr	r1, [r7, #12]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 f965 	bl	8007024 <I2C_ITError>
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	3718      	adds	r7, #24
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005d86:	bf00      	nop
 8005d88:	370c      	adds	r7, #12
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr

08005d92 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005d92:	b480      	push	{r7}
 8005d94:	b083      	sub	sp, #12
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005d9a:	bf00      	nop
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005dae:	bf00      	nop
 8005db0:	370c      	adds	r7, #12
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b083      	sub	sp, #12
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b088      	sub	sp, #32
 8005de6:	af02      	add	r7, sp, #8
 8005de8:	60f8      	str	r0, [r7, #12]
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d101      	bne.n	8005e00 <I2C_Master_ISR_IT+0x1e>
 8005dfc:	2302      	movs	r3, #2
 8005dfe:	e12e      	b.n	800605e <I2C_Master_ISR_IT+0x27c>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	091b      	lsrs	r3, r3, #4
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d013      	beq.n	8005e3c <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	091b      	lsrs	r3, r3, #4
 8005e18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2210      	movs	r2, #16
 8005e26:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e2c:	f043 0204 	orr.w	r2, r3, #4
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f001 fa0c 	bl	8007252 <I2C_Flush_TXDR>
 8005e3a:	e0fb      	b.n	8006034 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d023      	beq.n	8005e90 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	089b      	lsrs	r3, r3, #2
 8005e4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d01d      	beq.n	8005e90 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0304 	bic.w	r3, r3, #4
 8005e5a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6e:	1c5a      	adds	r2, r3, #1
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	3b01      	subs	r3, #1
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005e8e:	e0d1      	b.n	8006034 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	099b      	lsrs	r3, r3, #6
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d12a      	bne.n	8005ef2 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	085b      	lsrs	r3, r3, #1
 8005ea0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d024      	beq.n	8005ef2 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	085b      	lsrs	r3, r3, #1
 8005eac:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01e      	beq.n	8005ef2 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 80ba 	beq.w	8006034 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec4:	781a      	ldrb	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	b29a      	uxth	r2, r3
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005ef0:	e0a0      	b.n	8006034 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	09db      	lsrs	r3, r3, #7
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d06b      	beq.n	8005fd6 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	099b      	lsrs	r3, r3, #6
 8005f02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d065      	beq.n	8005fd6 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d04e      	beq.n	8005fb2 <I2C_Master_ISR_IT+0x1d0>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d14a      	bne.n	8005fb2 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f28:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2bff      	cmp	r3, #255	@ 0xff
 8005f32:	d91c      	bls.n	8005f6e <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	0c1b      	lsrs	r3, r3, #16
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d103      	bne.n	8005f50 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005f4e:	e002      	b.n	8005f56 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	22ff      	movs	r2, #255	@ 0xff
 8005f54:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	8a79      	ldrh	r1, [r7, #18]
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f66:	68f8      	ldr	r0, [r7, #12]
 8005f68:	f001 fad6 	bl	8007518 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f6c:	e032      	b.n	8005fd4 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f80:	d00b      	beq.n	8005f9a <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f86:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f8c:	8a79      	ldrh	r1, [r7, #18]
 8005f8e:	2000      	movs	r0, #0
 8005f90:	9000      	str	r0, [sp, #0]
 8005f92:	68f8      	ldr	r0, [r7, #12]
 8005f94:	f001 fac0 	bl	8007518 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f98:	e01c      	b.n	8005fd4 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	8a79      	ldrh	r1, [r7, #18]
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9300      	str	r3, [sp, #0]
 8005fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f001 fab4 	bl	8007518 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fb0:	e010      	b.n	8005fd4 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005fc0:	d003      	beq.n	8005fca <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	f000 fd09 	bl	80069da <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fc8:	e034      	b.n	8006034 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005fca:	2140      	movs	r1, #64	@ 0x40
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f001 f829 	bl	8007024 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005fd2:	e02f      	b.n	8006034 <I2C_Master_ISR_IT+0x252>
 8005fd4:	e02e      	b.n	8006034 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	099b      	lsrs	r3, r3, #6
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d028      	beq.n	8006034 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	099b      	lsrs	r3, r3, #6
 8005fe6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d022      	beq.n	8006034 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d119      	bne.n	800602c <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006002:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006006:	d015      	beq.n	8006034 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006010:	d108      	bne.n	8006024 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006020:	605a      	str	r2, [r3, #4]
 8006022:	e007      	b.n	8006034 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f000 fcd8 	bl	80069da <I2C_ITMasterSeqCplt>
 800602a:	e003      	b.n	8006034 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800602c:	2140      	movs	r1, #64	@ 0x40
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 fff8 	bl	8007024 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	095b      	lsrs	r3, r3, #5
 8006044:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fd5e 	bl	8006b10 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b086      	sub	sp, #24
 800606a:	af00      	add	r7, sp, #0
 800606c:	60f8      	str	r0, [r7, #12]
 800606e:	60b9      	str	r1, [r7, #8]
 8006070:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <I2C_Slave_ISR_IT+0x24>
 8006086:	2302      	movs	r3, #2
 8006088:	e0ed      	b.n	8006266 <I2C_Slave_ISR_IT+0x200>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	095b      	lsrs	r3, r3, #5
 80060a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80060aa:	6939      	ldr	r1, [r7, #16]
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 fdf9 	bl	8006ca4 <I2C_ITSlaveCplt>
 80060b2:	e0d3      	b.n	800625c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	091b      	lsrs	r3, r3, #4
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d04d      	beq.n	800615c <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d047      	beq.n	800615c <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d128      	bne.n	8006128 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b28      	cmp	r3, #40	@ 0x28
 80060e0:	d108      	bne.n	80060f4 <I2C_Slave_ISR_IT+0x8e>
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80060e8:	d104      	bne.n	80060f4 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80060ea:	6939      	ldr	r1, [r7, #16]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 ff43 	bl	8006f78 <I2C_ITListenCplt>
 80060f2:	e032      	b.n	800615a <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b29      	cmp	r3, #41	@ 0x29
 80060fe:	d10e      	bne.n	800611e <I2C_Slave_ISR_IT+0xb8>
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006106:	d00a      	beq.n	800611e <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2210      	movs	r2, #16
 800610e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f001 f89e 	bl	8007252 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f000 fc9c 	bl	8006a54 <I2C_ITSlaveSeqCplt>
 800611c:	e01d      	b.n	800615a <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2210      	movs	r2, #16
 8006124:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006126:	e096      	b.n	8006256 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2210      	movs	r2, #16
 800612e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006134:	f043 0204 	orr.w	r2, r3, #4
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d004      	beq.n	800614c <I2C_Slave_ISR_IT+0xe6>
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006148:	f040 8085 	bne.w	8006256 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006150:	4619      	mov	r1, r3
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f000 ff66 	bl	8007024 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006158:	e07d      	b.n	8006256 <I2C_Slave_ISR_IT+0x1f0>
 800615a:	e07c      	b.n	8006256 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	089b      	lsrs	r3, r3, #2
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b00      	cmp	r3, #0
 8006166:	d030      	beq.n	80061ca <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006170:	2b00      	cmp	r3, #0
 8006172:	d02a      	beq.n	80061ca <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d14f      	bne.n	800625a <I2C_Slave_ISR_IT+0x1f4>
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061c0:	d04b      	beq.n	800625a <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80061c2:	68f8      	ldr	r0, [r7, #12]
 80061c4:	f000 fc46 	bl	8006a54 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80061c8:	e047      	b.n	800625a <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	08db      	lsrs	r3, r3, #3
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	08db      	lsrs	r3, r3, #3
 80061da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d004      	beq.n	80061ec <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80061e2:	6939      	ldr	r1, [r7, #16]
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fb74 	bl	80068d2 <I2C_ITAddrCplt>
 80061ea:	e037      	b.n	800625c <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	085b      	lsrs	r3, r3, #1
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d031      	beq.n	800625c <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006200:	2b00      	cmp	r3, #0
 8006202:	d02b      	beq.n	800625c <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d018      	beq.n	8006240 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	781a      	ldrb	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006228:	b29b      	uxth	r3, r3
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800623e:	e00d      	b.n	800625c <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006246:	d002      	beq.n	800624e <I2C_Slave_ISR_IT+0x1e8>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 fc00 	bl	8006a54 <I2C_ITSlaveSeqCplt>
 8006254:	e002      	b.n	800625c <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 8006256:	bf00      	nop
 8006258:	e000      	b.n	800625c <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800625a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800626e:	b580      	push	{r7, lr}
 8006270:	b088      	sub	sp, #32
 8006272:	af02      	add	r7, sp, #8
 8006274:	60f8      	str	r0, [r7, #12]
 8006276:	60b9      	str	r1, [r7, #8]
 8006278:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <I2C_Master_ISR_DMA+0x1a>
 8006284:	2302      	movs	r3, #2
 8006286:	e0f0      	b.n	800646a <I2C_Master_ISR_DMA+0x1fc>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	091b      	lsrs	r3, r3, #4
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d017      	beq.n	80062cc <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	091b      	lsrs	r3, r3, #4
 80062a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d011      	beq.n	80062cc <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2210      	movs	r2, #16
 80062ae:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b4:	f043 0204 	orr.w	r2, r3, #4
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80062bc:	2120      	movs	r1, #32
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f001 f95c 	bl	800757c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 ffc4 	bl	8007252 <I2C_Flush_TXDR>
 80062ca:	e0c9      	b.n	8006460 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	09db      	lsrs	r3, r3, #7
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 8081 	beq.w	80063dc <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	099b      	lsrs	r3, r3, #6
 80062de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d07a      	beq.n	80063dc <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062f4:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d05c      	beq.n	80063ba <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	b29b      	uxth	r3, r3
 8006308:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800630c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006312:	b29b      	uxth	r3, r3
 8006314:	2bff      	cmp	r3, #255	@ 0xff
 8006316:	d914      	bls.n	8006342 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	0c1b      	lsrs	r3, r3, #16
 8006320:	b2db      	uxtb	r3, r3
 8006322:	f003 0301 	and.w	r3, r3, #1
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d103      	bne.n	8006334 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2201      	movs	r2, #1
 8006330:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006332:	e002      	b.n	800633a <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	22ff      	movs	r2, #255	@ 0xff
 8006338:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800633a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e010      	b.n	8006364 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006346:	b29a      	uxth	r2, r3
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006354:	d003      	beq.n	800635e <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635a:	617b      	str	r3, [r7, #20]
 800635c:	e002      	b.n	8006364 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800635e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006362:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006368:	b2da      	uxtb	r2, r3
 800636a:	8a79      	ldrh	r1, [r7, #18]
 800636c:	2300      	movs	r3, #0
 800636e:	9300      	str	r3, [sp, #0]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f001 f8d0 	bl	8007518 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	b29a      	uxth	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006390:	b2db      	uxtb	r3, r3
 8006392:	2b22      	cmp	r3, #34	@ 0x22
 8006394:	d108      	bne.n	80063a8 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681a      	ldr	r2, [r3, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80063a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063a6:	e05b      	b.n	8006460 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80063b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80063b8:	e052      	b.n	8006460 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063c8:	d003      	beq.n	80063d2 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80063ca:	68f8      	ldr	r0, [r7, #12]
 80063cc:	f000 fb05 	bl	80069da <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80063d0:	e046      	b.n	8006460 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80063d2:	2140      	movs	r1, #64	@ 0x40
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fe25 	bl	8007024 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80063da:	e041      	b.n	8006460 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	099b      	lsrs	r3, r3, #6
 80063e0:	f003 0301 	and.w	r3, r3, #1
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d029      	beq.n	800643c <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	099b      	lsrs	r3, r3, #6
 80063ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d023      	beq.n	800643c <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d119      	bne.n	8006432 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006408:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800640c:	d027      	beq.n	800645e <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006416:	d108      	bne.n	800642a <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006426:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006428:	e019      	b.n	800645e <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800642a:	68f8      	ldr	r0, [r7, #12]
 800642c:	f000 fad5 	bl	80069da <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8006430:	e015      	b.n	800645e <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006432:	2140      	movs	r1, #64	@ 0x40
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fdf5 	bl	8007024 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800643a:	e010      	b.n	800645e <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	2b00      	cmp	r3, #0
 8006446:	d00b      	beq.n	8006460 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006450:	2b00      	cmp	r3, #0
 8006452:	d005      	beq.n	8006460 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006454:	68b9      	ldr	r1, [r7, #8]
 8006456:	68f8      	ldr	r0, [r7, #12]
 8006458:	f000 fb5a 	bl	8006b10 <I2C_ITMasterCplt>
 800645c:	e000      	b.n	8006460 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 800645e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af02      	add	r7, sp, #8
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006480:	4b94      	ldr	r3, [pc, #592]	@ (80066d4 <I2C_Mem_ISR_DMA+0x260>)
 8006482:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <I2C_Mem_ISR_DMA+0x1e>
 800648e:	2302      	movs	r3, #2
 8006490:	e139      	b.n	8006706 <I2C_Mem_ISR_DMA+0x292>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 0301 	and.w	r3, r3, #1
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d017      	beq.n	80064d6 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	091b      	lsrs	r3, r3, #4
 80064aa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d011      	beq.n	80064d6 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2210      	movs	r2, #16
 80064b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064be:	f043 0204 	orr.w	r2, r3, #4
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80064c6:	2120      	movs	r1, #32
 80064c8:	68f8      	ldr	r0, [r7, #12]
 80064ca:	f001 f857 	bl	800757c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80064ce:	68f8      	ldr	r0, [r7, #12]
 80064d0:	f000 febf 	bl	8007252 <I2C_Flush_TXDR>
 80064d4:	e112      	b.n	80066fc <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d00f      	beq.n	8006502 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	085b      	lsrs	r3, r3, #1
 80064e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80064f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064fe:	651a      	str	r2, [r3, #80]	@ 0x50
 8006500:	e0fc      	b.n	80066fc <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	09db      	lsrs	r3, r3, #7
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d06e      	beq.n	80065ec <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	099b      	lsrs	r3, r3, #6
 8006512:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006516:	2b00      	cmp	r3, #0
 8006518:	d068      	beq.n	80065ec <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800651a:	2101      	movs	r1, #1
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f001 f8b1 	bl	8007684 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006522:	2110      	movs	r1, #16
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f001 f829 	bl	800757c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652e:	b29b      	uxth	r3, r3
 8006530:	2b00      	cmp	r3, #0
 8006532:	d056      	beq.n	80065e2 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006538:	b29b      	uxth	r3, r3
 800653a:	2bff      	cmp	r3, #255	@ 0xff
 800653c:	d91e      	bls.n	800657c <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	0c1b      	lsrs	r3, r3, #16
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b01      	cmp	r3, #1
 8006550:	d103      	bne.n	800655a <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006558:	e002      	b.n	8006560 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	22ff      	movs	r2, #255	@ 0xff
 800655e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006564:	b299      	uxth	r1, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656a:	b2da      	uxtb	r2, r3
 800656c:	2300      	movs	r3, #0
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 ffcf 	bl	8007518 <I2C_TransferConfig>
 800657a:	e011      	b.n	80065a0 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800658a:	b299      	uxth	r1, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006590:	b2da      	uxtb	r2, r3
 8006592:	2300      	movs	r3, #0
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f000 ffbc 	bl	8007518 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b22      	cmp	r3, #34	@ 0x22
 80065bc:	d108      	bne.n	80065d0 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065cc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065ce:	e095      	b.n	80066fc <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065de:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80065e0:	e08c      	b.n	80066fc <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80065e2:	2140      	movs	r1, #64	@ 0x40
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f000 fd1d 	bl	8007024 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80065ea:	e087      	b.n	80066fc <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	099b      	lsrs	r3, r3, #6
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d071      	beq.n	80066dc <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	099b      	lsrs	r3, r3, #6
 80065fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006600:	2b00      	cmp	r3, #0
 8006602:	d06b      	beq.n	80066dc <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006604:	2101      	movs	r1, #1
 8006606:	68f8      	ldr	r0, [r7, #12]
 8006608:	f001 f83c 	bl	8007684 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800660c:	2110      	movs	r1, #16
 800660e:	68f8      	ldr	r0, [r7, #12]
 8006610:	f000 ffb4 	bl	800757c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800661a:	b2db      	uxtb	r3, r3
 800661c:	2b22      	cmp	r3, #34	@ 0x22
 800661e:	d101      	bne.n	8006624 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 8006620:	4b2d      	ldr	r3, [pc, #180]	@ (80066d8 <I2C_Mem_ISR_DMA+0x264>)
 8006622:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	2bff      	cmp	r3, #255	@ 0xff
 800662c:	d91e      	bls.n	800666c <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	0c1b      	lsrs	r3, r3, #16
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b01      	cmp	r3, #1
 8006640:	d103      	bne.n	800664a <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2201      	movs	r2, #1
 8006646:	851a      	strh	r2, [r3, #40]	@ 0x28
 8006648:	e002      	b.n	8006650 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	22ff      	movs	r2, #255	@ 0xff
 800664e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006654:	b299      	uxth	r1, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800665a:	b2da      	uxtb	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f000 ff57 	bl	8007518 <I2C_TransferConfig>
 800666a:	e011      	b.n	8006690 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006670:	b29a      	uxth	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800667a:	b299      	uxth	r1, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006680:	b2da      	uxtb	r2, r3
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 ff44 	bl	8007518 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006694:	b29a      	uxth	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b22      	cmp	r3, #34	@ 0x22
 80066ac:	d108      	bne.n	80066c0 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80066bc:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066be:	e01d      	b.n	80066fc <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80066ce:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066d0:	e014      	b.n	80066fc <I2C_Mem_ISR_DMA+0x288>
 80066d2:	bf00      	nop
 80066d4:	80002000 	.word	0x80002000
 80066d8:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d009      	beq.n	80066fc <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	095b      	lsrs	r3, r3, #5
 80066ec:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 fa0a 	bl	8006b10 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop

08006710 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <I2C_Slave_ISR_DMA+0x24>
 8006730:	2302      	movs	r3, #2
 8006732:	e0ca      	b.n	80068ca <I2C_Slave_ISR_DMA+0x1ba>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	095b      	lsrs	r3, r3, #5
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	095b      	lsrs	r3, r3, #5
 800674c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 faa4 	bl	8006ca4 <I2C_ITSlaveCplt>
 800675c:	e0b0      	b.n	80068c0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	091b      	lsrs	r3, r3, #4
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 809a 	beq.w	80068a0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006774:	2b00      	cmp	r3, #0
 8006776:	f000 8093 	beq.w	80068a0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	0b9b      	lsrs	r3, r3, #14
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d105      	bne.n	8006792 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	0bdb      	lsrs	r3, r3, #15
 800678a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800678e:	2b00      	cmp	r3, #0
 8006790:	d07f      	beq.n	8006892 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00d      	beq.n	80067b6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	0bdb      	lsrs	r3, r3, #15
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00d      	beq.n	80067da <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	0b9b      	lsrs	r3, r3, #14
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d007      	beq.n	80067da <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d101      	bne.n	80067da <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 80067d6:	2301      	movs	r3, #1
 80067d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d128      	bne.n	8006832 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b28      	cmp	r3, #40	@ 0x28
 80067ea:	d108      	bne.n	80067fe <I2C_Slave_ISR_DMA+0xee>
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80067f2:	d104      	bne.n	80067fe <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80067f4:	68b9      	ldr	r1, [r7, #8]
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 fbbe 	bl	8006f78 <I2C_ITListenCplt>
 80067fc:	e048      	b.n	8006890 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b29      	cmp	r3, #41	@ 0x29
 8006808:	d10e      	bne.n	8006828 <I2C_Slave_ISR_DMA+0x118>
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006810:	d00a      	beq.n	8006828 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2210      	movs	r2, #16
 8006818:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	f000 fd19 	bl	8007252 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f917 	bl	8006a54 <I2C_ITSlaveSeqCplt>
 8006826:	e033      	b.n	8006890 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2210      	movs	r2, #16
 800682e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006830:	e034      	b.n	800689c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2210      	movs	r2, #16
 8006838:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800683e:	f043 0204 	orr.w	r2, r3, #4
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800684c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <I2C_Slave_ISR_DMA+0x14c>
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800685a:	d11f      	bne.n	800689c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b21      	cmp	r3, #33	@ 0x21
 8006860:	d002      	beq.n	8006868 <I2C_Slave_ISR_DMA+0x158>
 8006862:	7dfb      	ldrb	r3, [r7, #23]
 8006864:	2b29      	cmp	r3, #41	@ 0x29
 8006866:	d103      	bne.n	8006870 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2221      	movs	r2, #33	@ 0x21
 800686c:	631a      	str	r2, [r3, #48]	@ 0x30
 800686e:	e008      	b.n	8006882 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006870:	7dfb      	ldrb	r3, [r7, #23]
 8006872:	2b22      	cmp	r3, #34	@ 0x22
 8006874:	d002      	beq.n	800687c <I2C_Slave_ISR_DMA+0x16c>
 8006876:	7dfb      	ldrb	r3, [r7, #23]
 8006878:	2b2a      	cmp	r3, #42	@ 0x2a
 800687a:	d102      	bne.n	8006882 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2222      	movs	r2, #34	@ 0x22
 8006880:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006886:	4619      	mov	r1, r3
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f000 fbcb 	bl	8007024 <I2C_ITError>
      if (treatdmanack == 1U)
 800688e:	e005      	b.n	800689c <I2C_Slave_ISR_DMA+0x18c>
 8006890:	e004      	b.n	800689c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2210      	movs	r2, #16
 8006898:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800689a:	e011      	b.n	80068c0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 800689c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800689e:	e00f      	b.n	80068c0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	08db      	lsrs	r3, r3, #3
 80068a4:	f003 0301 	and.w	r3, r3, #1
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d009      	beq.n	80068c0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	08db      	lsrs	r3, r3, #3
 80068b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d003      	beq.n	80068c0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80068b8:	68b9      	ldr	r1, [r7, #8]
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f809 	bl	80068d2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3720      	adds	r7, #32
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80068e8:	2b28      	cmp	r3, #40	@ 0x28
 80068ea:	d16a      	bne.n	80069c2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	0c1b      	lsrs	r3, r3, #16
 80068f4:	b2db      	uxtb	r3, r3
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	0c1b      	lsrs	r3, r3, #16
 8006904:	b29b      	uxth	r3, r3
 8006906:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800690a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	b29b      	uxth	r3, r3
 8006914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006918:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006926:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b02      	cmp	r3, #2
 800692e:	d138      	bne.n	80069a2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006930:	897b      	ldrh	r3, [r7, #10]
 8006932:	09db      	lsrs	r3, r3, #7
 8006934:	b29a      	uxth	r2, r3
 8006936:	89bb      	ldrh	r3, [r7, #12]
 8006938:	4053      	eors	r3, r2
 800693a:	b29b      	uxth	r3, r3
 800693c:	f003 0306 	and.w	r3, r3, #6
 8006940:	2b00      	cmp	r3, #0
 8006942:	d11c      	bne.n	800697e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006944:	897b      	ldrh	r3, [r7, #10]
 8006946:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006956:	2b02      	cmp	r3, #2
 8006958:	d13b      	bne.n	80069d2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2208      	movs	r2, #8
 8006966:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006970:	89ba      	ldrh	r2, [r7, #12]
 8006972:	7bfb      	ldrb	r3, [r7, #15]
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff f9f3 	bl	8005d62 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800697c:	e029      	b.n	80069d2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800697e:	893b      	ldrh	r3, [r7, #8]
 8006980:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006982:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 fe7c 	bl	8007684 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006994:	89ba      	ldrh	r2, [r7, #12]
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff f9e1 	bl	8005d62 <HAL_I2C_AddrCallback>
}
 80069a0:	e017      	b.n	80069d2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80069a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fe6c 	bl	8007684 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80069b4:	89ba      	ldrh	r2, [r7, #12]
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff f9d1 	bl	8005d62 <HAL_I2C_AddrCallback>
}
 80069c0:	e007      	b.n	80069d2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2208      	movs	r2, #8
 80069c8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80069d2:	bf00      	nop
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b082      	sub	sp, #8
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b21      	cmp	r3, #33	@ 0x21
 80069f4:	d115      	bne.n	8006a22 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2220      	movs	r2, #32
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2211      	movs	r2, #17
 8006a02:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fe39 	bl	8007684 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f018 fee4 	bl	801f7e8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006a20:	e014      	b.n	8006a4c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2212      	movs	r2, #18
 8006a2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006a36:	2102      	movs	r1, #2
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fe23 	bl	8007684 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f018 fee4 	bl	801f814 <HAL_I2C_MasterRxCpltCallback>
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	0b9b      	lsrs	r3, r3, #14
 8006a70:	f003 0301 	and.w	r3, r3, #1
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d008      	beq.n	8006a8a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	e00d      	b.n	8006aa6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	0bdb      	lsrs	r3, r3, #15
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d007      	beq.n	8006aa6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006aa4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b29      	cmp	r3, #41	@ 0x29
 8006ab0:	d112      	bne.n	8006ad8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2228      	movs	r2, #40	@ 0x28
 8006ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2221      	movs	r2, #33	@ 0x21
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fdde 	bl	8007684 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f018 feb5 	bl	801f840 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ad6:	e017      	b.n	8006b08 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ae2:	d111      	bne.n	8006b08 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2228      	movs	r2, #40	@ 0x28
 8006ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2222      	movs	r2, #34	@ 0x22
 8006af0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006af2:	2102      	movs	r1, #2
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fdc5 	bl	8007684 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f018 feb2 	bl	801f86c <HAL_I2C_SlaveRxCpltCallback>
}
 8006b08:	bf00      	nop
 8006b0a:	3710      	adds	r7, #16
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2220      	movs	r2, #32
 8006b24:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b21      	cmp	r3, #33	@ 0x21
 8006b30:	d107      	bne.n	8006b42 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b32:	2101      	movs	r1, #1
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fda5 	bl	8007684 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2211      	movs	r2, #17
 8006b3e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b40:	e00c      	b.n	8006b5c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b22      	cmp	r3, #34	@ 0x22
 8006b4c:	d106      	bne.n	8006b5c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b4e:	2102      	movs	r1, #2
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fd97 	bl	8007684 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2212      	movs	r2, #18
 8006b5a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	6859      	ldr	r1, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b4d      	ldr	r3, [pc, #308]	@ (8006c9c <I2C_ITMasterCplt+0x18c>)
 8006b68:	400b      	ands	r3, r1
 8006b6a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a4a      	ldr	r2, [pc, #296]	@ (8006ca0 <I2C_ITMasterCplt+0x190>)
 8006b76:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	091b      	lsrs	r3, r3, #4
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d009      	beq.n	8006b98 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2210      	movs	r2, #16
 8006b8a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b90:	f043 0204 	orr.w	r2, r3, #4
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b60      	cmp	r3, #96	@ 0x60
 8006ba2:	d10b      	bne.n	8006bbc <I2C_ITMasterCplt+0xac>
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	089b      	lsrs	r3, r3, #2
 8006ba8:	f003 0301 	and.w	r3, r3, #1
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006bba:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 fb48 	bl	8007252 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b60      	cmp	r3, #96	@ 0x60
 8006bd2:	d002      	beq.n	8006bda <I2C_ITMasterCplt+0xca>
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d006      	beq.n	8006be8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bde:	4619      	mov	r1, r3
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fa1f 	bl	8007024 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006be6:	e054      	b.n	8006c92 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b21      	cmp	r3, #33	@ 0x21
 8006bf2:	d124      	bne.n	8006c3e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b40      	cmp	r3, #64	@ 0x40
 8006c0c:	d10b      	bne.n	8006c26 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff f8b7 	bl	8005d92 <HAL_I2C_MemTxCpltCallback>
}
 8006c24:	e035      	b.n	8006c92 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f018 fdd6 	bl	801f7e8 <HAL_I2C_MasterTxCpltCallback>
}
 8006c3c:	e029      	b.n	8006c92 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b22      	cmp	r3, #34	@ 0x22
 8006c48:	d123      	bne.n	8006c92 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b40      	cmp	r3, #64	@ 0x40
 8006c62:	d10b      	bne.n	8006c7c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff f896 	bl	8005da6 <HAL_I2C_MemRxCpltCallback>
}
 8006c7a:	e00a      	b.n	8006c92 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f018 fdc1 	bl	801f814 <HAL_I2C_MasterRxCpltCallback>
}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	fe00e800 	.word	0xfe00e800
 8006ca0:	ffff0000 	.word	0xffff0000

08006ca4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cbe:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cc6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	2220      	movs	r2, #32
 8006cce:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cd0:	7afb      	ldrb	r3, [r7, #11]
 8006cd2:	2b21      	cmp	r3, #33	@ 0x21
 8006cd4:	d002      	beq.n	8006cdc <I2C_ITSlaveCplt+0x38>
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	2b29      	cmp	r3, #41	@ 0x29
 8006cda:	d108      	bne.n	8006cee <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006cdc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fccf 	bl	8007684 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2221      	movs	r2, #33	@ 0x21
 8006cea:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cec:	e019      	b.n	8006d22 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	2b22      	cmp	r3, #34	@ 0x22
 8006cf2:	d002      	beq.n	8006cfa <I2C_ITSlaveCplt+0x56>
 8006cf4:	7afb      	ldrb	r3, [r7, #11]
 8006cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cf8:	d108      	bne.n	8006d0c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006cfa:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 fcc0 	bl	8007684 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2222      	movs	r2, #34	@ 0x22
 8006d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d0a:	e00a      	b.n	8006d22 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006d0c:	7afb      	ldrb	r3, [r7, #11]
 8006d0e:	2b28      	cmp	r3, #40	@ 0x28
 8006d10:	d107      	bne.n	8006d22 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006d12:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fcb4 	bl	8007684 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d30:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6859      	ldr	r1, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b8c      	ldr	r3, [pc, #560]	@ (8006f70 <I2C_ITSlaveCplt+0x2cc>)
 8006d3e:	400b      	ands	r3, r1
 8006d40:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fa85 	bl	8007252 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	0b9b      	lsrs	r3, r3, #14
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d013      	beq.n	8006d7c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006d62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d020      	beq.n	8006dae <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006d7a:	e018      	b.n	8006dae <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	0bdb      	lsrs	r3, r3, #15
 8006d80:	f003 0301 	and.w	r3, r3, #1
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d012      	beq.n	8006dae <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d96:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d006      	beq.n	8006dae <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	089b      	lsrs	r3, r3, #2
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d020      	beq.n	8006dfc <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	f023 0304 	bic.w	r3, r3, #4
 8006dc0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dcc:	b2d2      	uxtb	r2, r2
 8006dce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd4:	1c5a      	adds	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00c      	beq.n	8006dfc <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	3b01      	subs	r3, #1
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e0a:	f043 0204 	orr.w	r2, r3, #4
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	091b      	lsrs	r3, r3, #4
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d04a      	beq.n	8006eb4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	091b      	lsrs	r3, r3, #4
 8006e22:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d044      	beq.n	8006eb4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d128      	bne.n	8006e86 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b28      	cmp	r3, #40	@ 0x28
 8006e3e:	d108      	bne.n	8006e52 <I2C_ITSlaveCplt+0x1ae>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e46:	d104      	bne.n	8006e52 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e48:	6979      	ldr	r1, [r7, #20]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 f894 	bl	8006f78 <I2C_ITListenCplt>
 8006e50:	e030      	b.n	8006eb4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	2b29      	cmp	r3, #41	@ 0x29
 8006e5c:	d10e      	bne.n	8006e7c <I2C_ITSlaveCplt+0x1d8>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006e64:	d00a      	beq.n	8006e7c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2210      	movs	r2, #16
 8006e6c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f9ef 	bl	8007252 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7ff fded 	bl	8006a54 <I2C_ITSlaveSeqCplt>
 8006e7a:	e01b      	b.n	8006eb4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2210      	movs	r2, #16
 8006e82:	61da      	str	r2, [r3, #28]
 8006e84:	e016      	b.n	8006eb4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e92:	f043 0204 	orr.w	r2, r3, #4
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d003      	beq.n	8006ea8 <I2C_ITSlaveCplt+0x204>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ea6:	d105      	bne.n	8006eb4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f8b8 	bl	8007024 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d010      	beq.n	8006eec <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	4619      	mov	r1, r3
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 f8a7 	bl	8007024 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	2b28      	cmp	r3, #40	@ 0x28
 8006ee0:	d141      	bne.n	8006f66 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ee2:	6979      	ldr	r1, [r7, #20]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f847 	bl	8006f78 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006eea:	e03c      	b.n	8006f66 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ef4:	d014      	beq.n	8006f20 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7ff fdac 	bl	8006a54 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a1d      	ldr	r2, [pc, #116]	@ (8006f74 <I2C_ITSlaveCplt+0x2d0>)
 8006f00:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2220      	movs	r2, #32
 8006f06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fe ff30 	bl	8005d7e <HAL_I2C_ListenCpltCallback>
}
 8006f1e:	e022      	b.n	8006f66 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b22      	cmp	r3, #34	@ 0x22
 8006f2a:	d10e      	bne.n	8006f4a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f018 fc92 	bl	801f86c <HAL_I2C_SlaveRxCpltCallback>
}
 8006f48:	e00d      	b.n	8006f66 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2220      	movs	r2, #32
 8006f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f018 fc6d 	bl	801f840 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f66:	bf00      	nop
 8006f68:	3718      	adds	r7, #24
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	fe00e800 	.word	0xfe00e800
 8006f74:	ffff0000 	.word	0xffff0000

08006f78 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b082      	sub	sp, #8
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a26      	ldr	r2, [pc, #152]	@ (8007020 <I2C_ITListenCplt+0xa8>)
 8006f86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2220      	movs	r2, #32
 8006f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	089b      	lsrs	r3, r3, #2
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d022      	beq.n	8006ff6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc2:	1c5a      	adds	r2, r3, #1
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d012      	beq.n	8006ff6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	b29a      	uxth	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fee:	f043 0204 	orr.w	r2, r3, #4
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006ff6:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fb42 	bl	8007684 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2210      	movs	r2, #16
 8007006:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7fe feb4 	bl	8005d7e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007016:	bf00      	nop
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	ffff0000 	.word	0xffff0000

08007024 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007034:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a6d      	ldr	r2, [pc, #436]	@ (80071f8 <I2C_ITError+0x1d4>)
 8007042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	431a      	orrs	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	2b28      	cmp	r3, #40	@ 0x28
 800705a:	d005      	beq.n	8007068 <I2C_ITError+0x44>
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	2b29      	cmp	r3, #41	@ 0x29
 8007060:	d002      	beq.n	8007068 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b2a      	cmp	r3, #42	@ 0x2a
 8007066:	d10b      	bne.n	8007080 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007068:	2103      	movs	r1, #3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fb0a 	bl	8007684 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2228      	movs	r2, #40	@ 0x28
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a60      	ldr	r2, [pc, #384]	@ (80071fc <I2C_ITError+0x1d8>)
 800707c:	635a      	str	r2, [r3, #52]	@ 0x34
 800707e:	e030      	b.n	80070e2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007080:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 fafd 	bl	8007684 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f8e1 	bl	8007252 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b60      	cmp	r3, #96	@ 0x60
 800709a:	d01f      	beq.n	80070dc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2220      	movs	r2, #32
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f003 0320 	and.w	r3, r3, #32
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d114      	bne.n	80070dc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b10      	cmp	r3, #16
 80070be:	d109      	bne.n	80070d4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2210      	movs	r2, #16
 80070c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070cc:	f043 0204 	orr.w	r2, r3, #4
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2220      	movs	r2, #32
 80070da:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d039      	beq.n	8007164 <I2C_ITError+0x140>
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b11      	cmp	r3, #17
 80070f4:	d002      	beq.n	80070fc <I2C_ITError+0xd8>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b21      	cmp	r3, #33	@ 0x21
 80070fa:	d133      	bne.n	8007164 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007106:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800710a:	d107      	bne.n	800711c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800711a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	4618      	mov	r0, r3
 8007122:	f7fc fc45 	bl	80039b0 <HAL_DMA_GetState>
 8007126:	4603      	mov	r3, r0
 8007128:	2b01      	cmp	r3, #1
 800712a:	d017      	beq.n	800715c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007130:	4a33      	ldr	r2, [pc, #204]	@ (8007200 <I2C_ITError+0x1dc>)
 8007132:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007140:	4618      	mov	r0, r3
 8007142:	f7fc fa35 	bl	80035b0 <HAL_DMA_Abort_IT>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d04d      	beq.n	80071e8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007156:	4610      	mov	r0, r2
 8007158:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800715a:	e045      	b.n	80071e8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f851 	bl	8007204 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007162:	e041      	b.n	80071e8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	2b00      	cmp	r3, #0
 800716a:	d039      	beq.n	80071e0 <I2C_ITError+0x1bc>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2b12      	cmp	r3, #18
 8007170:	d002      	beq.n	8007178 <I2C_ITError+0x154>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2b22      	cmp	r3, #34	@ 0x22
 8007176:	d133      	bne.n	80071e0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007186:	d107      	bne.n	8007198 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007196:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800719c:	4618      	mov	r0, r3
 800719e:	f7fc fc07 	bl	80039b0 <HAL_DMA_GetState>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d017      	beq.n	80071d8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ac:	4a14      	ldr	r2, [pc, #80]	@ (8007200 <I2C_ITError+0x1dc>)
 80071ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fc f9f7 	bl	80035b0 <HAL_DMA_Abort_IT>
 80071c2:	4603      	mov	r3, r0
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d011      	beq.n	80071ec <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80071d2:	4610      	mov	r0, r2
 80071d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071d6:	e009      	b.n	80071ec <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f813 	bl	8007204 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071de:	e005      	b.n	80071ec <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f80f 	bl	8007204 <I2C_TreatErrorCallback>
  }
}
 80071e6:	e002      	b.n	80071ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071e8:	bf00      	nop
 80071ea:	e000      	b.n	80071ee <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80071ec:	bf00      	nop
}
 80071ee:	bf00      	nop
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}
 80071f6:	bf00      	nop
 80071f8:	ffff0000 	.word	0xffff0000
 80071fc:	08006067 	.word	0x08006067
 8007200:	080074dd 	.word	0x080074dd

08007204 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b60      	cmp	r3, #96	@ 0x60
 8007216:	d10e      	bne.n	8007236 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f7fe fdcd 	bl	8005dce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007234:	e009      	b.n	800724a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7fe fdb8 	bl	8005dba <HAL_I2C_ErrorCallback>
}
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b02      	cmp	r3, #2
 8007266:	d103      	bne.n	8007270 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2200      	movs	r2, #0
 800726e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	f003 0301 	and.w	r3, r3, #1
 800727a:	2b01      	cmp	r3, #1
 800727c:	d007      	beq.n	800728e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	699a      	ldr	r2, [r3, #24]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f042 0201 	orr.w	r2, r2, #1
 800728c:	619a      	str	r2, [r3, #24]
  }
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b084      	sub	sp, #16
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072b6:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072bc:	b29b      	uxth	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d104      	bne.n	80072cc <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80072c2:	2120      	movs	r1, #32
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 f959 	bl	800757c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80072ca:	e02d      	b.n	8007328 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80072d4:	441a      	add	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072de:	b29b      	uxth	r3, r3
 80072e0:	2bff      	cmp	r3, #255	@ 0xff
 80072e2:	d903      	bls.n	80072ec <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	22ff      	movs	r2, #255	@ 0xff
 80072e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 80072ea:	e004      	b.n	80072f6 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072fe:	4619      	mov	r1, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3328      	adds	r3, #40	@ 0x28
 8007306:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800730c:	f7fc f880 	bl	8003410 <HAL_DMA_Start_IT>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007316:	2110      	movs	r1, #16
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff fe83 	bl	8007024 <I2C_ITError>
}
 800731e:	e003      	b.n	8007328 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007320:	2140      	movs	r1, #64	@ 0x40
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 f92a 	bl	800757c <I2C_Enable_IRQ>
}
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800733c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800734a:	d002      	beq.n	8007352 <I2C_DMASlaveTransmitCplt+0x22>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d10a      	bne.n	8007368 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007360:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff fb76 	bl	8006a54 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007368:	bf00      	nop
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800737c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800738c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007398:	2120      	movs	r1, #32
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f000 f8ee 	bl	800757c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80073a0:	e03b      	b.n	800741a <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80073aa:	441a      	add	r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	2bff      	cmp	r3, #255	@ 0xff
 80073b8:	d911      	bls.n	80073de <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	699b      	ldr	r3, [r3, #24]
 80073c0:	0c1b      	lsrs	r3, r3, #16
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d103      	bne.n	80073d6 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2201      	movs	r2, #1
 80073d2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073d4:	e008      	b.n	80073e8 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	22ff      	movs	r2, #255	@ 0xff
 80073da:	851a      	strh	r2, [r3, #40]	@ 0x28
 80073dc:	e004      	b.n	80073e8 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3324      	adds	r3, #36	@ 0x24
 80073f2:	4619      	mov	r1, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f8:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 80073fe:	f7fc f807 	bl	8003410 <HAL_DMA_Start_IT>
 8007402:	4603      	mov	r3, r0
 8007404:	2b00      	cmp	r3, #0
 8007406:	d004      	beq.n	8007412 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007408:	2110      	movs	r1, #16
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f7ff fe0a 	bl	8007024 <I2C_ITError>
}
 8007410:	e003      	b.n	800741a <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8007412:	2140      	movs	r1, #64	@ 0x40
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f8b1 	bl	800757c <I2C_Enable_IRQ>
}
 800741a:	bf00      	nop
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007434:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10e      	bne.n	8007460 <I2C_DMASlaveReceiveCplt+0x3e>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007448:	d00a      	beq.n	8007460 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007458:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f7ff fafa 	bl	8006a54 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 8007460:	bf00      	nop
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007470:	2300      	movs	r3, #0
 8007472:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007478:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800747e:	2b00      	cmp	r3, #0
 8007480:	d007      	beq.n	8007492 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800748e:	2301      	movs	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d007      	beq.n	80074aa <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80074a6:	2301      	movs	r3, #1
 80074a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fc fa8e 	bl	80039cc <HAL_DMA_GetError>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d00e      	beq.n	80074d4 <I2C_DMAError+0x6c>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00b      	beq.n	80074d4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ca:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80074cc:	2110      	movs	r1, #16
 80074ce:	68b8      	ldr	r0, [r7, #8]
 80074d0:	f7ff fda8 	bl	8007024 <I2C_ITError>
  }
}
 80074d4:	bf00      	nop
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d003      	beq.n	80074fa <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f6:	2200      	movs	r2, #0
 80074f8:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007506:	2200      	movs	r2, #0
 8007508:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff fe7a 	bl	8007204 <I2C_TreatErrorCallback>
}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	607b      	str	r3, [r7, #4]
 8007522:	460b      	mov	r3, r1
 8007524:	817b      	strh	r3, [r7, #10]
 8007526:	4613      	mov	r3, r2
 8007528:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800752a:	897b      	ldrh	r3, [r7, #10]
 800752c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007530:	7a7b      	ldrb	r3, [r7, #9]
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007538:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	4313      	orrs	r3, r2
 8007542:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007546:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	0d5b      	lsrs	r3, r3, #21
 8007552:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007556:	4b08      	ldr	r3, [pc, #32]	@ (8007578 <I2C_TransferConfig+0x60>)
 8007558:	430b      	orrs	r3, r1
 800755a:	43db      	mvns	r3, r3
 800755c:	ea02 0103 	and.w	r1, r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	697a      	ldr	r2, [r7, #20]
 8007566:	430a      	orrs	r2, r1
 8007568:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800756a:	bf00      	nop
 800756c:	371c      	adds	r7, #28
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	03ff63ff 	.word	0x03ff63ff

0800757c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800757c:	b480      	push	{r7}
 800757e:	b085      	sub	sp, #20
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007590:	4a39      	ldr	r2, [pc, #228]	@ (8007678 <I2C_Enable_IRQ+0xfc>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d032      	beq.n	80075fc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800759a:	4a38      	ldr	r2, [pc, #224]	@ (800767c <I2C_Enable_IRQ+0x100>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d02d      	beq.n	80075fc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80075a4:	4a36      	ldr	r2, [pc, #216]	@ (8007680 <I2C_Enable_IRQ+0x104>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d028      	beq.n	80075fc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	da03      	bge.n	80075ba <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80075b8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075ba:	887b      	ldrh	r3, [r7, #2]
 80075bc:	f003 0301 	and.w	r3, r3, #1
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d003      	beq.n	80075cc <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80075ca:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075cc:	887b      	ldrh	r3, [r7, #2]
 80075ce:	f003 0302 	and.w	r3, r3, #2
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80075dc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80075de:	887b      	ldrh	r3, [r7, #2]
 80075e0:	2b10      	cmp	r3, #16
 80075e2:	d103      	bne.n	80075ec <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80075ea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075ec:	887b      	ldrh	r3, [r7, #2]
 80075ee:	2b20      	cmp	r3, #32
 80075f0:	d133      	bne.n	800765a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f043 0320 	orr.w	r3, r3, #32
 80075f8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80075fa:	e02e      	b.n	800765a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007600:	2b00      	cmp	r3, #0
 8007602:	da03      	bge.n	800760c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800760a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800760c:	887b      	ldrh	r3, [r7, #2]
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d003      	beq.n	800761e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800761c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800761e:	887b      	ldrh	r3, [r7, #2]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800762e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007630:	887b      	ldrh	r3, [r7, #2]
 8007632:	2b10      	cmp	r3, #16
 8007634:	d103      	bne.n	800763e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800763c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800763e:	887b      	ldrh	r3, [r7, #2]
 8007640:	2b20      	cmp	r3, #32
 8007642:	d103      	bne.n	800764c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800764a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	2b40      	cmp	r3, #64	@ 0x40
 8007650:	d103      	bne.n	800765a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007658:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	430a      	orrs	r2, r1
 8007668:	601a      	str	r2, [r3, #0]
}
 800766a:	bf00      	nop
 800766c:	3714      	adds	r7, #20
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	0800626f 	.word	0x0800626f
 800767c:	08006711 	.word	0x08006711
 8007680:	08006475 	.word	0x08006475

08007684 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007690:	2300      	movs	r3, #0
 8007692:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007694:	887b      	ldrh	r3, [r7, #2]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00f      	beq.n	80076be <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80076a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076b2:	2b28      	cmp	r3, #40	@ 0x28
 80076b4:	d003      	beq.n	80076be <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076be:	887b      	ldrh	r3, [r7, #2]
 80076c0:	f003 0302 	and.w	r3, r3, #2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00f      	beq.n	80076e8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80076ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076d6:	b2db      	uxtb	r3, r3
 80076d8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076dc:	2b28      	cmp	r3, #40	@ 0x28
 80076de:	d003      	beq.n	80076e8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80076e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80076e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	da03      	bge.n	80076f8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80076f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076f8:	887b      	ldrh	r3, [r7, #2]
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d103      	bne.n	8007706 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007704:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007706:	887b      	ldrh	r3, [r7, #2]
 8007708:	2b20      	cmp	r3, #32
 800770a:	d103      	bne.n	8007714 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f043 0320 	orr.w	r3, r3, #32
 8007712:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007714:	887b      	ldrh	r3, [r7, #2]
 8007716:	2b40      	cmp	r3, #64	@ 0x40
 8007718:	d103      	bne.n	8007722 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007720:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6819      	ldr	r1, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	43da      	mvns	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	400a      	ands	r2, r1
 8007732:	601a      	str	r2, [r3, #0]
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007750:	b2db      	uxtb	r3, r3
 8007752:	2b20      	cmp	r3, #32
 8007754:	d138      	bne.n	80077c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007760:	2302      	movs	r3, #2
 8007762:	e032      	b.n	80077ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2224      	movs	r2, #36	@ 0x24
 8007770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007792:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6819      	ldr	r1, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	430a      	orrs	r2, r1
 80077a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2220      	movs	r2, #32
 80077b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077c4:	2300      	movs	r3, #0
 80077c6:	e000      	b.n	80077ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80077c8:	2302      	movs	r3, #2
  }
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	370c      	adds	r7, #12
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr

080077d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80077d6:	b480      	push	{r7}
 80077d8:	b085      	sub	sp, #20
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	d139      	bne.n	8007860 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e033      	b.n	8007862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2224      	movs	r2, #36	@ 0x24
 8007806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0201 	bic.w	r2, r2, #1
 8007818:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007828:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	4313      	orrs	r3, r2
 8007832:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f042 0201 	orr.w	r2, r2, #1
 800784a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	e000      	b.n	8007862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007860:	2302      	movs	r3, #2
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
	...

08007870 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800787a:	4b23      	ldr	r3, [pc, #140]	@ (8007908 <HAL_PWREx_EnableOverDrive+0x98>)
 800787c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787e:	4a22      	ldr	r2, [pc, #136]	@ (8007908 <HAL_PWREx_EnableOverDrive+0x98>)
 8007880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007884:	6413      	str	r3, [r2, #64]	@ 0x40
 8007886:	4b20      	ldr	r3, [pc, #128]	@ (8007908 <HAL_PWREx_EnableOverDrive+0x98>)
 8007888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007892:	4b1e      	ldr	r3, [pc, #120]	@ (800790c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a1d      	ldr	r2, [pc, #116]	@ (800790c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800789c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800789e:	f7fa fd67 	bl	8002370 <HAL_GetTick>
 80078a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078a4:	e009      	b.n	80078ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078a6:	f7fa fd63 	bl	8002370 <HAL_GetTick>
 80078aa:	4602      	mov	r2, r0
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078b4:	d901      	bls.n	80078ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80078b6:	2303      	movs	r3, #3
 80078b8:	e022      	b.n	8007900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80078ba:	4b14      	ldr	r3, [pc, #80]	@ (800790c <HAL_PWREx_EnableOverDrive+0x9c>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078c6:	d1ee      	bne.n	80078a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80078c8:	4b10      	ldr	r3, [pc, #64]	@ (800790c <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a0f      	ldr	r2, [pc, #60]	@ (800790c <HAL_PWREx_EnableOverDrive+0x9c>)
 80078ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80078d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078d4:	f7fa fd4c 	bl	8002370 <HAL_GetTick>
 80078d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078da:	e009      	b.n	80078f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80078dc:	f7fa fd48 	bl	8002370 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80078ea:	d901      	bls.n	80078f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80078ec:	2303      	movs	r3, #3
 80078ee:	e007      	b.n	8007900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80078f0:	4b06      	ldr	r3, [pc, #24]	@ (800790c <HAL_PWREx_EnableOverDrive+0x9c>)
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078fc:	d1ee      	bne.n	80078dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	40023800 	.word	0x40023800
 800790c:	40007000 	.word	0x40007000

08007910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b086      	sub	sp, #24
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007918:	2300      	movs	r3, #0
 800791a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e291      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0301 	and.w	r3, r3, #1
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 8087 	beq.w	8007a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007934:	4b96      	ldr	r3, [pc, #600]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 030c 	and.w	r3, r3, #12
 800793c:	2b04      	cmp	r3, #4
 800793e:	d00c      	beq.n	800795a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007940:	4b93      	ldr	r3, [pc, #588]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f003 030c 	and.w	r3, r3, #12
 8007948:	2b08      	cmp	r3, #8
 800794a:	d112      	bne.n	8007972 <HAL_RCC_OscConfig+0x62>
 800794c:	4b90      	ldr	r3, [pc, #576]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007954:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007958:	d10b      	bne.n	8007972 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800795a:	4b8d      	ldr	r3, [pc, #564]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d06c      	beq.n	8007a40 <HAL_RCC_OscConfig+0x130>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d168      	bne.n	8007a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e26b      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800797a:	d106      	bne.n	800798a <HAL_RCC_OscConfig+0x7a>
 800797c:	4b84      	ldr	r3, [pc, #528]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a83      	ldr	r2, [pc, #524]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007982:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007986:	6013      	str	r3, [r2, #0]
 8007988:	e02e      	b.n	80079e8 <HAL_RCC_OscConfig+0xd8>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10c      	bne.n	80079ac <HAL_RCC_OscConfig+0x9c>
 8007992:	4b7f      	ldr	r3, [pc, #508]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a7e      	ldr	r2, [pc, #504]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007998:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800799c:	6013      	str	r3, [r2, #0]
 800799e:	4b7c      	ldr	r3, [pc, #496]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a7b      	ldr	r2, [pc, #492]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	e01d      	b.n	80079e8 <HAL_RCC_OscConfig+0xd8>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80079b4:	d10c      	bne.n	80079d0 <HAL_RCC_OscConfig+0xc0>
 80079b6:	4b76      	ldr	r3, [pc, #472]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a75      	ldr	r2, [pc, #468]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80079c0:	6013      	str	r3, [r2, #0]
 80079c2:	4b73      	ldr	r3, [pc, #460]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a72      	ldr	r2, [pc, #456]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	e00b      	b.n	80079e8 <HAL_RCC_OscConfig+0xd8>
 80079d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a6e      	ldr	r2, [pc, #440]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a6b      	ldr	r2, [pc, #428]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 80079e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80079e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d013      	beq.n	8007a18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f0:	f7fa fcbe 	bl	8002370 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f6:	e008      	b.n	8007a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079f8:	f7fa fcba 	bl	8002370 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	2b64      	cmp	r3, #100	@ 0x64
 8007a04:	d901      	bls.n	8007a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a06:	2303      	movs	r3, #3
 8007a08:	e21f      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a0a:	4b61      	ldr	r3, [pc, #388]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d0f0      	beq.n	80079f8 <HAL_RCC_OscConfig+0xe8>
 8007a16:	e014      	b.n	8007a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a18:	f7fa fcaa 	bl	8002370 <HAL_GetTick>
 8007a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a20:	f7fa fca6 	bl	8002370 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b64      	cmp	r3, #100	@ 0x64
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e20b      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a32:	4b57      	ldr	r3, [pc, #348]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1f0      	bne.n	8007a20 <HAL_RCC_OscConfig+0x110>
 8007a3e:	e000      	b.n	8007a42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d069      	beq.n	8007b22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a4e:	4b50      	ldr	r3, [pc, #320]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f003 030c 	and.w	r3, r3, #12
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00b      	beq.n	8007a72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a5a:	4b4d      	ldr	r3, [pc, #308]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 030c 	and.w	r3, r3, #12
 8007a62:	2b08      	cmp	r3, #8
 8007a64:	d11c      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x190>
 8007a66:	4b4a      	ldr	r3, [pc, #296]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d116      	bne.n	8007aa0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a72:	4b47      	ldr	r3, [pc, #284]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <HAL_RCC_OscConfig+0x17a>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d001      	beq.n	8007a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e1df      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8a:	4b41      	ldr	r3, [pc, #260]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	00db      	lsls	r3, r3, #3
 8007a98:	493d      	ldr	r1, [pc, #244]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a9e:	e040      	b.n	8007b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d023      	beq.n	8007af0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007aa8:	4b39      	ldr	r3, [pc, #228]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a38      	ldr	r2, [pc, #224]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab4:	f7fa fc5c 	bl	8002370 <HAL_GetTick>
 8007ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007abc:	f7fa fc58 	bl	8002370 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e1bd      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ace:	4b30      	ldr	r3, [pc, #192]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0302 	and.w	r3, r3, #2
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0f0      	beq.n	8007abc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ada:	4b2d      	ldr	r3, [pc, #180]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	4929      	ldr	r1, [pc, #164]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	600b      	str	r3, [r1, #0]
 8007aee:	e018      	b.n	8007b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007af0:	4b27      	ldr	r3, [pc, #156]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a26      	ldr	r2, [pc, #152]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007afc:	f7fa fc38 	bl	8002370 <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b04:	f7fa fc34 	bl	8002370 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e199      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b16:	4b1e      	ldr	r3, [pc, #120]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0308 	and.w	r3, r3, #8
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d038      	beq.n	8007ba0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d019      	beq.n	8007b6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b36:	4b16      	ldr	r3, [pc, #88]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007b38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b3a:	4a15      	ldr	r2, [pc, #84]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b42:	f7fa fc15 	bl	8002370 <HAL_GetTick>
 8007b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b4a:	f7fa fc11 	bl	8002370 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e176      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b60:	f003 0302 	and.w	r3, r3, #2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0f0      	beq.n	8007b4a <HAL_RCC_OscConfig+0x23a>
 8007b68:	e01a      	b.n	8007ba0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b6a:	4b09      	ldr	r3, [pc, #36]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007b6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b6e:	4a08      	ldr	r2, [pc, #32]	@ (8007b90 <HAL_RCC_OscConfig+0x280>)
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b76:	f7fa fbfb 	bl	8002370 <HAL_GetTick>
 8007b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b7c:	e00a      	b.n	8007b94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b7e:	f7fa fbf7 	bl	8002370 <HAL_GetTick>
 8007b82:	4602      	mov	r2, r0
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d903      	bls.n	8007b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e15c      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
 8007b90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b94:	4b91      	ldr	r3, [pc, #580]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007b96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1ee      	bne.n	8007b7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f003 0304 	and.w	r3, r3, #4
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 80a4 	beq.w	8007cf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007bae:	4b8b      	ldr	r3, [pc, #556]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10d      	bne.n	8007bd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007bba:	4b88      	ldr	r3, [pc, #544]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bbe:	4a87      	ldr	r2, [pc, #540]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007bc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007bc6:	4b85      	ldr	r3, [pc, #532]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007bce:	60bb      	str	r3, [r7, #8]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bd6:	4b82      	ldr	r3, [pc, #520]	@ (8007de0 <HAL_RCC_OscConfig+0x4d0>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d118      	bne.n	8007c14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007be2:	4b7f      	ldr	r3, [pc, #508]	@ (8007de0 <HAL_RCC_OscConfig+0x4d0>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a7e      	ldr	r2, [pc, #504]	@ (8007de0 <HAL_RCC_OscConfig+0x4d0>)
 8007be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bee:	f7fa fbbf 	bl	8002370 <HAL_GetTick>
 8007bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bf4:	e008      	b.n	8007c08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bf6:	f7fa fbbb 	bl	8002370 <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b64      	cmp	r3, #100	@ 0x64
 8007c02:	d901      	bls.n	8007c08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e120      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c08:	4b75      	ldr	r3, [pc, #468]	@ (8007de0 <HAL_RCC_OscConfig+0x4d0>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0f0      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d106      	bne.n	8007c2a <HAL_RCC_OscConfig+0x31a>
 8007c1c:	4b6f      	ldr	r3, [pc, #444]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c20:	4a6e      	ldr	r2, [pc, #440]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c22:	f043 0301 	orr.w	r3, r3, #1
 8007c26:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c28:	e02d      	b.n	8007c86 <HAL_RCC_OscConfig+0x376>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	689b      	ldr	r3, [r3, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10c      	bne.n	8007c4c <HAL_RCC_OscConfig+0x33c>
 8007c32:	4b6a      	ldr	r3, [pc, #424]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c36:	4a69      	ldr	r2, [pc, #420]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c38:	f023 0301 	bic.w	r3, r3, #1
 8007c3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c3e:	4b67      	ldr	r3, [pc, #412]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c42:	4a66      	ldr	r2, [pc, #408]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c44:	f023 0304 	bic.w	r3, r3, #4
 8007c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c4a:	e01c      	b.n	8007c86 <HAL_RCC_OscConfig+0x376>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b05      	cmp	r3, #5
 8007c52:	d10c      	bne.n	8007c6e <HAL_RCC_OscConfig+0x35e>
 8007c54:	4b61      	ldr	r3, [pc, #388]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c58:	4a60      	ldr	r2, [pc, #384]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c5a:	f043 0304 	orr.w	r3, r3, #4
 8007c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c60:	4b5e      	ldr	r3, [pc, #376]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c64:	4a5d      	ldr	r2, [pc, #372]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c66:	f043 0301 	orr.w	r3, r3, #1
 8007c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c6c:	e00b      	b.n	8007c86 <HAL_RCC_OscConfig+0x376>
 8007c6e:	4b5b      	ldr	r3, [pc, #364]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c72:	4a5a      	ldr	r2, [pc, #360]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c74:	f023 0301 	bic.w	r3, r3, #1
 8007c78:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c7a:	4b58      	ldr	r3, [pc, #352]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c7e:	4a57      	ldr	r2, [pc, #348]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007c80:	f023 0304 	bic.w	r3, r3, #4
 8007c84:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d015      	beq.n	8007cba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c8e:	f7fa fb6f 	bl	8002370 <HAL_GetTick>
 8007c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c94:	e00a      	b.n	8007cac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c96:	f7fa fb6b 	bl	8002370 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d901      	bls.n	8007cac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e0ce      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cac:	4b4b      	ldr	r3, [pc, #300]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0ee      	beq.n	8007c96 <HAL_RCC_OscConfig+0x386>
 8007cb8:	e014      	b.n	8007ce4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cba:	f7fa fb59 	bl	8002370 <HAL_GetTick>
 8007cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cc0:	e00a      	b.n	8007cd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc2:	f7fa fb55 	bl	8002370 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d901      	bls.n	8007cd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e0b8      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007cd8:	4b40      	ldr	r3, [pc, #256]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1ee      	bne.n	8007cc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d105      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007cea:	4b3c      	ldr	r3, [pc, #240]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cee:	4a3b      	ldr	r2, [pc, #236]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007cf0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007cf4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 80a4 	beq.w	8007e48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d00:	4b36      	ldr	r3, [pc, #216]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	f003 030c 	and.w	r3, r3, #12
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d06b      	beq.n	8007de4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d149      	bne.n	8007da8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d14:	4b31      	ldr	r3, [pc, #196]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a30      	ldr	r2, [pc, #192]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007d1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d20:	f7fa fb26 	bl	8002370 <HAL_GetTick>
 8007d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d28:	f7fa fb22 	bl	8002370 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e087      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d3a:	4b28      	ldr	r3, [pc, #160]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d1f0      	bne.n	8007d28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69da      	ldr	r2, [r3, #28]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6a1b      	ldr	r3, [r3, #32]
 8007d4e:	431a      	orrs	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d54:	019b      	lsls	r3, r3, #6
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d5c:	085b      	lsrs	r3, r3, #1
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	041b      	lsls	r3, r3, #16
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d68:	061b      	lsls	r3, r3, #24
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007d6e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d74:	4b19      	ldr	r3, [pc, #100]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a18      	ldr	r2, [pc, #96]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007d7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d80:	f7fa faf6 	bl	8002370 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d88:	f7fa faf2 	bl	8002370 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e057      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d9a:	4b10      	ldr	r3, [pc, #64]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0f0      	beq.n	8007d88 <HAL_RCC_OscConfig+0x478>
 8007da6:	e04f      	b.n	8007e48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da8:	4b0c      	ldr	r3, [pc, #48]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a0b      	ldr	r2, [pc, #44]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db4:	f7fa fadc 	bl	8002370 <HAL_GetTick>
 8007db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dbc:	f7fa fad8 	bl	8002370 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e03d      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dce:	4b03      	ldr	r3, [pc, #12]	@ (8007ddc <HAL_RCC_OscConfig+0x4cc>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d1f0      	bne.n	8007dbc <HAL_RCC_OscConfig+0x4ac>
 8007dda:	e035      	b.n	8007e48 <HAL_RCC_OscConfig+0x538>
 8007ddc:	40023800 	.word	0x40023800
 8007de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007de4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e54 <HAL_RCC_OscConfig+0x544>)
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d028      	beq.n	8007e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d121      	bne.n	8007e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d11a      	bne.n	8007e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e14:	4013      	ands	r3, r2
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d111      	bne.n	8007e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d107      	bne.n	8007e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d001      	beq.n	8007e48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e000      	b.n	8007e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007e48:	2300      	movs	r3, #0
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	40023800 	.word	0x40023800

08007e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d101      	bne.n	8007e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e0d0      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007e70:	4b6a      	ldr	r3, [pc, #424]	@ (800801c <HAL_RCC_ClockConfig+0x1c4>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 030f 	and.w	r3, r3, #15
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d910      	bls.n	8007ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e7e:	4b67      	ldr	r3, [pc, #412]	@ (800801c <HAL_RCC_ClockConfig+0x1c4>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	f023 020f 	bic.w	r2, r3, #15
 8007e86:	4965      	ldr	r1, [pc, #404]	@ (800801c <HAL_RCC_ClockConfig+0x1c4>)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e8e:	4b63      	ldr	r3, [pc, #396]	@ (800801c <HAL_RCC_ClockConfig+0x1c4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	683a      	ldr	r2, [r7, #0]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d001      	beq.n	8007ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	e0b8      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0302 	and.w	r3, r3, #2
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d020      	beq.n	8007eee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0304 	and.w	r3, r3, #4
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007eb8:	4b59      	ldr	r3, [pc, #356]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	4a58      	ldr	r2, [pc, #352]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007ebe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ec2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ed0:	4b53      	ldr	r3, [pc, #332]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed2:	689b      	ldr	r3, [r3, #8]
 8007ed4:	4a52      	ldr	r2, [pc, #328]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007ed6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007edc:	4b50      	ldr	r3, [pc, #320]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007ede:	689b      	ldr	r3, [r3, #8]
 8007ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	494d      	ldr	r1, [pc, #308]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007eea:	4313      	orrs	r3, r2
 8007eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d040      	beq.n	8007f7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d107      	bne.n	8007f12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f02:	4b47      	ldr	r3, [pc, #284]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d115      	bne.n	8007f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e07f      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d107      	bne.n	8007f2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f1a:	4b41      	ldr	r3, [pc, #260]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d109      	bne.n	8007f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f26:	2301      	movs	r3, #1
 8007f28:	e073      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f003 0302 	and.w	r3, r3, #2
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e06b      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007f3a:	4b39      	ldr	r3, [pc, #228]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f023 0203 	bic.w	r2, r3, #3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	4936      	ldr	r1, [pc, #216]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f4c:	f7fa fa10 	bl	8002370 <HAL_GetTick>
 8007f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f52:	e00a      	b.n	8007f6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f54:	f7fa fa0c 	bl	8002370 <HAL_GetTick>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e053      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f6a:	4b2d      	ldr	r3, [pc, #180]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	f003 020c 	and.w	r2, r3, #12
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	685b      	ldr	r3, [r3, #4]
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d1eb      	bne.n	8007f54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007f7c:	4b27      	ldr	r3, [pc, #156]	@ (800801c <HAL_RCC_ClockConfig+0x1c4>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 030f 	and.w	r3, r3, #15
 8007f84:	683a      	ldr	r2, [r7, #0]
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d210      	bcs.n	8007fac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f8a:	4b24      	ldr	r3, [pc, #144]	@ (800801c <HAL_RCC_ClockConfig+0x1c4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f023 020f 	bic.w	r2, r3, #15
 8007f92:	4922      	ldr	r1, [pc, #136]	@ (800801c <HAL_RCC_ClockConfig+0x1c4>)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	4313      	orrs	r3, r2
 8007f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f9a:	4b20      	ldr	r3, [pc, #128]	@ (800801c <HAL_RCC_ClockConfig+0x1c4>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 030f 	and.w	r3, r3, #15
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d001      	beq.n	8007fac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e032      	b.n	8008012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fb8:	4b19      	ldr	r3, [pc, #100]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	4916      	ldr	r1, [pc, #88]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0308 	and.w	r3, r3, #8
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d009      	beq.n	8007fea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007fd6:	4b12      	ldr	r3, [pc, #72]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	490e      	ldr	r1, [pc, #56]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007fea:	f000 f821 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8008020 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	091b      	lsrs	r3, r3, #4
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	490a      	ldr	r1, [pc, #40]	@ (8008024 <HAL_RCC_ClockConfig+0x1cc>)
 8007ffc:	5ccb      	ldrb	r3, [r1, r3]
 8007ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8008002:	4a09      	ldr	r2, [pc, #36]	@ (8008028 <HAL_RCC_ClockConfig+0x1d0>)
 8008004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008006:	4b09      	ldr	r3, [pc, #36]	@ (800802c <HAL_RCC_ClockConfig+0x1d4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4618      	mov	r0, r3
 800800c:	f7f9 fb06 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 8008010:	2300      	movs	r3, #0
}
 8008012:	4618      	mov	r0, r3
 8008014:	3710      	adds	r7, #16
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	40023c00 	.word	0x40023c00
 8008020:	40023800 	.word	0x40023800
 8008024:	08024d4c 	.word	0x08024d4c
 8008028:	20000000 	.word	0x20000000
 800802c:	20000004 	.word	0x20000004

08008030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008034:	b090      	sub	sp, #64	@ 0x40
 8008036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	637b      	str	r3, [r7, #52]	@ 0x34
 800803c:	2300      	movs	r3, #0
 800803e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008040:	2300      	movs	r3, #0
 8008042:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008048:	4b59      	ldr	r3, [pc, #356]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f003 030c 	and.w	r3, r3, #12
 8008050:	2b08      	cmp	r3, #8
 8008052:	d00d      	beq.n	8008070 <HAL_RCC_GetSysClockFreq+0x40>
 8008054:	2b08      	cmp	r3, #8
 8008056:	f200 80a1 	bhi.w	800819c <HAL_RCC_GetSysClockFreq+0x16c>
 800805a:	2b00      	cmp	r3, #0
 800805c:	d002      	beq.n	8008064 <HAL_RCC_GetSysClockFreq+0x34>
 800805e:	2b04      	cmp	r3, #4
 8008060:	d003      	beq.n	800806a <HAL_RCC_GetSysClockFreq+0x3a>
 8008062:	e09b      	b.n	800819c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008064:	4b53      	ldr	r3, [pc, #332]	@ (80081b4 <HAL_RCC_GetSysClockFreq+0x184>)
 8008066:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008068:	e09b      	b.n	80081a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800806a:	4b53      	ldr	r3, [pc, #332]	@ (80081b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800806c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800806e:	e098      	b.n	80081a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008070:	4b4f      	ldr	r3, [pc, #316]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008078:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800807a:	4b4d      	ldr	r3, [pc, #308]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0x180>)
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d028      	beq.n	80080d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008086:	4b4a      	ldr	r3, [pc, #296]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	099b      	lsrs	r3, r3, #6
 800808c:	2200      	movs	r2, #0
 800808e:	623b      	str	r3, [r7, #32]
 8008090:	627a      	str	r2, [r7, #36]	@ 0x24
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008098:	2100      	movs	r1, #0
 800809a:	4b47      	ldr	r3, [pc, #284]	@ (80081b8 <HAL_RCC_GetSysClockFreq+0x188>)
 800809c:	fb03 f201 	mul.w	r2, r3, r1
 80080a0:	2300      	movs	r3, #0
 80080a2:	fb00 f303 	mul.w	r3, r0, r3
 80080a6:	4413      	add	r3, r2
 80080a8:	4a43      	ldr	r2, [pc, #268]	@ (80081b8 <HAL_RCC_GetSysClockFreq+0x188>)
 80080aa:	fba0 1202 	umull	r1, r2, r0, r2
 80080ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080b0:	460a      	mov	r2, r1
 80080b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80080b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b6:	4413      	add	r3, r2
 80080b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080bc:	2200      	movs	r2, #0
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	61fa      	str	r2, [r7, #28]
 80080c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80080c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80080ca:	f7f8 f8f1 	bl	80002b0 <__aeabi_uldivmod>
 80080ce:	4602      	mov	r2, r0
 80080d0:	460b      	mov	r3, r1
 80080d2:	4613      	mov	r3, r2
 80080d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080d6:	e053      	b.n	8008180 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080d8:	4b35      	ldr	r3, [pc, #212]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0x180>)
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	099b      	lsrs	r3, r3, #6
 80080de:	2200      	movs	r2, #0
 80080e0:	613b      	str	r3, [r7, #16]
 80080e2:	617a      	str	r2, [r7, #20]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80080ea:	f04f 0b00 	mov.w	fp, #0
 80080ee:	4652      	mov	r2, sl
 80080f0:	465b      	mov	r3, fp
 80080f2:	f04f 0000 	mov.w	r0, #0
 80080f6:	f04f 0100 	mov.w	r1, #0
 80080fa:	0159      	lsls	r1, r3, #5
 80080fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008100:	0150      	lsls	r0, r2, #5
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	ebb2 080a 	subs.w	r8, r2, sl
 800810a:	eb63 090b 	sbc.w	r9, r3, fp
 800810e:	f04f 0200 	mov.w	r2, #0
 8008112:	f04f 0300 	mov.w	r3, #0
 8008116:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800811a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800811e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008122:	ebb2 0408 	subs.w	r4, r2, r8
 8008126:	eb63 0509 	sbc.w	r5, r3, r9
 800812a:	f04f 0200 	mov.w	r2, #0
 800812e:	f04f 0300 	mov.w	r3, #0
 8008132:	00eb      	lsls	r3, r5, #3
 8008134:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008138:	00e2      	lsls	r2, r4, #3
 800813a:	4614      	mov	r4, r2
 800813c:	461d      	mov	r5, r3
 800813e:	eb14 030a 	adds.w	r3, r4, sl
 8008142:	603b      	str	r3, [r7, #0]
 8008144:	eb45 030b 	adc.w	r3, r5, fp
 8008148:	607b      	str	r3, [r7, #4]
 800814a:	f04f 0200 	mov.w	r2, #0
 800814e:	f04f 0300 	mov.w	r3, #0
 8008152:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008156:	4629      	mov	r1, r5
 8008158:	028b      	lsls	r3, r1, #10
 800815a:	4621      	mov	r1, r4
 800815c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008160:	4621      	mov	r1, r4
 8008162:	028a      	lsls	r2, r1, #10
 8008164:	4610      	mov	r0, r2
 8008166:	4619      	mov	r1, r3
 8008168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816a:	2200      	movs	r2, #0
 800816c:	60bb      	str	r3, [r7, #8]
 800816e:	60fa      	str	r2, [r7, #12]
 8008170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008174:	f7f8 f89c 	bl	80002b0 <__aeabi_uldivmod>
 8008178:	4602      	mov	r2, r0
 800817a:	460b      	mov	r3, r1
 800817c:	4613      	mov	r3, r2
 800817e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008180:	4b0b      	ldr	r3, [pc, #44]	@ (80081b0 <HAL_RCC_GetSysClockFreq+0x180>)
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	0c1b      	lsrs	r3, r3, #16
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	3301      	adds	r3, #1
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008190:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	fbb2 f3f3 	udiv	r3, r2, r3
 8008198:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800819a:	e002      	b.n	80081a2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800819c:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <HAL_RCC_GetSysClockFreq+0x184>)
 800819e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80081a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3740      	adds	r7, #64	@ 0x40
 80081a8:	46bd      	mov	sp, r7
 80081aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081ae:	bf00      	nop
 80081b0:	40023800 	.word	0x40023800
 80081b4:	00f42400 	.word	0x00f42400
 80081b8:	017d7840 	.word	0x017d7840

080081bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80081c0:	4b03      	ldr	r3, [pc, #12]	@ (80081d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80081c2:	681b      	ldr	r3, [r3, #0]
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	20000000 	.word	0x20000000

080081d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80081d8:	f7ff fff0 	bl	80081bc <HAL_RCC_GetHCLKFreq>
 80081dc:	4602      	mov	r2, r0
 80081de:	4b05      	ldr	r3, [pc, #20]	@ (80081f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80081e0:	689b      	ldr	r3, [r3, #8]
 80081e2:	0a9b      	lsrs	r3, r3, #10
 80081e4:	f003 0307 	and.w	r3, r3, #7
 80081e8:	4903      	ldr	r1, [pc, #12]	@ (80081f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80081ea:	5ccb      	ldrb	r3, [r1, r3]
 80081ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	40023800 	.word	0x40023800
 80081f8:	08024d5c 	.word	0x08024d5c

080081fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008200:	f7ff ffdc 	bl	80081bc <HAL_RCC_GetHCLKFreq>
 8008204:	4602      	mov	r2, r0
 8008206:	4b05      	ldr	r3, [pc, #20]	@ (800821c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	0b5b      	lsrs	r3, r3, #13
 800820c:	f003 0307 	and.w	r3, r3, #7
 8008210:	4903      	ldr	r1, [pc, #12]	@ (8008220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008212:	5ccb      	ldrb	r3, [r1, r3]
 8008214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008218:	4618      	mov	r0, r3
 800821a:	bd80      	pop	{r7, pc}
 800821c:	40023800 	.word	0x40023800
 8008220:	08024d5c 	.word	0x08024d5c

08008224 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	220f      	movs	r2, #15
 8008232:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008234:	4b12      	ldr	r3, [pc, #72]	@ (8008280 <HAL_RCC_GetClockConfig+0x5c>)
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f003 0203 	and.w	r2, r3, #3
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008240:	4b0f      	ldr	r3, [pc, #60]	@ (8008280 <HAL_RCC_GetClockConfig+0x5c>)
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800824c:	4b0c      	ldr	r3, [pc, #48]	@ (8008280 <HAL_RCC_GetClockConfig+0x5c>)
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008258:	4b09      	ldr	r3, [pc, #36]	@ (8008280 <HAL_RCC_GetClockConfig+0x5c>)
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	08db      	lsrs	r3, r3, #3
 800825e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008266:	4b07      	ldr	r3, [pc, #28]	@ (8008284 <HAL_RCC_GetClockConfig+0x60>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 020f 	and.w	r2, r3, #15
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	601a      	str	r2, [r3, #0]
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40023800 	.word	0x40023800
 8008284:	40023c00 	.word	0x40023c00

08008288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b088      	sub	sp, #32
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008290:	2300      	movs	r3, #0
 8008292:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008294:	2300      	movs	r3, #0
 8008296:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008298:	2300      	movs	r3, #0
 800829a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d012      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082b0:	4b69      	ldr	r3, [pc, #420]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b2:	689b      	ldr	r3, [r3, #8]
 80082b4:	4a68      	ldr	r2, [pc, #416]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b6:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80082ba:	6093      	str	r3, [r2, #8]
 80082bc:	4b66      	ldr	r3, [pc, #408]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082be:	689a      	ldr	r2, [r3, #8]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082c4:	4964      	ldr	r1, [pc, #400]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082c6:	4313      	orrs	r3, r2
 80082c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d101      	bne.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80082d2:	2301      	movs	r3, #1
 80082d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d017      	beq.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082e2:	4b5d      	ldr	r3, [pc, #372]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082e8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f0:	4959      	ldr	r1, [pc, #356]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f2:	4313      	orrs	r3, r2
 80082f4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008300:	d101      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008302:	2301      	movs	r3, #1
 8008304:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800830e:	2301      	movs	r3, #1
 8008310:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d017      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800831e:	4b4e      	ldr	r3, [pc, #312]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008324:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800832c:	494a      	ldr	r1, [pc, #296]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800832e:	4313      	orrs	r3, r2
 8008330:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008338:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800833c:	d101      	bne.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800833e:	2301      	movs	r3, #1
 8008340:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800834a:	2301      	movs	r3, #1
 800834c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800835a:	2301      	movs	r3, #1
 800835c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	f000 808b 	beq.w	8008482 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800836c:	4b3a      	ldr	r3, [pc, #232]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800836e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008370:	4a39      	ldr	r2, [pc, #228]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008376:	6413      	str	r3, [r2, #64]	@ 0x40
 8008378:	4b37      	ldr	r3, [pc, #220]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800837a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800837c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008380:	60bb      	str	r3, [r7, #8]
 8008382:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008384:	4b35      	ldr	r3, [pc, #212]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a34      	ldr	r2, [pc, #208]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800838a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800838e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008390:	f7f9 ffee 	bl	8002370 <HAL_GetTick>
 8008394:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008396:	e008      	b.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008398:	f7f9 ffea 	bl	8002370 <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b64      	cmp	r3, #100	@ 0x64
 80083a4:	d901      	bls.n	80083aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e357      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083aa:	4b2c      	ldr	r3, [pc, #176]	@ (800845c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0f0      	beq.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083b6:	4b28      	ldr	r3, [pc, #160]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d035      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d02e      	beq.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083d4:	4b20      	ldr	r3, [pc, #128]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80083de:	4b1e      	ldr	r3, [pc, #120]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e2:	4a1d      	ldr	r2, [pc, #116]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083e8:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80083ea:	4b1b      	ldr	r3, [pc, #108]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083f4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80083f6:	4a18      	ldr	r2, [pc, #96]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80083fc:	4b16      	ldr	r3, [pc, #88]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b01      	cmp	r3, #1
 8008406:	d114      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008408:	f7f9 ffb2 	bl	8002370 <HAL_GetTick>
 800840c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800840e:	e00a      	b.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008410:	f7f9 ffae 	bl	8002370 <HAL_GetTick>
 8008414:	4602      	mov	r2, r0
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	1ad3      	subs	r3, r2, r3
 800841a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800841e:	4293      	cmp	r3, r2
 8008420:	d901      	bls.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e319      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008426:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800842a:	f003 0302 	and.w	r3, r3, #2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0ee      	beq.n	8008410 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008436:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800843a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800843e:	d111      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008440:	4b05      	ldr	r3, [pc, #20]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800844c:	4b04      	ldr	r3, [pc, #16]	@ (8008460 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800844e:	400b      	ands	r3, r1
 8008450:	4901      	ldr	r1, [pc, #4]	@ (8008458 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008452:	4313      	orrs	r3, r2
 8008454:	608b      	str	r3, [r1, #8]
 8008456:	e00b      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008458:	40023800 	.word	0x40023800
 800845c:	40007000 	.word	0x40007000
 8008460:	0ffffcff 	.word	0x0ffffcff
 8008464:	4baa      	ldr	r3, [pc, #680]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	4aa9      	ldr	r2, [pc, #676]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800846a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800846e:	6093      	str	r3, [r2, #8]
 8008470:	4ba7      	ldr	r3, [pc, #668]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008472:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800847c:	49a4      	ldr	r1, [pc, #656]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800847e:	4313      	orrs	r3, r2
 8008480:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0310 	and.w	r3, r3, #16
 800848a:	2b00      	cmp	r3, #0
 800848c:	d010      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800848e:	4ba0      	ldr	r3, [pc, #640]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008490:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008494:	4a9e      	ldr	r2, [pc, #632]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008496:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800849a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800849e:	4b9c      	ldr	r3, [pc, #624]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084a8:	4999      	ldr	r1, [pc, #612]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084aa:	4313      	orrs	r3, r2
 80084ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00a      	beq.n	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084bc:	4b94      	ldr	r3, [pc, #592]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80084ca:	4991      	ldr	r1, [pc, #580]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084cc:	4313      	orrs	r3, r2
 80084ce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00a      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084de:	4b8c      	ldr	r3, [pc, #560]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80084ec:	4988      	ldr	r1, [pc, #544]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008500:	4b83      	ldr	r3, [pc, #524]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008506:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800850e:	4980      	ldr	r1, [pc, #512]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008510:	4313      	orrs	r3, r2
 8008512:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008522:	4b7b      	ldr	r3, [pc, #492]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008528:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008530:	4977      	ldr	r1, [pc, #476]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008532:	4313      	orrs	r3, r2
 8008534:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00a      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008544:	4b72      	ldr	r3, [pc, #456]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800854a:	f023 0203 	bic.w	r2, r3, #3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008552:	496f      	ldr	r1, [pc, #444]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008554:	4313      	orrs	r3, r2
 8008556:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008566:	4b6a      	ldr	r3, [pc, #424]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800856c:	f023 020c 	bic.w	r2, r3, #12
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008574:	4966      	ldr	r1, [pc, #408]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008576:	4313      	orrs	r3, r2
 8008578:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008588:	4b61      	ldr	r3, [pc, #388]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800858a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800858e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008596:	495e      	ldr	r1, [pc, #376]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008598:	4313      	orrs	r3, r2
 800859a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085aa:	4b59      	ldr	r3, [pc, #356]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b0:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085b8:	4955      	ldr	r1, [pc, #340]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80085cc:	4b50      	ldr	r3, [pc, #320]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085da:	494d      	ldr	r1, [pc, #308]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80085ee:	4b48      	ldr	r3, [pc, #288]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80085fc:	4944      	ldr	r1, [pc, #272]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008610:	4b3f      	ldr	r3, [pc, #252]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008616:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800861e:	493c      	ldr	r1, [pc, #240]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008620:	4313      	orrs	r3, r2
 8008622:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008632:	4b37      	ldr	r3, [pc, #220]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008638:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008640:	4933      	ldr	r1, [pc, #204]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008642:	4313      	orrs	r3, r2
 8008644:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008654:	4b2e      	ldr	r3, [pc, #184]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800865a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008662:	492b      	ldr	r1, [pc, #172]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008664:	4313      	orrs	r3, r2
 8008666:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d011      	beq.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008676:	4b26      	ldr	r3, [pc, #152]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008678:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800867c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008684:	4922      	ldr	r1, [pc, #136]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008686:	4313      	orrs	r3, r2
 8008688:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008690:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008694:	d101      	bne.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008696:	2301      	movs	r3, #1
 8008698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0308 	and.w	r3, r3, #8
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086a6:	2301      	movs	r3, #1
 80086a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00a      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086b6:	4b16      	ldr	r3, [pc, #88]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086bc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80086c4:	4912      	ldr	r1, [pc, #72]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d00b      	beq.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80086d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086de:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086e8:	4909      	ldr	r1, [pc, #36]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d006      	beq.n	8008704 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f000 80d9 	beq.w	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008704:	4b02      	ldr	r3, [pc, #8]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a01      	ldr	r2, [pc, #4]	@ (8008710 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800870a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800870e:	e001      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008710:	40023800 	.word	0x40023800
 8008714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008716:	f7f9 fe2b 	bl	8002370 <HAL_GetTick>
 800871a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800871c:	e008      	b.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800871e:	f7f9 fe27 	bl	8002370 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b64      	cmp	r3, #100	@ 0x64
 800872a:	d901      	bls.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e194      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008730:	4b6c      	ldr	r3, [pc, #432]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f0      	bne.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b00      	cmp	r3, #0
 8008746:	d021      	beq.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874c:	2b00      	cmp	r3, #0
 800874e:	d11d      	bne.n	800878c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008750:	4b64      	ldr	r3, [pc, #400]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008756:	0c1b      	lsrs	r3, r3, #16
 8008758:	f003 0303 	and.w	r3, r3, #3
 800875c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800875e:	4b61      	ldr	r3, [pc, #388]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008764:	0e1b      	lsrs	r3, r3, #24
 8008766:	f003 030f 	and.w	r3, r3, #15
 800876a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	019a      	lsls	r2, r3, #6
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	431a      	orrs	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	061b      	lsls	r3, r3, #24
 800877c:	431a      	orrs	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	071b      	lsls	r3, r3, #28
 8008784:	4957      	ldr	r1, [pc, #348]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008786:	4313      	orrs	r3, r2
 8008788:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008794:	2b00      	cmp	r3, #0
 8008796:	d004      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800879c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087a0:	d00a      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d02e      	beq.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80087b6:	d129      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087b8:	4b4a      	ldr	r3, [pc, #296]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087be:	0c1b      	lsrs	r3, r3, #16
 80087c0:	f003 0303 	and.w	r3, r3, #3
 80087c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80087c6:	4b47      	ldr	r3, [pc, #284]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087cc:	0f1b      	lsrs	r3, r3, #28
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	019a      	lsls	r2, r3, #6
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	041b      	lsls	r3, r3, #16
 80087de:	431a      	orrs	r2, r3
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	061b      	lsls	r3, r3, #24
 80087e6:	431a      	orrs	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	071b      	lsls	r3, r3, #28
 80087ec:	493d      	ldr	r1, [pc, #244]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80087f4:	4b3b      	ldr	r3, [pc, #236]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80087fa:	f023 021f 	bic.w	r2, r3, #31
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008802:	3b01      	subs	r3, #1
 8008804:	4937      	ldr	r1, [pc, #220]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008806:	4313      	orrs	r3, r2
 8008808:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008814:	2b00      	cmp	r3, #0
 8008816:	d01d      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008818:	4b32      	ldr	r3, [pc, #200]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800881a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800881e:	0e1b      	lsrs	r3, r3, #24
 8008820:	f003 030f 	and.w	r3, r3, #15
 8008824:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008826:	4b2f      	ldr	r3, [pc, #188]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800882c:	0f1b      	lsrs	r3, r3, #28
 800882e:	f003 0307 	and.w	r3, r3, #7
 8008832:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	019a      	lsls	r2, r3, #6
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	691b      	ldr	r3, [r3, #16]
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	431a      	orrs	r2, r3
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	061b      	lsls	r3, r3, #24
 8008846:	431a      	orrs	r2, r3
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	071b      	lsls	r3, r3, #28
 800884c:	4925      	ldr	r1, [pc, #148]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d011      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	019a      	lsls	r2, r3, #6
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	691b      	ldr	r3, [r3, #16]
 800886a:	041b      	lsls	r3, r3, #16
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	061b      	lsls	r3, r3, #24
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	071b      	lsls	r3, r3, #28
 800887c:	4919      	ldr	r1, [pc, #100]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800887e:	4313      	orrs	r3, r2
 8008880:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008884:	4b17      	ldr	r3, [pc, #92]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a16      	ldr	r2, [pc, #88]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800888a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800888e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008890:	f7f9 fd6e 	bl	8002370 <HAL_GetTick>
 8008894:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008896:	e008      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008898:	f7f9 fd6a 	bl	8002370 <HAL_GetTick>
 800889c:	4602      	mov	r2, r0
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	2b64      	cmp	r3, #100	@ 0x64
 80088a4:	d901      	bls.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e0d7      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088aa:	4b0e      	ldr	r3, [pc, #56]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d0f0      	beq.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	f040 80cd 	bne.w	8008a58 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088be:	4b09      	ldr	r3, [pc, #36]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a08      	ldr	r2, [pc, #32]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80088c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ca:	f7f9 fd51 	bl	8002370 <HAL_GetTick>
 80088ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088d0:	e00a      	b.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80088d2:	f7f9 fd4d 	bl	8002370 <HAL_GetTick>
 80088d6:	4602      	mov	r2, r0
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b64      	cmp	r3, #100	@ 0x64
 80088de:	d903      	bls.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088e0:	2303      	movs	r3, #3
 80088e2:	e0ba      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80088e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80088e8:	4b5e      	ldr	r3, [pc, #376]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80088f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088f4:	d0ed      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d003      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d009      	beq.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008912:	2b00      	cmp	r3, #0
 8008914:	d02e      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800891a:	2b00      	cmp	r3, #0
 800891c:	d12a      	bne.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800891e:	4b51      	ldr	r3, [pc, #324]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008920:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800892c:	4b4d      	ldr	r3, [pc, #308]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008932:	0f1b      	lsrs	r3, r3, #28
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	019a      	lsls	r2, r3, #6
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	431a      	orrs	r2, r3
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	699b      	ldr	r3, [r3, #24]
 800894a:	061b      	lsls	r3, r3, #24
 800894c:	431a      	orrs	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	071b      	lsls	r3, r3, #28
 8008952:	4944      	ldr	r1, [pc, #272]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008954:	4313      	orrs	r3, r2
 8008956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800895a:	4b42      	ldr	r3, [pc, #264]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800895c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008960:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008968:	3b01      	subs	r3, #1
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	493d      	ldr	r1, [pc, #244]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800896e:	4313      	orrs	r3, r2
 8008970:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800897c:	2b00      	cmp	r3, #0
 800897e:	d022      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008984:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008988:	d11d      	bne.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800898a:	4b36      	ldr	r3, [pc, #216]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800898c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008990:	0e1b      	lsrs	r3, r3, #24
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008998:	4b32      	ldr	r3, [pc, #200]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800899a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800899e:	0f1b      	lsrs	r3, r3, #28
 80089a0:	f003 0307 	and.w	r3, r3, #7
 80089a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	695b      	ldr	r3, [r3, #20]
 80089aa:	019a      	lsls	r2, r3, #6
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a1b      	ldr	r3, [r3, #32]
 80089b0:	041b      	lsls	r3, r3, #16
 80089b2:	431a      	orrs	r2, r3
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	061b      	lsls	r3, r3, #24
 80089b8:	431a      	orrs	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	071b      	lsls	r3, r3, #28
 80089be:	4929      	ldr	r1, [pc, #164]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089c0:	4313      	orrs	r3, r2
 80089c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0308 	and.w	r3, r3, #8
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d028      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089d2:	4b24      	ldr	r3, [pc, #144]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d8:	0e1b      	lsrs	r3, r3, #24
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089e0:	4b20      	ldr	r3, [pc, #128]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089e6:	0c1b      	lsrs	r3, r3, #16
 80089e8:	f003 0303 	and.w	r3, r3, #3
 80089ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	019a      	lsls	r2, r3, #6
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	041b      	lsls	r3, r3, #16
 80089f8:	431a      	orrs	r2, r3
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	061b      	lsls	r3, r3, #24
 80089fe:	431a      	orrs	r2, r3
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	071b      	lsls	r3, r3, #28
 8008a06:	4917      	ldr	r1, [pc, #92]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a0e:	4b15      	ldr	r3, [pc, #84]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1c:	4911      	ldr	r1, [pc, #68]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a24:	4b0f      	ldr	r3, [pc, #60]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a0e      	ldr	r2, [pc, #56]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a30:	f7f9 fc9e 	bl	8002370 <HAL_GetTick>
 8008a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a36:	e008      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a38:	f7f9 fc9a 	bl	8002370 <HAL_GetTick>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	2b64      	cmp	r3, #100	@ 0x64
 8008a44:	d901      	bls.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e007      	b.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a4a:	4b06      	ldr	r3, [pc, #24]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a56:	d1ef      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3720      	adds	r7, #32
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	40023800 	.word	0x40023800

08008a68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e09d      	b.n	8008bb6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d108      	bne.n	8008a94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008a8a:	d009      	beq.n	8008aa0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2200      	movs	r2, #0
 8008a90:	61da      	str	r2, [r3, #28]
 8008a92:	e005      	b.n	8008aa0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d106      	bne.n	8008ac0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f7f8 fc18 	bl	80012f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2202      	movs	r2, #2
 8008ac4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ad6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ae0:	d902      	bls.n	8008ae8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	60fb      	str	r3, [r7, #12]
 8008ae6:	e002      	b.n	8008aee <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008ae8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008aec:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008af6:	d007      	beq.n	8008b08 <HAL_SPI_Init+0xa0>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	68db      	ldr	r3, [r3, #12]
 8008afc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b00:	d002      	beq.n	8008b08 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0302 	and.w	r3, r3, #2
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	431a      	orrs	r2, r3
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b40:	431a      	orrs	r2, r3
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b4a:	ea42 0103 	orr.w	r1, r2, r3
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b52:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	0c1b      	lsrs	r3, r3, #16
 8008b64:	f003 0204 	and.w	r2, r3, #4
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	431a      	orrs	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b76:	f003 0308 	and.w	r3, r3, #8
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008b84:	ea42 0103 	orr.w	r1, r2, r3
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69da      	ldr	r2, [r3, #28]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008ba4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
	...

08008bc0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008bd4:	b2db      	uxtb	r3, r3
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d001      	beq.n	8008bde <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	e0d4      	b.n	8008d88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <HAL_SPI_Transmit_DMA+0x2a>
 8008be4:	88fb      	ldrh	r3, [r7, #6]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e0cc      	b.n	8008d88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d101      	bne.n	8008bfc <HAL_SPI_Transmit_DMA+0x3c>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e0c5      	b.n	8008d88 <HAL_SPI_Transmit_DMA+0x1c8>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2203      	movs	r2, #3
 8008c08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	88fa      	ldrh	r2, [r7, #6]
 8008c1c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	88fa      	ldrh	r2, [r7, #6]
 8008c22:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c4e:	d10f      	bne.n	8008c70 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008c6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c74:	4a46      	ldr	r2, [pc, #280]	@ (8008d90 <HAL_SPI_Transmit_DMA+0x1d0>)
 8008c76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c7c:	4a45      	ldr	r2, [pc, #276]	@ (8008d94 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c84:	4a44      	ldr	r2, [pc, #272]	@ (8008d98 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008c86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008c9e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008ca8:	d82d      	bhi.n	8008d06 <HAL_SPI_Transmit_DMA+0x146>
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008cb4:	d127      	bne.n	8008d06 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	f003 0301 	and.w	r3, r3, #1
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10f      	bne.n	8008ce4 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	685a      	ldr	r2, [r3, #4]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008cd2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	085b      	lsrs	r3, r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008ce2:	e010      	b.n	8008d06 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cf2:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	085b      	lsrs	r3, r3, #1
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	3301      	adds	r3, #1
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d0e:	4619      	mov	r1, r3
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	330c      	adds	r3, #12
 8008d16:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d1c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d1e:	f7fa fb77 	bl	8003410 <HAL_DMA_Start_IT>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d00b      	beq.n	8008d40 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d2c:	f043 0210 	orr.w	r2, r3, #16
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e023      	b.n	8008d88 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d4a:	2b40      	cmp	r3, #64	@ 0x40
 8008d4c:	d007      	beq.n	8008d5e <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008d5c:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f042 0220 	orr.w	r2, r2, #32
 8008d74:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0202 	orr.w	r2, r2, #2
 8008d84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008d86:	2300      	movs	r3, #0
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	08009971 	.word	0x08009971
 8008d94:	0800978d 	.word	0x0800978d
 8008d98:	080099c5 	.word	0x080099c5

08008d9c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	4613      	mov	r3, r2
 8008da8:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d001      	beq.n	8008dba <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008db6:	2302      	movs	r3, #2
 8008db8:	e105      	b.n	8008fc6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <HAL_SPI_Receive_DMA+0x2a>
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d101      	bne.n	8008dca <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e0fd      	b.n	8008fc6 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d110      	bne.n	8008df4 <HAL_SPI_Receive_DMA+0x58>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008dda:	d10b      	bne.n	8008df4 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2204      	movs	r2, #4
 8008de0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008de4:	88fb      	ldrh	r3, [r7, #6]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 f8f6 	bl	8008fdc <HAL_SPI_TransmitReceive_DMA>
 8008df0:	4603      	mov	r3, r0
 8008df2:	e0e8      	b.n	8008fc6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008dfa:	2b01      	cmp	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <HAL_SPI_Receive_DMA+0x66>
 8008dfe:	2302      	movs	r3, #2
 8008e00:	e0e1      	b.n	8008fc6 <HAL_SPI_Receive_DMA+0x22a>
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	2204      	movs	r2, #4
 8008e0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2200      	movs	r2, #0
 8008e16:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	88fa      	ldrh	r2, [r7, #6]
 8008e22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	88fa      	ldrh	r2, [r7, #6]
 8008e2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2200      	movs	r2, #0
 8008e32:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	689b      	ldr	r3, [r3, #8]
 8008e4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e4e:	d10f      	bne.n	8008e70 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e7e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	68db      	ldr	r3, [r3, #12]
 8008e84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e88:	d908      	bls.n	8008e9c <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	e042      	b.n	8008f22 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	685a      	ldr	r2, [r3, #4]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008eaa:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb6:	d134      	bne.n	8008f22 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ec6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	f003 0301 	and.w	r3, r3, #1
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d111      	bne.n	8008efc <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ee6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	085b      	lsrs	r3, r3, #1
 8008ef2:	b29a      	uxth	r2, r3
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008efa:	e012      	b.n	8008f22 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f0a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	085b      	lsrs	r3, r3, #1
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	3301      	adds	r3, #1
 8008f1a:	b29a      	uxth	r2, r3
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f26:	4a2a      	ldr	r2, [pc, #168]	@ (8008fd0 <HAL_SPI_Receive_DMA+0x234>)
 8008f28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f2e:	4a29      	ldr	r2, [pc, #164]	@ (8008fd4 <HAL_SPI_Receive_DMA+0x238>)
 8008f30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f36:	4a28      	ldr	r2, [pc, #160]	@ (8008fd8 <HAL_SPI_Receive_DMA+0x23c>)
 8008f38:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f3e:	2200      	movs	r2, #0
 8008f40:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	330c      	adds	r3, #12
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f52:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f5a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008f5c:	f7fa fa58 	bl	8003410 <HAL_DMA_Start_IT>
 8008f60:	4603      	mov	r3, r0
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00b      	beq.n	8008f7e <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f6a:	f043 0210 	orr.w	r2, r3, #16
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	e023      	b.n	8008fc6 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f88:	2b40      	cmp	r3, #64	@ 0x40
 8008f8a:	d007      	beq.n	8008f9c <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f9a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	685a      	ldr	r2, [r3, #4]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0220 	orr.w	r2, r2, #32
 8008fb2:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0201 	orr.w	r2, r2, #1
 8008fc2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3710      	adds	r7, #16
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	0800998d 	.word	0x0800998d
 8008fd4:	08009835 	.word	0x08009835
 8008fd8:	080099c5 	.word	0x080099c5

08008fdc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008ff0:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8008ff8:	7dfb      	ldrb	r3, [r7, #23]
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d00c      	beq.n	8009018 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009004:	d106      	bne.n	8009014 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d102      	bne.n	8009014 <HAL_SPI_TransmitReceive_DMA+0x38>
 800900e:	7dfb      	ldrb	r3, [r7, #23]
 8009010:	2b04      	cmp	r3, #4
 8009012:	d001      	beq.n	8009018 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009014:	2302      	movs	r3, #2
 8009016:	e158      	b.n	80092ca <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d005      	beq.n	800902a <HAL_SPI_TransmitReceive_DMA+0x4e>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d002      	beq.n	800902a <HAL_SPI_TransmitReceive_DMA+0x4e>
 8009024:	887b      	ldrh	r3, [r7, #2]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	e14d      	b.n	80092ca <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_SPI_TransmitReceive_DMA+0x60>
 8009038:	2302      	movs	r3, #2
 800903a:	e146      	b.n	80092ca <HAL_SPI_TransmitReceive_DMA+0x2ee>
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b04      	cmp	r3, #4
 800904e:	d003      	beq.n	8009058 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2205      	movs	r2, #5
 8009054:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	68ba      	ldr	r2, [r7, #8]
 8009062:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	887a      	ldrh	r2, [r7, #2]
 8009068:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	887a      	ldrh	r2, [r7, #2]
 800906e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	887a      	ldrh	r2, [r7, #2]
 800907a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	887a      	ldrh	r2, [r7, #2]
 8009082:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 80090a0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80090aa:	d908      	bls.n	80090be <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80090ba:	605a      	str	r2, [r3, #4]
 80090bc:	e06f      	b.n	800919e <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80090cc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80090d8:	d126      	bne.n	8009128 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10f      	bne.n	8009106 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80090f4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	085b      	lsrs	r3, r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009104:	e010      	b.n	8009128 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009114:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800911a:	b29b      	uxth	r3, r3
 800911c:	085b      	lsrs	r3, r3, #1
 800911e:	b29b      	uxth	r3, r3
 8009120:	3301      	adds	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009132:	d134      	bne.n	800919e <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009142:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800914a:	b29b      	uxth	r3, r3
 800914c:	f003 0301 	and.w	r3, r3, #1
 8009150:	2b00      	cmp	r3, #0
 8009152:	d111      	bne.n	8009178 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009162:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800916a:	b29b      	uxth	r3, r3
 800916c:	085b      	lsrs	r3, r3, #1
 800916e:	b29a      	uxth	r2, r3
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009176:	e012      	b.n	800919e <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009186:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800918e:	b29b      	uxth	r3, r3
 8009190:	085b      	lsrs	r3, r3, #1
 8009192:	b29b      	uxth	r3, r3
 8009194:	3301      	adds	r3, #1
 8009196:	b29a      	uxth	r2, r3
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	2b04      	cmp	r3, #4
 80091a8:	d108      	bne.n	80091bc <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091ae:	4a49      	ldr	r2, [pc, #292]	@ (80092d4 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 80091b0:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091b6:	4a48      	ldr	r2, [pc, #288]	@ (80092d8 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 80091b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80091ba:	e007      	b.n	80091cc <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c0:	4a46      	ldr	r2, [pc, #280]	@ (80092dc <HAL_SPI_TransmitReceive_DMA+0x300>)
 80091c2:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c8:	4a45      	ldr	r2, [pc, #276]	@ (80092e0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80091ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d0:	4a44      	ldr	r2, [pc, #272]	@ (80092e4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80091d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d8:	2200      	movs	r2, #0
 80091da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	330c      	adds	r3, #12
 80091e6:	4619      	mov	r1, r3
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80091f6:	f7fa f90b 	bl	8003410 <HAL_DMA_Start_IT>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d00b      	beq.n	8009218 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009204:	f043 0210 	orr.w	r2, r3, #16
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e058      	b.n	80092ca <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f042 0201 	orr.w	r2, r2, #1
 8009226:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800922c:	2200      	movs	r2, #0
 800922e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009234:	2200      	movs	r2, #0
 8009236:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800923c:	2200      	movs	r2, #0
 800923e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009244:	2200      	movs	r2, #0
 8009246:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009250:	4619      	mov	r1, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	330c      	adds	r3, #12
 8009258:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800925e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009260:	f7fa f8d6 	bl	8003410 <HAL_DMA_Start_IT>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00b      	beq.n	8009282 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800926e:	f043 0210 	orr.w	r2, r3, #16
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	e023      	b.n	80092ca <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800928c:	2b40      	cmp	r3, #64	@ 0x40
 800928e:	d007      	beq.n	80092a0 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800929e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0220 	orr.w	r2, r2, #32
 80092b6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f042 0202 	orr.w	r2, r2, #2
 80092c6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	3718      	adds	r7, #24
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	0800998d 	.word	0x0800998d
 80092d8:	08009835 	.word	0x08009835
 80092dc:	080099a9 	.word	0x080099a9
 80092e0:	080098df 	.word	0x080098df
 80092e4:	080099c5 	.word	0x080099c5

080092e8 <HAL_SPI_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort(SPI_HandleTypeDef *hspi)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	@ 0x28
 80092ec:	af02      	add	r7, sp, #8
 80092ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	77fb      	strb	r3, [r7, #31]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80092f4:	4b88      	ldr	r3, [pc, #544]	@ (8009518 <HAL_SPI_Abort+0x230>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a88      	ldr	r2, [pc, #544]	@ (800951c <HAL_SPI_Abort+0x234>)
 80092fa:	fba2 2303 	umull	r2, r3, r2, r3
 80092fe:	0a5b      	lsrs	r3, r3, #9
 8009300:	2264      	movs	r2, #100	@ 0x64
 8009302:	fb02 f303 	mul.w	r3, r2, r3
 8009306:	617b      	str	r3, [r7, #20]
  count = resetcount;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	61bb      	str	r3, [r7, #24]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f022 0220 	bic.w	r2, r2, #32
 800931a:	605a      	str	r2, [r3, #4]

  /* Disable TXEIE, RXNEIE and ERRIE(mode fault event, overrun error, TI frame error) interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009326:	2b80      	cmp	r3, #128	@ 0x80
 8009328:	d117      	bne.n	800935a <HAL_SPI_Abort+0x72>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a7c      	ldr	r2, [pc, #496]	@ (8009520 <HAL_SPI_Abort+0x238>)
 800932e:	651a      	str	r2, [r3, #80]	@ 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d106      	bne.n	8009344 <HAL_SPI_Abort+0x5c>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800933a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009342:	e008      	b.n	8009356 <HAL_SPI_Abort+0x6e>
      }
      count--;
 8009344:	69bb      	ldr	r3, [r7, #24]
 8009346:	3b01      	subs	r3, #1
 8009348:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009350:	b2db      	uxtb	r3, r3
 8009352:	2b07      	cmp	r3, #7
 8009354:	d1ec      	bne.n	8009330 <HAL_SPI_Abort+0x48>
    /* Reset Timeout Counter */
    count = resetcount;
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	61bb      	str	r3, [r7, #24]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009364:	2b40      	cmp	r3, #64	@ 0x40
 8009366:	d117      	bne.n	8009398 <HAL_SPI_Abort+0xb0>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a6e      	ldr	r2, [pc, #440]	@ (8009524 <HAL_SPI_Abort+0x23c>)
 800936c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800936e:	69bb      	ldr	r3, [r7, #24]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d106      	bne.n	8009382 <HAL_SPI_Abort+0x9a>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009378:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009380:	e008      	b.n	8009394 <HAL_SPI_Abort+0xac>
      }
      count--;
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	3b01      	subs	r3, #1
 8009386:	61bb      	str	r3, [r7, #24]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800938e:	b2db      	uxtb	r3, r3
 8009390:	2b07      	cmp	r3, #7
 8009392:	d1ec      	bne.n	800936e <HAL_SPI_Abort+0x86>
    /* Reset Timeout Counter */
    count = resetcount;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	61bb      	str	r3, [r7, #24]
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d141      	bne.n	800942a <HAL_SPI_Abort+0x142>
  {
    /* Abort the SPI DMA Tx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmatx != NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d03d      	beq.n	800942a <HAL_SPI_Abort+0x142>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmatx->XferAbortCallback = NULL;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093b2:	2200      	movs	r2, #0
 80093b4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fa f888 	bl	80034d0 <HAL_DMA_Abort>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <HAL_SPI_Abort+0xe4>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2240      	movs	r2, #64	@ 0x40
 80093ca:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Tx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f022 0202 	bic.w	r2, r2, #2
 80093da:	605a      	str	r2, [r3, #4]

      if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80093dc:	f7f8 ffc8 	bl	8002370 <HAL_GetTick>
 80093e0:	4603      	mov	r3, r0
 80093e2:	461a      	mov	r2, r3
 80093e4:	2164      	movs	r1, #100	@ 0x64
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 fcbc 	bl	8009d64 <SPI_EndRxTxTransaction>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d002      	beq.n	80093f8 <HAL_SPI_Abort+0x110>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2240      	movs	r2, #64	@ 0x40
 80093f6:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable SPI Peripheral */
      __HAL_SPI_DISABLE(hspi);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009406:	601a      	str	r2, [r3, #0]

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009408:	f7f8 ffb2 	bl	8002370 <HAL_GetTick>
 800940c:	4603      	mov	r3, r0
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	2364      	movs	r3, #100	@ 0x64
 8009412:	2200      	movs	r2, #0
 8009414:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 fb91 	bl	8009b40 <SPI_WaitFifoStateUntilTimeout>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d002      	beq.n	800942a <HAL_SPI_Abort+0x142>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2240      	movs	r2, #64	@ 0x40
 8009428:	661a      	str	r2, [r3, #96]	@ 0x60
      }
    }
  }

  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	685b      	ldr	r3, [r3, #4]
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	2b01      	cmp	r3, #1
 8009436:	d143      	bne.n	80094c0 <HAL_SPI_Abort+0x1d8>
  {
    /* Abort the SPI DMA Rx Stream/Channel : use blocking DMA Abort API (no callback) */
    if (hspi->hdmarx != NULL)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800943c:	2b00      	cmp	r3, #0
 800943e:	d03f      	beq.n	80094c0 <HAL_SPI_Abort+0x1d8>
    {
      /* Set the SPI DMA Abort callback :
      will lead to call HAL_SPI_AbortCpltCallback() at end of DMA abort procedure */
      hspi->hdmarx->XferAbortCallback = NULL;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009444:	2200      	movs	r2, #0
 8009446:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800944c:	4618      	mov	r0, r3
 800944e:	f7fa f83f 	bl	80034d0 <HAL_DMA_Abort>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d002      	beq.n	800945e <HAL_SPI_Abort+0x176>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2240      	movs	r2, #64	@ 0x40
 800945c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable peripheral */
      __HAL_SPI_DISABLE(hspi);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	681a      	ldr	r2, [r3, #0]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800946c:	601a      	str	r2, [r3, #0]

      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800946e:	f7f8 ff7f 	bl	8002370 <HAL_GetTick>
 8009472:	4603      	mov	r3, r0
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	2364      	movs	r3, #100	@ 0x64
 8009478:	2200      	movs	r2, #0
 800947a:	2180      	movs	r1, #128	@ 0x80
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fad7 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d002      	beq.n	800948e <HAL_SPI_Abort+0x1a6>
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2240      	movs	r2, #64	@ 0x40
 800948c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Empty the FRLVL fifo */
      if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800948e:	f7f8 ff6f 	bl	8002370 <HAL_GetTick>
 8009492:	4603      	mov	r3, r0
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	2364      	movs	r3, #100	@ 0x64
 8009498:	2200      	movs	r2, #0
 800949a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fb4e 	bl	8009b40 <SPI_WaitFifoStateUntilTimeout>
 80094a4:	4603      	mov	r3, r0
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d002      	beq.n	80094b0 <HAL_SPI_Abort+0x1c8>
                                        HAL_GetTick()) != HAL_OK)
      {
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2240      	movs	r2, #64	@ 0x40
 80094ae:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Disable Rx DMA Request */
      CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXDMAEN));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	685a      	ldr	r2, [r3, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0201 	bic.w	r2, r2, #1
 80094be:	605a      	str	r2, [r3, #4]
    }
  }
  /* Reset Tx and Rx transfer counters */
  hspi->RxXferCount = 0U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Check error during Abort procedure */
  if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094d2:	2b40      	cmp	r3, #64	@ 0x40
 80094d4:	d102      	bne.n	80094dc <HAL_SPI_Abort+0x1f4>
  {
    /* return HAL_Error in case of error during Abort procedure */
    errorcode = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	77fb      	strb	r3, [r7, #31]
 80094da:	e002      	b.n	80094e2 <HAL_SPI_Abort+0x1fa>
  }
  else
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2200      	movs	r2, #0
 80094e0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094e2:	2300      	movs	r3, #0
 80094e4:	613b      	str	r3, [r7, #16]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	613b      	str	r3, [r7, #16]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	613b      	str	r3, [r7, #16]
 80094f6:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094f8:	2300      	movs	r3, #0
 80094fa:	60fb      	str	r3, [r7, #12]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	60fb      	str	r3, [r7, #12]
 8009504:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->state to ready */
  hspi->State = HAL_SPI_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2201      	movs	r2, #1
 800950a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return errorcode;
 800950e:	7ffb      	ldrb	r3, [r7, #31]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3720      	adds	r7, #32
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20000000 	.word	0x20000000
 800951c:	057619f1 	.word	0x057619f1
 8009520:	08009ef9 	.word	0x08009ef9
 8009524:	08009e39 	.word	0x08009e39

08009528 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b088      	sub	sp, #32
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689b      	ldr	r3, [r3, #8]
 800953e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	099b      	lsrs	r3, r3, #6
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10f      	bne.n	800956c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00a      	beq.n	800956c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	099b      	lsrs	r3, r3, #6
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b00      	cmp	r3, #0
 8009560:	d004      	beq.n	800956c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009566:	6878      	ldr	r0, [r7, #4]
 8009568:	4798      	blx	r3
    return;
 800956a:	e0d7      	b.n	800971c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	085b      	lsrs	r3, r3, #1
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b00      	cmp	r3, #0
 8009576:	d00a      	beq.n	800958e <HAL_SPI_IRQHandler+0x66>
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	09db      	lsrs	r3, r3, #7
 800957c:	f003 0301 	and.w	r3, r3, #1
 8009580:	2b00      	cmp	r3, #0
 8009582:	d004      	beq.n	800958e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
    return;
 800958c:	e0c6      	b.n	800971c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	095b      	lsrs	r3, r3, #5
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10c      	bne.n	80095b4 <HAL_SPI_IRQHandler+0x8c>
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	099b      	lsrs	r3, r3, #6
 800959e:	f003 0301 	and.w	r3, r3, #1
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d106      	bne.n	80095b4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	0a1b      	lsrs	r3, r3, #8
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 80b4 	beq.w	800971c <HAL_SPI_IRQHandler+0x1f4>
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	095b      	lsrs	r3, r3, #5
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 80ad 	beq.w	800971c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095c2:	69bb      	ldr	r3, [r7, #24]
 80095c4:	099b      	lsrs	r3, r3, #6
 80095c6:	f003 0301 	and.w	r3, r3, #1
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d023      	beq.n	8009616 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b03      	cmp	r3, #3
 80095d8:	d011      	beq.n	80095fe <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095de:	f043 0204 	orr.w	r2, r3, #4
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095e6:	2300      	movs	r3, #0
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	617b      	str	r3, [r7, #20]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	617b      	str	r3, [r7, #20]
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	e00b      	b.n	8009616 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095fe:	2300      	movs	r3, #0
 8009600:	613b      	str	r3, [r7, #16]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	613b      	str	r3, [r7, #16]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	613b      	str	r3, [r7, #16]
 8009612:	693b      	ldr	r3, [r7, #16]
        return;
 8009614:	e082      	b.n	800971c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	095b      	lsrs	r3, r3, #5
 800961a:	f003 0301 	and.w	r3, r3, #1
 800961e:	2b00      	cmp	r3, #0
 8009620:	d014      	beq.n	800964c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009626:	f043 0201 	orr.w	r2, r3, #1
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800962e:	2300      	movs	r3, #0
 8009630:	60fb      	str	r3, [r7, #12]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009648:	601a      	str	r2, [r3, #0]
 800964a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800964c:	69bb      	ldr	r3, [r7, #24]
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00c      	beq.n	8009672 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800965c:	f043 0208 	orr.w	r2, r3, #8
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009664:	2300      	movs	r3, #0
 8009666:	60bb      	str	r3, [r7, #8]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	60bb      	str	r3, [r7, #8]
 8009670:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009676:	2b00      	cmp	r3, #0
 8009678:	d04f      	beq.n	800971a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685a      	ldr	r2, [r3, #4]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009688:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	f003 0302 	and.w	r3, r3, #2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d104      	bne.n	80096a6 <HAL_SPI_IRQHandler+0x17e>
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d034      	beq.n	8009710 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0203 	bic.w	r2, r2, #3
 80096b4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d011      	beq.n	80096e2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c2:	4a18      	ldr	r2, [pc, #96]	@ (8009724 <HAL_SPI_IRQHandler+0x1fc>)
 80096c4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7f9 ff70 	bl	80035b0 <HAL_DMA_Abort_IT>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d005      	beq.n	80096e2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80096da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d016      	beq.n	8009718 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096ee:	4a0d      	ldr	r2, [pc, #52]	@ (8009724 <HAL_SPI_IRQHandler+0x1fc>)
 80096f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f9 ff5a 	bl	80035b0 <HAL_DMA_Abort_IT>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d00a      	beq.n	8009718 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009706:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800970e:	e003      	b.n	8009718 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 f831 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009716:	e000      	b.n	800971a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009718:	bf00      	nop
    return;
 800971a:	bf00      	nop
  }
}
 800971c:	3720      	adds	r7, #32
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	08009a05 	.word	0x08009a05

08009728 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr

0800973c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800976c:	bf00      	nop
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009780:	bf00      	nop
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b086      	sub	sp, #24
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009798:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800979a:	f7f8 fde9 	bl	8002370 <HAL_GetTick>
 800979e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097ae:	d03b      	beq.n	8009828 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0220 	bic.w	r2, r2, #32
 80097be:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0202 	bic.w	r2, r2, #2
 80097ce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	2164      	movs	r1, #100	@ 0x64
 80097d4:	6978      	ldr	r0, [r7, #20]
 80097d6:	f000 fac5 	bl	8009d64 <SPI_EndRxTxTransaction>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097e4:	f043 0220 	orr.w	r2, r3, #32
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10a      	bne.n	800980a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68db      	ldr	r3, [r3, #12]
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	689b      	ldr	r3, [r3, #8]
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	2200      	movs	r2, #0
 800980e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009818:	697b      	ldr	r3, [r7, #20]
 800981a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800981c:	2b00      	cmp	r3, #0
 800981e:	d003      	beq.n	8009828 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009820:	6978      	ldr	r0, [r7, #20]
 8009822:	f7ff ffa9 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009826:	e002      	b.n	800982e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009828:	6978      	ldr	r0, [r7, #20]
 800982a:	f016 f9a9 	bl	801fb80 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800982e:	3718      	adds	r7, #24
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009840:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009842:	f7f8 fd95 	bl	8002370 <HAL_GetTick>
 8009846:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009856:	d03c      	beq.n	80098d2 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685a      	ldr	r2, [r3, #4]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f022 0220 	bic.w	r2, r2, #32
 8009866:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10d      	bne.n	800988c <SPI_DMAReceiveCplt+0x58>
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	685b      	ldr	r3, [r3, #4]
 8009874:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009878:	d108      	bne.n	800988c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	f022 0203 	bic.w	r2, r2, #3
 8009888:	605a      	str	r2, [r3, #4]
 800988a:	e007      	b.n	800989c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f022 0201 	bic.w	r2, r2, #1
 800989a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800989c:	68ba      	ldr	r2, [r7, #8]
 800989e:	2164      	movs	r1, #100	@ 0x64
 80098a0:	68f8      	ldr	r0, [r7, #12]
 80098a2:	f000 f9e3 	bl	8009c6c <SPI_EndRxTransaction>
 80098a6:	4603      	mov	r3, r0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d002      	beq.n	80098b2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2220      	movs	r2, #32
 80098b0:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff ff54 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80098d0:	e002      	b.n	80098d8 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80098d2:	68f8      	ldr	r0, [r7, #12]
 80098d4:	f016 f976 	bl	801fbc4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098de:	b580      	push	{r7, lr}
 80098e0:	b084      	sub	sp, #16
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ea:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098ec:	f7f8 fd40 	bl	8002370 <HAL_GetTick>
 80098f0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009900:	d030      	beq.n	8009964 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	685a      	ldr	r2, [r3, #4]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 0220 	bic.w	r2, r2, #32
 8009910:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	2164      	movs	r1, #100	@ 0x64
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 fa24 	bl	8009d64 <SPI_EndRxTxTransaction>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d005      	beq.n	800992e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009926:	f043 0220 	orr.w	r2, r3, #32
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f022 0203 	bic.w	r2, r2, #3
 800993c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2201      	movs	r2, #1
 8009950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7ff ff0b 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009962:	e002      	b.n	800996a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8009964:	68f8      	ldr	r0, [r7, #12]
 8009966:	f7ff fedf 	bl	8009728 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800996a:	3710      	adds	r7, #16
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}

08009970 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800997c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f7ff fedc 	bl	800973c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009984:	bf00      	nop
 8009986:	3710      	adds	r7, #16
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b084      	sub	sp, #16
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009998:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f7ff fed8 	bl	8009750 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099b4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff fed4 	bl	8009764 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099bc:	bf00      	nop
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099d0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f022 0203 	bic.w	r2, r2, #3
 80099e0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099e6:	f043 0210 	orr.w	r2, r3, #16
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f7ff febe 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80099fc:	bf00      	nop
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a10:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f7ff fea9 	bl	8009778 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009a26:	bf00      	nop
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}
	...

08009a30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	603b      	str	r3, [r7, #0]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009a40:	f7f8 fc96 	bl	8002370 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a48:	1a9b      	subs	r3, r3, r2
 8009a4a:	683a      	ldr	r2, [r7, #0]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009a50:	f7f8 fc8e 	bl	8002370 <HAL_GetTick>
 8009a54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009a56:	4b39      	ldr	r3, [pc, #228]	@ (8009b3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	015b      	lsls	r3, r3, #5
 8009a5c:	0d1b      	lsrs	r3, r3, #20
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	fb02 f303 	mul.w	r3, r2, r3
 8009a64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a66:	e055      	b.n	8009b14 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a6e:	d051      	beq.n	8009b14 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009a70:	f7f8 fc7e 	bl	8002370 <HAL_GetTick>
 8009a74:	4602      	mov	r2, r0
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	69fa      	ldr	r2, [r7, #28]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d902      	bls.n	8009a86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d13d      	bne.n	8009b02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a9e:	d111      	bne.n	8009ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aa8:	d004      	beq.n	8009ab4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ab2:	d107      	bne.n	8009ac4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ac2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ac8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009acc:	d10f      	bne.n	8009aee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009adc:	601a      	str	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009aec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009afe:	2303      	movs	r3, #3
 8009b00:	e018      	b.n	8009b34 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d102      	bne.n	8009b0e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	61fb      	str	r3, [r7, #28]
 8009b0c:	e002      	b.n	8009b14 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	689a      	ldr	r2, [r3, #8]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	4013      	ands	r3, r2
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	bf0c      	ite	eq
 8009b24:	2301      	moveq	r3, #1
 8009b26:	2300      	movne	r3, #0
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d19a      	bne.n	8009a68 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3720      	adds	r7, #32
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000000 	.word	0x20000000

08009b40 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	@ 0x28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	607a      	str	r2, [r7, #4]
 8009b4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009b52:	f7f8 fc0d 	bl	8002370 <HAL_GetTick>
 8009b56:	4602      	mov	r2, r0
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	1a9b      	subs	r3, r3, r2
 8009b5c:	683a      	ldr	r2, [r7, #0]
 8009b5e:	4413      	add	r3, r2
 8009b60:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009b62:	f7f8 fc05 	bl	8002370 <HAL_GetTick>
 8009b66:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	330c      	adds	r3, #12
 8009b6e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009b70:	4b3d      	ldr	r3, [pc, #244]	@ (8009c68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	00da      	lsls	r2, r3, #3
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	0d1b      	lsrs	r3, r3, #20
 8009b80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b82:	fb02 f303 	mul.w	r3, r2, r3
 8009b86:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009b88:	e061      	b.n	8009c4e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009b90:	d107      	bne.n	8009ba2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009ba0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ba8:	d051      	beq.n	8009c4e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009baa:	f7f8 fbe1 	bl	8002370 <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	6a3b      	ldr	r3, [r7, #32]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	d902      	bls.n	8009bc0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d13d      	bne.n	8009c3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	685a      	ldr	r2, [r3, #4]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009bce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009bd8:	d111      	bne.n	8009bfe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009be2:	d004      	beq.n	8009bee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bec:	d107      	bne.n	8009bfe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bfc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c06:	d10f      	bne.n	8009c28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c16:	601a      	str	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	681a      	ldr	r2, [r3, #0]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2201      	movs	r2, #1
 8009c2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	e011      	b.n	8009c60 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d102      	bne.n	8009c48 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009c42:	2300      	movs	r3, #0
 8009c44:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c46:	e002      	b.n	8009c4e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009c48:	69bb      	ldr	r3, [r7, #24]
 8009c4a:	3b01      	subs	r3, #1
 8009c4c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	689a      	ldr	r2, [r3, #8]
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	4013      	ands	r3, r2
 8009c58:	687a      	ldr	r2, [r7, #4]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d195      	bne.n	8009b8a <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3728      	adds	r7, #40	@ 0x28
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	20000000 	.word	0x20000000

08009c6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b088      	sub	sp, #32
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c80:	d111      	bne.n	8009ca6 <SPI_EndRxTransaction+0x3a>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c8a:	d004      	beq.n	8009c96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c94:	d107      	bne.n	8009ca6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ca4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cae:	d112      	bne.n	8009cd6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	2180      	movs	r1, #128	@ 0x80
 8009cba:	68f8      	ldr	r0, [r7, #12]
 8009cbc:	f7ff feb8 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d021      	beq.n	8009d0a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cca:	f043 0220 	orr.w	r2, r3, #32
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e03d      	b.n	8009d52 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009cd6:	4b21      	ldr	r3, [pc, #132]	@ (8009d5c <SPI_EndRxTransaction+0xf0>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a21      	ldr	r2, [pc, #132]	@ (8009d60 <SPI_EndRxTransaction+0xf4>)
 8009cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce0:	0d5b      	lsrs	r3, r3, #21
 8009ce2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009ce6:	fb02 f303 	mul.w	r3, r2, r3
 8009cea:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009cf2:	697b      	ldr	r3, [r7, #20]
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	689b      	ldr	r3, [r3, #8]
 8009cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d02:	2b80      	cmp	r3, #128	@ 0x80
 8009d04:	d0f2      	beq.n	8009cec <SPI_EndRxTransaction+0x80>
 8009d06:	e000      	b.n	8009d0a <SPI_EndRxTransaction+0x9e>
        break;
 8009d08:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d12:	d11d      	bne.n	8009d50 <SPI_EndRxTransaction+0xe4>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d1c:	d004      	beq.n	8009d28 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d26:	d113      	bne.n	8009d50 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	9300      	str	r3, [sp, #0]
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f7ff ff03 	bl	8009b40 <SPI_WaitFifoStateUntilTimeout>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d007      	beq.n	8009d50 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d44:	f043 0220 	orr.w	r2, r3, #32
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e000      	b.n	8009d52 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009d50:	2300      	movs	r3, #0
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}
 8009d5a:	bf00      	nop
 8009d5c:	20000000 	.word	0x20000000
 8009d60:	165e9f81 	.word	0x165e9f81

08009d64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b088      	sub	sp, #32
 8009d68:	af02      	add	r7, sp, #8
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	9300      	str	r3, [sp, #0]
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff fedf 	bl	8009b40 <SPI_WaitFifoStateUntilTimeout>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d007      	beq.n	8009d98 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d8c:	f043 0220 	orr.w	r2, r3, #32
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009d94:	2303      	movs	r3, #3
 8009d96:	e046      	b.n	8009e26 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d98:	4b25      	ldr	r3, [pc, #148]	@ (8009e30 <SPI_EndRxTxTransaction+0xcc>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a25      	ldr	r2, [pc, #148]	@ (8009e34 <SPI_EndRxTxTransaction+0xd0>)
 8009d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009da2:	0d5b      	lsrs	r3, r3, #21
 8009da4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009da8:	fb02 f303 	mul.w	r3, r2, r3
 8009dac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	685b      	ldr	r3, [r3, #4]
 8009db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009db6:	d112      	bne.n	8009dde <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	9300      	str	r3, [sp, #0]
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2180      	movs	r1, #128	@ 0x80
 8009dc2:	68f8      	ldr	r0, [r7, #12]
 8009dc4:	f7ff fe34 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d016      	beq.n	8009dfc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009dd2:	f043 0220 	orr.w	r2, r3, #32
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e023      	b.n	8009e26 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d00a      	beq.n	8009dfa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	3b01      	subs	r3, #1
 8009de8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009df4:	2b80      	cmp	r3, #128	@ 0x80
 8009df6:	d0f2      	beq.n	8009dde <SPI_EndRxTxTransaction+0x7a>
 8009df8:	e000      	b.n	8009dfc <SPI_EndRxTxTransaction+0x98>
        break;
 8009dfa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	9300      	str	r3, [sp, #0]
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009e08:	68f8      	ldr	r0, [r7, #12]
 8009e0a:	f7ff fe99 	bl	8009b40 <SPI_WaitFifoStateUntilTimeout>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d007      	beq.n	8009e24 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e18:	f043 0220 	orr.w	r2, r3, #32
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009e20:	2303      	movs	r3, #3
 8009e22:	e000      	b.n	8009e26 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	20000000 	.word	0x20000000
 8009e34:	165e9f81 	.word	0x165e9f81

08009e38 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af02      	add	r7, sp, #8
 8009e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681a      	ldr	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e4e:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009e50:	4b27      	ldr	r3, [pc, #156]	@ (8009ef0 <SPI_AbortRx_ISR+0xb8>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a27      	ldr	r2, [pc, #156]	@ (8009ef4 <SPI_AbortRx_ISR+0xbc>)
 8009e56:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5a:	0a5b      	lsrs	r3, r3, #9
 8009e5c:	2264      	movs	r2, #100	@ 0x64
 8009e5e:	fb02 f303 	mul.w	r3, r2, r3
 8009e62:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	685a      	ldr	r2, [r3, #4]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e72:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d106      	bne.n	8009e88 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009e7e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009e86:	e009      	b.n	8009e9c <SPI_AbortRx_ISR+0x64>
    }
    count--;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	3b01      	subs	r3, #1
 8009e8c:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e98:	2b40      	cmp	r3, #64	@ 0x40
 8009e9a:	d0eb      	beq.n	8009e74 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009e9c:	f7f8 fa68 	bl	8002370 <HAL_GetTick>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	2364      	movs	r3, #100	@ 0x64
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	2180      	movs	r1, #128	@ 0x80
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f7ff fdc0 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d002      	beq.n	8009ebc <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2240      	movs	r2, #64	@ 0x40
 8009eba:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009ebc:	f7f8 fa58 	bl	8002370 <HAL_GetTick>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	2364      	movs	r3, #100	@ 0x64
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f7ff fe37 	bl	8009b40 <SPI_WaitFifoStateUntilTimeout>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d002      	beq.n	8009ede <SPI_AbortRx_ISR+0xa6>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2240      	movs	r2, #64	@ 0x40
 8009edc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2207      	movs	r2, #7
 8009ee2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 8009ee6:	bf00      	nop
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000000 	.word	0x20000000
 8009ef4:	057619f1 	.word	0x057619f1

08009ef8 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af02      	add	r7, sp, #8
 8009efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8009f00:	4b4c      	ldr	r3, [pc, #304]	@ (800a034 <SPI_AbortTx_ISR+0x13c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a4c      	ldr	r2, [pc, #304]	@ (800a038 <SPI_AbortTx_ISR+0x140>)
 8009f06:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0a:	0a5b      	lsrs	r3, r3, #9
 8009f0c:	2264      	movs	r2, #100	@ 0x64
 8009f0e:	fb02 f303 	mul.w	r3, r2, r3
 8009f12:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009f22:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d106      	bne.n	8009f38 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 8009f36:	e009      	b.n	8009f4c <SPI_AbortTx_ISR+0x54>
    }
    count--;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f48:	2b80      	cmp	r3, #128	@ 0x80
 8009f4a:	d0eb      	beq.n	8009f24 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009f4c:	f7f8 fa10 	bl	8002370 <HAL_GetTick>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	2164      	movs	r1, #100	@ 0x64
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff ff04 	bl	8009d64 <SPI_EndRxTxTransaction>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2240      	movs	r2, #64	@ 0x40
 8009f66:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f76:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 8009f78:	f7f8 f9fa 	bl	8002370 <HAL_GetTick>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	2364      	movs	r3, #100	@ 0x64
 8009f82:	2200      	movs	r2, #0
 8009f84:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff fdd9 	bl	8009b40 <SPI_WaitFifoStateUntilTimeout>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <SPI_AbortTx_ISR+0xa2>
                                    HAL_GetTick()) != HAL_OK)
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2240      	movs	r2, #64	@ 0x40
 8009f98:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fa4:	2b40      	cmp	r3, #64	@ 0x40
 8009fa6:	d13c      	bne.n	800a022 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009fb6:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d106      	bne.n	8009fcc <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8009fca:	e009      	b.n	8009fe0 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009fdc:	2b40      	cmp	r3, #64	@ 0x40
 8009fde:	d0eb      	beq.n	8009fb8 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009fe0:	f7f8 f9c6 	bl	8002370 <HAL_GetTick>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	2364      	movs	r3, #100	@ 0x64
 8009fea:	2200      	movs	r2, #0
 8009fec:	2180      	movs	r1, #128	@ 0x80
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7ff fd1e 	bl	8009a30 <SPI_WaitFlagStateUntilTimeout>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d002      	beq.n	800a000 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2240      	movs	r2, #64	@ 0x40
 8009ffe:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT,
 800a000:	f7f8 f9b6 	bl	8002370 <HAL_GetTick>
 800a004:	4603      	mov	r3, r0
 800a006:	9300      	str	r3, [sp, #0]
 800a008:	2364      	movs	r3, #100	@ 0x64
 800a00a:	2200      	movs	r2, #0
 800a00c:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff fd95 	bl	8009b40 <SPI_WaitFifoStateUntilTimeout>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <SPI_AbortTx_ISR+0x12a>
                                      HAL_GetTick()) != HAL_OK)
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2240      	movs	r2, #64	@ 0x40
 800a020:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2207      	movs	r2, #7
 800a026:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
}
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20000000 	.word	0x20000000
 800a038:	057619f1 	.word	0x057619f1

0800a03c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e049      	b.n	800a0e2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d106      	bne.n	800a068 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7f7 fdae 	bl	8001bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2202      	movs	r2, #2
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	3304      	adds	r3, #4
 800a078:	4619      	mov	r1, r3
 800a07a:	4610      	mov	r0, r2
 800a07c:	f000 fb40 	bl	800a700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2201      	movs	r2, #1
 800a08c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2201      	movs	r2, #1
 800a094:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2201      	movs	r2, #1
 800a0a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b085      	sub	sp, #20
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d001      	beq.n	800a104 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e04c      	b.n	800a19e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2202      	movs	r2, #2
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a26      	ldr	r2, [pc, #152]	@ (800a1ac <HAL_TIM_Base_Start+0xc0>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d022      	beq.n	800a15c <HAL_TIM_Base_Start+0x70>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a11e:	d01d      	beq.n	800a15c <HAL_TIM_Base_Start+0x70>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a22      	ldr	r2, [pc, #136]	@ (800a1b0 <HAL_TIM_Base_Start+0xc4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d018      	beq.n	800a15c <HAL_TIM_Base_Start+0x70>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a21      	ldr	r2, [pc, #132]	@ (800a1b4 <HAL_TIM_Base_Start+0xc8>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d013      	beq.n	800a15c <HAL_TIM_Base_Start+0x70>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a1f      	ldr	r2, [pc, #124]	@ (800a1b8 <HAL_TIM_Base_Start+0xcc>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d00e      	beq.n	800a15c <HAL_TIM_Base_Start+0x70>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4a1e      	ldr	r2, [pc, #120]	@ (800a1bc <HAL_TIM_Base_Start+0xd0>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d009      	beq.n	800a15c <HAL_TIM_Base_Start+0x70>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4a1c      	ldr	r2, [pc, #112]	@ (800a1c0 <HAL_TIM_Base_Start+0xd4>)
 800a14e:	4293      	cmp	r3, r2
 800a150:	d004      	beq.n	800a15c <HAL_TIM_Base_Start+0x70>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4a1b      	ldr	r2, [pc, #108]	@ (800a1c4 <HAL_TIM_Base_Start+0xd8>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d115      	bne.n	800a188 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	689a      	ldr	r2, [r3, #8]
 800a162:	4b19      	ldr	r3, [pc, #100]	@ (800a1c8 <HAL_TIM_Base_Start+0xdc>)
 800a164:	4013      	ands	r3, r2
 800a166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b06      	cmp	r3, #6
 800a16c:	d015      	beq.n	800a19a <HAL_TIM_Base_Start+0xae>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a174:	d011      	beq.n	800a19a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f042 0201 	orr.w	r2, r2, #1
 800a184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a186:	e008      	b.n	800a19a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f042 0201 	orr.w	r2, r2, #1
 800a196:	601a      	str	r2, [r3, #0]
 800a198:	e000      	b.n	800a19c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a19a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3714      	adds	r7, #20
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	40010000 	.word	0x40010000
 800a1b0:	40000400 	.word	0x40000400
 800a1b4:	40000800 	.word	0x40000800
 800a1b8:	40000c00 	.word	0x40000c00
 800a1bc:	40010400 	.word	0x40010400
 800a1c0:	40014000 	.word	0x40014000
 800a1c4:	40001800 	.word	0x40001800
 800a1c8:	00010007 	.word	0x00010007

0800a1cc <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6a1a      	ldr	r2, [r3, #32]
 800a1da:	4b0f      	ldr	r3, [pc, #60]	@ (800a218 <HAL_TIM_Base_Stop+0x4c>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d10f      	bne.n	800a202 <HAL_TIM_Base_Stop+0x36>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6a1a      	ldr	r2, [r3, #32]
 800a1e8:	f240 4344 	movw	r3, #1092	@ 0x444
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d107      	bne.n	800a202 <HAL_TIM_Base_Stop+0x36>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681a      	ldr	r2, [r3, #0]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f022 0201 	bic.w	r2, r2, #1
 800a200:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800a20a:	2300      	movs	r3, #0
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	00111111 	.word	0x00111111

0800a21c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b085      	sub	sp, #20
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d001      	beq.n	800a234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e054      	b.n	800a2de <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68da      	ldr	r2, [r3, #12]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f042 0201 	orr.w	r2, r2, #1
 800a24a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a26      	ldr	r2, [pc, #152]	@ (800a2ec <HAL_TIM_Base_Start_IT+0xd0>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d022      	beq.n	800a29c <HAL_TIM_Base_Start_IT+0x80>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a25e:	d01d      	beq.n	800a29c <HAL_TIM_Base_Start_IT+0x80>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a22      	ldr	r2, [pc, #136]	@ (800a2f0 <HAL_TIM_Base_Start_IT+0xd4>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d018      	beq.n	800a29c <HAL_TIM_Base_Start_IT+0x80>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a21      	ldr	r2, [pc, #132]	@ (800a2f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d013      	beq.n	800a29c <HAL_TIM_Base_Start_IT+0x80>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a1f      	ldr	r2, [pc, #124]	@ (800a2f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d00e      	beq.n	800a29c <HAL_TIM_Base_Start_IT+0x80>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	4a1e      	ldr	r2, [pc, #120]	@ (800a2fc <HAL_TIM_Base_Start_IT+0xe0>)
 800a284:	4293      	cmp	r3, r2
 800a286:	d009      	beq.n	800a29c <HAL_TIM_Base_Start_IT+0x80>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a1c      	ldr	r2, [pc, #112]	@ (800a300 <HAL_TIM_Base_Start_IT+0xe4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d004      	beq.n	800a29c <HAL_TIM_Base_Start_IT+0x80>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	4a1b      	ldr	r2, [pc, #108]	@ (800a304 <HAL_TIM_Base_Start_IT+0xe8>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d115      	bne.n	800a2c8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689a      	ldr	r2, [r3, #8]
 800a2a2:	4b19      	ldr	r3, [pc, #100]	@ (800a308 <HAL_TIM_Base_Start_IT+0xec>)
 800a2a4:	4013      	ands	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2b06      	cmp	r3, #6
 800a2ac:	d015      	beq.n	800a2da <HAL_TIM_Base_Start_IT+0xbe>
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a2b4:	d011      	beq.n	800a2da <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f042 0201 	orr.w	r2, r2, #1
 800a2c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2c6:	e008      	b.n	800a2da <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f042 0201 	orr.w	r2, r2, #1
 800a2d6:	601a      	str	r2, [r3, #0]
 800a2d8:	e000      	b.n	800a2dc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a2da:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	40010000 	.word	0x40010000
 800a2f0:	40000400 	.word	0x40000400
 800a2f4:	40000800 	.word	0x40000800
 800a2f8:	40000c00 	.word	0x40000c00
 800a2fc:	40010400 	.word	0x40010400
 800a300:	40014000 	.word	0x40014000
 800a304:	40001800 	.word	0x40001800
 800a308:	00010007 	.word	0x00010007

0800a30c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	f003 0302 	and.w	r3, r3, #2
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d020      	beq.n	800a370 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	f003 0302 	and.w	r3, r3, #2
 800a334:	2b00      	cmp	r3, #0
 800a336:	d01b      	beq.n	800a370 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f06f 0202 	mvn.w	r2, #2
 800a340:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2201      	movs	r2, #1
 800a346:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	699b      	ldr	r3, [r3, #24]
 800a34e:	f003 0303 	and.w	r3, r3, #3
 800a352:	2b00      	cmp	r3, #0
 800a354:	d003      	beq.n	800a35e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f9b4 	bl	800a6c4 <HAL_TIM_IC_CaptureCallback>
 800a35c:	e005      	b.n	800a36a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f9a6 	bl	800a6b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f000 f9b7 	bl	800a6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	f003 0304 	and.w	r3, r3, #4
 800a376:	2b00      	cmp	r3, #0
 800a378:	d020      	beq.n	800a3bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d01b      	beq.n	800a3bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0204 	mvn.w	r2, #4
 800a38c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2202      	movs	r2, #2
 800a392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d003      	beq.n	800a3aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f98e 	bl	800a6c4 <HAL_TIM_IC_CaptureCallback>
 800a3a8:	e005      	b.n	800a3b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f980 	bl	800a6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f991 	bl	800a6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	f003 0308 	and.w	r3, r3, #8
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d020      	beq.n	800a408 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f003 0308 	and.w	r3, r3, #8
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d01b      	beq.n	800a408 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f06f 0208 	mvn.w	r2, #8
 800a3d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2204      	movs	r2, #4
 800a3de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	f003 0303 	and.w	r3, r3, #3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 f968 	bl	800a6c4 <HAL_TIM_IC_CaptureCallback>
 800a3f4:	e005      	b.n	800a402 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f95a 	bl	800a6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f000 f96b 	bl	800a6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2200      	movs	r2, #0
 800a406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f003 0310 	and.w	r3, r3, #16
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d020      	beq.n	800a454 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	f003 0310 	and.w	r3, r3, #16
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01b      	beq.n	800a454 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f06f 0210 	mvn.w	r2, #16
 800a424:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2208      	movs	r2, #8
 800a42a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	69db      	ldr	r3, [r3, #28]
 800a432:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a436:	2b00      	cmp	r3, #0
 800a438:	d003      	beq.n	800a442 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f942 	bl	800a6c4 <HAL_TIM_IC_CaptureCallback>
 800a440:	e005      	b.n	800a44e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f934 	bl	800a6b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f945 	bl	800a6d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	f003 0301 	and.w	r3, r3, #1
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00c      	beq.n	800a478 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b00      	cmp	r3, #0
 800a466:	d007      	beq.n	800a478 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f06f 0201 	mvn.w	r2, #1
 800a470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f7f6 feae 	bl	80011d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d104      	bne.n	800a48c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00c      	beq.n	800a4a6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a492:	2b00      	cmp	r3, #0
 800a494:	d007      	beq.n	800a4a6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a49e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f000 fb05 	bl	800aab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d00c      	beq.n	800a4ca <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d007      	beq.n	800a4ca <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a4c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4c4:	6878      	ldr	r0, [r7, #4]
 800a4c6:	f000 fafd 	bl	800aac4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00c      	beq.n	800a4ee <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d007      	beq.n	800a4ee <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a4e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f000 f8ff 	bl	800a6ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a4ee:	68bb      	ldr	r3, [r7, #8]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00c      	beq.n	800a512 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f003 0320 	and.w	r3, r3, #32
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d007      	beq.n	800a512 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f06f 0220 	mvn.w	r2, #32
 800a50a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 fac5 	bl	800aa9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a512:	bf00      	nop
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
	...

0800a51c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
 800a524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a526:	2300      	movs	r3, #0
 800a528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_TIM_ConfigClockSource+0x1c>
 800a534:	2302      	movs	r3, #2
 800a536:	e0b4      	b.n	800a6a2 <HAL_TIM_ConfigClockSource+0x186>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	4b56      	ldr	r3, [pc, #344]	@ (800a6ac <HAL_TIM_ConfigClockSource+0x190>)
 800a554:	4013      	ands	r3, r2
 800a556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a55e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68ba      	ldr	r2, [r7, #8]
 800a566:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a570:	d03e      	beq.n	800a5f0 <HAL_TIM_ConfigClockSource+0xd4>
 800a572:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a576:	f200 8087 	bhi.w	800a688 <HAL_TIM_ConfigClockSource+0x16c>
 800a57a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a57e:	f000 8086 	beq.w	800a68e <HAL_TIM_ConfigClockSource+0x172>
 800a582:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a586:	d87f      	bhi.n	800a688 <HAL_TIM_ConfigClockSource+0x16c>
 800a588:	2b70      	cmp	r3, #112	@ 0x70
 800a58a:	d01a      	beq.n	800a5c2 <HAL_TIM_ConfigClockSource+0xa6>
 800a58c:	2b70      	cmp	r3, #112	@ 0x70
 800a58e:	d87b      	bhi.n	800a688 <HAL_TIM_ConfigClockSource+0x16c>
 800a590:	2b60      	cmp	r3, #96	@ 0x60
 800a592:	d050      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0x11a>
 800a594:	2b60      	cmp	r3, #96	@ 0x60
 800a596:	d877      	bhi.n	800a688 <HAL_TIM_ConfigClockSource+0x16c>
 800a598:	2b50      	cmp	r3, #80	@ 0x50
 800a59a:	d03c      	beq.n	800a616 <HAL_TIM_ConfigClockSource+0xfa>
 800a59c:	2b50      	cmp	r3, #80	@ 0x50
 800a59e:	d873      	bhi.n	800a688 <HAL_TIM_ConfigClockSource+0x16c>
 800a5a0:	2b40      	cmp	r3, #64	@ 0x40
 800a5a2:	d058      	beq.n	800a656 <HAL_TIM_ConfigClockSource+0x13a>
 800a5a4:	2b40      	cmp	r3, #64	@ 0x40
 800a5a6:	d86f      	bhi.n	800a688 <HAL_TIM_ConfigClockSource+0x16c>
 800a5a8:	2b30      	cmp	r3, #48	@ 0x30
 800a5aa:	d064      	beq.n	800a676 <HAL_TIM_ConfigClockSource+0x15a>
 800a5ac:	2b30      	cmp	r3, #48	@ 0x30
 800a5ae:	d86b      	bhi.n	800a688 <HAL_TIM_ConfigClockSource+0x16c>
 800a5b0:	2b20      	cmp	r3, #32
 800a5b2:	d060      	beq.n	800a676 <HAL_TIM_ConfigClockSource+0x15a>
 800a5b4:	2b20      	cmp	r3, #32
 800a5b6:	d867      	bhi.n	800a688 <HAL_TIM_ConfigClockSource+0x16c>
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d05c      	beq.n	800a676 <HAL_TIM_ConfigClockSource+0x15a>
 800a5bc:	2b10      	cmp	r3, #16
 800a5be:	d05a      	beq.n	800a676 <HAL_TIM_ConfigClockSource+0x15a>
 800a5c0:	e062      	b.n	800a688 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5d2:	f000 f9b5 	bl	800a940 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a5e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	68ba      	ldr	r2, [r7, #8]
 800a5ec:	609a      	str	r2, [r3, #8]
      break;
 800a5ee:	e04f      	b.n	800a690 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a600:	f000 f99e 	bl	800a940 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	689a      	ldr	r2, [r3, #8]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a612:	609a      	str	r2, [r3, #8]
      break;
 800a614:	e03c      	b.n	800a690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a622:	461a      	mov	r2, r3
 800a624:	f000 f912 	bl	800a84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2150      	movs	r1, #80	@ 0x50
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f96b 	bl	800a90a <TIM_ITRx_SetConfig>
      break;
 800a634:	e02c      	b.n	800a690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a642:	461a      	mov	r2, r3
 800a644:	f000 f931 	bl	800a8aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	2160      	movs	r1, #96	@ 0x60
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f95b 	bl	800a90a <TIM_ITRx_SetConfig>
      break;
 800a654:	e01c      	b.n	800a690 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a662:	461a      	mov	r2, r3
 800a664:	f000 f8f2 	bl	800a84c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2140      	movs	r1, #64	@ 0x40
 800a66e:	4618      	mov	r0, r3
 800a670:	f000 f94b 	bl	800a90a <TIM_ITRx_SetConfig>
      break;
 800a674:	e00c      	b.n	800a690 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4619      	mov	r1, r3
 800a680:	4610      	mov	r0, r2
 800a682:	f000 f942 	bl	800a90a <TIM_ITRx_SetConfig>
      break;
 800a686:	e003      	b.n	800a690 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a688:	2301      	movs	r3, #1
 800a68a:	73fb      	strb	r3, [r7, #15]
      break;
 800a68c:	e000      	b.n	800a690 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a68e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2201      	movs	r2, #1
 800a694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2200      	movs	r2, #0
 800a69c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	fffeff88 	.word	0xfffeff88

0800a6b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a43      	ldr	r2, [pc, #268]	@ (800a820 <TIM_Base_SetConfig+0x120>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d013      	beq.n	800a740 <TIM_Base_SetConfig+0x40>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a71e:	d00f      	beq.n	800a740 <TIM_Base_SetConfig+0x40>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a40      	ldr	r2, [pc, #256]	@ (800a824 <TIM_Base_SetConfig+0x124>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d00b      	beq.n	800a740 <TIM_Base_SetConfig+0x40>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a3f      	ldr	r2, [pc, #252]	@ (800a828 <TIM_Base_SetConfig+0x128>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d007      	beq.n	800a740 <TIM_Base_SetConfig+0x40>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a3e      	ldr	r2, [pc, #248]	@ (800a82c <TIM_Base_SetConfig+0x12c>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d003      	beq.n	800a740 <TIM_Base_SetConfig+0x40>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a3d      	ldr	r2, [pc, #244]	@ (800a830 <TIM_Base_SetConfig+0x130>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d108      	bne.n	800a752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	68fa      	ldr	r2, [r7, #12]
 800a74e:	4313      	orrs	r3, r2
 800a750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a32      	ldr	r2, [pc, #200]	@ (800a820 <TIM_Base_SetConfig+0x120>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d02b      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a760:	d027      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a2f      	ldr	r2, [pc, #188]	@ (800a824 <TIM_Base_SetConfig+0x124>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d023      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a2e      	ldr	r2, [pc, #184]	@ (800a828 <TIM_Base_SetConfig+0x128>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d01f      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a2d      	ldr	r2, [pc, #180]	@ (800a82c <TIM_Base_SetConfig+0x12c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d01b      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a2c      	ldr	r2, [pc, #176]	@ (800a830 <TIM_Base_SetConfig+0x130>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d017      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a2b      	ldr	r2, [pc, #172]	@ (800a834 <TIM_Base_SetConfig+0x134>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d013      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a2a      	ldr	r2, [pc, #168]	@ (800a838 <TIM_Base_SetConfig+0x138>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00f      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a29      	ldr	r2, [pc, #164]	@ (800a83c <TIM_Base_SetConfig+0x13c>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d00b      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a28      	ldr	r2, [pc, #160]	@ (800a840 <TIM_Base_SetConfig+0x140>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d007      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a27      	ldr	r2, [pc, #156]	@ (800a844 <TIM_Base_SetConfig+0x144>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d003      	beq.n	800a7b2 <TIM_Base_SetConfig+0xb2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a26      	ldr	r2, [pc, #152]	@ (800a848 <TIM_Base_SetConfig+0x148>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d108      	bne.n	800a7c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	68fa      	ldr	r2, [r7, #12]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7d2:	683b      	ldr	r3, [r7, #0]
 800a7d4:	689a      	ldr	r2, [r3, #8]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a0e      	ldr	r2, [pc, #56]	@ (800a820 <TIM_Base_SetConfig+0x120>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d003      	beq.n	800a7f2 <TIM_Base_SetConfig+0xf2>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a10      	ldr	r2, [pc, #64]	@ (800a830 <TIM_Base_SetConfig+0x130>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d103      	bne.n	800a7fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	691a      	ldr	r2, [r3, #16]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f043 0204 	orr.w	r2, r3, #4
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	601a      	str	r2, [r3, #0]
}
 800a812:	bf00      	nop
 800a814:	3714      	adds	r7, #20
 800a816:	46bd      	mov	sp, r7
 800a818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81c:	4770      	bx	lr
 800a81e:	bf00      	nop
 800a820:	40010000 	.word	0x40010000
 800a824:	40000400 	.word	0x40000400
 800a828:	40000800 	.word	0x40000800
 800a82c:	40000c00 	.word	0x40000c00
 800a830:	40010400 	.word	0x40010400
 800a834:	40014000 	.word	0x40014000
 800a838:	40014400 	.word	0x40014400
 800a83c:	40014800 	.word	0x40014800
 800a840:	40001800 	.word	0x40001800
 800a844:	40001c00 	.word	0x40001c00
 800a848:	40002000 	.word	0x40002000

0800a84c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b087      	sub	sp, #28
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	6a1b      	ldr	r3, [r3, #32]
 800a85c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	f023 0201 	bic.w	r2, r3, #1
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	011b      	lsls	r3, r3, #4
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	4313      	orrs	r3, r2
 800a880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f023 030a 	bic.w	r3, r3, #10
 800a888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	4313      	orrs	r3, r2
 800a890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	693a      	ldr	r2, [r7, #16]
 800a896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	697a      	ldr	r2, [r7, #20]
 800a89c:	621a      	str	r2, [r3, #32]
}
 800a89e:	bf00      	nop
 800a8a0:	371c      	adds	r7, #28
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr

0800a8aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8aa:	b480      	push	{r7}
 800a8ac:	b087      	sub	sp, #28
 800a8ae:	af00      	add	r7, sp, #0
 800a8b0:	60f8      	str	r0, [r7, #12]
 800a8b2:	60b9      	str	r1, [r7, #8]
 800a8b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6a1b      	ldr	r3, [r3, #32]
 800a8ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	f023 0210 	bic.w	r2, r3, #16
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	699b      	ldr	r3, [r3, #24]
 800a8cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a8d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	031b      	lsls	r3, r3, #12
 800a8da:	693a      	ldr	r2, [r7, #16]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a8e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	011b      	lsls	r3, r3, #4
 800a8ec:	697a      	ldr	r2, [r7, #20]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	693a      	ldr	r2, [r7, #16]
 800a8f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	697a      	ldr	r2, [r7, #20]
 800a8fc:	621a      	str	r2, [r3, #32]
}
 800a8fe:	bf00      	nop
 800a900:	371c      	adds	r7, #28
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b085      	sub	sp, #20
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
 800a912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	4313      	orrs	r3, r2
 800a928:	f043 0307 	orr.w	r3, r3, #7
 800a92c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	609a      	str	r2, [r3, #8]
}
 800a934:	bf00      	nop
 800a936:	3714      	adds	r7, #20
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr

0800a940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a940:	b480      	push	{r7}
 800a942:	b087      	sub	sp, #28
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
 800a94c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a95a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	021a      	lsls	r2, r3, #8
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	431a      	orrs	r2, r3
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	4313      	orrs	r3, r2
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	697a      	ldr	r2, [r7, #20]
 800a972:	609a      	str	r2, [r3, #8]
}
 800a974:	bf00      	nop
 800a976:	371c      	adds	r7, #28
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a990:	2b01      	cmp	r3, #1
 800a992:	d101      	bne.n	800a998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a994:	2302      	movs	r3, #2
 800a996:	e06d      	b.n	800aa74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2201      	movs	r2, #1
 800a99c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2202      	movs	r2, #2
 800a9a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a30      	ldr	r2, [pc, #192]	@ (800aa80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d004      	beq.n	800a9cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a2f      	ldr	r2, [pc, #188]	@ (800aa84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d108      	bne.n	800a9de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a9d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	68fa      	ldr	r2, [r7, #12]
 800a9da:	4313      	orrs	r3, r2
 800a9dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68fa      	ldr	r2, [r7, #12]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a20      	ldr	r2, [pc, #128]	@ (800aa80 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d022      	beq.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa0a:	d01d      	beq.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a1d      	ldr	r2, [pc, #116]	@ (800aa88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d018      	beq.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a1c      	ldr	r2, [pc, #112]	@ (800aa8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d013      	beq.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a1a      	ldr	r2, [pc, #104]	@ (800aa90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d00e      	beq.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a15      	ldr	r2, [pc, #84]	@ (800aa84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa30:	4293      	cmp	r3, r2
 800aa32:	d009      	beq.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a16      	ldr	r2, [pc, #88]	@ (800aa94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d004      	beq.n	800aa48 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	4a15      	ldr	r2, [pc, #84]	@ (800aa98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d10c      	bne.n	800aa62 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	68ba      	ldr	r2, [r7, #8]
 800aa56:	4313      	orrs	r3, r2
 800aa58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	68ba      	ldr	r2, [r7, #8]
 800aa60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3714      	adds	r7, #20
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr
 800aa80:	40010000 	.word	0x40010000
 800aa84:	40010400 	.word	0x40010400
 800aa88:	40000400 	.word	0x40000400
 800aa8c:	40000800 	.word	0x40000800
 800aa90:	40000c00 	.word	0x40000c00
 800aa94:	40014000 	.word	0x40014000
 800aa98:	40001800 	.word	0x40001800

0800aa9c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aab8:	bf00      	nop
 800aaba:	370c      	adds	r7, #12
 800aabc:	46bd      	mov	sp, r7
 800aabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac2:	4770      	bx	lr

0800aac4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b083      	sub	sp, #12
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800aacc:	bf00      	nop
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800aae6:	2301      	movs	r3, #1
 800aae8:	e040      	b.n	800ab6c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d106      	bne.n	800ab00 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f7f7 f95e 	bl	8001dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	2224      	movs	r2, #36	@ 0x24
 800ab04:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	681a      	ldr	r2, [r3, #0]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f022 0201 	bic.w	r2, r2, #1
 800ab14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d002      	beq.n	800ab24 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f000 ffc8 	bl	800bab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fd61 	bl	800b5ec <UART_SetConfig>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d101      	bne.n	800ab34 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800ab30:	2301      	movs	r3, #1
 800ab32:	e01b      	b.n	800ab6c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ab42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689a      	ldr	r2, [r3, #8]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ab52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f042 0201 	orr.w	r2, r2, #1
 800ab62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 f847 	bl	800bbf8 <UART_CheckIdleState>
 800ab6a:	4603      	mov	r3, r0
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3708      	adds	r7, #8
 800ab70:	46bd      	mov	sp, r7
 800ab72:	bd80      	pop	{r7, pc}

0800ab74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	@ 0x28
 800ab78:	af02      	add	r7, sp, #8
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	603b      	str	r3, [r7, #0]
 800ab80:	4613      	mov	r3, r2
 800ab82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ab88:	2b20      	cmp	r3, #32
 800ab8a:	d177      	bne.n	800ac7c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <HAL_UART_Transmit+0x24>
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ab98:	2301      	movs	r3, #1
 800ab9a:	e070      	b.n	800ac7e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2221      	movs	r2, #33	@ 0x21
 800aba8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800abaa:	f7f7 fbe1 	bl	8002370 <HAL_GetTick>
 800abae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	88fa      	ldrh	r2, [r7, #6]
 800abb4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	88fa      	ldrh	r2, [r7, #6]
 800abbc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800abc8:	d108      	bne.n	800abdc <HAL_UART_Transmit+0x68>
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d104      	bne.n	800abdc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	61bb      	str	r3, [r7, #24]
 800abda:	e003      	b.n	800abe4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800abe0:	2300      	movs	r3, #0
 800abe2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800abe4:	e02f      	b.n	800ac46 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	9300      	str	r3, [sp, #0]
 800abea:	697b      	ldr	r3, [r7, #20]
 800abec:	2200      	movs	r2, #0
 800abee:	2180      	movs	r1, #128	@ 0x80
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f001 f858 	bl	800bca6 <UART_WaitOnFlagUntilTimeout>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d004      	beq.n	800ac06 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2220      	movs	r2, #32
 800ac00:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e03b      	b.n	800ac7e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10b      	bne.n	800ac24 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ac0c:	69bb      	ldr	r3, [r7, #24]
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	461a      	mov	r2, r3
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ac1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	3302      	adds	r3, #2
 800ac20:	61bb      	str	r3, [r7, #24]
 800ac22:	e007      	b.n	800ac34 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	781a      	ldrb	r2, [r3, #0]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	3301      	adds	r3, #1
 800ac32:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800ac4c:	b29b      	uxth	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d1c9      	bne.n	800abe6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	2140      	movs	r1, #64	@ 0x40
 800ac5c:	68f8      	ldr	r0, [r7, #12]
 800ac5e:	f001 f822 	bl	800bca6 <UART_WaitOnFlagUntilTimeout>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d004      	beq.n	800ac72 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800ac6e:	2303      	movs	r3, #3
 800ac70:	e005      	b.n	800ac7e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	2220      	movs	r2, #32
 800ac76:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	e000      	b.n	800ac7e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800ac7c:	2302      	movs	r3, #2
  }
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
	...

0800ac88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b08b      	sub	sp, #44	@ 0x2c
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	4613      	mov	r3, r2
 800ac94:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac9a:	2b20      	cmp	r3, #32
 800ac9c:	d147      	bne.n	800ad2e <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <HAL_UART_Transmit_IT+0x22>
 800aca4:	88fb      	ldrh	r3, [r7, #6]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d101      	bne.n	800acae <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	e040      	b.n	800ad30 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	88fa      	ldrh	r2, [r7, #6]
 800acb8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	88fa      	ldrh	r2, [r7, #6]
 800acc0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2200      	movs	r2, #0
 800acc8:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2221      	movs	r2, #33	@ 0x21
 800acd6:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ace0:	d107      	bne.n	800acf2 <HAL_UART_Transmit_IT+0x6a>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	691b      	ldr	r3, [r3, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d103      	bne.n	800acf2 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	4a13      	ldr	r2, [pc, #76]	@ (800ad3c <HAL_UART_Transmit_IT+0xb4>)
 800acee:	66da      	str	r2, [r3, #108]	@ 0x6c
 800acf0:	e002      	b.n	800acf8 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	4a12      	ldr	r2, [pc, #72]	@ (800ad40 <HAL_UART_Transmit_IT+0xb8>)
 800acf6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	e853 3f00 	ldrex	r3, [r3]
 800ad04:	613b      	str	r3, [r7, #16]
   return(result);
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	461a      	mov	r2, r3
 800ad14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad16:	623b      	str	r3, [r7, #32]
 800ad18:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad1a:	69f9      	ldr	r1, [r7, #28]
 800ad1c:	6a3a      	ldr	r2, [r7, #32]
 800ad1e:	e841 2300 	strex	r3, r2, [r1]
 800ad22:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad24:	69bb      	ldr	r3, [r7, #24]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e6      	bne.n	800acf8 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	e000      	b.n	800ad30 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800ad2e:	2302      	movs	r3, #2
  }
}
 800ad30:	4618      	mov	r0, r3
 800ad32:	372c      	adds	r7, #44	@ 0x2c
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr
 800ad3c:	0800c2fd 	.word	0x0800c2fd
 800ad40:	0800c247 	.word	0x0800c247

0800ad44 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08a      	sub	sp, #40	@ 0x28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	60b9      	str	r1, [r7, #8]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	d132      	bne.n	800adc2 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <HAL_UART_Receive_DMA+0x24>
 800ad62:	88fb      	ldrh	r3, [r7, #6]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ad68:	2301      	movs	r3, #1
 800ad6a:	e02b      	b.n	800adc4 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d018      	beq.n	800adb2 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad86:	697b      	ldr	r3, [r7, #20]
 800ad88:	e853 3f00 	ldrex	r3, [r3]
 800ad8c:	613b      	str	r3, [r7, #16]
   return(result);
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ad94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9e:	623b      	str	r3, [r7, #32]
 800ada0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada2:	69f9      	ldr	r1, [r7, #28]
 800ada4:	6a3a      	ldr	r2, [r7, #32]
 800ada6:	e841 2300 	strex	r3, r2, [r1]
 800adaa:	61bb      	str	r3, [r7, #24]
   return(result);
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1e6      	bne.n	800ad80 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800adb2:	88fb      	ldrh	r3, [r7, #6]
 800adb4:	461a      	mov	r2, r3
 800adb6:	68b9      	ldr	r1, [r7, #8]
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	f000 ffe1 	bl	800bd80 <UART_Start_Receive_DMA>
 800adbe:	4603      	mov	r3, r0
 800adc0:	e000      	b.n	800adc4 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800adc2:	2302      	movs	r3, #2
  }
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	3728      	adds	r7, #40	@ 0x28
 800adc8:	46bd      	mov	sp, r7
 800adca:	bd80      	pop	{r7, pc}

0800adcc <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b0a0      	sub	sp, #128	@ 0x80
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800addc:	e853 3f00 	ldrex	r3, [r3]
 800ade0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800ade2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ade4:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800ade8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	461a      	mov	r2, r3
 800adf0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800adf2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800adf4:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800adf8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800adfa:	e841 2300 	strex	r3, r2, [r1]
 800adfe:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800ae00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1e6      	bne.n	800add4 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	3308      	adds	r3, #8
 800ae0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae10:	e853 3f00 	ldrex	r3, [r3]
 800ae14:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ae16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ae18:	f023 0301 	bic.w	r3, r3, #1
 800ae1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	3308      	adds	r3, #8
 800ae24:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800ae26:	657a      	str	r2, [r7, #84]	@ 0x54
 800ae28:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae2a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ae2c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ae2e:	e841 2300 	strex	r3, r2, [r1]
 800ae32:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ae34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1e5      	bne.n	800ae06 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d118      	bne.n	800ae74 <HAL_UART_Abort+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae4a:	e853 3f00 	ldrex	r3, [r3]
 800ae4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae52:	f023 0310 	bic.w	r3, r3, #16
 800ae56:	677b      	str	r3, [r7, #116]	@ 0x74
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ae60:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae68:	e841 2300 	strex	r3, r2, [r1]
 800ae6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1e6      	bne.n	800ae42 <HAL_UART_Abort+0x76>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae7e:	2b80      	cmp	r3, #128	@ 0x80
 800ae80:	d137      	bne.n	800aef2 <HAL_UART_Abort+0x126>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	3308      	adds	r3, #8
 800ae88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae8a:	6a3b      	ldr	r3, [r7, #32]
 800ae8c:	e853 3f00 	ldrex	r3, [r3]
 800ae90:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae98:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	3308      	adds	r3, #8
 800aea0:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800aea2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aea4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aea8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aeaa:	e841 2300 	strex	r3, r2, [r1]
 800aeae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d1e5      	bne.n	800ae82 <HAL_UART_Abort+0xb6>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d019      	beq.n	800aef2 <HAL_UART_Abort+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aec2:	2200      	movs	r2, #0
 800aec4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f8 fb00 	bl	80034d0 <HAL_DMA_Abort>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00d      	beq.n	800aef2 <HAL_UART_Abort+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7f8 fd76 	bl	80039cc <HAL_DMA_GetError>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b20      	cmp	r3, #32
 800aee4:	d105      	bne.n	800aef2 <HAL_UART_Abort+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2210      	movs	r2, #16
 800aeea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aeee:	2303      	movs	r3, #3
 800aef0:	e061      	b.n	800afb6 <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	689b      	ldr	r3, [r3, #8]
 800aef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aefc:	2b40      	cmp	r3, #64	@ 0x40
 800aefe:	d137      	bne.n	800af70 <HAL_UART_Abort+0x1a4>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	3308      	adds	r3, #8
 800af06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	e853 3f00 	ldrex	r3, [r3]
 800af0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3308      	adds	r3, #8
 800af1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af20:	61ba      	str	r2, [r7, #24]
 800af22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af24:	6979      	ldr	r1, [r7, #20]
 800af26:	69ba      	ldr	r2, [r7, #24]
 800af28:	e841 2300 	strex	r3, r2, [r1]
 800af2c:	613b      	str	r3, [r7, #16]
   return(result);
 800af2e:	693b      	ldr	r3, [r7, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1e5      	bne.n	800af00 <HAL_UART_Abort+0x134>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d019      	beq.n	800af70 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af40:	2200      	movs	r2, #0
 800af42:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af48:	4618      	mov	r0, r3
 800af4a:	f7f8 fac1 	bl	80034d0 <HAL_DMA_Abort>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d00d      	beq.n	800af70 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af58:	4618      	mov	r0, r3
 800af5a:	f7f8 fd37 	bl	80039cc <HAL_DMA_GetError>
 800af5e:	4603      	mov	r3, r0
 800af60:	2b20      	cmp	r3, #32
 800af62:	d105      	bne.n	800af70 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2210      	movs	r2, #16
 800af68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800af6c:	2303      	movs	r3, #3
 800af6e:	e022      	b.n	800afb6 <HAL_UART_Abort+0x1ea>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2200      	movs	r2, #0
 800af74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
  huart->RxXferCount = 0U;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	220f      	movs	r2, #15
 800af86:	621a      	str	r2, [r3, #32]


  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	699a      	ldr	r2, [r3, #24]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f042 0208 	orr.w	r2, r2, #8
 800af96:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2220      	movs	r2, #32
 800af9c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2220      	movs	r2, #32
 800afa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2200      	movs	r2, #0
 800afaa:	661a      	str	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3780      	adds	r7, #128	@ 0x80
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
	...

0800afc0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b0ba      	sub	sp, #232	@ 0xe8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	69db      	ldr	r3, [r3, #28]
 800afce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	689b      	ldr	r3, [r3, #8]
 800afe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afe6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800afea:	f640 030f 	movw	r3, #2063	@ 0x80f
 800afee:	4013      	ands	r3, r2
 800aff0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aff4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d115      	bne.n	800b028 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800affc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b000:	f003 0320 	and.w	r3, r3, #32
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00f      	beq.n	800b028 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b00      	cmp	r3, #0
 800b012:	d009      	beq.n	800b028 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b018:	2b00      	cmp	r3, #0
 800b01a:	f000 82b1 	beq.w	800b580 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	4798      	blx	r3
      }
      return;
 800b026:	e2ab      	b.n	800b580 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b028:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f000 8117 	beq.w	800b260 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b032:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d106      	bne.n	800b04c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800b03e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b042:	4b85      	ldr	r3, [pc, #532]	@ (800b258 <HAL_UART_IRQHandler+0x298>)
 800b044:	4013      	ands	r3, r2
 800b046:	2b00      	cmp	r3, #0
 800b048:	f000 810a 	beq.w	800b260 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b050:	f003 0301 	and.w	r3, r3, #1
 800b054:	2b00      	cmp	r3, #0
 800b056:	d011      	beq.n	800b07c <HAL_UART_IRQHandler+0xbc>
 800b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b05c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00b      	beq.n	800b07c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	2201      	movs	r2, #1
 800b06a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b072:	f043 0201 	orr.w	r2, r3, #1
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b07c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b080:	f003 0302 	and.w	r3, r3, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d011      	beq.n	800b0ac <HAL_UART_IRQHandler+0xec>
 800b088:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00b      	beq.n	800b0ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2202      	movs	r2, #2
 800b09a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0a2:	f043 0204 	orr.w	r2, r3, #4
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b0ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0b0:	f003 0304 	and.w	r3, r3, #4
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d011      	beq.n	800b0dc <HAL_UART_IRQHandler+0x11c>
 800b0b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0bc:	f003 0301 	and.w	r3, r3, #1
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00b      	beq.n	800b0dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2204      	movs	r2, #4
 800b0ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b0d2:	f043 0202 	orr.w	r2, r3, #2
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b0e0:	f003 0308 	and.w	r3, r3, #8
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d017      	beq.n	800b118 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b0ec:	f003 0320 	and.w	r3, r3, #32
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d105      	bne.n	800b100 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b0f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b0f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d00b      	beq.n	800b118 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2208      	movs	r2, #8
 800b106:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b10e:	f043 0208 	orr.w	r2, r3, #8
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b11c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b120:	2b00      	cmp	r3, #0
 800b122:	d012      	beq.n	800b14a <HAL_UART_IRQHandler+0x18a>
 800b124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b128:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00c      	beq.n	800b14a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b140:	f043 0220 	orr.w	r2, r3, #32
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b150:	2b00      	cmp	r3, #0
 800b152:	f000 8217 	beq.w	800b584 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b15a:	f003 0320 	and.w	r3, r3, #32
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00d      	beq.n	800b17e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b162:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b166:	f003 0320 	and.w	r3, r3, #32
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d007      	beq.n	800b17e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b172:	2b00      	cmp	r3, #0
 800b174:	d003      	beq.n	800b17e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b184:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b192:	2b40      	cmp	r3, #64	@ 0x40
 800b194:	d005      	beq.n	800b1a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b19a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d04f      	beq.n	800b242 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b1a2:	6878      	ldr	r0, [r7, #4]
 800b1a4:	f000 feb2 	bl	800bf0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	689b      	ldr	r3, [r3, #8]
 800b1ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1b2:	2b40      	cmp	r3, #64	@ 0x40
 800b1b4:	d141      	bne.n	800b23a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	3308      	adds	r3, #8
 800b1bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b1c4:	e853 3f00 	ldrex	r3, [r3]
 800b1c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b1cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b1d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	3308      	adds	r3, #8
 800b1de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b1e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b1e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b1ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b1f2:	e841 2300 	strex	r3, r2, [r1]
 800b1f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b1fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1d9      	bne.n	800b1b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b206:	2b00      	cmp	r3, #0
 800b208:	d013      	beq.n	800b232 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b20e:	4a13      	ldr	r2, [pc, #76]	@ (800b25c <HAL_UART_IRQHandler+0x29c>)
 800b210:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b216:	4618      	mov	r0, r3
 800b218:	f7f8 f9ca 	bl	80035b0 <HAL_DMA_Abort_IT>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d017      	beq.n	800b252 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b22c:	4610      	mov	r0, r2
 800b22e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b230:	e00f      	b.n	800b252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f9c4 	bl	800b5c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b238:	e00b      	b.n	800b252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f9c0 	bl	800b5c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b240:	e007      	b.n	800b252 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b242:	6878      	ldr	r0, [r7, #4]
 800b244:	f000 f9bc 	bl	800b5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b250:	e198      	b.n	800b584 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b252:	bf00      	nop
    return;
 800b254:	e196      	b.n	800b584 <HAL_UART_IRQHandler+0x5c4>
 800b256:	bf00      	nop
 800b258:	04000120 	.word	0x04000120
 800b25c:	0800c223 	.word	0x0800c223

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b264:	2b01      	cmp	r3, #1
 800b266:	f040 8166 	bne.w	800b536 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b26a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b26e:	f003 0310 	and.w	r3, r3, #16
 800b272:	2b00      	cmp	r3, #0
 800b274:	f000 815f 	beq.w	800b536 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b27c:	f003 0310 	and.w	r3, r3, #16
 800b280:	2b00      	cmp	r3, #0
 800b282:	f000 8158 	beq.w	800b536 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2210      	movs	r2, #16
 800b28c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b298:	2b40      	cmp	r3, #64	@ 0x40
 800b29a:	f040 80d0 	bne.w	800b43e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	685b      	ldr	r3, [r3, #4]
 800b2a6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b2aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f000 80ab 	beq.w	800b40a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b2ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	f080 80a3 	bcs.w	800b40a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b2ca:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2d2:	69db      	ldr	r3, [r3, #28]
 800b2d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2d8:	f000 8086 	beq.w	800b3e8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b2e8:	e853 3f00 	ldrex	r3, [r3]
 800b2ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b2f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b2f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b2f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	461a      	mov	r2, r3
 800b302:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b306:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b30a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b30e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b312:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b316:	e841 2300 	strex	r3, r2, [r1]
 800b31a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b31e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b322:	2b00      	cmp	r3, #0
 800b324:	d1da      	bne.n	800b2dc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	3308      	adds	r3, #8
 800b32c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b330:	e853 3f00 	ldrex	r3, [r3]
 800b334:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b336:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b338:	f023 0301 	bic.w	r3, r3, #1
 800b33c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	3308      	adds	r3, #8
 800b346:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b34a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b34e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b352:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b356:	e841 2300 	strex	r3, r2, [r1]
 800b35a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b35c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1e1      	bne.n	800b326 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	3308      	adds	r3, #8
 800b368:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b372:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b378:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3308      	adds	r3, #8
 800b382:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b386:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b388:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b38c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e3      	bne.n	800b362 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2220      	movs	r2, #32
 800b39e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3b0:	e853 3f00 	ldrex	r3, [r3]
 800b3b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b3b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b3b8:	f023 0310 	bic.w	r3, r3, #16
 800b3bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b3ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b3cc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b3d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b3d2:	e841 2300 	strex	r3, r2, [r1]
 800b3d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b3d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d1e4      	bne.n	800b3a8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f7f8 f874 	bl	80034d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b3fa:	b29b      	uxth	r3, r3
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	b29b      	uxth	r3, r3
 800b400:	4619      	mov	r1, r3
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f8e6 	bl	800b5d4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b408:	e0be      	b.n	800b588 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b414:	429a      	cmp	r2, r3
 800b416:	f040 80b7 	bne.w	800b588 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b41e:	69db      	ldr	r3, [r3, #28]
 800b420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b424:	f040 80b0 	bne.w	800b588 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2202      	movs	r2, #2
 800b42c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b434:	4619      	mov	r1, r3
 800b436:	6878      	ldr	r0, [r7, #4]
 800b438:	f000 f8cc 	bl	800b5d4 <HAL_UARTEx_RxEventCallback>
      return;
 800b43c:	e0a4      	b.n	800b588 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	1ad3      	subs	r3, r2, r3
 800b44e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b458:	b29b      	uxth	r3, r3
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	f000 8096 	beq.w	800b58c <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800b460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b464:	2b00      	cmp	r3, #0
 800b466:	f000 8091 	beq.w	800b58c <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b472:	e853 3f00 	ldrex	r3, [r3]
 800b476:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b478:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b47a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b47e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	461a      	mov	r2, r3
 800b488:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b48c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b48e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b490:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b494:	e841 2300 	strex	r3, r2, [r1]
 800b498:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b49a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d1e4      	bne.n	800b46a <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	3308      	adds	r3, #8
 800b4a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	e853 3f00 	ldrex	r3, [r3]
 800b4ae:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b0:	6a3b      	ldr	r3, [r7, #32]
 800b4b2:	f023 0301 	bic.w	r3, r3, #1
 800b4b6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	3308      	adds	r3, #8
 800b4c0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b4c4:	633a      	str	r2, [r7, #48]	@ 0x30
 800b4c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b4ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4cc:	e841 2300 	strex	r3, r2, [r1]
 800b4d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e3      	bne.n	800b4a0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2220      	movs	r2, #32
 800b4dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	e853 3f00 	ldrex	r3, [r3]
 800b4f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f023 0310 	bic.w	r3, r3, #16
 800b500:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b50e:	61fb      	str	r3, [r7, #28]
 800b510:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	69b9      	ldr	r1, [r7, #24]
 800b514:	69fa      	ldr	r2, [r7, #28]
 800b516:	e841 2300 	strex	r3, r2, [r1]
 800b51a:	617b      	str	r3, [r7, #20]
   return(result);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d1e4      	bne.n	800b4ec <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2202      	movs	r2, #2
 800b526:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b52c:	4619      	mov	r1, r3
 800b52e:	6878      	ldr	r0, [r7, #4]
 800b530:	f000 f850 	bl	800b5d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b534:	e02a      	b.n	800b58c <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00e      	beq.n	800b560 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d008      	beq.n	800b560 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b552:	2b00      	cmp	r3, #0
 800b554:	d01c      	beq.n	800b590 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	4798      	blx	r3
    }
    return;
 800b55e:	e017      	b.n	800b590 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d012      	beq.n	800b592 <HAL_UART_IRQHandler+0x5d2>
 800b56c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b570:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b574:	2b00      	cmp	r3, #0
 800b576:	d00c      	beq.n	800b592 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 ff1f 	bl	800c3bc <UART_EndTransmit_IT>
    return;
 800b57e:	e008      	b.n	800b592 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b580:	bf00      	nop
 800b582:	e006      	b.n	800b592 <HAL_UART_IRQHandler+0x5d2>
    return;
 800b584:	bf00      	nop
 800b586:	e004      	b.n	800b592 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b588:	bf00      	nop
 800b58a:	e002      	b.n	800b592 <HAL_UART_IRQHandler+0x5d2>
      return;
 800b58c:	bf00      	nop
 800b58e:	e000      	b.n	800b592 <HAL_UART_IRQHandler+0x5d2>
    return;
 800b590:	bf00      	nop
  }

}
 800b592:	37e8      	adds	r7, #232	@ 0xe8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b5e0:	bf00      	nop
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b088      	sub	sp, #32
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	689a      	ldr	r2, [r3, #8]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	695b      	ldr	r3, [r3, #20]
 800b606:	431a      	orrs	r2, r3
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	4313      	orrs	r3, r2
 800b60e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	4ba6      	ldr	r3, [pc, #664]	@ (800b8b0 <UART_SetConfig+0x2c4>)
 800b618:	4013      	ands	r3, r2
 800b61a:	687a      	ldr	r2, [r7, #4]
 800b61c:	6812      	ldr	r2, [r2, #0]
 800b61e:	6979      	ldr	r1, [r7, #20]
 800b620:	430b      	orrs	r3, r1
 800b622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	68da      	ldr	r2, [r3, #12]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6a1b      	ldr	r3, [r3, #32]
 800b644:	697a      	ldr	r2, [r7, #20]
 800b646:	4313      	orrs	r3, r2
 800b648:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	697a      	ldr	r2, [r7, #20]
 800b65a:	430a      	orrs	r2, r1
 800b65c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	4a94      	ldr	r2, [pc, #592]	@ (800b8b4 <UART_SetConfig+0x2c8>)
 800b664:	4293      	cmp	r3, r2
 800b666:	d120      	bne.n	800b6aa <UART_SetConfig+0xbe>
 800b668:	4b93      	ldr	r3, [pc, #588]	@ (800b8b8 <UART_SetConfig+0x2cc>)
 800b66a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b66e:	f003 0303 	and.w	r3, r3, #3
 800b672:	2b03      	cmp	r3, #3
 800b674:	d816      	bhi.n	800b6a4 <UART_SetConfig+0xb8>
 800b676:	a201      	add	r2, pc, #4	@ (adr r2, 800b67c <UART_SetConfig+0x90>)
 800b678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b67c:	0800b68d 	.word	0x0800b68d
 800b680:	0800b699 	.word	0x0800b699
 800b684:	0800b693 	.word	0x0800b693
 800b688:	0800b69f 	.word	0x0800b69f
 800b68c:	2301      	movs	r3, #1
 800b68e:	77fb      	strb	r3, [r7, #31]
 800b690:	e150      	b.n	800b934 <UART_SetConfig+0x348>
 800b692:	2302      	movs	r3, #2
 800b694:	77fb      	strb	r3, [r7, #31]
 800b696:	e14d      	b.n	800b934 <UART_SetConfig+0x348>
 800b698:	2304      	movs	r3, #4
 800b69a:	77fb      	strb	r3, [r7, #31]
 800b69c:	e14a      	b.n	800b934 <UART_SetConfig+0x348>
 800b69e:	2308      	movs	r3, #8
 800b6a0:	77fb      	strb	r3, [r7, #31]
 800b6a2:	e147      	b.n	800b934 <UART_SetConfig+0x348>
 800b6a4:	2310      	movs	r3, #16
 800b6a6:	77fb      	strb	r3, [r7, #31]
 800b6a8:	e144      	b.n	800b934 <UART_SetConfig+0x348>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a83      	ldr	r2, [pc, #524]	@ (800b8bc <UART_SetConfig+0x2d0>)
 800b6b0:	4293      	cmp	r3, r2
 800b6b2:	d132      	bne.n	800b71a <UART_SetConfig+0x12e>
 800b6b4:	4b80      	ldr	r3, [pc, #512]	@ (800b8b8 <UART_SetConfig+0x2cc>)
 800b6b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ba:	f003 030c 	and.w	r3, r3, #12
 800b6be:	2b0c      	cmp	r3, #12
 800b6c0:	d828      	bhi.n	800b714 <UART_SetConfig+0x128>
 800b6c2:	a201      	add	r2, pc, #4	@ (adr r2, 800b6c8 <UART_SetConfig+0xdc>)
 800b6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c8:	0800b6fd 	.word	0x0800b6fd
 800b6cc:	0800b715 	.word	0x0800b715
 800b6d0:	0800b715 	.word	0x0800b715
 800b6d4:	0800b715 	.word	0x0800b715
 800b6d8:	0800b709 	.word	0x0800b709
 800b6dc:	0800b715 	.word	0x0800b715
 800b6e0:	0800b715 	.word	0x0800b715
 800b6e4:	0800b715 	.word	0x0800b715
 800b6e8:	0800b703 	.word	0x0800b703
 800b6ec:	0800b715 	.word	0x0800b715
 800b6f0:	0800b715 	.word	0x0800b715
 800b6f4:	0800b715 	.word	0x0800b715
 800b6f8:	0800b70f 	.word	0x0800b70f
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	77fb      	strb	r3, [r7, #31]
 800b700:	e118      	b.n	800b934 <UART_SetConfig+0x348>
 800b702:	2302      	movs	r3, #2
 800b704:	77fb      	strb	r3, [r7, #31]
 800b706:	e115      	b.n	800b934 <UART_SetConfig+0x348>
 800b708:	2304      	movs	r3, #4
 800b70a:	77fb      	strb	r3, [r7, #31]
 800b70c:	e112      	b.n	800b934 <UART_SetConfig+0x348>
 800b70e:	2308      	movs	r3, #8
 800b710:	77fb      	strb	r3, [r7, #31]
 800b712:	e10f      	b.n	800b934 <UART_SetConfig+0x348>
 800b714:	2310      	movs	r3, #16
 800b716:	77fb      	strb	r3, [r7, #31]
 800b718:	e10c      	b.n	800b934 <UART_SetConfig+0x348>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a68      	ldr	r2, [pc, #416]	@ (800b8c0 <UART_SetConfig+0x2d4>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d120      	bne.n	800b766 <UART_SetConfig+0x17a>
 800b724:	4b64      	ldr	r3, [pc, #400]	@ (800b8b8 <UART_SetConfig+0x2cc>)
 800b726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b72a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b72e:	2b30      	cmp	r3, #48	@ 0x30
 800b730:	d013      	beq.n	800b75a <UART_SetConfig+0x16e>
 800b732:	2b30      	cmp	r3, #48	@ 0x30
 800b734:	d814      	bhi.n	800b760 <UART_SetConfig+0x174>
 800b736:	2b20      	cmp	r3, #32
 800b738:	d009      	beq.n	800b74e <UART_SetConfig+0x162>
 800b73a:	2b20      	cmp	r3, #32
 800b73c:	d810      	bhi.n	800b760 <UART_SetConfig+0x174>
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <UART_SetConfig+0x15c>
 800b742:	2b10      	cmp	r3, #16
 800b744:	d006      	beq.n	800b754 <UART_SetConfig+0x168>
 800b746:	e00b      	b.n	800b760 <UART_SetConfig+0x174>
 800b748:	2300      	movs	r3, #0
 800b74a:	77fb      	strb	r3, [r7, #31]
 800b74c:	e0f2      	b.n	800b934 <UART_SetConfig+0x348>
 800b74e:	2302      	movs	r3, #2
 800b750:	77fb      	strb	r3, [r7, #31]
 800b752:	e0ef      	b.n	800b934 <UART_SetConfig+0x348>
 800b754:	2304      	movs	r3, #4
 800b756:	77fb      	strb	r3, [r7, #31]
 800b758:	e0ec      	b.n	800b934 <UART_SetConfig+0x348>
 800b75a:	2308      	movs	r3, #8
 800b75c:	77fb      	strb	r3, [r7, #31]
 800b75e:	e0e9      	b.n	800b934 <UART_SetConfig+0x348>
 800b760:	2310      	movs	r3, #16
 800b762:	77fb      	strb	r3, [r7, #31]
 800b764:	e0e6      	b.n	800b934 <UART_SetConfig+0x348>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	4a56      	ldr	r2, [pc, #344]	@ (800b8c4 <UART_SetConfig+0x2d8>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d120      	bne.n	800b7b2 <UART_SetConfig+0x1c6>
 800b770:	4b51      	ldr	r3, [pc, #324]	@ (800b8b8 <UART_SetConfig+0x2cc>)
 800b772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b776:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b77a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b77c:	d013      	beq.n	800b7a6 <UART_SetConfig+0x1ba>
 800b77e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b780:	d814      	bhi.n	800b7ac <UART_SetConfig+0x1c0>
 800b782:	2b80      	cmp	r3, #128	@ 0x80
 800b784:	d009      	beq.n	800b79a <UART_SetConfig+0x1ae>
 800b786:	2b80      	cmp	r3, #128	@ 0x80
 800b788:	d810      	bhi.n	800b7ac <UART_SetConfig+0x1c0>
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <UART_SetConfig+0x1a8>
 800b78e:	2b40      	cmp	r3, #64	@ 0x40
 800b790:	d006      	beq.n	800b7a0 <UART_SetConfig+0x1b4>
 800b792:	e00b      	b.n	800b7ac <UART_SetConfig+0x1c0>
 800b794:	2300      	movs	r3, #0
 800b796:	77fb      	strb	r3, [r7, #31]
 800b798:	e0cc      	b.n	800b934 <UART_SetConfig+0x348>
 800b79a:	2302      	movs	r3, #2
 800b79c:	77fb      	strb	r3, [r7, #31]
 800b79e:	e0c9      	b.n	800b934 <UART_SetConfig+0x348>
 800b7a0:	2304      	movs	r3, #4
 800b7a2:	77fb      	strb	r3, [r7, #31]
 800b7a4:	e0c6      	b.n	800b934 <UART_SetConfig+0x348>
 800b7a6:	2308      	movs	r3, #8
 800b7a8:	77fb      	strb	r3, [r7, #31]
 800b7aa:	e0c3      	b.n	800b934 <UART_SetConfig+0x348>
 800b7ac:	2310      	movs	r3, #16
 800b7ae:	77fb      	strb	r3, [r7, #31]
 800b7b0:	e0c0      	b.n	800b934 <UART_SetConfig+0x348>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	4a44      	ldr	r2, [pc, #272]	@ (800b8c8 <UART_SetConfig+0x2dc>)
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d125      	bne.n	800b808 <UART_SetConfig+0x21c>
 800b7bc:	4b3e      	ldr	r3, [pc, #248]	@ (800b8b8 <UART_SetConfig+0x2cc>)
 800b7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b7c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7ca:	d017      	beq.n	800b7fc <UART_SetConfig+0x210>
 800b7cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b7d0:	d817      	bhi.n	800b802 <UART_SetConfig+0x216>
 800b7d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7d6:	d00b      	beq.n	800b7f0 <UART_SetConfig+0x204>
 800b7d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7dc:	d811      	bhi.n	800b802 <UART_SetConfig+0x216>
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <UART_SetConfig+0x1fe>
 800b7e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7e6:	d006      	beq.n	800b7f6 <UART_SetConfig+0x20a>
 800b7e8:	e00b      	b.n	800b802 <UART_SetConfig+0x216>
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	77fb      	strb	r3, [r7, #31]
 800b7ee:	e0a1      	b.n	800b934 <UART_SetConfig+0x348>
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	77fb      	strb	r3, [r7, #31]
 800b7f4:	e09e      	b.n	800b934 <UART_SetConfig+0x348>
 800b7f6:	2304      	movs	r3, #4
 800b7f8:	77fb      	strb	r3, [r7, #31]
 800b7fa:	e09b      	b.n	800b934 <UART_SetConfig+0x348>
 800b7fc:	2308      	movs	r3, #8
 800b7fe:	77fb      	strb	r3, [r7, #31]
 800b800:	e098      	b.n	800b934 <UART_SetConfig+0x348>
 800b802:	2310      	movs	r3, #16
 800b804:	77fb      	strb	r3, [r7, #31]
 800b806:	e095      	b.n	800b934 <UART_SetConfig+0x348>
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a2f      	ldr	r2, [pc, #188]	@ (800b8cc <UART_SetConfig+0x2e0>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d125      	bne.n	800b85e <UART_SetConfig+0x272>
 800b812:	4b29      	ldr	r3, [pc, #164]	@ (800b8b8 <UART_SetConfig+0x2cc>)
 800b814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b818:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b81c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b820:	d017      	beq.n	800b852 <UART_SetConfig+0x266>
 800b822:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b826:	d817      	bhi.n	800b858 <UART_SetConfig+0x26c>
 800b828:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b82c:	d00b      	beq.n	800b846 <UART_SetConfig+0x25a>
 800b82e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b832:	d811      	bhi.n	800b858 <UART_SetConfig+0x26c>
 800b834:	2b00      	cmp	r3, #0
 800b836:	d003      	beq.n	800b840 <UART_SetConfig+0x254>
 800b838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b83c:	d006      	beq.n	800b84c <UART_SetConfig+0x260>
 800b83e:	e00b      	b.n	800b858 <UART_SetConfig+0x26c>
 800b840:	2301      	movs	r3, #1
 800b842:	77fb      	strb	r3, [r7, #31]
 800b844:	e076      	b.n	800b934 <UART_SetConfig+0x348>
 800b846:	2302      	movs	r3, #2
 800b848:	77fb      	strb	r3, [r7, #31]
 800b84a:	e073      	b.n	800b934 <UART_SetConfig+0x348>
 800b84c:	2304      	movs	r3, #4
 800b84e:	77fb      	strb	r3, [r7, #31]
 800b850:	e070      	b.n	800b934 <UART_SetConfig+0x348>
 800b852:	2308      	movs	r3, #8
 800b854:	77fb      	strb	r3, [r7, #31]
 800b856:	e06d      	b.n	800b934 <UART_SetConfig+0x348>
 800b858:	2310      	movs	r3, #16
 800b85a:	77fb      	strb	r3, [r7, #31]
 800b85c:	e06a      	b.n	800b934 <UART_SetConfig+0x348>
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	4a1b      	ldr	r2, [pc, #108]	@ (800b8d0 <UART_SetConfig+0x2e4>)
 800b864:	4293      	cmp	r3, r2
 800b866:	d138      	bne.n	800b8da <UART_SetConfig+0x2ee>
 800b868:	4b13      	ldr	r3, [pc, #76]	@ (800b8b8 <UART_SetConfig+0x2cc>)
 800b86a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b86e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b872:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b876:	d017      	beq.n	800b8a8 <UART_SetConfig+0x2bc>
 800b878:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b87c:	d82a      	bhi.n	800b8d4 <UART_SetConfig+0x2e8>
 800b87e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b882:	d00b      	beq.n	800b89c <UART_SetConfig+0x2b0>
 800b884:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b888:	d824      	bhi.n	800b8d4 <UART_SetConfig+0x2e8>
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <UART_SetConfig+0x2aa>
 800b88e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b892:	d006      	beq.n	800b8a2 <UART_SetConfig+0x2b6>
 800b894:	e01e      	b.n	800b8d4 <UART_SetConfig+0x2e8>
 800b896:	2300      	movs	r3, #0
 800b898:	77fb      	strb	r3, [r7, #31]
 800b89a:	e04b      	b.n	800b934 <UART_SetConfig+0x348>
 800b89c:	2302      	movs	r3, #2
 800b89e:	77fb      	strb	r3, [r7, #31]
 800b8a0:	e048      	b.n	800b934 <UART_SetConfig+0x348>
 800b8a2:	2304      	movs	r3, #4
 800b8a4:	77fb      	strb	r3, [r7, #31]
 800b8a6:	e045      	b.n	800b934 <UART_SetConfig+0x348>
 800b8a8:	2308      	movs	r3, #8
 800b8aa:	77fb      	strb	r3, [r7, #31]
 800b8ac:	e042      	b.n	800b934 <UART_SetConfig+0x348>
 800b8ae:	bf00      	nop
 800b8b0:	efff69f3 	.word	0xefff69f3
 800b8b4:	40011000 	.word	0x40011000
 800b8b8:	40023800 	.word	0x40023800
 800b8bc:	40004400 	.word	0x40004400
 800b8c0:	40004800 	.word	0x40004800
 800b8c4:	40004c00 	.word	0x40004c00
 800b8c8:	40005000 	.word	0x40005000
 800b8cc:	40011400 	.word	0x40011400
 800b8d0:	40007800 	.word	0x40007800
 800b8d4:	2310      	movs	r3, #16
 800b8d6:	77fb      	strb	r3, [r7, #31]
 800b8d8:	e02c      	b.n	800b934 <UART_SetConfig+0x348>
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	4a72      	ldr	r2, [pc, #456]	@ (800baa8 <UART_SetConfig+0x4bc>)
 800b8e0:	4293      	cmp	r3, r2
 800b8e2:	d125      	bne.n	800b930 <UART_SetConfig+0x344>
 800b8e4:	4b71      	ldr	r3, [pc, #452]	@ (800baac <UART_SetConfig+0x4c0>)
 800b8e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8ea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b8ee:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8f2:	d017      	beq.n	800b924 <UART_SetConfig+0x338>
 800b8f4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b8f8:	d817      	bhi.n	800b92a <UART_SetConfig+0x33e>
 800b8fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b8fe:	d00b      	beq.n	800b918 <UART_SetConfig+0x32c>
 800b900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b904:	d811      	bhi.n	800b92a <UART_SetConfig+0x33e>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d003      	beq.n	800b912 <UART_SetConfig+0x326>
 800b90a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b90e:	d006      	beq.n	800b91e <UART_SetConfig+0x332>
 800b910:	e00b      	b.n	800b92a <UART_SetConfig+0x33e>
 800b912:	2300      	movs	r3, #0
 800b914:	77fb      	strb	r3, [r7, #31]
 800b916:	e00d      	b.n	800b934 <UART_SetConfig+0x348>
 800b918:	2302      	movs	r3, #2
 800b91a:	77fb      	strb	r3, [r7, #31]
 800b91c:	e00a      	b.n	800b934 <UART_SetConfig+0x348>
 800b91e:	2304      	movs	r3, #4
 800b920:	77fb      	strb	r3, [r7, #31]
 800b922:	e007      	b.n	800b934 <UART_SetConfig+0x348>
 800b924:	2308      	movs	r3, #8
 800b926:	77fb      	strb	r3, [r7, #31]
 800b928:	e004      	b.n	800b934 <UART_SetConfig+0x348>
 800b92a:	2310      	movs	r3, #16
 800b92c:	77fb      	strb	r3, [r7, #31]
 800b92e:	e001      	b.n	800b934 <UART_SetConfig+0x348>
 800b930:	2310      	movs	r3, #16
 800b932:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	69db      	ldr	r3, [r3, #28]
 800b938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b93c:	d15b      	bne.n	800b9f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b93e:	7ffb      	ldrb	r3, [r7, #31]
 800b940:	2b08      	cmp	r3, #8
 800b942:	d828      	bhi.n	800b996 <UART_SetConfig+0x3aa>
 800b944:	a201      	add	r2, pc, #4	@ (adr r2, 800b94c <UART_SetConfig+0x360>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b971 	.word	0x0800b971
 800b950:	0800b979 	.word	0x0800b979
 800b954:	0800b981 	.word	0x0800b981
 800b958:	0800b997 	.word	0x0800b997
 800b95c:	0800b987 	.word	0x0800b987
 800b960:	0800b997 	.word	0x0800b997
 800b964:	0800b997 	.word	0x0800b997
 800b968:	0800b997 	.word	0x0800b997
 800b96c:	0800b98f 	.word	0x0800b98f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b970:	f7fc fc30 	bl	80081d4 <HAL_RCC_GetPCLK1Freq>
 800b974:	61b8      	str	r0, [r7, #24]
        break;
 800b976:	e013      	b.n	800b9a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b978:	f7fc fc40 	bl	80081fc <HAL_RCC_GetPCLK2Freq>
 800b97c:	61b8      	str	r0, [r7, #24]
        break;
 800b97e:	e00f      	b.n	800b9a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b980:	4b4b      	ldr	r3, [pc, #300]	@ (800bab0 <UART_SetConfig+0x4c4>)
 800b982:	61bb      	str	r3, [r7, #24]
        break;
 800b984:	e00c      	b.n	800b9a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b986:	f7fc fb53 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800b98a:	61b8      	str	r0, [r7, #24]
        break;
 800b98c:	e008      	b.n	800b9a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b98e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b992:	61bb      	str	r3, [r7, #24]
        break;
 800b994:	e004      	b.n	800b9a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b996:	2300      	movs	r3, #0
 800b998:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b99a:	2301      	movs	r3, #1
 800b99c:	77bb      	strb	r3, [r7, #30]
        break;
 800b99e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b9a0:	69bb      	ldr	r3, [r7, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d074      	beq.n	800ba90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	005a      	lsls	r2, r3, #1
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	685b      	ldr	r3, [r3, #4]
 800b9ae:	085b      	lsrs	r3, r3, #1
 800b9b0:	441a      	add	r2, r3
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9bc:	693b      	ldr	r3, [r7, #16]
 800b9be:	2b0f      	cmp	r3, #15
 800b9c0:	d916      	bls.n	800b9f0 <UART_SetConfig+0x404>
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b9c8:	d212      	bcs.n	800b9f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	f023 030f 	bic.w	r3, r3, #15
 800b9d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	085b      	lsrs	r3, r3, #1
 800b9d8:	b29b      	uxth	r3, r3
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	89fb      	ldrh	r3, [r7, #14]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	89fa      	ldrh	r2, [r7, #14]
 800b9ec:	60da      	str	r2, [r3, #12]
 800b9ee:	e04f      	b.n	800ba90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	77bb      	strb	r3, [r7, #30]
 800b9f4:	e04c      	b.n	800ba90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b9f6:	7ffb      	ldrb	r3, [r7, #31]
 800b9f8:	2b08      	cmp	r3, #8
 800b9fa:	d828      	bhi.n	800ba4e <UART_SetConfig+0x462>
 800b9fc:	a201      	add	r2, pc, #4	@ (adr r2, 800ba04 <UART_SetConfig+0x418>)
 800b9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba02:	bf00      	nop
 800ba04:	0800ba29 	.word	0x0800ba29
 800ba08:	0800ba31 	.word	0x0800ba31
 800ba0c:	0800ba39 	.word	0x0800ba39
 800ba10:	0800ba4f 	.word	0x0800ba4f
 800ba14:	0800ba3f 	.word	0x0800ba3f
 800ba18:	0800ba4f 	.word	0x0800ba4f
 800ba1c:	0800ba4f 	.word	0x0800ba4f
 800ba20:	0800ba4f 	.word	0x0800ba4f
 800ba24:	0800ba47 	.word	0x0800ba47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ba28:	f7fc fbd4 	bl	80081d4 <HAL_RCC_GetPCLK1Freq>
 800ba2c:	61b8      	str	r0, [r7, #24]
        break;
 800ba2e:	e013      	b.n	800ba58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ba30:	f7fc fbe4 	bl	80081fc <HAL_RCC_GetPCLK2Freq>
 800ba34:	61b8      	str	r0, [r7, #24]
        break;
 800ba36:	e00f      	b.n	800ba58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ba38:	4b1d      	ldr	r3, [pc, #116]	@ (800bab0 <UART_SetConfig+0x4c4>)
 800ba3a:	61bb      	str	r3, [r7, #24]
        break;
 800ba3c:	e00c      	b.n	800ba58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ba3e:	f7fc faf7 	bl	8008030 <HAL_RCC_GetSysClockFreq>
 800ba42:	61b8      	str	r0, [r7, #24]
        break;
 800ba44:	e008      	b.n	800ba58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ba4a:	61bb      	str	r3, [r7, #24]
        break;
 800ba4c:	e004      	b.n	800ba58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	77bb      	strb	r3, [r7, #30]
        break;
 800ba56:	bf00      	nop
    }

    if (pclk != 0U)
 800ba58:	69bb      	ldr	r3, [r7, #24]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d018      	beq.n	800ba90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	085a      	lsrs	r2, r3, #1
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	441a      	add	r2, r3
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	2b0f      	cmp	r3, #15
 800ba76:	d909      	bls.n	800ba8c <UART_SetConfig+0x4a0>
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba7e:	d205      	bcs.n	800ba8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	b29a      	uxth	r2, r3
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	60da      	str	r2, [r3, #12]
 800ba8a:	e001      	b.n	800ba90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ba9c:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3720      	adds	r7, #32
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	40007c00 	.word	0x40007c00
 800baac:	40023800 	.word	0x40023800
 800bab0:	00f42400 	.word	0x00f42400

0800bab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac0:	f003 0308 	and.w	r3, r3, #8
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00a      	beq.n	800bade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	685b      	ldr	r3, [r3, #4]
 800bace:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	430a      	orrs	r2, r1
 800badc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae2:	f003 0301 	and.w	r3, r3, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00a      	beq.n	800bb00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	685b      	ldr	r3, [r3, #4]
 800baf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb04:	f003 0302 	and.w	r3, r3, #2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00a      	beq.n	800bb22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb26:	f003 0304 	and.w	r3, r3, #4
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00a      	beq.n	800bb44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	430a      	orrs	r2, r1
 800bb42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb48:	f003 0310 	and.w	r3, r3, #16
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00a      	beq.n	800bb66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	430a      	orrs	r2, r1
 800bb64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb6a:	f003 0320 	and.w	r3, r3, #32
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d00a      	beq.n	800bb88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	430a      	orrs	r2, r1
 800bb86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d01a      	beq.n	800bbca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	430a      	orrs	r2, r1
 800bba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bbb2:	d10a      	bne.n	800bbca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	685b      	ldr	r3, [r3, #4]
 800bbba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	430a      	orrs	r2, r1
 800bbc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d00a      	beq.n	800bbec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	430a      	orrs	r2, r1
 800bbea:	605a      	str	r2, [r3, #4]
  }
}
 800bbec:	bf00      	nop
 800bbee:	370c      	adds	r7, #12
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b08c      	sub	sp, #48	@ 0x30
 800bbfc:	af02      	add	r7, sp, #8
 800bbfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2200      	movs	r2, #0
 800bc04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bc08:	f7f6 fbb2 	bl	8002370 <HAL_GetTick>
 800bc0c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f003 0308 	and.w	r3, r3, #8
 800bc18:	2b08      	cmp	r3, #8
 800bc1a:	d12e      	bne.n	800bc7a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bc1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bc20:	9300      	str	r3, [sp, #0]
 800bc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc24:	2200      	movs	r2, #0
 800bc26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 f83b 	bl	800bca6 <UART_WaitOnFlagUntilTimeout>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d021      	beq.n	800bc7a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc3c:	693b      	ldr	r3, [r7, #16]
 800bc3e:	e853 3f00 	ldrex	r3, [r3]
 800bc42:	60fb      	str	r3, [r7, #12]
   return(result);
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bc4a:	623b      	str	r3, [r7, #32]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	461a      	mov	r2, r3
 800bc52:	6a3b      	ldr	r3, [r7, #32]
 800bc54:	61fb      	str	r3, [r7, #28]
 800bc56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc58:	69b9      	ldr	r1, [r7, #24]
 800bc5a:	69fa      	ldr	r2, [r7, #28]
 800bc5c:	e841 2300 	strex	r3, r2, [r1]
 800bc60:	617b      	str	r3, [r7, #20]
   return(result);
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1e6      	bne.n	800bc36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2220      	movs	r2, #32
 800bc6c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bc76:	2303      	movs	r3, #3
 800bc78:	e011      	b.n	800bc9e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2220      	movs	r2, #32
 800bc7e:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2220      	movs	r2, #32
 800bc84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2200      	movs	r2, #0
 800bc92:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3728      	adds	r7, #40	@ 0x28
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b084      	sub	sp, #16
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	60f8      	str	r0, [r7, #12]
 800bcae:	60b9      	str	r1, [r7, #8]
 800bcb0:	603b      	str	r3, [r7, #0]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bcb6:	e04f      	b.n	800bd58 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bcb8:	69bb      	ldr	r3, [r7, #24]
 800bcba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcbe:	d04b      	beq.n	800bd58 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcc0:	f7f6 fb56 	bl	8002370 <HAL_GetTick>
 800bcc4:	4602      	mov	r2, r0
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	69ba      	ldr	r2, [r7, #24]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d302      	bcc.n	800bcd6 <UART_WaitOnFlagUntilTimeout+0x30>
 800bcd0:	69bb      	ldr	r3, [r7, #24]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800bcd6:	2303      	movs	r3, #3
 800bcd8:	e04e      	b.n	800bd78 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f003 0304 	and.w	r3, r3, #4
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d037      	beq.n	800bd58 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2b80      	cmp	r3, #128	@ 0x80
 800bcec:	d034      	beq.n	800bd58 <UART_WaitOnFlagUntilTimeout+0xb2>
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	2b40      	cmp	r3, #64	@ 0x40
 800bcf2:	d031      	beq.n	800bd58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	69db      	ldr	r3, [r3, #28]
 800bcfa:	f003 0308 	and.w	r3, r3, #8
 800bcfe:	2b08      	cmp	r3, #8
 800bd00:	d110      	bne.n	800bd24 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2208      	movs	r2, #8
 800bd08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd0a:	68f8      	ldr	r0, [r7, #12]
 800bd0c:	f000 f8fe 	bl	800bf0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	2208      	movs	r2, #8
 800bd14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800bd20:	2301      	movs	r3, #1
 800bd22:	e029      	b.n	800bd78 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	69db      	ldr	r3, [r3, #28]
 800bd2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bd2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bd32:	d111      	bne.n	800bd58 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd3c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	f000 f8e4 	bl	800bf0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	2220      	movs	r2, #32
 800bd48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e00f      	b.n	800bd78 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	69da      	ldr	r2, [r3, #28]
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	4013      	ands	r3, r2
 800bd62:	68ba      	ldr	r2, [r7, #8]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	bf0c      	ite	eq
 800bd68:	2301      	moveq	r3, #1
 800bd6a:	2300      	movne	r3, #0
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	461a      	mov	r2, r3
 800bd70:	79fb      	ldrb	r3, [r7, #7]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d0a0      	beq.n	800bcb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b096      	sub	sp, #88	@ 0x58
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	88fa      	ldrh	r2, [r7, #6]
 800bd98:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	2222      	movs	r2, #34	@ 0x22
 800bda8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d028      	beq.n	800be06 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdb8:	4a3e      	ldr	r2, [pc, #248]	@ (800beb4 <UART_Start_Receive_DMA+0x134>)
 800bdba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdc0:	4a3d      	ldr	r2, [pc, #244]	@ (800beb8 <UART_Start_Receive_DMA+0x138>)
 800bdc2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdc8:	4a3c      	ldr	r2, [pc, #240]	@ (800bebc <UART_Start_Receive_DMA+0x13c>)
 800bdca:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bdd0:	2200      	movs	r2, #0
 800bdd2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	3324      	adds	r3, #36	@ 0x24
 800bdde:	4619      	mov	r1, r3
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bde4:	461a      	mov	r2, r3
 800bde6:	88fb      	ldrh	r3, [r7, #6]
 800bde8:	f7f7 fb12 	bl	8003410 <HAL_DMA_Start_IT>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d009      	beq.n	800be06 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	2210      	movs	r2, #16
 800bdf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e051      	b.n	800beaa <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d018      	beq.n	800be40 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be16:	e853 3f00 	ldrex	r3, [r3]
 800be1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be22:	657b      	str	r3, [r7, #84]	@ 0x54
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	461a      	mov	r2, r3
 800be2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800be2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be2e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be30:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800be32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be34:	e841 2300 	strex	r3, r2, [r1]
 800be38:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800be3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1e6      	bne.n	800be0e <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	3308      	adds	r3, #8
 800be46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be4a:	e853 3f00 	ldrex	r3, [r3]
 800be4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be52:	f043 0301 	orr.w	r3, r3, #1
 800be56:	653b      	str	r3, [r7, #80]	@ 0x50
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	3308      	adds	r3, #8
 800be5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800be60:	637a      	str	r2, [r7, #52]	@ 0x34
 800be62:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800be66:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be68:	e841 2300 	strex	r3, r2, [r1]
 800be6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800be6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be70:	2b00      	cmp	r3, #0
 800be72:	d1e5      	bne.n	800be40 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3308      	adds	r3, #8
 800be7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	e853 3f00 	ldrex	r3, [r3]
 800be82:	613b      	str	r3, [r7, #16]
   return(result);
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	3308      	adds	r3, #8
 800be92:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be94:	623a      	str	r2, [r7, #32]
 800be96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be98:	69f9      	ldr	r1, [r7, #28]
 800be9a:	6a3a      	ldr	r2, [r7, #32]
 800be9c:	e841 2300 	strex	r3, r2, [r1]
 800bea0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e5      	bne.n	800be74 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800bea8:	2300      	movs	r3, #0
}
 800beaa:	4618      	mov	r0, r3
 800beac:	3758      	adds	r7, #88	@ 0x58
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}
 800beb2:	bf00      	nop
 800beb4:	0800bfd5 	.word	0x0800bfd5
 800beb8:	0800c133 	.word	0x0800c133
 800bebc:	0800c1a5 	.word	0x0800c1a5

0800bec0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bec0:	b480      	push	{r7}
 800bec2:	b089      	sub	sp, #36	@ 0x24
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	e853 3f00 	ldrex	r3, [r3]
 800bed4:	60bb      	str	r3, [r7, #8]
   return(result);
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bedc:	61fb      	str	r3, [r7, #28]
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	61bb      	str	r3, [r7, #24]
 800bee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beea:	6979      	ldr	r1, [r7, #20]
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	e841 2300 	strex	r3, r2, [r1]
 800bef2:	613b      	str	r3, [r7, #16]
   return(result);
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1e6      	bne.n	800bec8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2220      	movs	r2, #32
 800befe:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800bf00:	bf00      	nop
 800bf02:	3724      	adds	r7, #36	@ 0x24
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr

0800bf0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b095      	sub	sp, #84	@ 0x54
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf1c:	e853 3f00 	ldrex	r3, [r3]
 800bf20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bf28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	461a      	mov	r2, r3
 800bf30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bf32:	643b      	str	r3, [r7, #64]	@ 0x40
 800bf34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bf38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bf3a:	e841 2300 	strex	r3, r2, [r1]
 800bf3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bf40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d1e6      	bne.n	800bf14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	3308      	adds	r3, #8
 800bf4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	e853 3f00 	ldrex	r3, [r3]
 800bf54:	61fb      	str	r3, [r7, #28]
   return(result);
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	f023 0301 	bic.w	r3, r3, #1
 800bf5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3308      	adds	r3, #8
 800bf64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bf66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bf6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf6e:	e841 2300 	strex	r3, r2, [r1]
 800bf72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bf74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d1e5      	bne.n	800bf46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d118      	bne.n	800bfb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	e853 3f00 	ldrex	r3, [r3]
 800bf8e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	f023 0310 	bic.w	r3, r3, #16
 800bf96:	647b      	str	r3, [r7, #68]	@ 0x44
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bfa0:	61bb      	str	r3, [r7, #24]
 800bfa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfa4:	6979      	ldr	r1, [r7, #20]
 800bfa6:	69ba      	ldr	r2, [r7, #24]
 800bfa8:	e841 2300 	strex	r3, r2, [r1]
 800bfac:	613b      	str	r3, [r7, #16]
   return(result);
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d1e6      	bne.n	800bf82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bfc8:	bf00      	nop
 800bfca:	3754      	adds	r7, #84	@ 0x54
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b09c      	sub	sp, #112	@ 0x70
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bfea:	d071      	beq.n	800c0d0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bfec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfee:	2200      	movs	r2, #0
 800bff0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bff4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bffc:	e853 3f00 	ldrex	r3, [r3]
 800c000:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c002:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c004:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c00a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	461a      	mov	r2, r3
 800c010:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c012:	657b      	str	r3, [r7, #84]	@ 0x54
 800c014:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c016:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800c018:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c01a:	e841 2300 	strex	r3, r2, [r1]
 800c01e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800c020:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c022:	2b00      	cmp	r3, #0
 800c024:	d1e6      	bne.n	800bff4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3308      	adds	r3, #8
 800c02c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c02e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c030:	e853 3f00 	ldrex	r3, [r3]
 800c034:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c038:	f023 0301 	bic.w	r3, r3, #1
 800c03c:	667b      	str	r3, [r7, #100]	@ 0x64
 800c03e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	3308      	adds	r3, #8
 800c044:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c046:	643a      	str	r2, [r7, #64]	@ 0x40
 800c048:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c04a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c04c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c04e:	e841 2300 	strex	r3, r2, [r1]
 800c052:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c056:	2b00      	cmp	r3, #0
 800c058:	d1e5      	bne.n	800c026 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c05a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	3308      	adds	r3, #8
 800c060:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	e853 3f00 	ldrex	r3, [r3]
 800c068:	61fb      	str	r3, [r7, #28]
   return(result);
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c070:	663b      	str	r3, [r7, #96]	@ 0x60
 800c072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3308      	adds	r3, #8
 800c078:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c07a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c07c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c07e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c080:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c082:	e841 2300 	strex	r3, r2, [r1]
 800c086:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1e5      	bne.n	800c05a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c08e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c090:	2220      	movs	r2, #32
 800c092:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c098:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d118      	bne.n	800c0d0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c09e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	e853 3f00 	ldrex	r3, [r3]
 800c0aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	f023 0310 	bic.w	r3, r3, #16
 800c0b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c0b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c0bc:	61bb      	str	r3, [r7, #24]
 800c0be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c0:	6979      	ldr	r1, [r7, #20]
 800c0c2:	69ba      	ldr	r2, [r7, #24]
 800c0c4:	e841 2300 	strex	r3, r2, [r1]
 800c0c8:	613b      	str	r3, [r7, #16]
   return(result);
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1e6      	bne.n	800c09e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0da:	2b01      	cmp	r3, #1
 800c0dc:	d122      	bne.n	800c124 <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800c0de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	685b      	ldr	r3, [r3, #4]
 800c0ec:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800c0f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c0f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c0f6:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d204      	bcs.n	800c108 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800c0fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c100:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800c104:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c10a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c10e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c110:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c114:	b29b      	uxth	r3, r3
 800c116:	1ad3      	subs	r3, r2, r3
 800c118:	b29b      	uxth	r3, r3
 800c11a:	4619      	mov	r1, r3
 800c11c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c11e:	f7ff fa59 	bl	800b5d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c122:	e002      	b.n	800c12a <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800c124:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c126:	f013 ff97 	bl	8020058 <HAL_UART_RxCpltCallback>
}
 800c12a:	bf00      	nop
 800c12c:	3770      	adds	r7, #112	@ 0x70
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c132:	b580      	push	{r7, lr}
 800c134:	b084      	sub	sp, #16
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c13e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2201      	movs	r2, #1
 800c144:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d123      	bne.n	800c196 <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c154:	085b      	lsrs	r3, r3, #1
 800c156:	b29a      	uxth	r2, r3
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c16c:	897a      	ldrh	r2, [r7, #10]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d803      	bhi.n	800c17a <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	897a      	ldrh	r2, [r7, #10]
 800c176:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c186:	b29b      	uxth	r3, r3
 800c188:	1ad3      	subs	r3, r2, r3
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	4619      	mov	r1, r3
 800c18e:	68f8      	ldr	r0, [r7, #12]
 800c190:	f7ff fa20 	bl	800b5d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c194:	e002      	b.n	800c19c <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800c196:	68f8      	ldr	r0, [r7, #12]
 800c198:	f7ff fa08 	bl	800b5ac <HAL_UART_RxHalfCpltCallback>
}
 800c19c:	bf00      	nop
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b086      	sub	sp, #24
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c1b6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c1be:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1ca:	2b80      	cmp	r3, #128	@ 0x80
 800c1cc:	d109      	bne.n	800c1e2 <UART_DMAError+0x3e>
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	2b21      	cmp	r3, #33	@ 0x21
 800c1d2:	d106      	bne.n	800c1e2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800c1dc:	6978      	ldr	r0, [r7, #20]
 800c1de:	f7ff fe6f 	bl	800bec0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1ec:	2b40      	cmp	r3, #64	@ 0x40
 800c1ee:	d109      	bne.n	800c204 <UART_DMAError+0x60>
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2b22      	cmp	r3, #34	@ 0x22
 800c1f4:	d106      	bne.n	800c204 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800c1fe:	6978      	ldr	r0, [r7, #20]
 800c200:	f7ff fe84 	bl	800bf0c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c20a:	f043 0210 	orr.w	r2, r3, #16
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c214:	6978      	ldr	r0, [r7, #20]
 800c216:	f7ff f9d3 	bl	800b5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c21a:	bf00      	nop
 800c21c:	3718      	adds	r7, #24
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}

0800c222 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c222:	b580      	push	{r7, lr}
 800c224:	b084      	sub	sp, #16
 800c226:	af00      	add	r7, sp, #0
 800c228:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c22e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	2200      	movs	r2, #0
 800c234:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c238:	68f8      	ldr	r0, [r7, #12]
 800c23a:	f7ff f9c1 	bl	800b5c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c23e:	bf00      	nop
 800c240:	3710      	adds	r7, #16
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}

0800c246 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c246:	b480      	push	{r7}
 800c248:	b08f      	sub	sp, #60	@ 0x3c
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c252:	2b21      	cmp	r3, #33	@ 0x21
 800c254:	d14c      	bne.n	800c2f0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d132      	bne.n	800c2c8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c268:	6a3b      	ldr	r3, [r7, #32]
 800c26a:	e853 3f00 	ldrex	r3, [r3]
 800c26e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c270:	69fb      	ldr	r3, [r7, #28]
 800c272:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c276:	637b      	str	r3, [r7, #52]	@ 0x34
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	461a      	mov	r2, r3
 800c27e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c282:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c288:	e841 2300 	strex	r3, r2, [r1]
 800c28c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c290:	2b00      	cmp	r3, #0
 800c292:	d1e6      	bne.n	800c262 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	e853 3f00 	ldrex	r3, [r3]
 800c2a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c2a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2b2:	61bb      	str	r3, [r7, #24]
 800c2b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b6:	6979      	ldr	r1, [r7, #20]
 800c2b8:	69ba      	ldr	r2, [r7, #24]
 800c2ba:	e841 2300 	strex	r3, r2, [r1]
 800c2be:	613b      	str	r3, [r7, #16]
   return(result);
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d1e6      	bne.n	800c294 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c2c6:	e013      	b.n	800c2f0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2cc:	781a      	ldrb	r2, [r3, #0]
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c2d8:	1c5a      	adds	r2, r3, #1
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	3b01      	subs	r3, #1
 800c2e8:	b29a      	uxth	r2, r3
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c2f0:	bf00      	nop
 800c2f2:	373c      	adds	r7, #60	@ 0x3c
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b091      	sub	sp, #68	@ 0x44
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c308:	2b21      	cmp	r3, #33	@ 0x21
 800c30a:	d151      	bne.n	800c3b0 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c312:	b29b      	uxth	r3, r3
 800c314:	2b00      	cmp	r3, #0
 800c316:	d132      	bne.n	800c37e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c320:	e853 3f00 	ldrex	r3, [r3]
 800c324:	623b      	str	r3, [r7, #32]
   return(result);
 800c326:	6a3b      	ldr	r3, [r7, #32]
 800c328:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c32c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	461a      	mov	r2, r3
 800c334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c336:	633b      	str	r3, [r7, #48]	@ 0x30
 800c338:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c33a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c33c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c33e:	e841 2300 	strex	r3, r2, [r1]
 800c342:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1e6      	bne.n	800c318 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	e853 3f00 	ldrex	r3, [r3]
 800c356:	60fb      	str	r3, [r7, #12]
   return(result);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c35e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	461a      	mov	r2, r3
 800c366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c368:	61fb      	str	r3, [r7, #28]
 800c36a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36c:	69b9      	ldr	r1, [r7, #24]
 800c36e:	69fa      	ldr	r2, [r7, #28]
 800c370:	e841 2300 	strex	r3, r2, [r1]
 800c374:	617b      	str	r3, [r7, #20]
   return(result);
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d1e6      	bne.n	800c34a <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c37c:	e018      	b.n	800c3b0 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c382:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	461a      	mov	r2, r3
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c392:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c398:	1c9a      	adds	r2, r3, #2
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800c3a4:	b29b      	uxth	r3, r3
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	b29a      	uxth	r2, r3
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800c3b0:	bf00      	nop
 800c3b2:	3744      	adds	r7, #68	@ 0x44
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b088      	sub	sp, #32
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3d2:	68bb      	ldr	r3, [r7, #8]
 800c3d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3d8:	61fb      	str	r3, [r7, #28]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	61bb      	str	r3, [r7, #24]
 800c3e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6979      	ldr	r1, [r7, #20]
 800c3e8:	69ba      	ldr	r2, [r7, #24]
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	613b      	str	r3, [r7, #16]
   return(result);
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e6      	bne.n	800c3c4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2200      	movs	r2, #0
 800c400:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f7ff f8c8 	bl	800b598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c408:	bf00      	nop
 800c40a:	3720      	adds	r7, #32
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b084      	sub	sp, #16
 800c414:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800c416:	4b92      	ldr	r3, [pc, #584]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c418:	220a      	movs	r2, #10
 800c41a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800c41c:	4b90      	ldr	r3, [pc, #576]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c41e:	2200      	movs	r2, #0
 800c420:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800c422:	4b8f      	ldr	r3, [pc, #572]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c424:	2201      	movs	r2, #1
 800c426:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800c428:	4b8d      	ldr	r3, [pc, #564]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c42a:	2264      	movs	r2, #100	@ 0x64
 800c42c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800c42e:	4b8d      	ldr	r3, [pc, #564]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c430:	22ff      	movs	r2, #255	@ 0xff
 800c432:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800c434:	4b8b      	ldr	r3, [pc, #556]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c436:	22ff      	movs	r2, #255	@ 0xff
 800c438:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800c43a:	4b8a      	ldr	r3, [pc, #552]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c43c:	22ff      	movs	r2, #255	@ 0xff
 800c43e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800c440:	4b88      	ldr	r3, [pc, #544]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c442:	2200      	movs	r2, #0
 800c444:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800c446:	4b88      	ldr	r3, [pc, #544]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c448:	220a      	movs	r2, #10
 800c44a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800c44c:	4b86      	ldr	r3, [pc, #536]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c44e:	2200      	movs	r2, #0
 800c450:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800c452:	4b85      	ldr	r3, [pc, #532]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c454:	2201      	movs	r2, #1
 800c456:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800c458:	4b83      	ldr	r3, [pc, #524]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c45a:	2265      	movs	r2, #101	@ 0x65
 800c45c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800c45e:	2100      	movs	r1, #0
 800c460:	2000      	movs	r0, #0
 800c462:	f006 ff71 	bl	8013348 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800c466:	4b7e      	ldr	r3, [pc, #504]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	061a      	lsls	r2, r3, #24
 800c46c:	4b7c      	ldr	r3, [pc, #496]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c46e:	785b      	ldrb	r3, [r3, #1]
 800c470:	041b      	lsls	r3, r3, #16
 800c472:	431a      	orrs	r2, r3
 800c474:	4b7a      	ldr	r3, [pc, #488]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c476:	789b      	ldrb	r3, [r3, #2]
 800c478:	021b      	lsls	r3, r3, #8
 800c47a:	4313      	orrs	r3, r2
 800c47c:	4a78      	ldr	r2, [pc, #480]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c47e:	78d2      	ldrb	r2, [r2, #3]
 800c480:	4313      	orrs	r3, r2
 800c482:	061a      	lsls	r2, r3, #24
 800c484:	4b76      	ldr	r3, [pc, #472]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	0619      	lsls	r1, r3, #24
 800c48a:	4b75      	ldr	r3, [pc, #468]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c48c:	785b      	ldrb	r3, [r3, #1]
 800c48e:	041b      	lsls	r3, r3, #16
 800c490:	4319      	orrs	r1, r3
 800c492:	4b73      	ldr	r3, [pc, #460]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c494:	789b      	ldrb	r3, [r3, #2]
 800c496:	021b      	lsls	r3, r3, #8
 800c498:	430b      	orrs	r3, r1
 800c49a:	4971      	ldr	r1, [pc, #452]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c49c:	78c9      	ldrb	r1, [r1, #3]
 800c49e:	430b      	orrs	r3, r1
 800c4a0:	021b      	lsls	r3, r3, #8
 800c4a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c4a6:	431a      	orrs	r2, r3
 800c4a8:	4b6d      	ldr	r3, [pc, #436]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	0619      	lsls	r1, r3, #24
 800c4ae:	4b6c      	ldr	r3, [pc, #432]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c4b0:	785b      	ldrb	r3, [r3, #1]
 800c4b2:	041b      	lsls	r3, r3, #16
 800c4b4:	4319      	orrs	r1, r3
 800c4b6:	4b6a      	ldr	r3, [pc, #424]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c4b8:	789b      	ldrb	r3, [r3, #2]
 800c4ba:	021b      	lsls	r3, r3, #8
 800c4bc:	430b      	orrs	r3, r1
 800c4be:	4968      	ldr	r1, [pc, #416]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c4c0:	78c9      	ldrb	r1, [r1, #3]
 800c4c2:	430b      	orrs	r3, r1
 800c4c4:	0a1b      	lsrs	r3, r3, #8
 800c4c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c4ca:	431a      	orrs	r2, r3
 800c4cc:	4b64      	ldr	r3, [pc, #400]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	0619      	lsls	r1, r3, #24
 800c4d2:	4b63      	ldr	r3, [pc, #396]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c4d4:	785b      	ldrb	r3, [r3, #1]
 800c4d6:	041b      	lsls	r3, r3, #16
 800c4d8:	4319      	orrs	r1, r3
 800c4da:	4b61      	ldr	r3, [pc, #388]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c4dc:	789b      	ldrb	r3, [r3, #2]
 800c4de:	021b      	lsls	r3, r3, #8
 800c4e0:	430b      	orrs	r3, r1
 800c4e2:	495f      	ldr	r1, [pc, #380]	@ (800c660 <MX_LWIP_Init+0x250>)
 800c4e4:	78c9      	ldrb	r1, [r1, #3]
 800c4e6:	430b      	orrs	r3, r1
 800c4e8:	0e1b      	lsrs	r3, r3, #24
 800c4ea:	4313      	orrs	r3, r2
 800c4ec:	4a5f      	ldr	r2, [pc, #380]	@ (800c66c <MX_LWIP_Init+0x25c>)
 800c4ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800c4f0:	4b5c      	ldr	r3, [pc, #368]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	061a      	lsls	r2, r3, #24
 800c4f6:	4b5b      	ldr	r3, [pc, #364]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c4f8:	785b      	ldrb	r3, [r3, #1]
 800c4fa:	041b      	lsls	r3, r3, #16
 800c4fc:	431a      	orrs	r2, r3
 800c4fe:	4b59      	ldr	r3, [pc, #356]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c500:	789b      	ldrb	r3, [r3, #2]
 800c502:	021b      	lsls	r3, r3, #8
 800c504:	4313      	orrs	r3, r2
 800c506:	4a57      	ldr	r2, [pc, #348]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c508:	78d2      	ldrb	r2, [r2, #3]
 800c50a:	4313      	orrs	r3, r2
 800c50c:	061a      	lsls	r2, r3, #24
 800c50e:	4b55      	ldr	r3, [pc, #340]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	0619      	lsls	r1, r3, #24
 800c514:	4b53      	ldr	r3, [pc, #332]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c516:	785b      	ldrb	r3, [r3, #1]
 800c518:	041b      	lsls	r3, r3, #16
 800c51a:	4319      	orrs	r1, r3
 800c51c:	4b51      	ldr	r3, [pc, #324]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c51e:	789b      	ldrb	r3, [r3, #2]
 800c520:	021b      	lsls	r3, r3, #8
 800c522:	430b      	orrs	r3, r1
 800c524:	494f      	ldr	r1, [pc, #316]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c526:	78c9      	ldrb	r1, [r1, #3]
 800c528:	430b      	orrs	r3, r1
 800c52a:	021b      	lsls	r3, r3, #8
 800c52c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c530:	431a      	orrs	r2, r3
 800c532:	4b4c      	ldr	r3, [pc, #304]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	0619      	lsls	r1, r3, #24
 800c538:	4b4a      	ldr	r3, [pc, #296]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c53a:	785b      	ldrb	r3, [r3, #1]
 800c53c:	041b      	lsls	r3, r3, #16
 800c53e:	4319      	orrs	r1, r3
 800c540:	4b48      	ldr	r3, [pc, #288]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c542:	789b      	ldrb	r3, [r3, #2]
 800c544:	021b      	lsls	r3, r3, #8
 800c546:	430b      	orrs	r3, r1
 800c548:	4946      	ldr	r1, [pc, #280]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c54a:	78c9      	ldrb	r1, [r1, #3]
 800c54c:	430b      	orrs	r3, r1
 800c54e:	0a1b      	lsrs	r3, r3, #8
 800c550:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c554:	431a      	orrs	r2, r3
 800c556:	4b43      	ldr	r3, [pc, #268]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	0619      	lsls	r1, r3, #24
 800c55c:	4b41      	ldr	r3, [pc, #260]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c55e:	785b      	ldrb	r3, [r3, #1]
 800c560:	041b      	lsls	r3, r3, #16
 800c562:	4319      	orrs	r1, r3
 800c564:	4b3f      	ldr	r3, [pc, #252]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c566:	789b      	ldrb	r3, [r3, #2]
 800c568:	021b      	lsls	r3, r3, #8
 800c56a:	430b      	orrs	r3, r1
 800c56c:	493d      	ldr	r1, [pc, #244]	@ (800c664 <MX_LWIP_Init+0x254>)
 800c56e:	78c9      	ldrb	r1, [r1, #3]
 800c570:	430b      	orrs	r3, r1
 800c572:	0e1b      	lsrs	r3, r3, #24
 800c574:	4313      	orrs	r3, r2
 800c576:	4a3e      	ldr	r2, [pc, #248]	@ (800c670 <MX_LWIP_Init+0x260>)
 800c578:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800c57a:	4b3b      	ldr	r3, [pc, #236]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	061a      	lsls	r2, r3, #24
 800c580:	4b39      	ldr	r3, [pc, #228]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c582:	785b      	ldrb	r3, [r3, #1]
 800c584:	041b      	lsls	r3, r3, #16
 800c586:	431a      	orrs	r2, r3
 800c588:	4b37      	ldr	r3, [pc, #220]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c58a:	789b      	ldrb	r3, [r3, #2]
 800c58c:	021b      	lsls	r3, r3, #8
 800c58e:	4313      	orrs	r3, r2
 800c590:	4a35      	ldr	r2, [pc, #212]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c592:	78d2      	ldrb	r2, [r2, #3]
 800c594:	4313      	orrs	r3, r2
 800c596:	061a      	lsls	r2, r3, #24
 800c598:	4b33      	ldr	r3, [pc, #204]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	0619      	lsls	r1, r3, #24
 800c59e:	4b32      	ldr	r3, [pc, #200]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5a0:	785b      	ldrb	r3, [r3, #1]
 800c5a2:	041b      	lsls	r3, r3, #16
 800c5a4:	4319      	orrs	r1, r3
 800c5a6:	4b30      	ldr	r3, [pc, #192]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5a8:	789b      	ldrb	r3, [r3, #2]
 800c5aa:	021b      	lsls	r3, r3, #8
 800c5ac:	430b      	orrs	r3, r1
 800c5ae:	492e      	ldr	r1, [pc, #184]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5b0:	78c9      	ldrb	r1, [r1, #3]
 800c5b2:	430b      	orrs	r3, r1
 800c5b4:	021b      	lsls	r3, r3, #8
 800c5b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c5ba:	431a      	orrs	r2, r3
 800c5bc:	4b2a      	ldr	r3, [pc, #168]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	0619      	lsls	r1, r3, #24
 800c5c2:	4b29      	ldr	r3, [pc, #164]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5c4:	785b      	ldrb	r3, [r3, #1]
 800c5c6:	041b      	lsls	r3, r3, #16
 800c5c8:	4319      	orrs	r1, r3
 800c5ca:	4b27      	ldr	r3, [pc, #156]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5cc:	789b      	ldrb	r3, [r3, #2]
 800c5ce:	021b      	lsls	r3, r3, #8
 800c5d0:	430b      	orrs	r3, r1
 800c5d2:	4925      	ldr	r1, [pc, #148]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5d4:	78c9      	ldrb	r1, [r1, #3]
 800c5d6:	430b      	orrs	r3, r1
 800c5d8:	0a1b      	lsrs	r3, r3, #8
 800c5da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c5de:	431a      	orrs	r2, r3
 800c5e0:	4b21      	ldr	r3, [pc, #132]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5e2:	781b      	ldrb	r3, [r3, #0]
 800c5e4:	0619      	lsls	r1, r3, #24
 800c5e6:	4b20      	ldr	r3, [pc, #128]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5e8:	785b      	ldrb	r3, [r3, #1]
 800c5ea:	041b      	lsls	r3, r3, #16
 800c5ec:	4319      	orrs	r1, r3
 800c5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5f0:	789b      	ldrb	r3, [r3, #2]
 800c5f2:	021b      	lsls	r3, r3, #8
 800c5f4:	430b      	orrs	r3, r1
 800c5f6:	491c      	ldr	r1, [pc, #112]	@ (800c668 <MX_LWIP_Init+0x258>)
 800c5f8:	78c9      	ldrb	r1, [r1, #3]
 800c5fa:	430b      	orrs	r3, r1
 800c5fc:	0e1b      	lsrs	r3, r3, #24
 800c5fe:	4313      	orrs	r3, r2
 800c600:	4a1c      	ldr	r2, [pc, #112]	@ (800c674 <MX_LWIP_Init+0x264>)
 800c602:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c604:	4b1c      	ldr	r3, [pc, #112]	@ (800c678 <MX_LWIP_Init+0x268>)
 800c606:	9302      	str	r3, [sp, #8]
 800c608:	4b1c      	ldr	r3, [pc, #112]	@ (800c67c <MX_LWIP_Init+0x26c>)
 800c60a:	9301      	str	r3, [sp, #4]
 800c60c:	2300      	movs	r3, #0
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	4b18      	ldr	r3, [pc, #96]	@ (800c674 <MX_LWIP_Init+0x264>)
 800c612:	4a17      	ldr	r2, [pc, #92]	@ (800c670 <MX_LWIP_Init+0x260>)
 800c614:	4915      	ldr	r1, [pc, #84]	@ (800c66c <MX_LWIP_Init+0x25c>)
 800c616:	481a      	ldr	r0, [pc, #104]	@ (800c680 <MX_LWIP_Init+0x270>)
 800c618:	f007 fd2c 	bl	8014074 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c61c:	4818      	ldr	r0, [pc, #96]	@ (800c680 <MX_LWIP_Init+0x270>)
 800c61e:	f007 fedb 	bl	80143d8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c622:	4817      	ldr	r0, [pc, #92]	@ (800c680 <MX_LWIP_Init+0x270>)
 800c624:	f007 fee8 	bl	80143f8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c628:	4916      	ldr	r1, [pc, #88]	@ (800c684 <MX_LWIP_Init+0x274>)
 800c62a:	4815      	ldr	r0, [pc, #84]	@ (800c680 <MX_LWIP_Init+0x270>)
 800c62c:	f007 ffe6 	bl	80145fc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c630:	2224      	movs	r2, #36	@ 0x24
 800c632:	2100      	movs	r1, #0
 800c634:	4814      	ldr	r0, [pc, #80]	@ (800c688 <MX_LWIP_Init+0x278>)
 800c636:	f013 ff89 	bl	802054c <memset>
  attributes.name = "EthLink";
 800c63a:	4b13      	ldr	r3, [pc, #76]	@ (800c688 <MX_LWIP_Init+0x278>)
 800c63c:	4a13      	ldr	r2, [pc, #76]	@ (800c68c <MX_LWIP_Init+0x27c>)
 800c63e:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c640:	4b11      	ldr	r3, [pc, #68]	@ (800c688 <MX_LWIP_Init+0x278>)
 800c642:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c646:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800c648:	4b0f      	ldr	r3, [pc, #60]	@ (800c688 <MX_LWIP_Init+0x278>)
 800c64a:	2210      	movs	r2, #16
 800c64c:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800c64e:	4a0e      	ldr	r2, [pc, #56]	@ (800c688 <MX_LWIP_Init+0x278>)
 800c650:	490b      	ldr	r1, [pc, #44]	@ (800c680 <MX_LWIP_Init+0x270>)
 800c652:	480f      	ldr	r0, [pc, #60]	@ (800c690 <MX_LWIP_Init+0x280>)
 800c654:	f000 fdce 	bl	800d1f4 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c658:	bf00      	nop
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	20000b48 	.word	0x20000b48
 800c664:	20000b4c 	.word	0x20000b4c
 800c668:	20000b50 	.word	0x20000b50
 800c66c:	20000b3c 	.word	0x20000b3c
 800c670:	20000b40 	.word	0x20000b40
 800c674:	20000b44 	.word	0x20000b44
 800c678:	08013259 	.word	0x08013259
 800c67c:	0800cbd5 	.word	0x0800cbd5
 800c680:	20000b08 	.word	0x20000b08
 800c684:	0800c695 	.word	0x0800c695
 800c688:	20000b54 	.word	0x20000b54
 800c68c:	08021310 	.word	0x08021310
 800c690:	0800cead 	.word	0x0800cead

0800c694 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c694:	b480      	push	{r7}
 800c696:	b083      	sub	sp, #12
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c69c:	bf00      	nop
 800c69e:	370c      	adds	r7, #12
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a6:	4770      	bx	lr

0800c6a8 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b087      	sub	sp, #28
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c6ba:	2320      	movs	r3, #32
 800c6bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c6be:	f3bf 8f4f 	dsb	sy
}
 800c6c2:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c6c4:	e00b      	b.n	800c6de <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c6c6:	4a0d      	ldr	r2, [pc, #52]	@ (800c6fc <SCB_InvalidateDCache_by_Addr+0x54>)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c6de:	697b      	ldr	r3, [r7, #20]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	dcf0      	bgt.n	800c6c6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c6e4:	f3bf 8f4f 	dsb	sy
}
 800c6e8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c6ea:	f3bf 8f6f 	isb	sy
}
 800c6ee:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c6f0:	bf00      	nop
 800c6f2:	371c      	adds	r7, #28
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	e000ed00 	.word	0xe000ed00

0800c700 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c708:	4b04      	ldr	r3, [pc, #16]	@ (800c71c <HAL_ETH_RxCpltCallback+0x1c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4618      	mov	r0, r3
 800c70e:	f001 f897 	bl	800d840 <osSemaphoreRelease>
}
 800c712:	bf00      	nop
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	2000cf90 	.word	0x2000cf90

0800c720 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b082      	sub	sp, #8
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c728:	4b04      	ldr	r3, [pc, #16]	@ (800c73c <HAL_ETH_TxCpltCallback+0x1c>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f001 f887 	bl	800d840 <osSemaphoreRelease>
}
 800c732:	bf00      	nop
 800c734:	3708      	adds	r7, #8
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	bf00      	nop
 800c73c:	2000cf94 	.word	0x2000cf94

0800c740 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b082      	sub	sp, #8
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f7f8 f874 	bl	8004836 <HAL_ETH_GetDMAError>
 800c74e:	4603      	mov	r3, r0
 800c750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c754:	2b80      	cmp	r3, #128	@ 0x80
 800c756:	d104      	bne.n	800c762 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c758:	4b04      	ldr	r3, [pc, #16]	@ (800c76c <HAL_ETH_ErrorCallback+0x2c>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4618      	mov	r0, r3
 800c75e:	f001 f86f 	bl	800d840 <osSemaphoreRelease>
  }
}
 800c762:	bf00      	nop
 800c764:	3708      	adds	r7, #8
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	2000cf90 	.word	0x2000cf90

0800c770 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b0aa      	sub	sp, #168	@ 0xa8
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c784:	2300      	movs	r3, #0
 800c786:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c78a:	f107 0310 	add.w	r3, r7, #16
 800c78e:	2264      	movs	r2, #100	@ 0x64
 800c790:	2100      	movs	r1, #0
 800c792:	4618      	mov	r0, r3
 800c794:	f013 feda 	bl	802054c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c798:	4b89      	ldr	r3, [pc, #548]	@ (800c9c0 <low_level_init+0x250>)
 800c79a:	4a8a      	ldr	r2, [pc, #552]	@ (800c9c4 <low_level_init+0x254>)
 800c79c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c7a2:	2380      	movs	r3, #128	@ 0x80
 800c7a4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c7a6:	23e1      	movs	r3, #225	@ 0xe1
 800c7a8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c7b6:	4a82      	ldr	r2, [pc, #520]	@ (800c9c0 <low_level_init+0x250>)
 800c7b8:	f107 0308 	add.w	r3, r7, #8
 800c7bc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c7be:	4b80      	ldr	r3, [pc, #512]	@ (800c9c0 <low_level_init+0x250>)
 800c7c0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c7c4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c7c6:	4b7e      	ldr	r3, [pc, #504]	@ (800c9c0 <low_level_init+0x250>)
 800c7c8:	4a7f      	ldr	r2, [pc, #508]	@ (800c9c8 <low_level_init+0x258>)
 800c7ca:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c7cc:	4b7c      	ldr	r3, [pc, #496]	@ (800c9c0 <low_level_init+0x250>)
 800c7ce:	4a7f      	ldr	r2, [pc, #508]	@ (800c9cc <low_level_init+0x25c>)
 800c7d0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c7d2:	4b7b      	ldr	r3, [pc, #492]	@ (800c9c0 <low_level_init+0x250>)
 800c7d4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c7d8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c7da:	4879      	ldr	r0, [pc, #484]	@ (800c9c0 <low_level_init+0x250>)
 800c7dc:	f7f7 f9e2 	bl	8003ba4 <HAL_ETH_Init>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c7e6:	2238      	movs	r2, #56	@ 0x38
 800c7e8:	2100      	movs	r1, #0
 800c7ea:	4879      	ldr	r0, [pc, #484]	@ (800c9d0 <low_level_init+0x260>)
 800c7ec:	f013 feae 	bl	802054c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c7f0:	4b77      	ldr	r3, [pc, #476]	@ (800c9d0 <low_level_init+0x260>)
 800c7f2:	2221      	movs	r2, #33	@ 0x21
 800c7f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c7f6:	4b76      	ldr	r3, [pc, #472]	@ (800c9d0 <low_level_init+0x260>)
 800c7f8:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c7fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c7fe:	4b74      	ldr	r3, [pc, #464]	@ (800c9d0 <low_level_init+0x260>)
 800c800:	2200      	movs	r2, #0
 800c802:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c804:	4873      	ldr	r0, [pc, #460]	@ (800c9d4 <low_level_init+0x264>)
 800c806:	f007 fabd 	bl	8013d84 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2206      	movs	r2, #6
 800c80e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c812:	4b6b      	ldr	r3, [pc, #428]	@ (800c9c0 <low_level_init+0x250>)
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	781a      	ldrb	r2, [r3, #0]
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c81e:	4b68      	ldr	r3, [pc, #416]	@ (800c9c0 <low_level_init+0x250>)
 800c820:	685b      	ldr	r3, [r3, #4]
 800c822:	785a      	ldrb	r2, [r3, #1]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c82a:	4b65      	ldr	r3, [pc, #404]	@ (800c9c0 <low_level_init+0x250>)
 800c82c:	685b      	ldr	r3, [r3, #4]
 800c82e:	789a      	ldrb	r2, [r3, #2]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c836:	4b62      	ldr	r3, [pc, #392]	@ (800c9c0 <low_level_init+0x250>)
 800c838:	685b      	ldr	r3, [r3, #4]
 800c83a:	78da      	ldrb	r2, [r3, #3]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c842:	4b5f      	ldr	r3, [pc, #380]	@ (800c9c0 <low_level_init+0x250>)
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	791a      	ldrb	r2, [r3, #4]
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c84e:	4b5c      	ldr	r3, [pc, #368]	@ (800c9c0 <low_level_init+0x250>)
 800c850:	685b      	ldr	r3, [r3, #4]
 800c852:	795a      	ldrb	r2, [r3, #5]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c860:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c868:	f043 030a 	orr.w	r3, r3, #10
 800c86c:	b2da      	uxtb	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c874:	2200      	movs	r2, #0
 800c876:	2100      	movs	r1, #0
 800c878:	2001      	movs	r0, #1
 800c87a:	f000 fedf 	bl	800d63c <osSemaphoreNew>
 800c87e:	4603      	mov	r3, r0
 800c880:	4a55      	ldr	r2, [pc, #340]	@ (800c9d8 <low_level_init+0x268>)
 800c882:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c884:	2200      	movs	r2, #0
 800c886:	2100      	movs	r1, #0
 800c888:	2001      	movs	r0, #1
 800c88a:	f000 fed7 	bl	800d63c <osSemaphoreNew>
 800c88e:	4603      	mov	r3, r0
 800c890:	4a52      	ldr	r2, [pc, #328]	@ (800c9dc <low_level_init+0x26c>)
 800c892:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c894:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c898:	2224      	movs	r2, #36	@ 0x24
 800c89a:	2100      	movs	r1, #0
 800c89c:	4618      	mov	r0, r3
 800c89e:	f013 fe55 	bl	802054c <memset>
  attributes.name = "EthIf";
 800c8a2:	4b4f      	ldr	r3, [pc, #316]	@ (800c9e0 <low_level_init+0x270>)
 800c8a4:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c8a6:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c8aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c8ae:	2330      	movs	r3, #48	@ 0x30
 800c8b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c8b4:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c8b8:	461a      	mov	r2, r3
 800c8ba:	6879      	ldr	r1, [r7, #4]
 800c8bc:	4849      	ldr	r0, [pc, #292]	@ (800c9e4 <low_level_init+0x274>)
 800c8be:	f000 fc99 	bl	800d1f4 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c8c2:	4949      	ldr	r1, [pc, #292]	@ (800c9e8 <low_level_init+0x278>)
 800c8c4:	4849      	ldr	r0, [pc, #292]	@ (800c9ec <low_level_init+0x27c>)
 800c8c6:	f7f5 fc2c 	bl	8002122 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c8ca:	4848      	ldr	r0, [pc, #288]	@ (800c9ec <low_level_init+0x27c>)
 800c8cc:	f7f5 fc5b 	bl	8002186 <LAN8742_Init>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d006      	beq.n	800c8e4 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f007 fe60 	bl	801459c <netif_set_link_down>
    netif_set_down(netif);
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f007 fdf7 	bl	80144d0 <netif_set_down>
 800c8e2:	e06a      	b.n	800c9ba <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c8e4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d164      	bne.n	800c9b6 <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c8ec:	483f      	ldr	r0, [pc, #252]	@ (800c9ec <low_level_init+0x27c>)
 800c8ee:	f7f5 fc97 	bl	8002220 <LAN8742_GetLinkState>
 800c8f2:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c8f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c8fa:	2b01      	cmp	r3, #1
 800c8fc:	dc06      	bgt.n	800c90c <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f007 fe4c 	bl	801459c <netif_set_link_down>
      netif_set_down(netif);
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f007 fde3 	bl	80144d0 <netif_set_down>
 800c90a:	e056      	b.n	800c9ba <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c90c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c910:	3b02      	subs	r3, #2
 800c912:	2b03      	cmp	r3, #3
 800c914:	d82a      	bhi.n	800c96c <low_level_init+0x1fc>
 800c916:	a201      	add	r2, pc, #4	@ (adr r2, 800c91c <low_level_init+0x1ac>)
 800c918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91c:	0800c92d 	.word	0x0800c92d
 800c920:	0800c93f 	.word	0x0800c93f
 800c924:	0800c94f 	.word	0x0800c94f
 800c928:	0800c95f 	.word	0x0800c95f
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c92c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c930:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c934:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c938:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c93c:	e01f      	b.n	800c97e <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c93e:	2300      	movs	r3, #0
 800c940:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c944:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c948:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c94c:	e017      	b.n	800c97e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c94e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c952:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c956:	2300      	movs	r3, #0
 800c958:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c95c:	e00f      	b.n	800c97e <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c95e:	2300      	movs	r3, #0
 800c960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c964:	2300      	movs	r3, #0
 800c966:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c96a:	e008      	b.n	800c97e <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c96c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c970:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c974:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c978:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c97c:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c97e:	f107 0310 	add.w	r3, r7, #16
 800c982:	4619      	mov	r1, r3
 800c984:	480e      	ldr	r0, [pc, #56]	@ (800c9c0 <low_level_init+0x250>)
 800c986:	f7f7 fdf5 	bl	8004574 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c98a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c98e:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c990:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c996:	f107 0310 	add.w	r3, r7, #16
 800c99a:	4619      	mov	r1, r3
 800c99c:	4808      	ldr	r0, [pc, #32]	@ (800c9c0 <low_level_init+0x250>)
 800c99e:	f7f7 fee0 	bl	8004762 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c9a2:	4807      	ldr	r0, [pc, #28]	@ (800c9c0 <low_level_init+0x250>)
 800c9a4:	f7f7 f998 	bl	8003cd8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f007 fd25 	bl	80143f8 <netif_set_up>
    netif_set_link_up(netif);
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f007 fdc0 	bl	8014534 <netif_set_link_up>
 800c9b4:	e001      	b.n	800c9ba <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c9b6:	f7f4 fc1f 	bl	80011f8 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c9ba:	37a8      	adds	r7, #168	@ 0xa8
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	2000cf98 	.word	0x2000cf98
 800c9c4:	40028000 	.word	0x40028000
 800c9c8:	2000012c 	.word	0x2000012c
 800c9cc:	2000008c 	.word	0x2000008c
 800c9d0:	2000d048 	.word	0x2000d048
 800c9d4:	08024d6c 	.word	0x08024d6c
 800c9d8:	2000cf90 	.word	0x2000cf90
 800c9dc:	2000cf94 	.word	0x2000cf94
 800c9e0:	08021318 	.word	0x08021318
 800c9e4:	0800cb81 	.word	0x0800cb81
 800c9e8:	2000000c 	.word	0x2000000c
 800c9ec:	2000d080 	.word	0x2000d080

0800c9f0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b092      	sub	sp, #72	@ 0x48
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800ca02:	2300      	movs	r3, #0
 800ca04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ca08:	f107 030c 	add.w	r3, r7, #12
 800ca0c:	2230      	movs	r2, #48	@ 0x30
 800ca0e:	2100      	movs	r1, #0
 800ca10:	4618      	mov	r0, r3
 800ca12:	f013 fd9b 	bl	802054c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ca16:	f107 030c 	add.w	r3, r7, #12
 800ca1a:	2230      	movs	r2, #48	@ 0x30
 800ca1c:	2100      	movs	r1, #0
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f013 fd94 	bl	802054c <memset>

  for(q = p; q != NULL; q = q->next)
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca28:	e045      	b.n	800cab6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ca2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca2c:	2b03      	cmp	r3, #3
 800ca2e:	d902      	bls.n	800ca36 <low_level_output+0x46>
      return ERR_IF;
 800ca30:	f06f 030b 	mvn.w	r3, #11
 800ca34:	e07f      	b.n	800cb36 <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800ca36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca38:	6859      	ldr	r1, [r3, #4]
 800ca3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca3c:	4613      	mov	r3, r2
 800ca3e:	005b      	lsls	r3, r3, #1
 800ca40:	4413      	add	r3, r2
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	3348      	adds	r3, #72	@ 0x48
 800ca46:	443b      	add	r3, r7
 800ca48:	3b3c      	subs	r3, #60	@ 0x3c
 800ca4a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ca4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca4e:	895b      	ldrh	r3, [r3, #10]
 800ca50:	4619      	mov	r1, r3
 800ca52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca54:	4613      	mov	r3, r2
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	3348      	adds	r3, #72	@ 0x48
 800ca5e:	443b      	add	r3, r7
 800ca60:	3b38      	subs	r3, #56	@ 0x38
 800ca62:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ca64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d011      	beq.n	800ca8e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ca6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca6c:	1e5a      	subs	r2, r3, #1
 800ca6e:	f107 000c 	add.w	r0, r7, #12
 800ca72:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ca74:	460b      	mov	r3, r1
 800ca76:	005b      	lsls	r3, r3, #1
 800ca78:	440b      	add	r3, r1
 800ca7a:	009b      	lsls	r3, r3, #2
 800ca7c:	18c1      	adds	r1, r0, r3
 800ca7e:	4613      	mov	r3, r2
 800ca80:	005b      	lsls	r3, r3, #1
 800ca82:	4413      	add	r3, r2
 800ca84:	009b      	lsls	r3, r3, #2
 800ca86:	3348      	adds	r3, #72	@ 0x48
 800ca88:	443b      	add	r3, r7
 800ca8a:	3b34      	subs	r3, #52	@ 0x34
 800ca8c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800ca8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d109      	bne.n	800caaa <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800ca96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca98:	4613      	mov	r3, r2
 800ca9a:	005b      	lsls	r3, r3, #1
 800ca9c:	4413      	add	r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	3348      	adds	r3, #72	@ 0x48
 800caa2:	443b      	add	r3, r7
 800caa4:	3b34      	subs	r3, #52	@ 0x34
 800caa6:	2200      	movs	r2, #0
 800caa8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800caaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800caac:	3301      	adds	r3, #1
 800caae:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800cab0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	643b      	str	r3, [r7, #64]	@ 0x40
 800cab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1b6      	bne.n	800ca2a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	891b      	ldrh	r3, [r3, #8]
 800cac0:	461a      	mov	r2, r3
 800cac2:	4b1f      	ldr	r3, [pc, #124]	@ (800cb40 <low_level_output+0x150>)
 800cac4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800cac6:	4a1e      	ldr	r2, [pc, #120]	@ (800cb40 <low_level_output+0x150>)
 800cac8:	f107 030c 	add.w	r3, r7, #12
 800cacc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800cace:	4a1c      	ldr	r2, [pc, #112]	@ (800cb40 <low_level_output+0x150>)
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800cad4:	6838      	ldr	r0, [r7, #0]
 800cad6:	f008 f9e5 	bl	8014ea4 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800cada:	4919      	ldr	r1, [pc, #100]	@ (800cb40 <low_level_output+0x150>)
 800cadc:	4819      	ldr	r0, [pc, #100]	@ (800cb44 <low_level_output+0x154>)
 800cade:	f7f7 f9eb 	bl	8003eb8 <HAL_ETH_Transmit_IT>
 800cae2:	4603      	mov	r3, r0
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d103      	bne.n	800caf0 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800cae8:	2300      	movs	r3, #0
 800caea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800caee:	e01b      	b.n	800cb28 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800caf0:	4814      	ldr	r0, [pc, #80]	@ (800cb44 <low_level_output+0x154>)
 800caf2:	f7f7 fe93 	bl	800481c <HAL_ETH_GetError>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f003 0302 	and.w	r3, r3, #2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00d      	beq.n	800cb1c <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800cb00:	4b11      	ldr	r3, [pc, #68]	@ (800cb48 <low_level_output+0x158>)
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f000 fe33 	bl	800d774 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800cb0e:	480d      	ldr	r0, [pc, #52]	@ (800cb44 <low_level_output+0x154>)
 800cb10:	f7f7 fb72 	bl	80041f8 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800cb14:	23fe      	movs	r3, #254	@ 0xfe
 800cb16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800cb1a:	e005      	b.n	800cb28 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800cb1c:	6838      	ldr	r0, [r7, #0]
 800cb1e:	f008 f91b 	bl	8014d58 <pbuf_free>
        errval =  ERR_IF;
 800cb22:	23f4      	movs	r3, #244	@ 0xf4
 800cb24:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800cb28:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800cb2c:	f113 0f02 	cmn.w	r3, #2
 800cb30:	d0d3      	beq.n	800cada <low_level_output+0xea>

  return errval;
 800cb32:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3748      	adds	r7, #72	@ 0x48
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	2000d048 	.word	0x2000d048
 800cb44:	2000cf98 	.word	0x2000cf98
 800cb48:	2000cf94 	.word	0x2000cf94

0800cb4c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cb54:	2300      	movs	r3, #0
 800cb56:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800cb58:	4b07      	ldr	r3, [pc, #28]	@ (800cb78 <low_level_input+0x2c>)
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d105      	bne.n	800cb6c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800cb60:	f107 030c 	add.w	r3, r7, #12
 800cb64:	4619      	mov	r1, r3
 800cb66:	4805      	ldr	r0, [pc, #20]	@ (800cb7c <low_level_input+0x30>)
 800cb68:	f7f7 fa02 	bl	8003f70 <HAL_ETH_ReadData>
  }

  return p;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3710      	adds	r7, #16
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	2000cf8c 	.word	0x2000cf8c
 800cb7c:	2000cf98 	.word	0x2000cf98

0800cb80 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b084      	sub	sp, #16
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cb90:	4b0f      	ldr	r3, [pc, #60]	@ (800cbd0 <ethernetif_input+0x50>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800cb98:	4618      	mov	r0, r3
 800cb9a:	f000 fdeb 	bl	800d774 <osSemaphoreAcquire>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d1f5      	bne.n	800cb90 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800cba4:	68b8      	ldr	r0, [r7, #8]
 800cba6:	f7ff ffd1 	bl	800cb4c <low_level_input>
 800cbaa:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d00a      	beq.n	800cbc8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	691b      	ldr	r3, [r3, #16]
 800cbb6:	68b9      	ldr	r1, [r7, #8]
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	4798      	blx	r3
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d002      	beq.n	800cbc8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f008 f8c8 	bl	8014d58 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1ea      	bne.n	800cba4 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800cbce:	e7df      	b.n	800cb90 <ethernetif_input+0x10>
 800cbd0:	2000cf90 	.word	0x2000cf90

0800cbd4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d106      	bne.n	800cbf0 <ethernetif_init+0x1c>
 800cbe2:	4b0e      	ldr	r3, [pc, #56]	@ (800cc1c <ethernetif_init+0x48>)
 800cbe4:	f240 220d 	movw	r2, #525	@ 0x20d
 800cbe8:	490d      	ldr	r1, [pc, #52]	@ (800cc20 <ethernetif_init+0x4c>)
 800cbea:	480e      	ldr	r0, [pc, #56]	@ (800cc24 <ethernetif_init+0x50>)
 800cbec:	f013 fb56 	bl	802029c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2273      	movs	r2, #115	@ 0x73
 800cbf4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2274      	movs	r2, #116	@ 0x74
 800cbfc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4a09      	ldr	r2, [pc, #36]	@ (800cc28 <ethernetif_init+0x54>)
 800cc04:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	4a08      	ldr	r2, [pc, #32]	@ (800cc2c <ethernetif_init+0x58>)
 800cc0a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f7ff fdaf 	bl	800c770 <low_level_init>

  return ERR_OK;
 800cc12:	2300      	movs	r3, #0
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	08021320 	.word	0x08021320
 800cc20:	0802133c 	.word	0x0802133c
 800cc24:	0802134c 	.word	0x0802134c
 800cc28:	0801ca19 	.word	0x0801ca19
 800cc2c:	0800c9f1 	.word	0x0800c9f1

0800cc30 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b084      	sub	sp, #16
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800cc3c:	68f9      	ldr	r1, [r7, #12]
 800cc3e:	4809      	ldr	r0, [pc, #36]	@ (800cc64 <pbuf_free_custom+0x34>)
 800cc40:	f007 f9c2 	bl	8013fc8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800cc44:	4b08      	ldr	r3, [pc, #32]	@ (800cc68 <pbuf_free_custom+0x38>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b01      	cmp	r3, #1
 800cc4a:	d107      	bne.n	800cc5c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800cc4c:	4b06      	ldr	r3, [pc, #24]	@ (800cc68 <pbuf_free_custom+0x38>)
 800cc4e:	2200      	movs	r2, #0
 800cc50:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800cc52:	4b06      	ldr	r3, [pc, #24]	@ (800cc6c <pbuf_free_custom+0x3c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 fdf2 	bl	800d840 <osSemaphoreRelease>
  }
}
 800cc5c:	bf00      	nop
 800cc5e:	3710      	adds	r7, #16
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	08024d6c 	.word	0x08024d6c
 800cc68:	2000cf8c 	.word	0x2000cf8c
 800cc6c:	2000cf90 	.word	0x2000cf90

0800cc70 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cc74:	f7f5 fb7c 	bl	8002370 <HAL_GetTick>
 800cc78:	4603      	mov	r3, r0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	bd80      	pop	{r7, pc}
	...

0800cc80 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b08e      	sub	sp, #56	@ 0x38
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	605a      	str	r2, [r3, #4]
 800cc92:	609a      	str	r2, [r3, #8]
 800cc94:	60da      	str	r2, [r3, #12]
 800cc96:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a56      	ldr	r2, [pc, #344]	@ (800cdf8 <HAL_ETH_MspInit+0x178>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	f040 80a6 	bne.w	800cdf0 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800cca4:	4b55      	ldr	r3, [pc, #340]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cca8:	4a54      	ldr	r2, [pc, #336]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccaa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800ccae:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccb0:	4b52      	ldr	r3, [pc, #328]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccb8:	623b      	str	r3, [r7, #32]
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	4b4f      	ldr	r3, [pc, #316]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccc0:	4a4e      	ldr	r2, [pc, #312]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccc2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ccc6:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccc8:	4b4c      	ldr	r3, [pc, #304]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cccc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ccd0:	61fb      	str	r3, [r7, #28]
 800ccd2:	69fb      	ldr	r3, [r7, #28]
 800ccd4:	4b49      	ldr	r3, [pc, #292]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccd8:	4a48      	ldr	r2, [pc, #288]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccda:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ccde:	6313      	str	r3, [r2, #48]	@ 0x30
 800cce0:	4b46      	ldr	r3, [pc, #280]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cce8:	61bb      	str	r3, [r7, #24]
 800ccea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ccec:	4b43      	ldr	r3, [pc, #268]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccf0:	4a42      	ldr	r2, [pc, #264]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccf2:	f043 0304 	orr.w	r3, r3, #4
 800ccf6:	6313      	str	r3, [r2, #48]	@ 0x30
 800ccf8:	4b40      	ldr	r3, [pc, #256]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800ccfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccfc:	f003 0304 	and.w	r3, r3, #4
 800cd00:	617b      	str	r3, [r7, #20]
 800cd02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd04:	4b3d      	ldr	r3, [pc, #244]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd08:	4a3c      	ldr	r2, [pc, #240]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd0a:	f043 0301 	orr.w	r3, r3, #1
 800cd0e:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd10:	4b3a      	ldr	r3, [pc, #232]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd14:	f003 0301 	and.w	r3, r3, #1
 800cd18:	613b      	str	r3, [r7, #16]
 800cd1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd1c:	4b37      	ldr	r3, [pc, #220]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd20:	4a36      	ldr	r2, [pc, #216]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd22:	f043 0302 	orr.w	r3, r3, #2
 800cd26:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd28:	4b34      	ldr	r3, [pc, #208]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd2c:	f003 0302 	and.w	r3, r3, #2
 800cd30:	60fb      	str	r3, [r7, #12]
 800cd32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800cd34:	4b31      	ldr	r3, [pc, #196]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd38:	4a30      	ldr	r2, [pc, #192]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd3e:	6313      	str	r3, [r2, #48]	@ 0x30
 800cd40:	4b2e      	ldr	r3, [pc, #184]	@ (800cdfc <HAL_ETH_MspInit+0x17c>)
 800cd42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd48:	60bb      	str	r3, [r7, #8]
 800cd4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800cd4c:	2332      	movs	r3, #50	@ 0x32
 800cd4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd50:	2302      	movs	r3, #2
 800cd52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd54:	2300      	movs	r3, #0
 800cd56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd5c:	230b      	movs	r3, #11
 800cd5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd64:	4619      	mov	r1, r3
 800cd66:	4826      	ldr	r0, [pc, #152]	@ (800ce00 <HAL_ETH_MspInit+0x180>)
 800cd68:	f7f8 f992 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800cd6c:	2386      	movs	r3, #134	@ 0x86
 800cd6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd70:	2302      	movs	r3, #2
 800cd72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd74:	2300      	movs	r3, #0
 800cd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd78:	2303      	movs	r3, #3
 800cd7a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd7c:	230b      	movs	r3, #11
 800cd7e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd84:	4619      	mov	r1, r3
 800cd86:	481f      	ldr	r0, [pc, #124]	@ (800ce04 <HAL_ETH_MspInit+0x184>)
 800cd88:	f7f8 f982 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800cd8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd92:	2302      	movs	r3, #2
 800cd94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd9a:	2303      	movs	r3, #3
 800cd9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cd9e:	230b      	movs	r3, #11
 800cda0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cda2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cda6:	4619      	mov	r1, r3
 800cda8:	4817      	ldr	r0, [pc, #92]	@ (800ce08 <HAL_ETH_MspInit+0x188>)
 800cdaa:	f7f8 f971 	bl	8005090 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800cdae:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800cdb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cdb8:	2300      	movs	r3, #0
 800cdba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cdbc:	2303      	movs	r3, #3
 800cdbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800cdc0:	230b      	movs	r3, #11
 800cdc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800cdc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cdc8:	4619      	mov	r1, r3
 800cdca:	4810      	ldr	r0, [pc, #64]	@ (800ce0c <HAL_ETH_MspInit+0x18c>)
 800cdcc:	f7f8 f960 	bl	8005090 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	2105      	movs	r1, #5
 800cdd4:	203d      	movs	r0, #61	@ 0x3d
 800cdd6:	f7f6 f839 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800cdda:	203d      	movs	r0, #61	@ 0x3d
 800cddc:	f7f6 f852 	bl	8002e84 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800cde0:	2200      	movs	r2, #0
 800cde2:	2105      	movs	r1, #5
 800cde4:	203e      	movs	r0, #62	@ 0x3e
 800cde6:	f7f6 f831 	bl	8002e4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800cdea:	203e      	movs	r0, #62	@ 0x3e
 800cdec:	f7f6 f84a 	bl	8002e84 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800cdf0:	bf00      	nop
 800cdf2:	3738      	adds	r7, #56	@ 0x38
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	40028000 	.word	0x40028000
 800cdfc:	40023800 	.word	0x40023800
 800ce00:	40020800 	.word	0x40020800
 800ce04:	40020000 	.word	0x40020000
 800ce08:	40020400 	.word	0x40020400
 800ce0c:	40021800 	.word	0x40021800

0800ce10 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ce14:	4802      	ldr	r0, [pc, #8]	@ (800ce20 <ETH_PHY_IO_Init+0x10>)
 800ce16:	f7f7 fcbf 	bl	8004798 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2000cf98 	.word	0x2000cf98

0800ce24 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ce24:	b480      	push	{r7}
 800ce26:	af00      	add	r7, sp, #0
  return 0;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce32:	4770      	bx	lr

0800ce34 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	60f8      	str	r0, [r7, #12]
 800ce3c:	60b9      	str	r1, [r7, #8]
 800ce3e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	68f9      	ldr	r1, [r7, #12]
 800ce46:	4807      	ldr	r0, [pc, #28]	@ (800ce64 <ETH_PHY_IO_ReadReg+0x30>)
 800ce48:	f7f7 fb00 	bl	800444c <HAL_ETH_ReadPHYRegister>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d002      	beq.n	800ce58 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ce52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce56:	e000      	b.n	800ce5a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	2000cf98 	.word	0x2000cf98

0800ce68 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	68f9      	ldr	r1, [r7, #12]
 800ce7a:	4807      	ldr	r0, [pc, #28]	@ (800ce98 <ETH_PHY_IO_WriteReg+0x30>)
 800ce7c:	f7f7 fb31 	bl	80044e2 <HAL_ETH_WritePHYRegister>
 800ce80:	4603      	mov	r3, r0
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ce86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce8a:	e000      	b.n	800ce8e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ce8c:	2300      	movs	r3, #0
}
 800ce8e:	4618      	mov	r0, r3
 800ce90:	3710      	adds	r7, #16
 800ce92:	46bd      	mov	sp, r7
 800ce94:	bd80      	pop	{r7, pc}
 800ce96:	bf00      	nop
 800ce98:	2000cf98 	.word	0x2000cf98

0800ce9c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800cea0:	f7f5 fa66 	bl	8002370 <HAL_GetTick>
 800cea4:	4603      	mov	r3, r0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	bd80      	pop	{r7, pc}
	...

0800ceac <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b0a0      	sub	sp, #128	@ 0x80
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800ceb4:	f107 0308 	add.w	r3, r7, #8
 800ceb8:	2264      	movs	r2, #100	@ 0x64
 800ceba:	2100      	movs	r1, #0
 800cebc:	4618      	mov	r0, r3
 800cebe:	f013 fb45 	bl	802054c <memset>
  int32_t PHYLinkState = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800cec6:	2300      	movs	r3, #0
 800cec8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ceca:	2300      	movs	r3, #0
 800cecc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cece:	2300      	movs	r3, #0
 800ced0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ced6:	483a      	ldr	r0, [pc, #232]	@ (800cfc0 <ethernet_link_thread+0x114>)
 800ced8:	f7f5 f9a2 	bl	8002220 <LAN8742_GetLinkState>
 800cedc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800cede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cee0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cee4:	089b      	lsrs	r3, r3, #2
 800cee6:	f003 0301 	and.w	r3, r3, #1
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d00c      	beq.n	800cf0a <ethernet_link_thread+0x5e>
 800cef0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	dc09      	bgt.n	800cf0a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800cef6:	4833      	ldr	r0, [pc, #204]	@ (800cfc4 <ethernet_link_thread+0x118>)
 800cef8:	f7f6 ff5e 	bl	8003db8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800cefc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cefe:	f007 fae7 	bl	80144d0 <netif_set_down>
    netif_set_link_down(netif);
 800cf02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cf04:	f007 fb4a 	bl	801459c <netif_set_link_down>
 800cf08:	e055      	b.n	800cfb6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800cf0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cf0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800cf10:	f003 0304 	and.w	r3, r3, #4
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d14e      	bne.n	800cfb6 <ethernet_link_thread+0x10a>
 800cf18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	dd4b      	ble.n	800cfb6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800cf1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf20:	3b02      	subs	r3, #2
 800cf22:	2b03      	cmp	r3, #3
 800cf24:	d82a      	bhi.n	800cf7c <ethernet_link_thread+0xd0>
 800cf26:	a201      	add	r2, pc, #4	@ (adr r2, 800cf2c <ethernet_link_thread+0x80>)
 800cf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf2c:	0800cf3d 	.word	0x0800cf3d
 800cf30:	0800cf4f 	.word	0x0800cf4f
 800cf34:	0800cf5f 	.word	0x0800cf5f
 800cf38:	0800cf6f 	.word	0x0800cf6f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800cf3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf40:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800cf42:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cf46:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf4c:	e017      	b.n	800cf7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800cf52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cf56:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf58:	2301      	movs	r3, #1
 800cf5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf5c:	e00f      	b.n	800cf7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800cf5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800cf62:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800cf64:	2300      	movs	r3, #0
 800cf66:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf6c:	e007      	b.n	800cf7e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800cf72:	2300      	movs	r3, #0
 800cf74:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800cf76:	2301      	movs	r3, #1
 800cf78:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800cf7a:	e000      	b.n	800cf7e <ethernet_link_thread+0xd2>
    default:
      break;
 800cf7c:	bf00      	nop
    }

    if(linkchanged)
 800cf7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d018      	beq.n	800cfb6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800cf84:	f107 0308 	add.w	r3, r7, #8
 800cf88:	4619      	mov	r1, r3
 800cf8a:	480e      	ldr	r0, [pc, #56]	@ (800cfc4 <ethernet_link_thread+0x118>)
 800cf8c:	f7f7 faf2 	bl	8004574 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800cf90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf92:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800cf94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf96:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800cf98:	f107 0308 	add.w	r3, r7, #8
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	4809      	ldr	r0, [pc, #36]	@ (800cfc4 <ethernet_link_thread+0x118>)
 800cfa0:	f7f7 fbdf 	bl	8004762 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800cfa4:	4807      	ldr	r0, [pc, #28]	@ (800cfc4 <ethernet_link_thread+0x118>)
 800cfa6:	f7f6 fe97 	bl	8003cd8 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800cfaa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cfac:	f007 fa24 	bl	80143f8 <netif_set_up>
      netif_set_link_up(netif);
 800cfb0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cfb2:	f007 fabf 	bl	8014534 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800cfb6:	2064      	movs	r0, #100	@ 0x64
 800cfb8:	f000 f9ca 	bl	800d350 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800cfbc:	e78b      	b.n	800ced6 <ethernet_link_thread+0x2a>
 800cfbe:	bf00      	nop
 800cfc0:	2000d080 	.word	0x2000d080
 800cfc4:	2000cf98 	.word	0x2000cf98

0800cfc8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b086      	sub	sp, #24
 800cfcc:	af02      	add	r7, sp, #8
 800cfce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800cfd0:	4812      	ldr	r0, [pc, #72]	@ (800d01c <HAL_ETH_RxAllocateCallback+0x54>)
 800cfd2:	f006 ff7f 	bl	8013ed4 <memp_malloc_pool>
 800cfd6:	60f8      	str	r0, [r7, #12]
  if (p)
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d014      	beq.n	800d008 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	f103 0220 	add.w	r2, r3, #32
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	4a0d      	ldr	r2, [pc, #52]	@ (800d020 <HAL_ETH_RxAllocateCallback+0x58>)
 800cfec:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800cff6:	9201      	str	r2, [sp, #4]
 800cff8:	9300      	str	r3, [sp, #0]
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2241      	movs	r2, #65	@ 0x41
 800cffe:	2100      	movs	r1, #0
 800d000:	2000      	movs	r0, #0
 800d002:	f007 fcef 	bl	80149e4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800d006:	e005      	b.n	800d014 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800d008:	4b06      	ldr	r3, [pc, #24]	@ (800d024 <HAL_ETH_RxAllocateCallback+0x5c>)
 800d00a:	2201      	movs	r2, #1
 800d00c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]
}
 800d014:	bf00      	nop
 800d016:	3710      	adds	r7, #16
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}
 800d01c:	08024d6c 	.word	0x08024d6c
 800d020:	0800cc31 	.word	0x0800cc31
 800d024:	2000cf8c 	.word	0x2000cf8c

0800d028 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800d028:	b580      	push	{r7, lr}
 800d02a:	b088      	sub	sp, #32
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	60f8      	str	r0, [r7, #12]
 800d030:	60b9      	str	r1, [r7, #8]
 800d032:	607a      	str	r2, [r7, #4]
 800d034:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800d03e:	2300      	movs	r3, #0
 800d040:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	3b20      	subs	r3, #32
 800d046:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	2200      	movs	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800d04e:	69fb      	ldr	r3, [r7, #28]
 800d050:	2200      	movs	r2, #0
 800d052:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800d054:	69fb      	ldr	r3, [r7, #28]
 800d056:	887a      	ldrh	r2, [r7, #2]
 800d058:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800d05a:	69bb      	ldr	r3, [r7, #24]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d103      	bne.n	800d06a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	69fa      	ldr	r2, [r7, #28]
 800d066:	601a      	str	r2, [r3, #0]
 800d068:	e003      	b.n	800d072 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800d06a:	697b      	ldr	r3, [r7, #20]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	69fa      	ldr	r2, [r7, #28]
 800d070:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800d072:	697b      	ldr	r3, [r7, #20]
 800d074:	69fa      	ldr	r2, [r7, #28]
 800d076:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800d078:	69bb      	ldr	r3, [r7, #24]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	61fb      	str	r3, [r7, #28]
 800d07e:	e009      	b.n	800d094 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	891a      	ldrh	r2, [r3, #8]
 800d084:	887b      	ldrh	r3, [r7, #2]
 800d086:	4413      	add	r3, r2
 800d088:	b29a      	uxth	r2, r3
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800d08e:	69fb      	ldr	r3, [r7, #28]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	61fb      	str	r3, [r7, #28]
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d1f2      	bne.n	800d080 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800d09a:	887b      	ldrh	r3, [r7, #2]
 800d09c:	4619      	mov	r1, r3
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f7ff fb02 	bl	800c6a8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800d0a4:	bf00      	nop
 800d0a6:	3720      	adds	r7, #32
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f007 fe4f 	bl	8014d58 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d0c2:	b480      	push	{r7}
 800d0c4:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d0c6:	bf00      	nop
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0d6:	f3ef 8305 	mrs	r3, IPSR
 800d0da:	60bb      	str	r3, [r7, #8]
  return(result);
 800d0dc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10f      	bne.n	800d102 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0e2:	f3ef 8310 	mrs	r3, PRIMASK
 800d0e6:	607b      	str	r3, [r7, #4]
  return(result);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d105      	bne.n	800d0fa <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0ee:	f3ef 8311 	mrs	r3, BASEPRI
 800d0f2:	603b      	str	r3, [r7, #0]
  return(result);
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d007      	beq.n	800d10a <osKernelInitialize+0x3a>
 800d0fa:	4b0e      	ldr	r3, [pc, #56]	@ (800d134 <osKernelInitialize+0x64>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	2b02      	cmp	r3, #2
 800d100:	d103      	bne.n	800d10a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d102:	f06f 0305 	mvn.w	r3, #5
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	e00c      	b.n	800d124 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d10a:	4b0a      	ldr	r3, [pc, #40]	@ (800d134 <osKernelInitialize+0x64>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d105      	bne.n	800d11e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d112:	4b08      	ldr	r3, [pc, #32]	@ (800d134 <osKernelInitialize+0x64>)
 800d114:	2201      	movs	r2, #1
 800d116:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d118:	2300      	movs	r3, #0
 800d11a:	60fb      	str	r3, [r7, #12]
 800d11c:	e002      	b.n	800d124 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d11e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d122:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d124:	68fb      	ldr	r3, [r7, #12]
}
 800d126:	4618      	mov	r0, r3
 800d128:	3714      	adds	r7, #20
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	2000d0a0 	.word	0x2000d0a0

0800d138 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d138:	b580      	push	{r7, lr}
 800d13a:	b084      	sub	sp, #16
 800d13c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d13e:	f3ef 8305 	mrs	r3, IPSR
 800d142:	60bb      	str	r3, [r7, #8]
  return(result);
 800d144:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d146:	2b00      	cmp	r3, #0
 800d148:	d10f      	bne.n	800d16a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d14a:	f3ef 8310 	mrs	r3, PRIMASK
 800d14e:	607b      	str	r3, [r7, #4]
  return(result);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d105      	bne.n	800d162 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d156:	f3ef 8311 	mrs	r3, BASEPRI
 800d15a:	603b      	str	r3, [r7, #0]
  return(result);
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d007      	beq.n	800d172 <osKernelStart+0x3a>
 800d162:	4b0f      	ldr	r3, [pc, #60]	@ (800d1a0 <osKernelStart+0x68>)
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2b02      	cmp	r3, #2
 800d168:	d103      	bne.n	800d172 <osKernelStart+0x3a>
    stat = osErrorISR;
 800d16a:	f06f 0305 	mvn.w	r3, #5
 800d16e:	60fb      	str	r3, [r7, #12]
 800d170:	e010      	b.n	800d194 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d172:	4b0b      	ldr	r3, [pc, #44]	@ (800d1a0 <osKernelStart+0x68>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	2b01      	cmp	r3, #1
 800d178:	d109      	bne.n	800d18e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d17a:	f7ff ffa2 	bl	800d0c2 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d17e:	4b08      	ldr	r3, [pc, #32]	@ (800d1a0 <osKernelStart+0x68>)
 800d180:	2202      	movs	r2, #2
 800d182:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d184:	f002 fa8c 	bl	800f6a0 <vTaskStartScheduler>
      stat = osOK;
 800d188:	2300      	movs	r3, #0
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	e002      	b.n	800d194 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d18e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d192:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d194:	68fb      	ldr	r3, [r7, #12]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	2000d0a0 	.word	0x2000d0a0

0800d1a4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b084      	sub	sp, #16
 800d1a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1aa:	f3ef 8305 	mrs	r3, IPSR
 800d1ae:	60bb      	str	r3, [r7, #8]
  return(result);
 800d1b0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10f      	bne.n	800d1d6 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1b6:	f3ef 8310 	mrs	r3, PRIMASK
 800d1ba:	607b      	str	r3, [r7, #4]
  return(result);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d105      	bne.n	800d1ce <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d1c2:	f3ef 8311 	mrs	r3, BASEPRI
 800d1c6:	603b      	str	r3, [r7, #0]
  return(result);
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d007      	beq.n	800d1de <osKernelGetTickCount+0x3a>
 800d1ce:	4b08      	ldr	r3, [pc, #32]	@ (800d1f0 <osKernelGetTickCount+0x4c>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d103      	bne.n	800d1de <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800d1d6:	f002 fb95 	bl	800f904 <xTaskGetTickCountFromISR>
 800d1da:	60f8      	str	r0, [r7, #12]
 800d1dc:	e002      	b.n	800d1e4 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800d1de:	f002 fb81 	bl	800f8e4 <xTaskGetTickCount>
 800d1e2:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	2000d0a0 	.word	0x2000d0a0

0800d1f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b090      	sub	sp, #64	@ 0x40
 800d1f8:	af04      	add	r7, sp, #16
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d200:	2300      	movs	r3, #0
 800d202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d204:	f3ef 8305 	mrs	r3, IPSR
 800d208:	61fb      	str	r3, [r7, #28]
  return(result);
 800d20a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f040 8090 	bne.w	800d332 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d212:	f3ef 8310 	mrs	r3, PRIMASK
 800d216:	61bb      	str	r3, [r7, #24]
  return(result);
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d105      	bne.n	800d22a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d21e:	f3ef 8311 	mrs	r3, BASEPRI
 800d222:	617b      	str	r3, [r7, #20]
  return(result);
 800d224:	697b      	ldr	r3, [r7, #20]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d003      	beq.n	800d232 <osThreadNew+0x3e>
 800d22a:	4b44      	ldr	r3, [pc, #272]	@ (800d33c <osThreadNew+0x148>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	2b02      	cmp	r3, #2
 800d230:	d07f      	beq.n	800d332 <osThreadNew+0x13e>
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d07c      	beq.n	800d332 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800d238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d23c:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d23e:	2318      	movs	r3, #24
 800d240:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800d242:	2300      	movs	r3, #0
 800d244:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800d246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d24a:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d045      	beq.n	800d2de <osThreadNew+0xea>
      if (attr->name != NULL) {
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d002      	beq.n	800d260 <osThreadNew+0x6c>
        name = attr->name;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d002      	beq.n	800d26e <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d270:	2b00      	cmp	r3, #0
 800d272:	d008      	beq.n	800d286 <osThreadNew+0x92>
 800d274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d276:	2b38      	cmp	r3, #56	@ 0x38
 800d278:	d805      	bhi.n	800d286 <osThreadNew+0x92>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	685b      	ldr	r3, [r3, #4]
 800d27e:	f003 0301 	and.w	r3, r3, #1
 800d282:	2b00      	cmp	r3, #0
 800d284:	d001      	beq.n	800d28a <osThreadNew+0x96>
        return (NULL);
 800d286:	2300      	movs	r3, #0
 800d288:	e054      	b.n	800d334 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	695b      	ldr	r3, [r3, #20]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d003      	beq.n	800d29a <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	695b      	ldr	r3, [r3, #20]
 800d296:	089b      	lsrs	r3, r3, #2
 800d298:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00e      	beq.n	800d2c0 <osThreadNew+0xcc>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	68db      	ldr	r3, [r3, #12]
 800d2a6:	2ba7      	cmp	r3, #167	@ 0xa7
 800d2a8:	d90a      	bls.n	800d2c0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d006      	beq.n	800d2c0 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	695b      	ldr	r3, [r3, #20]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d002      	beq.n	800d2c0 <osThreadNew+0xcc>
        mem = 1;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	623b      	str	r3, [r7, #32]
 800d2be:	e010      	b.n	800d2e2 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	689b      	ldr	r3, [r3, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d10c      	bne.n	800d2e2 <osThreadNew+0xee>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d108      	bne.n	800d2e2 <osThreadNew+0xee>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	691b      	ldr	r3, [r3, #16]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d104      	bne.n	800d2e2 <osThreadNew+0xee>
          mem = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	623b      	str	r3, [r7, #32]
 800d2dc:	e001      	b.n	800d2e2 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d110      	bne.n	800d30a <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d2ec:	687a      	ldr	r2, [r7, #4]
 800d2ee:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d2f0:	9202      	str	r2, [sp, #8]
 800d2f2:	9301      	str	r3, [sp, #4]
 800d2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2f6:	9300      	str	r3, [sp, #0]
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d2fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f001 ff5a 	bl	800f1b8 <xTaskCreateStatic>
 800d304:	4603      	mov	r3, r0
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	e013      	b.n	800d332 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800d30a:	6a3b      	ldr	r3, [r7, #32]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d110      	bne.n	800d332 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	b29a      	uxth	r2, r3
 800d314:	f107 0310 	add.w	r3, r7, #16
 800d318:	9301      	str	r3, [sp, #4]
 800d31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f001 ffae 	bl	800f284 <xTaskCreate>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d001      	beq.n	800d332 <osThreadNew+0x13e>
          hTask = NULL;
 800d32e:	2300      	movs	r3, #0
 800d330:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d332:	693b      	ldr	r3, [r7, #16]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3730      	adds	r7, #48	@ 0x30
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	2000d0a0 	.word	0x2000d0a0

0800d340 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800d340:	b580      	push	{r7, lr}
 800d342:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800d344:	2000      	movs	r0, #0
 800d346:	f002 f8fd 	bl	800f544 <vTaskDelete>
#endif
  for (;;);
 800d34a:	bf00      	nop
 800d34c:	e7fd      	b.n	800d34a <osThreadExit+0xa>
	...

0800d350 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d358:	f3ef 8305 	mrs	r3, IPSR
 800d35c:	613b      	str	r3, [r7, #16]
  return(result);
 800d35e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10f      	bne.n	800d384 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d364:	f3ef 8310 	mrs	r3, PRIMASK
 800d368:	60fb      	str	r3, [r7, #12]
  return(result);
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d105      	bne.n	800d37c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d370:	f3ef 8311 	mrs	r3, BASEPRI
 800d374:	60bb      	str	r3, [r7, #8]
  return(result);
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d007      	beq.n	800d38c <osDelay+0x3c>
 800d37c:	4b0a      	ldr	r3, [pc, #40]	@ (800d3a8 <osDelay+0x58>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	2b02      	cmp	r3, #2
 800d382:	d103      	bne.n	800d38c <osDelay+0x3c>
    stat = osErrorISR;
 800d384:	f06f 0305 	mvn.w	r3, #5
 800d388:	617b      	str	r3, [r7, #20]
 800d38a:	e007      	b.n	800d39c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <osDelay+0x4c>
      vTaskDelay(ticks);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f002 f94a 	bl	800f630 <vTaskDelay>
    }
  }

  return (stat);
 800d39c:	697b      	ldr	r3, [r7, #20]
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3718      	adds	r7, #24
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop
 800d3a8:	2000d0a0 	.word	0x2000d0a0

0800d3ac <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b08a      	sub	sp, #40	@ 0x28
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3b8:	f3ef 8305 	mrs	r3, IPSR
 800d3bc:	613b      	str	r3, [r7, #16]
  return(result);
 800d3be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f040 8085 	bne.w	800d4d0 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3c6:	f3ef 8310 	mrs	r3, PRIMASK
 800d3ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d105      	bne.n	800d3de <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3d2:	f3ef 8311 	mrs	r3, BASEPRI
 800d3d6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d003      	beq.n	800d3e6 <osMutexNew+0x3a>
 800d3de:	4b3f      	ldr	r3, [pc, #252]	@ (800d4dc <osMutexNew+0x130>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	2b02      	cmp	r3, #2
 800d3e4:	d074      	beq.n	800d4d0 <osMutexNew+0x124>
    if (attr != NULL) {
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d003      	beq.n	800d3f4 <osMutexNew+0x48>
      type = attr->attr_bits;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	685b      	ldr	r3, [r3, #4]
 800d3f0:	623b      	str	r3, [r7, #32]
 800d3f2:	e001      	b.n	800d3f8 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d3f8:	6a3b      	ldr	r3, [r7, #32]
 800d3fa:	f003 0301 	and.w	r3, r3, #1
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d002      	beq.n	800d408 <osMutexNew+0x5c>
      rmtx = 1U;
 800d402:	2301      	movs	r3, #1
 800d404:	61fb      	str	r3, [r7, #28]
 800d406:	e001      	b.n	800d40c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800d408:	2300      	movs	r3, #0
 800d40a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800d40c:	6a3b      	ldr	r3, [r7, #32]
 800d40e:	f003 0308 	and.w	r3, r3, #8
 800d412:	2b00      	cmp	r3, #0
 800d414:	d15c      	bne.n	800d4d0 <osMutexNew+0x124>
      mem = -1;
 800d416:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d41a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d015      	beq.n	800d44e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	689b      	ldr	r3, [r3, #8]
 800d426:	2b00      	cmp	r3, #0
 800d428:	d006      	beq.n	800d438 <osMutexNew+0x8c>
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	2b4f      	cmp	r3, #79	@ 0x4f
 800d430:	d902      	bls.n	800d438 <osMutexNew+0x8c>
          mem = 1;
 800d432:	2301      	movs	r3, #1
 800d434:	61bb      	str	r3, [r7, #24]
 800d436:	e00c      	b.n	800d452 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d108      	bne.n	800d452 <osMutexNew+0xa6>
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	68db      	ldr	r3, [r3, #12]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d104      	bne.n	800d452 <osMutexNew+0xa6>
            mem = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	61bb      	str	r3, [r7, #24]
 800d44c:	e001      	b.n	800d452 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800d44e:	2300      	movs	r3, #0
 800d450:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	2b01      	cmp	r3, #1
 800d456:	d112      	bne.n	800d47e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d007      	beq.n	800d46e <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	4619      	mov	r1, r3
 800d464:	2004      	movs	r0, #4
 800d466:	f000 fec0 	bl	800e1ea <xQueueCreateMutexStatic>
 800d46a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d46c:	e016      	b.n	800d49c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	689b      	ldr	r3, [r3, #8]
 800d472:	4619      	mov	r1, r3
 800d474:	2001      	movs	r0, #1
 800d476:	f000 feb8 	bl	800e1ea <xQueueCreateMutexStatic>
 800d47a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d47c:	e00e      	b.n	800d49c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800d47e:	69bb      	ldr	r3, [r7, #24]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d10b      	bne.n	800d49c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d004      	beq.n	800d494 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800d48a:	2004      	movs	r0, #4
 800d48c:	f000 fe95 	bl	800e1ba <xQueueCreateMutex>
 800d490:	6278      	str	r0, [r7, #36]	@ 0x24
 800d492:	e003      	b.n	800d49c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800d494:	2001      	movs	r0, #1
 800d496:	f000 fe90 	bl	800e1ba <xQueueCreateMutex>
 800d49a:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800d49c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00c      	beq.n	800d4bc <osMutexNew+0x110>
        if (attr != NULL) {
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d003      	beq.n	800d4b0 <osMutexNew+0x104>
          name = attr->name;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	617b      	str	r3, [r7, #20]
 800d4ae:	e001      	b.n	800d4b4 <osMutexNew+0x108>
        } else {
          name = NULL;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800d4b4:	6979      	ldr	r1, [r7, #20]
 800d4b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4b8:	f001 fdf6 	bl	800f0a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d006      	beq.n	800d4d0 <osMutexNew+0x124>
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d003      	beq.n	800d4d0 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d4c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4ca:	f043 0301 	orr.w	r3, r3, #1
 800d4ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3728      	adds	r7, #40	@ 0x28
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
 800d4da:	bf00      	nop
 800d4dc:	2000d0a0 	.word	0x2000d0a0

0800d4e0 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b088      	sub	sp, #32
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
 800d4e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f023 0301 	bic.w	r3, r3, #1
 800d4f0:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f003 0301 	and.w	r3, r3, #1
 800d4f8:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4fe:	f3ef 8305 	mrs	r3, IPSR
 800d502:	613b      	str	r3, [r7, #16]
  return(result);
 800d504:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d506:	2b00      	cmp	r3, #0
 800d508:	d10f      	bne.n	800d52a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d50a:	f3ef 8310 	mrs	r3, PRIMASK
 800d50e:	60fb      	str	r3, [r7, #12]
  return(result);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d105      	bne.n	800d522 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d516:	f3ef 8311 	mrs	r3, BASEPRI
 800d51a:	60bb      	str	r3, [r7, #8]
  return(result);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d007      	beq.n	800d532 <osMutexAcquire+0x52>
 800d522:	4b1d      	ldr	r3, [pc, #116]	@ (800d598 <osMutexAcquire+0xb8>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b02      	cmp	r3, #2
 800d528:	d103      	bne.n	800d532 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800d52a:	f06f 0305 	mvn.w	r3, #5
 800d52e:	61fb      	str	r3, [r7, #28]
 800d530:	e02c      	b.n	800d58c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800d532:	69bb      	ldr	r3, [r7, #24]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d103      	bne.n	800d540 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800d538:	f06f 0303 	mvn.w	r3, #3
 800d53c:	61fb      	str	r3, [r7, #28]
 800d53e:	e025      	b.n	800d58c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d011      	beq.n	800d56a <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d546:	6839      	ldr	r1, [r7, #0]
 800d548:	69b8      	ldr	r0, [r7, #24]
 800d54a:	f000 fea0 	bl	800e28e <xQueueTakeMutexRecursive>
 800d54e:	4603      	mov	r3, r0
 800d550:	2b01      	cmp	r3, #1
 800d552:	d01b      	beq.n	800d58c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d554:	683b      	ldr	r3, [r7, #0]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d003      	beq.n	800d562 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800d55a:	f06f 0301 	mvn.w	r3, #1
 800d55e:	61fb      	str	r3, [r7, #28]
 800d560:	e014      	b.n	800d58c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d562:	f06f 0302 	mvn.w	r3, #2
 800d566:	61fb      	str	r3, [r7, #28]
 800d568:	e010      	b.n	800d58c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	69b8      	ldr	r0, [r7, #24]
 800d56e:	f001 fa6b 	bl	800ea48 <xQueueSemaphoreTake>
 800d572:	4603      	mov	r3, r0
 800d574:	2b01      	cmp	r3, #1
 800d576:	d009      	beq.n	800d58c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d003      	beq.n	800d586 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800d57e:	f06f 0301 	mvn.w	r3, #1
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	e002      	b.n	800d58c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800d586:	f06f 0302 	mvn.w	r3, #2
 800d58a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800d58c:	69fb      	ldr	r3, [r7, #28]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3720      	adds	r7, #32
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	2000d0a0 	.word	0x2000d0a0

0800d59c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b088      	sub	sp, #32
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f023 0301 	bic.w	r3, r3, #1
 800d5aa:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f003 0301 	and.w	r3, r3, #1
 800d5b2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5b8:	f3ef 8305 	mrs	r3, IPSR
 800d5bc:	613b      	str	r3, [r7, #16]
  return(result);
 800d5be:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d10f      	bne.n	800d5e4 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5c4:	f3ef 8310 	mrs	r3, PRIMASK
 800d5c8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d105      	bne.n	800d5dc <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5d0:	f3ef 8311 	mrs	r3, BASEPRI
 800d5d4:	60bb      	str	r3, [r7, #8]
  return(result);
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d007      	beq.n	800d5ec <osMutexRelease+0x50>
 800d5dc:	4b16      	ldr	r3, [pc, #88]	@ (800d638 <osMutexRelease+0x9c>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b02      	cmp	r3, #2
 800d5e2:	d103      	bne.n	800d5ec <osMutexRelease+0x50>
    stat = osErrorISR;
 800d5e4:	f06f 0305 	mvn.w	r3, #5
 800d5e8:	61fb      	str	r3, [r7, #28]
 800d5ea:	e01f      	b.n	800d62c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d5ec:	69bb      	ldr	r3, [r7, #24]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d103      	bne.n	800d5fa <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d5f2:	f06f 0303 	mvn.w	r3, #3
 800d5f6:	61fb      	str	r3, [r7, #28]
 800d5f8:	e018      	b.n	800d62c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d009      	beq.n	800d614 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d600:	69b8      	ldr	r0, [r7, #24]
 800d602:	f000 fe0d 	bl	800e220 <xQueueGiveMutexRecursive>
 800d606:	4603      	mov	r3, r0
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d00f      	beq.n	800d62c <osMutexRelease+0x90>
        stat = osErrorResource;
 800d60c:	f06f 0302 	mvn.w	r3, #2
 800d610:	61fb      	str	r3, [r7, #28]
 800d612:	e00b      	b.n	800d62c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d614:	2300      	movs	r3, #0
 800d616:	2200      	movs	r2, #0
 800d618:	2100      	movs	r1, #0
 800d61a:	69b8      	ldr	r0, [r7, #24]
 800d61c:	f000 fee6 	bl	800e3ec <xQueueGenericSend>
 800d620:	4603      	mov	r3, r0
 800d622:	2b01      	cmp	r3, #1
 800d624:	d002      	beq.n	800d62c <osMutexRelease+0x90>
        stat = osErrorResource;
 800d626:	f06f 0302 	mvn.w	r3, #2
 800d62a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d62c:	69fb      	ldr	r3, [r7, #28]
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3720      	adds	r7, #32
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	2000d0a0 	.word	0x2000d0a0

0800d63c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b08c      	sub	sp, #48	@ 0x30
 800d640:	af02      	add	r7, sp, #8
 800d642:	60f8      	str	r0, [r7, #12]
 800d644:	60b9      	str	r1, [r7, #8]
 800d646:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d648:	2300      	movs	r3, #0
 800d64a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d64c:	f3ef 8305 	mrs	r3, IPSR
 800d650:	61bb      	str	r3, [r7, #24]
  return(result);
 800d652:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d654:	2b00      	cmp	r3, #0
 800d656:	f040 8086 	bne.w	800d766 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d65a:	f3ef 8310 	mrs	r3, PRIMASK
 800d65e:	617b      	str	r3, [r7, #20]
  return(result);
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d105      	bne.n	800d672 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d666:	f3ef 8311 	mrs	r3, BASEPRI
 800d66a:	613b      	str	r3, [r7, #16]
  return(result);
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d003      	beq.n	800d67a <osSemaphoreNew+0x3e>
 800d672:	4b3f      	ldr	r3, [pc, #252]	@ (800d770 <osSemaphoreNew+0x134>)
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	2b02      	cmp	r3, #2
 800d678:	d075      	beq.n	800d766 <osSemaphoreNew+0x12a>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d072      	beq.n	800d766 <osSemaphoreNew+0x12a>
 800d680:	68ba      	ldr	r2, [r7, #8]
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	429a      	cmp	r2, r3
 800d686:	d86e      	bhi.n	800d766 <osSemaphoreNew+0x12a>
    mem = -1;
 800d688:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d68c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d015      	beq.n	800d6c0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d006      	beq.n	800d6aa <osSemaphoreNew+0x6e>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	68db      	ldr	r3, [r3, #12]
 800d6a0:	2b4f      	cmp	r3, #79	@ 0x4f
 800d6a2:	d902      	bls.n	800d6aa <osSemaphoreNew+0x6e>
        mem = 1;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	623b      	str	r3, [r7, #32]
 800d6a8:	e00c      	b.n	800d6c4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	689b      	ldr	r3, [r3, #8]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d108      	bne.n	800d6c4 <osSemaphoreNew+0x88>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	68db      	ldr	r3, [r3, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d104      	bne.n	800d6c4 <osSemaphoreNew+0x88>
          mem = 0;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	623b      	str	r3, [r7, #32]
 800d6be:	e001      	b.n	800d6c4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d6ca:	d04c      	beq.n	800d766 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d128      	bne.n	800d724 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d6d2:	6a3b      	ldr	r3, [r7, #32]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d10a      	bne.n	800d6ee <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	689b      	ldr	r3, [r3, #8]
 800d6dc:	2203      	movs	r2, #3
 800d6de:	9200      	str	r2, [sp, #0]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	2001      	movs	r0, #1
 800d6e6:	f000 fc61 	bl	800dfac <xQueueGenericCreateStatic>
 800d6ea:	6278      	str	r0, [r7, #36]	@ 0x24
 800d6ec:	e005      	b.n	800d6fa <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d6ee:	2203      	movs	r2, #3
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	2001      	movs	r0, #1
 800d6f4:	f000 fce1 	bl	800e0ba <xQueueGenericCreate>
 800d6f8:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d022      	beq.n	800d746 <osSemaphoreNew+0x10a>
 800d700:	68bb      	ldr	r3, [r7, #8]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d01f      	beq.n	800d746 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d706:	2300      	movs	r3, #0
 800d708:	2200      	movs	r2, #0
 800d70a:	2100      	movs	r1, #0
 800d70c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d70e:	f000 fe6d 	bl	800e3ec <xQueueGenericSend>
 800d712:	4603      	mov	r3, r0
 800d714:	2b01      	cmp	r3, #1
 800d716:	d016      	beq.n	800d746 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d718:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d71a:	f001 fb77 	bl	800ee0c <vQueueDelete>
            hSemaphore = NULL;
 800d71e:	2300      	movs	r3, #0
 800d720:	627b      	str	r3, [r7, #36]	@ 0x24
 800d722:	e010      	b.n	800d746 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d724:	6a3b      	ldr	r3, [r7, #32]
 800d726:	2b01      	cmp	r3, #1
 800d728:	d108      	bne.n	800d73c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	689b      	ldr	r3, [r3, #8]
 800d72e:	461a      	mov	r2, r3
 800d730:	68b9      	ldr	r1, [r7, #8]
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f000 fde4 	bl	800e300 <xQueueCreateCountingSemaphoreStatic>
 800d738:	6278      	str	r0, [r7, #36]	@ 0x24
 800d73a:	e004      	b.n	800d746 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d73c:	68b9      	ldr	r1, [r7, #8]
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f000 fe1b 	bl	800e37a <xQueueCreateCountingSemaphore>
 800d744:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00c      	beq.n	800d766 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d003      	beq.n	800d75a <osSemaphoreNew+0x11e>
          name = attr->name;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	61fb      	str	r3, [r7, #28]
 800d758:	e001      	b.n	800d75e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d75a:	2300      	movs	r3, #0
 800d75c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d75e:	69f9      	ldr	r1, [r7, #28]
 800d760:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d762:	f001 fca1 	bl	800f0a8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3728      	adds	r7, #40	@ 0x28
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	2000d0a0 	.word	0x2000d0a0

0800d774 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d774:	b580      	push	{r7, lr}
 800d776:	b088      	sub	sp, #32
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d782:	2300      	movs	r3, #0
 800d784:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d786:	69bb      	ldr	r3, [r7, #24]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d103      	bne.n	800d794 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d78c:	f06f 0303 	mvn.w	r3, #3
 800d790:	61fb      	str	r3, [r7, #28]
 800d792:	e04b      	b.n	800d82c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d794:	f3ef 8305 	mrs	r3, IPSR
 800d798:	617b      	str	r3, [r7, #20]
  return(result);
 800d79a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d10f      	bne.n	800d7c0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7a0:	f3ef 8310 	mrs	r3, PRIMASK
 800d7a4:	613b      	str	r3, [r7, #16]
  return(result);
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d105      	bne.n	800d7b8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7ac:	f3ef 8311 	mrs	r3, BASEPRI
 800d7b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d026      	beq.n	800d806 <osSemaphoreAcquire+0x92>
 800d7b8:	4b1f      	ldr	r3, [pc, #124]	@ (800d838 <osSemaphoreAcquire+0xc4>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	2b02      	cmp	r3, #2
 800d7be:	d122      	bne.n	800d806 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d003      	beq.n	800d7ce <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d7c6:	f06f 0303 	mvn.w	r3, #3
 800d7ca:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d7cc:	e02d      	b.n	800d82a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d7d2:	f107 0308 	add.w	r3, r7, #8
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	2100      	movs	r1, #0
 800d7da:	69b8      	ldr	r0, [r7, #24]
 800d7dc:	f001 fa4c 	bl	800ec78 <xQueueReceiveFromISR>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b01      	cmp	r3, #1
 800d7e4:	d003      	beq.n	800d7ee <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d7e6:	f06f 0302 	mvn.w	r3, #2
 800d7ea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d7ec:	e01d      	b.n	800d82a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d01a      	beq.n	800d82a <osSemaphoreAcquire+0xb6>
 800d7f4:	4b11      	ldr	r3, [pc, #68]	@ (800d83c <osSemaphoreAcquire+0xc8>)
 800d7f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7fa:	601a      	str	r2, [r3, #0]
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d804:	e011      	b.n	800d82a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d806:	6839      	ldr	r1, [r7, #0]
 800d808:	69b8      	ldr	r0, [r7, #24]
 800d80a:	f001 f91d 	bl	800ea48 <xQueueSemaphoreTake>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b01      	cmp	r3, #1
 800d812:	d00b      	beq.n	800d82c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d003      	beq.n	800d822 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d81a:	f06f 0301 	mvn.w	r3, #1
 800d81e:	61fb      	str	r3, [r7, #28]
 800d820:	e004      	b.n	800d82c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d822:	f06f 0302 	mvn.w	r3, #2
 800d826:	61fb      	str	r3, [r7, #28]
 800d828:	e000      	b.n	800d82c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d82a:	bf00      	nop
      }
    }
  }

  return (stat);
 800d82c:	69fb      	ldr	r3, [r7, #28]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3720      	adds	r7, #32
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	2000d0a0 	.word	0x2000d0a0
 800d83c:	e000ed04 	.word	0xe000ed04

0800d840 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d840:	b580      	push	{r7, lr}
 800d842:	b088      	sub	sp, #32
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d84c:	2300      	movs	r3, #0
 800d84e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d103      	bne.n	800d85e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d856:	f06f 0303 	mvn.w	r3, #3
 800d85a:	61fb      	str	r3, [r7, #28]
 800d85c:	e03e      	b.n	800d8dc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d85e:	f3ef 8305 	mrs	r3, IPSR
 800d862:	617b      	str	r3, [r7, #20]
  return(result);
 800d864:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d866:	2b00      	cmp	r3, #0
 800d868:	d10f      	bne.n	800d88a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d86a:	f3ef 8310 	mrs	r3, PRIMASK
 800d86e:	613b      	str	r3, [r7, #16]
  return(result);
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d105      	bne.n	800d882 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d876:	f3ef 8311 	mrs	r3, BASEPRI
 800d87a:	60fb      	str	r3, [r7, #12]
  return(result);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d01e      	beq.n	800d8c0 <osSemaphoreRelease+0x80>
 800d882:	4b19      	ldr	r3, [pc, #100]	@ (800d8e8 <osSemaphoreRelease+0xa8>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b02      	cmp	r3, #2
 800d888:	d11a      	bne.n	800d8c0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d88e:	f107 0308 	add.w	r3, r7, #8
 800d892:	4619      	mov	r1, r3
 800d894:	69b8      	ldr	r0, [r7, #24]
 800d896:	f000 ff56 	bl	800e746 <xQueueGiveFromISR>
 800d89a:	4603      	mov	r3, r0
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d003      	beq.n	800d8a8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d8a0:	f06f 0302 	mvn.w	r3, #2
 800d8a4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d8a6:	e018      	b.n	800d8da <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d015      	beq.n	800d8da <osSemaphoreRelease+0x9a>
 800d8ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d8ec <osSemaphoreRelease+0xac>)
 800d8b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8b4:	601a      	str	r2, [r3, #0]
 800d8b6:	f3bf 8f4f 	dsb	sy
 800d8ba:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d8be:	e00c      	b.n	800d8da <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	69b8      	ldr	r0, [r7, #24]
 800d8c8:	f000 fd90 	bl	800e3ec <xQueueGenericSend>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b01      	cmp	r3, #1
 800d8d0:	d004      	beq.n	800d8dc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d8d2:	f06f 0302 	mvn.w	r3, #2
 800d8d6:	61fb      	str	r3, [r7, #28]
 800d8d8:	e000      	b.n	800d8dc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d8da:	bf00      	nop
    }
  }

  return (stat);
 800d8dc:	69fb      	ldr	r3, [r7, #28]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	3720      	adds	r7, #32
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	bd80      	pop	{r7, pc}
 800d8e6:	bf00      	nop
 800d8e8:	2000d0a0 	.word	0x2000d0a0
 800d8ec:	e000ed04 	.word	0xe000ed04

0800d8f0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b088      	sub	sp, #32
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d8fc:	f3ef 8305 	mrs	r3, IPSR
 800d900:	617b      	str	r3, [r7, #20]
  return(result);
 800d902:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10f      	bne.n	800d928 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d908:	f3ef 8310 	mrs	r3, PRIMASK
 800d90c:	613b      	str	r3, [r7, #16]
  return(result);
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d105      	bne.n	800d920 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d914:	f3ef 8311 	mrs	r3, BASEPRI
 800d918:	60fb      	str	r3, [r7, #12]
  return(result);
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d007      	beq.n	800d930 <osSemaphoreDelete+0x40>
 800d920:	4b0d      	ldr	r3, [pc, #52]	@ (800d958 <osSemaphoreDelete+0x68>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b02      	cmp	r3, #2
 800d926:	d103      	bne.n	800d930 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d928:	f06f 0305 	mvn.w	r3, #5
 800d92c:	61fb      	str	r3, [r7, #28]
 800d92e:	e00e      	b.n	800d94e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d103      	bne.n	800d93e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d936:	f06f 0303 	mvn.w	r3, #3
 800d93a:	61fb      	str	r3, [r7, #28]
 800d93c:	e007      	b.n	800d94e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d93e:	69b8      	ldr	r0, [r7, #24]
 800d940:	f001 fbdc 	bl	800f0fc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d944:	2300      	movs	r3, #0
 800d946:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d948:	69b8      	ldr	r0, [r7, #24]
 800d94a:	f001 fa5f 	bl	800ee0c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d94e:	69fb      	ldr	r3, [r7, #28]
}
 800d950:	4618      	mov	r0, r3
 800d952:	3720      	adds	r7, #32
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	2000d0a0 	.word	0x2000d0a0

0800d95c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b08c      	sub	sp, #48	@ 0x30
 800d960:	af02      	add	r7, sp, #8
 800d962:	60f8      	str	r0, [r7, #12]
 800d964:	60b9      	str	r1, [r7, #8]
 800d966:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d968:	2300      	movs	r3, #0
 800d96a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d96c:	f3ef 8305 	mrs	r3, IPSR
 800d970:	61bb      	str	r3, [r7, #24]
  return(result);
 800d972:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d974:	2b00      	cmp	r3, #0
 800d976:	d16f      	bne.n	800da58 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d978:	f3ef 8310 	mrs	r3, PRIMASK
 800d97c:	617b      	str	r3, [r7, #20]
  return(result);
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d105      	bne.n	800d990 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d984:	f3ef 8311 	mrs	r3, BASEPRI
 800d988:	613b      	str	r3, [r7, #16]
  return(result);
 800d98a:	693b      	ldr	r3, [r7, #16]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d003      	beq.n	800d998 <osMessageQueueNew+0x3c>
 800d990:	4b34      	ldr	r3, [pc, #208]	@ (800da64 <osMessageQueueNew+0x108>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b02      	cmp	r3, #2
 800d996:	d05f      	beq.n	800da58 <osMessageQueueNew+0xfc>
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d05c      	beq.n	800da58 <osMessageQueueNew+0xfc>
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d059      	beq.n	800da58 <osMessageQueueNew+0xfc>
    mem = -1;
 800d9a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d9a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d029      	beq.n	800da04 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	689b      	ldr	r3, [r3, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d012      	beq.n	800d9de <osMessageQueueNew+0x82>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	68db      	ldr	r3, [r3, #12]
 800d9bc:	2b4f      	cmp	r3, #79	@ 0x4f
 800d9be:	d90e      	bls.n	800d9de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d00a      	beq.n	800d9de <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	695a      	ldr	r2, [r3, #20]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	68b9      	ldr	r1, [r7, #8]
 800d9d0:	fb01 f303 	mul.w	r3, r1, r3
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d302      	bcc.n	800d9de <osMessageQueueNew+0x82>
        mem = 1;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	623b      	str	r3, [r7, #32]
 800d9dc:	e014      	b.n	800da08 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d110      	bne.n	800da08 <osMessageQueueNew+0xac>
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	68db      	ldr	r3, [r3, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d10c      	bne.n	800da08 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d108      	bne.n	800da08 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	695b      	ldr	r3, [r3, #20]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d104      	bne.n	800da08 <osMessageQueueNew+0xac>
          mem = 0;
 800d9fe:	2300      	movs	r3, #0
 800da00:	623b      	str	r3, [r7, #32]
 800da02:	e001      	b.n	800da08 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800da04:	2300      	movs	r3, #0
 800da06:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800da08:	6a3b      	ldr	r3, [r7, #32]
 800da0a:	2b01      	cmp	r3, #1
 800da0c:	d10b      	bne.n	800da26 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	691a      	ldr	r2, [r3, #16]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	689b      	ldr	r3, [r3, #8]
 800da16:	2100      	movs	r1, #0
 800da18:	9100      	str	r1, [sp, #0]
 800da1a:	68b9      	ldr	r1, [r7, #8]
 800da1c:	68f8      	ldr	r0, [r7, #12]
 800da1e:	f000 fac5 	bl	800dfac <xQueueGenericCreateStatic>
 800da22:	6278      	str	r0, [r7, #36]	@ 0x24
 800da24:	e008      	b.n	800da38 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800da26:	6a3b      	ldr	r3, [r7, #32]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d105      	bne.n	800da38 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800da2c:	2200      	movs	r2, #0
 800da2e:	68b9      	ldr	r1, [r7, #8]
 800da30:	68f8      	ldr	r0, [r7, #12]
 800da32:	f000 fb42 	bl	800e0ba <xQueueGenericCreate>
 800da36:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800da38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00c      	beq.n	800da58 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d003      	beq.n	800da4c <osMessageQueueNew+0xf0>
        name = attr->name;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	61fb      	str	r3, [r7, #28]
 800da4a:	e001      	b.n	800da50 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800da4c:	2300      	movs	r3, #0
 800da4e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800da50:	69f9      	ldr	r1, [r7, #28]
 800da52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800da54:	f001 fb28 	bl	800f0a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800da58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3728      	adds	r7, #40	@ 0x28
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	2000d0a0 	.word	0x2000d0a0

0800da68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08a      	sub	sp, #40	@ 0x28
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	60f8      	str	r0, [r7, #12]
 800da70:	60b9      	str	r1, [r7, #8]
 800da72:	603b      	str	r3, [r7, #0]
 800da74:	4613      	mov	r3, r2
 800da76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da80:	f3ef 8305 	mrs	r3, IPSR
 800da84:	61fb      	str	r3, [r7, #28]
  return(result);
 800da86:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d10f      	bne.n	800daac <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da8c:	f3ef 8310 	mrs	r3, PRIMASK
 800da90:	61bb      	str	r3, [r7, #24]
  return(result);
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d105      	bne.n	800daa4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800da98:	f3ef 8311 	mrs	r3, BASEPRI
 800da9c:	617b      	str	r3, [r7, #20]
  return(result);
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d02c      	beq.n	800dafe <osMessageQueuePut+0x96>
 800daa4:	4b28      	ldr	r3, [pc, #160]	@ (800db48 <osMessageQueuePut+0xe0>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b02      	cmp	r3, #2
 800daaa:	d128      	bne.n	800dafe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800daac:	6a3b      	ldr	r3, [r7, #32]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d005      	beq.n	800dabe <osMessageQueuePut+0x56>
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d002      	beq.n	800dabe <osMessageQueuePut+0x56>
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d003      	beq.n	800dac6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dabe:	f06f 0303 	mvn.w	r3, #3
 800dac2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dac4:	e039      	b.n	800db3a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dac6:	2300      	movs	r3, #0
 800dac8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800daca:	f107 0210 	add.w	r2, r7, #16
 800dace:	2300      	movs	r3, #0
 800dad0:	68b9      	ldr	r1, [r7, #8]
 800dad2:	6a38      	ldr	r0, [r7, #32]
 800dad4:	f000 fd94 	bl	800e600 <xQueueGenericSendFromISR>
 800dad8:	4603      	mov	r3, r0
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d003      	beq.n	800dae6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dade:	f06f 0302 	mvn.w	r3, #2
 800dae2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dae4:	e029      	b.n	800db3a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dae6:	693b      	ldr	r3, [r7, #16]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d026      	beq.n	800db3a <osMessageQueuePut+0xd2>
 800daec:	4b17      	ldr	r3, [pc, #92]	@ (800db4c <osMessageQueuePut+0xe4>)
 800daee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daf2:	601a      	str	r2, [r3, #0]
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dafc:	e01d      	b.n	800db3a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dafe:	6a3b      	ldr	r3, [r7, #32]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d002      	beq.n	800db0a <osMessageQueuePut+0xa2>
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d103      	bne.n	800db12 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800db0a:	f06f 0303 	mvn.w	r3, #3
 800db0e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db10:	e014      	b.n	800db3c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800db12:	2300      	movs	r3, #0
 800db14:	683a      	ldr	r2, [r7, #0]
 800db16:	68b9      	ldr	r1, [r7, #8]
 800db18:	6a38      	ldr	r0, [r7, #32]
 800db1a:	f000 fc67 	bl	800e3ec <xQueueGenericSend>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b01      	cmp	r3, #1
 800db22:	d00b      	beq.n	800db3c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d003      	beq.n	800db32 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800db2a:	f06f 0301 	mvn.w	r3, #1
 800db2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db30:	e004      	b.n	800db3c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800db32:	f06f 0302 	mvn.w	r3, #2
 800db36:	627b      	str	r3, [r7, #36]	@ 0x24
 800db38:	e000      	b.n	800db3c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db3a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800db3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800db3e:	4618      	mov	r0, r3
 800db40:	3728      	adds	r7, #40	@ 0x28
 800db42:	46bd      	mov	sp, r7
 800db44:	bd80      	pop	{r7, pc}
 800db46:	bf00      	nop
 800db48:	2000d0a0 	.word	0x2000d0a0
 800db4c:	e000ed04 	.word	0xe000ed04

0800db50 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800db50:	b580      	push	{r7, lr}
 800db52:	b08a      	sub	sp, #40	@ 0x28
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
 800db5c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800db62:	2300      	movs	r3, #0
 800db64:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db66:	f3ef 8305 	mrs	r3, IPSR
 800db6a:	61fb      	str	r3, [r7, #28]
  return(result);
 800db6c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d10f      	bne.n	800db92 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db72:	f3ef 8310 	mrs	r3, PRIMASK
 800db76:	61bb      	str	r3, [r7, #24]
  return(result);
 800db78:	69bb      	ldr	r3, [r7, #24]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d105      	bne.n	800db8a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800db7e:	f3ef 8311 	mrs	r3, BASEPRI
 800db82:	617b      	str	r3, [r7, #20]
  return(result);
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d02c      	beq.n	800dbe4 <osMessageQueueGet+0x94>
 800db8a:	4b28      	ldr	r3, [pc, #160]	@ (800dc2c <osMessageQueueGet+0xdc>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b02      	cmp	r3, #2
 800db90:	d128      	bne.n	800dbe4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800db92:	6a3b      	ldr	r3, [r7, #32]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d005      	beq.n	800dba4 <osMessageQueueGet+0x54>
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d002      	beq.n	800dba4 <osMessageQueueGet+0x54>
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d003      	beq.n	800dbac <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800dba4:	f06f 0303 	mvn.w	r3, #3
 800dba8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbaa:	e038      	b.n	800dc1e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800dbac:	2300      	movs	r3, #0
 800dbae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dbb0:	f107 0310 	add.w	r3, r7, #16
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	68b9      	ldr	r1, [r7, #8]
 800dbb8:	6a38      	ldr	r0, [r7, #32]
 800dbba:	f001 f85d 	bl	800ec78 <xQueueReceiveFromISR>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	2b01      	cmp	r3, #1
 800dbc2:	d003      	beq.n	800dbcc <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800dbc4:	f06f 0302 	mvn.w	r3, #2
 800dbc8:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbca:	e028      	b.n	800dc1e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800dbcc:	693b      	ldr	r3, [r7, #16]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d025      	beq.n	800dc1e <osMessageQueueGet+0xce>
 800dbd2:	4b17      	ldr	r3, [pc, #92]	@ (800dc30 <osMessageQueueGet+0xe0>)
 800dbd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbd8:	601a      	str	r2, [r3, #0]
 800dbda:	f3bf 8f4f 	dsb	sy
 800dbde:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbe2:	e01c      	b.n	800dc1e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dbe4:	6a3b      	ldr	r3, [r7, #32]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d002      	beq.n	800dbf0 <osMessageQueueGet+0xa0>
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d103      	bne.n	800dbf8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800dbf0:	f06f 0303 	mvn.w	r3, #3
 800dbf4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbf6:	e013      	b.n	800dc20 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dbf8:	683a      	ldr	r2, [r7, #0]
 800dbfa:	68b9      	ldr	r1, [r7, #8]
 800dbfc:	6a38      	ldr	r0, [r7, #32]
 800dbfe:	f000 fe3b 	bl	800e878 <xQueueReceive>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d00b      	beq.n	800dc20 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d003      	beq.n	800dc16 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800dc0e:	f06f 0301 	mvn.w	r3, #1
 800dc12:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc14:	e004      	b.n	800dc20 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800dc16:	f06f 0302 	mvn.w	r3, #2
 800dc1a:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc1c:	e000      	b.n	800dc20 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc1e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc22:	4618      	mov	r0, r3
 800dc24:	3728      	adds	r7, #40	@ 0x28
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	2000d0a0 	.word	0x2000d0a0
 800dc30:	e000ed04 	.word	0xe000ed04

0800dc34 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b088      	sub	sp, #32
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800dc40:	69bb      	ldr	r3, [r7, #24]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d102      	bne.n	800dc4c <osMessageQueueGetCount+0x18>
    count = 0U;
 800dc46:	2300      	movs	r3, #0
 800dc48:	61fb      	str	r3, [r7, #28]
 800dc4a:	e01e      	b.n	800dc8a <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc4c:	f3ef 8305 	mrs	r3, IPSR
 800dc50:	617b      	str	r3, [r7, #20]
  return(result);
 800dc52:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10f      	bne.n	800dc78 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc58:	f3ef 8310 	mrs	r3, PRIMASK
 800dc5c:	613b      	str	r3, [r7, #16]
  return(result);
 800dc5e:	693b      	ldr	r3, [r7, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d105      	bne.n	800dc70 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc64:	f3ef 8311 	mrs	r3, BASEPRI
 800dc68:	60fb      	str	r3, [r7, #12]
  return(result);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d008      	beq.n	800dc82 <osMessageQueueGetCount+0x4e>
 800dc70:	4b08      	ldr	r3, [pc, #32]	@ (800dc94 <osMessageQueueGetCount+0x60>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2b02      	cmp	r3, #2
 800dc76:	d104      	bne.n	800dc82 <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800dc78:	69b8      	ldr	r0, [r7, #24]
 800dc7a:	f001 f8a6 	bl	800edca <uxQueueMessagesWaitingFromISR>
 800dc7e:	61f8      	str	r0, [r7, #28]
 800dc80:	e003      	b.n	800dc8a <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800dc82:	69b8      	ldr	r0, [r7, #24]
 800dc84:	f001 f880 	bl	800ed88 <uxQueueMessagesWaiting>
 800dc88:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800dc8a:	69fb      	ldr	r3, [r7, #28]
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3720      	adds	r7, #32
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	2000d0a0 	.word	0x2000d0a0

0800dc98 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b088      	sub	sp, #32
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dca4:	f3ef 8305 	mrs	r3, IPSR
 800dca8:	617b      	str	r3, [r7, #20]
  return(result);
 800dcaa:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d10f      	bne.n	800dcd0 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcb0:	f3ef 8310 	mrs	r3, PRIMASK
 800dcb4:	613b      	str	r3, [r7, #16]
  return(result);
 800dcb6:	693b      	ldr	r3, [r7, #16]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d105      	bne.n	800dcc8 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dcbc:	f3ef 8311 	mrs	r3, BASEPRI
 800dcc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d007      	beq.n	800dcd8 <osMessageQueueDelete+0x40>
 800dcc8:	4b0d      	ldr	r3, [pc, #52]	@ (800dd00 <osMessageQueueDelete+0x68>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b02      	cmp	r3, #2
 800dcce:	d103      	bne.n	800dcd8 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800dcd0:	f06f 0305 	mvn.w	r3, #5
 800dcd4:	61fb      	str	r3, [r7, #28]
 800dcd6:	e00e      	b.n	800dcf6 <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800dcd8:	69bb      	ldr	r3, [r7, #24]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d103      	bne.n	800dce6 <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800dcde:	f06f 0303 	mvn.w	r3, #3
 800dce2:	61fb      	str	r3, [r7, #28]
 800dce4:	e007      	b.n	800dcf6 <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800dce6:	69b8      	ldr	r0, [r7, #24]
 800dce8:	f001 fa08 	bl	800f0fc <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800dcec:	2300      	movs	r3, #0
 800dcee:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800dcf0:	69b8      	ldr	r0, [r7, #24]
 800dcf2:	f001 f88b 	bl	800ee0c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800dcf6:	69fb      	ldr	r3, [r7, #28]
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	3720      	adds	r7, #32
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	bd80      	pop	{r7, pc}
 800dd00:	2000d0a0 	.word	0x2000d0a0

0800dd04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	60b9      	str	r1, [r7, #8]
 800dd0e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	4a07      	ldr	r2, [pc, #28]	@ (800dd30 <vApplicationGetIdleTaskMemory+0x2c>)
 800dd14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	4a06      	ldr	r2, [pc, #24]	@ (800dd34 <vApplicationGetIdleTaskMemory+0x30>)
 800dd1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dd22:	601a      	str	r2, [r3, #0]
}
 800dd24:	bf00      	nop
 800dd26:	3714      	adds	r7, #20
 800dd28:	46bd      	mov	sp, r7
 800dd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2e:	4770      	bx	lr
 800dd30:	2000d0a4 	.word	0x2000d0a4
 800dd34:	2000d14c 	.word	0x2000d14c

0800dd38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	60f8      	str	r0, [r7, #12]
 800dd40:	60b9      	str	r1, [r7, #8]
 800dd42:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	4a07      	ldr	r2, [pc, #28]	@ (800dd64 <vApplicationGetTimerTaskMemory+0x2c>)
 800dd48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	4a06      	ldr	r2, [pc, #24]	@ (800dd68 <vApplicationGetTimerTaskMemory+0x30>)
 800dd4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800dd56:	601a      	str	r2, [r3, #0]
}
 800dd58:	bf00      	nop
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr
 800dd64:	2000d94c 	.word	0x2000d94c
 800dd68:	2000d9f4 	.word	0x2000d9f4

0800dd6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f103 0208 	add.w	r2, r3, #8
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dd84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	f103 0208 	add.w	r2, r3, #8
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f103 0208 	add.w	r2, r3, #8
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2200      	movs	r2, #0
 800dd9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dda0:	bf00      	nop
 800dda2:	370c      	adds	r7, #12
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ddba:	bf00      	nop
 800ddbc:	370c      	adds	r7, #12
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ddc6:	b480      	push	{r7}
 800ddc8:	b085      	sub	sp, #20
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	685b      	ldr	r3, [r3, #4]
 800ddd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	68fa      	ldr	r2, [r7, #12]
 800ddda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	689a      	ldr	r2, [r3, #8]
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	689b      	ldr	r3, [r3, #8]
 800dde8:	683a      	ldr	r2, [r7, #0]
 800ddea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	683a      	ldr	r2, [r7, #0]
 800ddf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	1c5a      	adds	r2, r3, #1
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	601a      	str	r2, [r3, #0]
}
 800de02:	bf00      	nop
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr

0800de0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de0e:	b480      	push	{r7}
 800de10:	b085      	sub	sp, #20
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
 800de16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de24:	d103      	bne.n	800de2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	691b      	ldr	r3, [r3, #16]
 800de2a:	60fb      	str	r3, [r7, #12]
 800de2c:	e00c      	b.n	800de48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	3308      	adds	r3, #8
 800de32:	60fb      	str	r3, [r7, #12]
 800de34:	e002      	b.n	800de3c <vListInsert+0x2e>
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	685b      	ldr	r3, [r3, #4]
 800de3a:	60fb      	str	r3, [r7, #12]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	68ba      	ldr	r2, [r7, #8]
 800de44:	429a      	cmp	r2, r3
 800de46:	d2f6      	bcs.n	800de36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	685a      	ldr	r2, [r3, #4]
 800de4c:	683b      	ldr	r3, [r7, #0]
 800de4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800de50:	683b      	ldr	r3, [r7, #0]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	683a      	ldr	r2, [r7, #0]
 800de56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	68fa      	ldr	r2, [r7, #12]
 800de5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	683a      	ldr	r2, [r7, #0]
 800de62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	1c5a      	adds	r2, r3, #1
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	601a      	str	r2, [r3, #0]
}
 800de74:	bf00      	nop
 800de76:	3714      	adds	r7, #20
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr

0800de80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800de80:	b480      	push	{r7}
 800de82:	b085      	sub	sp, #20
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	691b      	ldr	r3, [r3, #16]
 800de8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	687a      	ldr	r2, [r7, #4]
 800de94:	6892      	ldr	r2, [r2, #8]
 800de96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	687a      	ldr	r2, [r7, #4]
 800de9e:	6852      	ldr	r2, [r2, #4]
 800dea0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	685b      	ldr	r3, [r3, #4]
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d103      	bne.n	800deb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	689a      	ldr	r2, [r3, #8]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	1e5a      	subs	r2, r3, #1
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	681b      	ldr	r3, [r3, #0]
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3714      	adds	r7, #20
 800decc:	46bd      	mov	sp, r7
 800dece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded2:	4770      	bx	lr

0800ded4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b084      	sub	sp, #16
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
 800dedc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d10d      	bne.n	800df04 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deec:	b672      	cpsid	i
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	b662      	cpsie	i
 800defc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800defe:	bf00      	nop
 800df00:	bf00      	nop
 800df02:	e7fd      	b.n	800df00 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800df04:	f002 feea 	bl	8010cdc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	681a      	ldr	r2, [r3, #0]
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df10:	68f9      	ldr	r1, [r7, #12]
 800df12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df14:	fb01 f303 	mul.w	r3, r1, r3
 800df18:	441a      	add	r2, r3
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2200      	movs	r2, #0
 800df22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	681a      	ldr	r2, [r3, #0]
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681a      	ldr	r2, [r3, #0]
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df34:	3b01      	subs	r3, #1
 800df36:	68f9      	ldr	r1, [r7, #12]
 800df38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800df3a:	fb01 f303 	mul.w	r3, r1, r3
 800df3e:	441a      	add	r2, r3
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	22ff      	movs	r2, #255	@ 0xff
 800df48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	22ff      	movs	r2, #255	@ 0xff
 800df50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d114      	bne.n	800df84 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	691b      	ldr	r3, [r3, #16]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d01a      	beq.n	800df98 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	3310      	adds	r3, #16
 800df66:	4618      	mov	r0, r3
 800df68:	f001 fe7c 	bl	800fc64 <xTaskRemoveFromEventList>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d012      	beq.n	800df98 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800df72:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa8 <xQueueGenericReset+0xd4>)
 800df74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df78:	601a      	str	r2, [r3, #0]
 800df7a:	f3bf 8f4f 	dsb	sy
 800df7e:	f3bf 8f6f 	isb	sy
 800df82:	e009      	b.n	800df98 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	3310      	adds	r3, #16
 800df88:	4618      	mov	r0, r3
 800df8a:	f7ff feef 	bl	800dd6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	3324      	adds	r3, #36	@ 0x24
 800df92:	4618      	mov	r0, r3
 800df94:	f7ff feea 	bl	800dd6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800df98:	f002 fed6 	bl	8010d48 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800df9c:	2301      	movs	r3, #1
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	e000ed04 	.word	0xe000ed04

0800dfac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b08e      	sub	sp, #56	@ 0x38
 800dfb0:	af02      	add	r7, sp, #8
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
 800dfb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10d      	bne.n	800dfdc <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800dfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfc4:	b672      	cpsid	i
 800dfc6:	f383 8811 	msr	BASEPRI, r3
 800dfca:	f3bf 8f6f 	isb	sy
 800dfce:	f3bf 8f4f 	dsb	sy
 800dfd2:	b662      	cpsie	i
 800dfd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800dfd6:	bf00      	nop
 800dfd8:	bf00      	nop
 800dfda:	e7fd      	b.n	800dfd8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10d      	bne.n	800dffe <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe6:	b672      	cpsid	i
 800dfe8:	f383 8811 	msr	BASEPRI, r3
 800dfec:	f3bf 8f6f 	isb	sy
 800dff0:	f3bf 8f4f 	dsb	sy
 800dff4:	b662      	cpsie	i
 800dff6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800dff8:	bf00      	nop
 800dffa:	bf00      	nop
 800dffc:	e7fd      	b.n	800dffa <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <xQueueGenericCreateStatic+0x5e>
 800e004:	68bb      	ldr	r3, [r7, #8]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d001      	beq.n	800e00e <xQueueGenericCreateStatic+0x62>
 800e00a:	2301      	movs	r3, #1
 800e00c:	e000      	b.n	800e010 <xQueueGenericCreateStatic+0x64>
 800e00e:	2300      	movs	r3, #0
 800e010:	2b00      	cmp	r3, #0
 800e012:	d10d      	bne.n	800e030 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e018:	b672      	cpsid	i
 800e01a:	f383 8811 	msr	BASEPRI, r3
 800e01e:	f3bf 8f6f 	isb	sy
 800e022:	f3bf 8f4f 	dsb	sy
 800e026:	b662      	cpsie	i
 800e028:	623b      	str	r3, [r7, #32]
}
 800e02a:	bf00      	nop
 800e02c:	bf00      	nop
 800e02e:	e7fd      	b.n	800e02c <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d102      	bne.n	800e03c <xQueueGenericCreateStatic+0x90>
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d101      	bne.n	800e040 <xQueueGenericCreateStatic+0x94>
 800e03c:	2301      	movs	r3, #1
 800e03e:	e000      	b.n	800e042 <xQueueGenericCreateStatic+0x96>
 800e040:	2300      	movs	r3, #0
 800e042:	2b00      	cmp	r3, #0
 800e044:	d10d      	bne.n	800e062 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800e046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e04a:	b672      	cpsid	i
 800e04c:	f383 8811 	msr	BASEPRI, r3
 800e050:	f3bf 8f6f 	isb	sy
 800e054:	f3bf 8f4f 	dsb	sy
 800e058:	b662      	cpsie	i
 800e05a:	61fb      	str	r3, [r7, #28]
}
 800e05c:	bf00      	nop
 800e05e:	bf00      	nop
 800e060:	e7fd      	b.n	800e05e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e062:	2350      	movs	r3, #80	@ 0x50
 800e064:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	2b50      	cmp	r3, #80	@ 0x50
 800e06a:	d00d      	beq.n	800e088 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800e06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e070:	b672      	cpsid	i
 800e072:	f383 8811 	msr	BASEPRI, r3
 800e076:	f3bf 8f6f 	isb	sy
 800e07a:	f3bf 8f4f 	dsb	sy
 800e07e:	b662      	cpsie	i
 800e080:	61bb      	str	r3, [r7, #24]
}
 800e082:	bf00      	nop
 800e084:	bf00      	nop
 800e086:	e7fd      	b.n	800e084 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e088:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800e08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e090:	2b00      	cmp	r3, #0
 800e092:	d00d      	beq.n	800e0b0 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e096:	2201      	movs	r2, #1
 800e098:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e09c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800e0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	687a      	ldr	r2, [r7, #4]
 800e0a8:	68b9      	ldr	r1, [r7, #8]
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f000 f848 	bl	800e140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e0b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	3730      	adds	r7, #48	@ 0x30
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}

0800e0ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e0ba:	b580      	push	{r7, lr}
 800e0bc:	b08a      	sub	sp, #40	@ 0x28
 800e0be:	af02      	add	r7, sp, #8
 800e0c0:	60f8      	str	r0, [r7, #12]
 800e0c2:	60b9      	str	r1, [r7, #8]
 800e0c4:	4613      	mov	r3, r2
 800e0c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10d      	bne.n	800e0ea <xQueueGenericCreate+0x30>
	__asm volatile
 800e0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0d2:	b672      	cpsid	i
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	b662      	cpsie	i
 800e0e2:	613b      	str	r3, [r7, #16]
}
 800e0e4:	bf00      	nop
 800e0e6:	bf00      	nop
 800e0e8:	e7fd      	b.n	800e0e6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e0ea:	68bb      	ldr	r3, [r7, #8]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d102      	bne.n	800e0f6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	61fb      	str	r3, [r7, #28]
 800e0f4:	e004      	b.n	800e100 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	68ba      	ldr	r2, [r7, #8]
 800e0fa:	fb02 f303 	mul.w	r3, r2, r3
 800e0fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e100:	69fb      	ldr	r3, [r7, #28]
 800e102:	3350      	adds	r3, #80	@ 0x50
 800e104:	4618      	mov	r0, r3
 800e106:	f002 ff17 	bl	8010f38 <pvPortMalloc>
 800e10a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e10c:	69bb      	ldr	r3, [r7, #24]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d011      	beq.n	800e136 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e112:	69bb      	ldr	r3, [r7, #24]
 800e114:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	3350      	adds	r3, #80	@ 0x50
 800e11a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e11c:	69bb      	ldr	r3, [r7, #24]
 800e11e:	2200      	movs	r2, #0
 800e120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e124:	79fa      	ldrb	r2, [r7, #7]
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	4613      	mov	r3, r2
 800e12c:	697a      	ldr	r2, [r7, #20]
 800e12e:	68b9      	ldr	r1, [r7, #8]
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f000 f805 	bl	800e140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e136:	69bb      	ldr	r3, [r7, #24]
	}
 800e138:	4618      	mov	r0, r3
 800e13a:	3720      	adds	r7, #32
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	607a      	str	r2, [r7, #4]
 800e14c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e14e:	68bb      	ldr	r3, [r7, #8]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d103      	bne.n	800e15c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e154:	69bb      	ldr	r3, [r7, #24]
 800e156:	69ba      	ldr	r2, [r7, #24]
 800e158:	601a      	str	r2, [r3, #0]
 800e15a:	e002      	b.n	800e162 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e15c:	69bb      	ldr	r3, [r7, #24]
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	68fa      	ldr	r2, [r7, #12]
 800e166:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e16e:	2101      	movs	r1, #1
 800e170:	69b8      	ldr	r0, [r7, #24]
 800e172:	f7ff feaf 	bl	800ded4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e176:	69bb      	ldr	r3, [r7, #24]
 800e178:	78fa      	ldrb	r2, [r7, #3]
 800e17a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e17e:	bf00      	nop
 800e180:	3710      	adds	r7, #16
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}

0800e186 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e186:	b580      	push	{r7, lr}
 800e188:	b082      	sub	sp, #8
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00e      	beq.n	800e1b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2200      	movs	r2, #0
 800e19e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	6878      	ldr	r0, [r7, #4]
 800e1ae:	f000 f91d 	bl	800e3ec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e1b2:	bf00      	nop
 800e1b4:	3708      	adds	r7, #8
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}

0800e1ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e1ba:	b580      	push	{r7, lr}
 800e1bc:	b086      	sub	sp, #24
 800e1be:	af00      	add	r7, sp, #0
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	617b      	str	r3, [r7, #20]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e1cc:	79fb      	ldrb	r3, [r7, #7]
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	6939      	ldr	r1, [r7, #16]
 800e1d2:	6978      	ldr	r0, [r7, #20]
 800e1d4:	f7ff ff71 	bl	800e0ba <xQueueGenericCreate>
 800e1d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e1da:	68f8      	ldr	r0, [r7, #12]
 800e1dc:	f7ff ffd3 	bl	800e186 <prvInitialiseMutex>

		return xNewQueue;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
	}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3718      	adds	r7, #24
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b088      	sub	sp, #32
 800e1ee:	af02      	add	r7, sp, #8
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	6039      	str	r1, [r7, #0]
 800e1f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	617b      	str	r3, [r7, #20]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e1fe:	79fb      	ldrb	r3, [r7, #7]
 800e200:	9300      	str	r3, [sp, #0]
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	2200      	movs	r2, #0
 800e206:	6939      	ldr	r1, [r7, #16]
 800e208:	6978      	ldr	r0, [r7, #20]
 800e20a:	f7ff fecf 	bl	800dfac <xQueueGenericCreateStatic>
 800e20e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f7ff ffb8 	bl	800e186 <prvInitialiseMutex>

		return xNewQueue;
 800e216:	68fb      	ldr	r3, [r7, #12]
	}
 800e218:	4618      	mov	r0, r3
 800e21a:	3718      	adds	r7, #24
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800e220:	b590      	push	{r4, r7, lr}
 800e222:	b087      	sub	sp, #28
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d10d      	bne.n	800e24e <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800e232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e236:	b672      	cpsid	i
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	b662      	cpsie	i
 800e246:	60fb      	str	r3, [r7, #12]
}
 800e248:	bf00      	nop
 800e24a:	bf00      	nop
 800e24c:	e7fd      	b.n	800e24a <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	689c      	ldr	r4, [r3, #8]
 800e252:	f001 fed5 	bl	8010000 <xTaskGetCurrentTaskHandle>
 800e256:	4603      	mov	r3, r0
 800e258:	429c      	cmp	r4, r3
 800e25a:	d111      	bne.n	800e280 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	1e5a      	subs	r2, r3, #1
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d105      	bne.n	800e27a <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e26e:	2300      	movs	r3, #0
 800e270:	2200      	movs	r2, #0
 800e272:	2100      	movs	r1, #0
 800e274:	6938      	ldr	r0, [r7, #16]
 800e276:	f000 f8b9 	bl	800e3ec <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800e27a:	2301      	movs	r3, #1
 800e27c:	617b      	str	r3, [r7, #20]
 800e27e:	e001      	b.n	800e284 <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800e280:	2300      	movs	r3, #0
 800e282:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800e284:	697b      	ldr	r3, [r7, #20]
	}
 800e286:	4618      	mov	r0, r3
 800e288:	371c      	adds	r7, #28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd90      	pop	{r4, r7, pc}

0800e28e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800e28e:	b590      	push	{r4, r7, lr}
 800e290:	b087      	sub	sp, #28
 800e292:	af00      	add	r7, sp, #0
 800e294:	6078      	str	r0, [r7, #4]
 800e296:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d10d      	bne.n	800e2be <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800e2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2a6:	b672      	cpsid	i
 800e2a8:	f383 8811 	msr	BASEPRI, r3
 800e2ac:	f3bf 8f6f 	isb	sy
 800e2b0:	f3bf 8f4f 	dsb	sy
 800e2b4:	b662      	cpsie	i
 800e2b6:	60fb      	str	r3, [r7, #12]
}
 800e2b8:	bf00      	nop
 800e2ba:	bf00      	nop
 800e2bc:	e7fd      	b.n	800e2ba <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e2be:	693b      	ldr	r3, [r7, #16]
 800e2c0:	689c      	ldr	r4, [r3, #8]
 800e2c2:	f001 fe9d 	bl	8010000 <xTaskGetCurrentTaskHandle>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	429c      	cmp	r4, r3
 800e2ca:	d107      	bne.n	800e2dc <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	1c5a      	adds	r2, r3, #1
 800e2d2:	693b      	ldr	r3, [r7, #16]
 800e2d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800e2d6:	2301      	movs	r3, #1
 800e2d8:	617b      	str	r3, [r7, #20]
 800e2da:	e00c      	b.n	800e2f6 <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800e2dc:	6839      	ldr	r1, [r7, #0]
 800e2de:	6938      	ldr	r0, [r7, #16]
 800e2e0:	f000 fbb2 	bl	800ea48 <xQueueSemaphoreTake>
 800e2e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d004      	beq.n	800e2f6 <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	1c5a      	adds	r2, r3, #1
 800e2f2:	693b      	ldr	r3, [r7, #16]
 800e2f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800e2f6:	697b      	ldr	r3, [r7, #20]
	}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	371c      	adds	r7, #28
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd90      	pop	{r4, r7, pc}

0800e300 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08a      	sub	sp, #40	@ 0x28
 800e304:	af02      	add	r7, sp, #8
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d10d      	bne.n	800e32e <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800e312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e316:	b672      	cpsid	i
 800e318:	f383 8811 	msr	BASEPRI, r3
 800e31c:	f3bf 8f6f 	isb	sy
 800e320:	f3bf 8f4f 	dsb	sy
 800e324:	b662      	cpsie	i
 800e326:	61bb      	str	r3, [r7, #24]
}
 800e328:	bf00      	nop
 800e32a:	bf00      	nop
 800e32c:	e7fd      	b.n	800e32a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e32e:	68ba      	ldr	r2, [r7, #8]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	429a      	cmp	r2, r3
 800e334:	d90d      	bls.n	800e352 <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800e336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e33a:	b672      	cpsid	i
 800e33c:	f383 8811 	msr	BASEPRI, r3
 800e340:	f3bf 8f6f 	isb	sy
 800e344:	f3bf 8f4f 	dsb	sy
 800e348:	b662      	cpsie	i
 800e34a:	617b      	str	r3, [r7, #20]
}
 800e34c:	bf00      	nop
 800e34e:	bf00      	nop
 800e350:	e7fd      	b.n	800e34e <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e352:	2302      	movs	r3, #2
 800e354:	9300      	str	r3, [sp, #0]
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2200      	movs	r2, #0
 800e35a:	2100      	movs	r1, #0
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	f7ff fe25 	bl	800dfac <xQueueGenericCreateStatic>
 800e362:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e364:	69fb      	ldr	r3, [r7, #28]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d002      	beq.n	800e370 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	68ba      	ldr	r2, [r7, #8]
 800e36e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e370:	69fb      	ldr	r3, [r7, #28]
	}
 800e372:	4618      	mov	r0, r3
 800e374:	3720      	adds	r7, #32
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b086      	sub	sp, #24
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10d      	bne.n	800e3a6 <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800e38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e38e:	b672      	cpsid	i
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	b662      	cpsie	i
 800e39e:	613b      	str	r3, [r7, #16]
}
 800e3a0:	bf00      	nop
 800e3a2:	bf00      	nop
 800e3a4:	e7fd      	b.n	800e3a2 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	429a      	cmp	r2, r3
 800e3ac:	d90d      	bls.n	800e3ca <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3b2:	b672      	cpsid	i
 800e3b4:	f383 8811 	msr	BASEPRI, r3
 800e3b8:	f3bf 8f6f 	isb	sy
 800e3bc:	f3bf 8f4f 	dsb	sy
 800e3c0:	b662      	cpsie	i
 800e3c2:	60fb      	str	r3, [r7, #12]
}
 800e3c4:	bf00      	nop
 800e3c6:	bf00      	nop
 800e3c8:	e7fd      	b.n	800e3c6 <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3ca:	2202      	movs	r2, #2
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7ff fe73 	bl	800e0ba <xQueueGenericCreate>
 800e3d4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d002      	beq.n	800e3e2 <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e3e2:	697b      	ldr	r3, [r7, #20]
	}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b08e      	sub	sp, #56	@ 0x38
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	60f8      	str	r0, [r7, #12]
 800e3f4:	60b9      	str	r1, [r7, #8]
 800e3f6:	607a      	str	r2, [r7, #4]
 800e3f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e404:	2b00      	cmp	r3, #0
 800e406:	d10d      	bne.n	800e424 <xQueueGenericSend+0x38>
	__asm volatile
 800e408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e40c:	b672      	cpsid	i
 800e40e:	f383 8811 	msr	BASEPRI, r3
 800e412:	f3bf 8f6f 	isb	sy
 800e416:	f3bf 8f4f 	dsb	sy
 800e41a:	b662      	cpsie	i
 800e41c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800e41e:	bf00      	nop
 800e420:	bf00      	nop
 800e422:	e7fd      	b.n	800e420 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d103      	bne.n	800e432 <xQueueGenericSend+0x46>
 800e42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e42c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <xQueueGenericSend+0x4a>
 800e432:	2301      	movs	r3, #1
 800e434:	e000      	b.n	800e438 <xQueueGenericSend+0x4c>
 800e436:	2300      	movs	r3, #0
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10d      	bne.n	800e458 <xQueueGenericSend+0x6c>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e440:	b672      	cpsid	i
 800e442:	f383 8811 	msr	BASEPRI, r3
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	b662      	cpsie	i
 800e450:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e452:	bf00      	nop
 800e454:	bf00      	nop
 800e456:	e7fd      	b.n	800e454 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d103      	bne.n	800e466 <xQueueGenericSend+0x7a>
 800e45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e462:	2b01      	cmp	r3, #1
 800e464:	d101      	bne.n	800e46a <xQueueGenericSend+0x7e>
 800e466:	2301      	movs	r3, #1
 800e468:	e000      	b.n	800e46c <xQueueGenericSend+0x80>
 800e46a:	2300      	movs	r3, #0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d10d      	bne.n	800e48c <xQueueGenericSend+0xa0>
	__asm volatile
 800e470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e474:	b672      	cpsid	i
 800e476:	f383 8811 	msr	BASEPRI, r3
 800e47a:	f3bf 8f6f 	isb	sy
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	b662      	cpsie	i
 800e484:	623b      	str	r3, [r7, #32]
}
 800e486:	bf00      	nop
 800e488:	bf00      	nop
 800e48a:	e7fd      	b.n	800e488 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e48c:	f001 fdc8 	bl	8010020 <xTaskGetSchedulerState>
 800e490:	4603      	mov	r3, r0
 800e492:	2b00      	cmp	r3, #0
 800e494:	d102      	bne.n	800e49c <xQueueGenericSend+0xb0>
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d101      	bne.n	800e4a0 <xQueueGenericSend+0xb4>
 800e49c:	2301      	movs	r3, #1
 800e49e:	e000      	b.n	800e4a2 <xQueueGenericSend+0xb6>
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d10d      	bne.n	800e4c2 <xQueueGenericSend+0xd6>
	__asm volatile
 800e4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4aa:	b672      	cpsid	i
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	b662      	cpsie	i
 800e4ba:	61fb      	str	r3, [r7, #28]
}
 800e4bc:	bf00      	nop
 800e4be:	bf00      	nop
 800e4c0:	e7fd      	b.n	800e4be <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e4c2:	f002 fc0b 	bl	8010cdc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	d302      	bcc.n	800e4d8 <xQueueGenericSend+0xec>
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	2b02      	cmp	r3, #2
 800e4d6:	d129      	bne.n	800e52c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e4d8:	683a      	ldr	r2, [r7, #0]
 800e4da:	68b9      	ldr	r1, [r7, #8]
 800e4dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e4de:	f000 fcd3 	bl	800ee88 <prvCopyDataToQueue>
 800e4e2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e4e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d010      	beq.n	800e50e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ee:	3324      	adds	r3, #36	@ 0x24
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f001 fbb7 	bl	800fc64 <xTaskRemoveFromEventList>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d013      	beq.n	800e524 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e4fc:	4b3f      	ldr	r3, [pc, #252]	@ (800e5fc <xQueueGenericSend+0x210>)
 800e4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e502:	601a      	str	r2, [r3, #0]
 800e504:	f3bf 8f4f 	dsb	sy
 800e508:	f3bf 8f6f 	isb	sy
 800e50c:	e00a      	b.n	800e524 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e510:	2b00      	cmp	r3, #0
 800e512:	d007      	beq.n	800e524 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e514:	4b39      	ldr	r3, [pc, #228]	@ (800e5fc <xQueueGenericSend+0x210>)
 800e516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e51a:	601a      	str	r2, [r3, #0]
 800e51c:	f3bf 8f4f 	dsb	sy
 800e520:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e524:	f002 fc10 	bl	8010d48 <vPortExitCritical>
				return pdPASS;
 800e528:	2301      	movs	r3, #1
 800e52a:	e063      	b.n	800e5f4 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d103      	bne.n	800e53a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e532:	f002 fc09 	bl	8010d48 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e536:	2300      	movs	r3, #0
 800e538:	e05c      	b.n	800e5f4 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e53a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d106      	bne.n	800e54e <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e540:	f107 0314 	add.w	r3, r7, #20
 800e544:	4618      	mov	r0, r3
 800e546:	f001 fbf3 	bl	800fd30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e54a:	2301      	movs	r3, #1
 800e54c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e54e:	f002 fbfb 	bl	8010d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e552:	f001 f919 	bl	800f788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e556:	f002 fbc1 	bl	8010cdc <vPortEnterCritical>
 800e55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e560:	b25b      	sxtb	r3, r3
 800e562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e566:	d103      	bne.n	800e570 <xQueueGenericSend+0x184>
 800e568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56a:	2200      	movs	r2, #0
 800e56c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e572:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e576:	b25b      	sxtb	r3, r3
 800e578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e57c:	d103      	bne.n	800e586 <xQueueGenericSend+0x19a>
 800e57e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e580:	2200      	movs	r2, #0
 800e582:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e586:	f002 fbdf 	bl	8010d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e58a:	1d3a      	adds	r2, r7, #4
 800e58c:	f107 0314 	add.w	r3, r7, #20
 800e590:	4611      	mov	r1, r2
 800e592:	4618      	mov	r0, r3
 800e594:	f001 fbe2 	bl	800fd5c <xTaskCheckForTimeOut>
 800e598:	4603      	mov	r3, r0
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d124      	bne.n	800e5e8 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e59e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5a0:	f000 fd6a 	bl	800f078 <prvIsQueueFull>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d018      	beq.n	800e5dc <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e5ac:	3310      	adds	r3, #16
 800e5ae:	687a      	ldr	r2, [r7, #4]
 800e5b0:	4611      	mov	r1, r2
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f001 fb00 	bl	800fbb8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e5b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5ba:	f000 fcf5 	bl	800efa8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e5be:	f001 f8f1 	bl	800f7a4 <xTaskResumeAll>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f47f af7c 	bne.w	800e4c2 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e5ca:	4b0c      	ldr	r3, [pc, #48]	@ (800e5fc <xQueueGenericSend+0x210>)
 800e5cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5d0:	601a      	str	r2, [r3, #0]
 800e5d2:	f3bf 8f4f 	dsb	sy
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	e772      	b.n	800e4c2 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e5dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5de:	f000 fce3 	bl	800efa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e5e2:	f001 f8df 	bl	800f7a4 <xTaskResumeAll>
 800e5e6:	e76c      	b.n	800e4c2 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e5e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e5ea:	f000 fcdd 	bl	800efa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e5ee:	f001 f8d9 	bl	800f7a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e5f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3738      	adds	r7, #56	@ 0x38
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}
 800e5fc:	e000ed04 	.word	0xe000ed04

0800e600 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b08e      	sub	sp, #56	@ 0x38
 800e604:	af00      	add	r7, sp, #0
 800e606:	60f8      	str	r0, [r7, #12]
 800e608:	60b9      	str	r1, [r7, #8]
 800e60a:	607a      	str	r2, [r7, #4]
 800e60c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10d      	bne.n	800e634 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61c:	b672      	cpsid	i
 800e61e:	f383 8811 	msr	BASEPRI, r3
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	f3bf 8f4f 	dsb	sy
 800e62a:	b662      	cpsie	i
 800e62c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e62e:	bf00      	nop
 800e630:	bf00      	nop
 800e632:	e7fd      	b.n	800e630 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d103      	bne.n	800e642 <xQueueGenericSendFromISR+0x42>
 800e63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d101      	bne.n	800e646 <xQueueGenericSendFromISR+0x46>
 800e642:	2301      	movs	r3, #1
 800e644:	e000      	b.n	800e648 <xQueueGenericSendFromISR+0x48>
 800e646:	2300      	movs	r3, #0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d10d      	bne.n	800e668 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e650:	b672      	cpsid	i
 800e652:	f383 8811 	msr	BASEPRI, r3
 800e656:	f3bf 8f6f 	isb	sy
 800e65a:	f3bf 8f4f 	dsb	sy
 800e65e:	b662      	cpsie	i
 800e660:	623b      	str	r3, [r7, #32]
}
 800e662:	bf00      	nop
 800e664:	bf00      	nop
 800e666:	e7fd      	b.n	800e664 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e668:	683b      	ldr	r3, [r7, #0]
 800e66a:	2b02      	cmp	r3, #2
 800e66c:	d103      	bne.n	800e676 <xQueueGenericSendFromISR+0x76>
 800e66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e672:	2b01      	cmp	r3, #1
 800e674:	d101      	bne.n	800e67a <xQueueGenericSendFromISR+0x7a>
 800e676:	2301      	movs	r3, #1
 800e678:	e000      	b.n	800e67c <xQueueGenericSendFromISR+0x7c>
 800e67a:	2300      	movs	r3, #0
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10d      	bne.n	800e69c <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e684:	b672      	cpsid	i
 800e686:	f383 8811 	msr	BASEPRI, r3
 800e68a:	f3bf 8f6f 	isb	sy
 800e68e:	f3bf 8f4f 	dsb	sy
 800e692:	b662      	cpsie	i
 800e694:	61fb      	str	r3, [r7, #28]
}
 800e696:	bf00      	nop
 800e698:	bf00      	nop
 800e69a:	e7fd      	b.n	800e698 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e69c:	f002 fc06 	bl	8010eac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e6a0:	f3ef 8211 	mrs	r2, BASEPRI
 800e6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6a8:	b672      	cpsid	i
 800e6aa:	f383 8811 	msr	BASEPRI, r3
 800e6ae:	f3bf 8f6f 	isb	sy
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	b662      	cpsie	i
 800e6b8:	61ba      	str	r2, [r7, #24]
 800e6ba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e6bc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e6be:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e6c8:	429a      	cmp	r2, r3
 800e6ca:	d302      	bcc.n	800e6d2 <xQueueGenericSendFromISR+0xd2>
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b02      	cmp	r3, #2
 800e6d0:	d12c      	bne.n	800e72c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e6d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e6dc:	683a      	ldr	r2, [r7, #0]
 800e6de:	68b9      	ldr	r1, [r7, #8]
 800e6e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e6e2:	f000 fbd1 	bl	800ee88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e6e6:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e6ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6ee:	d112      	bne.n	800e716 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d016      	beq.n	800e726 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e6f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fa:	3324      	adds	r3, #36	@ 0x24
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f001 fab1 	bl	800fc64 <xTaskRemoveFromEventList>
 800e702:	4603      	mov	r3, r0
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00e      	beq.n	800e726 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d00b      	beq.n	800e726 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2201      	movs	r2, #1
 800e712:	601a      	str	r2, [r3, #0]
 800e714:	e007      	b.n	800e726 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e716:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e71a:	3301      	adds	r3, #1
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	b25a      	sxtb	r2, r3
 800e720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e722:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e726:	2301      	movs	r3, #1
 800e728:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e72a:	e001      	b.n	800e730 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e72c:	2300      	movs	r3, #0
 800e72e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e732:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e73a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e73c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3738      	adds	r7, #56	@ 0x38
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b08e      	sub	sp, #56	@ 0x38
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
 800e74e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e756:	2b00      	cmp	r3, #0
 800e758:	d10d      	bne.n	800e776 <xQueueGiveFromISR+0x30>
	__asm volatile
 800e75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e75e:	b672      	cpsid	i
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	b662      	cpsie	i
 800e76e:	623b      	str	r3, [r7, #32]
}
 800e770:	bf00      	nop
 800e772:	bf00      	nop
 800e774:	e7fd      	b.n	800e772 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d00d      	beq.n	800e79a <xQueueGiveFromISR+0x54>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	b672      	cpsid	i
 800e784:	f383 8811 	msr	BASEPRI, r3
 800e788:	f3bf 8f6f 	isb	sy
 800e78c:	f3bf 8f4f 	dsb	sy
 800e790:	b662      	cpsie	i
 800e792:	61fb      	str	r3, [r7, #28]
}
 800e794:	bf00      	nop
 800e796:	bf00      	nop
 800e798:	e7fd      	b.n	800e796 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d103      	bne.n	800e7aa <xQueueGiveFromISR+0x64>
 800e7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7a4:	689b      	ldr	r3, [r3, #8]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d101      	bne.n	800e7ae <xQueueGiveFromISR+0x68>
 800e7aa:	2301      	movs	r3, #1
 800e7ac:	e000      	b.n	800e7b0 <xQueueGiveFromISR+0x6a>
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d10d      	bne.n	800e7d0 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b8:	b672      	cpsid	i
 800e7ba:	f383 8811 	msr	BASEPRI, r3
 800e7be:	f3bf 8f6f 	isb	sy
 800e7c2:	f3bf 8f4f 	dsb	sy
 800e7c6:	b662      	cpsie	i
 800e7c8:	61bb      	str	r3, [r7, #24]
}
 800e7ca:	bf00      	nop
 800e7cc:	bf00      	nop
 800e7ce:	e7fd      	b.n	800e7cc <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7d0:	f002 fb6c 	bl	8010eac <vPortValidateInterruptPriority>
	__asm volatile
 800e7d4:	f3ef 8211 	mrs	r2, BASEPRI
 800e7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7dc:	b672      	cpsid	i
 800e7de:	f383 8811 	msr	BASEPRI, r3
 800e7e2:	f3bf 8f6f 	isb	sy
 800e7e6:	f3bf 8f4f 	dsb	sy
 800e7ea:	b662      	cpsie	i
 800e7ec:	617a      	str	r2, [r7, #20]
 800e7ee:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e7f0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e7f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7f8:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e800:	429a      	cmp	r2, r3
 800e802:	d22b      	bcs.n	800e85c <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e806:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e80a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e814:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e816:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e81a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e81e:	d112      	bne.n	800e846 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e824:	2b00      	cmp	r3, #0
 800e826:	d016      	beq.n	800e856 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e82a:	3324      	adds	r3, #36	@ 0x24
 800e82c:	4618      	mov	r0, r3
 800e82e:	f001 fa19 	bl	800fc64 <xTaskRemoveFromEventList>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d00e      	beq.n	800e856 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d00b      	beq.n	800e856 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e83e:	683b      	ldr	r3, [r7, #0]
 800e840:	2201      	movs	r2, #1
 800e842:	601a      	str	r2, [r3, #0]
 800e844:	e007      	b.n	800e856 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e846:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e84a:	3301      	adds	r3, #1
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	b25a      	sxtb	r2, r3
 800e850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e852:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e856:	2301      	movs	r3, #1
 800e858:	637b      	str	r3, [r7, #52]	@ 0x34
 800e85a:	e001      	b.n	800e860 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e85c:	2300      	movs	r3, #0
 800e85e:	637b      	str	r3, [r7, #52]	@ 0x34
 800e860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e862:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	f383 8811 	msr	BASEPRI, r3
}
 800e86a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e86c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3738      	adds	r7, #56	@ 0x38
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
	...

0800e878 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b08c      	sub	sp, #48	@ 0x30
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	60f8      	str	r0, [r7, #12]
 800e880:	60b9      	str	r1, [r7, #8]
 800e882:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e884:	2300      	movs	r3, #0
 800e886:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e88c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d10d      	bne.n	800e8ae <xQueueReceive+0x36>
	__asm volatile
 800e892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e896:	b672      	cpsid	i
 800e898:	f383 8811 	msr	BASEPRI, r3
 800e89c:	f3bf 8f6f 	isb	sy
 800e8a0:	f3bf 8f4f 	dsb	sy
 800e8a4:	b662      	cpsie	i
 800e8a6:	623b      	str	r3, [r7, #32]
}
 800e8a8:	bf00      	nop
 800e8aa:	bf00      	nop
 800e8ac:	e7fd      	b.n	800e8aa <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d103      	bne.n	800e8bc <xQueueReceive+0x44>
 800e8b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d101      	bne.n	800e8c0 <xQueueReceive+0x48>
 800e8bc:	2301      	movs	r3, #1
 800e8be:	e000      	b.n	800e8c2 <xQueueReceive+0x4a>
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d10d      	bne.n	800e8e2 <xQueueReceive+0x6a>
	__asm volatile
 800e8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ca:	b672      	cpsid	i
 800e8cc:	f383 8811 	msr	BASEPRI, r3
 800e8d0:	f3bf 8f6f 	isb	sy
 800e8d4:	f3bf 8f4f 	dsb	sy
 800e8d8:	b662      	cpsie	i
 800e8da:	61fb      	str	r3, [r7, #28]
}
 800e8dc:	bf00      	nop
 800e8de:	bf00      	nop
 800e8e0:	e7fd      	b.n	800e8de <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8e2:	f001 fb9d 	bl	8010020 <xTaskGetSchedulerState>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d102      	bne.n	800e8f2 <xQueueReceive+0x7a>
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d101      	bne.n	800e8f6 <xQueueReceive+0x7e>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	e000      	b.n	800e8f8 <xQueueReceive+0x80>
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d10d      	bne.n	800e918 <xQueueReceive+0xa0>
	__asm volatile
 800e8fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e900:	b672      	cpsid	i
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	b662      	cpsie	i
 800e910:	61bb      	str	r3, [r7, #24]
}
 800e912:	bf00      	nop
 800e914:	bf00      	nop
 800e916:	e7fd      	b.n	800e914 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e918:	f002 f9e0 	bl	8010cdc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e920:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e924:	2b00      	cmp	r3, #0
 800e926:	d01f      	beq.n	800e968 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e928:	68b9      	ldr	r1, [r7, #8]
 800e92a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e92c:	f000 fb16 	bl	800ef5c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e932:	1e5a      	subs	r2, r3, #1
 800e934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e936:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e93a:	691b      	ldr	r3, [r3, #16]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d00f      	beq.n	800e960 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e942:	3310      	adds	r3, #16
 800e944:	4618      	mov	r0, r3
 800e946:	f001 f98d 	bl	800fc64 <xTaskRemoveFromEventList>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d007      	beq.n	800e960 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e950:	4b3c      	ldr	r3, [pc, #240]	@ (800ea44 <xQueueReceive+0x1cc>)
 800e952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e956:	601a      	str	r2, [r3, #0]
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e960:	f002 f9f2 	bl	8010d48 <vPortExitCritical>
				return pdPASS;
 800e964:	2301      	movs	r3, #1
 800e966:	e069      	b.n	800ea3c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d103      	bne.n	800e976 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e96e:	f002 f9eb 	bl	8010d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e972:	2300      	movs	r3, #0
 800e974:	e062      	b.n	800ea3c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d106      	bne.n	800e98a <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e97c:	f107 0310 	add.w	r3, r7, #16
 800e980:	4618      	mov	r0, r3
 800e982:	f001 f9d5 	bl	800fd30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e986:	2301      	movs	r3, #1
 800e988:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e98a:	f002 f9dd 	bl	8010d48 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e98e:	f000 fefb 	bl	800f788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e992:	f002 f9a3 	bl	8010cdc <vPortEnterCritical>
 800e996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e998:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e99c:	b25b      	sxtb	r3, r3
 800e99e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9a2:	d103      	bne.n	800e9ac <xQueueReceive+0x134>
 800e9a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e9b2:	b25b      	sxtb	r3, r3
 800e9b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e9b8:	d103      	bne.n	800e9c2 <xQueueReceive+0x14a>
 800e9ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9bc:	2200      	movs	r2, #0
 800e9be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e9c2:	f002 f9c1 	bl	8010d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9c6:	1d3a      	adds	r2, r7, #4
 800e9c8:	f107 0310 	add.w	r3, r7, #16
 800e9cc:	4611      	mov	r1, r2
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f001 f9c4 	bl	800fd5c <xTaskCheckForTimeOut>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d123      	bne.n	800ea22 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9dc:	f000 fb36 	bl	800f04c <prvIsQueueEmpty>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d017      	beq.n	800ea16 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e8:	3324      	adds	r3, #36	@ 0x24
 800e9ea:	687a      	ldr	r2, [r7, #4]
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f001 f8e2 	bl	800fbb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e9f6:	f000 fad7 	bl	800efa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9fa:	f000 fed3 	bl	800f7a4 <xTaskResumeAll>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d189      	bne.n	800e918 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800ea04:	4b0f      	ldr	r3, [pc, #60]	@ (800ea44 <xQueueReceive+0x1cc>)
 800ea06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea0a:	601a      	str	r2, [r3, #0]
 800ea0c:	f3bf 8f4f 	dsb	sy
 800ea10:	f3bf 8f6f 	isb	sy
 800ea14:	e780      	b.n	800e918 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea18:	f000 fac6 	bl	800efa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea1c:	f000 fec2 	bl	800f7a4 <xTaskResumeAll>
 800ea20:	e77a      	b.n	800e918 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea24:	f000 fac0 	bl	800efa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea28:	f000 febc 	bl	800f7a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ea2e:	f000 fb0d 	bl	800f04c <prvIsQueueEmpty>
 800ea32:	4603      	mov	r3, r0
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	f43f af6f 	beq.w	800e918 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea3a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3730      	adds	r7, #48	@ 0x30
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}
 800ea44:	e000ed04 	.word	0xe000ed04

0800ea48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b08e      	sub	sp, #56	@ 0x38
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea52:	2300      	movs	r3, #0
 800ea54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ea5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10d      	bne.n	800ea80 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800ea64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea68:	b672      	cpsid	i
 800ea6a:	f383 8811 	msr	BASEPRI, r3
 800ea6e:	f3bf 8f6f 	isb	sy
 800ea72:	f3bf 8f4f 	dsb	sy
 800ea76:	b662      	cpsie	i
 800ea78:	623b      	str	r3, [r7, #32]
}
 800ea7a:	bf00      	nop
 800ea7c:	bf00      	nop
 800ea7e:	e7fd      	b.n	800ea7c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00d      	beq.n	800eaa4 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800ea88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea8c:	b672      	cpsid	i
 800ea8e:	f383 8811 	msr	BASEPRI, r3
 800ea92:	f3bf 8f6f 	isb	sy
 800ea96:	f3bf 8f4f 	dsb	sy
 800ea9a:	b662      	cpsie	i
 800ea9c:	61fb      	str	r3, [r7, #28]
}
 800ea9e:	bf00      	nop
 800eaa0:	bf00      	nop
 800eaa2:	e7fd      	b.n	800eaa0 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eaa4:	f001 fabc 	bl	8010020 <xTaskGetSchedulerState>
 800eaa8:	4603      	mov	r3, r0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d102      	bne.n	800eab4 <xQueueSemaphoreTake+0x6c>
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <xQueueSemaphoreTake+0x70>
 800eab4:	2301      	movs	r3, #1
 800eab6:	e000      	b.n	800eaba <xQueueSemaphoreTake+0x72>
 800eab8:	2300      	movs	r3, #0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d10d      	bne.n	800eada <xQueueSemaphoreTake+0x92>
	__asm volatile
 800eabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eac2:	b672      	cpsid	i
 800eac4:	f383 8811 	msr	BASEPRI, r3
 800eac8:	f3bf 8f6f 	isb	sy
 800eacc:	f3bf 8f4f 	dsb	sy
 800ead0:	b662      	cpsie	i
 800ead2:	61bb      	str	r3, [r7, #24]
}
 800ead4:	bf00      	nop
 800ead6:	bf00      	nop
 800ead8:	e7fd      	b.n	800ead6 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eada:	f002 f8ff 	bl	8010cdc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eae2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d024      	beq.n	800eb34 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eaea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eaec:	1e5a      	subs	r2, r3, #1
 800eaee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d104      	bne.n	800eb04 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eafa:	f001 fc13 	bl	8010324 <pvTaskIncrementMutexHeldCount>
 800eafe:	4602      	mov	r2, r0
 800eb00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb02:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb06:	691b      	ldr	r3, [r3, #16]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d00f      	beq.n	800eb2c <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb0e:	3310      	adds	r3, #16
 800eb10:	4618      	mov	r0, r3
 800eb12:	f001 f8a7 	bl	800fc64 <xTaskRemoveFromEventList>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d007      	beq.n	800eb2c <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb1c:	4b55      	ldr	r3, [pc, #340]	@ (800ec74 <xQueueSemaphoreTake+0x22c>)
 800eb1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb22:	601a      	str	r2, [r3, #0]
 800eb24:	f3bf 8f4f 	dsb	sy
 800eb28:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb2c:	f002 f90c 	bl	8010d48 <vPortExitCritical>
				return pdPASS;
 800eb30:	2301      	movs	r3, #1
 800eb32:	e09a      	b.n	800ec6a <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d114      	bne.n	800eb64 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00d      	beq.n	800eb5c <xQueueSemaphoreTake+0x114>
	__asm volatile
 800eb40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb44:	b672      	cpsid	i
 800eb46:	f383 8811 	msr	BASEPRI, r3
 800eb4a:	f3bf 8f6f 	isb	sy
 800eb4e:	f3bf 8f4f 	dsb	sy
 800eb52:	b662      	cpsie	i
 800eb54:	617b      	str	r3, [r7, #20]
}
 800eb56:	bf00      	nop
 800eb58:	bf00      	nop
 800eb5a:	e7fd      	b.n	800eb58 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb5c:	f002 f8f4 	bl	8010d48 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eb60:	2300      	movs	r3, #0
 800eb62:	e082      	b.n	800ec6a <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d106      	bne.n	800eb78 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eb6a:	f107 030c 	add.w	r3, r7, #12
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f001 f8de 	bl	800fd30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800eb74:	2301      	movs	r3, #1
 800eb76:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800eb78:	f002 f8e6 	bl	8010d48 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800eb7c:	f000 fe04 	bl	800f788 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eb80:	f002 f8ac 	bl	8010cdc <vPortEnterCritical>
 800eb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800eb8a:	b25b      	sxtb	r3, r3
 800eb8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb90:	d103      	bne.n	800eb9a <xQueueSemaphoreTake+0x152>
 800eb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb94:	2200      	movs	r2, #0
 800eb96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800eba0:	b25b      	sxtb	r3, r3
 800eba2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eba6:	d103      	bne.n	800ebb0 <xQueueSemaphoreTake+0x168>
 800eba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebb0:	f002 f8ca 	bl	8010d48 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebb4:	463a      	mov	r2, r7
 800ebb6:	f107 030c 	add.w	r3, r7, #12
 800ebba:	4611      	mov	r1, r2
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f001 f8cd 	bl	800fd5c <xTaskCheckForTimeOut>
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d132      	bne.n	800ec2e <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ebc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ebca:	f000 fa3f 	bl	800f04c <prvIsQueueEmpty>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d026      	beq.n	800ec22 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ebd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d109      	bne.n	800ebf0 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800ebdc:	f002 f87e 	bl	8010cdc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ebe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebe2:	689b      	ldr	r3, [r3, #8]
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f001 fa39 	bl	801005c <xTaskPriorityInherit>
 800ebea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ebec:	f002 f8ac 	bl	8010d48 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ebf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebf2:	3324      	adds	r3, #36	@ 0x24
 800ebf4:	683a      	ldr	r2, [r7, #0]
 800ebf6:	4611      	mov	r1, r2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 ffdd 	bl	800fbb8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ebfe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec00:	f000 f9d2 	bl	800efa8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec04:	f000 fdce 	bl	800f7a4 <xTaskResumeAll>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f47f af65 	bne.w	800eada <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800ec10:	4b18      	ldr	r3, [pc, #96]	@ (800ec74 <xQueueSemaphoreTake+0x22c>)
 800ec12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ec16:	601a      	str	r2, [r3, #0]
 800ec18:	f3bf 8f4f 	dsb	sy
 800ec1c:	f3bf 8f6f 	isb	sy
 800ec20:	e75b      	b.n	800eada <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec22:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec24:	f000 f9c0 	bl	800efa8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec28:	f000 fdbc 	bl	800f7a4 <xTaskResumeAll>
 800ec2c:	e755      	b.n	800eada <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec30:	f000 f9ba 	bl	800efa8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec34:	f000 fdb6 	bl	800f7a4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec38:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec3a:	f000 fa07 	bl	800f04c <prvIsQueueEmpty>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	f43f af4a 	beq.w	800eada <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d00d      	beq.n	800ec68 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800ec4c:	f002 f846 	bl	8010cdc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ec52:	f000 f901 	bl	800ee58 <prvGetDisinheritPriorityAfterTimeout>
 800ec56:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec5a:	689b      	ldr	r3, [r3, #8]
 800ec5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f001 fad8 	bl	8010214 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ec64:	f002 f870 	bl	8010d48 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ec68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3738      	adds	r7, #56	@ 0x38
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	e000ed04 	.word	0xe000ed04

0800ec78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08e      	sub	sp, #56	@ 0x38
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ec88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d10d      	bne.n	800ecaa <xQueueReceiveFromISR+0x32>
	__asm volatile
 800ec8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec92:	b672      	cpsid	i
 800ec94:	f383 8811 	msr	BASEPRI, r3
 800ec98:	f3bf 8f6f 	isb	sy
 800ec9c:	f3bf 8f4f 	dsb	sy
 800eca0:	b662      	cpsie	i
 800eca2:	623b      	str	r3, [r7, #32]
}
 800eca4:	bf00      	nop
 800eca6:	bf00      	nop
 800eca8:	e7fd      	b.n	800eca6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d103      	bne.n	800ecb8 <xQueueReceiveFromISR+0x40>
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <xQueueReceiveFromISR+0x44>
 800ecb8:	2301      	movs	r3, #1
 800ecba:	e000      	b.n	800ecbe <xQueueReceiveFromISR+0x46>
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d10d      	bne.n	800ecde <xQueueReceiveFromISR+0x66>
	__asm volatile
 800ecc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecc6:	b672      	cpsid	i
 800ecc8:	f383 8811 	msr	BASEPRI, r3
 800eccc:	f3bf 8f6f 	isb	sy
 800ecd0:	f3bf 8f4f 	dsb	sy
 800ecd4:	b662      	cpsie	i
 800ecd6:	61fb      	str	r3, [r7, #28]
}
 800ecd8:	bf00      	nop
 800ecda:	bf00      	nop
 800ecdc:	e7fd      	b.n	800ecda <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecde:	f002 f8e5 	bl	8010eac <vPortValidateInterruptPriority>
	__asm volatile
 800ece2:	f3ef 8211 	mrs	r2, BASEPRI
 800ece6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecea:	b672      	cpsid	i
 800ecec:	f383 8811 	msr	BASEPRI, r3
 800ecf0:	f3bf 8f6f 	isb	sy
 800ecf4:	f3bf 8f4f 	dsb	sy
 800ecf8:	b662      	cpsie	i
 800ecfa:	61ba      	str	r2, [r7, #24]
 800ecfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ecfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed00:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ed06:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d02f      	beq.n	800ed6e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ed14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed18:	68b9      	ldr	r1, [r7, #8]
 800ed1a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ed1c:	f000 f91e 	bl	800ef5c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed22:	1e5a      	subs	r2, r3, #1
 800ed24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed26:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed28:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ed2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ed30:	d112      	bne.n	800ed58 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed34:	691b      	ldr	r3, [r3, #16]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d016      	beq.n	800ed68 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed3c:	3310      	adds	r3, #16
 800ed3e:	4618      	mov	r0, r3
 800ed40:	f000 ff90 	bl	800fc64 <xTaskRemoveFromEventList>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00e      	beq.n	800ed68 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00b      	beq.n	800ed68 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	2201      	movs	r2, #1
 800ed54:	601a      	str	r2, [r3, #0]
 800ed56:	e007      	b.n	800ed68 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	b2db      	uxtb	r3, r3
 800ed60:	b25a      	sxtb	r2, r3
 800ed62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed6c:	e001      	b.n	800ed72 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed74:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	f383 8811 	msr	BASEPRI, r3
}
 800ed7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3738      	adds	r7, #56	@ 0x38
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d10d      	bne.n	800edb2 <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800ed96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9a:	b672      	cpsid	i
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	b662      	cpsie	i
 800edaa:	60bb      	str	r3, [r7, #8]
}
 800edac:	bf00      	nop
 800edae:	bf00      	nop
 800edb0:	e7fd      	b.n	800edae <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800edb2:	f001 ff93 	bl	8010cdc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edba:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800edbc:	f001 ffc4 	bl	8010d48 <vPortExitCritical>

	return uxReturn;
 800edc0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800edca:	b480      	push	{r7}
 800edcc:	b087      	sub	sp, #28
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d10d      	bne.n	800edf8 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800eddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ede0:	b672      	cpsid	i
 800ede2:	f383 8811 	msr	BASEPRI, r3
 800ede6:	f3bf 8f6f 	isb	sy
 800edea:	f3bf 8f4f 	dsb	sy
 800edee:	b662      	cpsie	i
 800edf0:	60fb      	str	r3, [r7, #12]
}
 800edf2:	bf00      	nop
 800edf4:	bf00      	nop
 800edf6:	e7fd      	b.n	800edf4 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800edfc:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800edfe:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ee00:	4618      	mov	r0, r3
 800ee02:	371c      	adds	r7, #28
 800ee04:	46bd      	mov	sp, r7
 800ee06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee0a:	4770      	bx	lr

0800ee0c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d10d      	bne.n	800ee3a <vQueueDelete+0x2e>
	__asm volatile
 800ee1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee22:	b672      	cpsid	i
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	b662      	cpsie	i
 800ee32:	60bb      	str	r3, [r7, #8]
}
 800ee34:	bf00      	nop
 800ee36:	bf00      	nop
 800ee38:	e7fd      	b.n	800ee36 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f000 f95e 	bl	800f0fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ee40:	68fb      	ldr	r3, [r7, #12]
 800ee42:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d102      	bne.n	800ee50 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800ee4a:	68f8      	ldr	r0, [r7, #12]
 800ee4c:	f002 f946 	bl	80110dc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ee50:	bf00      	nop
 800ee52:	3710      	adds	r7, #16
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d006      	beq.n	800ee76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	e001      	b.n	800ee7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee76:	2300      	movs	r3, #0
 800ee78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
	}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3714      	adds	r7, #20
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b086      	sub	sp, #24
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	60f8      	str	r0, [r7, #12]
 800ee90:	60b9      	str	r1, [r7, #8]
 800ee92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee94:	2300      	movs	r3, #0
 800ee96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d10d      	bne.n	800eec2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d14d      	bne.n	800ef4a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	689b      	ldr	r3, [r3, #8]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f001 f93a 	bl	801012c <xTaskPriorityDisinherit>
 800eeb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2200      	movs	r2, #0
 800eebe:	609a      	str	r2, [r3, #8]
 800eec0:	e043      	b.n	800ef4a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d119      	bne.n	800eefc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	6858      	ldr	r0, [r3, #4]
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eed0:	461a      	mov	r2, r3
 800eed2:	68b9      	ldr	r1, [r7, #8]
 800eed4:	f011 fc0d 	bl	80206f2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	685a      	ldr	r2, [r3, #4]
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eee0:	441a      	add	r2, r3
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	685a      	ldr	r2, [r3, #4]
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	689b      	ldr	r3, [r3, #8]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d32b      	bcc.n	800ef4a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	681a      	ldr	r2, [r3, #0]
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	605a      	str	r2, [r3, #4]
 800eefa:	e026      	b.n	800ef4a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	68d8      	ldr	r0, [r3, #12]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef04:	461a      	mov	r2, r3
 800ef06:	68b9      	ldr	r1, [r7, #8]
 800ef08:	f011 fbf3 	bl	80206f2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68da      	ldr	r2, [r3, #12]
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef14:	425b      	negs	r3, r3
 800ef16:	441a      	add	r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	68da      	ldr	r2, [r3, #12]
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d207      	bcs.n	800ef38 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	689a      	ldr	r2, [r3, #8]
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef30:	425b      	negs	r3, r3
 800ef32:	441a      	add	r2, r3
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d105      	bne.n	800ef4a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d002      	beq.n	800ef4a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ef44:	693b      	ldr	r3, [r7, #16]
 800ef46:	3b01      	subs	r3, #1
 800ef48:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef4a:	693b      	ldr	r3, [r7, #16]
 800ef4c:	1c5a      	adds	r2, r3, #1
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ef52:	697b      	ldr	r3, [r7, #20]
}
 800ef54:	4618      	mov	r0, r3
 800ef56:	3718      	adds	r7, #24
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d018      	beq.n	800efa0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	68da      	ldr	r2, [r3, #12]
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef76:	441a      	add	r2, r3
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	68da      	ldr	r2, [r3, #12]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	689b      	ldr	r3, [r3, #8]
 800ef84:	429a      	cmp	r2, r3
 800ef86:	d303      	bcc.n	800ef90 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	681a      	ldr	r2, [r3, #0]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	68d9      	ldr	r1, [r3, #12]
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ef98:	461a      	mov	r2, r3
 800ef9a:	6838      	ldr	r0, [r7, #0]
 800ef9c:	f011 fba9 	bl	80206f2 <memcpy>
	}
}
 800efa0:	bf00      	nop
 800efa2:	3708      	adds	r7, #8
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800efb0:	f001 fe94 	bl	8010cdc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800efba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efbc:	e011      	b.n	800efe2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d012      	beq.n	800efec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	3324      	adds	r3, #36	@ 0x24
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 fe4a 	bl	800fc64 <xTaskRemoveFromEventList>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800efd6:	f000 ff29 	bl	800fe2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800efda:	7bfb      	ldrb	r3, [r7, #15]
 800efdc:	3b01      	subs	r3, #1
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800efe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	dce9      	bgt.n	800efbe <prvUnlockQueue+0x16>
 800efea:	e000      	b.n	800efee <prvUnlockQueue+0x46>
					break;
 800efec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	22ff      	movs	r2, #255	@ 0xff
 800eff2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800eff6:	f001 fea7 	bl	8010d48 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800effa:	f001 fe6f 	bl	8010cdc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f004:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f006:	e011      	b.n	800f02c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	691b      	ldr	r3, [r3, #16]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d012      	beq.n	800f036 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	3310      	adds	r3, #16
 800f014:	4618      	mov	r0, r3
 800f016:	f000 fe25 	bl	800fc64 <xTaskRemoveFromEventList>
 800f01a:	4603      	mov	r3, r0
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d001      	beq.n	800f024 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f020:	f000 ff04 	bl	800fe2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f024:	7bbb      	ldrb	r3, [r7, #14]
 800f026:	3b01      	subs	r3, #1
 800f028:	b2db      	uxtb	r3, r3
 800f02a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f02c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f030:	2b00      	cmp	r3, #0
 800f032:	dce9      	bgt.n	800f008 <prvUnlockQueue+0x60>
 800f034:	e000      	b.n	800f038 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f036:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	22ff      	movs	r2, #255	@ 0xff
 800f03c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800f040:	f001 fe82 	bl	8010d48 <vPortExitCritical>
}
 800f044:	bf00      	nop
 800f046:	3710      	adds	r7, #16
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b084      	sub	sp, #16
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f054:	f001 fe42 	bl	8010cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d102      	bne.n	800f066 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f060:	2301      	movs	r3, #1
 800f062:	60fb      	str	r3, [r7, #12]
 800f064:	e001      	b.n	800f06a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f066:	2300      	movs	r3, #0
 800f068:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f06a:	f001 fe6d 	bl	8010d48 <vPortExitCritical>

	return xReturn;
 800f06e:	68fb      	ldr	r3, [r7, #12]
}
 800f070:	4618      	mov	r0, r3
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f080:	f001 fe2c 	bl	8010cdc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f08c:	429a      	cmp	r2, r3
 800f08e:	d102      	bne.n	800f096 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f090:	2301      	movs	r3, #1
 800f092:	60fb      	str	r3, [r7, #12]
 800f094:	e001      	b.n	800f09a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f096:	2300      	movs	r3, #0
 800f098:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f09a:	f001 fe55 	bl	8010d48 <vPortExitCritical>

	return xReturn;
 800f09e:	68fb      	ldr	r3, [r7, #12]
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3710      	adds	r7, #16
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}

0800f0a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b085      	sub	sp, #20
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	60fb      	str	r3, [r7, #12]
 800f0b6:	e014      	b.n	800f0e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f0b8:	4a0f      	ldr	r2, [pc, #60]	@ (800f0f8 <vQueueAddToRegistry+0x50>)
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d10b      	bne.n	800f0dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f0c4:	490c      	ldr	r1, [pc, #48]	@ (800f0f8 <vQueueAddToRegistry+0x50>)
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	683a      	ldr	r2, [r7, #0]
 800f0ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f0ce:	4a0a      	ldr	r2, [pc, #40]	@ (800f0f8 <vQueueAddToRegistry+0x50>)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	00db      	lsls	r3, r3, #3
 800f0d4:	4413      	add	r3, r2
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f0da:	e006      	b.n	800f0ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	3301      	adds	r3, #1
 800f0e0:	60fb      	str	r3, [r7, #12]
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	2b0b      	cmp	r3, #11
 800f0e6:	d9e7      	bls.n	800f0b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f0e8:	bf00      	nop
 800f0ea:	bf00      	nop
 800f0ec:	3714      	adds	r7, #20
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f4:	4770      	bx	lr
 800f0f6:	bf00      	nop
 800f0f8:	2000e9f4 	.word	0x2000e9f4

0800f0fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b085      	sub	sp, #20
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f104:	2300      	movs	r3, #0
 800f106:	60fb      	str	r3, [r7, #12]
 800f108:	e016      	b.n	800f138 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f10a:	4a10      	ldr	r2, [pc, #64]	@ (800f14c <vQueueUnregisterQueue+0x50>)
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	00db      	lsls	r3, r3, #3
 800f110:	4413      	add	r3, r2
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	687a      	ldr	r2, [r7, #4]
 800f116:	429a      	cmp	r2, r3
 800f118:	d10b      	bne.n	800f132 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f11a:	4a0c      	ldr	r2, [pc, #48]	@ (800f14c <vQueueUnregisterQueue+0x50>)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2100      	movs	r1, #0
 800f120:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f124:	4a09      	ldr	r2, [pc, #36]	@ (800f14c <vQueueUnregisterQueue+0x50>)
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	4413      	add	r3, r2
 800f12c:	2200      	movs	r2, #0
 800f12e:	605a      	str	r2, [r3, #4]
				break;
 800f130:	e006      	b.n	800f140 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	3301      	adds	r3, #1
 800f136:	60fb      	str	r3, [r7, #12]
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	2b0b      	cmp	r3, #11
 800f13c:	d9e5      	bls.n	800f10a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f13e:	bf00      	nop
 800f140:	bf00      	nop
 800f142:	3714      	adds	r7, #20
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr
 800f14c:	2000e9f4 	.word	0x2000e9f4

0800f150 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f150:	b580      	push	{r7, lr}
 800f152:	b086      	sub	sp, #24
 800f154:	af00      	add	r7, sp, #0
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	60b9      	str	r1, [r7, #8]
 800f15a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f160:	f001 fdbc 	bl	8010cdc <vPortEnterCritical>
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800f16a:	b25b      	sxtb	r3, r3
 800f16c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f170:	d103      	bne.n	800f17a <vQueueWaitForMessageRestricted+0x2a>
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	2200      	movs	r2, #0
 800f176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800f17a:	697b      	ldr	r3, [r7, #20]
 800f17c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f180:	b25b      	sxtb	r3, r3
 800f182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f186:	d103      	bne.n	800f190 <vQueueWaitForMessageRestricted+0x40>
 800f188:	697b      	ldr	r3, [r7, #20]
 800f18a:	2200      	movs	r2, #0
 800f18c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800f190:	f001 fdda 	bl	8010d48 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d106      	bne.n	800f1aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	3324      	adds	r3, #36	@ 0x24
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	68b9      	ldr	r1, [r7, #8]
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	f000 fd2f 	bl	800fc08 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f1aa:	6978      	ldr	r0, [r7, #20]
 800f1ac:	f7ff fefc 	bl	800efa8 <prvUnlockQueue>
	}
 800f1b0:	bf00      	nop
 800f1b2:	3718      	adds	r7, #24
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	bd80      	pop	{r7, pc}

0800f1b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b08e      	sub	sp, #56	@ 0x38
 800f1bc:	af04      	add	r7, sp, #16
 800f1be:	60f8      	str	r0, [r7, #12]
 800f1c0:	60b9      	str	r1, [r7, #8]
 800f1c2:	607a      	str	r2, [r7, #4]
 800f1c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f1c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d10d      	bne.n	800f1e8 <xTaskCreateStatic+0x30>
	__asm volatile
 800f1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1d0:	b672      	cpsid	i
 800f1d2:	f383 8811 	msr	BASEPRI, r3
 800f1d6:	f3bf 8f6f 	isb	sy
 800f1da:	f3bf 8f4f 	dsb	sy
 800f1de:	b662      	cpsie	i
 800f1e0:	623b      	str	r3, [r7, #32]
}
 800f1e2:	bf00      	nop
 800f1e4:	bf00      	nop
 800f1e6:	e7fd      	b.n	800f1e4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d10d      	bne.n	800f20a <xTaskCreateStatic+0x52>
	__asm volatile
 800f1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1f2:	b672      	cpsid	i
 800f1f4:	f383 8811 	msr	BASEPRI, r3
 800f1f8:	f3bf 8f6f 	isb	sy
 800f1fc:	f3bf 8f4f 	dsb	sy
 800f200:	b662      	cpsie	i
 800f202:	61fb      	str	r3, [r7, #28]
}
 800f204:	bf00      	nop
 800f206:	bf00      	nop
 800f208:	e7fd      	b.n	800f206 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f20a:	23a8      	movs	r3, #168	@ 0xa8
 800f20c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	2ba8      	cmp	r3, #168	@ 0xa8
 800f212:	d00d      	beq.n	800f230 <xTaskCreateStatic+0x78>
	__asm volatile
 800f214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f218:	b672      	cpsid	i
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	b662      	cpsie	i
 800f228:	61bb      	str	r3, [r7, #24]
}
 800f22a:	bf00      	nop
 800f22c:	bf00      	nop
 800f22e:	e7fd      	b.n	800f22c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f230:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f234:	2b00      	cmp	r3, #0
 800f236:	d01e      	beq.n	800f276 <xTaskCreateStatic+0xbe>
 800f238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d01b      	beq.n	800f276 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f23e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f240:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f244:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f246:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24a:	2202      	movs	r2, #2
 800f24c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f250:	2300      	movs	r3, #0
 800f252:	9303      	str	r3, [sp, #12]
 800f254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f256:	9302      	str	r3, [sp, #8]
 800f258:	f107 0314 	add.w	r3, r7, #20
 800f25c:	9301      	str	r3, [sp, #4]
 800f25e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f260:	9300      	str	r3, [sp, #0]
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	687a      	ldr	r2, [r7, #4]
 800f266:	68b9      	ldr	r1, [r7, #8]
 800f268:	68f8      	ldr	r0, [r7, #12]
 800f26a:	f000 f851 	bl	800f310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f26e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800f270:	f000 f8f8 	bl	800f464 <prvAddNewTaskToReadyList>
 800f274:	e001      	b.n	800f27a <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800f276:	2300      	movs	r3, #0
 800f278:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f27a:	697b      	ldr	r3, [r7, #20]
	}
 800f27c:	4618      	mov	r0, r3
 800f27e:	3728      	adds	r7, #40	@ 0x28
 800f280:	46bd      	mov	sp, r7
 800f282:	bd80      	pop	{r7, pc}

0800f284 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f284:	b580      	push	{r7, lr}
 800f286:	b08c      	sub	sp, #48	@ 0x30
 800f288:	af04      	add	r7, sp, #16
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	603b      	str	r3, [r7, #0]
 800f290:	4613      	mov	r3, r2
 800f292:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f294:	88fb      	ldrh	r3, [r7, #6]
 800f296:	009b      	lsls	r3, r3, #2
 800f298:	4618      	mov	r0, r3
 800f29a:	f001 fe4d 	bl	8010f38 <pvPortMalloc>
 800f29e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d00e      	beq.n	800f2c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f2a6:	20a8      	movs	r0, #168	@ 0xa8
 800f2a8:	f001 fe46 	bl	8010f38 <pvPortMalloc>
 800f2ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f2ae:	69fb      	ldr	r3, [r7, #28]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d003      	beq.n	800f2bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f2b4:	69fb      	ldr	r3, [r7, #28]
 800f2b6:	697a      	ldr	r2, [r7, #20]
 800f2b8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f2ba:	e005      	b.n	800f2c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f2bc:	6978      	ldr	r0, [r7, #20]
 800f2be:	f001 ff0d 	bl	80110dc <vPortFree>
 800f2c2:	e001      	b.n	800f2c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d017      	beq.n	800f2fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f2ce:	69fb      	ldr	r3, [r7, #28]
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f2d6:	88fa      	ldrh	r2, [r7, #6]
 800f2d8:	2300      	movs	r3, #0
 800f2da:	9303      	str	r3, [sp, #12]
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	9302      	str	r3, [sp, #8]
 800f2e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f2e2:	9301      	str	r3, [sp, #4]
 800f2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2e6:	9300      	str	r3, [sp, #0]
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	68b9      	ldr	r1, [r7, #8]
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 f80f 	bl	800f310 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2f2:	69f8      	ldr	r0, [r7, #28]
 800f2f4:	f000 f8b6 	bl	800f464 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	61bb      	str	r3, [r7, #24]
 800f2fc:	e002      	b.n	800f304 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f302:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f304:	69bb      	ldr	r3, [r7, #24]
	}
 800f306:	4618      	mov	r0, r3
 800f308:	3720      	adds	r7, #32
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
	...

0800f310 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b088      	sub	sp, #32
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	60b9      	str	r1, [r7, #8]
 800f31a:	607a      	str	r2, [r7, #4]
 800f31c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f31e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f320:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	461a      	mov	r2, r3
 800f328:	21a5      	movs	r1, #165	@ 0xa5
 800f32a:	f011 f90f 	bl	802054c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f332:	6879      	ldr	r1, [r7, #4]
 800f334:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800f338:	440b      	add	r3, r1
 800f33a:	009b      	lsls	r3, r3, #2
 800f33c:	4413      	add	r3, r2
 800f33e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	f023 0307 	bic.w	r3, r3, #7
 800f346:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	f003 0307 	and.w	r3, r3, #7
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d00d      	beq.n	800f36e <prvInitialiseNewTask+0x5e>
	__asm volatile
 800f352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f356:	b672      	cpsid	i
 800f358:	f383 8811 	msr	BASEPRI, r3
 800f35c:	f3bf 8f6f 	isb	sy
 800f360:	f3bf 8f4f 	dsb	sy
 800f364:	b662      	cpsie	i
 800f366:	617b      	str	r3, [r7, #20]
}
 800f368:	bf00      	nop
 800f36a:	bf00      	nop
 800f36c:	e7fd      	b.n	800f36a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d01f      	beq.n	800f3b4 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f374:	2300      	movs	r3, #0
 800f376:	61fb      	str	r3, [r7, #28]
 800f378:	e012      	b.n	800f3a0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f37a:	68ba      	ldr	r2, [r7, #8]
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	4413      	add	r3, r2
 800f380:	7819      	ldrb	r1, [r3, #0]
 800f382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f384:	69fb      	ldr	r3, [r7, #28]
 800f386:	4413      	add	r3, r2
 800f388:	3334      	adds	r3, #52	@ 0x34
 800f38a:	460a      	mov	r2, r1
 800f38c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	69fb      	ldr	r3, [r7, #28]
 800f392:	4413      	add	r3, r2
 800f394:	781b      	ldrb	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d006      	beq.n	800f3a8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	3301      	adds	r3, #1
 800f39e:	61fb      	str	r3, [r7, #28]
 800f3a0:	69fb      	ldr	r3, [r7, #28]
 800f3a2:	2b0f      	cmp	r3, #15
 800f3a4:	d9e9      	bls.n	800f37a <prvInitialiseNewTask+0x6a>
 800f3a6:	e000      	b.n	800f3aa <prvInitialiseNewTask+0x9a>
			{
				break;
 800f3a8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800f3b2:	e003      	b.n	800f3bc <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f3b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3be:	2b37      	cmp	r3, #55	@ 0x37
 800f3c0:	d901      	bls.n	800f3c6 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f3c2:	2337      	movs	r3, #55	@ 0x37
 800f3c4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3ca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f3d0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3d4:	2200      	movs	r2, #0
 800f3d6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3da:	3304      	adds	r3, #4
 800f3dc:	4618      	mov	r0, r3
 800f3de:	f7fe fce5 	bl	800ddac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3e4:	3318      	adds	r3, #24
 800f3e6:	4618      	mov	r0, r3
 800f3e8:	f7fe fce0 	bl	800ddac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f3f0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f400:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f404:	2200      	movs	r2, #0
 800f406:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f40c:	2200      	movs	r2, #0
 800f40e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f414:	3354      	adds	r3, #84	@ 0x54
 800f416:	224c      	movs	r2, #76	@ 0x4c
 800f418:	2100      	movs	r1, #0
 800f41a:	4618      	mov	r0, r3
 800f41c:	f011 f896 	bl	802054c <memset>
 800f420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f422:	4a0d      	ldr	r2, [pc, #52]	@ (800f458 <prvInitialiseNewTask+0x148>)
 800f424:	659a      	str	r2, [r3, #88]	@ 0x58
 800f426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f428:	4a0c      	ldr	r2, [pc, #48]	@ (800f45c <prvInitialiseNewTask+0x14c>)
 800f42a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800f42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f42e:	4a0c      	ldr	r2, [pc, #48]	@ (800f460 <prvInitialiseNewTask+0x150>)
 800f430:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f432:	683a      	ldr	r2, [r7, #0]
 800f434:	68f9      	ldr	r1, [r7, #12]
 800f436:	69b8      	ldr	r0, [r7, #24]
 800f438:	f001 fb44 	bl	8010ac4 <pxPortInitialiseStack>
 800f43c:	4602      	mov	r2, r0
 800f43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f440:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f444:	2b00      	cmp	r3, #0
 800f446:	d002      	beq.n	800f44e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f44a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f44c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f44e:	bf00      	nop
 800f450:	3720      	adds	r7, #32
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	20025770 	.word	0x20025770
 800f45c:	200257d8 	.word	0x200257d8
 800f460:	20025840 	.word	0x20025840

0800f464 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f46c:	f001 fc36 	bl	8010cdc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f470:	4b2d      	ldr	r3, [pc, #180]	@ (800f528 <prvAddNewTaskToReadyList+0xc4>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	3301      	adds	r3, #1
 800f476:	4a2c      	ldr	r2, [pc, #176]	@ (800f528 <prvAddNewTaskToReadyList+0xc4>)
 800f478:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f47a:	4b2c      	ldr	r3, [pc, #176]	@ (800f52c <prvAddNewTaskToReadyList+0xc8>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d109      	bne.n	800f496 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f482:	4a2a      	ldr	r2, [pc, #168]	@ (800f52c <prvAddNewTaskToReadyList+0xc8>)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f488:	4b27      	ldr	r3, [pc, #156]	@ (800f528 <prvAddNewTaskToReadyList+0xc4>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	2b01      	cmp	r3, #1
 800f48e:	d110      	bne.n	800f4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f490:	f000 fcf0 	bl	800fe74 <prvInitialiseTaskLists>
 800f494:	e00d      	b.n	800f4b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f496:	4b26      	ldr	r3, [pc, #152]	@ (800f530 <prvAddNewTaskToReadyList+0xcc>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d109      	bne.n	800f4b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f49e:	4b23      	ldr	r3, [pc, #140]	@ (800f52c <prvAddNewTaskToReadyList+0xc8>)
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d802      	bhi.n	800f4b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f4ac:	4a1f      	ldr	r2, [pc, #124]	@ (800f52c <prvAddNewTaskToReadyList+0xc8>)
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f4b2:	4b20      	ldr	r3, [pc, #128]	@ (800f534 <prvAddNewTaskToReadyList+0xd0>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	3301      	adds	r3, #1
 800f4b8:	4a1e      	ldr	r2, [pc, #120]	@ (800f534 <prvAddNewTaskToReadyList+0xd0>)
 800f4ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f4bc:	4b1d      	ldr	r3, [pc, #116]	@ (800f534 <prvAddNewTaskToReadyList+0xd0>)
 800f4be:	681a      	ldr	r2, [r3, #0]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800f538 <prvAddNewTaskToReadyList+0xd4>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	429a      	cmp	r2, r3
 800f4ce:	d903      	bls.n	800f4d8 <prvAddNewTaskToReadyList+0x74>
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4d4:	4a18      	ldr	r2, [pc, #96]	@ (800f538 <prvAddNewTaskToReadyList+0xd4>)
 800f4d6:	6013      	str	r3, [r2, #0]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4dc:	4613      	mov	r3, r2
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	4413      	add	r3, r2
 800f4e2:	009b      	lsls	r3, r3, #2
 800f4e4:	4a15      	ldr	r2, [pc, #84]	@ (800f53c <prvAddNewTaskToReadyList+0xd8>)
 800f4e6:	441a      	add	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	3304      	adds	r3, #4
 800f4ec:	4619      	mov	r1, r3
 800f4ee:	4610      	mov	r0, r2
 800f4f0:	f7fe fc69 	bl	800ddc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4f4:	f001 fc28 	bl	8010d48 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4f8:	4b0d      	ldr	r3, [pc, #52]	@ (800f530 <prvAddNewTaskToReadyList+0xcc>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d00e      	beq.n	800f51e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f500:	4b0a      	ldr	r3, [pc, #40]	@ (800f52c <prvAddNewTaskToReadyList+0xc8>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f50a:	429a      	cmp	r2, r3
 800f50c:	d207      	bcs.n	800f51e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f50e:	4b0c      	ldr	r3, [pc, #48]	@ (800f540 <prvAddNewTaskToReadyList+0xdc>)
 800f510:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f514:	601a      	str	r2, [r3, #0]
 800f516:	f3bf 8f4f 	dsb	sy
 800f51a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f51e:	bf00      	nop
 800f520:	3708      	adds	r7, #8
 800f522:	46bd      	mov	sp, r7
 800f524:	bd80      	pop	{r7, pc}
 800f526:	bf00      	nop
 800f528:	2000ef28 	.word	0x2000ef28
 800f52c:	2000ea54 	.word	0x2000ea54
 800f530:	2000ef34 	.word	0x2000ef34
 800f534:	2000ef44 	.word	0x2000ef44
 800f538:	2000ef30 	.word	0x2000ef30
 800f53c:	2000ea58 	.word	0x2000ea58
 800f540:	e000ed04 	.word	0xe000ed04

0800f544 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800f544:	b580      	push	{r7, lr}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800f54c:	f001 fbc6 	bl	8010cdc <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d102      	bne.n	800f55c <vTaskDelete+0x18>
 800f556:	4b2e      	ldr	r3, [pc, #184]	@ (800f610 <vTaskDelete+0xcc>)
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	e000      	b.n	800f55e <vTaskDelete+0x1a>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	3304      	adds	r3, #4
 800f564:	4618      	mov	r0, r3
 800f566:	f7fe fc8b 	bl	800de80 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d004      	beq.n	800f57c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3318      	adds	r3, #24
 800f576:	4618      	mov	r0, r3
 800f578:	f7fe fc82 	bl	800de80 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800f57c:	4b25      	ldr	r3, [pc, #148]	@ (800f614 <vTaskDelete+0xd0>)
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	3301      	adds	r3, #1
 800f582:	4a24      	ldr	r2, [pc, #144]	@ (800f614 <vTaskDelete+0xd0>)
 800f584:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800f586:	4b22      	ldr	r3, [pc, #136]	@ (800f610 <vTaskDelete+0xcc>)
 800f588:	681b      	ldr	r3, [r3, #0]
 800f58a:	68fa      	ldr	r2, [r7, #12]
 800f58c:	429a      	cmp	r2, r3
 800f58e:	d10b      	bne.n	800f5a8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	3304      	adds	r3, #4
 800f594:	4619      	mov	r1, r3
 800f596:	4820      	ldr	r0, [pc, #128]	@ (800f618 <vTaskDelete+0xd4>)
 800f598:	f7fe fc15 	bl	800ddc6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800f59c:	4b1f      	ldr	r3, [pc, #124]	@ (800f61c <vTaskDelete+0xd8>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	4a1e      	ldr	r2, [pc, #120]	@ (800f61c <vTaskDelete+0xd8>)
 800f5a4:	6013      	str	r3, [r2, #0]
 800f5a6:	e009      	b.n	800f5bc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f5a8:	4b1d      	ldr	r3, [pc, #116]	@ (800f620 <vTaskDelete+0xdc>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	3b01      	subs	r3, #1
 800f5ae:	4a1c      	ldr	r2, [pc, #112]	@ (800f620 <vTaskDelete+0xdc>)
 800f5b0:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800f5b2:	68f8      	ldr	r0, [r7, #12]
 800f5b4:	f000 fccc 	bl	800ff50 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f5b8:	f000 fd02 	bl	800ffc0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800f5bc:	f001 fbc4 	bl	8010d48 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f5c0:	4b18      	ldr	r3, [pc, #96]	@ (800f624 <vTaskDelete+0xe0>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d01e      	beq.n	800f606 <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 800f5c8:	4b11      	ldr	r3, [pc, #68]	@ (800f610 <vTaskDelete+0xcc>)
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	68fa      	ldr	r2, [r7, #12]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d119      	bne.n	800f606 <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f5d2:	4b15      	ldr	r3, [pc, #84]	@ (800f628 <vTaskDelete+0xe4>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d00d      	beq.n	800f5f6 <vTaskDelete+0xb2>
	__asm volatile
 800f5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5de:	b672      	cpsid	i
 800f5e0:	f383 8811 	msr	BASEPRI, r3
 800f5e4:	f3bf 8f6f 	isb	sy
 800f5e8:	f3bf 8f4f 	dsb	sy
 800f5ec:	b662      	cpsie	i
 800f5ee:	60bb      	str	r3, [r7, #8]
}
 800f5f0:	bf00      	nop
 800f5f2:	bf00      	nop
 800f5f4:	e7fd      	b.n	800f5f2 <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800f5f6:	4b0d      	ldr	r3, [pc, #52]	@ (800f62c <vTaskDelete+0xe8>)
 800f5f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5fc:	601a      	str	r2, [r3, #0]
 800f5fe:	f3bf 8f4f 	dsb	sy
 800f602:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f606:	bf00      	nop
 800f608:	3710      	adds	r7, #16
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bd80      	pop	{r7, pc}
 800f60e:	bf00      	nop
 800f610:	2000ea54 	.word	0x2000ea54
 800f614:	2000ef44 	.word	0x2000ef44
 800f618:	2000eefc 	.word	0x2000eefc
 800f61c:	2000ef10 	.word	0x2000ef10
 800f620:	2000ef28 	.word	0x2000ef28
 800f624:	2000ef34 	.word	0x2000ef34
 800f628:	2000ef50 	.word	0x2000ef50
 800f62c:	e000ed04 	.word	0xe000ed04

0800f630 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f638:	2300      	movs	r3, #0
 800f63a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d01a      	beq.n	800f678 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f642:	4b15      	ldr	r3, [pc, #84]	@ (800f698 <vTaskDelay+0x68>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d00d      	beq.n	800f666 <vTaskDelay+0x36>
	__asm volatile
 800f64a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f64e:	b672      	cpsid	i
 800f650:	f383 8811 	msr	BASEPRI, r3
 800f654:	f3bf 8f6f 	isb	sy
 800f658:	f3bf 8f4f 	dsb	sy
 800f65c:	b662      	cpsie	i
 800f65e:	60bb      	str	r3, [r7, #8]
}
 800f660:	bf00      	nop
 800f662:	bf00      	nop
 800f664:	e7fd      	b.n	800f662 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f666:	f000 f88f 	bl	800f788 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f66a:	2100      	movs	r1, #0
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 fe6d 	bl	801034c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f672:	f000 f897 	bl	800f7a4 <xTaskResumeAll>
 800f676:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d107      	bne.n	800f68e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f67e:	4b07      	ldr	r3, [pc, #28]	@ (800f69c <vTaskDelay+0x6c>)
 800f680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f684:	601a      	str	r2, [r3, #0]
 800f686:	f3bf 8f4f 	dsb	sy
 800f68a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f68e:	bf00      	nop
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop
 800f698:	2000ef50 	.word	0x2000ef50
 800f69c:	e000ed04 	.word	0xe000ed04

0800f6a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b08a      	sub	sp, #40	@ 0x28
 800f6a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f6ae:	463a      	mov	r2, r7
 800f6b0:	1d39      	adds	r1, r7, #4
 800f6b2:	f107 0308 	add.w	r3, r7, #8
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f7fe fb24 	bl	800dd04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f6bc:	6839      	ldr	r1, [r7, #0]
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68ba      	ldr	r2, [r7, #8]
 800f6c2:	9202      	str	r2, [sp, #8]
 800f6c4:	9301      	str	r3, [sp, #4]
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	9300      	str	r3, [sp, #0]
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	460a      	mov	r2, r1
 800f6ce:	4926      	ldr	r1, [pc, #152]	@ (800f768 <vTaskStartScheduler+0xc8>)
 800f6d0:	4826      	ldr	r0, [pc, #152]	@ (800f76c <vTaskStartScheduler+0xcc>)
 800f6d2:	f7ff fd71 	bl	800f1b8 <xTaskCreateStatic>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	4a25      	ldr	r2, [pc, #148]	@ (800f770 <vTaskStartScheduler+0xd0>)
 800f6da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f6dc:	4b24      	ldr	r3, [pc, #144]	@ (800f770 <vTaskStartScheduler+0xd0>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d002      	beq.n	800f6ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	617b      	str	r3, [r7, #20]
 800f6e8:	e001      	b.n	800f6ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f6ee:	697b      	ldr	r3, [r7, #20]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	d102      	bne.n	800f6fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f6f4:	f000 fe7e 	bl	80103f4 <xTimerCreateTimerTask>
 800f6f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d11d      	bne.n	800f73c <vTaskStartScheduler+0x9c>
	__asm volatile
 800f700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f704:	b672      	cpsid	i
 800f706:	f383 8811 	msr	BASEPRI, r3
 800f70a:	f3bf 8f6f 	isb	sy
 800f70e:	f3bf 8f4f 	dsb	sy
 800f712:	b662      	cpsie	i
 800f714:	613b      	str	r3, [r7, #16]
}
 800f716:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f718:	4b16      	ldr	r3, [pc, #88]	@ (800f774 <vTaskStartScheduler+0xd4>)
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3354      	adds	r3, #84	@ 0x54
 800f71e:	4a16      	ldr	r2, [pc, #88]	@ (800f778 <vTaskStartScheduler+0xd8>)
 800f720:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f722:	4b16      	ldr	r3, [pc, #88]	@ (800f77c <vTaskStartScheduler+0xdc>)
 800f724:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f728:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f72a:	4b15      	ldr	r3, [pc, #84]	@ (800f780 <vTaskStartScheduler+0xe0>)
 800f72c:	2201      	movs	r2, #1
 800f72e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f730:	4b14      	ldr	r3, [pc, #80]	@ (800f784 <vTaskStartScheduler+0xe4>)
 800f732:	2200      	movs	r2, #0
 800f734:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f736:	f001 fa53 	bl	8010be0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f73a:	e011      	b.n	800f760 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f742:	d10d      	bne.n	800f760 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f748:	b672      	cpsid	i
 800f74a:	f383 8811 	msr	BASEPRI, r3
 800f74e:	f3bf 8f6f 	isb	sy
 800f752:	f3bf 8f4f 	dsb	sy
 800f756:	b662      	cpsie	i
 800f758:	60fb      	str	r3, [r7, #12]
}
 800f75a:	bf00      	nop
 800f75c:	bf00      	nop
 800f75e:	e7fd      	b.n	800f75c <vTaskStartScheduler+0xbc>
}
 800f760:	bf00      	nop
 800f762:	3718      	adds	r7, #24
 800f764:	46bd      	mov	sp, r7
 800f766:	bd80      	pop	{r7, pc}
 800f768:	08021374 	.word	0x08021374
 800f76c:	0800fe45 	.word	0x0800fe45
 800f770:	2000ef4c 	.word	0x2000ef4c
 800f774:	2000ea54 	.word	0x2000ea54
 800f778:	2000003c 	.word	0x2000003c
 800f77c:	2000ef48 	.word	0x2000ef48
 800f780:	2000ef34 	.word	0x2000ef34
 800f784:	2000ef2c 	.word	0x2000ef2c

0800f788 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f788:	b480      	push	{r7}
 800f78a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f78c:	4b04      	ldr	r3, [pc, #16]	@ (800f7a0 <vTaskSuspendAll+0x18>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	3301      	adds	r3, #1
 800f792:	4a03      	ldr	r2, [pc, #12]	@ (800f7a0 <vTaskSuspendAll+0x18>)
 800f794:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f796:	bf00      	nop
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	2000ef50 	.word	0x2000ef50

0800f7a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f7b2:	4b43      	ldr	r3, [pc, #268]	@ (800f8c0 <xTaskResumeAll+0x11c>)
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d10d      	bne.n	800f7d6 <xTaskResumeAll+0x32>
	__asm volatile
 800f7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7be:	b672      	cpsid	i
 800f7c0:	f383 8811 	msr	BASEPRI, r3
 800f7c4:	f3bf 8f6f 	isb	sy
 800f7c8:	f3bf 8f4f 	dsb	sy
 800f7cc:	b662      	cpsie	i
 800f7ce:	603b      	str	r3, [r7, #0]
}
 800f7d0:	bf00      	nop
 800f7d2:	bf00      	nop
 800f7d4:	e7fd      	b.n	800f7d2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f7d6:	f001 fa81 	bl	8010cdc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f7da:	4b39      	ldr	r3, [pc, #228]	@ (800f8c0 <xTaskResumeAll+0x11c>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	3b01      	subs	r3, #1
 800f7e0:	4a37      	ldr	r2, [pc, #220]	@ (800f8c0 <xTaskResumeAll+0x11c>)
 800f7e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7e4:	4b36      	ldr	r3, [pc, #216]	@ (800f8c0 <xTaskResumeAll+0x11c>)
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d162      	bne.n	800f8b2 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f7ec:	4b35      	ldr	r3, [pc, #212]	@ (800f8c4 <xTaskResumeAll+0x120>)
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d05e      	beq.n	800f8b2 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f7f4:	e02f      	b.n	800f856 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f7f6:	4b34      	ldr	r3, [pc, #208]	@ (800f8c8 <xTaskResumeAll+0x124>)
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	3318      	adds	r3, #24
 800f802:	4618      	mov	r0, r3
 800f804:	f7fe fb3c 	bl	800de80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	3304      	adds	r3, #4
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fe fb37 	bl	800de80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f816:	4b2d      	ldr	r3, [pc, #180]	@ (800f8cc <xTaskResumeAll+0x128>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d903      	bls.n	800f826 <xTaskResumeAll+0x82>
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f822:	4a2a      	ldr	r2, [pc, #168]	@ (800f8cc <xTaskResumeAll+0x128>)
 800f824:	6013      	str	r3, [r2, #0]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f82a:	4613      	mov	r3, r2
 800f82c:	009b      	lsls	r3, r3, #2
 800f82e:	4413      	add	r3, r2
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	4a27      	ldr	r2, [pc, #156]	@ (800f8d0 <xTaskResumeAll+0x12c>)
 800f834:	441a      	add	r2, r3
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	3304      	adds	r3, #4
 800f83a:	4619      	mov	r1, r3
 800f83c:	4610      	mov	r0, r2
 800f83e:	f7fe fac2 	bl	800ddc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f846:	4b23      	ldr	r3, [pc, #140]	@ (800f8d4 <xTaskResumeAll+0x130>)
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d302      	bcc.n	800f856 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f850:	4b21      	ldr	r3, [pc, #132]	@ (800f8d8 <xTaskResumeAll+0x134>)
 800f852:	2201      	movs	r2, #1
 800f854:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f856:	4b1c      	ldr	r3, [pc, #112]	@ (800f8c8 <xTaskResumeAll+0x124>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d1cb      	bne.n	800f7f6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d001      	beq.n	800f868 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f864:	f000 fbac 	bl	800ffc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f868:	4b1c      	ldr	r3, [pc, #112]	@ (800f8dc <xTaskResumeAll+0x138>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d010      	beq.n	800f896 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f874:	f000 f858 	bl	800f928 <xTaskIncrementTick>
 800f878:	4603      	mov	r3, r0
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d002      	beq.n	800f884 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f87e:	4b16      	ldr	r3, [pc, #88]	@ (800f8d8 <xTaskResumeAll+0x134>)
 800f880:	2201      	movs	r2, #1
 800f882:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	3b01      	subs	r3, #1
 800f888:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1f1      	bne.n	800f874 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f890:	4b12      	ldr	r3, [pc, #72]	@ (800f8dc <xTaskResumeAll+0x138>)
 800f892:	2200      	movs	r2, #0
 800f894:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f896:	4b10      	ldr	r3, [pc, #64]	@ (800f8d8 <xTaskResumeAll+0x134>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d009      	beq.n	800f8b2 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f8a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f8e0 <xTaskResumeAll+0x13c>)
 800f8a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8a8:	601a      	str	r2, [r3, #0]
 800f8aa:	f3bf 8f4f 	dsb	sy
 800f8ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f8b2:	f001 fa49 	bl	8010d48 <vPortExitCritical>

	return xAlreadyYielded;
 800f8b6:	68bb      	ldr	r3, [r7, #8]
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3710      	adds	r7, #16
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}
 800f8c0:	2000ef50 	.word	0x2000ef50
 800f8c4:	2000ef28 	.word	0x2000ef28
 800f8c8:	2000eee8 	.word	0x2000eee8
 800f8cc:	2000ef30 	.word	0x2000ef30
 800f8d0:	2000ea58 	.word	0x2000ea58
 800f8d4:	2000ea54 	.word	0x2000ea54
 800f8d8:	2000ef3c 	.word	0x2000ef3c
 800f8dc:	2000ef38 	.word	0x2000ef38
 800f8e0:	e000ed04 	.word	0xe000ed04

0800f8e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b083      	sub	sp, #12
 800f8e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f8ea:	4b05      	ldr	r3, [pc, #20]	@ (800f900 <xTaskGetTickCount+0x1c>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f8f0:	687b      	ldr	r3, [r7, #4]
}
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	370c      	adds	r7, #12
 800f8f6:	46bd      	mov	sp, r7
 800f8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	2000ef2c 	.word	0x2000ef2c

0800f904 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f90a:	f001 facf 	bl	8010eac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f90e:	2300      	movs	r3, #0
 800f910:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f912:	4b04      	ldr	r3, [pc, #16]	@ (800f924 <xTaskGetTickCountFromISR+0x20>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f918:	683b      	ldr	r3, [r7, #0]
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3708      	adds	r7, #8
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}
 800f922:	bf00      	nop
 800f924:	2000ef2c 	.word	0x2000ef2c

0800f928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b086      	sub	sp, #24
 800f92c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f92e:	2300      	movs	r3, #0
 800f930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f932:	4b50      	ldr	r3, [pc, #320]	@ (800fa74 <xTaskIncrementTick+0x14c>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	f040 808c 	bne.w	800fa54 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f93c:	4b4e      	ldr	r3, [pc, #312]	@ (800fa78 <xTaskIncrementTick+0x150>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	3301      	adds	r3, #1
 800f942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f944:	4a4c      	ldr	r2, [pc, #304]	@ (800fa78 <xTaskIncrementTick+0x150>)
 800f946:	693b      	ldr	r3, [r7, #16]
 800f948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d123      	bne.n	800f998 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f950:	4b4a      	ldr	r3, [pc, #296]	@ (800fa7c <xTaskIncrementTick+0x154>)
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00d      	beq.n	800f976 <xTaskIncrementTick+0x4e>
	__asm volatile
 800f95a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f95e:	b672      	cpsid	i
 800f960:	f383 8811 	msr	BASEPRI, r3
 800f964:	f3bf 8f6f 	isb	sy
 800f968:	f3bf 8f4f 	dsb	sy
 800f96c:	b662      	cpsie	i
 800f96e:	603b      	str	r3, [r7, #0]
}
 800f970:	bf00      	nop
 800f972:	bf00      	nop
 800f974:	e7fd      	b.n	800f972 <xTaskIncrementTick+0x4a>
 800f976:	4b41      	ldr	r3, [pc, #260]	@ (800fa7c <xTaskIncrementTick+0x154>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	60fb      	str	r3, [r7, #12]
 800f97c:	4b40      	ldr	r3, [pc, #256]	@ (800fa80 <xTaskIncrementTick+0x158>)
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	4a3e      	ldr	r2, [pc, #248]	@ (800fa7c <xTaskIncrementTick+0x154>)
 800f982:	6013      	str	r3, [r2, #0]
 800f984:	4a3e      	ldr	r2, [pc, #248]	@ (800fa80 <xTaskIncrementTick+0x158>)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	6013      	str	r3, [r2, #0]
 800f98a:	4b3e      	ldr	r3, [pc, #248]	@ (800fa84 <xTaskIncrementTick+0x15c>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	3301      	adds	r3, #1
 800f990:	4a3c      	ldr	r2, [pc, #240]	@ (800fa84 <xTaskIncrementTick+0x15c>)
 800f992:	6013      	str	r3, [r2, #0]
 800f994:	f000 fb14 	bl	800ffc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f998:	4b3b      	ldr	r3, [pc, #236]	@ (800fa88 <xTaskIncrementTick+0x160>)
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	693a      	ldr	r2, [r7, #16]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d349      	bcc.n	800fa36 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f9a2:	4b36      	ldr	r3, [pc, #216]	@ (800fa7c <xTaskIncrementTick+0x154>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d104      	bne.n	800f9b6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9ac:	4b36      	ldr	r3, [pc, #216]	@ (800fa88 <xTaskIncrementTick+0x160>)
 800f9ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f9b2:	601a      	str	r2, [r3, #0]
					break;
 800f9b4:	e03f      	b.n	800fa36 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f9b6:	4b31      	ldr	r3, [pc, #196]	@ (800fa7c <xTaskIncrementTick+0x154>)
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	68db      	ldr	r3, [r3, #12]
 800f9bc:	68db      	ldr	r3, [r3, #12]
 800f9be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f9c0:	68bb      	ldr	r3, [r7, #8]
 800f9c2:	685b      	ldr	r3, [r3, #4]
 800f9c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f9c6:	693a      	ldr	r2, [r7, #16]
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d203      	bcs.n	800f9d6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f9ce:	4a2e      	ldr	r2, [pc, #184]	@ (800fa88 <xTaskIncrementTick+0x160>)
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f9d4:	e02f      	b.n	800fa36 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f9d6:	68bb      	ldr	r3, [r7, #8]
 800f9d8:	3304      	adds	r3, #4
 800f9da:	4618      	mov	r0, r3
 800f9dc:	f7fe fa50 	bl	800de80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d004      	beq.n	800f9f2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f9e8:	68bb      	ldr	r3, [r7, #8]
 800f9ea:	3318      	adds	r3, #24
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	f7fe fa47 	bl	800de80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f9f6:	4b25      	ldr	r3, [pc, #148]	@ (800fa8c <xTaskIncrementTick+0x164>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d903      	bls.n	800fa06 <xTaskIncrementTick+0xde>
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa02:	4a22      	ldr	r2, [pc, #136]	@ (800fa8c <xTaskIncrementTick+0x164>)
 800fa04:	6013      	str	r3, [r2, #0]
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa0a:	4613      	mov	r3, r2
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	4413      	add	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	4a1f      	ldr	r2, [pc, #124]	@ (800fa90 <xTaskIncrementTick+0x168>)
 800fa14:	441a      	add	r2, r3
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	3304      	adds	r3, #4
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	4610      	mov	r0, r2
 800fa1e:	f7fe f9d2 	bl	800ddc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fa22:	68bb      	ldr	r3, [r7, #8]
 800fa24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa26:	4b1b      	ldr	r3, [pc, #108]	@ (800fa94 <xTaskIncrementTick+0x16c>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d3b8      	bcc.n	800f9a2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800fa30:	2301      	movs	r3, #1
 800fa32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa34:	e7b5      	b.n	800f9a2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fa36:	4b17      	ldr	r3, [pc, #92]	@ (800fa94 <xTaskIncrementTick+0x16c>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fa3c:	4914      	ldr	r1, [pc, #80]	@ (800fa90 <xTaskIncrementTick+0x168>)
 800fa3e:	4613      	mov	r3, r2
 800fa40:	009b      	lsls	r3, r3, #2
 800fa42:	4413      	add	r3, r2
 800fa44:	009b      	lsls	r3, r3, #2
 800fa46:	440b      	add	r3, r1
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b01      	cmp	r3, #1
 800fa4c:	d907      	bls.n	800fa5e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800fa4e:	2301      	movs	r3, #1
 800fa50:	617b      	str	r3, [r7, #20]
 800fa52:	e004      	b.n	800fa5e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fa54:	4b10      	ldr	r3, [pc, #64]	@ (800fa98 <xTaskIncrementTick+0x170>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	3301      	adds	r3, #1
 800fa5a:	4a0f      	ldr	r2, [pc, #60]	@ (800fa98 <xTaskIncrementTick+0x170>)
 800fa5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fa5e:	4b0f      	ldr	r3, [pc, #60]	@ (800fa9c <xTaskIncrementTick+0x174>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800fa66:	2301      	movs	r3, #1
 800fa68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fa6a:	697b      	ldr	r3, [r7, #20]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3718      	adds	r7, #24
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	2000ef50 	.word	0x2000ef50
 800fa78:	2000ef2c 	.word	0x2000ef2c
 800fa7c:	2000eee0 	.word	0x2000eee0
 800fa80:	2000eee4 	.word	0x2000eee4
 800fa84:	2000ef40 	.word	0x2000ef40
 800fa88:	2000ef48 	.word	0x2000ef48
 800fa8c:	2000ef30 	.word	0x2000ef30
 800fa90:	2000ea58 	.word	0x2000ea58
 800fa94:	2000ea54 	.word	0x2000ea54
 800fa98:	2000ef38 	.word	0x2000ef38
 800fa9c:	2000ef3c 	.word	0x2000ef3c

0800faa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b086      	sub	sp, #24
 800faa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800faa6:	4b3e      	ldr	r3, [pc, #248]	@ (800fba0 <vTaskSwitchContext+0x100>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d003      	beq.n	800fab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800faae:	4b3d      	ldr	r3, [pc, #244]	@ (800fba4 <vTaskSwitchContext+0x104>)
 800fab0:	2201      	movs	r2, #1
 800fab2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fab4:	e070      	b.n	800fb98 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800fab6:	4b3b      	ldr	r3, [pc, #236]	@ (800fba4 <vTaskSwitchContext+0x104>)
 800fab8:	2200      	movs	r2, #0
 800faba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800fabc:	4b3a      	ldr	r3, [pc, #232]	@ (800fba8 <vTaskSwitchContext+0x108>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fac2:	613b      	str	r3, [r7, #16]
 800fac4:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800fac8:	60fb      	str	r3, [r7, #12]
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	429a      	cmp	r2, r3
 800fad2:	d111      	bne.n	800faf8 <vTaskSwitchContext+0x58>
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	3304      	adds	r3, #4
 800fad8:	681b      	ldr	r3, [r3, #0]
 800fada:	68fa      	ldr	r2, [r7, #12]
 800fadc:	429a      	cmp	r2, r3
 800fade:	d10b      	bne.n	800faf8 <vTaskSwitchContext+0x58>
 800fae0:	693b      	ldr	r3, [r7, #16]
 800fae2:	3308      	adds	r3, #8
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68fa      	ldr	r2, [r7, #12]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d105      	bne.n	800faf8 <vTaskSwitchContext+0x58>
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	330c      	adds	r3, #12
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	68fa      	ldr	r2, [r7, #12]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	d008      	beq.n	800fb0a <vTaskSwitchContext+0x6a>
 800faf8:	4b2b      	ldr	r3, [pc, #172]	@ (800fba8 <vTaskSwitchContext+0x108>)
 800fafa:	681a      	ldr	r2, [r3, #0]
 800fafc:	4b2a      	ldr	r3, [pc, #168]	@ (800fba8 <vTaskSwitchContext+0x108>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	3334      	adds	r3, #52	@ 0x34
 800fb02:	4619      	mov	r1, r3
 800fb04:	4610      	mov	r0, r2
 800fb06:	f7f0 fef1 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb0a:	4b28      	ldr	r3, [pc, #160]	@ (800fbac <vTaskSwitchContext+0x10c>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	617b      	str	r3, [r7, #20]
 800fb10:	e013      	b.n	800fb3a <vTaskSwitchContext+0x9a>
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d10d      	bne.n	800fb34 <vTaskSwitchContext+0x94>
	__asm volatile
 800fb18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb1c:	b672      	cpsid	i
 800fb1e:	f383 8811 	msr	BASEPRI, r3
 800fb22:	f3bf 8f6f 	isb	sy
 800fb26:	f3bf 8f4f 	dsb	sy
 800fb2a:	b662      	cpsie	i
 800fb2c:	607b      	str	r3, [r7, #4]
}
 800fb2e:	bf00      	nop
 800fb30:	bf00      	nop
 800fb32:	e7fd      	b.n	800fb30 <vTaskSwitchContext+0x90>
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	3b01      	subs	r3, #1
 800fb38:	617b      	str	r3, [r7, #20]
 800fb3a:	491d      	ldr	r1, [pc, #116]	@ (800fbb0 <vTaskSwitchContext+0x110>)
 800fb3c:	697a      	ldr	r2, [r7, #20]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	4413      	add	r3, r2
 800fb44:	009b      	lsls	r3, r3, #2
 800fb46:	440b      	add	r3, r1
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d0e1      	beq.n	800fb12 <vTaskSwitchContext+0x72>
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	4613      	mov	r3, r2
 800fb52:	009b      	lsls	r3, r3, #2
 800fb54:	4413      	add	r3, r2
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	4a15      	ldr	r2, [pc, #84]	@ (800fbb0 <vTaskSwitchContext+0x110>)
 800fb5a:	4413      	add	r3, r2
 800fb5c:	60bb      	str	r3, [r7, #8]
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	685a      	ldr	r2, [r3, #4]
 800fb64:	68bb      	ldr	r3, [r7, #8]
 800fb66:	605a      	str	r2, [r3, #4]
 800fb68:	68bb      	ldr	r3, [r7, #8]
 800fb6a:	685a      	ldr	r2, [r3, #4]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	3308      	adds	r3, #8
 800fb70:	429a      	cmp	r2, r3
 800fb72:	d104      	bne.n	800fb7e <vTaskSwitchContext+0xde>
 800fb74:	68bb      	ldr	r3, [r7, #8]
 800fb76:	685b      	ldr	r3, [r3, #4]
 800fb78:	685a      	ldr	r2, [r3, #4]
 800fb7a:	68bb      	ldr	r3, [r7, #8]
 800fb7c:	605a      	str	r2, [r3, #4]
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	68db      	ldr	r3, [r3, #12]
 800fb84:	4a08      	ldr	r2, [pc, #32]	@ (800fba8 <vTaskSwitchContext+0x108>)
 800fb86:	6013      	str	r3, [r2, #0]
 800fb88:	4a08      	ldr	r2, [pc, #32]	@ (800fbac <vTaskSwitchContext+0x10c>)
 800fb8a:	697b      	ldr	r3, [r7, #20]
 800fb8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb8e:	4b06      	ldr	r3, [pc, #24]	@ (800fba8 <vTaskSwitchContext+0x108>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	3354      	adds	r3, #84	@ 0x54
 800fb94:	4a07      	ldr	r2, [pc, #28]	@ (800fbb4 <vTaskSwitchContext+0x114>)
 800fb96:	6013      	str	r3, [r2, #0]
}
 800fb98:	bf00      	nop
 800fb9a:	3718      	adds	r7, #24
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	2000ef50 	.word	0x2000ef50
 800fba4:	2000ef3c 	.word	0x2000ef3c
 800fba8:	2000ea54 	.word	0x2000ea54
 800fbac:	2000ef30 	.word	0x2000ef30
 800fbb0:	2000ea58 	.word	0x2000ea58
 800fbb4:	2000003c 	.word	0x2000003c

0800fbb8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fbb8:	b580      	push	{r7, lr}
 800fbba:	b084      	sub	sp, #16
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
 800fbc0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d10d      	bne.n	800fbe4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800fbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbcc:	b672      	cpsid	i
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
 800fbda:	b662      	cpsie	i
 800fbdc:	60fb      	str	r3, [r7, #12]
}
 800fbde:	bf00      	nop
 800fbe0:	bf00      	nop
 800fbe2:	e7fd      	b.n	800fbe0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fbe4:	4b07      	ldr	r3, [pc, #28]	@ (800fc04 <vTaskPlaceOnEventList+0x4c>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	3318      	adds	r3, #24
 800fbea:	4619      	mov	r1, r3
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7fe f90e 	bl	800de0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fbf2:	2101      	movs	r1, #1
 800fbf4:	6838      	ldr	r0, [r7, #0]
 800fbf6:	f000 fba9 	bl	801034c <prvAddCurrentTaskToDelayedList>
}
 800fbfa:	bf00      	nop
 800fbfc:	3710      	adds	r7, #16
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	2000ea54 	.word	0x2000ea54

0800fc08 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fc08:	b580      	push	{r7, lr}
 800fc0a:	b086      	sub	sp, #24
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	60f8      	str	r0, [r7, #12]
 800fc10:	60b9      	str	r1, [r7, #8]
 800fc12:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d10d      	bne.n	800fc36 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800fc1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc1e:	b672      	cpsid	i
 800fc20:	f383 8811 	msr	BASEPRI, r3
 800fc24:	f3bf 8f6f 	isb	sy
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	b662      	cpsie	i
 800fc2e:	617b      	str	r3, [r7, #20]
}
 800fc30:	bf00      	nop
 800fc32:	bf00      	nop
 800fc34:	e7fd      	b.n	800fc32 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fc36:	4b0a      	ldr	r3, [pc, #40]	@ (800fc60 <vTaskPlaceOnEventListRestricted+0x58>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	3318      	adds	r3, #24
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	68f8      	ldr	r0, [r7, #12]
 800fc40:	f7fe f8c1 	bl	800ddc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d002      	beq.n	800fc50 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800fc4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fc4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fc50:	6879      	ldr	r1, [r7, #4]
 800fc52:	68b8      	ldr	r0, [r7, #8]
 800fc54:	f000 fb7a 	bl	801034c <prvAddCurrentTaskToDelayedList>
	}
 800fc58:	bf00      	nop
 800fc5a:	3718      	adds	r7, #24
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	2000ea54 	.word	0x2000ea54

0800fc64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	68db      	ldr	r3, [r3, #12]
 800fc70:	68db      	ldr	r3, [r3, #12]
 800fc72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fc74:	693b      	ldr	r3, [r7, #16]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d10d      	bne.n	800fc96 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800fc7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc7e:	b672      	cpsid	i
 800fc80:	f383 8811 	msr	BASEPRI, r3
 800fc84:	f3bf 8f6f 	isb	sy
 800fc88:	f3bf 8f4f 	dsb	sy
 800fc8c:	b662      	cpsie	i
 800fc8e:	60fb      	str	r3, [r7, #12]
}
 800fc90:	bf00      	nop
 800fc92:	bf00      	nop
 800fc94:	e7fd      	b.n	800fc92 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	3318      	adds	r3, #24
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fe f8f0 	bl	800de80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fca0:	4b1d      	ldr	r3, [pc, #116]	@ (800fd18 <xTaskRemoveFromEventList+0xb4>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d11d      	bne.n	800fce4 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fca8:	693b      	ldr	r3, [r7, #16]
 800fcaa:	3304      	adds	r3, #4
 800fcac:	4618      	mov	r0, r3
 800fcae:	f7fe f8e7 	bl	800de80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcb6:	4b19      	ldr	r3, [pc, #100]	@ (800fd1c <xTaskRemoveFromEventList+0xb8>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	429a      	cmp	r2, r3
 800fcbc:	d903      	bls.n	800fcc6 <xTaskRemoveFromEventList+0x62>
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcc2:	4a16      	ldr	r2, [pc, #88]	@ (800fd1c <xTaskRemoveFromEventList+0xb8>)
 800fcc4:	6013      	str	r3, [r2, #0]
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcca:	4613      	mov	r3, r2
 800fccc:	009b      	lsls	r3, r3, #2
 800fcce:	4413      	add	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4a13      	ldr	r2, [pc, #76]	@ (800fd20 <xTaskRemoveFromEventList+0xbc>)
 800fcd4:	441a      	add	r2, r3
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	3304      	adds	r3, #4
 800fcda:	4619      	mov	r1, r3
 800fcdc:	4610      	mov	r0, r2
 800fcde:	f7fe f872 	bl	800ddc6 <vListInsertEnd>
 800fce2:	e005      	b.n	800fcf0 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	3318      	adds	r3, #24
 800fce8:	4619      	mov	r1, r3
 800fcea:	480e      	ldr	r0, [pc, #56]	@ (800fd24 <xTaskRemoveFromEventList+0xc0>)
 800fcec:	f7fe f86b 	bl	800ddc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fcf4:	4b0c      	ldr	r3, [pc, #48]	@ (800fd28 <xTaskRemoveFromEventList+0xc4>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d905      	bls.n	800fd0a <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fd02:	4b0a      	ldr	r3, [pc, #40]	@ (800fd2c <xTaskRemoveFromEventList+0xc8>)
 800fd04:	2201      	movs	r2, #1
 800fd06:	601a      	str	r2, [r3, #0]
 800fd08:	e001      	b.n	800fd0e <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fd0e:	697b      	ldr	r3, [r7, #20]
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3718      	adds	r7, #24
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	2000ef50 	.word	0x2000ef50
 800fd1c:	2000ef30 	.word	0x2000ef30
 800fd20:	2000ea58 	.word	0x2000ea58
 800fd24:	2000eee8 	.word	0x2000eee8
 800fd28:	2000ea54 	.word	0x2000ea54
 800fd2c:	2000ef3c 	.word	0x2000ef3c

0800fd30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fd30:	b480      	push	{r7}
 800fd32:	b083      	sub	sp, #12
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fd38:	4b06      	ldr	r3, [pc, #24]	@ (800fd54 <vTaskInternalSetTimeOutState+0x24>)
 800fd3a:	681a      	ldr	r2, [r3, #0]
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fd40:	4b05      	ldr	r3, [pc, #20]	@ (800fd58 <vTaskInternalSetTimeOutState+0x28>)
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	605a      	str	r2, [r3, #4]
}
 800fd48:	bf00      	nop
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd52:	4770      	bx	lr
 800fd54:	2000ef40 	.word	0x2000ef40
 800fd58:	2000ef2c 	.word	0x2000ef2c

0800fd5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b088      	sub	sp, #32
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d10d      	bne.n	800fd88 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800fd6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd70:	b672      	cpsid	i
 800fd72:	f383 8811 	msr	BASEPRI, r3
 800fd76:	f3bf 8f6f 	isb	sy
 800fd7a:	f3bf 8f4f 	dsb	sy
 800fd7e:	b662      	cpsie	i
 800fd80:	613b      	str	r3, [r7, #16]
}
 800fd82:	bf00      	nop
 800fd84:	bf00      	nop
 800fd86:	e7fd      	b.n	800fd84 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10d      	bne.n	800fdaa <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800fd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd92:	b672      	cpsid	i
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	b662      	cpsie	i
 800fda2:	60fb      	str	r3, [r7, #12]
}
 800fda4:	bf00      	nop
 800fda6:	bf00      	nop
 800fda8:	e7fd      	b.n	800fda6 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800fdaa:	f000 ff97 	bl	8010cdc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fdae:	4b1d      	ldr	r3, [pc, #116]	@ (800fe24 <xTaskCheckForTimeOut+0xc8>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	685b      	ldr	r3, [r3, #4]
 800fdb8:	69ba      	ldr	r2, [r7, #24]
 800fdba:	1ad3      	subs	r3, r2, r3
 800fdbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdc6:	d102      	bne.n	800fdce <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	61fb      	str	r3, [r7, #28]
 800fdcc:	e023      	b.n	800fe16 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	4b15      	ldr	r3, [pc, #84]	@ (800fe28 <xTaskCheckForTimeOut+0xcc>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d007      	beq.n	800fdea <xTaskCheckForTimeOut+0x8e>
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	69ba      	ldr	r2, [r7, #24]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d302      	bcc.n	800fdea <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fde4:	2301      	movs	r3, #1
 800fde6:	61fb      	str	r3, [r7, #28]
 800fde8:	e015      	b.n	800fe16 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	697a      	ldr	r2, [r7, #20]
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d20b      	bcs.n	800fe0c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	1ad2      	subs	r2, r2, r3
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f7ff ff95 	bl	800fd30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fe06:	2300      	movs	r3, #0
 800fe08:	61fb      	str	r3, [r7, #28]
 800fe0a:	e004      	b.n	800fe16 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fe12:	2301      	movs	r3, #1
 800fe14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fe16:	f000 ff97 	bl	8010d48 <vPortExitCritical>

	return xReturn;
 800fe1a:	69fb      	ldr	r3, [r7, #28]
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3720      	adds	r7, #32
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	2000ef2c 	.word	0x2000ef2c
 800fe28:	2000ef40 	.word	0x2000ef40

0800fe2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fe2c:	b480      	push	{r7}
 800fe2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fe30:	4b03      	ldr	r3, [pc, #12]	@ (800fe40 <vTaskMissedYield+0x14>)
 800fe32:	2201      	movs	r2, #1
 800fe34:	601a      	str	r2, [r3, #0]
}
 800fe36:	bf00      	nop
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe3e:	4770      	bx	lr
 800fe40:	2000ef3c 	.word	0x2000ef3c

0800fe44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fe4c:	f000 f852 	bl	800fef4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fe50:	4b06      	ldr	r3, [pc, #24]	@ (800fe6c <prvIdleTask+0x28>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	2b01      	cmp	r3, #1
 800fe56:	d9f9      	bls.n	800fe4c <prvIdleTask+0x8>
			{
				taskYIELD();
 800fe58:	4b05      	ldr	r3, [pc, #20]	@ (800fe70 <prvIdleTask+0x2c>)
 800fe5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fe5e:	601a      	str	r2, [r3, #0]
 800fe60:	f3bf 8f4f 	dsb	sy
 800fe64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fe68:	e7f0      	b.n	800fe4c <prvIdleTask+0x8>
 800fe6a:	bf00      	nop
 800fe6c:	2000ea58 	.word	0x2000ea58
 800fe70:	e000ed04 	.word	0xe000ed04

0800fe74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	607b      	str	r3, [r7, #4]
 800fe7e:	e00c      	b.n	800fe9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fe80:	687a      	ldr	r2, [r7, #4]
 800fe82:	4613      	mov	r3, r2
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	4413      	add	r3, r2
 800fe88:	009b      	lsls	r3, r3, #2
 800fe8a:	4a12      	ldr	r2, [pc, #72]	@ (800fed4 <prvInitialiseTaskLists+0x60>)
 800fe8c:	4413      	add	r3, r2
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7fd ff6c 	bl	800dd6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	3301      	adds	r3, #1
 800fe98:	607b      	str	r3, [r7, #4]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b37      	cmp	r3, #55	@ 0x37
 800fe9e:	d9ef      	bls.n	800fe80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fea0:	480d      	ldr	r0, [pc, #52]	@ (800fed8 <prvInitialiseTaskLists+0x64>)
 800fea2:	f7fd ff63 	bl	800dd6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fea6:	480d      	ldr	r0, [pc, #52]	@ (800fedc <prvInitialiseTaskLists+0x68>)
 800fea8:	f7fd ff60 	bl	800dd6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800feac:	480c      	ldr	r0, [pc, #48]	@ (800fee0 <prvInitialiseTaskLists+0x6c>)
 800feae:	f7fd ff5d 	bl	800dd6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800feb2:	480c      	ldr	r0, [pc, #48]	@ (800fee4 <prvInitialiseTaskLists+0x70>)
 800feb4:	f7fd ff5a 	bl	800dd6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800feb8:	480b      	ldr	r0, [pc, #44]	@ (800fee8 <prvInitialiseTaskLists+0x74>)
 800feba:	f7fd ff57 	bl	800dd6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800febe:	4b0b      	ldr	r3, [pc, #44]	@ (800feec <prvInitialiseTaskLists+0x78>)
 800fec0:	4a05      	ldr	r2, [pc, #20]	@ (800fed8 <prvInitialiseTaskLists+0x64>)
 800fec2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fec4:	4b0a      	ldr	r3, [pc, #40]	@ (800fef0 <prvInitialiseTaskLists+0x7c>)
 800fec6:	4a05      	ldr	r2, [pc, #20]	@ (800fedc <prvInitialiseTaskLists+0x68>)
 800fec8:	601a      	str	r2, [r3, #0]
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	2000ea58 	.word	0x2000ea58
 800fed8:	2000eeb8 	.word	0x2000eeb8
 800fedc:	2000eecc 	.word	0x2000eecc
 800fee0:	2000eee8 	.word	0x2000eee8
 800fee4:	2000eefc 	.word	0x2000eefc
 800fee8:	2000ef14 	.word	0x2000ef14
 800feec:	2000eee0 	.word	0x2000eee0
 800fef0:	2000eee4 	.word	0x2000eee4

0800fef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fefa:	e019      	b.n	800ff30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fefc:	f000 feee 	bl	8010cdc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff00:	4b10      	ldr	r3, [pc, #64]	@ (800ff44 <prvCheckTasksWaitingTermination+0x50>)
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	68db      	ldr	r3, [r3, #12]
 800ff06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	3304      	adds	r3, #4
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fd ffb7 	bl	800de80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ff12:	4b0d      	ldr	r3, [pc, #52]	@ (800ff48 <prvCheckTasksWaitingTermination+0x54>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	3b01      	subs	r3, #1
 800ff18:	4a0b      	ldr	r2, [pc, #44]	@ (800ff48 <prvCheckTasksWaitingTermination+0x54>)
 800ff1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ff1c:	4b0b      	ldr	r3, [pc, #44]	@ (800ff4c <prvCheckTasksWaitingTermination+0x58>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	3b01      	subs	r3, #1
 800ff22:	4a0a      	ldr	r2, [pc, #40]	@ (800ff4c <prvCheckTasksWaitingTermination+0x58>)
 800ff24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ff26:	f000 ff0f 	bl	8010d48 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ff2a:	6878      	ldr	r0, [r7, #4]
 800ff2c:	f000 f810 	bl	800ff50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ff30:	4b06      	ldr	r3, [pc, #24]	@ (800ff4c <prvCheckTasksWaitingTermination+0x58>)
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1e1      	bne.n	800fefc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ff38:	bf00      	nop
 800ff3a:	bf00      	nop
 800ff3c:	3708      	adds	r7, #8
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}
 800ff42:	bf00      	nop
 800ff44:	2000eefc 	.word	0x2000eefc
 800ff48:	2000ef28 	.word	0x2000ef28
 800ff4c:	2000ef10 	.word	0x2000ef10

0800ff50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	3354      	adds	r3, #84	@ 0x54
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f010 fb0d 	bl	802057c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d108      	bne.n	800ff7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ff70:	4618      	mov	r0, r3
 800ff72:	f001 f8b3 	bl	80110dc <vPortFree>
				vPortFree( pxTCB );
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f001 f8b0 	bl	80110dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ff7c:	e01b      	b.n	800ffb6 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ff84:	2b01      	cmp	r3, #1
 800ff86:	d103      	bne.n	800ff90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f001 f8a7 	bl	80110dc <vPortFree>
	}
 800ff8e:	e012      	b.n	800ffb6 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ff96:	2b02      	cmp	r3, #2
 800ff98:	d00d      	beq.n	800ffb6 <prvDeleteTCB+0x66>
	__asm volatile
 800ff9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff9e:	b672      	cpsid	i
 800ffa0:	f383 8811 	msr	BASEPRI, r3
 800ffa4:	f3bf 8f6f 	isb	sy
 800ffa8:	f3bf 8f4f 	dsb	sy
 800ffac:	b662      	cpsie	i
 800ffae:	60fb      	str	r3, [r7, #12]
}
 800ffb0:	bf00      	nop
 800ffb2:	bf00      	nop
 800ffb4:	e7fd      	b.n	800ffb2 <prvDeleteTCB+0x62>
	}
 800ffb6:	bf00      	nop
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
	...

0800ffc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b083      	sub	sp, #12
 800ffc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ffc6:	4b0c      	ldr	r3, [pc, #48]	@ (800fff8 <prvResetNextTaskUnblockTime+0x38>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d104      	bne.n	800ffda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ffd0:	4b0a      	ldr	r3, [pc, #40]	@ (800fffc <prvResetNextTaskUnblockTime+0x3c>)
 800ffd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ffd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ffd8:	e008      	b.n	800ffec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffda:	4b07      	ldr	r3, [pc, #28]	@ (800fff8 <prvResetNextTaskUnblockTime+0x38>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	68db      	ldr	r3, [r3, #12]
 800ffe0:	68db      	ldr	r3, [r3, #12]
 800ffe2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	4a04      	ldr	r2, [pc, #16]	@ (800fffc <prvResetNextTaskUnblockTime+0x3c>)
 800ffea:	6013      	str	r3, [r2, #0]
}
 800ffec:	bf00      	nop
 800ffee:	370c      	adds	r7, #12
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	2000eee0 	.word	0x2000eee0
 800fffc:	2000ef48 	.word	0x2000ef48

08010000 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8010000:	b480      	push	{r7}
 8010002:	b083      	sub	sp, #12
 8010004:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8010006:	4b05      	ldr	r3, [pc, #20]	@ (801001c <xTaskGetCurrentTaskHandle+0x1c>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	607b      	str	r3, [r7, #4]

		return xReturn;
 801000c:	687b      	ldr	r3, [r7, #4]
	}
 801000e:	4618      	mov	r0, r3
 8010010:	370c      	adds	r7, #12
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop
 801001c:	2000ea54 	.word	0x2000ea54

08010020 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010020:	b480      	push	{r7}
 8010022:	b083      	sub	sp, #12
 8010024:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010026:	4b0b      	ldr	r3, [pc, #44]	@ (8010054 <xTaskGetSchedulerState+0x34>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d102      	bne.n	8010034 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801002e:	2301      	movs	r3, #1
 8010030:	607b      	str	r3, [r7, #4]
 8010032:	e008      	b.n	8010046 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010034:	4b08      	ldr	r3, [pc, #32]	@ (8010058 <xTaskGetSchedulerState+0x38>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	d102      	bne.n	8010042 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801003c:	2302      	movs	r3, #2
 801003e:	607b      	str	r3, [r7, #4]
 8010040:	e001      	b.n	8010046 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010042:	2300      	movs	r3, #0
 8010044:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010046:	687b      	ldr	r3, [r7, #4]
	}
 8010048:	4618      	mov	r0, r3
 801004a:	370c      	adds	r7, #12
 801004c:	46bd      	mov	sp, r7
 801004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010052:	4770      	bx	lr
 8010054:	2000ef34 	.word	0x2000ef34
 8010058:	2000ef50 	.word	0x2000ef50

0801005c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801005c:	b580      	push	{r7, lr}
 801005e:	b084      	sub	sp, #16
 8010060:	af00      	add	r7, sp, #0
 8010062:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010068:	2300      	movs	r3, #0
 801006a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d051      	beq.n	8010116 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010076:	4b2a      	ldr	r3, [pc, #168]	@ (8010120 <xTaskPriorityInherit+0xc4>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801007c:	429a      	cmp	r2, r3
 801007e:	d241      	bcs.n	8010104 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	699b      	ldr	r3, [r3, #24]
 8010084:	2b00      	cmp	r3, #0
 8010086:	db06      	blt.n	8010096 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010088:	4b25      	ldr	r3, [pc, #148]	@ (8010120 <xTaskPriorityInherit+0xc4>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801008e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010092:	68bb      	ldr	r3, [r7, #8]
 8010094:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	6959      	ldr	r1, [r3, #20]
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801009e:	4613      	mov	r3, r2
 80100a0:	009b      	lsls	r3, r3, #2
 80100a2:	4413      	add	r3, r2
 80100a4:	009b      	lsls	r3, r3, #2
 80100a6:	4a1f      	ldr	r2, [pc, #124]	@ (8010124 <xTaskPriorityInherit+0xc8>)
 80100a8:	4413      	add	r3, r2
 80100aa:	4299      	cmp	r1, r3
 80100ac:	d122      	bne.n	80100f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	3304      	adds	r3, #4
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fd fee4 	bl	800de80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100b8:	4b19      	ldr	r3, [pc, #100]	@ (8010120 <xTaskPriorityInherit+0xc4>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100c6:	4b18      	ldr	r3, [pc, #96]	@ (8010128 <xTaskPriorityInherit+0xcc>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d903      	bls.n	80100d6 <xTaskPriorityInherit+0x7a>
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80100d2:	4a15      	ldr	r2, [pc, #84]	@ (8010128 <xTaskPriorityInherit+0xcc>)
 80100d4:	6013      	str	r3, [r2, #0]
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100da:	4613      	mov	r3, r2
 80100dc:	009b      	lsls	r3, r3, #2
 80100de:	4413      	add	r3, r2
 80100e0:	009b      	lsls	r3, r3, #2
 80100e2:	4a10      	ldr	r2, [pc, #64]	@ (8010124 <xTaskPriorityInherit+0xc8>)
 80100e4:	441a      	add	r2, r3
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	3304      	adds	r3, #4
 80100ea:	4619      	mov	r1, r3
 80100ec:	4610      	mov	r0, r2
 80100ee:	f7fd fe6a 	bl	800ddc6 <vListInsertEnd>
 80100f2:	e004      	b.n	80100fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80100f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010120 <xTaskPriorityInherit+0xc4>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80100fe:	2301      	movs	r3, #1
 8010100:	60fb      	str	r3, [r7, #12]
 8010102:	e008      	b.n	8010116 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010108:	4b05      	ldr	r3, [pc, #20]	@ (8010120 <xTaskPriorityInherit+0xc4>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801010e:	429a      	cmp	r2, r3
 8010110:	d201      	bcs.n	8010116 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010112:	2301      	movs	r3, #1
 8010114:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010116:	68fb      	ldr	r3, [r7, #12]
	}
 8010118:	4618      	mov	r0, r3
 801011a:	3710      	adds	r7, #16
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}
 8010120:	2000ea54 	.word	0x2000ea54
 8010124:	2000ea58 	.word	0x2000ea58
 8010128:	2000ef30 	.word	0x2000ef30

0801012c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801012c:	b580      	push	{r7, lr}
 801012e:	b086      	sub	sp, #24
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010138:	2300      	movs	r3, #0
 801013a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d05c      	beq.n	80101fc <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010142:	4b31      	ldr	r3, [pc, #196]	@ (8010208 <xTaskPriorityDisinherit+0xdc>)
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	693a      	ldr	r2, [r7, #16]
 8010148:	429a      	cmp	r2, r3
 801014a:	d00d      	beq.n	8010168 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 801014c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010150:	b672      	cpsid	i
 8010152:	f383 8811 	msr	BASEPRI, r3
 8010156:	f3bf 8f6f 	isb	sy
 801015a:	f3bf 8f4f 	dsb	sy
 801015e:	b662      	cpsie	i
 8010160:	60fb      	str	r3, [r7, #12]
}
 8010162:	bf00      	nop
 8010164:	bf00      	nop
 8010166:	e7fd      	b.n	8010164 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801016c:	2b00      	cmp	r3, #0
 801016e:	d10d      	bne.n	801018c <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8010170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010174:	b672      	cpsid	i
 8010176:	f383 8811 	msr	BASEPRI, r3
 801017a:	f3bf 8f6f 	isb	sy
 801017e:	f3bf 8f4f 	dsb	sy
 8010182:	b662      	cpsie	i
 8010184:	60bb      	str	r3, [r7, #8]
}
 8010186:	bf00      	nop
 8010188:	bf00      	nop
 801018a:	e7fd      	b.n	8010188 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010190:	1e5a      	subs	r2, r3, #1
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010196:	693b      	ldr	r3, [r7, #16]
 8010198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801019a:	693b      	ldr	r3, [r7, #16]
 801019c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801019e:	429a      	cmp	r2, r3
 80101a0:	d02c      	beq.n	80101fc <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d128      	bne.n	80101fc <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	3304      	adds	r3, #4
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fd fe66 	bl	800de80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80101b4:	693b      	ldr	r3, [r7, #16]
 80101b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80101bc:	693b      	ldr	r3, [r7, #16]
 80101be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80101c4:	693b      	ldr	r3, [r7, #16]
 80101c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80101c8:	693b      	ldr	r3, [r7, #16]
 80101ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101cc:	4b0f      	ldr	r3, [pc, #60]	@ (801020c <xTaskPriorityDisinherit+0xe0>)
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	429a      	cmp	r2, r3
 80101d2:	d903      	bls.n	80101dc <xTaskPriorityDisinherit+0xb0>
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101d8:	4a0c      	ldr	r2, [pc, #48]	@ (801020c <xTaskPriorityDisinherit+0xe0>)
 80101da:	6013      	str	r3, [r2, #0]
 80101dc:	693b      	ldr	r3, [r7, #16]
 80101de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80101e0:	4613      	mov	r3, r2
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	4413      	add	r3, r2
 80101e6:	009b      	lsls	r3, r3, #2
 80101e8:	4a09      	ldr	r2, [pc, #36]	@ (8010210 <xTaskPriorityDisinherit+0xe4>)
 80101ea:	441a      	add	r2, r3
 80101ec:	693b      	ldr	r3, [r7, #16]
 80101ee:	3304      	adds	r3, #4
 80101f0:	4619      	mov	r1, r3
 80101f2:	4610      	mov	r0, r2
 80101f4:	f7fd fde7 	bl	800ddc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80101f8:	2301      	movs	r3, #1
 80101fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80101fc:	697b      	ldr	r3, [r7, #20]
	}
 80101fe:	4618      	mov	r0, r3
 8010200:	3718      	adds	r7, #24
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
 8010206:	bf00      	nop
 8010208:	2000ea54 	.word	0x2000ea54
 801020c:	2000ef30 	.word	0x2000ef30
 8010210:	2000ea58 	.word	0x2000ea58

08010214 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010214:	b580      	push	{r7, lr}
 8010216:	b088      	sub	sp, #32
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
 801021c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010222:	2301      	movs	r3, #1
 8010224:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d070      	beq.n	801030e <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801022c:	69bb      	ldr	r3, [r7, #24]
 801022e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010230:	2b00      	cmp	r3, #0
 8010232:	d10d      	bne.n	8010250 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8010234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010238:	b672      	cpsid	i
 801023a:	f383 8811 	msr	BASEPRI, r3
 801023e:	f3bf 8f6f 	isb	sy
 8010242:	f3bf 8f4f 	dsb	sy
 8010246:	b662      	cpsie	i
 8010248:	60fb      	str	r3, [r7, #12]
}
 801024a:	bf00      	nop
 801024c:	bf00      	nop
 801024e:	e7fd      	b.n	801024c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010254:	683a      	ldr	r2, [r7, #0]
 8010256:	429a      	cmp	r2, r3
 8010258:	d902      	bls.n	8010260 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801025a:	683b      	ldr	r3, [r7, #0]
 801025c:	61fb      	str	r3, [r7, #28]
 801025e:	e002      	b.n	8010266 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010260:	69bb      	ldr	r3, [r7, #24]
 8010262:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010264:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801026a:	69fa      	ldr	r2, [r7, #28]
 801026c:	429a      	cmp	r2, r3
 801026e:	d04e      	beq.n	801030e <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010274:	697a      	ldr	r2, [r7, #20]
 8010276:	429a      	cmp	r2, r3
 8010278:	d149      	bne.n	801030e <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801027a:	4b27      	ldr	r3, [pc, #156]	@ (8010318 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	69ba      	ldr	r2, [r7, #24]
 8010280:	429a      	cmp	r2, r3
 8010282:	d10d      	bne.n	80102a0 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 8010284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010288:	b672      	cpsid	i
 801028a:	f383 8811 	msr	BASEPRI, r3
 801028e:	f3bf 8f6f 	isb	sy
 8010292:	f3bf 8f4f 	dsb	sy
 8010296:	b662      	cpsie	i
 8010298:	60bb      	str	r3, [r7, #8]
}
 801029a:	bf00      	nop
 801029c:	bf00      	nop
 801029e:	e7fd      	b.n	801029c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80102a0:	69bb      	ldr	r3, [r7, #24]
 80102a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	69fa      	ldr	r2, [r7, #28]
 80102aa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	db04      	blt.n	80102be <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102b4:	69fb      	ldr	r3, [r7, #28]
 80102b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	6959      	ldr	r1, [r3, #20]
 80102c2:	693a      	ldr	r2, [r7, #16]
 80102c4:	4613      	mov	r3, r2
 80102c6:	009b      	lsls	r3, r3, #2
 80102c8:	4413      	add	r3, r2
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	4a13      	ldr	r2, [pc, #76]	@ (801031c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80102ce:	4413      	add	r3, r2
 80102d0:	4299      	cmp	r1, r3
 80102d2:	d11c      	bne.n	801030e <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	3304      	adds	r3, #4
 80102d8:	4618      	mov	r0, r3
 80102da:	f7fd fdd1 	bl	800de80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80102de:	69bb      	ldr	r3, [r7, #24]
 80102e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010320 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d903      	bls.n	80102f2 <vTaskPriorityDisinheritAfterTimeout+0xde>
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102ee:	4a0c      	ldr	r2, [pc, #48]	@ (8010320 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 80102f0:	6013      	str	r3, [r2, #0]
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80102f6:	4613      	mov	r3, r2
 80102f8:	009b      	lsls	r3, r3, #2
 80102fa:	4413      	add	r3, r2
 80102fc:	009b      	lsls	r3, r3, #2
 80102fe:	4a07      	ldr	r2, [pc, #28]	@ (801031c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010300:	441a      	add	r2, r3
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	3304      	adds	r3, #4
 8010306:	4619      	mov	r1, r3
 8010308:	4610      	mov	r0, r2
 801030a:	f7fd fd5c 	bl	800ddc6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801030e:	bf00      	nop
 8010310:	3720      	adds	r7, #32
 8010312:	46bd      	mov	sp, r7
 8010314:	bd80      	pop	{r7, pc}
 8010316:	bf00      	nop
 8010318:	2000ea54 	.word	0x2000ea54
 801031c:	2000ea58 	.word	0x2000ea58
 8010320:	2000ef30 	.word	0x2000ef30

08010324 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8010324:	b480      	push	{r7}
 8010326:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010328:	4b07      	ldr	r3, [pc, #28]	@ (8010348 <pvTaskIncrementMutexHeldCount+0x24>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d004      	beq.n	801033a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010330:	4b05      	ldr	r3, [pc, #20]	@ (8010348 <pvTaskIncrementMutexHeldCount+0x24>)
 8010332:	681b      	ldr	r3, [r3, #0]
 8010334:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010336:	3201      	adds	r2, #1
 8010338:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 801033a:	4b03      	ldr	r3, [pc, #12]	@ (8010348 <pvTaskIncrementMutexHeldCount+0x24>)
 801033c:	681b      	ldr	r3, [r3, #0]
	}
 801033e:	4618      	mov	r0, r3
 8010340:	46bd      	mov	sp, r7
 8010342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010346:	4770      	bx	lr
 8010348:	2000ea54 	.word	0x2000ea54

0801034c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b084      	sub	sp, #16
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
 8010354:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010356:	4b21      	ldr	r3, [pc, #132]	@ (80103dc <prvAddCurrentTaskToDelayedList+0x90>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801035c:	4b20      	ldr	r3, [pc, #128]	@ (80103e0 <prvAddCurrentTaskToDelayedList+0x94>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	3304      	adds	r3, #4
 8010362:	4618      	mov	r0, r3
 8010364:	f7fd fd8c 	bl	800de80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801036e:	d10a      	bne.n	8010386 <prvAddCurrentTaskToDelayedList+0x3a>
 8010370:	683b      	ldr	r3, [r7, #0]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d007      	beq.n	8010386 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010376:	4b1a      	ldr	r3, [pc, #104]	@ (80103e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	3304      	adds	r3, #4
 801037c:	4619      	mov	r1, r3
 801037e:	4819      	ldr	r0, [pc, #100]	@ (80103e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8010380:	f7fd fd21 	bl	800ddc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010384:	e026      	b.n	80103d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010386:	68fa      	ldr	r2, [r7, #12]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	4413      	add	r3, r2
 801038c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801038e:	4b14      	ldr	r3, [pc, #80]	@ (80103e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	68ba      	ldr	r2, [r7, #8]
 8010394:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010396:	68ba      	ldr	r2, [r7, #8]
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	429a      	cmp	r2, r3
 801039c:	d209      	bcs.n	80103b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801039e:	4b12      	ldr	r3, [pc, #72]	@ (80103e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80103a0:	681a      	ldr	r2, [r3, #0]
 80103a2:	4b0f      	ldr	r3, [pc, #60]	@ (80103e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	3304      	adds	r3, #4
 80103a8:	4619      	mov	r1, r3
 80103aa:	4610      	mov	r0, r2
 80103ac:	f7fd fd2f 	bl	800de0e <vListInsert>
}
 80103b0:	e010      	b.n	80103d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80103b2:	4b0e      	ldr	r3, [pc, #56]	@ (80103ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80103b4:	681a      	ldr	r2, [r3, #0]
 80103b6:	4b0a      	ldr	r3, [pc, #40]	@ (80103e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	3304      	adds	r3, #4
 80103bc:	4619      	mov	r1, r3
 80103be:	4610      	mov	r0, r2
 80103c0:	f7fd fd25 	bl	800de0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80103c4:	4b0a      	ldr	r3, [pc, #40]	@ (80103f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	68ba      	ldr	r2, [r7, #8]
 80103ca:	429a      	cmp	r2, r3
 80103cc:	d202      	bcs.n	80103d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80103ce:	4a08      	ldr	r2, [pc, #32]	@ (80103f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80103d0:	68bb      	ldr	r3, [r7, #8]
 80103d2:	6013      	str	r3, [r2, #0]
}
 80103d4:	bf00      	nop
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	2000ef2c 	.word	0x2000ef2c
 80103e0:	2000ea54 	.word	0x2000ea54
 80103e4:	2000ef14 	.word	0x2000ef14
 80103e8:	2000eee4 	.word	0x2000eee4
 80103ec:	2000eee0 	.word	0x2000eee0
 80103f0:	2000ef48 	.word	0x2000ef48

080103f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b08a      	sub	sp, #40	@ 0x28
 80103f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80103fa:	2300      	movs	r3, #0
 80103fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80103fe:	f000 fb21 	bl	8010a44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8010402:	4b1e      	ldr	r3, [pc, #120]	@ (801047c <xTimerCreateTimerTask+0x88>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d021      	beq.n	801044e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801040a:	2300      	movs	r3, #0
 801040c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801040e:	2300      	movs	r3, #0
 8010410:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8010412:	1d3a      	adds	r2, r7, #4
 8010414:	f107 0108 	add.w	r1, r7, #8
 8010418:	f107 030c 	add.w	r3, r7, #12
 801041c:	4618      	mov	r0, r3
 801041e:	f7fd fc8b 	bl	800dd38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8010422:	6879      	ldr	r1, [r7, #4]
 8010424:	68bb      	ldr	r3, [r7, #8]
 8010426:	68fa      	ldr	r2, [r7, #12]
 8010428:	9202      	str	r2, [sp, #8]
 801042a:	9301      	str	r3, [sp, #4]
 801042c:	2302      	movs	r3, #2
 801042e:	9300      	str	r3, [sp, #0]
 8010430:	2300      	movs	r3, #0
 8010432:	460a      	mov	r2, r1
 8010434:	4912      	ldr	r1, [pc, #72]	@ (8010480 <xTimerCreateTimerTask+0x8c>)
 8010436:	4813      	ldr	r0, [pc, #76]	@ (8010484 <xTimerCreateTimerTask+0x90>)
 8010438:	f7fe febe 	bl	800f1b8 <xTaskCreateStatic>
 801043c:	4603      	mov	r3, r0
 801043e:	4a12      	ldr	r2, [pc, #72]	@ (8010488 <xTimerCreateTimerTask+0x94>)
 8010440:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8010442:	4b11      	ldr	r3, [pc, #68]	@ (8010488 <xTimerCreateTimerTask+0x94>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d001      	beq.n	801044e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801044a:	2301      	movs	r3, #1
 801044c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801044e:	697b      	ldr	r3, [r7, #20]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d10d      	bne.n	8010470 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8010454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010458:	b672      	cpsid	i
 801045a:	f383 8811 	msr	BASEPRI, r3
 801045e:	f3bf 8f6f 	isb	sy
 8010462:	f3bf 8f4f 	dsb	sy
 8010466:	b662      	cpsie	i
 8010468:	613b      	str	r3, [r7, #16]
}
 801046a:	bf00      	nop
 801046c:	bf00      	nop
 801046e:	e7fd      	b.n	801046c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010470:	697b      	ldr	r3, [r7, #20]
}
 8010472:	4618      	mov	r0, r3
 8010474:	3718      	adds	r7, #24
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	2000ef84 	.word	0x2000ef84
 8010480:	0802137c 	.word	0x0802137c
 8010484:	080105cd 	.word	0x080105cd
 8010488:	2000ef88 	.word	0x2000ef88

0801048c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b08a      	sub	sp, #40	@ 0x28
 8010490:	af00      	add	r7, sp, #0
 8010492:	60f8      	str	r0, [r7, #12]
 8010494:	60b9      	str	r1, [r7, #8]
 8010496:	607a      	str	r2, [r7, #4]
 8010498:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801049a:	2300      	movs	r3, #0
 801049c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d10d      	bne.n	80104c0 <xTimerGenericCommand+0x34>
	__asm volatile
 80104a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104a8:	b672      	cpsid	i
 80104aa:	f383 8811 	msr	BASEPRI, r3
 80104ae:	f3bf 8f6f 	isb	sy
 80104b2:	f3bf 8f4f 	dsb	sy
 80104b6:	b662      	cpsie	i
 80104b8:	623b      	str	r3, [r7, #32]
}
 80104ba:	bf00      	nop
 80104bc:	bf00      	nop
 80104be:	e7fd      	b.n	80104bc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80104c0:	4b19      	ldr	r3, [pc, #100]	@ (8010528 <xTimerGenericCommand+0x9c>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d02a      	beq.n	801051e <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80104d4:	68bb      	ldr	r3, [r7, #8]
 80104d6:	2b05      	cmp	r3, #5
 80104d8:	dc18      	bgt.n	801050c <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80104da:	f7ff fda1 	bl	8010020 <xTaskGetSchedulerState>
 80104de:	4603      	mov	r3, r0
 80104e0:	2b02      	cmp	r3, #2
 80104e2:	d109      	bne.n	80104f8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80104e4:	4b10      	ldr	r3, [pc, #64]	@ (8010528 <xTimerGenericCommand+0x9c>)
 80104e6:	6818      	ldr	r0, [r3, #0]
 80104e8:	f107 0110 	add.w	r1, r7, #16
 80104ec:	2300      	movs	r3, #0
 80104ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80104f0:	f7fd ff7c 	bl	800e3ec <xQueueGenericSend>
 80104f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80104f6:	e012      	b.n	801051e <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80104f8:	4b0b      	ldr	r3, [pc, #44]	@ (8010528 <xTimerGenericCommand+0x9c>)
 80104fa:	6818      	ldr	r0, [r3, #0]
 80104fc:	f107 0110 	add.w	r1, r7, #16
 8010500:	2300      	movs	r3, #0
 8010502:	2200      	movs	r2, #0
 8010504:	f7fd ff72 	bl	800e3ec <xQueueGenericSend>
 8010508:	6278      	str	r0, [r7, #36]	@ 0x24
 801050a:	e008      	b.n	801051e <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801050c:	4b06      	ldr	r3, [pc, #24]	@ (8010528 <xTimerGenericCommand+0x9c>)
 801050e:	6818      	ldr	r0, [r3, #0]
 8010510:	f107 0110 	add.w	r1, r7, #16
 8010514:	2300      	movs	r3, #0
 8010516:	683a      	ldr	r2, [r7, #0]
 8010518:	f7fe f872 	bl	800e600 <xQueueGenericSendFromISR>
 801051c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801051e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010520:	4618      	mov	r0, r3
 8010522:	3728      	adds	r7, #40	@ 0x28
 8010524:	46bd      	mov	sp, r7
 8010526:	bd80      	pop	{r7, pc}
 8010528:	2000ef84 	.word	0x2000ef84

0801052c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b088      	sub	sp, #32
 8010530:	af02      	add	r7, sp, #8
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010536:	4b24      	ldr	r3, [pc, #144]	@ (80105c8 <prvProcessExpiredTimer+0x9c>)
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	68db      	ldr	r3, [r3, #12]
 801053c:	68db      	ldr	r3, [r3, #12]
 801053e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	3304      	adds	r3, #4
 8010544:	4618      	mov	r0, r3
 8010546:	f7fd fc9b 	bl	800de80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801054a:	697b      	ldr	r3, [r7, #20]
 801054c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010550:	f003 0304 	and.w	r3, r3, #4
 8010554:	2b00      	cmp	r3, #0
 8010556:	d025      	beq.n	80105a4 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	699a      	ldr	r2, [r3, #24]
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	18d1      	adds	r1, r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	683a      	ldr	r2, [r7, #0]
 8010564:	6978      	ldr	r0, [r7, #20]
 8010566:	f000 f8d7 	bl	8010718 <prvInsertTimerInActiveList>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d022      	beq.n	80105b6 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010570:	2300      	movs	r3, #0
 8010572:	9300      	str	r3, [sp, #0]
 8010574:	2300      	movs	r3, #0
 8010576:	687a      	ldr	r2, [r7, #4]
 8010578:	2100      	movs	r1, #0
 801057a:	6978      	ldr	r0, [r7, #20]
 801057c:	f7ff ff86 	bl	801048c <xTimerGenericCommand>
 8010580:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d116      	bne.n	80105b6 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8010588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801058c:	b672      	cpsid	i
 801058e:	f383 8811 	msr	BASEPRI, r3
 8010592:	f3bf 8f6f 	isb	sy
 8010596:	f3bf 8f4f 	dsb	sy
 801059a:	b662      	cpsie	i
 801059c:	60fb      	str	r3, [r7, #12]
}
 801059e:	bf00      	nop
 80105a0:	bf00      	nop
 80105a2:	e7fd      	b.n	80105a0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80105a4:	697b      	ldr	r3, [r7, #20]
 80105a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80105aa:	f023 0301 	bic.w	r3, r3, #1
 80105ae:	b2da      	uxtb	r2, r3
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	6a1b      	ldr	r3, [r3, #32]
 80105ba:	6978      	ldr	r0, [r7, #20]
 80105bc:	4798      	blx	r3
}
 80105be:	bf00      	nop
 80105c0:	3718      	adds	r7, #24
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}
 80105c6:	bf00      	nop
 80105c8:	2000ef7c 	.word	0x2000ef7c

080105cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	b084      	sub	sp, #16
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80105d4:	f107 0308 	add.w	r3, r7, #8
 80105d8:	4618      	mov	r0, r3
 80105da:	f000 f859 	bl	8010690 <prvGetNextExpireTime>
 80105de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	4619      	mov	r1, r3
 80105e4:	68f8      	ldr	r0, [r7, #12]
 80105e6:	f000 f805 	bl	80105f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80105ea:	f000 f8d7 	bl	801079c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80105ee:	bf00      	nop
 80105f0:	e7f0      	b.n	80105d4 <prvTimerTask+0x8>
	...

080105f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	b084      	sub	sp, #16
 80105f8:	af00      	add	r7, sp, #0
 80105fa:	6078      	str	r0, [r7, #4]
 80105fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80105fe:	f7ff f8c3 	bl	800f788 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010602:	f107 0308 	add.w	r3, r7, #8
 8010606:	4618      	mov	r0, r3
 8010608:	f000 f866 	bl	80106d8 <prvSampleTimeNow>
 801060c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	2b00      	cmp	r3, #0
 8010612:	d130      	bne.n	8010676 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010614:	683b      	ldr	r3, [r7, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d10a      	bne.n	8010630 <prvProcessTimerOrBlockTask+0x3c>
 801061a:	687a      	ldr	r2, [r7, #4]
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	429a      	cmp	r2, r3
 8010620:	d806      	bhi.n	8010630 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8010622:	f7ff f8bf 	bl	800f7a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010626:	68f9      	ldr	r1, [r7, #12]
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f7ff ff7f 	bl	801052c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801062e:	e024      	b.n	801067a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010630:	683b      	ldr	r3, [r7, #0]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d008      	beq.n	8010648 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010636:	4b13      	ldr	r3, [pc, #76]	@ (8010684 <prvProcessTimerOrBlockTask+0x90>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	681b      	ldr	r3, [r3, #0]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d101      	bne.n	8010644 <prvProcessTimerOrBlockTask+0x50>
 8010640:	2301      	movs	r3, #1
 8010642:	e000      	b.n	8010646 <prvProcessTimerOrBlockTask+0x52>
 8010644:	2300      	movs	r3, #0
 8010646:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010648:	4b0f      	ldr	r3, [pc, #60]	@ (8010688 <prvProcessTimerOrBlockTask+0x94>)
 801064a:	6818      	ldr	r0, [r3, #0]
 801064c:	687a      	ldr	r2, [r7, #4]
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	1ad3      	subs	r3, r2, r3
 8010652:	683a      	ldr	r2, [r7, #0]
 8010654:	4619      	mov	r1, r3
 8010656:	f7fe fd7b 	bl	800f150 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801065a:	f7ff f8a3 	bl	800f7a4 <xTaskResumeAll>
 801065e:	4603      	mov	r3, r0
 8010660:	2b00      	cmp	r3, #0
 8010662:	d10a      	bne.n	801067a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010664:	4b09      	ldr	r3, [pc, #36]	@ (801068c <prvProcessTimerOrBlockTask+0x98>)
 8010666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801066a:	601a      	str	r2, [r3, #0]
 801066c:	f3bf 8f4f 	dsb	sy
 8010670:	f3bf 8f6f 	isb	sy
}
 8010674:	e001      	b.n	801067a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010676:	f7ff f895 	bl	800f7a4 <xTaskResumeAll>
}
 801067a:	bf00      	nop
 801067c:	3710      	adds	r7, #16
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}
 8010682:	bf00      	nop
 8010684:	2000ef80 	.word	0x2000ef80
 8010688:	2000ef84 	.word	0x2000ef84
 801068c:	e000ed04 	.word	0xe000ed04

08010690 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010690:	b480      	push	{r7}
 8010692:	b085      	sub	sp, #20
 8010694:	af00      	add	r7, sp, #0
 8010696:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010698:	4b0e      	ldr	r3, [pc, #56]	@ (80106d4 <prvGetNextExpireTime+0x44>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d101      	bne.n	80106a6 <prvGetNextExpireTime+0x16>
 80106a2:	2201      	movs	r2, #1
 80106a4:	e000      	b.n	80106a8 <prvGetNextExpireTime+0x18>
 80106a6:	2200      	movs	r2, #0
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d105      	bne.n	80106c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80106b4:	4b07      	ldr	r3, [pc, #28]	@ (80106d4 <prvGetNextExpireTime+0x44>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	68db      	ldr	r3, [r3, #12]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	60fb      	str	r3, [r7, #12]
 80106be:	e001      	b.n	80106c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80106c0:	2300      	movs	r3, #0
 80106c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80106c4:	68fb      	ldr	r3, [r7, #12]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3714      	adds	r7, #20
 80106ca:	46bd      	mov	sp, r7
 80106cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d0:	4770      	bx	lr
 80106d2:	bf00      	nop
 80106d4:	2000ef7c 	.word	0x2000ef7c

080106d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80106e0:	f7ff f900 	bl	800f8e4 <xTaskGetTickCount>
 80106e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80106e6:	4b0b      	ldr	r3, [pc, #44]	@ (8010714 <prvSampleTimeNow+0x3c>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	68fa      	ldr	r2, [r7, #12]
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d205      	bcs.n	80106fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80106f0:	f000 f940 	bl	8010974 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	2201      	movs	r2, #1
 80106f8:	601a      	str	r2, [r3, #0]
 80106fa:	e002      	b.n	8010702 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	2200      	movs	r2, #0
 8010700:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010702:	4a04      	ldr	r2, [pc, #16]	@ (8010714 <prvSampleTimeNow+0x3c>)
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010708:	68fb      	ldr	r3, [r7, #12]
}
 801070a:	4618      	mov	r0, r3
 801070c:	3710      	adds	r7, #16
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
 8010712:	bf00      	nop
 8010714:	2000ef8c 	.word	0x2000ef8c

08010718 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b086      	sub	sp, #24
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
 8010724:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010726:	2300      	movs	r3, #0
 8010728:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	68ba      	ldr	r2, [r7, #8]
 801072e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	68fa      	ldr	r2, [r7, #12]
 8010734:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010736:	68ba      	ldr	r2, [r7, #8]
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	429a      	cmp	r2, r3
 801073c:	d812      	bhi.n	8010764 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801073e:	687a      	ldr	r2, [r7, #4]
 8010740:	683b      	ldr	r3, [r7, #0]
 8010742:	1ad2      	subs	r2, r2, r3
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	699b      	ldr	r3, [r3, #24]
 8010748:	429a      	cmp	r2, r3
 801074a:	d302      	bcc.n	8010752 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801074c:	2301      	movs	r3, #1
 801074e:	617b      	str	r3, [r7, #20]
 8010750:	e01b      	b.n	801078a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8010752:	4b10      	ldr	r3, [pc, #64]	@ (8010794 <prvInsertTimerInActiveList+0x7c>)
 8010754:	681a      	ldr	r2, [r3, #0]
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	3304      	adds	r3, #4
 801075a:	4619      	mov	r1, r3
 801075c:	4610      	mov	r0, r2
 801075e:	f7fd fb56 	bl	800de0e <vListInsert>
 8010762:	e012      	b.n	801078a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	429a      	cmp	r2, r3
 801076a:	d206      	bcs.n	801077a <prvInsertTimerInActiveList+0x62>
 801076c:	68ba      	ldr	r2, [r7, #8]
 801076e:	683b      	ldr	r3, [r7, #0]
 8010770:	429a      	cmp	r2, r3
 8010772:	d302      	bcc.n	801077a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010774:	2301      	movs	r3, #1
 8010776:	617b      	str	r3, [r7, #20]
 8010778:	e007      	b.n	801078a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801077a:	4b07      	ldr	r3, [pc, #28]	@ (8010798 <prvInsertTimerInActiveList+0x80>)
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	3304      	adds	r3, #4
 8010782:	4619      	mov	r1, r3
 8010784:	4610      	mov	r0, r2
 8010786:	f7fd fb42 	bl	800de0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801078a:	697b      	ldr	r3, [r7, #20]
}
 801078c:	4618      	mov	r0, r3
 801078e:	3718      	adds	r7, #24
 8010790:	46bd      	mov	sp, r7
 8010792:	bd80      	pop	{r7, pc}
 8010794:	2000ef80 	.word	0x2000ef80
 8010798:	2000ef7c 	.word	0x2000ef7c

0801079c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b08e      	sub	sp, #56	@ 0x38
 80107a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80107a2:	e0d4      	b.n	801094e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	da1b      	bge.n	80107e2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80107aa:	1d3b      	adds	r3, r7, #4
 80107ac:	3304      	adds	r3, #4
 80107ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80107b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d10d      	bne.n	80107d2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 80107b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ba:	b672      	cpsid	i
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	b662      	cpsie	i
 80107ca:	61fb      	str	r3, [r7, #28]
}
 80107cc:	bf00      	nop
 80107ce:	bf00      	nop
 80107d0:	e7fd      	b.n	80107ce <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80107d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107d8:	6850      	ldr	r0, [r2, #4]
 80107da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107dc:	6892      	ldr	r2, [r2, #8]
 80107de:	4611      	mov	r1, r2
 80107e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	f2c0 80b2 	blt.w	801094e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80107ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f0:	695b      	ldr	r3, [r3, #20]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d004      	beq.n	8010800 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107f8:	3304      	adds	r3, #4
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fd fb40 	bl	800de80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010800:	463b      	mov	r3, r7
 8010802:	4618      	mov	r0, r3
 8010804:	f7ff ff68 	bl	80106d8 <prvSampleTimeNow>
 8010808:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	2b09      	cmp	r3, #9
 801080e:	f200 809b 	bhi.w	8010948 <prvProcessReceivedCommands+0x1ac>
 8010812:	a201      	add	r2, pc, #4	@ (adr r2, 8010818 <prvProcessReceivedCommands+0x7c>)
 8010814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010818:	08010841 	.word	0x08010841
 801081c:	08010841 	.word	0x08010841
 8010820:	08010841 	.word	0x08010841
 8010824:	080108bb 	.word	0x080108bb
 8010828:	080108cf 	.word	0x080108cf
 801082c:	0801091f 	.word	0x0801091f
 8010830:	08010841 	.word	0x08010841
 8010834:	08010841 	.word	0x08010841
 8010838:	080108bb 	.word	0x080108bb
 801083c:	080108cf 	.word	0x080108cf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010842:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010846:	f043 0301 	orr.w	r3, r3, #1
 801084a:	b2da      	uxtb	r2, r3
 801084c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801084e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010852:	68ba      	ldr	r2, [r7, #8]
 8010854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010856:	699b      	ldr	r3, [r3, #24]
 8010858:	18d1      	adds	r1, r2, r3
 801085a:	68bb      	ldr	r3, [r7, #8]
 801085c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801085e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010860:	f7ff ff5a 	bl	8010718 <prvInsertTimerInActiveList>
 8010864:	4603      	mov	r3, r0
 8010866:	2b00      	cmp	r3, #0
 8010868:	d070      	beq.n	801094c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801086a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801086c:	6a1b      	ldr	r3, [r3, #32]
 801086e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010870:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010874:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010878:	f003 0304 	and.w	r3, r3, #4
 801087c:	2b00      	cmp	r3, #0
 801087e:	d065      	beq.n	801094c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010880:	68ba      	ldr	r2, [r7, #8]
 8010882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010884:	699b      	ldr	r3, [r3, #24]
 8010886:	441a      	add	r2, r3
 8010888:	2300      	movs	r3, #0
 801088a:	9300      	str	r3, [sp, #0]
 801088c:	2300      	movs	r3, #0
 801088e:	2100      	movs	r1, #0
 8010890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010892:	f7ff fdfb 	bl	801048c <xTimerGenericCommand>
 8010896:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010898:	6a3b      	ldr	r3, [r7, #32]
 801089a:	2b00      	cmp	r3, #0
 801089c:	d156      	bne.n	801094c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 801089e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108a2:	b672      	cpsid	i
 80108a4:	f383 8811 	msr	BASEPRI, r3
 80108a8:	f3bf 8f6f 	isb	sy
 80108ac:	f3bf 8f4f 	dsb	sy
 80108b0:	b662      	cpsie	i
 80108b2:	61bb      	str	r3, [r7, #24]
}
 80108b4:	bf00      	nop
 80108b6:	bf00      	nop
 80108b8:	e7fd      	b.n	80108b6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80108ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108c0:	f023 0301 	bic.w	r3, r3, #1
 80108c4:	b2da      	uxtb	r2, r3
 80108c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80108cc:	e03f      	b.n	801094e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80108ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80108d4:	f043 0301 	orr.w	r3, r3, #1
 80108d8:	b2da      	uxtb	r2, r3
 80108da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80108e0:	68ba      	ldr	r2, [r7, #8]
 80108e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80108e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108e8:	699b      	ldr	r3, [r3, #24]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d10d      	bne.n	801090a <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80108ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108f2:	b672      	cpsid	i
 80108f4:	f383 8811 	msr	BASEPRI, r3
 80108f8:	f3bf 8f6f 	isb	sy
 80108fc:	f3bf 8f4f 	dsb	sy
 8010900:	b662      	cpsie	i
 8010902:	617b      	str	r3, [r7, #20]
}
 8010904:	bf00      	nop
 8010906:	bf00      	nop
 8010908:	e7fd      	b.n	8010906 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801090a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801090c:	699a      	ldr	r2, [r3, #24]
 801090e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010910:	18d1      	adds	r1, r2, r3
 8010912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010918:	f7ff fefe 	bl	8010718 <prvInsertTimerInActiveList>
					break;
 801091c:	e017      	b.n	801094e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801091e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010924:	f003 0302 	and.w	r3, r3, #2
 8010928:	2b00      	cmp	r3, #0
 801092a:	d103      	bne.n	8010934 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 801092c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801092e:	f000 fbd5 	bl	80110dc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010932:	e00c      	b.n	801094e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010936:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801093a:	f023 0301 	bic.w	r3, r3, #1
 801093e:	b2da      	uxtb	r2, r3
 8010940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010942:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010946:	e002      	b.n	801094e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8010948:	bf00      	nop
 801094a:	e000      	b.n	801094e <prvProcessReceivedCommands+0x1b2>
					break;
 801094c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801094e:	4b08      	ldr	r3, [pc, #32]	@ (8010970 <prvProcessReceivedCommands+0x1d4>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	1d39      	adds	r1, r7, #4
 8010954:	2200      	movs	r2, #0
 8010956:	4618      	mov	r0, r3
 8010958:	f7fd ff8e 	bl	800e878 <xQueueReceive>
 801095c:	4603      	mov	r3, r0
 801095e:	2b00      	cmp	r3, #0
 8010960:	f47f af20 	bne.w	80107a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010964:	bf00      	nop
 8010966:	bf00      	nop
 8010968:	3730      	adds	r7, #48	@ 0x30
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	2000ef84 	.word	0x2000ef84

08010974 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b088      	sub	sp, #32
 8010978:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801097a:	e04b      	b.n	8010a14 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801097c:	4b2f      	ldr	r3, [pc, #188]	@ (8010a3c <prvSwitchTimerLists+0xc8>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	68db      	ldr	r3, [r3, #12]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010986:	4b2d      	ldr	r3, [pc, #180]	@ (8010a3c <prvSwitchTimerLists+0xc8>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	68db      	ldr	r3, [r3, #12]
 801098e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	3304      	adds	r3, #4
 8010994:	4618      	mov	r0, r3
 8010996:	f7fd fa73 	bl	800de80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	6a1b      	ldr	r3, [r3, #32]
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80109a8:	f003 0304 	and.w	r3, r3, #4
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d031      	beq.n	8010a14 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	699b      	ldr	r3, [r3, #24]
 80109b4:	693a      	ldr	r2, [r7, #16]
 80109b6:	4413      	add	r3, r2
 80109b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80109ba:	68ba      	ldr	r2, [r7, #8]
 80109bc:	693b      	ldr	r3, [r7, #16]
 80109be:	429a      	cmp	r2, r3
 80109c0:	d90e      	bls.n	80109e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	68ba      	ldr	r2, [r7, #8]
 80109c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	68fa      	ldr	r2, [r7, #12]
 80109cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109ce:	4b1b      	ldr	r3, [pc, #108]	@ (8010a3c <prvSwitchTimerLists+0xc8>)
 80109d0:	681a      	ldr	r2, [r3, #0]
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	3304      	adds	r3, #4
 80109d6:	4619      	mov	r1, r3
 80109d8:	4610      	mov	r0, r2
 80109da:	f7fd fa18 	bl	800de0e <vListInsert>
 80109de:	e019      	b.n	8010a14 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80109e0:	2300      	movs	r3, #0
 80109e2:	9300      	str	r3, [sp, #0]
 80109e4:	2300      	movs	r3, #0
 80109e6:	693a      	ldr	r2, [r7, #16]
 80109e8:	2100      	movs	r1, #0
 80109ea:	68f8      	ldr	r0, [r7, #12]
 80109ec:	f7ff fd4e 	bl	801048c <xTimerGenericCommand>
 80109f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d10d      	bne.n	8010a14 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109fc:	b672      	cpsid	i
 80109fe:	f383 8811 	msr	BASEPRI, r3
 8010a02:	f3bf 8f6f 	isb	sy
 8010a06:	f3bf 8f4f 	dsb	sy
 8010a0a:	b662      	cpsie	i
 8010a0c:	603b      	str	r3, [r7, #0]
}
 8010a0e:	bf00      	nop
 8010a10:	bf00      	nop
 8010a12:	e7fd      	b.n	8010a10 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010a14:	4b09      	ldr	r3, [pc, #36]	@ (8010a3c <prvSwitchTimerLists+0xc8>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d1ae      	bne.n	801097c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010a1e:	4b07      	ldr	r3, [pc, #28]	@ (8010a3c <prvSwitchTimerLists+0xc8>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010a24:	4b06      	ldr	r3, [pc, #24]	@ (8010a40 <prvSwitchTimerLists+0xcc>)
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	4a04      	ldr	r2, [pc, #16]	@ (8010a3c <prvSwitchTimerLists+0xc8>)
 8010a2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010a2c:	4a04      	ldr	r2, [pc, #16]	@ (8010a40 <prvSwitchTimerLists+0xcc>)
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	6013      	str	r3, [r2, #0]
}
 8010a32:	bf00      	nop
 8010a34:	3718      	adds	r7, #24
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	2000ef7c 	.word	0x2000ef7c
 8010a40:	2000ef80 	.word	0x2000ef80

08010a44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010a44:	b580      	push	{r7, lr}
 8010a46:	b082      	sub	sp, #8
 8010a48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010a4a:	f000 f947 	bl	8010cdc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010a4e:	4b15      	ldr	r3, [pc, #84]	@ (8010aa4 <prvCheckForValidListAndQueue+0x60>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d120      	bne.n	8010a98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010a56:	4814      	ldr	r0, [pc, #80]	@ (8010aa8 <prvCheckForValidListAndQueue+0x64>)
 8010a58:	f7fd f988 	bl	800dd6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010a5c:	4813      	ldr	r0, [pc, #76]	@ (8010aac <prvCheckForValidListAndQueue+0x68>)
 8010a5e:	f7fd f985 	bl	800dd6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010a62:	4b13      	ldr	r3, [pc, #76]	@ (8010ab0 <prvCheckForValidListAndQueue+0x6c>)
 8010a64:	4a10      	ldr	r2, [pc, #64]	@ (8010aa8 <prvCheckForValidListAndQueue+0x64>)
 8010a66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010a68:	4b12      	ldr	r3, [pc, #72]	@ (8010ab4 <prvCheckForValidListAndQueue+0x70>)
 8010a6a:	4a10      	ldr	r2, [pc, #64]	@ (8010aac <prvCheckForValidListAndQueue+0x68>)
 8010a6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010a6e:	2300      	movs	r3, #0
 8010a70:	9300      	str	r3, [sp, #0]
 8010a72:	4b11      	ldr	r3, [pc, #68]	@ (8010ab8 <prvCheckForValidListAndQueue+0x74>)
 8010a74:	4a11      	ldr	r2, [pc, #68]	@ (8010abc <prvCheckForValidListAndQueue+0x78>)
 8010a76:	2110      	movs	r1, #16
 8010a78:	200a      	movs	r0, #10
 8010a7a:	f7fd fa97 	bl	800dfac <xQueueGenericCreateStatic>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	4a08      	ldr	r2, [pc, #32]	@ (8010aa4 <prvCheckForValidListAndQueue+0x60>)
 8010a82:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010a84:	4b07      	ldr	r3, [pc, #28]	@ (8010aa4 <prvCheckForValidListAndQueue+0x60>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d005      	beq.n	8010a98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010a8c:	4b05      	ldr	r3, [pc, #20]	@ (8010aa4 <prvCheckForValidListAndQueue+0x60>)
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	490b      	ldr	r1, [pc, #44]	@ (8010ac0 <prvCheckForValidListAndQueue+0x7c>)
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7fe fb08 	bl	800f0a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010a98:	f000 f956 	bl	8010d48 <vPortExitCritical>
}
 8010a9c:	bf00      	nop
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
 8010aa2:	bf00      	nop
 8010aa4:	2000ef84 	.word	0x2000ef84
 8010aa8:	2000ef54 	.word	0x2000ef54
 8010aac:	2000ef68 	.word	0x2000ef68
 8010ab0:	2000ef7c 	.word	0x2000ef7c
 8010ab4:	2000ef80 	.word	0x2000ef80
 8010ab8:	2000f030 	.word	0x2000f030
 8010abc:	2000ef90 	.word	0x2000ef90
 8010ac0:	08021384 	.word	0x08021384

08010ac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010ac4:	b480      	push	{r7}
 8010ac6:	b085      	sub	sp, #20
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	60f8      	str	r0, [r7, #12]
 8010acc:	60b9      	str	r1, [r7, #8]
 8010ace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	3b04      	subs	r3, #4
 8010ad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010adc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	3b04      	subs	r3, #4
 8010ae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	f023 0201 	bic.w	r2, r3, #1
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	3b04      	subs	r3, #4
 8010af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010af4:	4a0c      	ldr	r2, [pc, #48]	@ (8010b28 <pxPortInitialiseStack+0x64>)
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	3b14      	subs	r3, #20
 8010afe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	3b04      	subs	r3, #4
 8010b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f06f 0202 	mvn.w	r2, #2
 8010b12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	3b20      	subs	r3, #32
 8010b18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
}
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	3714      	adds	r7, #20
 8010b20:	46bd      	mov	sp, r7
 8010b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b26:	4770      	bx	lr
 8010b28:	08010b2d 	.word	0x08010b2d

08010b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010b2c:	b480      	push	{r7}
 8010b2e:	b085      	sub	sp, #20
 8010b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010b32:	2300      	movs	r3, #0
 8010b34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010b36:	4b15      	ldr	r3, [pc, #84]	@ (8010b8c <prvTaskExitError+0x60>)
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010b3e:	d00d      	beq.n	8010b5c <prvTaskExitError+0x30>
	__asm volatile
 8010b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b44:	b672      	cpsid	i
 8010b46:	f383 8811 	msr	BASEPRI, r3
 8010b4a:	f3bf 8f6f 	isb	sy
 8010b4e:	f3bf 8f4f 	dsb	sy
 8010b52:	b662      	cpsie	i
 8010b54:	60fb      	str	r3, [r7, #12]
}
 8010b56:	bf00      	nop
 8010b58:	bf00      	nop
 8010b5a:	e7fd      	b.n	8010b58 <prvTaskExitError+0x2c>
	__asm volatile
 8010b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b60:	b672      	cpsid	i
 8010b62:	f383 8811 	msr	BASEPRI, r3
 8010b66:	f3bf 8f6f 	isb	sy
 8010b6a:	f3bf 8f4f 	dsb	sy
 8010b6e:	b662      	cpsie	i
 8010b70:	60bb      	str	r3, [r7, #8]
}
 8010b72:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010b74:	bf00      	nop
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d0fc      	beq.n	8010b76 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010b7c:	bf00      	nop
 8010b7e:	bf00      	nop
 8010b80:	3714      	adds	r7, #20
 8010b82:	46bd      	mov	sp, r7
 8010b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b88:	4770      	bx	lr
 8010b8a:	bf00      	nop
 8010b8c:	20000020 	.word	0x20000020

08010b90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010b90:	4b07      	ldr	r3, [pc, #28]	@ (8010bb0 <pxCurrentTCBConst2>)
 8010b92:	6819      	ldr	r1, [r3, #0]
 8010b94:	6808      	ldr	r0, [r1, #0]
 8010b96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9a:	f380 8809 	msr	PSP, r0
 8010b9e:	f3bf 8f6f 	isb	sy
 8010ba2:	f04f 0000 	mov.w	r0, #0
 8010ba6:	f380 8811 	msr	BASEPRI, r0
 8010baa:	4770      	bx	lr
 8010bac:	f3af 8000 	nop.w

08010bb0 <pxCurrentTCBConst2>:
 8010bb0:	2000ea54 	.word	0x2000ea54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010bb4:	bf00      	nop
 8010bb6:	bf00      	nop

08010bb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010bb8:	4808      	ldr	r0, [pc, #32]	@ (8010bdc <prvPortStartFirstTask+0x24>)
 8010bba:	6800      	ldr	r0, [r0, #0]
 8010bbc:	6800      	ldr	r0, [r0, #0]
 8010bbe:	f380 8808 	msr	MSP, r0
 8010bc2:	f04f 0000 	mov.w	r0, #0
 8010bc6:	f380 8814 	msr	CONTROL, r0
 8010bca:	b662      	cpsie	i
 8010bcc:	b661      	cpsie	f
 8010bce:	f3bf 8f4f 	dsb	sy
 8010bd2:	f3bf 8f6f 	isb	sy
 8010bd6:	df00      	svc	0
 8010bd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010bda:	bf00      	nop
 8010bdc:	e000ed08 	.word	0xe000ed08

08010be0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010be6:	4b37      	ldr	r3, [pc, #220]	@ (8010cc4 <xPortStartScheduler+0xe4>)
 8010be8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	781b      	ldrb	r3, [r3, #0]
 8010bee:	b2db      	uxtb	r3, r3
 8010bf0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	22ff      	movs	r2, #255	@ 0xff
 8010bf6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010c00:	78fb      	ldrb	r3, [r7, #3]
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010c08:	b2da      	uxtb	r2, r3
 8010c0a:	4b2f      	ldr	r3, [pc, #188]	@ (8010cc8 <xPortStartScheduler+0xe8>)
 8010c0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c10:	2207      	movs	r2, #7
 8010c12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c14:	e009      	b.n	8010c2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010c16:	4b2d      	ldr	r3, [pc, #180]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	3b01      	subs	r3, #1
 8010c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010c20:	78fb      	ldrb	r3, [r7, #3]
 8010c22:	b2db      	uxtb	r3, r3
 8010c24:	005b      	lsls	r3, r3, #1
 8010c26:	b2db      	uxtb	r3, r3
 8010c28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010c2a:	78fb      	ldrb	r3, [r7, #3]
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c32:	2b80      	cmp	r3, #128	@ 0x80
 8010c34:	d0ef      	beq.n	8010c16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010c36:	4b25      	ldr	r3, [pc, #148]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	f1c3 0307 	rsb	r3, r3, #7
 8010c3e:	2b04      	cmp	r3, #4
 8010c40:	d00d      	beq.n	8010c5e <xPortStartScheduler+0x7e>
	__asm volatile
 8010c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c46:	b672      	cpsid	i
 8010c48:	f383 8811 	msr	BASEPRI, r3
 8010c4c:	f3bf 8f6f 	isb	sy
 8010c50:	f3bf 8f4f 	dsb	sy
 8010c54:	b662      	cpsie	i
 8010c56:	60bb      	str	r3, [r7, #8]
}
 8010c58:	bf00      	nop
 8010c5a:	bf00      	nop
 8010c5c:	e7fd      	b.n	8010c5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010c5e:	4b1b      	ldr	r3, [pc, #108]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	021b      	lsls	r3, r3, #8
 8010c64:	4a19      	ldr	r2, [pc, #100]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010c68:	4b18      	ldr	r3, [pc, #96]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8010c70:	4a16      	ldr	r2, [pc, #88]	@ (8010ccc <xPortStartScheduler+0xec>)
 8010c72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	b2da      	uxtb	r2, r3
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010c7c:	4b14      	ldr	r3, [pc, #80]	@ (8010cd0 <xPortStartScheduler+0xf0>)
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	4a13      	ldr	r2, [pc, #76]	@ (8010cd0 <xPortStartScheduler+0xf0>)
 8010c82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8010c86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010c88:	4b11      	ldr	r3, [pc, #68]	@ (8010cd0 <xPortStartScheduler+0xf0>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a10      	ldr	r2, [pc, #64]	@ (8010cd0 <xPortStartScheduler+0xf0>)
 8010c8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8010c92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010c94:	f000 f8dc 	bl	8010e50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010c98:	4b0e      	ldr	r3, [pc, #56]	@ (8010cd4 <xPortStartScheduler+0xf4>)
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010c9e:	f000 f8fb 	bl	8010e98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd8 <xPortStartScheduler+0xf8>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8010cd8 <xPortStartScheduler+0xf8>)
 8010ca8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8010cac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010cae:	f7ff ff83 	bl	8010bb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010cb2:	f7fe fef5 	bl	800faa0 <vTaskSwitchContext>
	prvTaskExitError();
 8010cb6:	f7ff ff39 	bl	8010b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010cba:	2300      	movs	r3, #0
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3710      	adds	r7, #16
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	e000e400 	.word	0xe000e400
 8010cc8:	2000f080 	.word	0x2000f080
 8010ccc:	2000f084 	.word	0x2000f084
 8010cd0:	e000ed20 	.word	0xe000ed20
 8010cd4:	20000020 	.word	0x20000020
 8010cd8:	e000ef34 	.word	0xe000ef34

08010cdc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010cdc:	b480      	push	{r7}
 8010cde:	b083      	sub	sp, #12
 8010ce0:	af00      	add	r7, sp, #0
	__asm volatile
 8010ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ce6:	b672      	cpsid	i
 8010ce8:	f383 8811 	msr	BASEPRI, r3
 8010cec:	f3bf 8f6f 	isb	sy
 8010cf0:	f3bf 8f4f 	dsb	sy
 8010cf4:	b662      	cpsie	i
 8010cf6:	607b      	str	r3, [r7, #4]
}
 8010cf8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010cfa:	4b11      	ldr	r3, [pc, #68]	@ (8010d40 <vPortEnterCritical+0x64>)
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	4a0f      	ldr	r2, [pc, #60]	@ (8010d40 <vPortEnterCritical+0x64>)
 8010d02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010d04:	4b0e      	ldr	r3, [pc, #56]	@ (8010d40 <vPortEnterCritical+0x64>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d112      	bne.n	8010d32 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8010d44 <vPortEnterCritical+0x68>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	b2db      	uxtb	r3, r3
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d00d      	beq.n	8010d32 <vPortEnterCritical+0x56>
	__asm volatile
 8010d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d1a:	b672      	cpsid	i
 8010d1c:	f383 8811 	msr	BASEPRI, r3
 8010d20:	f3bf 8f6f 	isb	sy
 8010d24:	f3bf 8f4f 	dsb	sy
 8010d28:	b662      	cpsie	i
 8010d2a:	603b      	str	r3, [r7, #0]
}
 8010d2c:	bf00      	nop
 8010d2e:	bf00      	nop
 8010d30:	e7fd      	b.n	8010d2e <vPortEnterCritical+0x52>
	}
}
 8010d32:	bf00      	nop
 8010d34:	370c      	adds	r7, #12
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr
 8010d3e:	bf00      	nop
 8010d40:	20000020 	.word	0x20000020
 8010d44:	e000ed04 	.word	0xe000ed04

08010d48 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010d48:	b480      	push	{r7}
 8010d4a:	b083      	sub	sp, #12
 8010d4c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010d4e:	4b13      	ldr	r3, [pc, #76]	@ (8010d9c <vPortExitCritical+0x54>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d10d      	bne.n	8010d72 <vPortExitCritical+0x2a>
	__asm volatile
 8010d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d5a:	b672      	cpsid	i
 8010d5c:	f383 8811 	msr	BASEPRI, r3
 8010d60:	f3bf 8f6f 	isb	sy
 8010d64:	f3bf 8f4f 	dsb	sy
 8010d68:	b662      	cpsie	i
 8010d6a:	607b      	str	r3, [r7, #4]
}
 8010d6c:	bf00      	nop
 8010d6e:	bf00      	nop
 8010d70:	e7fd      	b.n	8010d6e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010d72:	4b0a      	ldr	r3, [pc, #40]	@ (8010d9c <vPortExitCritical+0x54>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	3b01      	subs	r3, #1
 8010d78:	4a08      	ldr	r2, [pc, #32]	@ (8010d9c <vPortExitCritical+0x54>)
 8010d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010d7c:	4b07      	ldr	r3, [pc, #28]	@ (8010d9c <vPortExitCritical+0x54>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d105      	bne.n	8010d90 <vPortExitCritical+0x48>
 8010d84:	2300      	movs	r3, #0
 8010d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	f383 8811 	msr	BASEPRI, r3
}
 8010d8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010d90:	bf00      	nop
 8010d92:	370c      	adds	r7, #12
 8010d94:	46bd      	mov	sp, r7
 8010d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9a:	4770      	bx	lr
 8010d9c:	20000020 	.word	0x20000020

08010da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010da0:	f3ef 8009 	mrs	r0, PSP
 8010da4:	f3bf 8f6f 	isb	sy
 8010da8:	4b15      	ldr	r3, [pc, #84]	@ (8010e00 <pxCurrentTCBConst>)
 8010daa:	681a      	ldr	r2, [r3, #0]
 8010dac:	f01e 0f10 	tst.w	lr, #16
 8010db0:	bf08      	it	eq
 8010db2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010db6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dba:	6010      	str	r0, [r2, #0]
 8010dbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010dc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010dc4:	b672      	cpsid	i
 8010dc6:	f380 8811 	msr	BASEPRI, r0
 8010dca:	f3bf 8f4f 	dsb	sy
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	b662      	cpsie	i
 8010dd4:	f7fe fe64 	bl	800faa0 <vTaskSwitchContext>
 8010dd8:	f04f 0000 	mov.w	r0, #0
 8010ddc:	f380 8811 	msr	BASEPRI, r0
 8010de0:	bc09      	pop	{r0, r3}
 8010de2:	6819      	ldr	r1, [r3, #0]
 8010de4:	6808      	ldr	r0, [r1, #0]
 8010de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dea:	f01e 0f10 	tst.w	lr, #16
 8010dee:	bf08      	it	eq
 8010df0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010df4:	f380 8809 	msr	PSP, r0
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	4770      	bx	lr
 8010dfe:	bf00      	nop

08010e00 <pxCurrentTCBConst>:
 8010e00:	2000ea54 	.word	0x2000ea54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010e04:	bf00      	nop
 8010e06:	bf00      	nop

08010e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b082      	sub	sp, #8
 8010e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8010e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e12:	b672      	cpsid	i
 8010e14:	f383 8811 	msr	BASEPRI, r3
 8010e18:	f3bf 8f6f 	isb	sy
 8010e1c:	f3bf 8f4f 	dsb	sy
 8010e20:	b662      	cpsie	i
 8010e22:	607b      	str	r3, [r7, #4]
}
 8010e24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010e26:	f7fe fd7f 	bl	800f928 <xTaskIncrementTick>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d003      	beq.n	8010e38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010e30:	4b06      	ldr	r3, [pc, #24]	@ (8010e4c <SysTick_Handler+0x44>)
 8010e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e36:	601a      	str	r2, [r3, #0]
 8010e38:	2300      	movs	r3, #0
 8010e3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010e3c:	683b      	ldr	r3, [r7, #0]
 8010e3e:	f383 8811 	msr	BASEPRI, r3
}
 8010e42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010e44:	bf00      	nop
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	e000ed04 	.word	0xe000ed04

08010e50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010e50:	b480      	push	{r7}
 8010e52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010e54:	4b0b      	ldr	r3, [pc, #44]	@ (8010e84 <vPortSetupTimerInterrupt+0x34>)
 8010e56:	2200      	movs	r2, #0
 8010e58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8010e88 <vPortSetupTimerInterrupt+0x38>)
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010e60:	4b0a      	ldr	r3, [pc, #40]	@ (8010e8c <vPortSetupTimerInterrupt+0x3c>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	4a0a      	ldr	r2, [pc, #40]	@ (8010e90 <vPortSetupTimerInterrupt+0x40>)
 8010e66:	fba2 2303 	umull	r2, r3, r2, r3
 8010e6a:	099b      	lsrs	r3, r3, #6
 8010e6c:	4a09      	ldr	r2, [pc, #36]	@ (8010e94 <vPortSetupTimerInterrupt+0x44>)
 8010e6e:	3b01      	subs	r3, #1
 8010e70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010e72:	4b04      	ldr	r3, [pc, #16]	@ (8010e84 <vPortSetupTimerInterrupt+0x34>)
 8010e74:	2207      	movs	r2, #7
 8010e76:	601a      	str	r2, [r3, #0]
}
 8010e78:	bf00      	nop
 8010e7a:	46bd      	mov	sp, r7
 8010e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e80:	4770      	bx	lr
 8010e82:	bf00      	nop
 8010e84:	e000e010 	.word	0xe000e010
 8010e88:	e000e018 	.word	0xe000e018
 8010e8c:	20000000 	.word	0x20000000
 8010e90:	10624dd3 	.word	0x10624dd3
 8010e94:	e000e014 	.word	0xe000e014

08010e98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010e98:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010ea8 <vPortEnableVFP+0x10>
 8010e9c:	6801      	ldr	r1, [r0, #0]
 8010e9e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010ea2:	6001      	str	r1, [r0, #0]
 8010ea4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ea6:	bf00      	nop
 8010ea8:	e000ed88 	.word	0xe000ed88

08010eac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010eac:	b480      	push	{r7}
 8010eae:	b085      	sub	sp, #20
 8010eb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010eb2:	f3ef 8305 	mrs	r3, IPSR
 8010eb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	2b0f      	cmp	r3, #15
 8010ebc:	d917      	bls.n	8010eee <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8010f28 <vPortValidateInterruptPriority+0x7c>)
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	4413      	add	r3, r2
 8010ec4:	781b      	ldrb	r3, [r3, #0]
 8010ec6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010ec8:	4b18      	ldr	r3, [pc, #96]	@ (8010f2c <vPortValidateInterruptPriority+0x80>)
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	7afa      	ldrb	r2, [r7, #11]
 8010ece:	429a      	cmp	r2, r3
 8010ed0:	d20d      	bcs.n	8010eee <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed6:	b672      	cpsid	i
 8010ed8:	f383 8811 	msr	BASEPRI, r3
 8010edc:	f3bf 8f6f 	isb	sy
 8010ee0:	f3bf 8f4f 	dsb	sy
 8010ee4:	b662      	cpsie	i
 8010ee6:	607b      	str	r3, [r7, #4]
}
 8010ee8:	bf00      	nop
 8010eea:	bf00      	nop
 8010eec:	e7fd      	b.n	8010eea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010eee:	4b10      	ldr	r3, [pc, #64]	@ (8010f30 <vPortValidateInterruptPriority+0x84>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8010f34 <vPortValidateInterruptPriority+0x88>)
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	429a      	cmp	r2, r3
 8010efc:	d90d      	bls.n	8010f1a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8010efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f02:	b672      	cpsid	i
 8010f04:	f383 8811 	msr	BASEPRI, r3
 8010f08:	f3bf 8f6f 	isb	sy
 8010f0c:	f3bf 8f4f 	dsb	sy
 8010f10:	b662      	cpsie	i
 8010f12:	603b      	str	r3, [r7, #0]
}
 8010f14:	bf00      	nop
 8010f16:	bf00      	nop
 8010f18:	e7fd      	b.n	8010f16 <vPortValidateInterruptPriority+0x6a>
	}
 8010f1a:	bf00      	nop
 8010f1c:	3714      	adds	r7, #20
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f24:	4770      	bx	lr
 8010f26:	bf00      	nop
 8010f28:	e000e3f0 	.word	0xe000e3f0
 8010f2c:	2000f080 	.word	0x2000f080
 8010f30:	e000ed0c 	.word	0xe000ed0c
 8010f34:	2000f084 	.word	0x2000f084

08010f38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b08a      	sub	sp, #40	@ 0x28
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010f40:	2300      	movs	r3, #0
 8010f42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010f44:	f7fe fc20 	bl	800f788 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010f48:	4b5f      	ldr	r3, [pc, #380]	@ (80110c8 <pvPortMalloc+0x190>)
 8010f4a:	681b      	ldr	r3, [r3, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d101      	bne.n	8010f54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010f50:	f000 f924 	bl	801119c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010f54:	4b5d      	ldr	r3, [pc, #372]	@ (80110cc <pvPortMalloc+0x194>)
 8010f56:	681a      	ldr	r2, [r3, #0]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	4013      	ands	r3, r2
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f040 8094 	bne.w	801108a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d020      	beq.n	8010faa <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8010f68:	2208      	movs	r2, #8
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f003 0307 	and.w	r3, r3, #7
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d017      	beq.n	8010faa <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f023 0307 	bic.w	r3, r3, #7
 8010f80:	3308      	adds	r3, #8
 8010f82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	f003 0307 	and.w	r3, r3, #7
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d00d      	beq.n	8010faa <pvPortMalloc+0x72>
	__asm volatile
 8010f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f92:	b672      	cpsid	i
 8010f94:	f383 8811 	msr	BASEPRI, r3
 8010f98:	f3bf 8f6f 	isb	sy
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	b662      	cpsie	i
 8010fa2:	617b      	str	r3, [r7, #20]
}
 8010fa4:	bf00      	nop
 8010fa6:	bf00      	nop
 8010fa8:	e7fd      	b.n	8010fa6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d06c      	beq.n	801108a <pvPortMalloc+0x152>
 8010fb0:	4b47      	ldr	r3, [pc, #284]	@ (80110d0 <pvPortMalloc+0x198>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	687a      	ldr	r2, [r7, #4]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d867      	bhi.n	801108a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010fba:	4b46      	ldr	r3, [pc, #280]	@ (80110d4 <pvPortMalloc+0x19c>)
 8010fbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010fbe:	4b45      	ldr	r3, [pc, #276]	@ (80110d4 <pvPortMalloc+0x19c>)
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fc4:	e004      	b.n	8010fd0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fd2:	685b      	ldr	r3, [r3, #4]
 8010fd4:	687a      	ldr	r2, [r7, #4]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d903      	bls.n	8010fe2 <pvPortMalloc+0xaa>
 8010fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1f1      	bne.n	8010fc6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010fe2:	4b39      	ldr	r3, [pc, #228]	@ (80110c8 <pvPortMalloc+0x190>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010fe8:	429a      	cmp	r2, r3
 8010fea:	d04e      	beq.n	801108a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010fec:	6a3b      	ldr	r3, [r7, #32]
 8010fee:	681b      	ldr	r3, [r3, #0]
 8010ff0:	2208      	movs	r2, #8
 8010ff2:	4413      	add	r3, r2
 8010ff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	6a3b      	ldr	r3, [r7, #32]
 8010ffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011000:	685a      	ldr	r2, [r3, #4]
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	1ad2      	subs	r2, r2, r3
 8011006:	2308      	movs	r3, #8
 8011008:	005b      	lsls	r3, r3, #1
 801100a:	429a      	cmp	r2, r3
 801100c:	d922      	bls.n	8011054 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801100e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	4413      	add	r3, r2
 8011014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	f003 0307 	and.w	r3, r3, #7
 801101c:	2b00      	cmp	r3, #0
 801101e:	d00d      	beq.n	801103c <pvPortMalloc+0x104>
	__asm volatile
 8011020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011024:	b672      	cpsid	i
 8011026:	f383 8811 	msr	BASEPRI, r3
 801102a:	f3bf 8f6f 	isb	sy
 801102e:	f3bf 8f4f 	dsb	sy
 8011032:	b662      	cpsie	i
 8011034:	613b      	str	r3, [r7, #16]
}
 8011036:	bf00      	nop
 8011038:	bf00      	nop
 801103a:	e7fd      	b.n	8011038 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801103e:	685a      	ldr	r2, [r3, #4]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	1ad2      	subs	r2, r2, r3
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801104a:	687a      	ldr	r2, [r7, #4]
 801104c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801104e:	69b8      	ldr	r0, [r7, #24]
 8011050:	f000 f906 	bl	8011260 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011054:	4b1e      	ldr	r3, [pc, #120]	@ (80110d0 <pvPortMalloc+0x198>)
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801105a:	685b      	ldr	r3, [r3, #4]
 801105c:	1ad3      	subs	r3, r2, r3
 801105e:	4a1c      	ldr	r2, [pc, #112]	@ (80110d0 <pvPortMalloc+0x198>)
 8011060:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011062:	4b1b      	ldr	r3, [pc, #108]	@ (80110d0 <pvPortMalloc+0x198>)
 8011064:	681a      	ldr	r2, [r3, #0]
 8011066:	4b1c      	ldr	r3, [pc, #112]	@ (80110d8 <pvPortMalloc+0x1a0>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	429a      	cmp	r2, r3
 801106c:	d203      	bcs.n	8011076 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801106e:	4b18      	ldr	r3, [pc, #96]	@ (80110d0 <pvPortMalloc+0x198>)
 8011070:	681b      	ldr	r3, [r3, #0]
 8011072:	4a19      	ldr	r2, [pc, #100]	@ (80110d8 <pvPortMalloc+0x1a0>)
 8011074:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011078:	685a      	ldr	r2, [r3, #4]
 801107a:	4b14      	ldr	r3, [pc, #80]	@ (80110cc <pvPortMalloc+0x194>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	431a      	orrs	r2, r3
 8011080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011082:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011086:	2200      	movs	r2, #0
 8011088:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801108a:	f7fe fb8b 	bl	800f7a4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801108e:	69fb      	ldr	r3, [r7, #28]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d101      	bne.n	8011098 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8011094:	f7ef fc35 	bl	8000902 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	f003 0307 	and.w	r3, r3, #7
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00d      	beq.n	80110be <pvPortMalloc+0x186>
	__asm volatile
 80110a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110a6:	b672      	cpsid	i
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	b662      	cpsie	i
 80110b6:	60fb      	str	r3, [r7, #12]
}
 80110b8:	bf00      	nop
 80110ba:	bf00      	nop
 80110bc:	e7fd      	b.n	80110ba <pvPortMalloc+0x182>
	return pvReturn;
 80110be:	69fb      	ldr	r3, [r7, #28]
}
 80110c0:	4618      	mov	r0, r3
 80110c2:	3728      	adds	r7, #40	@ 0x28
 80110c4:	46bd      	mov	sp, r7
 80110c6:	bd80      	pop	{r7, pc}
 80110c8:	2001f090 	.word	0x2001f090
 80110cc:	2001f09c 	.word	0x2001f09c
 80110d0:	2001f094 	.word	0x2001f094
 80110d4:	2001f088 	.word	0x2001f088
 80110d8:	2001f098 	.word	0x2001f098

080110dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b086      	sub	sp, #24
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d04e      	beq.n	801118c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80110ee:	2308      	movs	r3, #8
 80110f0:	425b      	negs	r3, r3
 80110f2:	697a      	ldr	r2, [r7, #20]
 80110f4:	4413      	add	r3, r2
 80110f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80110f8:	697b      	ldr	r3, [r7, #20]
 80110fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	685a      	ldr	r2, [r3, #4]
 8011100:	4b24      	ldr	r3, [pc, #144]	@ (8011194 <vPortFree+0xb8>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	4013      	ands	r3, r2
 8011106:	2b00      	cmp	r3, #0
 8011108:	d10d      	bne.n	8011126 <vPortFree+0x4a>
	__asm volatile
 801110a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801110e:	b672      	cpsid	i
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	b662      	cpsie	i
 801111e:	60fb      	str	r3, [r7, #12]
}
 8011120:	bf00      	nop
 8011122:	bf00      	nop
 8011124:	e7fd      	b.n	8011122 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011126:	693b      	ldr	r3, [r7, #16]
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00d      	beq.n	801114a <vPortFree+0x6e>
	__asm volatile
 801112e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011132:	b672      	cpsid	i
 8011134:	f383 8811 	msr	BASEPRI, r3
 8011138:	f3bf 8f6f 	isb	sy
 801113c:	f3bf 8f4f 	dsb	sy
 8011140:	b662      	cpsie	i
 8011142:	60bb      	str	r3, [r7, #8]
}
 8011144:	bf00      	nop
 8011146:	bf00      	nop
 8011148:	e7fd      	b.n	8011146 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801114a:	693b      	ldr	r3, [r7, #16]
 801114c:	685a      	ldr	r2, [r3, #4]
 801114e:	4b11      	ldr	r3, [pc, #68]	@ (8011194 <vPortFree+0xb8>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	4013      	ands	r3, r2
 8011154:	2b00      	cmp	r3, #0
 8011156:	d019      	beq.n	801118c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d115      	bne.n	801118c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011160:	693b      	ldr	r3, [r7, #16]
 8011162:	685a      	ldr	r2, [r3, #4]
 8011164:	4b0b      	ldr	r3, [pc, #44]	@ (8011194 <vPortFree+0xb8>)
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	43db      	mvns	r3, r3
 801116a:	401a      	ands	r2, r3
 801116c:	693b      	ldr	r3, [r7, #16]
 801116e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011170:	f7fe fb0a 	bl	800f788 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011174:	693b      	ldr	r3, [r7, #16]
 8011176:	685a      	ldr	r2, [r3, #4]
 8011178:	4b07      	ldr	r3, [pc, #28]	@ (8011198 <vPortFree+0xbc>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	4413      	add	r3, r2
 801117e:	4a06      	ldr	r2, [pc, #24]	@ (8011198 <vPortFree+0xbc>)
 8011180:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011182:	6938      	ldr	r0, [r7, #16]
 8011184:	f000 f86c 	bl	8011260 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011188:	f7fe fb0c 	bl	800f7a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801118c:	bf00      	nop
 801118e:	3718      	adds	r7, #24
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	2001f09c 	.word	0x2001f09c
 8011198:	2001f094 	.word	0x2001f094

0801119c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801119c:	b480      	push	{r7}
 801119e:	b085      	sub	sp, #20
 80111a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80111a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80111a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80111a8:	4b27      	ldr	r3, [pc, #156]	@ (8011248 <prvHeapInit+0xac>)
 80111aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f003 0307 	and.w	r3, r3, #7
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00c      	beq.n	80111d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	3307      	adds	r3, #7
 80111ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	f023 0307 	bic.w	r3, r3, #7
 80111c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80111c4:	68ba      	ldr	r2, [r7, #8]
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	1ad3      	subs	r3, r2, r3
 80111ca:	4a1f      	ldr	r2, [pc, #124]	@ (8011248 <prvHeapInit+0xac>)
 80111cc:	4413      	add	r3, r2
 80111ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80111d0:	68fb      	ldr	r3, [r7, #12]
 80111d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80111d4:	4a1d      	ldr	r2, [pc, #116]	@ (801124c <prvHeapInit+0xb0>)
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80111da:	4b1c      	ldr	r3, [pc, #112]	@ (801124c <prvHeapInit+0xb0>)
 80111dc:	2200      	movs	r2, #0
 80111de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	68ba      	ldr	r2, [r7, #8]
 80111e4:	4413      	add	r3, r2
 80111e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80111e8:	2208      	movs	r2, #8
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	1a9b      	subs	r3, r3, r2
 80111ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	f023 0307 	bic.w	r3, r3, #7
 80111f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	4a15      	ldr	r2, [pc, #84]	@ (8011250 <prvHeapInit+0xb4>)
 80111fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80111fe:	4b14      	ldr	r3, [pc, #80]	@ (8011250 <prvHeapInit+0xb4>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	2200      	movs	r2, #0
 8011204:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011206:	4b12      	ldr	r3, [pc, #72]	@ (8011250 <prvHeapInit+0xb4>)
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	2200      	movs	r2, #0
 801120c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	68fa      	ldr	r2, [r7, #12]
 8011216:	1ad2      	subs	r2, r2, r3
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801121c:	4b0c      	ldr	r3, [pc, #48]	@ (8011250 <prvHeapInit+0xb4>)
 801121e:	681a      	ldr	r2, [r3, #0]
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	685b      	ldr	r3, [r3, #4]
 8011228:	4a0a      	ldr	r2, [pc, #40]	@ (8011254 <prvHeapInit+0xb8>)
 801122a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801122c:	683b      	ldr	r3, [r7, #0]
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	4a09      	ldr	r2, [pc, #36]	@ (8011258 <prvHeapInit+0xbc>)
 8011232:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011234:	4b09      	ldr	r3, [pc, #36]	@ (801125c <prvHeapInit+0xc0>)
 8011236:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801123a:	601a      	str	r2, [r3, #0]
}
 801123c:	bf00      	nop
 801123e:	3714      	adds	r7, #20
 8011240:	46bd      	mov	sp, r7
 8011242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011246:	4770      	bx	lr
 8011248:	2000f088 	.word	0x2000f088
 801124c:	2001f088 	.word	0x2001f088
 8011250:	2001f090 	.word	0x2001f090
 8011254:	2001f098 	.word	0x2001f098
 8011258:	2001f094 	.word	0x2001f094
 801125c:	2001f09c 	.word	0x2001f09c

08011260 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011260:	b480      	push	{r7}
 8011262:	b085      	sub	sp, #20
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011268:	4b28      	ldr	r3, [pc, #160]	@ (801130c <prvInsertBlockIntoFreeList+0xac>)
 801126a:	60fb      	str	r3, [r7, #12]
 801126c:	e002      	b.n	8011274 <prvInsertBlockIntoFreeList+0x14>
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	60fb      	str	r3, [r7, #12]
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	687a      	ldr	r2, [r7, #4]
 801127a:	429a      	cmp	r2, r3
 801127c:	d8f7      	bhi.n	801126e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	68ba      	ldr	r2, [r7, #8]
 8011288:	4413      	add	r3, r2
 801128a:	687a      	ldr	r2, [r7, #4]
 801128c:	429a      	cmp	r2, r3
 801128e:	d108      	bne.n	80112a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	685a      	ldr	r2, [r3, #4]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	685b      	ldr	r3, [r3, #4]
 8011298:	441a      	add	r2, r3
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	68ba      	ldr	r2, [r7, #8]
 80112ac:	441a      	add	r2, r3
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d118      	bne.n	80112e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80112b6:	68fb      	ldr	r3, [r7, #12]
 80112b8:	681a      	ldr	r2, [r3, #0]
 80112ba:	4b15      	ldr	r3, [pc, #84]	@ (8011310 <prvInsertBlockIntoFreeList+0xb0>)
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d00d      	beq.n	80112de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	685a      	ldr	r2, [r3, #4]
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	685b      	ldr	r3, [r3, #4]
 80112cc:	441a      	add	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	601a      	str	r2, [r3, #0]
 80112dc:	e008      	b.n	80112f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80112de:	4b0c      	ldr	r3, [pc, #48]	@ (8011310 <prvInsertBlockIntoFreeList+0xb0>)
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	601a      	str	r2, [r3, #0]
 80112e6:	e003      	b.n	80112f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80112f0:	68fa      	ldr	r2, [r7, #12]
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	d002      	beq.n	80112fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112fe:	bf00      	nop
 8011300:	3714      	adds	r7, #20
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop
 801130c:	2001f088 	.word	0x2001f088
 8011310:	2001f090 	.word	0x2001f090

08011314 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8011314:	b580      	push	{r7, lr}
 8011316:	b084      	sub	sp, #16
 8011318:	af00      	add	r7, sp, #0
 801131a:	6078      	str	r0, [r7, #4]
 801131c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	330c      	adds	r3, #12
 8011324:	461a      	mov	r2, r3
 8011326:	6839      	ldr	r1, [r7, #0]
 8011328:	6878      	ldr	r0, [r7, #4]
 801132a:	f001 fff7 	bl	801331c <tcpip_send_msg_wait_sem>
 801132e:	4603      	mov	r3, r0
 8011330:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d103      	bne.n	8011342 <netconn_apimsg+0x2e>
    return apimsg->err;
 801133a:	683b      	ldr	r3, [r7, #0]
 801133c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011340:	e001      	b.n	8011346 <netconn_apimsg+0x32>
  }
  return err;
 8011342:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3710      	adds	r7, #16
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
	...

08011350 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b08c      	sub	sp, #48	@ 0x30
 8011354:	af00      	add	r7, sp, #0
 8011356:	4603      	mov	r3, r0
 8011358:	603a      	str	r2, [r7, #0]
 801135a:	71fb      	strb	r3, [r7, #7]
 801135c:	460b      	mov	r3, r1
 801135e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8011360:	79fb      	ldrb	r3, [r7, #7]
 8011362:	6839      	ldr	r1, [r7, #0]
 8011364:	4618      	mov	r0, r3
 8011366:	f000 ff21 	bl	80121ac <netconn_alloc>
 801136a:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 801136c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136e:	2b00      	cmp	r3, #0
 8011370:	d054      	beq.n	801141c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8011372:	79bb      	ldrb	r3, [r7, #6]
 8011374:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8011376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011378:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801137a:	f107 0308 	add.w	r3, r7, #8
 801137e:	4619      	mov	r1, r3
 8011380:	4829      	ldr	r0, [pc, #164]	@ (8011428 <netconn_new_with_proto_and_callback+0xd8>)
 8011382:	f7ff ffc7 	bl	8011314 <netconn_apimsg>
 8011386:	4603      	mov	r3, r0
 8011388:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 801138c:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8011390:	2b00      	cmp	r3, #0
 8011392:	d043      	beq.n	801141c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8011394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011396:	685b      	ldr	r3, [r3, #4]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d005      	beq.n	80113a8 <netconn_new_with_proto_and_callback+0x58>
 801139c:	4b23      	ldr	r3, [pc, #140]	@ (801142c <netconn_new_with_proto_and_callback+0xdc>)
 801139e:	22a3      	movs	r2, #163	@ 0xa3
 80113a0:	4923      	ldr	r1, [pc, #140]	@ (8011430 <netconn_new_with_proto_and_callback+0xe0>)
 80113a2:	4824      	ldr	r0, [pc, #144]	@ (8011434 <netconn_new_with_proto_and_callback+0xe4>)
 80113a4:	f00e ff7a 	bl	802029c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80113a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113aa:	3310      	adds	r3, #16
 80113ac:	4618      	mov	r0, r3
 80113ae:	f00d fba3 	bl	801eaf8 <sys_mbox_valid>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d105      	bne.n	80113c4 <netconn_new_with_proto_and_callback+0x74>
 80113b8:	4b1c      	ldr	r3, [pc, #112]	@ (801142c <netconn_new_with_proto_and_callback+0xdc>)
 80113ba:	22a4      	movs	r2, #164	@ 0xa4
 80113bc:	491e      	ldr	r1, [pc, #120]	@ (8011438 <netconn_new_with_proto_and_callback+0xe8>)
 80113be:	481d      	ldr	r0, [pc, #116]	@ (8011434 <netconn_new_with_proto_and_callback+0xe4>)
 80113c0:	f00e ff6c 	bl	802029c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80113c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113c6:	3314      	adds	r3, #20
 80113c8:	4618      	mov	r0, r3
 80113ca:	f00d fb95 	bl	801eaf8 <sys_mbox_valid>
 80113ce:	4603      	mov	r3, r0
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d005      	beq.n	80113e0 <netconn_new_with_proto_and_callback+0x90>
 80113d4:	4b15      	ldr	r3, [pc, #84]	@ (801142c <netconn_new_with_proto_and_callback+0xdc>)
 80113d6:	22a6      	movs	r2, #166	@ 0xa6
 80113d8:	4918      	ldr	r1, [pc, #96]	@ (801143c <netconn_new_with_proto_and_callback+0xec>)
 80113da:	4816      	ldr	r0, [pc, #88]	@ (8011434 <netconn_new_with_proto_and_callback+0xe4>)
 80113dc:	f00e ff5e 	bl	802029c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80113e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113e2:	330c      	adds	r3, #12
 80113e4:	4618      	mov	r0, r3
 80113e6:	f00d fc41 	bl	801ec6c <sys_sem_valid>
 80113ea:	4603      	mov	r3, r0
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d105      	bne.n	80113fc <netconn_new_with_proto_and_callback+0xac>
 80113f0:	4b0e      	ldr	r3, [pc, #56]	@ (801142c <netconn_new_with_proto_and_callback+0xdc>)
 80113f2:	22a9      	movs	r2, #169	@ 0xa9
 80113f4:	4912      	ldr	r1, [pc, #72]	@ (8011440 <netconn_new_with_proto_and_callback+0xf0>)
 80113f6:	480f      	ldr	r0, [pc, #60]	@ (8011434 <netconn_new_with_proto_and_callback+0xe4>)
 80113f8:	f00e ff50 	bl	802029c <iprintf>
      sys_sem_free(&conn->op_completed);
 80113fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113fe:	330c      	adds	r3, #12
 8011400:	4618      	mov	r0, r3
 8011402:	f00d fc1b 	bl	801ec3c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8011406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011408:	3310      	adds	r3, #16
 801140a:	4618      	mov	r0, r3
 801140c:	f00d fae0 	bl	801e9d0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8011410:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011412:	2007      	movs	r0, #7
 8011414:	f002 fdfc 	bl	8014010 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8011418:	2300      	movs	r3, #0
 801141a:	e000      	b.n	801141e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 801141c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801141e:	4618      	mov	r0, r3
 8011420:	3730      	adds	r7, #48	@ 0x30
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	08012181 	.word	0x08012181
 801142c:	0802138c 	.word	0x0802138c
 8011430:	080213c0 	.word	0x080213c0
 8011434:	080213e4 	.word	0x080213e4
 8011438:	0802140c 	.word	0x0802140c
 801143c:	08021424 	.word	0x08021424
 8011440:	08021448 	.word	0x08021448

08011444 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b08c      	sub	sp, #48	@ 0x30
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8011452:	2300      	movs	r3, #0
 8011454:	e014      	b.n	8011480 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801145a:	2329      	movs	r3, #41	@ 0x29
 801145c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 801145e:	f107 030c 	add.w	r3, r7, #12
 8011462:	4619      	mov	r1, r3
 8011464:	4808      	ldr	r0, [pc, #32]	@ (8011488 <netconn_prepare_delete+0x44>)
 8011466:	f7ff ff55 	bl	8011314 <netconn_apimsg>
 801146a:	4603      	mov	r3, r0
 801146c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8011470:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8011474:	2b00      	cmp	r3, #0
 8011476:	d002      	beq.n	801147e <netconn_prepare_delete+0x3a>
    return err;
 8011478:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 801147c:	e000      	b.n	8011480 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 801147e:	2300      	movs	r3, #0
}
 8011480:	4618      	mov	r0, r3
 8011482:	3730      	adds	r7, #48	@ 0x30
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	080126ed 	.word	0x080126ed

0801148c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d101      	bne.n	801149e <netconn_delete+0x12>
    return ERR_OK;
 801149a:	2300      	movs	r3, #0
 801149c:	e00d      	b.n	80114ba <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f7ff ffd0 	bl	8011444 <netconn_prepare_delete>
 80114a4:	4603      	mov	r3, r0
 80114a6:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80114a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d102      	bne.n	80114b6 <netconn_delete+0x2a>
    netconn_free(conn);
 80114b0:	6878      	ldr	r0, [r7, #4]
 80114b2:	f000 fee9 	bl	8012288 <netconn_free>
  }
  return err;
 80114b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3710      	adds	r7, #16
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
	...

080114c4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b08e      	sub	sp, #56	@ 0x38
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	60f8      	str	r0, [r7, #12]
 80114cc:	60b9      	str	r1, [r7, #8]
 80114ce:	4613      	mov	r3, r2
 80114d0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d109      	bne.n	80114ec <netconn_bind+0x28>
 80114d8:	4b11      	ldr	r3, [pc, #68]	@ (8011520 <netconn_bind+0x5c>)
 80114da:	f44f 729c 	mov.w	r2, #312	@ 0x138
 80114de:	4911      	ldr	r1, [pc, #68]	@ (8011524 <netconn_bind+0x60>)
 80114e0:	4811      	ldr	r0, [pc, #68]	@ (8011528 <netconn_bind+0x64>)
 80114e2:	f00e fedb 	bl	802029c <iprintf>
 80114e6:	f06f 030f 	mvn.w	r3, #15
 80114ea:	e015      	b.n	8011518 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d101      	bne.n	80114f6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80114f2:	4b0e      	ldr	r3, [pc, #56]	@ (801152c <netconn_bind+0x68>)
 80114f4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80114fe:	88fb      	ldrh	r3, [r7, #6]
 8011500:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011502:	f107 0314 	add.w	r3, r7, #20
 8011506:	4619      	mov	r1, r3
 8011508:	4809      	ldr	r0, [pc, #36]	@ (8011530 <netconn_bind+0x6c>)
 801150a:	f7ff ff03 	bl	8011314 <netconn_apimsg>
 801150e:	4603      	mov	r3, r0
 8011510:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011514:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8011518:	4618      	mov	r0, r3
 801151a:	3738      	adds	r7, #56	@ 0x38
 801151c:	46bd      	mov	sp, r7
 801151e:	bd80      	pop	{r7, pc}
 8011520:	0802138c 	.word	0x0802138c
 8011524:	080214c4 	.word	0x080214c4
 8011528:	080213e4 	.word	0x080213e4
 801152c:	08024ec4 	.word	0x08024ec4
 8011530:	080128b5 	.word	0x080128b5

08011534 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b088      	sub	sp, #32
 8011538:	af00      	add	r7, sp, #0
 801153a:	60f8      	str	r0, [r7, #12]
 801153c:	60b9      	str	r1, [r7, #8]
 801153e:	4613      	mov	r3, r2
 8011540:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8011542:	2300      	movs	r3, #0
 8011544:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d109      	bne.n	8011560 <netconn_recv_data+0x2c>
 801154c:	4b58      	ldr	r3, [pc, #352]	@ (80116b0 <netconn_recv_data+0x17c>)
 801154e:	f44f 7212 	mov.w	r2, #584	@ 0x248
 8011552:	4958      	ldr	r1, [pc, #352]	@ (80116b4 <netconn_recv_data+0x180>)
 8011554:	4858      	ldr	r0, [pc, #352]	@ (80116b8 <netconn_recv_data+0x184>)
 8011556:	f00e fea1 	bl	802029c <iprintf>
 801155a:	f06f 030f 	mvn.w	r3, #15
 801155e:	e0a2      	b.n	80116a6 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8011560:	68bb      	ldr	r3, [r7, #8]
 8011562:	2200      	movs	r2, #0
 8011564:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d109      	bne.n	8011580 <netconn_recv_data+0x4c>
 801156c:	4b50      	ldr	r3, [pc, #320]	@ (80116b0 <netconn_recv_data+0x17c>)
 801156e:	f240 224a 	movw	r2, #586	@ 0x24a
 8011572:	4952      	ldr	r1, [pc, #328]	@ (80116bc <netconn_recv_data+0x188>)
 8011574:	4850      	ldr	r0, [pc, #320]	@ (80116b8 <netconn_recv_data+0x184>)
 8011576:	f00e fe91 	bl	802029c <iprintf>
 801157a:	f06f 030f 	mvn.w	r3, #15
 801157e:	e092      	b.n	80116a6 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	3310      	adds	r3, #16
 8011584:	4618      	mov	r0, r3
 8011586:	f00d fab7 	bl	801eaf8 <sys_mbox_valid>
 801158a:	4603      	mov	r3, r0
 801158c:	2b00      	cmp	r3, #0
 801158e:	d10e      	bne.n	80115ae <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011590:	68f8      	ldr	r0, [r7, #12]
 8011592:	f000 fa45 	bl	8011a20 <netconn_err>
 8011596:	4603      	mov	r3, r0
 8011598:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801159a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d002      	beq.n	80115a8 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80115a2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80115a6:	e07e      	b.n	80116a6 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 80115a8:	f06f 030a 	mvn.w	r3, #10
 80115ac:	e07b      	b.n	80116a6 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	7f1b      	ldrb	r3, [r3, #28]
 80115b2:	f003 0302 	and.w	r3, r3, #2
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d10f      	bne.n	80115da <netconn_recv_data+0xa6>
 80115ba:	79fb      	ldrb	r3, [r7, #7]
 80115bc:	f003 0304 	and.w	r3, r3, #4
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d10a      	bne.n	80115da <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	7f1b      	ldrb	r3, [r3, #28]
 80115c8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d104      	bne.n	80115da <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d023      	beq.n	8011622 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	3310      	adds	r3, #16
 80115de:	f107 0218 	add.w	r2, r7, #24
 80115e2:	4611      	mov	r1, r2
 80115e4:	4618      	mov	r0, r3
 80115e6:	f00d fa70 	bl	801eaca <sys_arch_mbox_tryfetch>
 80115ea:	4603      	mov	r3, r0
 80115ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80115f0:	d11f      	bne.n	8011632 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	f000 fa14 	bl	8011a20 <netconn_err>
 80115f8:	4603      	mov	r3, r0
 80115fa:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80115fc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d002      	beq.n	801160a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8011604:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011608:	e04d      	b.n	80116a6 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	7f1b      	ldrb	r3, [r3, #28]
 801160e:	f003 0301 	and.w	r3, r3, #1
 8011612:	2b00      	cmp	r3, #0
 8011614:	d002      	beq.n	801161c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011616:	f06f 030a 	mvn.w	r3, #10
 801161a:	e044      	b.n	80116a6 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 801161c:	f06f 0306 	mvn.w	r3, #6
 8011620:	e041      	b.n	80116a6 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	3310      	adds	r3, #16
 8011626:	f107 0118 	add.w	r1, r7, #24
 801162a:	2200      	movs	r2, #0
 801162c:	4618      	mov	r0, r3
 801162e:	f00d fa1b 	bl	801ea68 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	781b      	ldrb	r3, [r3, #0]
 8011636:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801163a:	2b10      	cmp	r3, #16
 801163c:	d117      	bne.n	801166e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801163e:	69bb      	ldr	r3, [r7, #24]
 8011640:	f107 0217 	add.w	r2, r7, #23
 8011644:	4611      	mov	r1, r2
 8011646:	4618      	mov	r0, r3
 8011648:	f000 fa3c 	bl	8011ac4 <lwip_netconn_is_err_msg>
 801164c:	4603      	mov	r3, r0
 801164e:	2b00      	cmp	r3, #0
 8011650:	d009      	beq.n	8011666 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8011652:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011656:	f113 0f0f 	cmn.w	r3, #15
 801165a:	d101      	bne.n	8011660 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801165c:	2300      	movs	r3, #0
 801165e:	e022      	b.n	80116a6 <netconn_recv_data+0x172>
      }
      return err;
 8011660:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011664:	e01f      	b.n	80116a6 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8011666:	69bb      	ldr	r3, [r7, #24]
 8011668:	891b      	ldrh	r3, [r3, #8]
 801166a:	83fb      	strh	r3, [r7, #30]
 801166c:	e00d      	b.n	801168a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801166e:	69bb      	ldr	r3, [r7, #24]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d106      	bne.n	8011682 <netconn_recv_data+0x14e>
 8011674:	4b0e      	ldr	r3, [pc, #56]	@ (80116b0 <netconn_recv_data+0x17c>)
 8011676:	f240 2291 	movw	r2, #657	@ 0x291
 801167a:	4911      	ldr	r1, [pc, #68]	@ (80116c0 <netconn_recv_data+0x18c>)
 801167c:	480e      	ldr	r0, [pc, #56]	@ (80116b8 <netconn_recv_data+0x184>)
 801167e:	f00e fe0d 	bl	802029c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8011682:	69bb      	ldr	r3, [r7, #24]
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	891b      	ldrh	r3, [r3, #8]
 8011688:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801168e:	2b00      	cmp	r3, #0
 8011690:	d005      	beq.n	801169e <netconn_recv_data+0x16a>
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011696:	8bfa      	ldrh	r2, [r7, #30]
 8011698:	2101      	movs	r1, #1
 801169a:	68f8      	ldr	r0, [r7, #12]
 801169c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801169e:	69ba      	ldr	r2, [r7, #24]
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80116a4:	2300      	movs	r3, #0
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3720      	adds	r7, #32
 80116aa:	46bd      	mov	sp, r7
 80116ac:	bd80      	pop	{r7, pc}
 80116ae:	bf00      	nop
 80116b0:	0802138c 	.word	0x0802138c
 80116b4:	080215a4 	.word	0x080215a4
 80116b8:	080213e4 	.word	0x080213e4
 80116bc:	080215c4 	.word	0x080215c4
 80116c0:	080215e0 	.word	0x080215e0

080116c4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b084      	sub	sp, #16
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	60f8      	str	r0, [r7, #12]
 80116cc:	60b9      	str	r1, [r7, #8]
 80116ce:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d005      	beq.n	80116e2 <netconn_tcp_recvd_msg+0x1e>
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80116de:	2b10      	cmp	r3, #16
 80116e0:	d009      	beq.n	80116f6 <netconn_tcp_recvd_msg+0x32>
 80116e2:	4b0c      	ldr	r3, [pc, #48]	@ (8011714 <netconn_tcp_recvd_msg+0x50>)
 80116e4:	f240 22a7 	movw	r2, #679	@ 0x2a7
 80116e8:	490b      	ldr	r1, [pc, #44]	@ (8011718 <netconn_tcp_recvd_msg+0x54>)
 80116ea:	480c      	ldr	r0, [pc, #48]	@ (801171c <netconn_tcp_recvd_msg+0x58>)
 80116ec:	f00e fdd6 	bl	802029c <iprintf>
 80116f0:	f06f 030f 	mvn.w	r3, #15
 80116f4:	e00a      	b.n	801170c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	68fa      	ldr	r2, [r7, #12]
 80116fa:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	68ba      	ldr	r2, [r7, #8]
 8011700:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011702:	6879      	ldr	r1, [r7, #4]
 8011704:	4806      	ldr	r0, [pc, #24]	@ (8011720 <netconn_tcp_recvd_msg+0x5c>)
 8011706:	f7ff fe05 	bl	8011314 <netconn_apimsg>
 801170a:	4603      	mov	r3, r0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3710      	adds	r7, #16
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	0802138c 	.word	0x0802138c
 8011718:	080215ec 	.word	0x080215ec
 801171c:	080213e4 	.word	0x080213e4
 8011720:	080129c3 	.word	0x080129c3

08011724 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b090      	sub	sp, #64	@ 0x40
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	4613      	mov	r3, r2
 8011730:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	3310      	adds	r3, #16
 8011736:	4618      	mov	r0, r3
 8011738:	f00d f9de 	bl	801eaf8 <sys_mbox_valid>
 801173c:	4603      	mov	r3, r0
 801173e:	2b00      	cmp	r3, #0
 8011740:	d102      	bne.n	8011748 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8011742:	f06f 030a 	mvn.w	r3, #10
 8011746:	e06d      	b.n	8011824 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	7f1b      	ldrb	r3, [r3, #28]
 801174c:	b25b      	sxtb	r3, r3
 801174e:	2b00      	cmp	r3, #0
 8011750:	da07      	bge.n	8011762 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8011752:	68fb      	ldr	r3, [r7, #12]
 8011754:	7f1b      	ldrb	r3, [r3, #28]
 8011756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801175a:	b2da      	uxtb	r2, r3
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8011760:	e039      	b.n	80117d6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8011762:	79fb      	ldrb	r3, [r7, #7]
 8011764:	461a      	mov	r2, r3
 8011766:	68b9      	ldr	r1, [r7, #8]
 8011768:	68f8      	ldr	r0, [r7, #12]
 801176a:	f7ff fee3 	bl	8011534 <netconn_recv_data>
 801176e:	4603      	mov	r3, r0
 8011770:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 8011774:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011778:	2b00      	cmp	r3, #0
 801177a:	d002      	beq.n	8011782 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801177c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011780:	e050      	b.n	8011824 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8011788:	79fb      	ldrb	r3, [r7, #7]
 801178a:	f003 0308 	and.w	r3, r3, #8
 801178e:	2b00      	cmp	r3, #0
 8011790:	d10e      	bne.n	80117b0 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011794:	2b00      	cmp	r3, #0
 8011796:	d002      	beq.n	801179e <netconn_recv_data_tcp+0x7a>
 8011798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801179a:	891b      	ldrh	r3, [r3, #8]
 801179c:	e000      	b.n	80117a0 <netconn_recv_data_tcp+0x7c>
 801179e:	2301      	movs	r3, #1
 80117a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80117a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80117a4:	f107 0214 	add.w	r2, r7, #20
 80117a8:	4619      	mov	r1, r3
 80117aa:	68f8      	ldr	r0, [r7, #12]
 80117ac:	f7ff ff8a 	bl	80116c4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80117b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d134      	bne.n	8011820 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80117b6:	79fb      	ldrb	r3, [r7, #7]
 80117b8:	f003 0310 	and.w	r3, r3, #16
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d009      	beq.n	80117d4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	7f1b      	ldrb	r3, [r3, #28]
 80117c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 80117ce:	f06f 0306 	mvn.w	r3, #6
 80117d2:	e027      	b.n	8011824 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 80117d4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d005      	beq.n	80117ea <netconn_recv_data_tcp+0xc6>
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80117e2:	2200      	movs	r2, #0
 80117e4:	2101      	movs	r1, #1
 80117e6:	68f8      	ldr	r0, [r7, #12]
 80117e8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	685b      	ldr	r3, [r3, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d10f      	bne.n	8011812 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f000 f914 	bl	8011a20 <netconn_err>
 80117f8:	4603      	mov	r3, r0
 80117fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 80117fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011802:	2b00      	cmp	r3, #0
 8011804:	d002      	beq.n	801180c <netconn_recv_data_tcp+0xe8>
          return err;
 8011806:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801180a:	e00b      	b.n	8011824 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 801180c:	f06f 030d 	mvn.w	r3, #13
 8011810:	e008      	b.n	8011824 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011812:	2101      	movs	r1, #1
 8011814:	68f8      	ldr	r0, [r7, #12]
 8011816:	f000 f8d3 	bl	80119c0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801181a:	f06f 030e 	mvn.w	r3, #14
 801181e:	e001      	b.n	8011824 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011820:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8011824:	4618      	mov	r0, r3
 8011826:	3740      	adds	r7, #64	@ 0x40
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b086      	sub	sp, #24
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8011836:	2300      	movs	r3, #0
 8011838:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d109      	bne.n	8011854 <netconn_recv+0x28>
 8011840:	4b32      	ldr	r3, [pc, #200]	@ (801190c <netconn_recv+0xe0>)
 8011842:	f240 3263 	movw	r2, #867	@ 0x363
 8011846:	4932      	ldr	r1, [pc, #200]	@ (8011910 <netconn_recv+0xe4>)
 8011848:	4832      	ldr	r0, [pc, #200]	@ (8011914 <netconn_recv+0xe8>)
 801184a:	f00e fd27 	bl	802029c <iprintf>
 801184e:	f06f 030f 	mvn.w	r3, #15
 8011852:	e056      	b.n	8011902 <netconn_recv+0xd6>
  *new_buf = NULL;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	2200      	movs	r2, #0
 8011858:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d109      	bne.n	8011874 <netconn_recv+0x48>
 8011860:	4b2a      	ldr	r3, [pc, #168]	@ (801190c <netconn_recv+0xe0>)
 8011862:	f240 3265 	movw	r2, #869	@ 0x365
 8011866:	492c      	ldr	r1, [pc, #176]	@ (8011918 <netconn_recv+0xec>)
 8011868:	482a      	ldr	r0, [pc, #168]	@ (8011914 <netconn_recv+0xe8>)
 801186a:	f00e fd17 	bl	802029c <iprintf>
 801186e:	f06f 030f 	mvn.w	r3, #15
 8011872:	e046      	b.n	8011902 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801187c:	2b10      	cmp	r3, #16
 801187e:	d13a      	bne.n	80118f6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8011880:	2300      	movs	r3, #0
 8011882:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011884:	2006      	movs	r0, #6
 8011886:	f002 fb47 	bl	8013f18 <memp_malloc>
 801188a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d102      	bne.n	8011898 <netconn_recv+0x6c>
      return ERR_MEM;
 8011892:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011896:	e034      	b.n	8011902 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011898:	f107 030c 	add.w	r3, r7, #12
 801189c:	2200      	movs	r2, #0
 801189e:	4619      	mov	r1, r3
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7ff ff3f 	bl	8011724 <netconn_recv_data_tcp>
 80118a6:	4603      	mov	r3, r0
 80118a8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80118aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d006      	beq.n	80118c0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80118b2:	6979      	ldr	r1, [r7, #20]
 80118b4:	2006      	movs	r0, #6
 80118b6:	f002 fbab 	bl	8014010 <memp_free>
      return err;
 80118ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118be:	e020      	b.n	8011902 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d106      	bne.n	80118d4 <netconn_recv+0xa8>
 80118c6:	4b11      	ldr	r3, [pc, #68]	@ (801190c <netconn_recv+0xe0>)
 80118c8:	f240 3279 	movw	r2, #889	@ 0x379
 80118cc:	4913      	ldr	r1, [pc, #76]	@ (801191c <netconn_recv+0xf0>)
 80118ce:	4811      	ldr	r0, [pc, #68]	@ (8011914 <netconn_recv+0xe8>)
 80118d0:	f00e fce4 	bl	802029c <iprintf>

    buf->p = p;
 80118d4:	68fa      	ldr	r2, [r7, #12]
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80118da:	68fa      	ldr	r2, [r7, #12]
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	2200      	movs	r2, #0
 80118e4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	2200      	movs	r2, #0
 80118ea:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	697a      	ldr	r2, [r7, #20]
 80118f0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	e005      	b.n	8011902 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80118f6:	2200      	movs	r2, #0
 80118f8:	6839      	ldr	r1, [r7, #0]
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f7ff fe1a 	bl	8011534 <netconn_recv_data>
 8011900:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011902:	4618      	mov	r0, r3
 8011904:	3718      	adds	r7, #24
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	0802138c 	.word	0x0802138c
 8011910:	080215a4 	.word	0x080215a4
 8011914:	080213e4 	.word	0x080213e4
 8011918:	080215c4 	.word	0x080215c4
 801191c:	0802163c 	.word	0x0802163c

08011920 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	607a      	str	r2, [r7, #4]
 801192c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d011      	beq.n	8011958 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d002      	beq.n	8011940 <netconn_sendto+0x20>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	e000      	b.n	8011942 <netconn_sendto+0x22>
 8011940:	2300      	movs	r3, #0
 8011942:	68ba      	ldr	r2, [r7, #8]
 8011944:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	887a      	ldrh	r2, [r7, #2]
 801194a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 801194c:	68b9      	ldr	r1, [r7, #8]
 801194e:	68f8      	ldr	r0, [r7, #12]
 8011950:	f000 f808 	bl	8011964 <netconn_send>
 8011954:	4603      	mov	r3, r0
 8011956:	e001      	b.n	801195c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8011958:	f06f 0305 	mvn.w	r3, #5
}
 801195c:	4618      	mov	r0, r3
 801195e:	3710      	adds	r7, #16
 8011960:	46bd      	mov	sp, r7
 8011962:	bd80      	pop	{r7, pc}

08011964 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b08c      	sub	sp, #48	@ 0x30
 8011968:	af00      	add	r7, sp, #0
 801196a:	6078      	str	r0, [r7, #4]
 801196c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d109      	bne.n	8011988 <netconn_send+0x24>
 8011974:	4b0e      	ldr	r3, [pc, #56]	@ (80119b0 <netconn_send+0x4c>)
 8011976:	f240 32b2 	movw	r2, #946	@ 0x3b2
 801197a:	490e      	ldr	r1, [pc, #56]	@ (80119b4 <netconn_send+0x50>)
 801197c:	480e      	ldr	r0, [pc, #56]	@ (80119b8 <netconn_send+0x54>)
 801197e:	f00e fc8d 	bl	802029c <iprintf>
 8011982:	f06f 030f 	mvn.w	r3, #15
 8011986:	e00e      	b.n	80119a6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011990:	f107 030c 	add.w	r3, r7, #12
 8011994:	4619      	mov	r1, r3
 8011996:	4809      	ldr	r0, [pc, #36]	@ (80119bc <netconn_send+0x58>)
 8011998:	f7ff fcbc 	bl	8011314 <netconn_apimsg>
 801199c:	4603      	mov	r3, r0
 801199e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80119a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3730      	adds	r7, #48	@ 0x30
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	0802138c 	.word	0x0802138c
 80119b4:	08021648 	.word	0x08021648
 80119b8:	080213e4 	.word	0x080213e4
 80119bc:	08012929 	.word	0x08012929

080119c0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b08c      	sub	sp, #48	@ 0x30
 80119c4:	af00      	add	r7, sp, #0
 80119c6:	6078      	str	r0, [r7, #4]
 80119c8:	460b      	mov	r3, r1
 80119ca:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d109      	bne.n	80119e6 <netconn_close_shutdown+0x26>
 80119d2:	4b0f      	ldr	r3, [pc, #60]	@ (8011a10 <netconn_close_shutdown+0x50>)
 80119d4:	f240 4247 	movw	r2, #1095	@ 0x447
 80119d8:	490e      	ldr	r1, [pc, #56]	@ (8011a14 <netconn_close_shutdown+0x54>)
 80119da:	480f      	ldr	r0, [pc, #60]	@ (8011a18 <netconn_close_shutdown+0x58>)
 80119dc:	f00e fc5e 	bl	802029c <iprintf>
 80119e0:	f06f 030f 	mvn.w	r3, #15
 80119e4:	e010      	b.n	8011a08 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80119ea:	78fb      	ldrb	r3, [r7, #3]
 80119ec:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80119ee:	2329      	movs	r3, #41	@ 0x29
 80119f0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80119f2:	f107 030c 	add.w	r3, r7, #12
 80119f6:	4619      	mov	r1, r3
 80119f8:	4808      	ldr	r0, [pc, #32]	@ (8011a1c <netconn_close_shutdown+0x5c>)
 80119fa:	f7ff fc8b 	bl	8011314 <netconn_apimsg>
 80119fe:	4603      	mov	r3, r0
 8011a00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011a04:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	3730      	adds	r7, #48	@ 0x30
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	0802138c 	.word	0x0802138c
 8011a14:	080216c8 	.word	0x080216c8
 8011a18:	080213e4 	.word	0x080213e4
 8011a1c:	08012dc5 	.word	0x08012dc5

08011a20 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b084      	sub	sp, #16
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d101      	bne.n	8011a32 <netconn_err+0x12>
    return ERR_OK;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	e00d      	b.n	8011a4e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011a32:	f00d f9b7 	bl	801eda4 <sys_arch_protect>
 8011a36:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	7a1b      	ldrb	r3, [r3, #8]
 8011a3c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2200      	movs	r2, #0
 8011a42:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f00d f9bb 	bl	801edc0 <sys_arch_unprotect>
  return err;
 8011a4a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011a4e:	4618      	mov	r0, r3
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}
	...

08011a58 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8011a58:	b580      	push	{r7, lr}
 8011a5a:	b082      	sub	sp, #8
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	4603      	mov	r3, r0
 8011a60:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a66:	f113 0f0d 	cmn.w	r3, #13
 8011a6a:	d009      	beq.n	8011a80 <lwip_netconn_err_to_msg+0x28>
 8011a6c:	f113 0f0d 	cmn.w	r3, #13
 8011a70:	dc0c      	bgt.n	8011a8c <lwip_netconn_err_to_msg+0x34>
 8011a72:	f113 0f0f 	cmn.w	r3, #15
 8011a76:	d007      	beq.n	8011a88 <lwip_netconn_err_to_msg+0x30>
 8011a78:	f113 0f0e 	cmn.w	r3, #14
 8011a7c:	d002      	beq.n	8011a84 <lwip_netconn_err_to_msg+0x2c>
 8011a7e:	e005      	b.n	8011a8c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011a80:	4b0a      	ldr	r3, [pc, #40]	@ (8011aac <lwip_netconn_err_to_msg+0x54>)
 8011a82:	e00e      	b.n	8011aa2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011a84:	4b0a      	ldr	r3, [pc, #40]	@ (8011ab0 <lwip_netconn_err_to_msg+0x58>)
 8011a86:	e00c      	b.n	8011aa2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8011a88:	4b0a      	ldr	r3, [pc, #40]	@ (8011ab4 <lwip_netconn_err_to_msg+0x5c>)
 8011a8a:	e00a      	b.n	8011aa2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8011a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d005      	beq.n	8011aa0 <lwip_netconn_err_to_msg+0x48>
 8011a94:	4b08      	ldr	r3, [pc, #32]	@ (8011ab8 <lwip_netconn_err_to_msg+0x60>)
 8011a96:	227d      	movs	r2, #125	@ 0x7d
 8011a98:	4908      	ldr	r1, [pc, #32]	@ (8011abc <lwip_netconn_err_to_msg+0x64>)
 8011a9a:	4809      	ldr	r0, [pc, #36]	@ (8011ac0 <lwip_netconn_err_to_msg+0x68>)
 8011a9c:	f00e fbfe 	bl	802029c <iprintf>
      return NULL;
 8011aa0:	2300      	movs	r3, #0
  }
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	08024d7c 	.word	0x08024d7c
 8011ab0:	08024d7d 	.word	0x08024d7d
 8011ab4:	08024d7e 	.word	0x08024d7e
 8011ab8:	080216e4 	.word	0x080216e4
 8011abc:	08021718 	.word	0x08021718
 8011ac0:	08021728 	.word	0x08021728

08011ac4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
 8011acc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d105      	bne.n	8011ae0 <lwip_netconn_is_err_msg+0x1c>
 8011ad4:	4b12      	ldr	r3, [pc, #72]	@ (8011b20 <lwip_netconn_is_err_msg+0x5c>)
 8011ad6:	2285      	movs	r2, #133	@ 0x85
 8011ad8:	4912      	ldr	r1, [pc, #72]	@ (8011b24 <lwip_netconn_is_err_msg+0x60>)
 8011ada:	4813      	ldr	r0, [pc, #76]	@ (8011b28 <lwip_netconn_is_err_msg+0x64>)
 8011adc:	f00e fbde 	bl	802029c <iprintf>

  if (msg == &netconn_aborted) {
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	4a12      	ldr	r2, [pc, #72]	@ (8011b2c <lwip_netconn_is_err_msg+0x68>)
 8011ae4:	4293      	cmp	r3, r2
 8011ae6:	d104      	bne.n	8011af2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	22f3      	movs	r2, #243	@ 0xf3
 8011aec:	701a      	strb	r2, [r3, #0]
    return 1;
 8011aee:	2301      	movs	r3, #1
 8011af0:	e012      	b.n	8011b18 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	4a0e      	ldr	r2, [pc, #56]	@ (8011b30 <lwip_netconn_is_err_msg+0x6c>)
 8011af6:	4293      	cmp	r3, r2
 8011af8:	d104      	bne.n	8011b04 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	22f2      	movs	r2, #242	@ 0xf2
 8011afe:	701a      	strb	r2, [r3, #0]
    return 1;
 8011b00:	2301      	movs	r3, #1
 8011b02:	e009      	b.n	8011b18 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	4a0b      	ldr	r2, [pc, #44]	@ (8011b34 <lwip_netconn_is_err_msg+0x70>)
 8011b08:	4293      	cmp	r3, r2
 8011b0a:	d104      	bne.n	8011b16 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	22f1      	movs	r2, #241	@ 0xf1
 8011b10:	701a      	strb	r2, [r3, #0]
    return 1;
 8011b12:	2301      	movs	r3, #1
 8011b14:	e000      	b.n	8011b18 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011b16:	2300      	movs	r3, #0
}
 8011b18:	4618      	mov	r0, r3
 8011b1a:	3708      	adds	r7, #8
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	bd80      	pop	{r7, pc}
 8011b20:	080216e4 	.word	0x080216e4
 8011b24:	08021750 	.word	0x08021750
 8011b28:	08021728 	.word	0x08021728
 8011b2c:	08024d7c 	.word	0x08024d7c
 8011b30:	08024d7d 	.word	0x08024d7d
 8011b34:	08024d7e 	.word	0x08024d7e

08011b38 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b088      	sub	sp, #32
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8011b46:	68bb      	ldr	r3, [r7, #8]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d105      	bne.n	8011b58 <recv_udp+0x20>
 8011b4c:	4b34      	ldr	r3, [pc, #208]	@ (8011c20 <recv_udp+0xe8>)
 8011b4e:	22e5      	movs	r2, #229	@ 0xe5
 8011b50:	4934      	ldr	r1, [pc, #208]	@ (8011c24 <recv_udp+0xec>)
 8011b52:	4835      	ldr	r0, [pc, #212]	@ (8011c28 <recv_udp+0xf0>)
 8011b54:	f00e fba2 	bl	802029c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d105      	bne.n	8011b6a <recv_udp+0x32>
 8011b5e:	4b30      	ldr	r3, [pc, #192]	@ (8011c20 <recv_udp+0xe8>)
 8011b60:	22e6      	movs	r2, #230	@ 0xe6
 8011b62:	4932      	ldr	r1, [pc, #200]	@ (8011c2c <recv_udp+0xf4>)
 8011b64:	4830      	ldr	r0, [pc, #192]	@ (8011c28 <recv_udp+0xf0>)
 8011b66:	f00e fb99 	bl	802029c <iprintf>
  conn = (struct netconn *)arg;
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011b6e:	69fb      	ldr	r3, [r7, #28]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d103      	bne.n	8011b7c <recv_udp+0x44>
    pbuf_free(p);
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f003 f8ef 	bl	8014d58 <pbuf_free>
    return;
 8011b7a:	e04d      	b.n	8011c18 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	68ba      	ldr	r2, [r7, #8]
 8011b82:	429a      	cmp	r2, r3
 8011b84:	d005      	beq.n	8011b92 <recv_udp+0x5a>
 8011b86:	4b26      	ldr	r3, [pc, #152]	@ (8011c20 <recv_udp+0xe8>)
 8011b88:	22ee      	movs	r2, #238	@ 0xee
 8011b8a:	4929      	ldr	r1, [pc, #164]	@ (8011c30 <recv_udp+0xf8>)
 8011b8c:	4826      	ldr	r0, [pc, #152]	@ (8011c28 <recv_udp+0xf0>)
 8011b8e:	f00e fb85 	bl	802029c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	3310      	adds	r3, #16
 8011b96:	4618      	mov	r0, r3
 8011b98:	f00c ffae 	bl	801eaf8 <sys_mbox_valid>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d103      	bne.n	8011baa <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011ba2:	6878      	ldr	r0, [r7, #4]
 8011ba4:	f003 f8d8 	bl	8014d58 <pbuf_free>
    return;
 8011ba8:	e036      	b.n	8011c18 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8011baa:	2006      	movs	r0, #6
 8011bac:	f002 f9b4 	bl	8013f18 <memp_malloc>
 8011bb0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011bb2:	69bb      	ldr	r3, [r7, #24]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d103      	bne.n	8011bc0 <recv_udp+0x88>
    pbuf_free(p);
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f003 f8cd 	bl	8014d58 <pbuf_free>
    return;
 8011bbe:	e02b      	b.n	8011c18 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	687a      	ldr	r2, [r7, #4]
 8011bc4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	687a      	ldr	r2, [r7, #4]
 8011bca:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d002      	beq.n	8011bd8 <recv_udp+0xa0>
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	e000      	b.n	8011bda <recv_udp+0xa2>
 8011bd8:	2300      	movs	r3, #0
 8011bda:	69ba      	ldr	r2, [r7, #24]
 8011bdc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8011bde:	69bb      	ldr	r3, [r7, #24]
 8011be0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8011be2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	891b      	ldrh	r3, [r3, #8]
 8011be8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8011bea:	69fb      	ldr	r3, [r7, #28]
 8011bec:	3310      	adds	r3, #16
 8011bee:	69b9      	ldr	r1, [r7, #24]
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	f00c ff15 	bl	801ea20 <sys_mbox_trypost>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d003      	beq.n	8011c04 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011bfc:	69b8      	ldr	r0, [r7, #24]
 8011bfe:	f001 f981 	bl	8012f04 <netbuf_delete>
    return;
 8011c02:	e009      	b.n	8011c18 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011c04:	69fb      	ldr	r3, [r7, #28]
 8011c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d005      	beq.n	8011c18 <recv_udp+0xe0>
 8011c0c:	69fb      	ldr	r3, [r7, #28]
 8011c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011c10:	8afa      	ldrh	r2, [r7, #22]
 8011c12:	2100      	movs	r1, #0
 8011c14:	69f8      	ldr	r0, [r7, #28]
 8011c16:	4798      	blx	r3
  }
}
 8011c18:	3720      	adds	r7, #32
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}
 8011c1e:	bf00      	nop
 8011c20:	080216e4 	.word	0x080216e4
 8011c24:	0802175c 	.word	0x0802175c
 8011c28:	08021728 	.word	0x08021728
 8011c2c:	08021780 	.word	0x08021780
 8011c30:	080217a0 	.word	0x080217a0

08011c34 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b088      	sub	sp, #32
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	60f8      	str	r0, [r7, #12]
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011c42:	68bb      	ldr	r3, [r7, #8]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d106      	bne.n	8011c56 <recv_tcp+0x22>
 8011c48:	4b36      	ldr	r3, [pc, #216]	@ (8011d24 <recv_tcp+0xf0>)
 8011c4a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011c4e:	4936      	ldr	r1, [pc, #216]	@ (8011d28 <recv_tcp+0xf4>)
 8011c50:	4836      	ldr	r0, [pc, #216]	@ (8011d2c <recv_tcp+0xf8>)
 8011c52:	f00e fb23 	bl	802029c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d106      	bne.n	8011c6a <recv_tcp+0x36>
 8011c5c:	4b31      	ldr	r3, [pc, #196]	@ (8011d24 <recv_tcp+0xf0>)
 8011c5e:	f240 122d 	movw	r2, #301	@ 0x12d
 8011c62:	4933      	ldr	r1, [pc, #204]	@ (8011d30 <recv_tcp+0xfc>)
 8011c64:	4831      	ldr	r0, [pc, #196]	@ (8011d2c <recv_tcp+0xf8>)
 8011c66:	f00e fb19 	bl	802029c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8011c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d006      	beq.n	8011c80 <recv_tcp+0x4c>
 8011c72:	4b2c      	ldr	r3, [pc, #176]	@ (8011d24 <recv_tcp+0xf0>)
 8011c74:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8011c78:	492e      	ldr	r1, [pc, #184]	@ (8011d34 <recv_tcp+0x100>)
 8011c7a:	482c      	ldr	r0, [pc, #176]	@ (8011d2c <recv_tcp+0xf8>)
 8011c7c:	f00e fb0e 	bl	802029c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011c84:	697b      	ldr	r3, [r7, #20]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d102      	bne.n	8011c90 <recv_tcp+0x5c>
    return ERR_VAL;
 8011c8a:	f06f 0305 	mvn.w	r3, #5
 8011c8e:	e045      	b.n	8011d1c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011c90:	697b      	ldr	r3, [r7, #20]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	68ba      	ldr	r2, [r7, #8]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d006      	beq.n	8011ca8 <recv_tcp+0x74>
 8011c9a:	4b22      	ldr	r3, [pc, #136]	@ (8011d24 <recv_tcp+0xf0>)
 8011c9c:	f240 1235 	movw	r2, #309	@ 0x135
 8011ca0:	4925      	ldr	r1, [pc, #148]	@ (8011d38 <recv_tcp+0x104>)
 8011ca2:	4822      	ldr	r0, [pc, #136]	@ (8011d2c <recv_tcp+0xf8>)
 8011ca4:	f00e fafa 	bl	802029c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	3310      	adds	r3, #16
 8011cac:	4618      	mov	r0, r3
 8011cae:	f00c ff23 	bl	801eaf8 <sys_mbox_valid>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d10d      	bne.n	8011cd4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d008      	beq.n	8011cd0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	891b      	ldrh	r3, [r3, #8]
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	68b8      	ldr	r0, [r7, #8]
 8011cc6:	f003 ff4d 	bl	8015b64 <tcp_recved>
      pbuf_free(p);
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f003 f844 	bl	8014d58 <pbuf_free>
    }
    return ERR_OK;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	e023      	b.n	8011d1c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d005      	beq.n	8011ce6 <recv_tcp+0xb2>
    msg = p;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	891b      	ldrh	r3, [r3, #8]
 8011ce2:	83fb      	strh	r3, [r7, #30]
 8011ce4:	e003      	b.n	8011cee <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011ce6:	4b15      	ldr	r3, [pc, #84]	@ (8011d3c <recv_tcp+0x108>)
 8011ce8:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011cea:	2300      	movs	r3, #0
 8011cec:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	3310      	adds	r3, #16
 8011cf2:	69b9      	ldr	r1, [r7, #24]
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f00c fe93 	bl	801ea20 <sys_mbox_trypost>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d002      	beq.n	8011d06 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011d00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d04:	e00a      	b.n	8011d1c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d005      	beq.n	8011d1a <recv_tcp+0xe6>
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d12:	8bfa      	ldrh	r2, [r7, #30]
 8011d14:	2100      	movs	r1, #0
 8011d16:	6978      	ldr	r0, [r7, #20]
 8011d18:	4798      	blx	r3
  }

  return ERR_OK;
 8011d1a:	2300      	movs	r3, #0
}
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	3720      	adds	r7, #32
 8011d20:	46bd      	mov	sp, r7
 8011d22:	bd80      	pop	{r7, pc}
 8011d24:	080216e4 	.word	0x080216e4
 8011d28:	080217c0 	.word	0x080217c0
 8011d2c:	08021728 	.word	0x08021728
 8011d30:	080217e4 	.word	0x080217e4
 8011d34:	08021804 	.word	0x08021804
 8011d38:	0802181c 	.word	0x0802181c
 8011d3c:	08024d7e 	.word	0x08024d7e

08011d40 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b084      	sub	sp, #16
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d106      	bne.n	8011d62 <poll_tcp+0x22>
 8011d54:	4b29      	ldr	r3, [pc, #164]	@ (8011dfc <poll_tcp+0xbc>)
 8011d56:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 8011d5a:	4929      	ldr	r1, [pc, #164]	@ (8011e00 <poll_tcp+0xc0>)
 8011d5c:	4829      	ldr	r0, [pc, #164]	@ (8011e04 <poll_tcp+0xc4>)
 8011d5e:	f00e fa9d 	bl	802029c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	785b      	ldrb	r3, [r3, #1]
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	d104      	bne.n	8011d74 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011d6a:	2101      	movs	r1, #1
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f000 fe5d 	bl	8012a2c <lwip_netconn_do_writemore>
 8011d72:	e016      	b.n	8011da2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	785b      	ldrb	r3, [r3, #1]
 8011d78:	2b04      	cmp	r3, #4
 8011d7a:	d112      	bne.n	8011da2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	6a1b      	ldr	r3, [r3, #32]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d00a      	beq.n	8011d9a <poll_tcp+0x5a>
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6a1b      	ldr	r3, [r3, #32]
 8011d88:	7a5b      	ldrb	r3, [r3, #9]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d005      	beq.n	8011d9a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	6a1b      	ldr	r3, [r3, #32]
 8011d92:	7a5a      	ldrb	r2, [r3, #9]
 8011d94:	3a01      	subs	r2, #1
 8011d96:	b2d2      	uxtb	r2, r2
 8011d98:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011d9a:	2101      	movs	r1, #1
 8011d9c:	68f8      	ldr	r0, [r7, #12]
 8011d9e:	f000 fb3b 	bl	8012418 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	7f1b      	ldrb	r3, [r3, #28]
 8011da6:	f003 0310 	and.w	r3, r3, #16
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d021      	beq.n	8011df2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d01d      	beq.n	8011df2 <poll_tcp+0xb2>
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	685b      	ldr	r3, [r3, #4]
 8011dba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011dbe:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011dc2:	d316      	bcc.n	8011df2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	685b      	ldr	r3, [r3, #4]
 8011dc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011dcc:	2b04      	cmp	r3, #4
 8011dce:	d810      	bhi.n	8011df2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	7f1b      	ldrb	r3, [r3, #28]
 8011dd4:	f023 0310 	bic.w	r3, r3, #16
 8011dd8:	b2da      	uxtb	r2, r3
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d005      	beq.n	8011df2 <poll_tcp+0xb2>
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dea:	2200      	movs	r2, #0
 8011dec:	2102      	movs	r1, #2
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011df2:	2300      	movs	r3, #0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3710      	adds	r7, #16
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}
 8011dfc:	080216e4 	.word	0x080216e4
 8011e00:	0802183c 	.word	0x0802183c
 8011e04:	08021728 	.word	0x08021728

08011e08 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011e08:	b580      	push	{r7, lr}
 8011e0a:	b086      	sub	sp, #24
 8011e0c:	af00      	add	r7, sp, #0
 8011e0e:	60f8      	str	r0, [r7, #12]
 8011e10:	60b9      	str	r1, [r7, #8]
 8011e12:	4613      	mov	r3, r2
 8011e14:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011e1a:	697b      	ldr	r3, [r7, #20]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d106      	bne.n	8011e2e <sent_tcp+0x26>
 8011e20:	4b20      	ldr	r3, [pc, #128]	@ (8011ea4 <sent_tcp+0x9c>)
 8011e22:	f240 1293 	movw	r2, #403	@ 0x193
 8011e26:	4920      	ldr	r1, [pc, #128]	@ (8011ea8 <sent_tcp+0xa0>)
 8011e28:	4820      	ldr	r0, [pc, #128]	@ (8011eac <sent_tcp+0xa4>)
 8011e2a:	f00e fa37 	bl	802029c <iprintf>

  if (conn) {
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d032      	beq.n	8011e9a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	785b      	ldrb	r3, [r3, #1]
 8011e38:	2b01      	cmp	r3, #1
 8011e3a:	d104      	bne.n	8011e46 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011e3c:	2101      	movs	r1, #1
 8011e3e:	6978      	ldr	r0, [r7, #20]
 8011e40:	f000 fdf4 	bl	8012a2c <lwip_netconn_do_writemore>
 8011e44:	e007      	b.n	8011e56 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	785b      	ldrb	r3, [r3, #1]
 8011e4a:	2b04      	cmp	r3, #4
 8011e4c:	d103      	bne.n	8011e56 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011e4e:	2101      	movs	r1, #1
 8011e50:	6978      	ldr	r0, [r7, #20]
 8011e52:	f000 fae1 	bl	8012418 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d01d      	beq.n	8011e9a <sent_tcp+0x92>
 8011e5e:	697b      	ldr	r3, [r7, #20]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011e66:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8011e6a:	d316      	bcc.n	8011e9a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011e6c:	697b      	ldr	r3, [r7, #20]
 8011e6e:	685b      	ldr	r3, [r3, #4]
 8011e70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011e74:	2b04      	cmp	r3, #4
 8011e76:	d810      	bhi.n	8011e9a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	7f1b      	ldrb	r3, [r3, #28]
 8011e7c:	f023 0310 	bic.w	r3, r3, #16
 8011e80:	b2da      	uxtb	r2, r3
 8011e82:	697b      	ldr	r3, [r7, #20]
 8011e84:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8011e86:	697b      	ldr	r3, [r7, #20]
 8011e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d005      	beq.n	8011e9a <sent_tcp+0x92>
 8011e8e:	697b      	ldr	r3, [r7, #20]
 8011e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e92:	88fa      	ldrh	r2, [r7, #6]
 8011e94:	2102      	movs	r1, #2
 8011e96:	6978      	ldr	r0, [r7, #20]
 8011e98:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011e9a:	2300      	movs	r3, #0
}
 8011e9c:	4618      	mov	r0, r3
 8011e9e:	3718      	adds	r7, #24
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	080216e4 	.word	0x080216e4
 8011ea8:	0802183c 	.word	0x0802183c
 8011eac:	08021728 	.word	0x08021728

08011eb0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011eb0:	b580      	push	{r7, lr}
 8011eb2:	b088      	sub	sp, #32
 8011eb4:	af00      	add	r7, sp, #0
 8011eb6:	6078      	str	r0, [r7, #4]
 8011eb8:	460b      	mov	r3, r1
 8011eba:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d106      	bne.n	8011ed4 <err_tcp+0x24>
 8011ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8012044 <err_tcp+0x194>)
 8011ec8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8011ecc:	495e      	ldr	r1, [pc, #376]	@ (8012048 <err_tcp+0x198>)
 8011ece:	485f      	ldr	r0, [pc, #380]	@ (801204c <err_tcp+0x19c>)
 8011ed0:	f00e f9e4 	bl	802029c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011ed4:	f00c ff66 	bl	801eda4 <sys_arch_protect>
 8011ed8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	2200      	movs	r2, #0
 8011ede:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	78fa      	ldrb	r2, [r7, #3]
 8011ee4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011ee6:	69fb      	ldr	r3, [r7, #28]
 8011ee8:	7f1b      	ldrb	r3, [r3, #28]
 8011eea:	f043 0301 	orr.w	r3, r3, #1
 8011eee:	b2da      	uxtb	r2, r3
 8011ef0:	69fb      	ldr	r3, [r7, #28]
 8011ef2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	785b      	ldrb	r3, [r3, #1]
 8011ef8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011efa:	69fb      	ldr	r3, [r7, #28]
 8011efc:	2200      	movs	r2, #0
 8011efe:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011f00:	69b8      	ldr	r0, [r7, #24]
 8011f02:	f00c ff5d 	bl	801edc0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d005      	beq.n	8011f1a <err_tcp+0x6a>
 8011f0e:	69fb      	ldr	r3, [r7, #28]
 8011f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f12:	2200      	movs	r2, #0
 8011f14:	2104      	movs	r1, #4
 8011f16:	69f8      	ldr	r0, [r7, #28]
 8011f18:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011f1a:	69fb      	ldr	r3, [r7, #28]
 8011f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d005      	beq.n	8011f2e <err_tcp+0x7e>
 8011f22:	69fb      	ldr	r3, [r7, #28]
 8011f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f26:	2200      	movs	r2, #0
 8011f28:	2100      	movs	r1, #0
 8011f2a:	69f8      	ldr	r0, [r7, #28]
 8011f2c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011f2e:	69fb      	ldr	r3, [r7, #28]
 8011f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d005      	beq.n	8011f42 <err_tcp+0x92>
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	2102      	movs	r1, #2
 8011f3e:	69f8      	ldr	r0, [r7, #28]
 8011f40:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011f42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7ff fd86 	bl	8011a58 <lwip_netconn_err_to_msg>
 8011f4c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	3310      	adds	r3, #16
 8011f52:	4618      	mov	r0, r3
 8011f54:	f00c fdd0 	bl	801eaf8 <sys_mbox_valid>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d005      	beq.n	8011f6a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011f5e:	69fb      	ldr	r3, [r7, #28]
 8011f60:	3310      	adds	r3, #16
 8011f62:	6939      	ldr	r1, [r7, #16]
 8011f64:	4618      	mov	r0, r3
 8011f66:	f00c fd5b 	bl	801ea20 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011f6a:	69fb      	ldr	r3, [r7, #28]
 8011f6c:	3314      	adds	r3, #20
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f00c fdc2 	bl	801eaf8 <sys_mbox_valid>
 8011f74:	4603      	mov	r3, r0
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d005      	beq.n	8011f86 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011f7a:	69fb      	ldr	r3, [r7, #28]
 8011f7c:	3314      	adds	r3, #20
 8011f7e:	6939      	ldr	r1, [r7, #16]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f00c fd4d 	bl	801ea20 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011f86:	7dfb      	ldrb	r3, [r7, #23]
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d005      	beq.n	8011f98 <err_tcp+0xe8>
 8011f8c:	7dfb      	ldrb	r3, [r7, #23]
 8011f8e:	2b04      	cmp	r3, #4
 8011f90:	d002      	beq.n	8011f98 <err_tcp+0xe8>
 8011f92:	7dfb      	ldrb	r3, [r7, #23]
 8011f94:	2b03      	cmp	r3, #3
 8011f96:	d143      	bne.n	8012020 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	7f1b      	ldrb	r3, [r3, #28]
 8011f9c:	f003 0304 	and.w	r3, r3, #4
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	bf14      	ite	ne
 8011fa4:	2301      	movne	r3, #1
 8011fa6:	2300      	moveq	r3, #0
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011fac:	69fb      	ldr	r3, [r7, #28]
 8011fae:	7f1b      	ldrb	r3, [r3, #28]
 8011fb0:	f023 0304 	bic.w	r3, r3, #4
 8011fb4:	b2da      	uxtb	r2, r3
 8011fb6:	69fb      	ldr	r3, [r7, #28]
 8011fb8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d13b      	bne.n	8012038 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	6a1b      	ldr	r3, [r3, #32]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d106      	bne.n	8011fd6 <err_tcp+0x126>
 8011fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8012044 <err_tcp+0x194>)
 8011fca:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011fce:	4920      	ldr	r1, [pc, #128]	@ (8012050 <err_tcp+0x1a0>)
 8011fd0:	481e      	ldr	r0, [pc, #120]	@ (801204c <err_tcp+0x19c>)
 8011fd2:	f00e f963 	bl	802029c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011fd6:	7dfb      	ldrb	r3, [r7, #23]
 8011fd8:	2b04      	cmp	r3, #4
 8011fda:	d104      	bne.n	8011fe6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011fdc:	69fb      	ldr	r3, [r7, #28]
 8011fde:	6a1b      	ldr	r3, [r3, #32]
 8011fe0:	2200      	movs	r2, #0
 8011fe2:	711a      	strb	r2, [r3, #4]
 8011fe4:	e003      	b.n	8011fee <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011fe6:	69fb      	ldr	r3, [r7, #28]
 8011fe8:	6a1b      	ldr	r3, [r3, #32]
 8011fea:	78fa      	ldrb	r2, [r7, #3]
 8011fec:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011fee:	69fb      	ldr	r3, [r7, #28]
 8011ff0:	6a1b      	ldr	r3, [r3, #32]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	330c      	adds	r3, #12
 8011ff6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011ff8:	68b8      	ldr	r0, [r7, #8]
 8011ffa:	f00c fe37 	bl	801ec6c <sys_sem_valid>
 8011ffe:	4603      	mov	r3, r0
 8012000:	2b00      	cmp	r3, #0
 8012002:	d106      	bne.n	8012012 <err_tcp+0x162>
 8012004:	4b0f      	ldr	r3, [pc, #60]	@ (8012044 <err_tcp+0x194>)
 8012006:	f240 12ef 	movw	r2, #495	@ 0x1ef
 801200a:	4912      	ldr	r1, [pc, #72]	@ (8012054 <err_tcp+0x1a4>)
 801200c:	480f      	ldr	r0, [pc, #60]	@ (801204c <err_tcp+0x19c>)
 801200e:	f00e f945 	bl	802029c <iprintf>
      conn->current_msg = NULL;
 8012012:	69fb      	ldr	r3, [r7, #28]
 8012014:	2200      	movs	r2, #0
 8012016:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8012018:	68b8      	ldr	r0, [r7, #8]
 801201a:	f00c fe02 	bl	801ec22 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801201e:	e00b      	b.n	8012038 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	6a1b      	ldr	r3, [r3, #32]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d008      	beq.n	801203a <err_tcp+0x18a>
 8012028:	4b06      	ldr	r3, [pc, #24]	@ (8012044 <err_tcp+0x194>)
 801202a:	f240 12f7 	movw	r2, #503	@ 0x1f7
 801202e:	490a      	ldr	r1, [pc, #40]	@ (8012058 <err_tcp+0x1a8>)
 8012030:	4806      	ldr	r0, [pc, #24]	@ (801204c <err_tcp+0x19c>)
 8012032:	f00e f933 	bl	802029c <iprintf>
  }
}
 8012036:	e000      	b.n	801203a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8012038:	bf00      	nop
}
 801203a:	bf00      	nop
 801203c:	3720      	adds	r7, #32
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
 8012042:	bf00      	nop
 8012044:	080216e4 	.word	0x080216e4
 8012048:	0802183c 	.word	0x0802183c
 801204c:	08021728 	.word	0x08021728
 8012050:	0802184c 	.word	0x0802184c
 8012054:	08021868 	.word	0x08021868
 8012058:	08021884 	.word	0x08021884

0801205c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b084      	sub	sp, #16
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	685b      	ldr	r3, [r3, #4]
 8012068:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801206a:	6879      	ldr	r1, [r7, #4]
 801206c:	68f8      	ldr	r0, [r7, #12]
 801206e:	f004 fc6b 	bl	8016948 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8012072:	490a      	ldr	r1, [pc, #40]	@ (801209c <setup_tcp+0x40>)
 8012074:	68f8      	ldr	r0, [r7, #12]
 8012076:	f004 fc79 	bl	801696c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801207a:	4909      	ldr	r1, [pc, #36]	@ (80120a0 <setup_tcp+0x44>)
 801207c:	68f8      	ldr	r0, [r7, #12]
 801207e:	f004 fc97 	bl	80169b0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8012082:	2202      	movs	r2, #2
 8012084:	4907      	ldr	r1, [pc, #28]	@ (80120a4 <setup_tcp+0x48>)
 8012086:	68f8      	ldr	r0, [r7, #12]
 8012088:	f004 fcee 	bl	8016a68 <tcp_poll>
  tcp_err(pcb, err_tcp);
 801208c:	4906      	ldr	r1, [pc, #24]	@ (80120a8 <setup_tcp+0x4c>)
 801208e:	68f8      	ldr	r0, [r7, #12]
 8012090:	f004 fcb0 	bl	80169f4 <tcp_err>
}
 8012094:	bf00      	nop
 8012096:	3710      	adds	r7, #16
 8012098:	46bd      	mov	sp, r7
 801209a:	bd80      	pop	{r7, pc}
 801209c:	08011c35 	.word	0x08011c35
 80120a0:	08011e09 	.word	0x08011e09
 80120a4:	08011d41 	.word	0x08011d41
 80120a8:	08011eb1 	.word	0x08011eb1

080120ac <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 80120ac:	b590      	push	{r4, r7, lr}
 80120ae:	b085      	sub	sp, #20
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 80120b4:	2300      	movs	r3, #0
 80120b6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d006      	beq.n	80120d0 <pcb_new+0x24>
 80120c2:	4b2b      	ldr	r3, [pc, #172]	@ (8012170 <pcb_new+0xc4>)
 80120c4:	f240 2265 	movw	r2, #613	@ 0x265
 80120c8:	492a      	ldr	r1, [pc, #168]	@ (8012174 <pcb_new+0xc8>)
 80120ca:	482b      	ldr	r0, [pc, #172]	@ (8012178 <pcb_new+0xcc>)
 80120cc:	f00e f8e6 	bl	802029c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	781b      	ldrb	r3, [r3, #0]
 80120d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80120da:	2b10      	cmp	r3, #16
 80120dc:	d022      	beq.n	8012124 <pcb_new+0x78>
 80120de:	2b20      	cmp	r3, #32
 80120e0:	d133      	bne.n	801214a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681c      	ldr	r4, [r3, #0]
 80120e6:	7bfb      	ldrb	r3, [r7, #15]
 80120e8:	4618      	mov	r0, r3
 80120ea:	f009 fff2 	bl	801c0d2 <udp_new_ip_type>
 80120ee:	4603      	mov	r3, r0
 80120f0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d02a      	beq.n	8012152 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	2b22      	cmp	r3, #34	@ 0x22
 8012104:	d104      	bne.n	8012110 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	681b      	ldr	r3, [r3, #0]
 801210a:	685b      	ldr	r3, [r3, #4]
 801210c:	2201      	movs	r2, #1
 801210e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	6858      	ldr	r0, [r3, #4]
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	461a      	mov	r2, r3
 801211c:	4917      	ldr	r1, [pc, #92]	@ (801217c <pcb_new+0xd0>)
 801211e:	f009 ff5f 	bl	801bfe0 <udp_recv>
      }
      break;
 8012122:	e016      	b.n	8012152 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681c      	ldr	r4, [r3, #0]
 8012128:	7bfb      	ldrb	r3, [r7, #15]
 801212a:	4618      	mov	r0, r3
 801212c:	f004 fbfe 	bl	801692c <tcp_new_ip_type>
 8012130:	4603      	mov	r3, r0
 8012132:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	685b      	ldr	r3, [r3, #4]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d00b      	beq.n	8012156 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	4618      	mov	r0, r3
 8012144:	f7ff ff8a 	bl	801205c <setup_tcp>
      }
      break;
 8012148:	e005      	b.n	8012156 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	22fa      	movs	r2, #250	@ 0xfa
 801214e:	711a      	strb	r2, [r3, #4]
      return;
 8012150:	e00a      	b.n	8012168 <pcb_new+0xbc>
      break;
 8012152:	bf00      	nop
 8012154:	e000      	b.n	8012158 <pcb_new+0xac>
      break;
 8012156:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d102      	bne.n	8012168 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	22ff      	movs	r2, #255	@ 0xff
 8012166:	711a      	strb	r2, [r3, #4]
  }
}
 8012168:	3714      	adds	r7, #20
 801216a:	46bd      	mov	sp, r7
 801216c:	bd90      	pop	{r4, r7, pc}
 801216e:	bf00      	nop
 8012170:	080216e4 	.word	0x080216e4
 8012174:	080218c8 	.word	0x080218c8
 8012178:	08021728 	.word	0x08021728
 801217c:	08011b39 	.word	0x08011b39

08012180 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b084      	sub	sp, #16
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	2200      	movs	r2, #0
 8012190:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d102      	bne.n	80121a2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f7ff ff85 	bl	80120ac <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80121a2:	bf00      	nop
 80121a4:	3710      	adds	r7, #16
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}
	...

080121ac <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b086      	sub	sp, #24
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	4603      	mov	r3, r0
 80121b4:	6039      	str	r1, [r7, #0]
 80121b6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80121b8:	2300      	movs	r3, #0
 80121ba:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80121bc:	2007      	movs	r0, #7
 80121be:	f001 feab 	bl	8013f18 <memp_malloc>
 80121c2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d101      	bne.n	80121ce <netconn_alloc+0x22>
    return NULL;
 80121ca:	2300      	movs	r3, #0
 80121cc:	e052      	b.n	8012274 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	2200      	movs	r2, #0
 80121d2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80121d4:	68fb      	ldr	r3, [r7, #12]
 80121d6:	79fa      	ldrb	r2, [r7, #7]
 80121d8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2200      	movs	r2, #0
 80121de:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80121e0:	79fb      	ldrb	r3, [r7, #7]
 80121e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80121e6:	2b10      	cmp	r3, #16
 80121e8:	d004      	beq.n	80121f4 <netconn_alloc+0x48>
 80121ea:	2b20      	cmp	r3, #32
 80121ec:	d105      	bne.n	80121fa <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80121ee:	2306      	movs	r3, #6
 80121f0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80121f2:	e00a      	b.n	801220a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80121f4:	2306      	movs	r3, #6
 80121f6:	617b      	str	r3, [r7, #20]
      break;
 80121f8:	e007      	b.n	801220a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80121fa:	4b20      	ldr	r3, [pc, #128]	@ (801227c <netconn_alloc+0xd0>)
 80121fc:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8012200:	491f      	ldr	r1, [pc, #124]	@ (8012280 <netconn_alloc+0xd4>)
 8012202:	4820      	ldr	r0, [pc, #128]	@ (8012284 <netconn_alloc+0xd8>)
 8012204:	f00e f84a 	bl	802029c <iprintf>
      goto free_and_return;
 8012208:	e02f      	b.n	801226a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	3310      	adds	r3, #16
 801220e:	6979      	ldr	r1, [r7, #20]
 8012210:	4618      	mov	r0, r3
 8012212:	f00c fbab 	bl	801e96c <sys_mbox_new>
 8012216:	4603      	mov	r3, r0
 8012218:	2b00      	cmp	r3, #0
 801221a:	d125      	bne.n	8012268 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	330c      	adds	r3, #12
 8012220:	2100      	movs	r1, #0
 8012222:	4618      	mov	r0, r3
 8012224:	f00c fc86 	bl	801eb34 <sys_sem_new>
 8012228:	4603      	mov	r3, r0
 801222a:	2b00      	cmp	r3, #0
 801222c:	d005      	beq.n	801223a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	3310      	adds	r3, #16
 8012232:	4618      	mov	r0, r3
 8012234:	f00c fbcc 	bl	801e9d0 <sys_mbox_free>
    goto free_and_return;
 8012238:	e017      	b.n	801226a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801223a:	68fb      	ldr	r3, [r7, #12]
 801223c:	3314      	adds	r3, #20
 801223e:	4618      	mov	r0, r3
 8012240:	f00c fc6b 	bl	801eb1a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	2200      	movs	r2, #0
 8012248:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012250:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	683a      	ldr	r2, [r7, #0]
 8012256:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	2200      	movs	r2, #0
 801225c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	7cfa      	ldrb	r2, [r7, #19]
 8012262:	771a      	strb	r2, [r3, #28]
  return conn;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	e005      	b.n	8012274 <netconn_alloc+0xc8>
    goto free_and_return;
 8012268:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801226a:	68f9      	ldr	r1, [r7, #12]
 801226c:	2007      	movs	r0, #7
 801226e:	f001 fecf 	bl	8014010 <memp_free>
  return NULL;
 8012272:	2300      	movs	r3, #0
}
 8012274:	4618      	mov	r0, r3
 8012276:	3718      	adds	r7, #24
 8012278:	46bd      	mov	sp, r7
 801227a:	bd80      	pop	{r7, pc}
 801227c:	080216e4 	.word	0x080216e4
 8012280:	080218e8 	.word	0x080218e8
 8012284:	08021728 	.word	0x08021728

08012288 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d006      	beq.n	80122a6 <netconn_free+0x1e>
 8012298:	4b1b      	ldr	r3, [pc, #108]	@ (8012308 <netconn_free+0x80>)
 801229a:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 801229e:	491b      	ldr	r1, [pc, #108]	@ (801230c <netconn_free+0x84>)
 80122a0:	481b      	ldr	r0, [pc, #108]	@ (8012310 <netconn_free+0x88>)
 80122a2:	f00d fffb 	bl	802029c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	3310      	adds	r3, #16
 80122aa:	4618      	mov	r0, r3
 80122ac:	f00c fc24 	bl	801eaf8 <sys_mbox_valid>
 80122b0:	4603      	mov	r3, r0
 80122b2:	2b00      	cmp	r3, #0
 80122b4:	d006      	beq.n	80122c4 <netconn_free+0x3c>
 80122b6:	4b14      	ldr	r3, [pc, #80]	@ (8012308 <netconn_free+0x80>)
 80122b8:	f240 3223 	movw	r2, #803	@ 0x323
 80122bc:	4915      	ldr	r1, [pc, #84]	@ (8012314 <netconn_free+0x8c>)
 80122be:	4814      	ldr	r0, [pc, #80]	@ (8012310 <netconn_free+0x88>)
 80122c0:	f00d ffec 	bl	802029c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	3314      	adds	r3, #20
 80122c8:	4618      	mov	r0, r3
 80122ca:	f00c fc15 	bl	801eaf8 <sys_mbox_valid>
 80122ce:	4603      	mov	r3, r0
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d006      	beq.n	80122e2 <netconn_free+0x5a>
 80122d4:	4b0c      	ldr	r3, [pc, #48]	@ (8012308 <netconn_free+0x80>)
 80122d6:	f240 3226 	movw	r2, #806	@ 0x326
 80122da:	490f      	ldr	r1, [pc, #60]	@ (8012318 <netconn_free+0x90>)
 80122dc:	480c      	ldr	r0, [pc, #48]	@ (8012310 <netconn_free+0x88>)
 80122de:	f00d ffdd 	bl	802029c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	330c      	adds	r3, #12
 80122e6:	4618      	mov	r0, r3
 80122e8:	f00c fca8 	bl	801ec3c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	330c      	adds	r3, #12
 80122f0:	4618      	mov	r0, r3
 80122f2:	f00c fccc 	bl	801ec8e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80122f6:	6879      	ldr	r1, [r7, #4]
 80122f8:	2007      	movs	r0, #7
 80122fa:	f001 fe89 	bl	8014010 <memp_free>
}
 80122fe:	bf00      	nop
 8012300:	3708      	adds	r7, #8
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	080216e4 	.word	0x080216e4
 801230c:	08021910 	.word	0x08021910
 8012310:	08021728 	.word	0x08021728
 8012314:	08021940 	.word	0x08021940
 8012318:	0802197c 	.word	0x0802197c

0801231c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b086      	sub	sp, #24
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	3310      	adds	r3, #16
 8012328:	4618      	mov	r0, r3
 801232a:	f00c fbe5 	bl	801eaf8 <sys_mbox_valid>
 801232e:	4603      	mov	r3, r0
 8012330:	2b00      	cmp	r3, #0
 8012332:	d02f      	beq.n	8012394 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012334:	e018      	b.n	8012368 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	781b      	ldrb	r3, [r3, #0]
 801233a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801233e:	2b10      	cmp	r3, #16
 8012340:	d10e      	bne.n	8012360 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	f107 020f 	add.w	r2, r7, #15
 8012348:	4611      	mov	r1, r2
 801234a:	4618      	mov	r0, r3
 801234c:	f7ff fbba 	bl	8011ac4 <lwip_netconn_is_err_msg>
 8012350:	4603      	mov	r3, r0
 8012352:	2b00      	cmp	r3, #0
 8012354:	d108      	bne.n	8012368 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8012356:	693b      	ldr	r3, [r7, #16]
 8012358:	4618      	mov	r0, r3
 801235a:	f002 fcfd 	bl	8014d58 <pbuf_free>
 801235e:	e003      	b.n	8012368 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	4618      	mov	r0, r3
 8012364:	f000 fdce 	bl	8012f04 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	3310      	adds	r3, #16
 801236c:	f107 0210 	add.w	r2, r7, #16
 8012370:	4611      	mov	r1, r2
 8012372:	4618      	mov	r0, r3
 8012374:	f00c fba9 	bl	801eaca <sys_arch_mbox_tryfetch>
 8012378:	4603      	mov	r3, r0
 801237a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801237e:	d1da      	bne.n	8012336 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	3310      	adds	r3, #16
 8012384:	4618      	mov	r0, r3
 8012386:	f00c fb23 	bl	801e9d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	3310      	adds	r3, #16
 801238e:	4618      	mov	r0, r3
 8012390:	f00c fbc3 	bl	801eb1a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	3314      	adds	r3, #20
 8012398:	4618      	mov	r0, r3
 801239a:	f00c fbad 	bl	801eaf8 <sys_mbox_valid>
 801239e:	4603      	mov	r3, r0
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d034      	beq.n	801240e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80123a4:	e01d      	b.n	80123e2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	f107 020e 	add.w	r2, r7, #14
 80123ac:	4611      	mov	r1, r2
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7ff fb88 	bl	8011ac4 <lwip_netconn_is_err_msg>
 80123b4:	4603      	mov	r3, r0
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d113      	bne.n	80123e2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80123ba:	693b      	ldr	r3, [r7, #16]
 80123bc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80123be:	6978      	ldr	r0, [r7, #20]
 80123c0:	f7ff ffac 	bl	801231c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	d007      	beq.n	80123dc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80123cc:	697b      	ldr	r3, [r7, #20]
 80123ce:	685b      	ldr	r3, [r3, #4]
 80123d0:	4618      	mov	r0, r3
 80123d2:	f003 fac9 	bl	8015968 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	2200      	movs	r2, #0
 80123da:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80123dc:	6978      	ldr	r0, [r7, #20]
 80123de:	f7ff ff53 	bl	8012288 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	3314      	adds	r3, #20
 80123e6:	f107 0210 	add.w	r2, r7, #16
 80123ea:	4611      	mov	r1, r2
 80123ec:	4618      	mov	r0, r3
 80123ee:	f00c fb6c 	bl	801eaca <sys_arch_mbox_tryfetch>
 80123f2:	4603      	mov	r3, r0
 80123f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80123f8:	d1d5      	bne.n	80123a6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	3314      	adds	r3, #20
 80123fe:	4618      	mov	r0, r3
 8012400:	f00c fae6 	bl	801e9d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	3314      	adds	r3, #20
 8012408:	4618      	mov	r0, r3
 801240a:	f00c fb86 	bl	801eb1a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 801240e:	bf00      	nop
 8012410:	3718      	adds	r7, #24
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
	...

08012418 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b086      	sub	sp, #24
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	460b      	mov	r3, r1
 8012422:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8012424:	2300      	movs	r3, #0
 8012426:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d106      	bne.n	801243c <lwip_netconn_do_close_internal+0x24>
 801242e:	4b87      	ldr	r3, [pc, #540]	@ (801264c <lwip_netconn_do_close_internal+0x234>)
 8012430:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8012434:	4986      	ldr	r1, [pc, #536]	@ (8012650 <lwip_netconn_do_close_internal+0x238>)
 8012436:	4887      	ldr	r0, [pc, #540]	@ (8012654 <lwip_netconn_do_close_internal+0x23c>)
 8012438:	f00d ff30 	bl	802029c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	781b      	ldrb	r3, [r3, #0]
 8012440:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012444:	2b10      	cmp	r3, #16
 8012446:	d006      	beq.n	8012456 <lwip_netconn_do_close_internal+0x3e>
 8012448:	4b80      	ldr	r3, [pc, #512]	@ (801264c <lwip_netconn_do_close_internal+0x234>)
 801244a:	f240 32a3 	movw	r2, #931	@ 0x3a3
 801244e:	4982      	ldr	r1, [pc, #520]	@ (8012658 <lwip_netconn_do_close_internal+0x240>)
 8012450:	4880      	ldr	r0, [pc, #512]	@ (8012654 <lwip_netconn_do_close_internal+0x23c>)
 8012452:	f00d ff23 	bl	802029c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	785b      	ldrb	r3, [r3, #1]
 801245a:	2b04      	cmp	r3, #4
 801245c:	d006      	beq.n	801246c <lwip_netconn_do_close_internal+0x54>
 801245e:	4b7b      	ldr	r3, [pc, #492]	@ (801264c <lwip_netconn_do_close_internal+0x234>)
 8012460:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8012464:	497d      	ldr	r1, [pc, #500]	@ (801265c <lwip_netconn_do_close_internal+0x244>)
 8012466:	487b      	ldr	r0, [pc, #492]	@ (8012654 <lwip_netconn_do_close_internal+0x23c>)
 8012468:	f00d ff18 	bl	802029c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d106      	bne.n	8012482 <lwip_netconn_do_close_internal+0x6a>
 8012474:	4b75      	ldr	r3, [pc, #468]	@ (801264c <lwip_netconn_do_close_internal+0x234>)
 8012476:	f240 32a5 	movw	r2, #933	@ 0x3a5
 801247a:	4979      	ldr	r1, [pc, #484]	@ (8012660 <lwip_netconn_do_close_internal+0x248>)
 801247c:	4875      	ldr	r0, [pc, #468]	@ (8012654 <lwip_netconn_do_close_internal+0x23c>)
 801247e:	f00d ff0d 	bl	802029c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	6a1b      	ldr	r3, [r3, #32]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d106      	bne.n	8012498 <lwip_netconn_do_close_internal+0x80>
 801248a:	4b70      	ldr	r3, [pc, #448]	@ (801264c <lwip_netconn_do_close_internal+0x234>)
 801248c:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8012490:	4974      	ldr	r1, [pc, #464]	@ (8012664 <lwip_netconn_do_close_internal+0x24c>)
 8012492:	4870      	ldr	r0, [pc, #448]	@ (8012654 <lwip_netconn_do_close_internal+0x23c>)
 8012494:	f00d ff02 	bl	802029c <iprintf>

  tpcb = conn->pcb.tcp;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6a1b      	ldr	r3, [r3, #32]
 80124a2:	7a1b      	ldrb	r3, [r3, #8]
 80124a4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80124a6:	7bfb      	ldrb	r3, [r7, #15]
 80124a8:	f003 0301 	and.w	r3, r3, #1
 80124ac:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80124ae:	7bfb      	ldrb	r3, [r7, #15]
 80124b0:	f003 0302 	and.w	r3, r3, #2
 80124b4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80124b6:	7bfb      	ldrb	r3, [r7, #15]
 80124b8:	2b03      	cmp	r3, #3
 80124ba:	d102      	bne.n	80124c2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80124bc:	2301      	movs	r3, #1
 80124be:	75bb      	strb	r3, [r7, #22]
 80124c0:	e01f      	b.n	8012502 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80124c2:	7bbb      	ldrb	r3, [r7, #14]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d00e      	beq.n	80124e6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80124c8:	693b      	ldr	r3, [r7, #16]
 80124ca:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80124cc:	2b05      	cmp	r3, #5
 80124ce:	d007      	beq.n	80124e0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80124d4:	2b06      	cmp	r3, #6
 80124d6:	d003      	beq.n	80124e0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80124dc:	2b08      	cmp	r3, #8
 80124de:	d102      	bne.n	80124e6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80124e0:	2301      	movs	r3, #1
 80124e2:	75bb      	strb	r3, [r7, #22]
 80124e4:	e00d      	b.n	8012502 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80124e6:	7b7b      	ldrb	r3, [r7, #13]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d008      	beq.n	80124fe <lwip_netconn_do_close_internal+0xe6>
 80124ec:	693b      	ldr	r3, [r7, #16]
 80124ee:	8b5b      	ldrh	r3, [r3, #26]
 80124f0:	f003 0310 	and.w	r3, r3, #16
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d002      	beq.n	80124fe <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80124f8:	2301      	movs	r3, #1
 80124fa:	75bb      	strb	r3, [r7, #22]
 80124fc:	e001      	b.n	8012502 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80124fe:	2300      	movs	r3, #0
 8012500:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012502:	7dbb      	ldrb	r3, [r7, #22]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d003      	beq.n	8012510 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8012508:	2100      	movs	r1, #0
 801250a:	6938      	ldr	r0, [r7, #16]
 801250c:	f004 fa1c 	bl	8016948 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012510:	693b      	ldr	r3, [r7, #16]
 8012512:	7d1b      	ldrb	r3, [r3, #20]
 8012514:	2b01      	cmp	r3, #1
 8012516:	d104      	bne.n	8012522 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012518:	2100      	movs	r1, #0
 801251a:	6938      	ldr	r0, [r7, #16]
 801251c:	f004 fa8c 	bl	8016a38 <tcp_accept>
 8012520:	e01d      	b.n	801255e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012522:	7bbb      	ldrb	r3, [r7, #14]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d007      	beq.n	8012538 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012528:	2100      	movs	r1, #0
 801252a:	6938      	ldr	r0, [r7, #16]
 801252c:	f004 fa1e 	bl	801696c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012530:	2100      	movs	r1, #0
 8012532:	6938      	ldr	r0, [r7, #16]
 8012534:	f004 fa80 	bl	8016a38 <tcp_accept>
    }
    if (shut_tx) {
 8012538:	7b7b      	ldrb	r3, [r7, #13]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d003      	beq.n	8012546 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 801253e:	2100      	movs	r1, #0
 8012540:	6938      	ldr	r0, [r7, #16]
 8012542:	f004 fa35 	bl	80169b0 <tcp_sent>
    }
    if (shut_close) {
 8012546:	7dbb      	ldrb	r3, [r7, #22]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d008      	beq.n	801255e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 801254c:	2200      	movs	r2, #0
 801254e:	2100      	movs	r1, #0
 8012550:	6938      	ldr	r0, [r7, #16]
 8012552:	f004 fa89 	bl	8016a68 <tcp_poll>
      tcp_err(tpcb, NULL);
 8012556:	2100      	movs	r1, #0
 8012558:	6938      	ldr	r0, [r7, #16]
 801255a:	f004 fa4b 	bl	80169f4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801255e:	7dbb      	ldrb	r3, [r7, #22]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d005      	beq.n	8012570 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012564:	6938      	ldr	r0, [r7, #16]
 8012566:	f003 f8b9 	bl	80156dc <tcp_close>
 801256a:	4603      	mov	r3, r0
 801256c:	75fb      	strb	r3, [r7, #23]
 801256e:	e007      	b.n	8012580 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012570:	7bbb      	ldrb	r3, [r7, #14]
 8012572:	7b7a      	ldrb	r2, [r7, #13]
 8012574:	4619      	mov	r1, r3
 8012576:	6938      	ldr	r0, [r7, #16]
 8012578:	f003 f8dc 	bl	8015734 <tcp_shutdown>
 801257c:	4603      	mov	r3, r0
 801257e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012580:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d102      	bne.n	801258e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8012588:	2301      	movs	r3, #1
 801258a:	757b      	strb	r3, [r7, #21]
 801258c:	e016      	b.n	80125bc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801258e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012596:	d10f      	bne.n	80125b8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	6a1b      	ldr	r3, [r3, #32]
 801259c:	7a5b      	ldrb	r3, [r3, #9]
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d10c      	bne.n	80125bc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80125a2:	2301      	movs	r3, #1
 80125a4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80125a6:	7dbb      	ldrb	r3, [r7, #22]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d007      	beq.n	80125bc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80125ac:	6938      	ldr	r0, [r7, #16]
 80125ae:	f003 f9db 	bl	8015968 <tcp_abort>
          err = ERR_OK;
 80125b2:	2300      	movs	r3, #0
 80125b4:	75fb      	strb	r3, [r7, #23]
 80125b6:	e001      	b.n	80125bc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80125b8:	2301      	movs	r3, #1
 80125ba:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80125bc:	7d7b      	ldrb	r3, [r7, #21]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d052      	beq.n	8012668 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	6a1b      	ldr	r3, [r3, #32]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	330c      	adds	r3, #12
 80125ca:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	6a1b      	ldr	r3, [r3, #32]
 80125d0:	7dfa      	ldrb	r2, [r7, #23]
 80125d2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2200      	movs	r2, #0
 80125d8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	2200      	movs	r2, #0
 80125de:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80125e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d129      	bne.n	801263c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80125e8:	7dbb      	ldrb	r3, [r7, #22]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d00c      	beq.n	8012608 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2200      	movs	r2, #0
 80125f2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d005      	beq.n	8012608 <lwip_netconn_do_close_internal+0x1f0>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012600:	2200      	movs	r2, #0
 8012602:	2104      	movs	r1, #4
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	4798      	blx	r3
      }
      if (shut_rx) {
 8012608:	7bbb      	ldrb	r3, [r7, #14]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d009      	beq.n	8012622 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012612:	2b00      	cmp	r3, #0
 8012614:	d005      	beq.n	8012622 <lwip_netconn_do_close_internal+0x20a>
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801261a:	2200      	movs	r2, #0
 801261c:	2100      	movs	r1, #0
 801261e:	6878      	ldr	r0, [r7, #4]
 8012620:	4798      	blx	r3
      }
      if (shut_tx) {
 8012622:	7b7b      	ldrb	r3, [r7, #13]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d009      	beq.n	801263c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801262c:	2b00      	cmp	r3, #0
 801262e:	d005      	beq.n	801263c <lwip_netconn_do_close_internal+0x224>
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012634:	2200      	movs	r2, #0
 8012636:	2102      	movs	r1, #2
 8012638:	6878      	ldr	r0, [r7, #4]
 801263a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801263c:	78fb      	ldrb	r3, [r7, #3]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d002      	beq.n	8012648 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012642:	68b8      	ldr	r0, [r7, #8]
 8012644:	f00c faed 	bl	801ec22 <sys_sem_signal>
    }
    return ERR_OK;
 8012648:	2300      	movs	r3, #0
 801264a:	e03c      	b.n	80126c6 <lwip_netconn_do_close_internal+0x2ae>
 801264c:	080216e4 	.word	0x080216e4
 8012650:	080219b8 	.word	0x080219b8
 8012654:	08021728 	.word	0x08021728
 8012658:	080219c8 	.word	0x080219c8
 801265c:	080219e8 	.word	0x080219e8
 8012660:	08021a0c 	.word	0x08021a0c
 8012664:	0802184c 	.word	0x0802184c
  }
  if (!close_finished) {
 8012668:	7d7b      	ldrb	r3, [r7, #21]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d11e      	bne.n	80126ac <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	7d1b      	ldrb	r3, [r3, #20]
 8012672:	2b01      	cmp	r3, #1
 8012674:	d106      	bne.n	8012684 <lwip_netconn_do_close_internal+0x26c>
 8012676:	4b16      	ldr	r3, [pc, #88]	@ (80126d0 <lwip_netconn_do_close_internal+0x2b8>)
 8012678:	f240 4241 	movw	r2, #1089	@ 0x441
 801267c:	4915      	ldr	r1, [pc, #84]	@ (80126d4 <lwip_netconn_do_close_internal+0x2bc>)
 801267e:	4816      	ldr	r0, [pc, #88]	@ (80126d8 <lwip_netconn_do_close_internal+0x2c0>)
 8012680:	f00d fe0c 	bl	802029c <iprintf>
    if (shut_tx) {
 8012684:	7b7b      	ldrb	r3, [r7, #13]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d003      	beq.n	8012692 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801268a:	4914      	ldr	r1, [pc, #80]	@ (80126dc <lwip_netconn_do_close_internal+0x2c4>)
 801268c:	6938      	ldr	r0, [r7, #16]
 801268e:	f004 f98f 	bl	80169b0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8012692:	2201      	movs	r2, #1
 8012694:	4912      	ldr	r1, [pc, #72]	@ (80126e0 <lwip_netconn_do_close_internal+0x2c8>)
 8012696:	6938      	ldr	r0, [r7, #16]
 8012698:	f004 f9e6 	bl	8016a68 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 801269c:	4911      	ldr	r1, [pc, #68]	@ (80126e4 <lwip_netconn_do_close_internal+0x2cc>)
 801269e:	6938      	ldr	r0, [r7, #16]
 80126a0:	f004 f9a8 	bl	80169f4 <tcp_err>
    tcp_arg(tpcb, conn);
 80126a4:	6879      	ldr	r1, [r7, #4]
 80126a6:	6938      	ldr	r0, [r7, #16]
 80126a8:	f004 f94e 	bl	8016948 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80126ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d106      	bne.n	80126c2 <lwip_netconn_do_close_internal+0x2aa>
 80126b4:	4b06      	ldr	r3, [pc, #24]	@ (80126d0 <lwip_netconn_do_close_internal+0x2b8>)
 80126b6:	f240 424d 	movw	r2, #1101	@ 0x44d
 80126ba:	490b      	ldr	r1, [pc, #44]	@ (80126e8 <lwip_netconn_do_close_internal+0x2d0>)
 80126bc:	4806      	ldr	r0, [pc, #24]	@ (80126d8 <lwip_netconn_do_close_internal+0x2c0>)
 80126be:	f00d fded 	bl	802029c <iprintf>
  return err;
 80126c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3718      	adds	r7, #24
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
 80126ce:	bf00      	nop
 80126d0:	080216e4 	.word	0x080216e4
 80126d4:	08021a20 	.word	0x08021a20
 80126d8:	08021728 	.word	0x08021728
 80126dc:	08011e09 	.word	0x08011e09
 80126e0:	08011d41 	.word	0x08011d41
 80126e4:	08011eb1 	.word	0x08011eb1
 80126e8:	08021a44 	.word	0x08021a44

080126ec <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 80126ec:	b580      	push	{r7, lr}
 80126ee:	b084      	sub	sp, #16
 80126f0:	af00      	add	r7, sp, #0
 80126f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	785b      	ldrb	r3, [r3, #1]
 80126fe:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012700:	7afb      	ldrb	r3, [r7, #11]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d00d      	beq.n	8012722 <lwip_netconn_do_delconn+0x36>
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	781b      	ldrb	r3, [r3, #0]
 801270c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012710:	2b10      	cmp	r3, #16
 8012712:	d006      	beq.n	8012722 <lwip_netconn_do_delconn+0x36>
 8012714:	4b60      	ldr	r3, [pc, #384]	@ (8012898 <lwip_netconn_do_delconn+0x1ac>)
 8012716:	f240 425e 	movw	r2, #1118	@ 0x45e
 801271a:	4960      	ldr	r1, [pc, #384]	@ (801289c <lwip_netconn_do_delconn+0x1b0>)
 801271c:	4860      	ldr	r0, [pc, #384]	@ (80128a0 <lwip_netconn_do_delconn+0x1b4>)
 801271e:	f00d fdbd 	bl	802029c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012722:	7afb      	ldrb	r3, [r7, #11]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d005      	beq.n	8012734 <lwip_netconn_do_delconn+0x48>
 8012728:	7afb      	ldrb	r3, [r7, #11]
 801272a:	2b02      	cmp	r3, #2
 801272c:	d002      	beq.n	8012734 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 801272e:	7afb      	ldrb	r3, [r7, #11]
 8012730:	2b03      	cmp	r3, #3
 8012732:	d109      	bne.n	8012748 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012734:	7afb      	ldrb	r3, [r7, #11]
 8012736:	2b03      	cmp	r3, #3
 8012738:	d10a      	bne.n	8012750 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	7f1b      	ldrb	r3, [r3, #28]
 8012740:	f003 0304 	and.w	r3, r3, #4
 8012744:	2b00      	cmp	r3, #0
 8012746:	d103      	bne.n	8012750 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	22fb      	movs	r2, #251	@ 0xfb
 801274c:	711a      	strb	r2, [r3, #4]
 801274e:	e097      	b.n	8012880 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012750:	7afb      	ldrb	r3, [r7, #11]
 8012752:	2b03      	cmp	r3, #3
 8012754:	d10d      	bne.n	8012772 <lwip_netconn_do_delconn+0x86>
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	7f1b      	ldrb	r3, [r3, #28]
 801275c:	f003 0304 	and.w	r3, r3, #4
 8012760:	2b00      	cmp	r3, #0
 8012762:	d106      	bne.n	8012772 <lwip_netconn_do_delconn+0x86>
 8012764:	4b4c      	ldr	r3, [pc, #304]	@ (8012898 <lwip_netconn_do_delconn+0x1ac>)
 8012766:	f240 427a 	movw	r2, #1146	@ 0x47a
 801276a:	494e      	ldr	r1, [pc, #312]	@ (80128a4 <lwip_netconn_do_delconn+0x1b8>)
 801276c:	484c      	ldr	r0, [pc, #304]	@ (80128a0 <lwip_netconn_do_delconn+0x1b4>)
 801276e:	f00d fd95 	bl	802029c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	2200      	movs	r2, #0
 8012776:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	4618      	mov	r0, r3
 801277e:	f7ff fdcd 	bl	801231c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d05f      	beq.n	801284c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012796:	2b10      	cmp	r3, #16
 8012798:	d00d      	beq.n	80127b6 <lwip_netconn_do_delconn+0xca>
 801279a:	2b20      	cmp	r3, #32
 801279c:	d151      	bne.n	8012842 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	685b      	ldr	r3, [r3, #4]
 80127a4:	2200      	movs	r2, #0
 80127a6:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80127a8:	68fb      	ldr	r3, [r7, #12]
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	685b      	ldr	r3, [r3, #4]
 80127ae:	4618      	mov	r0, r3
 80127b0:	f009 fc36 	bl	801c020 <udp_remove>
          break;
 80127b4:	e046      	b.n	8012844 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	6a1b      	ldr	r3, [r3, #32]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d006      	beq.n	80127ce <lwip_netconn_do_delconn+0xe2>
 80127c0:	4b35      	ldr	r3, [pc, #212]	@ (8012898 <lwip_netconn_do_delconn+0x1ac>)
 80127c2:	f240 4294 	movw	r2, #1172	@ 0x494
 80127c6:	4938      	ldr	r1, [pc, #224]	@ (80128a8 <lwip_netconn_do_delconn+0x1bc>)
 80127c8:	4835      	ldr	r0, [pc, #212]	@ (80128a0 <lwip_netconn_do_delconn+0x1b4>)
 80127ca:	f00d fd67 	bl	802029c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	2204      	movs	r2, #4
 80127d4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2203      	movs	r2, #3
 80127da:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	68fa      	ldr	r2, [r7, #12]
 80127e2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	2100      	movs	r1, #0
 80127ea:	4618      	mov	r0, r3
 80127ec:	f7ff fe14 	bl	8012418 <lwip_netconn_do_close_internal>
 80127f0:	4603      	mov	r3, r0
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d04b      	beq.n	801288e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	785b      	ldrb	r3, [r3, #1]
 80127fc:	2b04      	cmp	r3, #4
 80127fe:	d006      	beq.n	801280e <lwip_netconn_do_delconn+0x122>
 8012800:	4b25      	ldr	r3, [pc, #148]	@ (8012898 <lwip_netconn_do_delconn+0x1ac>)
 8012802:	f240 429a 	movw	r2, #1178	@ 0x49a
 8012806:	4929      	ldr	r1, [pc, #164]	@ (80128ac <lwip_netconn_do_delconn+0x1c0>)
 8012808:	4825      	ldr	r0, [pc, #148]	@ (80128a0 <lwip_netconn_do_delconn+0x1b4>)
 801280a:	f00d fd47 	bl	802029c <iprintf>
            UNLOCK_TCPIP_CORE();
 801280e:	4828      	ldr	r0, [pc, #160]	@ (80128b0 <lwip_netconn_do_delconn+0x1c4>)
 8012810:	f00c fa9b 	bl	801ed4a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012814:	68fb      	ldr	r3, [r7, #12]
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	330c      	adds	r3, #12
 801281a:	2100      	movs	r1, #0
 801281c:	4618      	mov	r0, r3
 801281e:	f00c f9cf 	bl	801ebc0 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012822:	4823      	ldr	r0, [pc, #140]	@ (80128b0 <lwip_netconn_do_delconn+0x1c4>)
 8012824:	f00c fa82 	bl	801ed2c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	785b      	ldrb	r3, [r3, #1]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d02d      	beq.n	801288e <lwip_netconn_do_delconn+0x1a2>
 8012832:	4b19      	ldr	r3, [pc, #100]	@ (8012898 <lwip_netconn_do_delconn+0x1ac>)
 8012834:	f240 429e 	movw	r2, #1182	@ 0x49e
 8012838:	491c      	ldr	r1, [pc, #112]	@ (80128ac <lwip_netconn_do_delconn+0x1c0>)
 801283a:	4819      	ldr	r0, [pc, #100]	@ (80128a0 <lwip_netconn_do_delconn+0x1b4>)
 801283c:	f00d fd2e 	bl	802029c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012840:	e025      	b.n	801288e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8012842:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2200      	movs	r2, #0
 801284a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012852:	2b00      	cmp	r3, #0
 8012854:	d007      	beq.n	8012866 <lwip_netconn_do_delconn+0x17a>
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801285c:	68fa      	ldr	r2, [r7, #12]
 801285e:	6810      	ldr	r0, [r2, #0]
 8012860:	2200      	movs	r2, #0
 8012862:	2100      	movs	r1, #0
 8012864:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801286c:	2b00      	cmp	r3, #0
 801286e:	d007      	beq.n	8012880 <lwip_netconn_do_delconn+0x194>
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012876:	68fa      	ldr	r2, [r7, #12]
 8012878:	6810      	ldr	r0, [r2, #0]
 801287a:	2200      	movs	r2, #0
 801287c:	2102      	movs	r1, #2
 801287e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	330c      	adds	r3, #12
 8012886:	4618      	mov	r0, r3
 8012888:	f00c f9f0 	bl	801ec6c <sys_sem_valid>
 801288c:	e000      	b.n	8012890 <lwip_netconn_do_delconn+0x1a4>
          return;
 801288e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8012890:	3710      	adds	r7, #16
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}
 8012896:	bf00      	nop
 8012898:	080216e4 	.word	0x080216e4
 801289c:	08021a54 	.word	0x08021a54
 80128a0:	08021728 	.word	0x08021728
 80128a4:	08021a68 	.word	0x08021a68
 80128a8:	08021a88 	.word	0x08021a88
 80128ac:	08021aa4 	.word	0x08021aa4
 80128b0:	2001f0ac 	.word	0x2001f0ac

080128b4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b084      	sub	sp, #16
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	685b      	ldr	r3, [r3, #4]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d025      	beq.n	8012916 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80128ca:	68bb      	ldr	r3, [r7, #8]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80128d4:	2b10      	cmp	r3, #16
 80128d6:	d00e      	beq.n	80128f6 <lwip_netconn_do_bind+0x42>
 80128d8:	2b20      	cmp	r3, #32
 80128da:	d119      	bne.n	8012910 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80128dc:	68bb      	ldr	r3, [r7, #8]
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	6858      	ldr	r0, [r3, #4]
 80128e2:	68bb      	ldr	r3, [r7, #8]
 80128e4:	6899      	ldr	r1, [r3, #8]
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	899b      	ldrh	r3, [r3, #12]
 80128ea:	461a      	mov	r2, r3
 80128ec:	f009 faf0 	bl	801bed0 <udp_bind>
 80128f0:	4603      	mov	r3, r0
 80128f2:	73fb      	strb	r3, [r7, #15]
        break;
 80128f4:	e011      	b.n	801291a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	6858      	ldr	r0, [r3, #4]
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	6899      	ldr	r1, [r3, #8]
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	899b      	ldrh	r3, [r3, #12]
 8012904:	461a      	mov	r2, r3
 8012906:	f003 f83b 	bl	8015980 <tcp_bind>
 801290a:	4603      	mov	r3, r0
 801290c:	73fb      	strb	r3, [r7, #15]
        break;
 801290e:	e004      	b.n	801291a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012910:	23fa      	movs	r3, #250	@ 0xfa
 8012912:	73fb      	strb	r3, [r7, #15]
        break;
 8012914:	e001      	b.n	801291a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8012916:	23fa      	movs	r3, #250	@ 0xfa
 8012918:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801291a:	68bb      	ldr	r3, [r7, #8]
 801291c:	7bfa      	ldrb	r2, [r7, #15]
 801291e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012920:	bf00      	nop
 8012922:	3710      	adds	r7, #16
 8012924:	46bd      	mov	sp, r7
 8012926:	bd80      	pop	{r7, pc}

08012928 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	4618      	mov	r0, r3
 801293a:	f7ff f871 	bl	8011a20 <netconn_err>
 801293e:	4603      	mov	r3, r0
 8012940:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8012942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d134      	bne.n	80129b4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d02d      	beq.n	80129b0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012954:	68bb      	ldr	r3, [r7, #8]
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801295e:	2b20      	cmp	r3, #32
 8012960:	d123      	bne.n	80129aa <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8012962:	68bb      	ldr	r3, [r7, #8]
 8012964:	689b      	ldr	r3, [r3, #8]
 8012966:	689b      	ldr	r3, [r3, #8]
 8012968:	2b00      	cmp	r3, #0
 801296a:	d10c      	bne.n	8012986 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 801296c:	68bb      	ldr	r3, [r7, #8]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	685a      	ldr	r2, [r3, #4]
 8012972:	68bb      	ldr	r3, [r7, #8]
 8012974:	689b      	ldr	r3, [r3, #8]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	4619      	mov	r1, r3
 801297a:	4610      	mov	r0, r2
 801297c:	f009 f8aa 	bl	801bad4 <udp_send>
 8012980:	4603      	mov	r3, r0
 8012982:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8012984:	e016      	b.n	80129b4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	6858      	ldr	r0, [r3, #4]
 801298c:	68bb      	ldr	r3, [r7, #8]
 801298e:	689b      	ldr	r3, [r3, #8]
 8012990:	6819      	ldr	r1, [r3, #0]
 8012992:	68bb      	ldr	r3, [r7, #8]
 8012994:	689b      	ldr	r3, [r3, #8]
 8012996:	f103 0208 	add.w	r2, r3, #8
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	689b      	ldr	r3, [r3, #8]
 801299e:	899b      	ldrh	r3, [r3, #12]
 80129a0:	f009 f8cc 	bl	801bb3c <udp_sendto>
 80129a4:	4603      	mov	r3, r0
 80129a6:	73fb      	strb	r3, [r7, #15]
          break;
 80129a8:	e004      	b.n	80129b4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 80129aa:	23f5      	movs	r3, #245	@ 0xf5
 80129ac:	73fb      	strb	r3, [r7, #15]
          break;
 80129ae:	e001      	b.n	80129b4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 80129b0:	23f5      	movs	r3, #245	@ 0xf5
 80129b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	7bfa      	ldrb	r2, [r7, #15]
 80129b8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80129ba:	bf00      	nop
 80129bc:	3710      	adds	r7, #16
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}

080129c2 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b086      	sub	sp, #24
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80129ce:	693b      	ldr	r3, [r7, #16]
 80129d0:	2200      	movs	r2, #0
 80129d2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	685b      	ldr	r3, [r3, #4]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d022      	beq.n	8012a24 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80129e8:	2b10      	cmp	r3, #16
 80129ea:	d11b      	bne.n	8012a24 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	689b      	ldr	r3, [r3, #8]
 80129f0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129f8:	d202      	bcs.n	8012a00 <lwip_netconn_do_recv+0x3e>
 80129fa:	697b      	ldr	r3, [r7, #20]
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	e001      	b.n	8012a04 <lwip_netconn_do_recv+0x42>
 8012a00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a04:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	685b      	ldr	r3, [r3, #4]
 8012a0c:	89fa      	ldrh	r2, [r7, #14]
 8012a0e:	4611      	mov	r1, r2
 8012a10:	4618      	mov	r0, r3
 8012a12:	f003 f8a7 	bl	8015b64 <tcp_recved>
        remaining -= recved;
 8012a16:	89fb      	ldrh	r3, [r7, #14]
 8012a18:	697a      	ldr	r2, [r7, #20]
 8012a1a:	1ad3      	subs	r3, r2, r3
 8012a1c:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012a1e:	697b      	ldr	r3, [r7, #20]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d1e6      	bne.n	80129f2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012a24:	bf00      	nop
 8012a26:	3718      	adds	r7, #24
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b088      	sub	sp, #32
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	460b      	mov	r3, r1
 8012a36:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012a38:	2300      	movs	r3, #0
 8012a3a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d106      	bne.n	8012a50 <lwip_netconn_do_writemore+0x24>
 8012a42:	4b96      	ldr	r3, [pc, #600]	@ (8012c9c <lwip_netconn_do_writemore+0x270>)
 8012a44:	f240 6273 	movw	r2, #1651	@ 0x673
 8012a48:	4995      	ldr	r1, [pc, #596]	@ (8012ca0 <lwip_netconn_do_writemore+0x274>)
 8012a4a:	4896      	ldr	r0, [pc, #600]	@ (8012ca4 <lwip_netconn_do_writemore+0x278>)
 8012a4c:	f00d fc26 	bl	802029c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	785b      	ldrb	r3, [r3, #1]
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d006      	beq.n	8012a66 <lwip_netconn_do_writemore+0x3a>
 8012a58:	4b90      	ldr	r3, [pc, #576]	@ (8012c9c <lwip_netconn_do_writemore+0x270>)
 8012a5a:	f240 6274 	movw	r2, #1652	@ 0x674
 8012a5e:	4992      	ldr	r1, [pc, #584]	@ (8012ca8 <lwip_netconn_do_writemore+0x27c>)
 8012a60:	4890      	ldr	r0, [pc, #576]	@ (8012ca4 <lwip_netconn_do_writemore+0x278>)
 8012a62:	f00d fc1b 	bl	802029c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6a1b      	ldr	r3, [r3, #32]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <lwip_netconn_do_writemore+0x50>
 8012a6e:	4b8b      	ldr	r3, [pc, #556]	@ (8012c9c <lwip_netconn_do_writemore+0x270>)
 8012a70:	f240 6275 	movw	r2, #1653	@ 0x675
 8012a74:	498d      	ldr	r1, [pc, #564]	@ (8012cac <lwip_netconn_do_writemore+0x280>)
 8012a76:	488b      	ldr	r0, [pc, #556]	@ (8012ca4 <lwip_netconn_do_writemore+0x278>)
 8012a78:	f00d fc10 	bl	802029c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d106      	bne.n	8012a92 <lwip_netconn_do_writemore+0x66>
 8012a84:	4b85      	ldr	r3, [pc, #532]	@ (8012c9c <lwip_netconn_do_writemore+0x270>)
 8012a86:	f240 6276 	movw	r2, #1654	@ 0x676
 8012a8a:	4989      	ldr	r1, [pc, #548]	@ (8012cb0 <lwip_netconn_do_writemore+0x284>)
 8012a8c:	4885      	ldr	r0, [pc, #532]	@ (8012ca4 <lwip_netconn_do_writemore+0x278>)
 8012a8e:	f00d fc05 	bl	802029c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6a1b      	ldr	r3, [r3, #32]
 8012a96:	699a      	ldr	r2, [r3, #24]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	6a1b      	ldr	r3, [r3, #32]
 8012a9c:	695b      	ldr	r3, [r3, #20]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d306      	bcc.n	8012ab0 <lwip_netconn_do_writemore+0x84>
 8012aa2:	4b7e      	ldr	r3, [pc, #504]	@ (8012c9c <lwip_netconn_do_writemore+0x270>)
 8012aa4:	f240 6277 	movw	r2, #1655	@ 0x677
 8012aa8:	4982      	ldr	r1, [pc, #520]	@ (8012cb4 <lwip_netconn_do_writemore+0x288>)
 8012aaa:	487e      	ldr	r0, [pc, #504]	@ (8012ca4 <lwip_netconn_do_writemore+0x278>)
 8012aac:	f00d fbf6 	bl	802029c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6a1b      	ldr	r3, [r3, #32]
 8012ab4:	899b      	ldrh	r3, [r3, #12]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d106      	bne.n	8012ac8 <lwip_netconn_do_writemore+0x9c>
 8012aba:	4b78      	ldr	r3, [pc, #480]	@ (8012c9c <lwip_netconn_do_writemore+0x270>)
 8012abc:	f240 6279 	movw	r2, #1657	@ 0x679
 8012ac0:	497d      	ldr	r1, [pc, #500]	@ (8012cb8 <lwip_netconn_do_writemore+0x28c>)
 8012ac2:	4878      	ldr	r0, [pc, #480]	@ (8012ca4 <lwip_netconn_do_writemore+0x278>)
 8012ac4:	f00d fbea 	bl	802029c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	6a1b      	ldr	r3, [r3, #32]
 8012acc:	7f1b      	ldrb	r3, [r3, #28]
 8012ace:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012ad0:	687b      	ldr	r3, [r7, #4]
 8012ad2:	7f1b      	ldrb	r3, [r3, #28]
 8012ad4:	f003 0302 	and.w	r3, r3, #2
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d104      	bne.n	8012ae6 <lwip_netconn_do_writemore+0xba>
 8012adc:	7ebb      	ldrb	r3, [r7, #26]
 8012ade:	f003 0304 	and.w	r3, r3, #4
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d001      	beq.n	8012aea <lwip_netconn_do_writemore+0xbe>
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	e000      	b.n	8012aec <lwip_netconn_do_writemore+0xc0>
 8012aea:	2300      	movs	r3, #0
 8012aec:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	6a1b      	ldr	r3, [r3, #32]
 8012af2:	689b      	ldr	r3, [r3, #8]
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6a1b      	ldr	r3, [r3, #32]
 8012afa:	691b      	ldr	r3, [r3, #16]
 8012afc:	4413      	add	r3, r2
 8012afe:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6a1b      	ldr	r3, [r3, #32]
 8012b04:	689b      	ldr	r3, [r3, #8]
 8012b06:	685a      	ldr	r2, [r3, #4]
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6a1b      	ldr	r3, [r3, #32]
 8012b0c:	691b      	ldr	r3, [r3, #16]
 8012b0e:	1ad3      	subs	r3, r2, r3
 8012b10:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8012b12:	693b      	ldr	r3, [r7, #16]
 8012b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012b18:	d307      	bcc.n	8012b2a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012b1a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012b1e:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012b20:	7ebb      	ldrb	r3, [r7, #26]
 8012b22:	f043 0302 	orr.w	r3, r3, #2
 8012b26:	76bb      	strb	r3, [r7, #26]
 8012b28:	e001      	b.n	8012b2e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012b36:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012b38:	89fa      	ldrh	r2, [r7, #14]
 8012b3a:	8bbb      	ldrh	r3, [r7, #28]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d216      	bcs.n	8012b6e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8012b40:	89fb      	ldrh	r3, [r7, #14]
 8012b42:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012b44:	7e3b      	ldrb	r3, [r7, #24]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d00d      	beq.n	8012b66 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012b4a:	8bbb      	ldrh	r3, [r7, #28]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d10e      	bne.n	8012b6e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6a1b      	ldr	r3, [r3, #32]
 8012b54:	699b      	ldr	r3, [r3, #24]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d102      	bne.n	8012b60 <lwip_netconn_do_writemore+0x134>
 8012b5a:	f06f 0306 	mvn.w	r3, #6
 8012b5e:	e000      	b.n	8012b62 <lwip_netconn_do_writemore+0x136>
 8012b60:	2300      	movs	r3, #0
 8012b62:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012b64:	e07d      	b.n	8012c62 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012b66:	7ebb      	ldrb	r3, [r7, #26]
 8012b68:	f043 0302 	orr.w	r3, r3, #2
 8012b6c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6a1b      	ldr	r3, [r3, #32]
 8012b72:	691a      	ldr	r2, [r3, #16]
 8012b74:	8bbb      	ldrh	r3, [r7, #28]
 8012b76:	441a      	add	r2, r3
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	6a1b      	ldr	r3, [r3, #32]
 8012b7c:	689b      	ldr	r3, [r3, #8]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d906      	bls.n	8012b92 <lwip_netconn_do_writemore+0x166>
 8012b84:	4b45      	ldr	r3, [pc, #276]	@ (8012c9c <lwip_netconn_do_writemore+0x270>)
 8012b86:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8012b8a:	494c      	ldr	r1, [pc, #304]	@ (8012cbc <lwip_netconn_do_writemore+0x290>)
 8012b8c:	4845      	ldr	r0, [pc, #276]	@ (8012ca4 <lwip_netconn_do_writemore+0x278>)
 8012b8e:	f00d fb85 	bl	802029c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012b92:	8bbb      	ldrh	r3, [r7, #28]
 8012b94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d103      	bne.n	8012ba4 <lwip_netconn_do_writemore+0x178>
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012ba2:	d209      	bcs.n	8012bb8 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012ba8:	8bba      	ldrh	r2, [r7, #28]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d10b      	bne.n	8012bc6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	6a1b      	ldr	r3, [r3, #32]
 8012bb2:	899b      	ldrh	r3, [r3, #12]
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d906      	bls.n	8012bc6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8012bb8:	2301      	movs	r3, #1
 8012bba:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012bbc:	7ebb      	ldrb	r3, [r7, #26]
 8012bbe:	f043 0302 	orr.w	r3, r3, #2
 8012bc2:	76bb      	strb	r3, [r7, #26]
 8012bc4:	e001      	b.n	8012bca <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	6858      	ldr	r0, [r3, #4]
 8012bce:	7ebb      	ldrb	r3, [r7, #26]
 8012bd0:	8bba      	ldrh	r2, [r7, #28]
 8012bd2:	6979      	ldr	r1, [r7, #20]
 8012bd4:	f006 fe6e 	bl	80198b4 <tcp_write>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012bdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d12c      	bne.n	8012c3e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	6a1b      	ldr	r3, [r3, #32]
 8012be8:	6999      	ldr	r1, [r3, #24]
 8012bea:	8bba      	ldrh	r2, [r7, #28]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6a1b      	ldr	r3, [r3, #32]
 8012bf0:	440a      	add	r2, r1
 8012bf2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	6a1b      	ldr	r3, [r3, #32]
 8012bf8:	6919      	ldr	r1, [r3, #16]
 8012bfa:	8bba      	ldrh	r2, [r7, #28]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6a1b      	ldr	r3, [r3, #32]
 8012c00:	440a      	add	r2, r1
 8012c02:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6a1b      	ldr	r3, [r3, #32]
 8012c08:	691a      	ldr	r2, [r3, #16]
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6a1b      	ldr	r3, [r3, #32]
 8012c0e:	689b      	ldr	r3, [r3, #8]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	429a      	cmp	r2, r3
 8012c14:	d113      	bne.n	8012c3e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	6a1b      	ldr	r3, [r3, #32]
 8012c1a:	899a      	ldrh	r2, [r3, #12]
 8012c1c:	3a01      	subs	r2, #1
 8012c1e:	b292      	uxth	r2, r2
 8012c20:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6a1b      	ldr	r3, [r3, #32]
 8012c26:	899b      	ldrh	r3, [r3, #12]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d008      	beq.n	8012c3e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	6a1b      	ldr	r3, [r3, #32]
 8012c30:	689a      	ldr	r2, [r3, #8]
 8012c32:	3208      	adds	r2, #8
 8012c34:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	6a1b      	ldr	r3, [r3, #32]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012c3e:	7e7b      	ldrb	r3, [r7, #25]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d004      	beq.n	8012c4e <lwip_netconn_do_writemore+0x222>
 8012c44:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	f43f af50 	beq.w	8012aee <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012c4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d004      	beq.n	8012c60 <lwip_netconn_do_writemore+0x234>
 8012c56:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012c5e:	d146      	bne.n	8012cee <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012c60:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012c62:	7e3b      	ldrb	r3, [r7, #24]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d02b      	beq.n	8012cc0 <lwip_netconn_do_writemore+0x294>
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6a1b      	ldr	r3, [r3, #32]
 8012c6c:	699a      	ldr	r2, [r3, #24]
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	6a1b      	ldr	r3, [r3, #32]
 8012c72:	695b      	ldr	r3, [r3, #20]
 8012c74:	429a      	cmp	r2, r3
 8012c76:	d223      	bcs.n	8012cc0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d005      	beq.n	8012c8c <lwip_netconn_do_writemore+0x260>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c84:	2200      	movs	r2, #0
 8012c86:	2103      	movs	r1, #3
 8012c88:	6878      	ldr	r0, [r7, #4]
 8012c8a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	7f1b      	ldrb	r3, [r3, #28]
 8012c90:	f043 0310 	orr.w	r3, r3, #16
 8012c94:	b2da      	uxtb	r2, r3
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	771a      	strb	r2, [r3, #28]
 8012c9a:	e028      	b.n	8012cee <lwip_netconn_do_writemore+0x2c2>
 8012c9c:	080216e4 	.word	0x080216e4
 8012ca0:	0802183c 	.word	0x0802183c
 8012ca4:	08021728 	.word	0x08021728
 8012ca8:	08021b44 	.word	0x08021b44
 8012cac:	0802184c 	.word	0x0802184c
 8012cb0:	08021b64 	.word	0x08021b64
 8012cb4:	08021b7c 	.word	0x08021b7c
 8012cb8:	08021bbc 	.word	0x08021bbc
 8012cbc:	08021be4 	.word	0x08021be4
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	685b      	ldr	r3, [r3, #4]
 8012cc4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012cc8:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8012ccc:	d305      	bcc.n	8012cda <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	685b      	ldr	r3, [r3, #4]
 8012cd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012cd6:	2b04      	cmp	r3, #4
 8012cd8:	d909      	bls.n	8012cee <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d005      	beq.n	8012cee <lwip_netconn_do_writemore+0x2c2>
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ce6:	2200      	movs	r2, #0
 8012ce8:	2103      	movs	r1, #3
 8012cea:	6878      	ldr	r0, [r7, #4]
 8012cec:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012cee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d11d      	bne.n	8012d32 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	6a1b      	ldr	r3, [r3, #32]
 8012cfa:	699a      	ldr	r2, [r3, #24]
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6a1b      	ldr	r3, [r3, #32]
 8012d00:	695b      	ldr	r3, [r3, #20]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d002      	beq.n	8012d0c <lwip_netconn_do_writemore+0x2e0>
 8012d06:	7e3b      	ldrb	r3, [r7, #24]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d001      	beq.n	8012d10 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	4618      	mov	r0, r3
 8012d16:	f007 fbdd 	bl	801a4d4 <tcp_output>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012d1e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012d22:	f113 0f04 	cmn.w	r3, #4
 8012d26:	d12c      	bne.n	8012d82 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012d28:	7b3b      	ldrb	r3, [r7, #12]
 8012d2a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012d2c:	2301      	movs	r3, #1
 8012d2e:	76fb      	strb	r3, [r7, #27]
 8012d30:	e027      	b.n	8012d82 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012d32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012d36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012d3a:	d120      	bne.n	8012d7e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	685b      	ldr	r3, [r3, #4]
 8012d40:	4618      	mov	r0, r3
 8012d42:	f007 fbc7 	bl	801a4d4 <tcp_output>
 8012d46:	4603      	mov	r3, r0
 8012d48:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012d4a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012d4e:	f113 0f04 	cmn.w	r3, #4
 8012d52:	d104      	bne.n	8012d5e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012d54:	7b7b      	ldrb	r3, [r7, #13]
 8012d56:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012d58:	2301      	movs	r3, #1
 8012d5a:	76fb      	strb	r3, [r7, #27]
 8012d5c:	e011      	b.n	8012d82 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012d5e:	7e3b      	ldrb	r3, [r7, #24]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d00e      	beq.n	8012d82 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	6a1b      	ldr	r3, [r3, #32]
 8012d68:	699b      	ldr	r3, [r3, #24]
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d102      	bne.n	8012d74 <lwip_netconn_do_writemore+0x348>
 8012d6e:	f06f 0306 	mvn.w	r3, #6
 8012d72:	e000      	b.n	8012d76 <lwip_netconn_do_writemore+0x34a>
 8012d74:	2300      	movs	r3, #0
 8012d76:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012d78:	2301      	movs	r3, #1
 8012d7a:	76fb      	strb	r3, [r7, #27]
 8012d7c:	e001      	b.n	8012d82 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012d7e:	2301      	movs	r3, #1
 8012d80:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012d82:	7efb      	ldrb	r3, [r7, #27]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d015      	beq.n	8012db4 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	6a1b      	ldr	r3, [r3, #32]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	330c      	adds	r3, #12
 8012d90:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	6a1b      	ldr	r3, [r3, #32]
 8012d96:	7ffa      	ldrb	r2, [r7, #31]
 8012d98:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	2200      	movs	r2, #0
 8012da4:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012da6:	78fb      	ldrb	r3, [r7, #3]
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d006      	beq.n	8012dba <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012dac:	68b8      	ldr	r0, [r7, #8]
 8012dae:	f00b ff38 	bl	801ec22 <sys_sem_signal>
 8012db2:	e002      	b.n	8012dba <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012db4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012db8:	e000      	b.n	8012dbc <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8012dba:	2300      	movs	r3, #0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3720      	adds	r7, #32
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012dc4:	b580      	push	{r7, lr}
 8012dc6:	b084      	sub	sp, #16
 8012dc8:	af00      	add	r7, sp, #0
 8012dca:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	785b      	ldrb	r3, [r3, #1]
 8012dd6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	685b      	ldr	r3, [r3, #4]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d069      	beq.n	8012eb6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	781b      	ldrb	r3, [r3, #0]
 8012de8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012dec:	2b10      	cmp	r3, #16
 8012dee:	d162      	bne.n	8012eb6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012df4:	2b03      	cmp	r3, #3
 8012df6:	d002      	beq.n	8012dfe <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012df8:	7afb      	ldrb	r3, [r7, #11]
 8012dfa:	2b02      	cmp	r3, #2
 8012dfc:	d05b      	beq.n	8012eb6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012dfe:	7afb      	ldrb	r3, [r7, #11]
 8012e00:	2b03      	cmp	r3, #3
 8012e02:	d103      	bne.n	8012e0c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	22f5      	movs	r2, #245	@ 0xf5
 8012e08:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012e0a:	e059      	b.n	8012ec0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012e0c:	7afb      	ldrb	r3, [r7, #11]
 8012e0e:	2b01      	cmp	r3, #1
 8012e10:	d103      	bne.n	8012e1a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	22fb      	movs	r2, #251	@ 0xfb
 8012e16:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012e18:	e052      	b.n	8012ec0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	7a1b      	ldrb	r3, [r3, #8]
 8012e1e:	f003 0301 	and.w	r3, r3, #1
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d004      	beq.n	8012e30 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7ff fa76 	bl	801231c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	6a1b      	ldr	r3, [r3, #32]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d006      	beq.n	8012e48 <lwip_netconn_do_close+0x84>
 8012e3a:	4b23      	ldr	r3, [pc, #140]	@ (8012ec8 <lwip_netconn_do_close+0x104>)
 8012e3c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8012e40:	4922      	ldr	r1, [pc, #136]	@ (8012ecc <lwip_netconn_do_close+0x108>)
 8012e42:	4823      	ldr	r0, [pc, #140]	@ (8012ed0 <lwip_netconn_do_close+0x10c>)
 8012e44:	f00d fa2a 	bl	802029c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	2204      	movs	r2, #4
 8012e4e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	68fa      	ldr	r2, [r7, #12]
 8012e56:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7ff fada 	bl	8012418 <lwip_netconn_do_close_internal>
 8012e64:	4603      	mov	r3, r0
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d029      	beq.n	8012ebe <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	785b      	ldrb	r3, [r3, #1]
 8012e70:	2b04      	cmp	r3, #4
 8012e72:	d006      	beq.n	8012e82 <lwip_netconn_do_close+0xbe>
 8012e74:	4b14      	ldr	r3, [pc, #80]	@ (8012ec8 <lwip_netconn_do_close+0x104>)
 8012e76:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8012e7a:	4916      	ldr	r1, [pc, #88]	@ (8012ed4 <lwip_netconn_do_close+0x110>)
 8012e7c:	4814      	ldr	r0, [pc, #80]	@ (8012ed0 <lwip_netconn_do_close+0x10c>)
 8012e7e:	f00d fa0d 	bl	802029c <iprintf>
        UNLOCK_TCPIP_CORE();
 8012e82:	4815      	ldr	r0, [pc, #84]	@ (8012ed8 <lwip_netconn_do_close+0x114>)
 8012e84:	f00b ff61 	bl	801ed4a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	330c      	adds	r3, #12
 8012e8e:	2100      	movs	r1, #0
 8012e90:	4618      	mov	r0, r3
 8012e92:	f00b fe95 	bl	801ebc0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012e96:	4810      	ldr	r0, [pc, #64]	@ (8012ed8 <lwip_netconn_do_close+0x114>)
 8012e98:	f00b ff48 	bl	801ed2c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	681b      	ldr	r3, [r3, #0]
 8012ea0:	785b      	ldrb	r3, [r3, #1]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d00b      	beq.n	8012ebe <lwip_netconn_do_close+0xfa>
 8012ea6:	4b08      	ldr	r3, [pc, #32]	@ (8012ec8 <lwip_netconn_do_close+0x104>)
 8012ea8:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8012eac:	4909      	ldr	r1, [pc, #36]	@ (8012ed4 <lwip_netconn_do_close+0x110>)
 8012eae:	4808      	ldr	r0, [pc, #32]	@ (8012ed0 <lwip_netconn_do_close+0x10c>)
 8012eb0:	f00d f9f4 	bl	802029c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012eb4:	e003      	b.n	8012ebe <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	22f5      	movs	r2, #245	@ 0xf5
 8012eba:	711a      	strb	r2, [r3, #4]
 8012ebc:	e000      	b.n	8012ec0 <lwip_netconn_do_close+0xfc>
      return;
 8012ebe:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012ec0:	3710      	adds	r7, #16
 8012ec2:	46bd      	mov	sp, r7
 8012ec4:	bd80      	pop	{r7, pc}
 8012ec6:	bf00      	nop
 8012ec8:	080216e4 	.word	0x080216e4
 8012ecc:	08021a88 	.word	0x08021a88
 8012ed0:	08021728 	.word	0x08021728
 8012ed4:	08021aa4 	.word	0x08021aa4
 8012ed8:	2001f0ac 	.word	0x2001f0ac

08012edc <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012edc:	b580      	push	{r7, lr}
 8012ede:	b082      	sub	sp, #8
 8012ee0:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012ee2:	2006      	movs	r0, #6
 8012ee4:	f001 f818 	bl	8013f18 <memp_malloc>
 8012ee8:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d004      	beq.n	8012efa <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012ef0:	2210      	movs	r2, #16
 8012ef2:	2100      	movs	r1, #0
 8012ef4:	6878      	ldr	r0, [r7, #4]
 8012ef6:	f00d fb29 	bl	802054c <memset>
  }
  return buf;
 8012efa:	687b      	ldr	r3, [r7, #4]
}
 8012efc:	4618      	mov	r0, r3
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d013      	beq.n	8012f3a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d00b      	beq.n	8012f32 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f001 ff1a 	bl	8014d58 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2200      	movs	r2, #0
 8012f28:	605a      	str	r2, [r3, #4]
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	685a      	ldr	r2, [r3, #4]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012f32:	6879      	ldr	r1, [r7, #4]
 8012f34:	2006      	movs	r0, #6
 8012f36:	f001 f86b 	bl	8014010 <memp_free>
  }
}
 8012f3a:	bf00      	nop
 8012f3c:	3708      	adds	r7, #8
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
	...

08012f44 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b082      	sub	sp, #8
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	460b      	mov	r3, r1
 8012f4e:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d107      	bne.n	8012f66 <netbuf_alloc+0x22>
 8012f56:	4b1c      	ldr	r3, [pc, #112]	@ (8012fc8 <netbuf_alloc+0x84>)
 8012f58:	2268      	movs	r2, #104	@ 0x68
 8012f5a:	491c      	ldr	r1, [pc, #112]	@ (8012fcc <netbuf_alloc+0x88>)
 8012f5c:	481c      	ldr	r0, [pc, #112]	@ (8012fd0 <netbuf_alloc+0x8c>)
 8012f5e:	f00d f99d 	bl	802029c <iprintf>
 8012f62:	2300      	movs	r3, #0
 8012f64:	e02b      	b.n	8012fbe <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	2b00      	cmp	r3, #0
 8012f6c:	d004      	beq.n	8012f78 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	4618      	mov	r0, r3
 8012f74:	f001 fef0 	bl	8014d58 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8012f78:	887b      	ldrh	r3, [r7, #2]
 8012f7a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f7e:	4619      	mov	r1, r3
 8012f80:	2036      	movs	r0, #54	@ 0x36
 8012f82:	f001 fc05 	bl	8014790 <pbuf_alloc>
 8012f86:	4602      	mov	r2, r0
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d101      	bne.n	8012f98 <netbuf_alloc+0x54>
    return NULL;
 8012f94:	2300      	movs	r3, #0
 8012f96:	e012      	b.n	8012fbe <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	681b      	ldr	r3, [r3, #0]
 8012f9c:	895b      	ldrh	r3, [r3, #10]
 8012f9e:	887a      	ldrh	r2, [r7, #2]
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d905      	bls.n	8012fb0 <netbuf_alloc+0x6c>
 8012fa4:	4b08      	ldr	r3, [pc, #32]	@ (8012fc8 <netbuf_alloc+0x84>)
 8012fa6:	2272      	movs	r2, #114	@ 0x72
 8012fa8:	490a      	ldr	r1, [pc, #40]	@ (8012fd4 <netbuf_alloc+0x90>)
 8012faa:	4809      	ldr	r0, [pc, #36]	@ (8012fd0 <netbuf_alloc+0x8c>)
 8012fac:	f00d f976 	bl	802029c <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681a      	ldr	r2, [r3, #0]
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	685b      	ldr	r3, [r3, #4]
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3708      	adds	r7, #8
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	08021c3c 	.word	0x08021c3c
 8012fcc:	08021c70 	.word	0x08021c70
 8012fd0:	08021c8c 	.word	0x08021c8c
 8012fd4:	08021cb4 	.word	0x08021cb4

08012fd8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012fd8:	b580      	push	{r7, lr}
 8012fda:	b084      	sub	sp, #16
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	60f8      	str	r0, [r7, #12]
 8012fe0:	60b9      	str	r1, [r7, #8]
 8012fe2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d108      	bne.n	8012ffc <netbuf_data+0x24>
 8012fea:	4b1b      	ldr	r3, [pc, #108]	@ (8013058 <netbuf_data+0x80>)
 8012fec:	22c6      	movs	r2, #198	@ 0xc6
 8012fee:	491b      	ldr	r1, [pc, #108]	@ (801305c <netbuf_data+0x84>)
 8012ff0:	481b      	ldr	r0, [pc, #108]	@ (8013060 <netbuf_data+0x88>)
 8012ff2:	f00d f953 	bl	802029c <iprintf>
 8012ff6:	f06f 030f 	mvn.w	r3, #15
 8012ffa:	e029      	b.n	8013050 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d108      	bne.n	8013014 <netbuf_data+0x3c>
 8013002:	4b15      	ldr	r3, [pc, #84]	@ (8013058 <netbuf_data+0x80>)
 8013004:	22c7      	movs	r2, #199	@ 0xc7
 8013006:	4917      	ldr	r1, [pc, #92]	@ (8013064 <netbuf_data+0x8c>)
 8013008:	4815      	ldr	r0, [pc, #84]	@ (8013060 <netbuf_data+0x88>)
 801300a:	f00d f947 	bl	802029c <iprintf>
 801300e:	f06f 030f 	mvn.w	r3, #15
 8013012:	e01d      	b.n	8013050 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d108      	bne.n	801302c <netbuf_data+0x54>
 801301a:	4b0f      	ldr	r3, [pc, #60]	@ (8013058 <netbuf_data+0x80>)
 801301c:	22c8      	movs	r2, #200	@ 0xc8
 801301e:	4912      	ldr	r1, [pc, #72]	@ (8013068 <netbuf_data+0x90>)
 8013020:	480f      	ldr	r0, [pc, #60]	@ (8013060 <netbuf_data+0x88>)
 8013022:	f00d f93b 	bl	802029c <iprintf>
 8013026:	f06f 030f 	mvn.w	r3, #15
 801302a:	e011      	b.n	8013050 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	685b      	ldr	r3, [r3, #4]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d102      	bne.n	801303a <netbuf_data+0x62>
    return ERR_BUF;
 8013034:	f06f 0301 	mvn.w	r3, #1
 8013038:	e00a      	b.n	8013050 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	685a      	ldr	r2, [r3, #4]
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	895a      	ldrh	r2, [r3, #10]
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801304e:	2300      	movs	r3, #0
}
 8013050:	4618      	mov	r0, r3
 8013052:	3710      	adds	r7, #16
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	08021c3c 	.word	0x08021c3c
 801305c:	08021d44 	.word	0x08021d44
 8013060:	08021c8c 	.word	0x08021c8c
 8013064:	08021d60 	.word	0x08021d60
 8013068:	08021d80 	.word	0x08021d80

0801306c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b084      	sub	sp, #16
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8013076:	f008 faf9 	bl	801b66c <sys_timeouts_sleeptime>
 801307a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8013082:	d10b      	bne.n	801309c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8013084:	4813      	ldr	r0, [pc, #76]	@ (80130d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013086:	f00b fe60 	bl	801ed4a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801308a:	2200      	movs	r2, #0
 801308c:	6839      	ldr	r1, [r7, #0]
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f00b fcea 	bl	801ea68 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8013094:	480f      	ldr	r0, [pc, #60]	@ (80130d4 <tcpip_timeouts_mbox_fetch+0x68>)
 8013096:	f00b fe49 	bl	801ed2c <sys_mutex_lock>
    return;
 801309a:	e018      	b.n	80130ce <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d102      	bne.n	80130a8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80130a2:	f008 faa9 	bl	801b5f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80130a6:	e7e6      	b.n	8013076 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80130a8:	480a      	ldr	r0, [pc, #40]	@ (80130d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80130aa:	f00b fe4e 	bl	801ed4a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80130ae:	68fa      	ldr	r2, [r7, #12]
 80130b0:	6839      	ldr	r1, [r7, #0]
 80130b2:	6878      	ldr	r0, [r7, #4]
 80130b4:	f00b fcd8 	bl	801ea68 <sys_arch_mbox_fetch>
 80130b8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80130ba:	4806      	ldr	r0, [pc, #24]	@ (80130d4 <tcpip_timeouts_mbox_fetch+0x68>)
 80130bc:	f00b fe36 	bl	801ed2c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80130c6:	d102      	bne.n	80130ce <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80130c8:	f008 fa96 	bl	801b5f8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80130cc:	e7d3      	b.n	8013076 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80130ce:	3710      	adds	r7, #16
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}
 80130d4:	2001f0ac 	.word	0x2001f0ac

080130d8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b084      	sub	sp, #16
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80130e0:	4810      	ldr	r0, [pc, #64]	@ (8013124 <tcpip_thread+0x4c>)
 80130e2:	f00b fe23 	bl	801ed2c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80130e6:	4b10      	ldr	r3, [pc, #64]	@ (8013128 <tcpip_thread+0x50>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d005      	beq.n	80130fa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80130ee:	4b0e      	ldr	r3, [pc, #56]	@ (8013128 <tcpip_thread+0x50>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4a0e      	ldr	r2, [pc, #56]	@ (801312c <tcpip_thread+0x54>)
 80130f4:	6812      	ldr	r2, [r2, #0]
 80130f6:	4610      	mov	r0, r2
 80130f8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80130fa:	f107 030c 	add.w	r3, r7, #12
 80130fe:	4619      	mov	r1, r3
 8013100:	480b      	ldr	r0, [pc, #44]	@ (8013130 <tcpip_thread+0x58>)
 8013102:	f7ff ffb3 	bl	801306c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d106      	bne.n	801311a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801310c:	4b09      	ldr	r3, [pc, #36]	@ (8013134 <tcpip_thread+0x5c>)
 801310e:	2291      	movs	r2, #145	@ 0x91
 8013110:	4909      	ldr	r1, [pc, #36]	@ (8013138 <tcpip_thread+0x60>)
 8013112:	480a      	ldr	r0, [pc, #40]	@ (801313c <tcpip_thread+0x64>)
 8013114:	f00d f8c2 	bl	802029c <iprintf>
      continue;
 8013118:	e003      	b.n	8013122 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	4618      	mov	r0, r3
 801311e:	f000 f80f 	bl	8013140 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8013122:	e7ea      	b.n	80130fa <tcpip_thread+0x22>
 8013124:	2001f0ac 	.word	0x2001f0ac
 8013128:	2001f0a0 	.word	0x2001f0a0
 801312c:	2001f0a4 	.word	0x2001f0a4
 8013130:	2001f0a8 	.word	0x2001f0a8
 8013134:	08021dd4 	.word	0x08021dd4
 8013138:	08021e04 	.word	0x08021e04
 801313c:	08021e24 	.word	0x08021e24

08013140 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	781b      	ldrb	r3, [r3, #0]
 801314c:	2b02      	cmp	r3, #2
 801314e:	d026      	beq.n	801319e <tcpip_thread_handle_msg+0x5e>
 8013150:	2b02      	cmp	r3, #2
 8013152:	dc2b      	bgt.n	80131ac <tcpip_thread_handle_msg+0x6c>
 8013154:	2b00      	cmp	r3, #0
 8013156:	d002      	beq.n	801315e <tcpip_thread_handle_msg+0x1e>
 8013158:	2b01      	cmp	r3, #1
 801315a:	d015      	beq.n	8013188 <tcpip_thread_handle_msg+0x48>
 801315c:	e026      	b.n	80131ac <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	68db      	ldr	r3, [r3, #12]
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	6850      	ldr	r0, [r2, #4]
 8013166:	687a      	ldr	r2, [r7, #4]
 8013168:	6892      	ldr	r2, [r2, #8]
 801316a:	4611      	mov	r1, r2
 801316c:	4798      	blx	r3
 801316e:	4603      	mov	r3, r0
 8013170:	2b00      	cmp	r3, #0
 8013172:	d004      	beq.n	801317e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	685b      	ldr	r3, [r3, #4]
 8013178:	4618      	mov	r0, r3
 801317a:	f001 fded 	bl	8014d58 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801317e:	6879      	ldr	r1, [r7, #4]
 8013180:	2009      	movs	r0, #9
 8013182:	f000 ff45 	bl	8014010 <memp_free>
      break;
 8013186:	e018      	b.n	80131ba <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	687a      	ldr	r2, [r7, #4]
 801318e:	6892      	ldr	r2, [r2, #8]
 8013190:	4610      	mov	r0, r2
 8013192:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8013194:	6879      	ldr	r1, [r7, #4]
 8013196:	2008      	movs	r0, #8
 8013198:	f000 ff3a 	bl	8014010 <memp_free>
      break;
 801319c:	e00d      	b.n	80131ba <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	687a      	ldr	r2, [r7, #4]
 80131a4:	6892      	ldr	r2, [r2, #8]
 80131a6:	4610      	mov	r0, r2
 80131a8:	4798      	blx	r3
      break;
 80131aa:	e006      	b.n	80131ba <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80131ac:	4b05      	ldr	r3, [pc, #20]	@ (80131c4 <tcpip_thread_handle_msg+0x84>)
 80131ae:	22cf      	movs	r2, #207	@ 0xcf
 80131b0:	4905      	ldr	r1, [pc, #20]	@ (80131c8 <tcpip_thread_handle_msg+0x88>)
 80131b2:	4806      	ldr	r0, [pc, #24]	@ (80131cc <tcpip_thread_handle_msg+0x8c>)
 80131b4:	f00d f872 	bl	802029c <iprintf>
      break;
 80131b8:	bf00      	nop
  }
}
 80131ba:	bf00      	nop
 80131bc:	3708      	adds	r7, #8
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	08021dd4 	.word	0x08021dd4
 80131c8:	08021e04 	.word	0x08021e04
 80131cc:	08021e24 	.word	0x08021e24

080131d0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b086      	sub	sp, #24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80131dc:	481a      	ldr	r0, [pc, #104]	@ (8013248 <tcpip_inpkt+0x78>)
 80131de:	f00b fc8b 	bl	801eaf8 <sys_mbox_valid>
 80131e2:	4603      	mov	r3, r0
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d105      	bne.n	80131f4 <tcpip_inpkt+0x24>
 80131e8:	4b18      	ldr	r3, [pc, #96]	@ (801324c <tcpip_inpkt+0x7c>)
 80131ea:	22fc      	movs	r2, #252	@ 0xfc
 80131ec:	4918      	ldr	r1, [pc, #96]	@ (8013250 <tcpip_inpkt+0x80>)
 80131ee:	4819      	ldr	r0, [pc, #100]	@ (8013254 <tcpip_inpkt+0x84>)
 80131f0:	f00d f854 	bl	802029c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80131f4:	2009      	movs	r0, #9
 80131f6:	f000 fe8f 	bl	8013f18 <memp_malloc>
 80131fa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d102      	bne.n	8013208 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8013202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013206:	e01a      	b.n	801323e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	2200      	movs	r2, #0
 801320c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	68fa      	ldr	r2, [r7, #12]
 8013212:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	68ba      	ldr	r2, [r7, #8]
 8013218:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013220:	6979      	ldr	r1, [r7, #20]
 8013222:	4809      	ldr	r0, [pc, #36]	@ (8013248 <tcpip_inpkt+0x78>)
 8013224:	f00b fbfc 	bl	801ea20 <sys_mbox_trypost>
 8013228:	4603      	mov	r3, r0
 801322a:	2b00      	cmp	r3, #0
 801322c:	d006      	beq.n	801323c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801322e:	6979      	ldr	r1, [r7, #20]
 8013230:	2009      	movs	r0, #9
 8013232:	f000 feed 	bl	8014010 <memp_free>
    return ERR_MEM;
 8013236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801323a:	e000      	b.n	801323e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801323c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801323e:	4618      	mov	r0, r3
 8013240:	3718      	adds	r7, #24
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	2001f0a8 	.word	0x2001f0a8
 801324c:	08021dd4 	.word	0x08021dd4
 8013250:	08021e4c 	.word	0x08021e4c
 8013254:	08021e24 	.word	0x08021e24

08013258 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8013262:	683b      	ldr	r3, [r7, #0]
 8013264:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013268:	f003 0318 	and.w	r3, r3, #24
 801326c:	2b00      	cmp	r3, #0
 801326e:	d006      	beq.n	801327e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8013270:	4a08      	ldr	r2, [pc, #32]	@ (8013294 <tcpip_input+0x3c>)
 8013272:	6839      	ldr	r1, [r7, #0]
 8013274:	6878      	ldr	r0, [r7, #4]
 8013276:	f7ff ffab 	bl	80131d0 <tcpip_inpkt>
 801327a:	4603      	mov	r3, r0
 801327c:	e005      	b.n	801328a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801327e:	4a06      	ldr	r2, [pc, #24]	@ (8013298 <tcpip_input+0x40>)
 8013280:	6839      	ldr	r1, [r7, #0]
 8013282:	6878      	ldr	r0, [r7, #4]
 8013284:	f7ff ffa4 	bl	80131d0 <tcpip_inpkt>
 8013288:	4603      	mov	r3, r0
}
 801328a:	4618      	mov	r0, r3
 801328c:	3708      	adds	r7, #8
 801328e:	46bd      	mov	sp, r7
 8013290:	bd80      	pop	{r7, pc}
 8013292:	bf00      	nop
 8013294:	0801e769 	.word	0x0801e769
 8013298:	0801d545 	.word	0x0801d545

0801329c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b084      	sub	sp, #16
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80132a6:	4819      	ldr	r0, [pc, #100]	@ (801330c <tcpip_try_callback+0x70>)
 80132a8:	f00b fc26 	bl	801eaf8 <sys_mbox_valid>
 80132ac:	4603      	mov	r3, r0
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d106      	bne.n	80132c0 <tcpip_try_callback+0x24>
 80132b2:	4b17      	ldr	r3, [pc, #92]	@ (8013310 <tcpip_try_callback+0x74>)
 80132b4:	f240 125d 	movw	r2, #349	@ 0x15d
 80132b8:	4916      	ldr	r1, [pc, #88]	@ (8013314 <tcpip_try_callback+0x78>)
 80132ba:	4817      	ldr	r0, [pc, #92]	@ (8013318 <tcpip_try_callback+0x7c>)
 80132bc:	f00c ffee 	bl	802029c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80132c0:	2008      	movs	r0, #8
 80132c2:	f000 fe29 	bl	8013f18 <memp_malloc>
 80132c6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d102      	bne.n	80132d4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80132ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80132d2:	e017      	b.n	8013304 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	2201      	movs	r2, #1
 80132d8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	687a      	ldr	r2, [r7, #4]
 80132de:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	683a      	ldr	r2, [r7, #0]
 80132e4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80132e6:	68f9      	ldr	r1, [r7, #12]
 80132e8:	4808      	ldr	r0, [pc, #32]	@ (801330c <tcpip_try_callback+0x70>)
 80132ea:	f00b fb99 	bl	801ea20 <sys_mbox_trypost>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d006      	beq.n	8013302 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80132f4:	68f9      	ldr	r1, [r7, #12]
 80132f6:	2008      	movs	r0, #8
 80132f8:	f000 fe8a 	bl	8014010 <memp_free>
    return ERR_MEM;
 80132fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013300:	e000      	b.n	8013304 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8013302:	2300      	movs	r3, #0
}
 8013304:	4618      	mov	r0, r3
 8013306:	3710      	adds	r7, #16
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}
 801330c:	2001f0a8 	.word	0x2001f0a8
 8013310:	08021dd4 	.word	0x08021dd4
 8013314:	08021e4c 	.word	0x08021e4c
 8013318:	08021e24 	.word	0x08021e24

0801331c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8013328:	4806      	ldr	r0, [pc, #24]	@ (8013344 <tcpip_send_msg_wait_sem+0x28>)
 801332a:	f00b fcff 	bl	801ed2c <sys_mutex_lock>
  fn(apimsg);
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	68b8      	ldr	r0, [r7, #8]
 8013332:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8013334:	4803      	ldr	r0, [pc, #12]	@ (8013344 <tcpip_send_msg_wait_sem+0x28>)
 8013336:	f00b fd08 	bl	801ed4a <sys_mutex_unlock>
  return ERR_OK;
 801333a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801333c:	4618      	mov	r0, r3
 801333e:	3710      	adds	r7, #16
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}
 8013344:	2001f0ac 	.word	0x2001f0ac

08013348 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b084      	sub	sp, #16
 801334c:	af02      	add	r7, sp, #8
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
  lwip_init();
 8013352:	f000 f872 	bl	801343a <lwip_init>

  tcpip_init_done = initfunc;
 8013356:	4a17      	ldr	r2, [pc, #92]	@ (80133b4 <tcpip_init+0x6c>)
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801335c:	4a16      	ldr	r2, [pc, #88]	@ (80133b8 <tcpip_init+0x70>)
 801335e:	683b      	ldr	r3, [r7, #0]
 8013360:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8013362:	2106      	movs	r1, #6
 8013364:	4815      	ldr	r0, [pc, #84]	@ (80133bc <tcpip_init+0x74>)
 8013366:	f00b fb01 	bl	801e96c <sys_mbox_new>
 801336a:	4603      	mov	r3, r0
 801336c:	2b00      	cmp	r3, #0
 801336e:	d006      	beq.n	801337e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8013370:	4b13      	ldr	r3, [pc, #76]	@ (80133c0 <tcpip_init+0x78>)
 8013372:	f240 2261 	movw	r2, #609	@ 0x261
 8013376:	4913      	ldr	r1, [pc, #76]	@ (80133c4 <tcpip_init+0x7c>)
 8013378:	4813      	ldr	r0, [pc, #76]	@ (80133c8 <tcpip_init+0x80>)
 801337a:	f00c ff8f 	bl	802029c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801337e:	4813      	ldr	r0, [pc, #76]	@ (80133cc <tcpip_init+0x84>)
 8013380:	f00b fc9e 	bl	801ecc0 <sys_mutex_new>
 8013384:	4603      	mov	r3, r0
 8013386:	2b00      	cmp	r3, #0
 8013388:	d006      	beq.n	8013398 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801338a:	4b0d      	ldr	r3, [pc, #52]	@ (80133c0 <tcpip_init+0x78>)
 801338c:	f240 2265 	movw	r2, #613	@ 0x265
 8013390:	490f      	ldr	r1, [pc, #60]	@ (80133d0 <tcpip_init+0x88>)
 8013392:	480d      	ldr	r0, [pc, #52]	@ (80133c8 <tcpip_init+0x80>)
 8013394:	f00c ff82 	bl	802029c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8013398:	2318      	movs	r3, #24
 801339a:	9300      	str	r3, [sp, #0]
 801339c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80133a0:	2200      	movs	r2, #0
 80133a2:	490c      	ldr	r1, [pc, #48]	@ (80133d4 <tcpip_init+0x8c>)
 80133a4:	480c      	ldr	r0, [pc, #48]	@ (80133d8 <tcpip_init+0x90>)
 80133a6:	f00b fcdd 	bl	801ed64 <sys_thread_new>
}
 80133aa:	bf00      	nop
 80133ac:	3708      	adds	r7, #8
 80133ae:	46bd      	mov	sp, r7
 80133b0:	bd80      	pop	{r7, pc}
 80133b2:	bf00      	nop
 80133b4:	2001f0a0 	.word	0x2001f0a0
 80133b8:	2001f0a4 	.word	0x2001f0a4
 80133bc:	2001f0a8 	.word	0x2001f0a8
 80133c0:	08021dd4 	.word	0x08021dd4
 80133c4:	08021e5c 	.word	0x08021e5c
 80133c8:	08021e24 	.word	0x08021e24
 80133cc:	2001f0ac 	.word	0x2001f0ac
 80133d0:	08021e80 	.word	0x08021e80
 80133d4:	080130d9 	.word	0x080130d9
 80133d8:	08021ea4 	.word	0x08021ea4

080133dc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80133dc:	b480      	push	{r7}
 80133de:	b083      	sub	sp, #12
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	4603      	mov	r3, r0
 80133e4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80133e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80133ea:	021b      	lsls	r3, r3, #8
 80133ec:	b21a      	sxth	r2, r3
 80133ee:	88fb      	ldrh	r3, [r7, #6]
 80133f0:	0a1b      	lsrs	r3, r3, #8
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	b21b      	sxth	r3, r3
 80133f6:	4313      	orrs	r3, r2
 80133f8:	b21b      	sxth	r3, r3
 80133fa:	b29b      	uxth	r3, r3
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	370c      	adds	r7, #12
 8013400:	46bd      	mov	sp, r7
 8013402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013406:	4770      	bx	lr

08013408 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013408:	b480      	push	{r7}
 801340a:	b083      	sub	sp, #12
 801340c:	af00      	add	r7, sp, #0
 801340e:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	061a      	lsls	r2, r3, #24
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	021b      	lsls	r3, r3, #8
 8013418:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801341c:	431a      	orrs	r2, r3
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	0a1b      	lsrs	r3, r3, #8
 8013422:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013426:	431a      	orrs	r2, r3
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	0e1b      	lsrs	r3, r3, #24
 801342c:	4313      	orrs	r3, r2
}
 801342e:	4618      	mov	r0, r3
 8013430:	370c      	adds	r7, #12
 8013432:	46bd      	mov	sp, r7
 8013434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013438:	4770      	bx	lr

0801343a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801343a:	b580      	push	{r7, lr}
 801343c:	b082      	sub	sp, #8
 801343e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8013440:	2300      	movs	r3, #0
 8013442:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8013444:	f001 ff32 	bl	80152ac <stats_init>
#if !NO_SYS
  sys_init();
 8013448:	f00b fc2e 	bl	801eca8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801344c:	f000 f8d4 	bl	80135f8 <mem_init>
  memp_init();
 8013450:	f000 fccc 	bl	8013dec <memp_init>
  pbuf_init();
  netif_init();
 8013454:	f000 fe06 	bl	8014064 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013458:	f008 f940 	bl	801b6dc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801345c:	f001 ff2e 	bl	80152bc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8013460:	f008 f882 	bl	801b568 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013464:	bf00      	nop
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}

0801346c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801346c:	b480      	push	{r7}
 801346e:	b083      	sub	sp, #12
 8013470:	af00      	add	r7, sp, #0
 8013472:	4603      	mov	r3, r0
 8013474:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8013476:	4b05      	ldr	r3, [pc, #20]	@ (801348c <ptr_to_mem+0x20>)
 8013478:	681a      	ldr	r2, [r3, #0]
 801347a:	88fb      	ldrh	r3, [r7, #6]
 801347c:	4413      	add	r3, r2
}
 801347e:	4618      	mov	r0, r3
 8013480:	370c      	adds	r7, #12
 8013482:	46bd      	mov	sp, r7
 8013484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013488:	4770      	bx	lr
 801348a:	bf00      	nop
 801348c:	2001f0c8 	.word	0x2001f0c8

08013490 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8013490:	b480      	push	{r7}
 8013492:	b083      	sub	sp, #12
 8013494:	af00      	add	r7, sp, #0
 8013496:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8013498:	4b05      	ldr	r3, [pc, #20]	@ (80134b0 <mem_to_ptr+0x20>)
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	1ad3      	subs	r3, r2, r3
 80134a0:	b29b      	uxth	r3, r3
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	370c      	adds	r7, #12
 80134a6:	46bd      	mov	sp, r7
 80134a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ac:	4770      	bx	lr
 80134ae:	bf00      	nop
 80134b0:	2001f0c8 	.word	0x2001f0c8

080134b4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80134b4:	b590      	push	{r4, r7, lr}
 80134b6:	b085      	sub	sp, #20
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80134bc:	4b45      	ldr	r3, [pc, #276]	@ (80135d4 <plug_holes+0x120>)
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d206      	bcs.n	80134d4 <plug_holes+0x20>
 80134c6:	4b44      	ldr	r3, [pc, #272]	@ (80135d8 <plug_holes+0x124>)
 80134c8:	f240 12df 	movw	r2, #479	@ 0x1df
 80134cc:	4943      	ldr	r1, [pc, #268]	@ (80135dc <plug_holes+0x128>)
 80134ce:	4844      	ldr	r0, [pc, #272]	@ (80135e0 <plug_holes+0x12c>)
 80134d0:	f00c fee4 	bl	802029c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80134d4:	4b43      	ldr	r3, [pc, #268]	@ (80135e4 <plug_holes+0x130>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d306      	bcc.n	80134ec <plug_holes+0x38>
 80134de:	4b3e      	ldr	r3, [pc, #248]	@ (80135d8 <plug_holes+0x124>)
 80134e0:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80134e4:	4940      	ldr	r1, [pc, #256]	@ (80135e8 <plug_holes+0x134>)
 80134e6:	483e      	ldr	r0, [pc, #248]	@ (80135e0 <plug_holes+0x12c>)
 80134e8:	f00c fed8 	bl	802029c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	791b      	ldrb	r3, [r3, #4]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d006      	beq.n	8013502 <plug_holes+0x4e>
 80134f4:	4b38      	ldr	r3, [pc, #224]	@ (80135d8 <plug_holes+0x124>)
 80134f6:	f240 12e1 	movw	r2, #481	@ 0x1e1
 80134fa:	493c      	ldr	r1, [pc, #240]	@ (80135ec <plug_holes+0x138>)
 80134fc:	4838      	ldr	r0, [pc, #224]	@ (80135e0 <plug_holes+0x12c>)
 80134fe:	f00c fecd 	bl	802029c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	881b      	ldrh	r3, [r3, #0]
 8013506:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801350a:	d906      	bls.n	801351a <plug_holes+0x66>
 801350c:	4b32      	ldr	r3, [pc, #200]	@ (80135d8 <plug_holes+0x124>)
 801350e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8013512:	4937      	ldr	r1, [pc, #220]	@ (80135f0 <plug_holes+0x13c>)
 8013514:	4832      	ldr	r0, [pc, #200]	@ (80135e0 <plug_holes+0x12c>)
 8013516:	f00c fec1 	bl	802029c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	881b      	ldrh	r3, [r3, #0]
 801351e:	4618      	mov	r0, r3
 8013520:	f7ff ffa4 	bl	801346c <ptr_to_mem>
 8013524:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013526:	687a      	ldr	r2, [r7, #4]
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	429a      	cmp	r2, r3
 801352c:	d024      	beq.n	8013578 <plug_holes+0xc4>
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	791b      	ldrb	r3, [r3, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d120      	bne.n	8013578 <plug_holes+0xc4>
 8013536:	4b2b      	ldr	r3, [pc, #172]	@ (80135e4 <plug_holes+0x130>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	429a      	cmp	r2, r3
 801353e:	d01b      	beq.n	8013578 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8013540:	4b2c      	ldr	r3, [pc, #176]	@ (80135f4 <plug_holes+0x140>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	68fa      	ldr	r2, [r7, #12]
 8013546:	429a      	cmp	r2, r3
 8013548:	d102      	bne.n	8013550 <plug_holes+0x9c>
      lfree = mem;
 801354a:	4a2a      	ldr	r2, [pc, #168]	@ (80135f4 <plug_holes+0x140>)
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	881a      	ldrh	r2, [r3, #0]
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	881b      	ldrh	r3, [r3, #0]
 801355c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013560:	d00a      	beq.n	8013578 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	881b      	ldrh	r3, [r3, #0]
 8013566:	4618      	mov	r0, r3
 8013568:	f7ff ff80 	bl	801346c <ptr_to_mem>
 801356c:	4604      	mov	r4, r0
 801356e:	6878      	ldr	r0, [r7, #4]
 8013570:	f7ff ff8e 	bl	8013490 <mem_to_ptr>
 8013574:	4603      	mov	r3, r0
 8013576:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	885b      	ldrh	r3, [r3, #2]
 801357c:	4618      	mov	r0, r3
 801357e:	f7ff ff75 	bl	801346c <ptr_to_mem>
 8013582:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8013584:	68ba      	ldr	r2, [r7, #8]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	429a      	cmp	r2, r3
 801358a:	d01f      	beq.n	80135cc <plug_holes+0x118>
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	791b      	ldrb	r3, [r3, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d11b      	bne.n	80135cc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8013594:	4b17      	ldr	r3, [pc, #92]	@ (80135f4 <plug_holes+0x140>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	429a      	cmp	r2, r3
 801359c:	d102      	bne.n	80135a4 <plug_holes+0xf0>
      lfree = pmem;
 801359e:	4a15      	ldr	r2, [pc, #84]	@ (80135f4 <plug_holes+0x140>)
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	881a      	ldrh	r2, [r3, #0]
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	881b      	ldrh	r3, [r3, #0]
 80135b0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80135b4:	d00a      	beq.n	80135cc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	881b      	ldrh	r3, [r3, #0]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7ff ff56 	bl	801346c <ptr_to_mem>
 80135c0:	4604      	mov	r4, r0
 80135c2:	68b8      	ldr	r0, [r7, #8]
 80135c4:	f7ff ff64 	bl	8013490 <mem_to_ptr>
 80135c8:	4603      	mov	r3, r0
 80135ca:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80135cc:	bf00      	nop
 80135ce:	3714      	adds	r7, #20
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd90      	pop	{r4, r7, pc}
 80135d4:	2001f0c8 	.word	0x2001f0c8
 80135d8:	08021eb4 	.word	0x08021eb4
 80135dc:	08021ee4 	.word	0x08021ee4
 80135e0:	08021efc 	.word	0x08021efc
 80135e4:	2001f0cc 	.word	0x2001f0cc
 80135e8:	08021f24 	.word	0x08021f24
 80135ec:	08021f40 	.word	0x08021f40
 80135f0:	08021f5c 	.word	0x08021f5c
 80135f4:	2001f0d4 	.word	0x2001f0d4

080135f8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80135fe:	4b1f      	ldr	r3, [pc, #124]	@ (801367c <mem_init+0x84>)
 8013600:	4a1f      	ldr	r2, [pc, #124]	@ (8013680 <mem_init+0x88>)
 8013602:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013604:	4b1d      	ldr	r3, [pc, #116]	@ (801367c <mem_init+0x84>)
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013610:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2200      	movs	r2, #0
 8013616:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	2200      	movs	r2, #0
 801361c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801361e:	f44f 40c8 	mov.w	r0, #25600	@ 0x6400
 8013622:	f7ff ff23 	bl	801346c <ptr_to_mem>
 8013626:	4603      	mov	r3, r0
 8013628:	4a16      	ldr	r2, [pc, #88]	@ (8013684 <mem_init+0x8c>)
 801362a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801362c:	4b15      	ldr	r3, [pc, #84]	@ (8013684 <mem_init+0x8c>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	2201      	movs	r2, #1
 8013632:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013634:	4b13      	ldr	r3, [pc, #76]	@ (8013684 <mem_init+0x8c>)
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 801363c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801363e:	4b11      	ldr	r3, [pc, #68]	@ (8013684 <mem_init+0x8c>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013646:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013648:	4b0c      	ldr	r3, [pc, #48]	@ (801367c <mem_init+0x84>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	4a0e      	ldr	r2, [pc, #56]	@ (8013688 <mem_init+0x90>)
 801364e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 8013650:	4b0e      	ldr	r3, [pc, #56]	@ (801368c <mem_init+0x94>)
 8013652:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013656:	f8a3 20aa 	strh.w	r2, [r3, #170]	@ 0xaa

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 801365a:	480d      	ldr	r0, [pc, #52]	@ (8013690 <mem_init+0x98>)
 801365c:	f00b fb30 	bl	801ecc0 <sys_mutex_new>
 8013660:	4603      	mov	r3, r0
 8013662:	2b00      	cmp	r3, #0
 8013664:	d006      	beq.n	8013674 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013666:	4b0b      	ldr	r3, [pc, #44]	@ (8013694 <mem_init+0x9c>)
 8013668:	f240 221f 	movw	r2, #543	@ 0x21f
 801366c:	490a      	ldr	r1, [pc, #40]	@ (8013698 <mem_init+0xa0>)
 801366e:	480b      	ldr	r0, [pc, #44]	@ (801369c <mem_init+0xa4>)
 8013670:	f00c fe14 	bl	802029c <iprintf>
  }
}
 8013674:	bf00      	nop
 8013676:	3708      	adds	r7, #8
 8013678:	46bd      	mov	sp, r7
 801367a:	bd80      	pop	{r7, pc}
 801367c:	2001f0c8 	.word	0x2001f0c8
 8013680:	20048000 	.word	0x20048000
 8013684:	2001f0cc 	.word	0x2001f0cc
 8013688:	2001f0d4 	.word	0x2001f0d4
 801368c:	200252ac 	.word	0x200252ac
 8013690:	2001f0d0 	.word	0x2001f0d0
 8013694:	08021eb4 	.word	0x08021eb4
 8013698:	08021f88 	.word	0x08021f88
 801369c:	08021efc 	.word	0x08021efc

080136a0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b086      	sub	sp, #24
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f7ff fef1 	bl	8013490 <mem_to_ptr>
 80136ae:	4603      	mov	r3, r0
 80136b0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	881b      	ldrh	r3, [r3, #0]
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7ff fed8 	bl	801346c <ptr_to_mem>
 80136bc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	885b      	ldrh	r3, [r3, #2]
 80136c2:	4618      	mov	r0, r3
 80136c4:	f7ff fed2 	bl	801346c <ptr_to_mem>
 80136c8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80136ca:	687b      	ldr	r3, [r7, #4]
 80136cc:	881b      	ldrh	r3, [r3, #0]
 80136ce:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80136d2:	d818      	bhi.n	8013706 <mem_link_valid+0x66>
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	885b      	ldrh	r3, [r3, #2]
 80136d8:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80136dc:	d813      	bhi.n	8013706 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80136e2:	8afa      	ldrh	r2, [r7, #22]
 80136e4:	429a      	cmp	r2, r3
 80136e6:	d004      	beq.n	80136f2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	881b      	ldrh	r3, [r3, #0]
 80136ec:	8afa      	ldrh	r2, [r7, #22]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d109      	bne.n	8013706 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80136f2:	4b08      	ldr	r3, [pc, #32]	@ (8013714 <mem_link_valid+0x74>)
 80136f4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80136f6:	693a      	ldr	r2, [r7, #16]
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d006      	beq.n	801370a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80136fc:	693b      	ldr	r3, [r7, #16]
 80136fe:	885b      	ldrh	r3, [r3, #2]
 8013700:	8afa      	ldrh	r2, [r7, #22]
 8013702:	429a      	cmp	r2, r3
 8013704:	d001      	beq.n	801370a <mem_link_valid+0x6a>
    return 0;
 8013706:	2300      	movs	r3, #0
 8013708:	e000      	b.n	801370c <mem_link_valid+0x6c>
  }
  return 1;
 801370a:	2301      	movs	r3, #1
}
 801370c:	4618      	mov	r0, r3
 801370e:	3718      	adds	r7, #24
 8013710:	46bd      	mov	sp, r7
 8013712:	bd80      	pop	{r7, pc}
 8013714:	2001f0cc 	.word	0x2001f0cc

08013718 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b088      	sub	sp, #32
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	2b00      	cmp	r3, #0
 8013724:	f000 80a2 	beq.w	801386c <mem_free+0x154>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	f003 0303 	and.w	r3, r3, #3
 801372e:	2b00      	cmp	r3, #0
 8013730:	d015      	beq.n	801375e <mem_free+0x46>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013732:	4b50      	ldr	r3, [pc, #320]	@ (8013874 <mem_free+0x15c>)
 8013734:	f240 2273 	movw	r2, #627	@ 0x273
 8013738:	494f      	ldr	r1, [pc, #316]	@ (8013878 <mem_free+0x160>)
 801373a:	4850      	ldr	r0, [pc, #320]	@ (801387c <mem_free+0x164>)
 801373c:	f00c fdae 	bl	802029c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013740:	f00b fb30 	bl	801eda4 <sys_arch_protect>
 8013744:	60f8      	str	r0, [r7, #12]
 8013746:	4b4e      	ldr	r3, [pc, #312]	@ (8013880 <mem_free+0x168>)
 8013748:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 801374c:	3301      	adds	r3, #1
 801374e:	b29a      	uxth	r2, r3
 8013750:	4b4b      	ldr	r3, [pc, #300]	@ (8013880 <mem_free+0x168>)
 8013752:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013756:	68f8      	ldr	r0, [r7, #12]
 8013758:	f00b fb32 	bl	801edc0 <sys_arch_unprotect>
    return;
 801375c:	e087      	b.n	801386e <mem_free+0x156>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	3b08      	subs	r3, #8
 8013762:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8013764:	4b47      	ldr	r3, [pc, #284]	@ (8013884 <mem_free+0x16c>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	69fa      	ldr	r2, [r7, #28]
 801376a:	429a      	cmp	r2, r3
 801376c:	d306      	bcc.n	801377c <mem_free+0x64>
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f103 020c 	add.w	r2, r3, #12
 8013774:	4b44      	ldr	r3, [pc, #272]	@ (8013888 <mem_free+0x170>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	429a      	cmp	r2, r3
 801377a:	d915      	bls.n	80137a8 <mem_free+0x90>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801377c:	4b3d      	ldr	r3, [pc, #244]	@ (8013874 <mem_free+0x15c>)
 801377e:	f240 227f 	movw	r2, #639	@ 0x27f
 8013782:	4942      	ldr	r1, [pc, #264]	@ (801388c <mem_free+0x174>)
 8013784:	483d      	ldr	r0, [pc, #244]	@ (801387c <mem_free+0x164>)
 8013786:	f00c fd89 	bl	802029c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801378a:	f00b fb0b 	bl	801eda4 <sys_arch_protect>
 801378e:	6138      	str	r0, [r7, #16]
 8013790:	4b3b      	ldr	r3, [pc, #236]	@ (8013880 <mem_free+0x168>)
 8013792:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013796:	3301      	adds	r3, #1
 8013798:	b29a      	uxth	r2, r3
 801379a:	4b39      	ldr	r3, [pc, #228]	@ (8013880 <mem_free+0x168>)
 801379c:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80137a0:	6938      	ldr	r0, [r7, #16]
 80137a2:	f00b fb0d 	bl	801edc0 <sys_arch_unprotect>
    return;
 80137a6:	e062      	b.n	801386e <mem_free+0x156>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80137a8:	4839      	ldr	r0, [pc, #228]	@ (8013890 <mem_free+0x178>)
 80137aa:	f00b fabf 	bl	801ed2c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	791b      	ldrb	r3, [r3, #4]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d118      	bne.n	80137e8 <mem_free+0xd0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80137b6:	4b2f      	ldr	r3, [pc, #188]	@ (8013874 <mem_free+0x15c>)
 80137b8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80137bc:	4935      	ldr	r1, [pc, #212]	@ (8013894 <mem_free+0x17c>)
 80137be:	482f      	ldr	r0, [pc, #188]	@ (801387c <mem_free+0x164>)
 80137c0:	f00c fd6c 	bl	802029c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80137c4:	4832      	ldr	r0, [pc, #200]	@ (8013890 <mem_free+0x178>)
 80137c6:	f00b fac0 	bl	801ed4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80137ca:	f00b faeb 	bl	801eda4 <sys_arch_protect>
 80137ce:	6178      	str	r0, [r7, #20]
 80137d0:	4b2b      	ldr	r3, [pc, #172]	@ (8013880 <mem_free+0x168>)
 80137d2:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 80137d6:	3301      	adds	r3, #1
 80137d8:	b29a      	uxth	r2, r3
 80137da:	4b29      	ldr	r3, [pc, #164]	@ (8013880 <mem_free+0x168>)
 80137dc:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 80137e0:	6978      	ldr	r0, [r7, #20]
 80137e2:	f00b faed 	bl	801edc0 <sys_arch_unprotect>
    return;
 80137e6:	e042      	b.n	801386e <mem_free+0x156>
  }

  if (!mem_link_valid(mem)) {
 80137e8:	69f8      	ldr	r0, [r7, #28]
 80137ea:	f7ff ff59 	bl	80136a0 <mem_link_valid>
 80137ee:	4603      	mov	r3, r0
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d118      	bne.n	8013826 <mem_free+0x10e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80137f4:	4b1f      	ldr	r3, [pc, #124]	@ (8013874 <mem_free+0x15c>)
 80137f6:	f240 2295 	movw	r2, #661	@ 0x295
 80137fa:	4927      	ldr	r1, [pc, #156]	@ (8013898 <mem_free+0x180>)
 80137fc:	481f      	ldr	r0, [pc, #124]	@ (801387c <mem_free+0x164>)
 80137fe:	f00c fd4d 	bl	802029c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013802:	4823      	ldr	r0, [pc, #140]	@ (8013890 <mem_free+0x178>)
 8013804:	f00b faa1 	bl	801ed4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013808:	f00b facc 	bl	801eda4 <sys_arch_protect>
 801380c:	61b8      	str	r0, [r7, #24]
 801380e:	4b1c      	ldr	r3, [pc, #112]	@ (8013880 <mem_free+0x168>)
 8013810:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013814:	3301      	adds	r3, #1
 8013816:	b29a      	uxth	r2, r3
 8013818:	4b19      	ldr	r3, [pc, #100]	@ (8013880 <mem_free+0x168>)
 801381a:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 801381e:	69b8      	ldr	r0, [r7, #24]
 8013820:	f00b face 	bl	801edc0 <sys_arch_unprotect>
    return;
 8013824:	e023      	b.n	801386e <mem_free+0x156>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013826:	69fb      	ldr	r3, [r7, #28]
 8013828:	2200      	movs	r2, #0
 801382a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801382c:	4b1b      	ldr	r3, [pc, #108]	@ (801389c <mem_free+0x184>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	69fa      	ldr	r2, [r7, #28]
 8013832:	429a      	cmp	r2, r3
 8013834:	d202      	bcs.n	801383c <mem_free+0x124>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013836:	4a19      	ldr	r2, [pc, #100]	@ (801389c <mem_free+0x184>)
 8013838:	69fb      	ldr	r3, [r7, #28]
 801383a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 801383c:	4b10      	ldr	r3, [pc, #64]	@ (8013880 <mem_free+0x168>)
 801383e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013842:	4b10      	ldr	r3, [pc, #64]	@ (8013884 <mem_free+0x16c>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	69f9      	ldr	r1, [r7, #28]
 8013848:	1acb      	subs	r3, r1, r3
 801384a:	b299      	uxth	r1, r3
 801384c:	69fb      	ldr	r3, [r7, #28]
 801384e:	881b      	ldrh	r3, [r3, #0]
 8013850:	1acb      	subs	r3, r1, r3
 8013852:	b29b      	uxth	r3, r3
 8013854:	4413      	add	r3, r2
 8013856:	b29a      	uxth	r2, r3
 8013858:	4b09      	ldr	r3, [pc, #36]	@ (8013880 <mem_free+0x168>)
 801385a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801385e:	69f8      	ldr	r0, [r7, #28]
 8013860:	f7ff fe28 	bl	80134b4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013864:	480a      	ldr	r0, [pc, #40]	@ (8013890 <mem_free+0x178>)
 8013866:	f00b fa70 	bl	801ed4a <sys_mutex_unlock>
 801386a:	e000      	b.n	801386e <mem_free+0x156>
    return;
 801386c:	bf00      	nop
}
 801386e:	3720      	adds	r7, #32
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	08021eb4 	.word	0x08021eb4
 8013878:	08021fa4 	.word	0x08021fa4
 801387c:	08021efc 	.word	0x08021efc
 8013880:	200252ac 	.word	0x200252ac
 8013884:	2001f0c8 	.word	0x2001f0c8
 8013888:	2001f0cc 	.word	0x2001f0cc
 801388c:	08021fc8 	.word	0x08021fc8
 8013890:	2001f0d0 	.word	0x2001f0d0
 8013894:	08021fe4 	.word	0x08021fe4
 8013898:	0802200c 	.word	0x0802200c
 801389c:	2001f0d4 	.word	0x2001f0d4

080138a0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b088      	sub	sp, #32
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
 80138a8:	460b      	mov	r3, r1
 80138aa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80138ac:	887b      	ldrh	r3, [r7, #2]
 80138ae:	3303      	adds	r3, #3
 80138b0:	b29b      	uxth	r3, r3
 80138b2:	f023 0303 	bic.w	r3, r3, #3
 80138b6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80138b8:	8bfb      	ldrh	r3, [r7, #30]
 80138ba:	2b0b      	cmp	r3, #11
 80138bc:	d801      	bhi.n	80138c2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80138be:	230c      	movs	r3, #12
 80138c0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80138c2:	8bfb      	ldrh	r3, [r7, #30]
 80138c4:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80138c8:	d803      	bhi.n	80138d2 <mem_trim+0x32>
 80138ca:	8bfa      	ldrh	r2, [r7, #30]
 80138cc:	887b      	ldrh	r3, [r7, #2]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d201      	bcs.n	80138d6 <mem_trim+0x36>
    return NULL;
 80138d2:	2300      	movs	r3, #0
 80138d4:	e0f8      	b.n	8013ac8 <mem_trim+0x228>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80138d6:	4b7e      	ldr	r3, [pc, #504]	@ (8013ad0 <mem_trim+0x230>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d304      	bcc.n	80138ea <mem_trim+0x4a>
 80138e0:	4b7c      	ldr	r3, [pc, #496]	@ (8013ad4 <mem_trim+0x234>)
 80138e2:	681b      	ldr	r3, [r3, #0]
 80138e4:	687a      	ldr	r2, [r7, #4]
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d306      	bcc.n	80138f8 <mem_trim+0x58>
 80138ea:	4b7b      	ldr	r3, [pc, #492]	@ (8013ad8 <mem_trim+0x238>)
 80138ec:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80138f0:	497a      	ldr	r1, [pc, #488]	@ (8013adc <mem_trim+0x23c>)
 80138f2:	487b      	ldr	r0, [pc, #492]	@ (8013ae0 <mem_trim+0x240>)
 80138f4:	f00c fcd2 	bl	802029c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80138f8:	4b75      	ldr	r3, [pc, #468]	@ (8013ad0 <mem_trim+0x230>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	687a      	ldr	r2, [r7, #4]
 80138fe:	429a      	cmp	r2, r3
 8013900:	d304      	bcc.n	801390c <mem_trim+0x6c>
 8013902:	4b74      	ldr	r3, [pc, #464]	@ (8013ad4 <mem_trim+0x234>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	429a      	cmp	r2, r3
 801390a:	d30f      	bcc.n	801392c <mem_trim+0x8c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801390c:	f00b fa4a 	bl	801eda4 <sys_arch_protect>
 8013910:	60b8      	str	r0, [r7, #8]
 8013912:	4b74      	ldr	r3, [pc, #464]	@ (8013ae4 <mem_trim+0x244>)
 8013914:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013918:	3301      	adds	r3, #1
 801391a:	b29a      	uxth	r2, r3
 801391c:	4b71      	ldr	r3, [pc, #452]	@ (8013ae4 <mem_trim+0x244>)
 801391e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013922:	68b8      	ldr	r0, [r7, #8]
 8013924:	f00b fa4c 	bl	801edc0 <sys_arch_unprotect>
    return rmem;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	e0cd      	b.n	8013ac8 <mem_trim+0x228>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	3b08      	subs	r3, #8
 8013930:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8013932:	69b8      	ldr	r0, [r7, #24]
 8013934:	f7ff fdac 	bl	8013490 <mem_to_ptr>
 8013938:	4603      	mov	r3, r0
 801393a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	881a      	ldrh	r2, [r3, #0]
 8013940:	8afb      	ldrh	r3, [r7, #22]
 8013942:	1ad3      	subs	r3, r2, r3
 8013944:	b29b      	uxth	r3, r3
 8013946:	3b08      	subs	r3, #8
 8013948:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801394a:	8bfa      	ldrh	r2, [r7, #30]
 801394c:	8abb      	ldrh	r3, [r7, #20]
 801394e:	429a      	cmp	r2, r3
 8013950:	d906      	bls.n	8013960 <mem_trim+0xc0>
 8013952:	4b61      	ldr	r3, [pc, #388]	@ (8013ad8 <mem_trim+0x238>)
 8013954:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8013958:	4963      	ldr	r1, [pc, #396]	@ (8013ae8 <mem_trim+0x248>)
 801395a:	4861      	ldr	r0, [pc, #388]	@ (8013ae0 <mem_trim+0x240>)
 801395c:	f00c fc9e 	bl	802029c <iprintf>
  if (newsize > size) {
 8013960:	8bfa      	ldrh	r2, [r7, #30]
 8013962:	8abb      	ldrh	r3, [r7, #20]
 8013964:	429a      	cmp	r2, r3
 8013966:	d901      	bls.n	801396c <mem_trim+0xcc>
    /* not supported */
    return NULL;
 8013968:	2300      	movs	r3, #0
 801396a:	e0ad      	b.n	8013ac8 <mem_trim+0x228>
  }
  if (newsize == size) {
 801396c:	8bfa      	ldrh	r2, [r7, #30]
 801396e:	8abb      	ldrh	r3, [r7, #20]
 8013970:	429a      	cmp	r2, r3
 8013972:	d101      	bne.n	8013978 <mem_trim+0xd8>
    /* No change in size, simply return */
    return rmem;
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	e0a7      	b.n	8013ac8 <mem_trim+0x228>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013978:	485c      	ldr	r0, [pc, #368]	@ (8013aec <mem_trim+0x24c>)
 801397a:	f00b f9d7 	bl	801ed2c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801397e:	69bb      	ldr	r3, [r7, #24]
 8013980:	881b      	ldrh	r3, [r3, #0]
 8013982:	4618      	mov	r0, r3
 8013984:	f7ff fd72 	bl	801346c <ptr_to_mem>
 8013988:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801398a:	693b      	ldr	r3, [r7, #16]
 801398c:	791b      	ldrb	r3, [r3, #4]
 801398e:	2b00      	cmp	r3, #0
 8013990:	d14b      	bne.n	8013a2a <mem_trim+0x18a>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013992:	69bb      	ldr	r3, [r7, #24]
 8013994:	881b      	ldrh	r3, [r3, #0]
 8013996:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801399a:	d106      	bne.n	80139aa <mem_trim+0x10a>
 801399c:	4b4e      	ldr	r3, [pc, #312]	@ (8013ad8 <mem_trim+0x238>)
 801399e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80139a2:	4953      	ldr	r1, [pc, #332]	@ (8013af0 <mem_trim+0x250>)
 80139a4:	484e      	ldr	r0, [pc, #312]	@ (8013ae0 <mem_trim+0x240>)
 80139a6:	f00c fc79 	bl	802029c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80139aa:	693b      	ldr	r3, [r7, #16]
 80139ac:	881b      	ldrh	r3, [r3, #0]
 80139ae:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80139b0:	8afa      	ldrh	r2, [r7, #22]
 80139b2:	8bfb      	ldrh	r3, [r7, #30]
 80139b4:	4413      	add	r3, r2
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	3308      	adds	r3, #8
 80139ba:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80139bc:	4b4d      	ldr	r3, [pc, #308]	@ (8013af4 <mem_trim+0x254>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	693a      	ldr	r2, [r7, #16]
 80139c2:	429a      	cmp	r2, r3
 80139c4:	d106      	bne.n	80139d4 <mem_trim+0x134>
      lfree = ptr_to_mem(ptr2);
 80139c6:	89fb      	ldrh	r3, [r7, #14]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7ff fd4f 	bl	801346c <ptr_to_mem>
 80139ce:	4603      	mov	r3, r0
 80139d0:	4a48      	ldr	r2, [pc, #288]	@ (8013af4 <mem_trim+0x254>)
 80139d2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80139d4:	89fb      	ldrh	r3, [r7, #14]
 80139d6:	4618      	mov	r0, r3
 80139d8:	f7ff fd48 	bl	801346c <ptr_to_mem>
 80139dc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	2200      	movs	r2, #0
 80139e2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80139e4:	693b      	ldr	r3, [r7, #16]
 80139e6:	89ba      	ldrh	r2, [r7, #12]
 80139e8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	8afa      	ldrh	r2, [r7, #22]
 80139ee:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80139f0:	69bb      	ldr	r3, [r7, #24]
 80139f2:	89fa      	ldrh	r2, [r7, #14]
 80139f4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80139f6:	693b      	ldr	r3, [r7, #16]
 80139f8:	881b      	ldrh	r3, [r3, #0]
 80139fa:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80139fe:	d007      	beq.n	8013a10 <mem_trim+0x170>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013a00:	693b      	ldr	r3, [r7, #16]
 8013a02:	881b      	ldrh	r3, [r3, #0]
 8013a04:	4618      	mov	r0, r3
 8013a06:	f7ff fd31 	bl	801346c <ptr_to_mem>
 8013a0a:	4602      	mov	r2, r0
 8013a0c:	89fb      	ldrh	r3, [r7, #14]
 8013a0e:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013a10:	4b34      	ldr	r3, [pc, #208]	@ (8013ae4 <mem_trim+0x244>)
 8013a12:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013a16:	8bf9      	ldrh	r1, [r7, #30]
 8013a18:	8abb      	ldrh	r3, [r7, #20]
 8013a1a:	1acb      	subs	r3, r1, r3
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	4413      	add	r3, r2
 8013a20:	b29a      	uxth	r2, r3
 8013a22:	4b30      	ldr	r3, [pc, #192]	@ (8013ae4 <mem_trim+0x244>)
 8013a24:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013a28:	e04a      	b.n	8013ac0 <mem_trim+0x220>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013a2a:	8bfb      	ldrh	r3, [r7, #30]
 8013a2c:	f103 0214 	add.w	r2, r3, #20
 8013a30:	8abb      	ldrh	r3, [r7, #20]
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d844      	bhi.n	8013ac0 <mem_trim+0x220>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013a36:	8afa      	ldrh	r2, [r7, #22]
 8013a38:	8bfb      	ldrh	r3, [r7, #30]
 8013a3a:	4413      	add	r3, r2
 8013a3c:	b29b      	uxth	r3, r3
 8013a3e:	3308      	adds	r3, #8
 8013a40:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013a42:	69bb      	ldr	r3, [r7, #24]
 8013a44:	881b      	ldrh	r3, [r3, #0]
 8013a46:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013a4a:	d106      	bne.n	8013a5a <mem_trim+0x1ba>
 8013a4c:	4b22      	ldr	r3, [pc, #136]	@ (8013ad8 <mem_trim+0x238>)
 8013a4e:	f240 3216 	movw	r2, #790	@ 0x316
 8013a52:	4927      	ldr	r1, [pc, #156]	@ (8013af0 <mem_trim+0x250>)
 8013a54:	4822      	ldr	r0, [pc, #136]	@ (8013ae0 <mem_trim+0x240>)
 8013a56:	f00c fc21 	bl	802029c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8013a5a:	89fb      	ldrh	r3, [r7, #14]
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	f7ff fd05 	bl	801346c <ptr_to_mem>
 8013a62:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013a64:	4b23      	ldr	r3, [pc, #140]	@ (8013af4 <mem_trim+0x254>)
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	693a      	ldr	r2, [r7, #16]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d202      	bcs.n	8013a74 <mem_trim+0x1d4>
      lfree = mem2;
 8013a6e:	4a21      	ldr	r2, [pc, #132]	@ (8013af4 <mem_trim+0x254>)
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013a74:	693b      	ldr	r3, [r7, #16]
 8013a76:	2200      	movs	r2, #0
 8013a78:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	881a      	ldrh	r2, [r3, #0]
 8013a7e:	693b      	ldr	r3, [r7, #16]
 8013a80:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013a82:	693b      	ldr	r3, [r7, #16]
 8013a84:	8afa      	ldrh	r2, [r7, #22]
 8013a86:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013a88:	69bb      	ldr	r3, [r7, #24]
 8013a8a:	89fa      	ldrh	r2, [r7, #14]
 8013a8c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	881b      	ldrh	r3, [r3, #0]
 8013a92:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013a96:	d007      	beq.n	8013aa8 <mem_trim+0x208>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	881b      	ldrh	r3, [r3, #0]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7ff fce5 	bl	801346c <ptr_to_mem>
 8013aa2:	4602      	mov	r2, r0
 8013aa4:	89fb      	ldrh	r3, [r7, #14]
 8013aa6:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8013ae4 <mem_trim+0x244>)
 8013aaa:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013aae:	8bf9      	ldrh	r1, [r7, #30]
 8013ab0:	8abb      	ldrh	r3, [r7, #20]
 8013ab2:	1acb      	subs	r3, r1, r3
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	4413      	add	r3, r2
 8013ab8:	b29a      	uxth	r2, r3
 8013aba:	4b0a      	ldr	r3, [pc, #40]	@ (8013ae4 <mem_trim+0x244>)
 8013abc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013ac0:	480a      	ldr	r0, [pc, #40]	@ (8013aec <mem_trim+0x24c>)
 8013ac2:	f00b f942 	bl	801ed4a <sys_mutex_unlock>
  return rmem;
 8013ac6:	687b      	ldr	r3, [r7, #4]
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3720      	adds	r7, #32
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}
 8013ad0:	2001f0c8 	.word	0x2001f0c8
 8013ad4:	2001f0cc 	.word	0x2001f0cc
 8013ad8:	08021eb4 	.word	0x08021eb4
 8013adc:	08022040 	.word	0x08022040
 8013ae0:	08021efc 	.word	0x08021efc
 8013ae4:	200252ac 	.word	0x200252ac
 8013ae8:	08022058 	.word	0x08022058
 8013aec:	2001f0d0 	.word	0x2001f0d0
 8013af0:	08022078 	.word	0x08022078
 8013af4:	2001f0d4 	.word	0x2001f0d4

08013af8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013af8:	b590      	push	{r4, r7, lr}
 8013afa:	b089      	sub	sp, #36	@ 0x24
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	4603      	mov	r3, r0
 8013b00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013b02:	88fb      	ldrh	r3, [r7, #6]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d101      	bne.n	8013b0c <mem_malloc+0x14>
    return NULL;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	e121      	b.n	8013d50 <mem_malloc+0x258>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8013b0c:	88fb      	ldrh	r3, [r7, #6]
 8013b0e:	3303      	adds	r3, #3
 8013b10:	b29b      	uxth	r3, r3
 8013b12:	f023 0303 	bic.w	r3, r3, #3
 8013b16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013b18:	8bbb      	ldrh	r3, [r7, #28]
 8013b1a:	2b0b      	cmp	r3, #11
 8013b1c:	d801      	bhi.n	8013b22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8013b1e:	230c      	movs	r3, #12
 8013b20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013b22:	8bbb      	ldrh	r3, [r7, #28]
 8013b24:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013b28:	d803      	bhi.n	8013b32 <mem_malloc+0x3a>
 8013b2a:	8bba      	ldrh	r2, [r7, #28]
 8013b2c:	88fb      	ldrh	r3, [r7, #6]
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d201      	bcs.n	8013b36 <mem_malloc+0x3e>
    return NULL;
 8013b32:	2300      	movs	r3, #0
 8013b34:	e10c      	b.n	8013d50 <mem_malloc+0x258>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013b36:	4888      	ldr	r0, [pc, #544]	@ (8013d58 <mem_malloc+0x260>)
 8013b38:	f00b f8f8 	bl	801ed2c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013b3c:	4b87      	ldr	r3, [pc, #540]	@ (8013d5c <mem_malloc+0x264>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7ff fca5 	bl	8013490 <mem_to_ptr>
 8013b46:	4603      	mov	r3, r0
 8013b48:	83fb      	strh	r3, [r7, #30]
 8013b4a:	e0ee      	b.n	8013d2a <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013b4c:	8bfb      	ldrh	r3, [r7, #30]
 8013b4e:	4618      	mov	r0, r3
 8013b50:	f7ff fc8c 	bl	801346c <ptr_to_mem>
 8013b54:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	791b      	ldrb	r3, [r3, #4]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	f040 80de 	bne.w	8013d1c <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	881b      	ldrh	r3, [r3, #0]
 8013b64:	461a      	mov	r2, r3
 8013b66:	8bfb      	ldrh	r3, [r7, #30]
 8013b68:	1ad3      	subs	r3, r2, r3
 8013b6a:	f1a3 0208 	sub.w	r2, r3, #8
 8013b6e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013b70:	429a      	cmp	r2, r3
 8013b72:	f0c0 80d3 	bcc.w	8013d1c <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	881b      	ldrh	r3, [r3, #0]
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	8bfb      	ldrh	r3, [r7, #30]
 8013b7e:	1ad3      	subs	r3, r2, r3
 8013b80:	f1a3 0208 	sub.w	r2, r3, #8
 8013b84:	8bbb      	ldrh	r3, [r7, #28]
 8013b86:	3314      	adds	r3, #20
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d34c      	bcc.n	8013c26 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013b8c:	8bfa      	ldrh	r2, [r7, #30]
 8013b8e:	8bbb      	ldrh	r3, [r7, #28]
 8013b90:	4413      	add	r3, r2
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	3308      	adds	r3, #8
 8013b96:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8013b98:	8a7b      	ldrh	r3, [r7, #18]
 8013b9a:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013b9e:	d106      	bne.n	8013bae <mem_malloc+0xb6>
 8013ba0:	4b6f      	ldr	r3, [pc, #444]	@ (8013d60 <mem_malloc+0x268>)
 8013ba2:	f240 3287 	movw	r2, #903	@ 0x387
 8013ba6:	496f      	ldr	r1, [pc, #444]	@ (8013d64 <mem_malloc+0x26c>)
 8013ba8:	486f      	ldr	r0, [pc, #444]	@ (8013d68 <mem_malloc+0x270>)
 8013baa:	f00c fb77 	bl	802029c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013bae:	8a7b      	ldrh	r3, [r7, #18]
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7ff fc5b 	bl	801346c <ptr_to_mem>
 8013bb6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	881a      	ldrh	r2, [r3, #0]
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	8bfa      	ldrh	r2, [r7, #30]
 8013bca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	8a7a      	ldrh	r2, [r7, #18]
 8013bd0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	2201      	movs	r2, #1
 8013bd6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	881b      	ldrh	r3, [r3, #0]
 8013bdc:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013be0:	d007      	beq.n	8013bf2 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	881b      	ldrh	r3, [r3, #0]
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7ff fc40 	bl	801346c <ptr_to_mem>
 8013bec:	4602      	mov	r2, r0
 8013bee:	8a7b      	ldrh	r3, [r7, #18]
 8013bf0:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8013bf2:	4b5e      	ldr	r3, [pc, #376]	@ (8013d6c <mem_malloc+0x274>)
 8013bf4:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013bf8:	8bbb      	ldrh	r3, [r7, #28]
 8013bfa:	4413      	add	r3, r2
 8013bfc:	b29b      	uxth	r3, r3
 8013bfe:	3308      	adds	r3, #8
 8013c00:	b29a      	uxth	r2, r3
 8013c02:	4b5a      	ldr	r3, [pc, #360]	@ (8013d6c <mem_malloc+0x274>)
 8013c04:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013c08:	4b58      	ldr	r3, [pc, #352]	@ (8013d6c <mem_malloc+0x274>)
 8013c0a:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	@ 0xae
 8013c0e:	4b57      	ldr	r3, [pc, #348]	@ (8013d6c <mem_malloc+0x274>)
 8013c10:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013c14:	429a      	cmp	r2, r3
 8013c16:	d227      	bcs.n	8013c68 <mem_malloc+0x170>
 8013c18:	4b54      	ldr	r3, [pc, #336]	@ (8013d6c <mem_malloc+0x274>)
 8013c1a:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013c1e:	4b53      	ldr	r3, [pc, #332]	@ (8013d6c <mem_malloc+0x274>)
 8013c20:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
 8013c24:	e020      	b.n	8013c68 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	2201      	movs	r2, #1
 8013c2a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8013c2c:	4b4f      	ldr	r3, [pc, #316]	@ (8013d6c <mem_malloc+0x274>)
 8013c2e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	881b      	ldrh	r3, [r3, #0]
 8013c36:	4413      	add	r3, r2
 8013c38:	b29c      	uxth	r4, r3
 8013c3a:	6978      	ldr	r0, [r7, #20]
 8013c3c:	f7ff fc28 	bl	8013490 <mem_to_ptr>
 8013c40:	4603      	mov	r3, r0
 8013c42:	1ae3      	subs	r3, r4, r3
 8013c44:	b29a      	uxth	r2, r3
 8013c46:	4b49      	ldr	r3, [pc, #292]	@ (8013d6c <mem_malloc+0x274>)
 8013c48:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013c4c:	4b47      	ldr	r3, [pc, #284]	@ (8013d6c <mem_malloc+0x274>)
 8013c4e:	f8b3 20ae 	ldrh.w	r2, [r3, #174]	@ 0xae
 8013c52:	4b46      	ldr	r3, [pc, #280]	@ (8013d6c <mem_malloc+0x274>)
 8013c54:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d205      	bcs.n	8013c68 <mem_malloc+0x170>
 8013c5c:	4b43      	ldr	r3, [pc, #268]	@ (8013d6c <mem_malloc+0x274>)
 8013c5e:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	@ 0xac
 8013c62:	4b42      	ldr	r3, [pc, #264]	@ (8013d6c <mem_malloc+0x274>)
 8013c64:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013c68:	4b3c      	ldr	r3, [pc, #240]	@ (8013d5c <mem_malloc+0x264>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	697a      	ldr	r2, [r7, #20]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d127      	bne.n	8013cc2 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 8013c72:	4b3a      	ldr	r3, [pc, #232]	@ (8013d5c <mem_malloc+0x264>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013c78:	e005      	b.n	8013c86 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013c7a:	69bb      	ldr	r3, [r7, #24]
 8013c7c:	881b      	ldrh	r3, [r3, #0]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f7ff fbf4 	bl	801346c <ptr_to_mem>
 8013c84:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013c86:	69bb      	ldr	r3, [r7, #24]
 8013c88:	791b      	ldrb	r3, [r3, #4]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d004      	beq.n	8013c98 <mem_malloc+0x1a0>
 8013c8e:	4b38      	ldr	r3, [pc, #224]	@ (8013d70 <mem_malloc+0x278>)
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	69ba      	ldr	r2, [r7, #24]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d1f0      	bne.n	8013c7a <mem_malloc+0x182>
          }
          lfree = cur;
 8013c98:	4a30      	ldr	r2, [pc, #192]	@ (8013d5c <mem_malloc+0x264>)
 8013c9a:	69bb      	ldr	r3, [r7, #24]
 8013c9c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8013d5c <mem_malloc+0x264>)
 8013ca0:	681a      	ldr	r2, [r3, #0]
 8013ca2:	4b33      	ldr	r3, [pc, #204]	@ (8013d70 <mem_malloc+0x278>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	429a      	cmp	r2, r3
 8013ca8:	d00b      	beq.n	8013cc2 <mem_malloc+0x1ca>
 8013caa:	4b2c      	ldr	r3, [pc, #176]	@ (8013d5c <mem_malloc+0x264>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	791b      	ldrb	r3, [r3, #4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d006      	beq.n	8013cc2 <mem_malloc+0x1ca>
 8013cb4:	4b2a      	ldr	r3, [pc, #168]	@ (8013d60 <mem_malloc+0x268>)
 8013cb6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013cba:	492e      	ldr	r1, [pc, #184]	@ (8013d74 <mem_malloc+0x27c>)
 8013cbc:	482a      	ldr	r0, [pc, #168]	@ (8013d68 <mem_malloc+0x270>)
 8013cbe:	f00c faed 	bl	802029c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013cc2:	4825      	ldr	r0, [pc, #148]	@ (8013d58 <mem_malloc+0x260>)
 8013cc4:	f00b f841 	bl	801ed4a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013cc8:	8bba      	ldrh	r2, [r7, #28]
 8013cca:	697b      	ldr	r3, [r7, #20]
 8013ccc:	4413      	add	r3, r2
 8013cce:	3308      	adds	r3, #8
 8013cd0:	4a27      	ldr	r2, [pc, #156]	@ (8013d70 <mem_malloc+0x278>)
 8013cd2:	6812      	ldr	r2, [r2, #0]
 8013cd4:	4293      	cmp	r3, r2
 8013cd6:	d906      	bls.n	8013ce6 <mem_malloc+0x1ee>
 8013cd8:	4b21      	ldr	r3, [pc, #132]	@ (8013d60 <mem_malloc+0x268>)
 8013cda:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013cde:	4926      	ldr	r1, [pc, #152]	@ (8013d78 <mem_malloc+0x280>)
 8013ce0:	4821      	ldr	r0, [pc, #132]	@ (8013d68 <mem_malloc+0x270>)
 8013ce2:	f00c fadb 	bl	802029c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	f003 0303 	and.w	r3, r3, #3
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d006      	beq.n	8013cfe <mem_malloc+0x206>
 8013cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8013d60 <mem_malloc+0x268>)
 8013cf2:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013cf6:	4921      	ldr	r1, [pc, #132]	@ (8013d7c <mem_malloc+0x284>)
 8013cf8:	481b      	ldr	r0, [pc, #108]	@ (8013d68 <mem_malloc+0x270>)
 8013cfa:	f00c facf 	bl	802029c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013cfe:	697b      	ldr	r3, [r7, #20]
 8013d00:	f003 0303 	and.w	r3, r3, #3
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d006      	beq.n	8013d16 <mem_malloc+0x21e>
 8013d08:	4b15      	ldr	r3, [pc, #84]	@ (8013d60 <mem_malloc+0x268>)
 8013d0a:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013d0e:	491c      	ldr	r1, [pc, #112]	@ (8013d80 <mem_malloc+0x288>)
 8013d10:	4815      	ldr	r0, [pc, #84]	@ (8013d68 <mem_malloc+0x270>)
 8013d12:	f00c fac3 	bl	802029c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013d16:	697b      	ldr	r3, [r7, #20]
 8013d18:	3308      	adds	r3, #8
 8013d1a:	e019      	b.n	8013d50 <mem_malloc+0x258>
         ptr = ptr_to_mem(ptr)->next) {
 8013d1c:	8bfb      	ldrh	r3, [r7, #30]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7ff fba4 	bl	801346c <ptr_to_mem>
 8013d24:	4603      	mov	r3, r0
 8013d26:	881b      	ldrh	r3, [r3, #0]
 8013d28:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013d2a:	8bfa      	ldrh	r2, [r7, #30]
 8013d2c:	8bbb      	ldrh	r3, [r7, #28]
 8013d2e:	f5c3 43c8 	rsb	r3, r3, #25600	@ 0x6400
 8013d32:	429a      	cmp	r2, r3
 8013d34:	f4ff af0a 	bcc.w	8013b4c <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8013d38:	4b0c      	ldr	r3, [pc, #48]	@ (8013d6c <mem_malloc+0x274>)
 8013d3a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8013d3e:	3301      	adds	r3, #1
 8013d40:	b29a      	uxth	r2, r3
 8013d42:	4b0a      	ldr	r3, [pc, #40]	@ (8013d6c <mem_malloc+0x274>)
 8013d44:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013d48:	4803      	ldr	r0, [pc, #12]	@ (8013d58 <mem_malloc+0x260>)
 8013d4a:	f00a fffe 	bl	801ed4a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013d4e:	2300      	movs	r3, #0
}
 8013d50:	4618      	mov	r0, r3
 8013d52:	3724      	adds	r7, #36	@ 0x24
 8013d54:	46bd      	mov	sp, r7
 8013d56:	bd90      	pop	{r4, r7, pc}
 8013d58:	2001f0d0 	.word	0x2001f0d0
 8013d5c:	2001f0d4 	.word	0x2001f0d4
 8013d60:	08021eb4 	.word	0x08021eb4
 8013d64:	08022078 	.word	0x08022078
 8013d68:	08021efc 	.word	0x08021efc
 8013d6c:	200252ac 	.word	0x200252ac
 8013d70:	2001f0cc 	.word	0x2001f0cc
 8013d74:	0802208c 	.word	0x0802208c
 8013d78:	080220a8 	.word	0x080220a8
 8013d7c:	080220d8 	.word	0x080220d8
 8013d80:	08022108 	.word	0x08022108

08013d84 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013d84:	b480      	push	{r7}
 8013d86:	b085      	sub	sp, #20
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	68db      	ldr	r3, [r3, #12]
 8013d90:	2200      	movs	r2, #0
 8013d92:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	689b      	ldr	r3, [r3, #8]
 8013d98:	3303      	adds	r3, #3
 8013d9a:	f023 0303 	bic.w	r3, r3, #3
 8013d9e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013da0:	2300      	movs	r3, #0
 8013da2:	60fb      	str	r3, [r7, #12]
 8013da4:	e011      	b.n	8013dca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	68db      	ldr	r3, [r3, #12]
 8013daa:	681a      	ldr	r2, [r3, #0]
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	68db      	ldr	r3, [r3, #12]
 8013db4:	68ba      	ldr	r2, [r7, #8]
 8013db6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	889b      	ldrh	r3, [r3, #4]
 8013dbc:	461a      	mov	r2, r3
 8013dbe:	68bb      	ldr	r3, [r7, #8]
 8013dc0:	4413      	add	r3, r2
 8013dc2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	60fb      	str	r3, [r7, #12]
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	88db      	ldrh	r3, [r3, #6]
 8013dce:	461a      	mov	r2, r3
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	4293      	cmp	r3, r2
 8013dd4:	dbe7      	blt.n	8013da6 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	687a      	ldr	r2, [r7, #4]
 8013ddc:	88d2      	ldrh	r2, [r2, #6]
 8013dde:	805a      	strh	r2, [r3, #2]
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013de0:	bf00      	nop
 8013de2:	3714      	adds	r7, #20
 8013de4:	46bd      	mov	sp, r7
 8013de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dea:	4770      	bx	lr

08013dec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b082      	sub	sp, #8
 8013df0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013df2:	2300      	movs	r3, #0
 8013df4:	80fb      	strh	r3, [r7, #6]
 8013df6:	e014      	b.n	8013e22 <memp_init+0x36>
    memp_init_pool(memp_pools[i]);
 8013df8:	88fb      	ldrh	r3, [r7, #6]
 8013dfa:	4a0e      	ldr	r2, [pc, #56]	@ (8013e34 <memp_init+0x48>)
 8013dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e00:	4618      	mov	r0, r3
 8013e02:	f7ff ffbf 	bl	8013d84 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8013e06:	88fb      	ldrh	r3, [r7, #6]
 8013e08:	4a0a      	ldr	r2, [pc, #40]	@ (8013e34 <memp_init+0x48>)
 8013e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013e0e:	88fb      	ldrh	r3, [r7, #6]
 8013e10:	6812      	ldr	r2, [r2, #0]
 8013e12:	4909      	ldr	r1, [pc, #36]	@ (8013e38 <memp_init+0x4c>)
 8013e14:	332c      	adds	r3, #44	@ 0x2c
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	440b      	add	r3, r1
 8013e1a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013e1c:	88fb      	ldrh	r3, [r7, #6]
 8013e1e:	3301      	adds	r3, #1
 8013e20:	80fb      	strh	r3, [r7, #6]
 8013e22:	88fb      	ldrh	r3, [r7, #6]
 8013e24:	2b0c      	cmp	r3, #12
 8013e26:	d9e7      	bls.n	8013df8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013e28:	bf00      	nop
 8013e2a:	bf00      	nop
 8013e2c:	3708      	adds	r7, #8
 8013e2e:	46bd      	mov	sp, r7
 8013e30:	bd80      	pop	{r7, pc}
 8013e32:	bf00      	nop
 8013e34:	08024e50 	.word	0x08024e50
 8013e38:	200252ac 	.word	0x200252ac

08013e3c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013e44:	f00a ffae 	bl	801eda4 <sys_arch_protect>
 8013e48:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	68db      	ldr	r3, [r3, #12]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d029      	beq.n	8013eac <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	68db      	ldr	r3, [r3, #12]
 8013e5c:	68ba      	ldr	r2, [r7, #8]
 8013e5e:	6812      	ldr	r2, [r2, #0]
 8013e60:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	f003 0303 	and.w	r3, r3, #3
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d006      	beq.n	8013e7a <do_memp_malloc_pool+0x3e>
 8013e6c:	4b16      	ldr	r3, [pc, #88]	@ (8013ec8 <do_memp_malloc_pool+0x8c>)
 8013e6e:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013e72:	4916      	ldr	r1, [pc, #88]	@ (8013ecc <do_memp_malloc_pool+0x90>)
 8013e74:	4816      	ldr	r0, [pc, #88]	@ (8013ed0 <do_memp_malloc_pool+0x94>)
 8013e76:	f00c fa11 	bl	802029c <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	889a      	ldrh	r2, [r3, #4]
 8013e80:	3201      	adds	r2, #1
 8013e82:	b292      	uxth	r2, r2
 8013e84:	809a      	strh	r2, [r3, #4]
    if (desc->stats->used > desc->stats->max) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	889a      	ldrh	r2, [r3, #4]
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	88db      	ldrh	r3, [r3, #6]
 8013e92:	429a      	cmp	r2, r3
 8013e94:	d905      	bls.n	8013ea2 <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681a      	ldr	r2, [r3, #0]
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	8892      	ldrh	r2, [r2, #4]
 8013ea0:	80da      	strh	r2, [r3, #6]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013ea2:	68f8      	ldr	r0, [r7, #12]
 8013ea4:	f00a ff8c 	bl	801edc0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	e009      	b.n	8013ec0 <do_memp_malloc_pool+0x84>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	881a      	ldrh	r2, [r3, #0]
 8013eb2:	3201      	adds	r2, #1
 8013eb4:	b292      	uxth	r2, r2
 8013eb6:	801a      	strh	r2, [r3, #0]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013eb8:	68f8      	ldr	r0, [r7, #12]
 8013eba:	f00a ff81 	bl	801edc0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8013ebe:	2300      	movs	r3, #0
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3710      	adds	r7, #16
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	0802212c 	.word	0x0802212c
 8013ecc:	0802215c 	.word	0x0802215c
 8013ed0:	08022180 	.word	0x08022180

08013ed4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b082      	sub	sp, #8
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d106      	bne.n	8013ef0 <memp_malloc_pool+0x1c>
 8013ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8013f0c <memp_malloc_pool+0x38>)
 8013ee4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013ee8:	4909      	ldr	r1, [pc, #36]	@ (8013f10 <memp_malloc_pool+0x3c>)
 8013eea:	480a      	ldr	r0, [pc, #40]	@ (8013f14 <memp_malloc_pool+0x40>)
 8013eec:	f00c f9d6 	bl	802029c <iprintf>
  if (desc == NULL) {
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d101      	bne.n	8013efa <memp_malloc_pool+0x26>
    return NULL;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	e003      	b.n	8013f02 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013efa:	6878      	ldr	r0, [r7, #4]
 8013efc:	f7ff ff9e 	bl	8013e3c <do_memp_malloc_pool>
 8013f00:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013f02:	4618      	mov	r0, r3
 8013f04:	3708      	adds	r7, #8
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	0802212c 	.word	0x0802212c
 8013f10:	080221a8 	.word	0x080221a8
 8013f14:	08022180 	.word	0x08022180

08013f18 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013f18:	b580      	push	{r7, lr}
 8013f1a:	b084      	sub	sp, #16
 8013f1c:	af00      	add	r7, sp, #0
 8013f1e:	4603      	mov	r3, r0
 8013f20:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013f22:	79fb      	ldrb	r3, [r7, #7]
 8013f24:	2b0c      	cmp	r3, #12
 8013f26:	d908      	bls.n	8013f3a <memp_malloc+0x22>
 8013f28:	4b0a      	ldr	r3, [pc, #40]	@ (8013f54 <memp_malloc+0x3c>)
 8013f2a:	f240 1257 	movw	r2, #343	@ 0x157
 8013f2e:	490a      	ldr	r1, [pc, #40]	@ (8013f58 <memp_malloc+0x40>)
 8013f30:	480a      	ldr	r0, [pc, #40]	@ (8013f5c <memp_malloc+0x44>)
 8013f32:	f00c f9b3 	bl	802029c <iprintf>
 8013f36:	2300      	movs	r3, #0
 8013f38:	e008      	b.n	8013f4c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013f3a:	79fb      	ldrb	r3, [r7, #7]
 8013f3c:	4a08      	ldr	r2, [pc, #32]	@ (8013f60 <memp_malloc+0x48>)
 8013f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7ff ff7a 	bl	8013e3c <do_memp_malloc_pool>
 8013f48:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3710      	adds	r7, #16
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}
 8013f54:	0802212c 	.word	0x0802212c
 8013f58:	080221bc 	.word	0x080221bc
 8013f5c:	08022180 	.word	0x08022180
 8013f60:	08024e50 	.word	0x08024e50

08013f64 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b084      	sub	sp, #16
 8013f68:	af00      	add	r7, sp, #0
 8013f6a:	6078      	str	r0, [r7, #4]
 8013f6c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	f003 0303 	and.w	r3, r3, #3
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d006      	beq.n	8013f86 <do_memp_free_pool+0x22>
 8013f78:	4b10      	ldr	r3, [pc, #64]	@ (8013fbc <do_memp_free_pool+0x58>)
 8013f7a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8013f7e:	4910      	ldr	r1, [pc, #64]	@ (8013fc0 <do_memp_free_pool+0x5c>)
 8013f80:	4810      	ldr	r0, [pc, #64]	@ (8013fc4 <do_memp_free_pool+0x60>)
 8013f82:	f00c f98b 	bl	802029c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013f86:	683b      	ldr	r3, [r7, #0]
 8013f88:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013f8a:	f00a ff0b 	bl	801eda4 <sys_arch_protect>
 8013f8e:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	889a      	ldrh	r2, [r3, #4]
 8013f96:	3a01      	subs	r2, #1
 8013f98:	b292      	uxth	r2, r2
 8013f9a:	809a      	strh	r2, [r3, #4]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	68db      	ldr	r3, [r3, #12]
 8013fa0:	681a      	ldr	r2, [r3, #0]
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	68db      	ldr	r3, [r3, #12]
 8013faa:	68fa      	ldr	r2, [r7, #12]
 8013fac:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013fae:	68b8      	ldr	r0, [r7, #8]
 8013fb0:	f00a ff06 	bl	801edc0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013fb4:	bf00      	nop
 8013fb6:	3710      	adds	r7, #16
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	bd80      	pop	{r7, pc}
 8013fbc:	0802212c 	.word	0x0802212c
 8013fc0:	080221dc 	.word	0x080221dc
 8013fc4:	08022180 	.word	0x08022180

08013fc8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
 8013fd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d106      	bne.n	8013fe6 <memp_free_pool+0x1e>
 8013fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8014004 <memp_free_pool+0x3c>)
 8013fda:	f240 1295 	movw	r2, #405	@ 0x195
 8013fde:	490a      	ldr	r1, [pc, #40]	@ (8014008 <memp_free_pool+0x40>)
 8013fe0:	480a      	ldr	r0, [pc, #40]	@ (801400c <memp_free_pool+0x44>)
 8013fe2:	f00c f95b 	bl	802029c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d007      	beq.n	8013ffc <memp_free_pool+0x34>
 8013fec:	683b      	ldr	r3, [r7, #0]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d004      	beq.n	8013ffc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013ff2:	6839      	ldr	r1, [r7, #0]
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	f7ff ffb5 	bl	8013f64 <do_memp_free_pool>
 8013ffa:	e000      	b.n	8013ffe <memp_free_pool+0x36>
    return;
 8013ffc:	bf00      	nop
}
 8013ffe:	3708      	adds	r7, #8
 8014000:	46bd      	mov	sp, r7
 8014002:	bd80      	pop	{r7, pc}
 8014004:	0802212c 	.word	0x0802212c
 8014008:	080221a8 	.word	0x080221a8
 801400c:	08022180 	.word	0x08022180

08014010 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	4603      	mov	r3, r0
 8014018:	6039      	str	r1, [r7, #0]
 801401a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801401c:	79fb      	ldrb	r3, [r7, #7]
 801401e:	2b0c      	cmp	r3, #12
 8014020:	d907      	bls.n	8014032 <memp_free+0x22>
 8014022:	4b0c      	ldr	r3, [pc, #48]	@ (8014054 <memp_free+0x44>)
 8014024:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8014028:	490b      	ldr	r1, [pc, #44]	@ (8014058 <memp_free+0x48>)
 801402a:	480c      	ldr	r0, [pc, #48]	@ (801405c <memp_free+0x4c>)
 801402c:	f00c f936 	bl	802029c <iprintf>
 8014030:	e00c      	b.n	801404c <memp_free+0x3c>

  if (mem == NULL) {
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d008      	beq.n	801404a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8014038:	79fb      	ldrb	r3, [r7, #7]
 801403a:	4a09      	ldr	r2, [pc, #36]	@ (8014060 <memp_free+0x50>)
 801403c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014040:	6839      	ldr	r1, [r7, #0]
 8014042:	4618      	mov	r0, r3
 8014044:	f7ff ff8e 	bl	8013f64 <do_memp_free_pool>
 8014048:	e000      	b.n	801404c <memp_free+0x3c>
    return;
 801404a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801404c:	3708      	adds	r7, #8
 801404e:	46bd      	mov	sp, r7
 8014050:	bd80      	pop	{r7, pc}
 8014052:	bf00      	nop
 8014054:	0802212c 	.word	0x0802212c
 8014058:	080221fc 	.word	0x080221fc
 801405c:	08022180 	.word	0x08022180
 8014060:	08024e50 	.word	0x08024e50

08014064 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8014064:	b480      	push	{r7}
 8014066:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8014068:	bf00      	nop
 801406a:	46bd      	mov	sp, r7
 801406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014070:	4770      	bx	lr
	...

08014074 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b086      	sub	sp, #24
 8014078:	af00      	add	r7, sp, #0
 801407a:	60f8      	str	r0, [r7, #12]
 801407c:	60b9      	str	r1, [r7, #8]
 801407e:	607a      	str	r2, [r7, #4]
 8014080:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d108      	bne.n	801409a <netif_add+0x26>
 8014088:	4b57      	ldr	r3, [pc, #348]	@ (80141e8 <netif_add+0x174>)
 801408a:	f240 1227 	movw	r2, #295	@ 0x127
 801408e:	4957      	ldr	r1, [pc, #348]	@ (80141ec <netif_add+0x178>)
 8014090:	4857      	ldr	r0, [pc, #348]	@ (80141f0 <netif_add+0x17c>)
 8014092:	f00c f903 	bl	802029c <iprintf>
 8014096:	2300      	movs	r3, #0
 8014098:	e0a2      	b.n	80141e0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801409c:	2b00      	cmp	r3, #0
 801409e:	d108      	bne.n	80140b2 <netif_add+0x3e>
 80140a0:	4b51      	ldr	r3, [pc, #324]	@ (80141e8 <netif_add+0x174>)
 80140a2:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80140a6:	4953      	ldr	r1, [pc, #332]	@ (80141f4 <netif_add+0x180>)
 80140a8:	4851      	ldr	r0, [pc, #324]	@ (80141f0 <netif_add+0x17c>)
 80140aa:	f00c f8f7 	bl	802029c <iprintf>
 80140ae:	2300      	movs	r3, #0
 80140b0:	e096      	b.n	80141e0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d101      	bne.n	80140bc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80140b8:	4b4f      	ldr	r3, [pc, #316]	@ (80141f8 <netif_add+0x184>)
 80140ba:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d101      	bne.n	80140c6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80140c2:	4b4d      	ldr	r3, [pc, #308]	@ (80141f8 <netif_add+0x184>)
 80140c4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d101      	bne.n	80140d0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80140cc:	4b4a      	ldr	r3, [pc, #296]	@ (80141f8 <netif_add+0x184>)
 80140ce:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80140d0:	68fb      	ldr	r3, [r7, #12]
 80140d2:	2200      	movs	r2, #0
 80140d4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	2200      	movs	r2, #0
 80140da:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	2200      	movs	r2, #0
 80140e0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	4a45      	ldr	r2, [pc, #276]	@ (80141fc <netif_add+0x188>)
 80140e6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	2200      	movs	r2, #0
 80140ec:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2200      	movs	r2, #0
 80140f2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	2200      	movs	r2, #0
 80140fa:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	6a3a      	ldr	r2, [r7, #32]
 8014100:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8014102:	4b3f      	ldr	r3, [pc, #252]	@ (8014200 <netif_add+0x18c>)
 8014104:	781a      	ldrb	r2, [r3, #0]
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014110:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	687a      	ldr	r2, [r7, #4]
 8014116:	68b9      	ldr	r1, [r7, #8]
 8014118:	68f8      	ldr	r0, [r7, #12]
 801411a:	f000 f913 	bl	8014344 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801411e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014120:	68f8      	ldr	r0, [r7, #12]
 8014122:	4798      	blx	r3
 8014124:	4603      	mov	r3, r0
 8014126:	2b00      	cmp	r3, #0
 8014128:	d001      	beq.n	801412e <netif_add+0xba>
    return NULL;
 801412a:	2300      	movs	r3, #0
 801412c:	e058      	b.n	80141e0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014134:	2bff      	cmp	r3, #255	@ 0xff
 8014136:	d103      	bne.n	8014140 <netif_add+0xcc>
        netif->num = 0;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	2200      	movs	r2, #0
 801413c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8014140:	2300      	movs	r3, #0
 8014142:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014144:	4b2f      	ldr	r3, [pc, #188]	@ (8014204 <netif_add+0x190>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	617b      	str	r3, [r7, #20]
 801414a:	e02b      	b.n	80141a4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801414c:	697a      	ldr	r2, [r7, #20]
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	429a      	cmp	r2, r3
 8014152:	d106      	bne.n	8014162 <netif_add+0xee>
 8014154:	4b24      	ldr	r3, [pc, #144]	@ (80141e8 <netif_add+0x174>)
 8014156:	f240 128b 	movw	r2, #395	@ 0x18b
 801415a:	492b      	ldr	r1, [pc, #172]	@ (8014208 <netif_add+0x194>)
 801415c:	4824      	ldr	r0, [pc, #144]	@ (80141f0 <netif_add+0x17c>)
 801415e:	f00c f89d 	bl	802029c <iprintf>
        num_netifs++;
 8014162:	693b      	ldr	r3, [r7, #16]
 8014164:	3301      	adds	r3, #1
 8014166:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	2bff      	cmp	r3, #255	@ 0xff
 801416c:	dd06      	ble.n	801417c <netif_add+0x108>
 801416e:	4b1e      	ldr	r3, [pc, #120]	@ (80141e8 <netif_add+0x174>)
 8014170:	f240 128d 	movw	r2, #397	@ 0x18d
 8014174:	4925      	ldr	r1, [pc, #148]	@ (801420c <netif_add+0x198>)
 8014176:	481e      	ldr	r0, [pc, #120]	@ (80141f0 <netif_add+0x17c>)
 8014178:	f00c f890 	bl	802029c <iprintf>
        if (netif2->num == netif->num) {
 801417c:	697b      	ldr	r3, [r7, #20]
 801417e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014188:	429a      	cmp	r2, r3
 801418a:	d108      	bne.n	801419e <netif_add+0x12a>
          netif->num++;
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014192:	3301      	adds	r3, #1
 8014194:	b2da      	uxtb	r2, r3
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 801419c:	e005      	b.n	80141aa <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801419e:	697b      	ldr	r3, [r7, #20]
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	617b      	str	r3, [r7, #20]
 80141a4:	697b      	ldr	r3, [r7, #20]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d1d0      	bne.n	801414c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d1be      	bne.n	801412e <netif_add+0xba>
  }
  if (netif->num == 254) {
 80141b0:	68fb      	ldr	r3, [r7, #12]
 80141b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80141b6:	2bfe      	cmp	r3, #254	@ 0xfe
 80141b8:	d103      	bne.n	80141c2 <netif_add+0x14e>
    netif_num = 0;
 80141ba:	4b11      	ldr	r3, [pc, #68]	@ (8014200 <netif_add+0x18c>)
 80141bc:	2200      	movs	r2, #0
 80141be:	701a      	strb	r2, [r3, #0]
 80141c0:	e006      	b.n	80141d0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80141c2:	68fb      	ldr	r3, [r7, #12]
 80141c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80141c8:	3301      	adds	r3, #1
 80141ca:	b2da      	uxtb	r2, r3
 80141cc:	4b0c      	ldr	r3, [pc, #48]	@ (8014200 <netif_add+0x18c>)
 80141ce:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80141d0:	4b0c      	ldr	r3, [pc, #48]	@ (8014204 <netif_add+0x190>)
 80141d2:	681a      	ldr	r2, [r3, #0]
 80141d4:	68fb      	ldr	r3, [r7, #12]
 80141d6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80141d8:	4a0a      	ldr	r2, [pc, #40]	@ (8014204 <netif_add+0x190>)
 80141da:	68fb      	ldr	r3, [r7, #12]
 80141dc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80141de:	68fb      	ldr	r3, [r7, #12]
}
 80141e0:	4618      	mov	r0, r3
 80141e2:	3718      	adds	r7, #24
 80141e4:	46bd      	mov	sp, r7
 80141e6:	bd80      	pop	{r7, pc}
 80141e8:	08022218 	.word	0x08022218
 80141ec:	080222ac 	.word	0x080222ac
 80141f0:	08022268 	.word	0x08022268
 80141f4:	080222c8 	.word	0x080222c8
 80141f8:	08024ec4 	.word	0x08024ec4
 80141fc:	0801461f 	.word	0x0801461f
 8014200:	200252a8 	.word	0x200252a8
 8014204:	200252a0 	.word	0x200252a0
 8014208:	080222ec 	.word	0x080222ec
 801420c:	08022300 	.word	0x08022300

08014210 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801421a:	6839      	ldr	r1, [r7, #0]
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f002 fdc9 	bl	8016db4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8014222:	6839      	ldr	r1, [r7, #0]
 8014224:	6878      	ldr	r0, [r7, #4]
 8014226:	f007 ff61 	bl	801c0ec <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801422a:	bf00      	nop
 801422c:	3708      	adds	r7, #8
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
	...

08014234 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b086      	sub	sp, #24
 8014238:	af00      	add	r7, sp, #0
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d106      	bne.n	8014254 <netif_do_set_ipaddr+0x20>
 8014246:	4b1d      	ldr	r3, [pc, #116]	@ (80142bc <netif_do_set_ipaddr+0x88>)
 8014248:	f240 12cb 	movw	r2, #459	@ 0x1cb
 801424c:	491c      	ldr	r1, [pc, #112]	@ (80142c0 <netif_do_set_ipaddr+0x8c>)
 801424e:	481d      	ldr	r0, [pc, #116]	@ (80142c4 <netif_do_set_ipaddr+0x90>)
 8014250:	f00c f824 	bl	802029c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d106      	bne.n	8014268 <netif_do_set_ipaddr+0x34>
 801425a:	4b18      	ldr	r3, [pc, #96]	@ (80142bc <netif_do_set_ipaddr+0x88>)
 801425c:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8014260:	4917      	ldr	r1, [pc, #92]	@ (80142c0 <netif_do_set_ipaddr+0x8c>)
 8014262:	4818      	ldr	r0, [pc, #96]	@ (80142c4 <netif_do_set_ipaddr+0x90>)
 8014264:	f00c f81a 	bl	802029c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	681a      	ldr	r2, [r3, #0]
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	3304      	adds	r3, #4
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	429a      	cmp	r2, r3
 8014274:	d01c      	beq.n	80142b0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	3304      	adds	r3, #4
 8014280:	681a      	ldr	r2, [r3, #0]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014286:	f107 0314 	add.w	r3, r7, #20
 801428a:	4619      	mov	r1, r3
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7ff ffbf 	bl	8014210 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014292:	68bb      	ldr	r3, [r7, #8]
 8014294:	2b00      	cmp	r3, #0
 8014296:	d002      	beq.n	801429e <netif_do_set_ipaddr+0x6a>
 8014298:	68bb      	ldr	r3, [r7, #8]
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	e000      	b.n	80142a0 <netif_do_set_ipaddr+0x6c>
 801429e:	2300      	movs	r3, #0
 80142a0:	68fa      	ldr	r2, [r7, #12]
 80142a2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80142a4:	2101      	movs	r1, #1
 80142a6:	68f8      	ldr	r0, [r7, #12]
 80142a8:	f000 f8d2 	bl	8014450 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80142ac:	2301      	movs	r3, #1
 80142ae:	e000      	b.n	80142b2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80142b0:	2300      	movs	r3, #0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3718      	adds	r7, #24
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	08022218 	.word	0x08022218
 80142c0:	08022330 	.word	0x08022330
 80142c4:	08022268 	.word	0x08022268

080142c8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	60f8      	str	r0, [r7, #12]
 80142d0:	60b9      	str	r1, [r7, #8]
 80142d2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80142d4:	68bb      	ldr	r3, [r7, #8]
 80142d6:	681a      	ldr	r2, [r3, #0]
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	3308      	adds	r3, #8
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	429a      	cmp	r2, r3
 80142e0:	d00a      	beq.n	80142f8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d002      	beq.n	80142ee <netif_do_set_netmask+0x26>
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	e000      	b.n	80142f0 <netif_do_set_netmask+0x28>
 80142ee:	2300      	movs	r3, #0
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80142f4:	2301      	movs	r3, #1
 80142f6:	e000      	b.n	80142fa <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80142f8:	2300      	movs	r3, #0
}
 80142fa:	4618      	mov	r0, r3
 80142fc:	3714      	adds	r7, #20
 80142fe:	46bd      	mov	sp, r7
 8014300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014304:	4770      	bx	lr

08014306 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8014306:	b480      	push	{r7}
 8014308:	b085      	sub	sp, #20
 801430a:	af00      	add	r7, sp, #0
 801430c:	60f8      	str	r0, [r7, #12]
 801430e:	60b9      	str	r1, [r7, #8]
 8014310:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	681a      	ldr	r2, [r3, #0]
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	330c      	adds	r3, #12
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	429a      	cmp	r2, r3
 801431e:	d00a      	beq.n	8014336 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014320:	68bb      	ldr	r3, [r7, #8]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d002      	beq.n	801432c <netif_do_set_gw+0x26>
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	e000      	b.n	801432e <netif_do_set_gw+0x28>
 801432c:	2300      	movs	r3, #0
 801432e:	68fa      	ldr	r2, [r7, #12]
 8014330:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8014332:	2301      	movs	r3, #1
 8014334:	e000      	b.n	8014338 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8014336:	2300      	movs	r3, #0
}
 8014338:	4618      	mov	r0, r3
 801433a:	3714      	adds	r7, #20
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b088      	sub	sp, #32
 8014348:	af00      	add	r7, sp, #0
 801434a:	60f8      	str	r0, [r7, #12]
 801434c:	60b9      	str	r1, [r7, #8]
 801434e:	607a      	str	r2, [r7, #4]
 8014350:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8014352:	2300      	movs	r3, #0
 8014354:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8014356:	2300      	movs	r3, #0
 8014358:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d101      	bne.n	8014364 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8014360:	4b1c      	ldr	r3, [pc, #112]	@ (80143d4 <netif_set_addr+0x90>)
 8014362:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d101      	bne.n	801436e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801436a:	4b1a      	ldr	r3, [pc, #104]	@ (80143d4 <netif_set_addr+0x90>)
 801436c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801436e:	683b      	ldr	r3, [r7, #0]
 8014370:	2b00      	cmp	r3, #0
 8014372:	d101      	bne.n	8014378 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8014374:	4b17      	ldr	r3, [pc, #92]	@ (80143d4 <netif_set_addr+0x90>)
 8014376:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d003      	beq.n	8014386 <netif_set_addr+0x42>
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d101      	bne.n	801438a <netif_set_addr+0x46>
 8014386:	2301      	movs	r3, #1
 8014388:	e000      	b.n	801438c <netif_set_addr+0x48>
 801438a:	2300      	movs	r3, #0
 801438c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d006      	beq.n	80143a2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014394:	f107 0310 	add.w	r3, r7, #16
 8014398:	461a      	mov	r2, r3
 801439a:	68b9      	ldr	r1, [r7, #8]
 801439c:	68f8      	ldr	r0, [r7, #12]
 801439e:	f7ff ff49 	bl	8014234 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80143a2:	69fa      	ldr	r2, [r7, #28]
 80143a4:	6879      	ldr	r1, [r7, #4]
 80143a6:	68f8      	ldr	r0, [r7, #12]
 80143a8:	f7ff ff8e 	bl	80142c8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80143ac:	69ba      	ldr	r2, [r7, #24]
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	68f8      	ldr	r0, [r7, #12]
 80143b2:	f7ff ffa8 	bl	8014306 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d106      	bne.n	80143ca <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80143bc:	f107 0310 	add.w	r3, r7, #16
 80143c0:	461a      	mov	r2, r3
 80143c2:	68b9      	ldr	r1, [r7, #8]
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f7ff ff35 	bl	8014234 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80143ca:	bf00      	nop
 80143cc:	3720      	adds	r7, #32
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}
 80143d2:	bf00      	nop
 80143d4:	08024ec4 	.word	0x08024ec4

080143d8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80143d8:	b480      	push	{r7}
 80143da:	b083      	sub	sp, #12
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80143e0:	4a04      	ldr	r2, [pc, #16]	@ (80143f4 <netif_set_default+0x1c>)
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80143e6:	bf00      	nop
 80143e8:	370c      	adds	r7, #12
 80143ea:	46bd      	mov	sp, r7
 80143ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143f0:	4770      	bx	lr
 80143f2:	bf00      	nop
 80143f4:	200252a4 	.word	0x200252a4

080143f8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b082      	sub	sp, #8
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d107      	bne.n	8014416 <netif_set_up+0x1e>
 8014406:	4b0f      	ldr	r3, [pc, #60]	@ (8014444 <netif_set_up+0x4c>)
 8014408:	f44f 7254 	mov.w	r2, #848	@ 0x350
 801440c:	490e      	ldr	r1, [pc, #56]	@ (8014448 <netif_set_up+0x50>)
 801440e:	480f      	ldr	r0, [pc, #60]	@ (801444c <netif_set_up+0x54>)
 8014410:	f00b ff44 	bl	802029c <iprintf>
 8014414:	e013      	b.n	801443e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801441c:	f003 0301 	and.w	r3, r3, #1
 8014420:	2b00      	cmp	r3, #0
 8014422:	d10c      	bne.n	801443e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801442a:	f043 0301 	orr.w	r3, r3, #1
 801442e:	b2da      	uxtb	r2, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014436:	2103      	movs	r1, #3
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f000 f809 	bl	8014450 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801443e:	3708      	adds	r7, #8
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	08022218 	.word	0x08022218
 8014448:	080223a0 	.word	0x080223a0
 801444c:	08022268 	.word	0x08022268

08014450 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
 8014458:	460b      	mov	r3, r1
 801445a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d106      	bne.n	8014470 <netif_issue_reports+0x20>
 8014462:	4b18      	ldr	r3, [pc, #96]	@ (80144c4 <netif_issue_reports+0x74>)
 8014464:	f240 326d 	movw	r2, #877	@ 0x36d
 8014468:	4917      	ldr	r1, [pc, #92]	@ (80144c8 <netif_issue_reports+0x78>)
 801446a:	4818      	ldr	r0, [pc, #96]	@ (80144cc <netif_issue_reports+0x7c>)
 801446c:	f00b ff16 	bl	802029c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014476:	f003 0304 	and.w	r3, r3, #4
 801447a:	2b00      	cmp	r3, #0
 801447c:	d01e      	beq.n	80144bc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014484:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8014488:	2b00      	cmp	r3, #0
 801448a:	d017      	beq.n	80144bc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801448c:	78fb      	ldrb	r3, [r7, #3]
 801448e:	f003 0301 	and.w	r3, r3, #1
 8014492:	2b00      	cmp	r3, #0
 8014494:	d013      	beq.n	80144be <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	3304      	adds	r3, #4
 801449a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801449c:	2b00      	cmp	r3, #0
 801449e:	d00e      	beq.n	80144be <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144a6:	f003 0308 	and.w	r3, r3, #8
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d007      	beq.n	80144be <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	3304      	adds	r3, #4
 80144b2:	4619      	mov	r1, r3
 80144b4:	6878      	ldr	r0, [r7, #4]
 80144b6:	f008 fdc3 	bl	801d040 <etharp_request>
 80144ba:	e000      	b.n	80144be <netif_issue_reports+0x6e>
    return;
 80144bc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80144be:	3708      	adds	r7, #8
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	08022218 	.word	0x08022218
 80144c8:	080223bc 	.word	0x080223bc
 80144cc:	08022268 	.word	0x08022268

080144d0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d107      	bne.n	80144ee <netif_set_down+0x1e>
 80144de:	4b12      	ldr	r3, [pc, #72]	@ (8014528 <netif_set_down+0x58>)
 80144e0:	f240 329b 	movw	r2, #923	@ 0x39b
 80144e4:	4911      	ldr	r1, [pc, #68]	@ (801452c <netif_set_down+0x5c>)
 80144e6:	4812      	ldr	r0, [pc, #72]	@ (8014530 <netif_set_down+0x60>)
 80144e8:	f00b fed8 	bl	802029c <iprintf>
 80144ec:	e019      	b.n	8014522 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144f4:	f003 0301 	and.w	r3, r3, #1
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d012      	beq.n	8014522 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014502:	f023 0301 	bic.w	r3, r3, #1
 8014506:	b2da      	uxtb	r2, r3
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014514:	f003 0308 	and.w	r3, r3, #8
 8014518:	2b00      	cmp	r3, #0
 801451a:	d002      	beq.n	8014522 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801451c:	6878      	ldr	r0, [r7, #4]
 801451e:	f008 f90d 	bl	801c73c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014522:	3708      	adds	r7, #8
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	08022218 	.word	0x08022218
 801452c:	080223e0 	.word	0x080223e0
 8014530:	08022268 	.word	0x08022268

08014534 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b082      	sub	sp, #8
 8014538:	af00      	add	r7, sp, #0
 801453a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d107      	bne.n	8014552 <netif_set_link_up+0x1e>
 8014542:	4b13      	ldr	r3, [pc, #76]	@ (8014590 <netif_set_link_up+0x5c>)
 8014544:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8014548:	4912      	ldr	r1, [pc, #72]	@ (8014594 <netif_set_link_up+0x60>)
 801454a:	4813      	ldr	r0, [pc, #76]	@ (8014598 <netif_set_link_up+0x64>)
 801454c:	f00b fea6 	bl	802029c <iprintf>
 8014550:	e01b      	b.n	801458a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014558:	f003 0304 	and.w	r3, r3, #4
 801455c:	2b00      	cmp	r3, #0
 801455e:	d114      	bne.n	801458a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014566:	f043 0304 	orr.w	r3, r3, #4
 801456a:	b2da      	uxtb	r2, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8014572:	2103      	movs	r1, #3
 8014574:	6878      	ldr	r0, [r7, #4]
 8014576:	f7ff ff6b 	bl	8014450 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801457a:	687b      	ldr	r3, [r7, #4]
 801457c:	69db      	ldr	r3, [r3, #28]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d003      	beq.n	801458a <netif_set_link_up+0x56>
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	69db      	ldr	r3, [r3, #28]
 8014586:	6878      	ldr	r0, [r7, #4]
 8014588:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801458a:	3708      	adds	r7, #8
 801458c:	46bd      	mov	sp, r7
 801458e:	bd80      	pop	{r7, pc}
 8014590:	08022218 	.word	0x08022218
 8014594:	08022400 	.word	0x08022400
 8014598:	08022268 	.word	0x08022268

0801459c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801459c:	b580      	push	{r7, lr}
 801459e:	b082      	sub	sp, #8
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d107      	bne.n	80145ba <netif_set_link_down+0x1e>
 80145aa:	4b11      	ldr	r3, [pc, #68]	@ (80145f0 <netif_set_link_down+0x54>)
 80145ac:	f240 4206 	movw	r2, #1030	@ 0x406
 80145b0:	4910      	ldr	r1, [pc, #64]	@ (80145f4 <netif_set_link_down+0x58>)
 80145b2:	4811      	ldr	r0, [pc, #68]	@ (80145f8 <netif_set_link_down+0x5c>)
 80145b4:	f00b fe72 	bl	802029c <iprintf>
 80145b8:	e017      	b.n	80145ea <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145c0:	f003 0304 	and.w	r3, r3, #4
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d010      	beq.n	80145ea <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145ce:	f023 0304 	bic.w	r3, r3, #4
 80145d2:	b2da      	uxtb	r2, r3
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	69db      	ldr	r3, [r3, #28]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d003      	beq.n	80145ea <netif_set_link_down+0x4e>
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	69db      	ldr	r3, [r3, #28]
 80145e6:	6878      	ldr	r0, [r7, #4]
 80145e8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80145ea:	3708      	adds	r7, #8
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	08022218 	.word	0x08022218
 80145f4:	08022424 	.word	0x08022424
 80145f8:	08022268 	.word	0x08022268

080145fc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80145fc:	b480      	push	{r7}
 80145fe:	b083      	sub	sp, #12
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2b00      	cmp	r3, #0
 801460a:	d002      	beq.n	8014612 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	683a      	ldr	r2, [r7, #0]
 8014610:	61da      	str	r2, [r3, #28]
  }
}
 8014612:	bf00      	nop
 8014614:	370c      	adds	r7, #12
 8014616:	46bd      	mov	sp, r7
 8014618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461c:	4770      	bx	lr

0801461e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801461e:	b480      	push	{r7}
 8014620:	b085      	sub	sp, #20
 8014622:	af00      	add	r7, sp, #0
 8014624:	60f8      	str	r0, [r7, #12]
 8014626:	60b9      	str	r1, [r7, #8]
 8014628:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801462a:	f06f 030b 	mvn.w	r3, #11
}
 801462e:	4618      	mov	r0, r3
 8014630:	3714      	adds	r7, #20
 8014632:	46bd      	mov	sp, r7
 8014634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014638:	4770      	bx	lr
	...

0801463c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801463c:	b480      	push	{r7}
 801463e:	b085      	sub	sp, #20
 8014640:	af00      	add	r7, sp, #0
 8014642:	4603      	mov	r3, r0
 8014644:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8014646:	79fb      	ldrb	r3, [r7, #7]
 8014648:	2b00      	cmp	r3, #0
 801464a:	d013      	beq.n	8014674 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801464c:	4b0d      	ldr	r3, [pc, #52]	@ (8014684 <netif_get_by_index+0x48>)
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	60fb      	str	r3, [r7, #12]
 8014652:	e00c      	b.n	801466e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801465a:	3301      	adds	r3, #1
 801465c:	b2db      	uxtb	r3, r3
 801465e:	79fa      	ldrb	r2, [r7, #7]
 8014660:	429a      	cmp	r2, r3
 8014662:	d101      	bne.n	8014668 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	e006      	b.n	8014676 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	60fb      	str	r3, [r7, #12]
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d1ef      	bne.n	8014654 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8014674:	2300      	movs	r3, #0
}
 8014676:	4618      	mov	r0, r3
 8014678:	3714      	adds	r7, #20
 801467a:	46bd      	mov	sp, r7
 801467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014680:	4770      	bx	lr
 8014682:	bf00      	nop
 8014684:	200252a0 	.word	0x200252a0

08014688 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b082      	sub	sp, #8
 801468c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801468e:	f00a fb89 	bl	801eda4 <sys_arch_protect>
 8014692:	6038      	str	r0, [r7, #0]
 8014694:	4b0d      	ldr	r3, [pc, #52]	@ (80146cc <pbuf_free_ooseq+0x44>)
 8014696:	2200      	movs	r2, #0
 8014698:	701a      	strb	r2, [r3, #0]
 801469a:	6838      	ldr	r0, [r7, #0]
 801469c:	f00a fb90 	bl	801edc0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80146a0:	4b0b      	ldr	r3, [pc, #44]	@ (80146d0 <pbuf_free_ooseq+0x48>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	607b      	str	r3, [r7, #4]
 80146a6:	e00a      	b.n	80146be <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d003      	beq.n	80146b8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f002 fbbd 	bl	8016e30 <tcp_free_ooseq>
      return;
 80146b6:	e005      	b.n	80146c4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	68db      	ldr	r3, [r3, #12]
 80146bc:	607b      	str	r3, [r7, #4]
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d1f1      	bne.n	80146a8 <pbuf_free_ooseq+0x20>
    }
  }
}
 80146c4:	3708      	adds	r7, #8
 80146c6:	46bd      	mov	sp, r7
 80146c8:	bd80      	pop	{r7, pc}
 80146ca:	bf00      	nop
 80146cc:	200252a9 	.word	0x200252a9
 80146d0:	200253b4 	.word	0x200253b4

080146d4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	b082      	sub	sp, #8
 80146d8:	af00      	add	r7, sp, #0
 80146da:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80146dc:	f7ff ffd4 	bl	8014688 <pbuf_free_ooseq>
}
 80146e0:	bf00      	nop
 80146e2:	3708      	adds	r7, #8
 80146e4:	46bd      	mov	sp, r7
 80146e6:	bd80      	pop	{r7, pc}

080146e8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	b082      	sub	sp, #8
 80146ec:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80146ee:	f00a fb59 	bl	801eda4 <sys_arch_protect>
 80146f2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80146f4:	4b0f      	ldr	r3, [pc, #60]	@ (8014734 <pbuf_pool_is_empty+0x4c>)
 80146f6:	781b      	ldrb	r3, [r3, #0]
 80146f8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80146fa:	4b0e      	ldr	r3, [pc, #56]	@ (8014734 <pbuf_pool_is_empty+0x4c>)
 80146fc:	2201      	movs	r2, #1
 80146fe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f00a fb5d 	bl	801edc0 <sys_arch_unprotect>

  if (!queued) {
 8014706:	78fb      	ldrb	r3, [r7, #3]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d10f      	bne.n	801472c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801470c:	2100      	movs	r1, #0
 801470e:	480a      	ldr	r0, [pc, #40]	@ (8014738 <pbuf_pool_is_empty+0x50>)
 8014710:	f7fe fdc4 	bl	801329c <tcpip_try_callback>
 8014714:	4603      	mov	r3, r0
 8014716:	2b00      	cmp	r3, #0
 8014718:	d008      	beq.n	801472c <pbuf_pool_is_empty+0x44>
 801471a:	f00a fb43 	bl	801eda4 <sys_arch_protect>
 801471e:	6078      	str	r0, [r7, #4]
 8014720:	4b04      	ldr	r3, [pc, #16]	@ (8014734 <pbuf_pool_is_empty+0x4c>)
 8014722:	2200      	movs	r2, #0
 8014724:	701a      	strb	r2, [r3, #0]
 8014726:	6878      	ldr	r0, [r7, #4]
 8014728:	f00a fb4a 	bl	801edc0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801472c:	bf00      	nop
 801472e:	3708      	adds	r7, #8
 8014730:	46bd      	mov	sp, r7
 8014732:	bd80      	pop	{r7, pc}
 8014734:	200252a9 	.word	0x200252a9
 8014738:	080146d5 	.word	0x080146d5

0801473c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801473c:	b480      	push	{r7}
 801473e:	b085      	sub	sp, #20
 8014740:	af00      	add	r7, sp, #0
 8014742:	60f8      	str	r0, [r7, #12]
 8014744:	60b9      	str	r1, [r7, #8]
 8014746:	4611      	mov	r1, r2
 8014748:	461a      	mov	r2, r3
 801474a:	460b      	mov	r3, r1
 801474c:	80fb      	strh	r3, [r7, #6]
 801474e:	4613      	mov	r3, r2
 8014750:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8014752:	68fb      	ldr	r3, [r7, #12]
 8014754:	2200      	movs	r2, #0
 8014756:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	68ba      	ldr	r2, [r7, #8]
 801475c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	88fa      	ldrh	r2, [r7, #6]
 8014762:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	88ba      	ldrh	r2, [r7, #4]
 8014768:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801476a:	8b3b      	ldrh	r3, [r7, #24]
 801476c:	b2da      	uxtb	r2, r3
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	7f3a      	ldrb	r2, [r7, #28]
 8014776:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	2201      	movs	r2, #1
 801477c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	2200      	movs	r2, #0
 8014782:	73da      	strb	r2, [r3, #15]
}
 8014784:	bf00      	nop
 8014786:	3714      	adds	r7, #20
 8014788:	46bd      	mov	sp, r7
 801478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478e:	4770      	bx	lr

08014790 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8014790:	b580      	push	{r7, lr}
 8014792:	b08c      	sub	sp, #48	@ 0x30
 8014794:	af02      	add	r7, sp, #8
 8014796:	4603      	mov	r3, r0
 8014798:	71fb      	strb	r3, [r7, #7]
 801479a:	460b      	mov	r3, r1
 801479c:	80bb      	strh	r3, [r7, #4]
 801479e:	4613      	mov	r3, r2
 80147a0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80147a2:	79fb      	ldrb	r3, [r7, #7]
 80147a4:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80147a6:	887b      	ldrh	r3, [r7, #2]
 80147a8:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80147ac:	d07f      	beq.n	80148ae <pbuf_alloc+0x11e>
 80147ae:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80147b2:	f300 80c8 	bgt.w	8014946 <pbuf_alloc+0x1b6>
 80147b6:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80147ba:	d010      	beq.n	80147de <pbuf_alloc+0x4e>
 80147bc:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80147c0:	f300 80c1 	bgt.w	8014946 <pbuf_alloc+0x1b6>
 80147c4:	2b01      	cmp	r3, #1
 80147c6:	d002      	beq.n	80147ce <pbuf_alloc+0x3e>
 80147c8:	2b41      	cmp	r3, #65	@ 0x41
 80147ca:	f040 80bc 	bne.w	8014946 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80147ce:	887a      	ldrh	r2, [r7, #2]
 80147d0:	88bb      	ldrh	r3, [r7, #4]
 80147d2:	4619      	mov	r1, r3
 80147d4:	2000      	movs	r0, #0
 80147d6:	f000 f8d1 	bl	801497c <pbuf_alloc_reference>
 80147da:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80147dc:	e0bd      	b.n	801495a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80147de:	2300      	movs	r3, #0
 80147e0:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80147e2:	2300      	movs	r3, #0
 80147e4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80147e6:	88bb      	ldrh	r3, [r7, #4]
 80147e8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80147ea:	200c      	movs	r0, #12
 80147ec:	f7ff fb94 	bl	8013f18 <memp_malloc>
 80147f0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d109      	bne.n	801480c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80147f8:	f7ff ff76 	bl	80146e8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80147fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d002      	beq.n	8014808 <pbuf_alloc+0x78>
            pbuf_free(p);
 8014802:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014804:	f000 faa8 	bl	8014d58 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014808:	2300      	movs	r3, #0
 801480a:	e0a7      	b.n	801495c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801480c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801480e:	3303      	adds	r3, #3
 8014810:	b29b      	uxth	r3, r3
 8014812:	f023 0303 	bic.w	r3, r3, #3
 8014816:	b29b      	uxth	r3, r3
 8014818:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 801481c:	b29b      	uxth	r3, r3
 801481e:	8b7a      	ldrh	r2, [r7, #26]
 8014820:	4293      	cmp	r3, r2
 8014822:	bf28      	it	cs
 8014824:	4613      	movcs	r3, r2
 8014826:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8014828:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801482a:	3310      	adds	r3, #16
 801482c:	693a      	ldr	r2, [r7, #16]
 801482e:	4413      	add	r3, r2
 8014830:	3303      	adds	r3, #3
 8014832:	f023 0303 	bic.w	r3, r3, #3
 8014836:	4618      	mov	r0, r3
 8014838:	89f9      	ldrh	r1, [r7, #14]
 801483a:	8b7a      	ldrh	r2, [r7, #26]
 801483c:	2300      	movs	r3, #0
 801483e:	9301      	str	r3, [sp, #4]
 8014840:	887b      	ldrh	r3, [r7, #2]
 8014842:	9300      	str	r3, [sp, #0]
 8014844:	460b      	mov	r3, r1
 8014846:	4601      	mov	r1, r0
 8014848:	6938      	ldr	r0, [r7, #16]
 801484a:	f7ff ff77 	bl	801473c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801484e:	693b      	ldr	r3, [r7, #16]
 8014850:	685b      	ldr	r3, [r3, #4]
 8014852:	f003 0303 	and.w	r3, r3, #3
 8014856:	2b00      	cmp	r3, #0
 8014858:	d006      	beq.n	8014868 <pbuf_alloc+0xd8>
 801485a:	4b42      	ldr	r3, [pc, #264]	@ (8014964 <pbuf_alloc+0x1d4>)
 801485c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8014860:	4941      	ldr	r1, [pc, #260]	@ (8014968 <pbuf_alloc+0x1d8>)
 8014862:	4842      	ldr	r0, [pc, #264]	@ (801496c <pbuf_alloc+0x1dc>)
 8014864:	f00b fd1a 	bl	802029c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8014868:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801486a:	3303      	adds	r3, #3
 801486c:	f023 0303 	bic.w	r3, r3, #3
 8014870:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8014874:	d106      	bne.n	8014884 <pbuf_alloc+0xf4>
 8014876:	4b3b      	ldr	r3, [pc, #236]	@ (8014964 <pbuf_alloc+0x1d4>)
 8014878:	f44f 7281 	mov.w	r2, #258	@ 0x102
 801487c:	493c      	ldr	r1, [pc, #240]	@ (8014970 <pbuf_alloc+0x1e0>)
 801487e:	483b      	ldr	r0, [pc, #236]	@ (801496c <pbuf_alloc+0x1dc>)
 8014880:	f00b fd0c 	bl	802029c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014886:	2b00      	cmp	r3, #0
 8014888:	d102      	bne.n	8014890 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	627b      	str	r3, [r7, #36]	@ 0x24
 801488e:	e002      	b.n	8014896 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	693a      	ldr	r2, [r7, #16]
 8014894:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801489a:	8b7a      	ldrh	r2, [r7, #26]
 801489c:	89fb      	ldrh	r3, [r7, #14]
 801489e:	1ad3      	subs	r3, r2, r3
 80148a0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80148a2:	2300      	movs	r3, #0
 80148a4:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80148a6:	8b7b      	ldrh	r3, [r7, #26]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d19e      	bne.n	80147ea <pbuf_alloc+0x5a>
      break;
 80148ac:	e055      	b.n	801495a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80148ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148b0:	3303      	adds	r3, #3
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	f023 0303 	bic.w	r3, r3, #3
 80148b8:	b29a      	uxth	r2, r3
 80148ba:	88bb      	ldrh	r3, [r7, #4]
 80148bc:	3303      	adds	r3, #3
 80148be:	b29b      	uxth	r3, r3
 80148c0:	f023 0303 	bic.w	r3, r3, #3
 80148c4:	b29b      	uxth	r3, r3
 80148c6:	4413      	add	r3, r2
 80148c8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80148ca:	8b3b      	ldrh	r3, [r7, #24]
 80148cc:	3310      	adds	r3, #16
 80148ce:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80148d0:	8b3a      	ldrh	r2, [r7, #24]
 80148d2:	88bb      	ldrh	r3, [r7, #4]
 80148d4:	3303      	adds	r3, #3
 80148d6:	f023 0303 	bic.w	r3, r3, #3
 80148da:	429a      	cmp	r2, r3
 80148dc:	d306      	bcc.n	80148ec <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80148de:	8afa      	ldrh	r2, [r7, #22]
 80148e0:	88bb      	ldrh	r3, [r7, #4]
 80148e2:	3303      	adds	r3, #3
 80148e4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d201      	bcs.n	80148f0 <pbuf_alloc+0x160>
        return NULL;
 80148ec:	2300      	movs	r3, #0
 80148ee:	e035      	b.n	801495c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80148f0:	8afb      	ldrh	r3, [r7, #22]
 80148f2:	4618      	mov	r0, r3
 80148f4:	f7ff f900 	bl	8013af8 <mem_malloc>
 80148f8:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 80148fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d101      	bne.n	8014904 <pbuf_alloc+0x174>
        return NULL;
 8014900:	2300      	movs	r3, #0
 8014902:	e02b      	b.n	801495c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014904:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014906:	3310      	adds	r3, #16
 8014908:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801490a:	4413      	add	r3, r2
 801490c:	3303      	adds	r3, #3
 801490e:	f023 0303 	bic.w	r3, r3, #3
 8014912:	4618      	mov	r0, r3
 8014914:	88b9      	ldrh	r1, [r7, #4]
 8014916:	88ba      	ldrh	r2, [r7, #4]
 8014918:	2300      	movs	r3, #0
 801491a:	9301      	str	r3, [sp, #4]
 801491c:	887b      	ldrh	r3, [r7, #2]
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	460b      	mov	r3, r1
 8014922:	4601      	mov	r1, r0
 8014924:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014926:	f7ff ff09 	bl	801473c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801492c:	685b      	ldr	r3, [r3, #4]
 801492e:	f003 0303 	and.w	r3, r3, #3
 8014932:	2b00      	cmp	r3, #0
 8014934:	d010      	beq.n	8014958 <pbuf_alloc+0x1c8>
 8014936:	4b0b      	ldr	r3, [pc, #44]	@ (8014964 <pbuf_alloc+0x1d4>)
 8014938:	f44f 7291 	mov.w	r2, #290	@ 0x122
 801493c:	490d      	ldr	r1, [pc, #52]	@ (8014974 <pbuf_alloc+0x1e4>)
 801493e:	480b      	ldr	r0, [pc, #44]	@ (801496c <pbuf_alloc+0x1dc>)
 8014940:	f00b fcac 	bl	802029c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8014944:	e008      	b.n	8014958 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8014946:	4b07      	ldr	r3, [pc, #28]	@ (8014964 <pbuf_alloc+0x1d4>)
 8014948:	f240 1227 	movw	r2, #295	@ 0x127
 801494c:	490a      	ldr	r1, [pc, #40]	@ (8014978 <pbuf_alloc+0x1e8>)
 801494e:	4807      	ldr	r0, [pc, #28]	@ (801496c <pbuf_alloc+0x1dc>)
 8014950:	f00b fca4 	bl	802029c <iprintf>
      return NULL;
 8014954:	2300      	movs	r3, #0
 8014956:	e001      	b.n	801495c <pbuf_alloc+0x1cc>
      break;
 8014958:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801495c:	4618      	mov	r0, r3
 801495e:	3728      	adds	r7, #40	@ 0x28
 8014960:	46bd      	mov	sp, r7
 8014962:	bd80      	pop	{r7, pc}
 8014964:	08022448 	.word	0x08022448
 8014968:	08022478 	.word	0x08022478
 801496c:	080224a8 	.word	0x080224a8
 8014970:	080224d0 	.word	0x080224d0
 8014974:	08022504 	.word	0x08022504
 8014978:	08022530 	.word	0x08022530

0801497c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b086      	sub	sp, #24
 8014980:	af02      	add	r7, sp, #8
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	460b      	mov	r3, r1
 8014986:	807b      	strh	r3, [r7, #2]
 8014988:	4613      	mov	r3, r2
 801498a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801498c:	883b      	ldrh	r3, [r7, #0]
 801498e:	2b41      	cmp	r3, #65	@ 0x41
 8014990:	d009      	beq.n	80149a6 <pbuf_alloc_reference+0x2a>
 8014992:	883b      	ldrh	r3, [r7, #0]
 8014994:	2b01      	cmp	r3, #1
 8014996:	d006      	beq.n	80149a6 <pbuf_alloc_reference+0x2a>
 8014998:	4b0f      	ldr	r3, [pc, #60]	@ (80149d8 <pbuf_alloc_reference+0x5c>)
 801499a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 801499e:	490f      	ldr	r1, [pc, #60]	@ (80149dc <pbuf_alloc_reference+0x60>)
 80149a0:	480f      	ldr	r0, [pc, #60]	@ (80149e0 <pbuf_alloc_reference+0x64>)
 80149a2:	f00b fc7b 	bl	802029c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80149a6:	200b      	movs	r0, #11
 80149a8:	f7ff fab6 	bl	8013f18 <memp_malloc>
 80149ac:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d101      	bne.n	80149b8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80149b4:	2300      	movs	r3, #0
 80149b6:	e00b      	b.n	80149d0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80149b8:	8879      	ldrh	r1, [r7, #2]
 80149ba:	887a      	ldrh	r2, [r7, #2]
 80149bc:	2300      	movs	r3, #0
 80149be:	9301      	str	r3, [sp, #4]
 80149c0:	883b      	ldrh	r3, [r7, #0]
 80149c2:	9300      	str	r3, [sp, #0]
 80149c4:	460b      	mov	r3, r1
 80149c6:	6879      	ldr	r1, [r7, #4]
 80149c8:	68f8      	ldr	r0, [r7, #12]
 80149ca:	f7ff feb7 	bl	801473c <pbuf_init_alloced_pbuf>
  return p;
 80149ce:	68fb      	ldr	r3, [r7, #12]
}
 80149d0:	4618      	mov	r0, r3
 80149d2:	3710      	adds	r7, #16
 80149d4:	46bd      	mov	sp, r7
 80149d6:	bd80      	pop	{r7, pc}
 80149d8:	08022448 	.word	0x08022448
 80149dc:	0802254c 	.word	0x0802254c
 80149e0:	080224a8 	.word	0x080224a8

080149e4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b088      	sub	sp, #32
 80149e8:	af02      	add	r7, sp, #8
 80149ea:	607b      	str	r3, [r7, #4]
 80149ec:	4603      	mov	r3, r0
 80149ee:	73fb      	strb	r3, [r7, #15]
 80149f0:	460b      	mov	r3, r1
 80149f2:	81bb      	strh	r3, [r7, #12]
 80149f4:	4613      	mov	r3, r2
 80149f6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80149f8:	7bfb      	ldrb	r3, [r7, #15]
 80149fa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80149fc:	8a7b      	ldrh	r3, [r7, #18]
 80149fe:	3303      	adds	r3, #3
 8014a00:	f023 0203 	bic.w	r2, r3, #3
 8014a04:	89bb      	ldrh	r3, [r7, #12]
 8014a06:	441a      	add	r2, r3
 8014a08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d901      	bls.n	8014a12 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8014a0e:	2300      	movs	r3, #0
 8014a10:	e018      	b.n	8014a44 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8014a12:	6a3b      	ldr	r3, [r7, #32]
 8014a14:	2b00      	cmp	r3, #0
 8014a16:	d007      	beq.n	8014a28 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014a18:	8a7b      	ldrh	r3, [r7, #18]
 8014a1a:	3303      	adds	r3, #3
 8014a1c:	f023 0303 	bic.w	r3, r3, #3
 8014a20:	6a3a      	ldr	r2, [r7, #32]
 8014a22:	4413      	add	r3, r2
 8014a24:	617b      	str	r3, [r7, #20]
 8014a26:	e001      	b.n	8014a2c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	89b9      	ldrh	r1, [r7, #12]
 8014a30:	89ba      	ldrh	r2, [r7, #12]
 8014a32:	2302      	movs	r3, #2
 8014a34:	9301      	str	r3, [sp, #4]
 8014a36:	897b      	ldrh	r3, [r7, #10]
 8014a38:	9300      	str	r3, [sp, #0]
 8014a3a:	460b      	mov	r3, r1
 8014a3c:	6979      	ldr	r1, [r7, #20]
 8014a3e:	f7ff fe7d 	bl	801473c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014a42:	687b      	ldr	r3, [r7, #4]
}
 8014a44:	4618      	mov	r0, r3
 8014a46:	3718      	adds	r7, #24
 8014a48:	46bd      	mov	sp, r7
 8014a4a:	bd80      	pop	{r7, pc}

08014a4c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b084      	sub	sp, #16
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	460b      	mov	r3, r1
 8014a56:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d106      	bne.n	8014a6c <pbuf_realloc+0x20>
 8014a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8014b48 <pbuf_realloc+0xfc>)
 8014a60:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014a64:	4939      	ldr	r1, [pc, #228]	@ (8014b4c <pbuf_realloc+0x100>)
 8014a66:	483a      	ldr	r0, [pc, #232]	@ (8014b50 <pbuf_realloc+0x104>)
 8014a68:	f00b fc18 	bl	802029c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	891b      	ldrh	r3, [r3, #8]
 8014a70:	887a      	ldrh	r2, [r7, #2]
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d263      	bcs.n	8014b3e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	891a      	ldrh	r2, [r3, #8]
 8014a7a:	887b      	ldrh	r3, [r7, #2]
 8014a7c:	1ad3      	subs	r3, r2, r3
 8014a7e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014a80:	887b      	ldrh	r3, [r7, #2]
 8014a82:	817b      	strh	r3, [r7, #10]
  q = p;
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014a88:	e018      	b.n	8014abc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	895b      	ldrh	r3, [r3, #10]
 8014a8e:	897a      	ldrh	r2, [r7, #10]
 8014a90:	1ad3      	subs	r3, r2, r3
 8014a92:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	891a      	ldrh	r2, [r3, #8]
 8014a98:	893b      	ldrh	r3, [r7, #8]
 8014a9a:	1ad3      	subs	r3, r2, r3
 8014a9c:	b29a      	uxth	r2, r3
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	2b00      	cmp	r3, #0
 8014aac:	d106      	bne.n	8014abc <pbuf_realloc+0x70>
 8014aae:	4b26      	ldr	r3, [pc, #152]	@ (8014b48 <pbuf_realloc+0xfc>)
 8014ab0:	f240 12af 	movw	r2, #431	@ 0x1af
 8014ab4:	4927      	ldr	r1, [pc, #156]	@ (8014b54 <pbuf_realloc+0x108>)
 8014ab6:	4826      	ldr	r0, [pc, #152]	@ (8014b50 <pbuf_realloc+0x104>)
 8014ab8:	f00b fbf0 	bl	802029c <iprintf>
  while (rem_len > q->len) {
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	895b      	ldrh	r3, [r3, #10]
 8014ac0:	897a      	ldrh	r2, [r7, #10]
 8014ac2:	429a      	cmp	r2, r3
 8014ac4:	d8e1      	bhi.n	8014a8a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	7b1b      	ldrb	r3, [r3, #12]
 8014aca:	f003 030f 	and.w	r3, r3, #15
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d121      	bne.n	8014b16 <pbuf_realloc+0xca>
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	895b      	ldrh	r3, [r3, #10]
 8014ad6:	897a      	ldrh	r2, [r7, #10]
 8014ad8:	429a      	cmp	r2, r3
 8014ada:	d01c      	beq.n	8014b16 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	7b5b      	ldrb	r3, [r3, #13]
 8014ae0:	f003 0302 	and.w	r3, r3, #2
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d116      	bne.n	8014b16 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	685a      	ldr	r2, [r3, #4]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	1ad3      	subs	r3, r2, r3
 8014af0:	b29a      	uxth	r2, r3
 8014af2:	897b      	ldrh	r3, [r7, #10]
 8014af4:	4413      	add	r3, r2
 8014af6:	b29b      	uxth	r3, r3
 8014af8:	4619      	mov	r1, r3
 8014afa:	68f8      	ldr	r0, [r7, #12]
 8014afc:	f7fe fed0 	bl	80138a0 <mem_trim>
 8014b00:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d106      	bne.n	8014b16 <pbuf_realloc+0xca>
 8014b08:	4b0f      	ldr	r3, [pc, #60]	@ (8014b48 <pbuf_realloc+0xfc>)
 8014b0a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8014b0e:	4912      	ldr	r1, [pc, #72]	@ (8014b58 <pbuf_realloc+0x10c>)
 8014b10:	480f      	ldr	r0, [pc, #60]	@ (8014b50 <pbuf_realloc+0x104>)
 8014b12:	f00b fbc3 	bl	802029c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	897a      	ldrh	r2, [r7, #10]
 8014b1a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014b1c:	68fb      	ldr	r3, [r7, #12]
 8014b1e:	895a      	ldrh	r2, [r3, #10]
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d004      	beq.n	8014b36 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	4618      	mov	r0, r3
 8014b32:	f000 f911 	bl	8014d58 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	2200      	movs	r2, #0
 8014b3a:	601a      	str	r2, [r3, #0]
 8014b3c:	e000      	b.n	8014b40 <pbuf_realloc+0xf4>
    return;
 8014b3e:	bf00      	nop

}
 8014b40:	3710      	adds	r7, #16
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	08022448 	.word	0x08022448
 8014b4c:	08022560 	.word	0x08022560
 8014b50:	080224a8 	.word	0x080224a8
 8014b54:	08022578 	.word	0x08022578
 8014b58:	08022590 	.word	0x08022590

08014b5c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b086      	sub	sp, #24
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	60f8      	str	r0, [r7, #12]
 8014b64:	60b9      	str	r1, [r7, #8]
 8014b66:	4613      	mov	r3, r2
 8014b68:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d106      	bne.n	8014b7e <pbuf_add_header_impl+0x22>
 8014b70:	4b2b      	ldr	r3, [pc, #172]	@ (8014c20 <pbuf_add_header_impl+0xc4>)
 8014b72:	f240 12df 	movw	r2, #479	@ 0x1df
 8014b76:	492b      	ldr	r1, [pc, #172]	@ (8014c24 <pbuf_add_header_impl+0xc8>)
 8014b78:	482b      	ldr	r0, [pc, #172]	@ (8014c28 <pbuf_add_header_impl+0xcc>)
 8014b7a:	f00b fb8f 	bl	802029c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d003      	beq.n	8014b8c <pbuf_add_header_impl+0x30>
 8014b84:	68bb      	ldr	r3, [r7, #8]
 8014b86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014b8a:	d301      	bcc.n	8014b90 <pbuf_add_header_impl+0x34>
    return 1;
 8014b8c:	2301      	movs	r3, #1
 8014b8e:	e043      	b.n	8014c18 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d101      	bne.n	8014b9a <pbuf_add_header_impl+0x3e>
    return 0;
 8014b96:	2300      	movs	r3, #0
 8014b98:	e03e      	b.n	8014c18 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	891a      	ldrh	r2, [r3, #8]
 8014ba2:	8a7b      	ldrh	r3, [r7, #18]
 8014ba4:	4413      	add	r3, r2
 8014ba6:	b29b      	uxth	r3, r3
 8014ba8:	8a7a      	ldrh	r2, [r7, #18]
 8014baa:	429a      	cmp	r2, r3
 8014bac:	d901      	bls.n	8014bb2 <pbuf_add_header_impl+0x56>
    return 1;
 8014bae:	2301      	movs	r3, #1
 8014bb0:	e032      	b.n	8014c18 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	7b1b      	ldrb	r3, [r3, #12]
 8014bb6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014bb8:	8a3b      	ldrh	r3, [r7, #16]
 8014bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d00c      	beq.n	8014bdc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	685a      	ldr	r2, [r3, #4]
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	425b      	negs	r3, r3
 8014bca:	4413      	add	r3, r2
 8014bcc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	3310      	adds	r3, #16
 8014bd2:	697a      	ldr	r2, [r7, #20]
 8014bd4:	429a      	cmp	r2, r3
 8014bd6:	d20d      	bcs.n	8014bf4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014bd8:	2301      	movs	r3, #1
 8014bda:	e01d      	b.n	8014c18 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014bdc:	79fb      	ldrb	r3, [r7, #7]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d006      	beq.n	8014bf0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8014be2:	68fb      	ldr	r3, [r7, #12]
 8014be4:	685a      	ldr	r2, [r3, #4]
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	425b      	negs	r3, r3
 8014bea:	4413      	add	r3, r2
 8014bec:	617b      	str	r3, [r7, #20]
 8014bee:	e001      	b.n	8014bf4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	e011      	b.n	8014c18 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	697a      	ldr	r2, [r7, #20]
 8014bf8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	895a      	ldrh	r2, [r3, #10]
 8014bfe:	8a7b      	ldrh	r3, [r7, #18]
 8014c00:	4413      	add	r3, r2
 8014c02:	b29a      	uxth	r2, r3
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	891a      	ldrh	r2, [r3, #8]
 8014c0c:	8a7b      	ldrh	r3, [r7, #18]
 8014c0e:	4413      	add	r3, r2
 8014c10:	b29a      	uxth	r2, r3
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	811a      	strh	r2, [r3, #8]


  return 0;
 8014c16:	2300      	movs	r3, #0
}
 8014c18:	4618      	mov	r0, r3
 8014c1a:	3718      	adds	r7, #24
 8014c1c:	46bd      	mov	sp, r7
 8014c1e:	bd80      	pop	{r7, pc}
 8014c20:	08022448 	.word	0x08022448
 8014c24:	080225ac 	.word	0x080225ac
 8014c28:	080224a8 	.word	0x080224a8

08014c2c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b082      	sub	sp, #8
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014c36:	2200      	movs	r2, #0
 8014c38:	6839      	ldr	r1, [r7, #0]
 8014c3a:	6878      	ldr	r0, [r7, #4]
 8014c3c:	f7ff ff8e 	bl	8014b5c <pbuf_add_header_impl>
 8014c40:	4603      	mov	r3, r0
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3708      	adds	r7, #8
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}
	...

08014c4c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b084      	sub	sp, #16
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d106      	bne.n	8014c6a <pbuf_remove_header+0x1e>
 8014c5c:	4b20      	ldr	r3, [pc, #128]	@ (8014ce0 <pbuf_remove_header+0x94>)
 8014c5e:	f240 224b 	movw	r2, #587	@ 0x24b
 8014c62:	4920      	ldr	r1, [pc, #128]	@ (8014ce4 <pbuf_remove_header+0x98>)
 8014c64:	4820      	ldr	r0, [pc, #128]	@ (8014ce8 <pbuf_remove_header+0x9c>)
 8014c66:	f00b fb19 	bl	802029c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d003      	beq.n	8014c78 <pbuf_remove_header+0x2c>
 8014c70:	683b      	ldr	r3, [r7, #0]
 8014c72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c76:	d301      	bcc.n	8014c7c <pbuf_remove_header+0x30>
    return 1;
 8014c78:	2301      	movs	r3, #1
 8014c7a:	e02c      	b.n	8014cd6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d101      	bne.n	8014c86 <pbuf_remove_header+0x3a>
    return 0;
 8014c82:	2300      	movs	r3, #0
 8014c84:	e027      	b.n	8014cd6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014c86:	683b      	ldr	r3, [r7, #0]
 8014c88:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	895b      	ldrh	r3, [r3, #10]
 8014c8e:	89fa      	ldrh	r2, [r7, #14]
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d908      	bls.n	8014ca6 <pbuf_remove_header+0x5a>
 8014c94:	4b12      	ldr	r3, [pc, #72]	@ (8014ce0 <pbuf_remove_header+0x94>)
 8014c96:	f240 2255 	movw	r2, #597	@ 0x255
 8014c9a:	4914      	ldr	r1, [pc, #80]	@ (8014cec <pbuf_remove_header+0xa0>)
 8014c9c:	4812      	ldr	r0, [pc, #72]	@ (8014ce8 <pbuf_remove_header+0x9c>)
 8014c9e:	f00b fafd 	bl	802029c <iprintf>
 8014ca2:	2301      	movs	r3, #1
 8014ca4:	e017      	b.n	8014cd6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	685a      	ldr	r2, [r3, #4]
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	441a      	add	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	895a      	ldrh	r2, [r3, #10]
 8014cbc:	89fb      	ldrh	r3, [r7, #14]
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	b29a      	uxth	r2, r3
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	891a      	ldrh	r2, [r3, #8]
 8014cca:	89fb      	ldrh	r3, [r7, #14]
 8014ccc:	1ad3      	subs	r3, r2, r3
 8014cce:	b29a      	uxth	r2, r3
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014cd4:	2300      	movs	r3, #0
}
 8014cd6:	4618      	mov	r0, r3
 8014cd8:	3710      	adds	r7, #16
 8014cda:	46bd      	mov	sp, r7
 8014cdc:	bd80      	pop	{r7, pc}
 8014cde:	bf00      	nop
 8014ce0:	08022448 	.word	0x08022448
 8014ce4:	080225ac 	.word	0x080225ac
 8014ce8:	080224a8 	.word	0x080224a8
 8014cec:	080225b8 	.word	0x080225b8

08014cf0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014cf0:	b580      	push	{r7, lr}
 8014cf2:	b082      	sub	sp, #8
 8014cf4:	af00      	add	r7, sp, #0
 8014cf6:	6078      	str	r0, [r7, #4]
 8014cf8:	460b      	mov	r3, r1
 8014cfa:	807b      	strh	r3, [r7, #2]
 8014cfc:	4613      	mov	r3, r2
 8014cfe:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014d00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	da08      	bge.n	8014d1a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014d08:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014d0c:	425b      	negs	r3, r3
 8014d0e:	4619      	mov	r1, r3
 8014d10:	6878      	ldr	r0, [r7, #4]
 8014d12:	f7ff ff9b 	bl	8014c4c <pbuf_remove_header>
 8014d16:	4603      	mov	r3, r0
 8014d18:	e007      	b.n	8014d2a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014d1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014d1e:	787a      	ldrb	r2, [r7, #1]
 8014d20:	4619      	mov	r1, r3
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7ff ff1a 	bl	8014b5c <pbuf_add_header_impl>
 8014d28:	4603      	mov	r3, r0
  }
}
 8014d2a:	4618      	mov	r0, r3
 8014d2c:	3708      	adds	r7, #8
 8014d2e:	46bd      	mov	sp, r7
 8014d30:	bd80      	pop	{r7, pc}

08014d32 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014d32:	b580      	push	{r7, lr}
 8014d34:	b082      	sub	sp, #8
 8014d36:	af00      	add	r7, sp, #0
 8014d38:	6078      	str	r0, [r7, #4]
 8014d3a:	460b      	mov	r3, r1
 8014d3c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014d3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014d42:	2201      	movs	r2, #1
 8014d44:	4619      	mov	r1, r3
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	f7ff ffd2 	bl	8014cf0 <pbuf_header_impl>
 8014d4c:	4603      	mov	r3, r0
}
 8014d4e:	4618      	mov	r0, r3
 8014d50:	3708      	adds	r7, #8
 8014d52:	46bd      	mov	sp, r7
 8014d54:	bd80      	pop	{r7, pc}
	...

08014d58 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b088      	sub	sp, #32
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d10b      	bne.n	8014d7e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d106      	bne.n	8014d7a <pbuf_free+0x22>
 8014d6c:	4b3b      	ldr	r3, [pc, #236]	@ (8014e5c <pbuf_free+0x104>)
 8014d6e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014d72:	493b      	ldr	r1, [pc, #236]	@ (8014e60 <pbuf_free+0x108>)
 8014d74:	483b      	ldr	r0, [pc, #236]	@ (8014e64 <pbuf_free+0x10c>)
 8014d76:	f00b fa91 	bl	802029c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	e069      	b.n	8014e52 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014d82:	e062      	b.n	8014e4a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014d84:	f00a f80e 	bl	801eda4 <sys_arch_protect>
 8014d88:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	7b9b      	ldrb	r3, [r3, #14]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d106      	bne.n	8014da0 <pbuf_free+0x48>
 8014d92:	4b32      	ldr	r3, [pc, #200]	@ (8014e5c <pbuf_free+0x104>)
 8014d94:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014d98:	4933      	ldr	r1, [pc, #204]	@ (8014e68 <pbuf_free+0x110>)
 8014d9a:	4832      	ldr	r0, [pc, #200]	@ (8014e64 <pbuf_free+0x10c>)
 8014d9c:	f00b fa7e 	bl	802029c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	7b9b      	ldrb	r3, [r3, #14]
 8014da4:	3b01      	subs	r3, #1
 8014da6:	b2da      	uxtb	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	739a      	strb	r2, [r3, #14]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	7b9b      	ldrb	r3, [r3, #14]
 8014db0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014db2:	69b8      	ldr	r0, [r7, #24]
 8014db4:	f00a f804 	bl	801edc0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014db8:	7dfb      	ldrb	r3, [r7, #23]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d143      	bne.n	8014e46 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	7b1b      	ldrb	r3, [r3, #12]
 8014dc8:	f003 030f 	and.w	r3, r3, #15
 8014dcc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	7b5b      	ldrb	r3, [r3, #13]
 8014dd2:	f003 0302 	and.w	r3, r3, #2
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d011      	beq.n	8014dfe <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014dde:	68bb      	ldr	r3, [r7, #8]
 8014de0:	691b      	ldr	r3, [r3, #16]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d106      	bne.n	8014df4 <pbuf_free+0x9c>
 8014de6:	4b1d      	ldr	r3, [pc, #116]	@ (8014e5c <pbuf_free+0x104>)
 8014de8:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014dec:	491f      	ldr	r1, [pc, #124]	@ (8014e6c <pbuf_free+0x114>)
 8014dee:	481d      	ldr	r0, [pc, #116]	@ (8014e64 <pbuf_free+0x10c>)
 8014df0:	f00b fa54 	bl	802029c <iprintf>
        pc->custom_free_function(p);
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	691b      	ldr	r3, [r3, #16]
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	4798      	blx	r3
 8014dfc:	e01d      	b.n	8014e3a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014dfe:	7bfb      	ldrb	r3, [r7, #15]
 8014e00:	2b02      	cmp	r3, #2
 8014e02:	d104      	bne.n	8014e0e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014e04:	6879      	ldr	r1, [r7, #4]
 8014e06:	200c      	movs	r0, #12
 8014e08:	f7ff f902 	bl	8014010 <memp_free>
 8014e0c:	e015      	b.n	8014e3a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014e0e:	7bfb      	ldrb	r3, [r7, #15]
 8014e10:	2b01      	cmp	r3, #1
 8014e12:	d104      	bne.n	8014e1e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014e14:	6879      	ldr	r1, [r7, #4]
 8014e16:	200b      	movs	r0, #11
 8014e18:	f7ff f8fa 	bl	8014010 <memp_free>
 8014e1c:	e00d      	b.n	8014e3a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014e1e:	7bfb      	ldrb	r3, [r7, #15]
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d103      	bne.n	8014e2c <pbuf_free+0xd4>
          mem_free(p);
 8014e24:	6878      	ldr	r0, [r7, #4]
 8014e26:	f7fe fc77 	bl	8013718 <mem_free>
 8014e2a:	e006      	b.n	8014e3a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8014e5c <pbuf_free+0x104>)
 8014e2e:	f240 320f 	movw	r2, #783	@ 0x30f
 8014e32:	490f      	ldr	r1, [pc, #60]	@ (8014e70 <pbuf_free+0x118>)
 8014e34:	480b      	ldr	r0, [pc, #44]	@ (8014e64 <pbuf_free+0x10c>)
 8014e36:	f00b fa31 	bl	802029c <iprintf>
        }
      }
      count++;
 8014e3a:	7ffb      	ldrb	r3, [r7, #31]
 8014e3c:	3301      	adds	r3, #1
 8014e3e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014e40:	693b      	ldr	r3, [r7, #16]
 8014e42:	607b      	str	r3, [r7, #4]
 8014e44:	e001      	b.n	8014e4a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8014e46:	2300      	movs	r3, #0
 8014e48:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d199      	bne.n	8014d84 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014e50:	7ffb      	ldrb	r3, [r7, #31]
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	3720      	adds	r7, #32
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bd80      	pop	{r7, pc}
 8014e5a:	bf00      	nop
 8014e5c:	08022448 	.word	0x08022448
 8014e60:	080225ac 	.word	0x080225ac
 8014e64:	080224a8 	.word	0x080224a8
 8014e68:	080225d8 	.word	0x080225d8
 8014e6c:	080225f0 	.word	0x080225f0
 8014e70:	08022614 	.word	0x08022614

08014e74 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014e74:	b480      	push	{r7}
 8014e76:	b085      	sub	sp, #20
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014e7c:	2300      	movs	r3, #0
 8014e7e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014e80:	e005      	b.n	8014e8e <pbuf_clen+0x1a>
    ++len;
 8014e82:	89fb      	ldrh	r3, [r7, #14]
 8014e84:	3301      	adds	r3, #1
 8014e86:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d1f6      	bne.n	8014e82 <pbuf_clen+0xe>
  }
  return len;
 8014e94:	89fb      	ldrh	r3, [r7, #14]
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3714      	adds	r7, #20
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea0:	4770      	bx	lr
	...

08014ea4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d016      	beq.n	8014ee0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014eb2:	f009 ff77 	bl	801eda4 <sys_arch_protect>
 8014eb6:	60f8      	str	r0, [r7, #12]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	7b9b      	ldrb	r3, [r3, #14]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	b2da      	uxtb	r2, r3
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	739a      	strb	r2, [r3, #14]
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f009 ff7b 	bl	801edc0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	7b9b      	ldrb	r3, [r3, #14]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d106      	bne.n	8014ee0 <pbuf_ref+0x3c>
 8014ed2:	4b05      	ldr	r3, [pc, #20]	@ (8014ee8 <pbuf_ref+0x44>)
 8014ed4:	f240 3242 	movw	r2, #834	@ 0x342
 8014ed8:	4904      	ldr	r1, [pc, #16]	@ (8014eec <pbuf_ref+0x48>)
 8014eda:	4805      	ldr	r0, [pc, #20]	@ (8014ef0 <pbuf_ref+0x4c>)
 8014edc:	f00b f9de 	bl	802029c <iprintf>
  }
}
 8014ee0:	bf00      	nop
 8014ee2:	3710      	adds	r7, #16
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}
 8014ee8:	08022448 	.word	0x08022448
 8014eec:	08022628 	.word	0x08022628
 8014ef0:	080224a8 	.word	0x080224a8

08014ef4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d002      	beq.n	8014f0a <pbuf_cat+0x16>
 8014f04:	683b      	ldr	r3, [r7, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d107      	bne.n	8014f1a <pbuf_cat+0x26>
 8014f0a:	4b20      	ldr	r3, [pc, #128]	@ (8014f8c <pbuf_cat+0x98>)
 8014f0c:	f240 3259 	movw	r2, #857	@ 0x359
 8014f10:	491f      	ldr	r1, [pc, #124]	@ (8014f90 <pbuf_cat+0x9c>)
 8014f12:	4820      	ldr	r0, [pc, #128]	@ (8014f94 <pbuf_cat+0xa0>)
 8014f14:	f00b f9c2 	bl	802029c <iprintf>
 8014f18:	e034      	b.n	8014f84 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	60fb      	str	r3, [r7, #12]
 8014f1e:	e00a      	b.n	8014f36 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	891a      	ldrh	r2, [r3, #8]
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	891b      	ldrh	r3, [r3, #8]
 8014f28:	4413      	add	r3, r2
 8014f2a:	b29a      	uxth	r2, r3
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	60fb      	str	r3, [r7, #12]
 8014f36:	68fb      	ldr	r3, [r7, #12]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d1f0      	bne.n	8014f20 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	891a      	ldrh	r2, [r3, #8]
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	895b      	ldrh	r3, [r3, #10]
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d006      	beq.n	8014f58 <pbuf_cat+0x64>
 8014f4a:	4b10      	ldr	r3, [pc, #64]	@ (8014f8c <pbuf_cat+0x98>)
 8014f4c:	f240 3262 	movw	r2, #866	@ 0x362
 8014f50:	4911      	ldr	r1, [pc, #68]	@ (8014f98 <pbuf_cat+0xa4>)
 8014f52:	4810      	ldr	r0, [pc, #64]	@ (8014f94 <pbuf_cat+0xa0>)
 8014f54:	f00b f9a2 	bl	802029c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d006      	beq.n	8014f6e <pbuf_cat+0x7a>
 8014f60:	4b0a      	ldr	r3, [pc, #40]	@ (8014f8c <pbuf_cat+0x98>)
 8014f62:	f240 3263 	movw	r2, #867	@ 0x363
 8014f66:	490d      	ldr	r1, [pc, #52]	@ (8014f9c <pbuf_cat+0xa8>)
 8014f68:	480a      	ldr	r0, [pc, #40]	@ (8014f94 <pbuf_cat+0xa0>)
 8014f6a:	f00b f997 	bl	802029c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	891a      	ldrh	r2, [r3, #8]
 8014f72:	683b      	ldr	r3, [r7, #0]
 8014f74:	891b      	ldrh	r3, [r3, #8]
 8014f76:	4413      	add	r3, r2
 8014f78:	b29a      	uxth	r2, r3
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	683a      	ldr	r2, [r7, #0]
 8014f82:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014f84:	3710      	adds	r7, #16
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	08022448 	.word	0x08022448
 8014f90:	0802263c 	.word	0x0802263c
 8014f94:	080224a8 	.word	0x080224a8
 8014f98:	08022674 	.word	0x08022674
 8014f9c:	080226a4 	.word	0x080226a4

08014fa0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b082      	sub	sp, #8
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	6078      	str	r0, [r7, #4]
 8014fa8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014faa:	6839      	ldr	r1, [r7, #0]
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f7ff ffa1 	bl	8014ef4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8014fb2:	6838      	ldr	r0, [r7, #0]
 8014fb4:	f7ff ff76 	bl	8014ea4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014fb8:	bf00      	nop
 8014fba:	3708      	adds	r7, #8
 8014fbc:	46bd      	mov	sp, r7
 8014fbe:	bd80      	pop	{r7, pc}

08014fc0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b086      	sub	sp, #24
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
 8014fc8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	617b      	str	r3, [r7, #20]
 8014fce:	2300      	movs	r3, #0
 8014fd0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2b00      	cmp	r3, #0
 8014fd6:	d008      	beq.n	8014fea <pbuf_copy+0x2a>
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d005      	beq.n	8014fea <pbuf_copy+0x2a>
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	891a      	ldrh	r2, [r3, #8]
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	891b      	ldrh	r3, [r3, #8]
 8014fe6:	429a      	cmp	r2, r3
 8014fe8:	d209      	bcs.n	8014ffe <pbuf_copy+0x3e>
 8014fea:	4b57      	ldr	r3, [pc, #348]	@ (8015148 <pbuf_copy+0x188>)
 8014fec:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8014ff0:	4956      	ldr	r1, [pc, #344]	@ (801514c <pbuf_copy+0x18c>)
 8014ff2:	4857      	ldr	r0, [pc, #348]	@ (8015150 <pbuf_copy+0x190>)
 8014ff4:	f00b f952 	bl	802029c <iprintf>
 8014ff8:	f06f 030f 	mvn.w	r3, #15
 8014ffc:	e09f      	b.n	801513e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	895b      	ldrh	r3, [r3, #10]
 8015002:	461a      	mov	r2, r3
 8015004:	697b      	ldr	r3, [r7, #20]
 8015006:	1ad2      	subs	r2, r2, r3
 8015008:	683b      	ldr	r3, [r7, #0]
 801500a:	895b      	ldrh	r3, [r3, #10]
 801500c:	4619      	mov	r1, r3
 801500e:	693b      	ldr	r3, [r7, #16]
 8015010:	1acb      	subs	r3, r1, r3
 8015012:	429a      	cmp	r2, r3
 8015014:	d306      	bcc.n	8015024 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8015016:	683b      	ldr	r3, [r7, #0]
 8015018:	895b      	ldrh	r3, [r3, #10]
 801501a:	461a      	mov	r2, r3
 801501c:	693b      	ldr	r3, [r7, #16]
 801501e:	1ad3      	subs	r3, r2, r3
 8015020:	60fb      	str	r3, [r7, #12]
 8015022:	e005      	b.n	8015030 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	895b      	ldrh	r3, [r3, #10]
 8015028:	461a      	mov	r2, r3
 801502a:	697b      	ldr	r3, [r7, #20]
 801502c:	1ad3      	subs	r3, r2, r3
 801502e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	685a      	ldr	r2, [r3, #4]
 8015034:	697b      	ldr	r3, [r7, #20]
 8015036:	18d0      	adds	r0, r2, r3
 8015038:	683b      	ldr	r3, [r7, #0]
 801503a:	685a      	ldr	r2, [r3, #4]
 801503c:	693b      	ldr	r3, [r7, #16]
 801503e:	4413      	add	r3, r2
 8015040:	68fa      	ldr	r2, [r7, #12]
 8015042:	4619      	mov	r1, r3
 8015044:	f00b fb55 	bl	80206f2 <memcpy>
    offset_to += len;
 8015048:	697a      	ldr	r2, [r7, #20]
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	4413      	add	r3, r2
 801504e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8015050:	693a      	ldr	r2, [r7, #16]
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	4413      	add	r3, r2
 8015056:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	895b      	ldrh	r3, [r3, #10]
 801505c:	461a      	mov	r2, r3
 801505e:	697b      	ldr	r3, [r7, #20]
 8015060:	4293      	cmp	r3, r2
 8015062:	d906      	bls.n	8015072 <pbuf_copy+0xb2>
 8015064:	4b38      	ldr	r3, [pc, #224]	@ (8015148 <pbuf_copy+0x188>)
 8015066:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801506a:	493a      	ldr	r1, [pc, #232]	@ (8015154 <pbuf_copy+0x194>)
 801506c:	4838      	ldr	r0, [pc, #224]	@ (8015150 <pbuf_copy+0x190>)
 801506e:	f00b f915 	bl	802029c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8015072:	683b      	ldr	r3, [r7, #0]
 8015074:	895b      	ldrh	r3, [r3, #10]
 8015076:	461a      	mov	r2, r3
 8015078:	693b      	ldr	r3, [r7, #16]
 801507a:	4293      	cmp	r3, r2
 801507c:	d906      	bls.n	801508c <pbuf_copy+0xcc>
 801507e:	4b32      	ldr	r3, [pc, #200]	@ (8015148 <pbuf_copy+0x188>)
 8015080:	f240 32da 	movw	r2, #986	@ 0x3da
 8015084:	4934      	ldr	r1, [pc, #208]	@ (8015158 <pbuf_copy+0x198>)
 8015086:	4832      	ldr	r0, [pc, #200]	@ (8015150 <pbuf_copy+0x190>)
 8015088:	f00b f908 	bl	802029c <iprintf>
    if (offset_from >= p_from->len) {
 801508c:	683b      	ldr	r3, [r7, #0]
 801508e:	895b      	ldrh	r3, [r3, #10]
 8015090:	461a      	mov	r2, r3
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	4293      	cmp	r3, r2
 8015096:	d304      	bcc.n	80150a2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8015098:	2300      	movs	r3, #0
 801509a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	681b      	ldr	r3, [r3, #0]
 80150a0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	895b      	ldrh	r3, [r3, #10]
 80150a6:	461a      	mov	r2, r3
 80150a8:	697b      	ldr	r3, [r7, #20]
 80150aa:	4293      	cmp	r3, r2
 80150ac:	d114      	bne.n	80150d8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80150ae:	2300      	movs	r3, #0
 80150b0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d10c      	bne.n	80150d8 <pbuf_copy+0x118>
 80150be:	683b      	ldr	r3, [r7, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d009      	beq.n	80150d8 <pbuf_copy+0x118>
 80150c4:	4b20      	ldr	r3, [pc, #128]	@ (8015148 <pbuf_copy+0x188>)
 80150c6:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80150ca:	4924      	ldr	r1, [pc, #144]	@ (801515c <pbuf_copy+0x19c>)
 80150cc:	4820      	ldr	r0, [pc, #128]	@ (8015150 <pbuf_copy+0x190>)
 80150ce:	f00b f8e5 	bl	802029c <iprintf>
 80150d2:	f06f 030f 	mvn.w	r3, #15
 80150d6:	e032      	b.n	801513e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80150d8:	683b      	ldr	r3, [r7, #0]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d013      	beq.n	8015106 <pbuf_copy+0x146>
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	895a      	ldrh	r2, [r3, #10]
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	891b      	ldrh	r3, [r3, #8]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d10d      	bne.n	8015106 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80150ea:	683b      	ldr	r3, [r7, #0]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	d009      	beq.n	8015106 <pbuf_copy+0x146>
 80150f2:	4b15      	ldr	r3, [pc, #84]	@ (8015148 <pbuf_copy+0x188>)
 80150f4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80150f8:	4919      	ldr	r1, [pc, #100]	@ (8015160 <pbuf_copy+0x1a0>)
 80150fa:	4815      	ldr	r0, [pc, #84]	@ (8015150 <pbuf_copy+0x190>)
 80150fc:	f00b f8ce 	bl	802029c <iprintf>
 8015100:	f06f 0305 	mvn.w	r3, #5
 8015104:	e01b      	b.n	801513e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d013      	beq.n	8015134 <pbuf_copy+0x174>
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	895a      	ldrh	r2, [r3, #10]
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	891b      	ldrh	r3, [r3, #8]
 8015114:	429a      	cmp	r2, r3
 8015116:	d10d      	bne.n	8015134 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d009      	beq.n	8015134 <pbuf_copy+0x174>
 8015120:	4b09      	ldr	r3, [pc, #36]	@ (8015148 <pbuf_copy+0x188>)
 8015122:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8015126:	490e      	ldr	r1, [pc, #56]	@ (8015160 <pbuf_copy+0x1a0>)
 8015128:	4809      	ldr	r0, [pc, #36]	@ (8015150 <pbuf_copy+0x190>)
 801512a:	f00b f8b7 	bl	802029c <iprintf>
 801512e:	f06f 0305 	mvn.w	r3, #5
 8015132:	e004      	b.n	801513e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8015134:	683b      	ldr	r3, [r7, #0]
 8015136:	2b00      	cmp	r3, #0
 8015138:	f47f af61 	bne.w	8014ffe <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801513c:	2300      	movs	r3, #0
}
 801513e:	4618      	mov	r0, r3
 8015140:	3718      	adds	r7, #24
 8015142:	46bd      	mov	sp, r7
 8015144:	bd80      	pop	{r7, pc}
 8015146:	bf00      	nop
 8015148:	08022448 	.word	0x08022448
 801514c:	080226f0 	.word	0x080226f0
 8015150:	080224a8 	.word	0x080224a8
 8015154:	08022720 	.word	0x08022720
 8015158:	08022738 	.word	0x08022738
 801515c:	08022754 	.word	0x08022754
 8015160:	08022764 	.word	0x08022764

08015164 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b088      	sub	sp, #32
 8015168:	af00      	add	r7, sp, #0
 801516a:	60f8      	str	r0, [r7, #12]
 801516c:	60b9      	str	r1, [r7, #8]
 801516e:	4611      	mov	r1, r2
 8015170:	461a      	mov	r2, r3
 8015172:	460b      	mov	r3, r1
 8015174:	80fb      	strh	r3, [r7, #6]
 8015176:	4613      	mov	r3, r2
 8015178:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801517a:	2300      	movs	r3, #0
 801517c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801517e:	2300      	movs	r3, #0
 8015180:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d108      	bne.n	801519a <pbuf_copy_partial+0x36>
 8015188:	4b2b      	ldr	r3, [pc, #172]	@ (8015238 <pbuf_copy_partial+0xd4>)
 801518a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801518e:	492b      	ldr	r1, [pc, #172]	@ (801523c <pbuf_copy_partial+0xd8>)
 8015190:	482b      	ldr	r0, [pc, #172]	@ (8015240 <pbuf_copy_partial+0xdc>)
 8015192:	f00b f883 	bl	802029c <iprintf>
 8015196:	2300      	movs	r3, #0
 8015198:	e04a      	b.n	8015230 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	2b00      	cmp	r3, #0
 801519e:	d108      	bne.n	80151b2 <pbuf_copy_partial+0x4e>
 80151a0:	4b25      	ldr	r3, [pc, #148]	@ (8015238 <pbuf_copy_partial+0xd4>)
 80151a2:	f240 420b 	movw	r2, #1035	@ 0x40b
 80151a6:	4927      	ldr	r1, [pc, #156]	@ (8015244 <pbuf_copy_partial+0xe0>)
 80151a8:	4825      	ldr	r0, [pc, #148]	@ (8015240 <pbuf_copy_partial+0xdc>)
 80151aa:	f00b f877 	bl	802029c <iprintf>
 80151ae:	2300      	movs	r3, #0
 80151b0:	e03e      	b.n	8015230 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	61fb      	str	r3, [r7, #28]
 80151b6:	e034      	b.n	8015222 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80151b8:	88bb      	ldrh	r3, [r7, #4]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d00a      	beq.n	80151d4 <pbuf_copy_partial+0x70>
 80151be:	69fb      	ldr	r3, [r7, #28]
 80151c0:	895b      	ldrh	r3, [r3, #10]
 80151c2:	88ba      	ldrh	r2, [r7, #4]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d305      	bcc.n	80151d4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	895b      	ldrh	r3, [r3, #10]
 80151cc:	88ba      	ldrh	r2, [r7, #4]
 80151ce:	1ad3      	subs	r3, r2, r3
 80151d0:	80bb      	strh	r3, [r7, #4]
 80151d2:	e023      	b.n	801521c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80151d4:	69fb      	ldr	r3, [r7, #28]
 80151d6:	895a      	ldrh	r2, [r3, #10]
 80151d8:	88bb      	ldrh	r3, [r7, #4]
 80151da:	1ad3      	subs	r3, r2, r3
 80151dc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80151de:	8b3a      	ldrh	r2, [r7, #24]
 80151e0:	88fb      	ldrh	r3, [r7, #6]
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d901      	bls.n	80151ea <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80151e6:	88fb      	ldrh	r3, [r7, #6]
 80151e8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80151ea:	8b7b      	ldrh	r3, [r7, #26]
 80151ec:	68ba      	ldr	r2, [r7, #8]
 80151ee:	18d0      	adds	r0, r2, r3
 80151f0:	69fb      	ldr	r3, [r7, #28]
 80151f2:	685a      	ldr	r2, [r3, #4]
 80151f4:	88bb      	ldrh	r3, [r7, #4]
 80151f6:	4413      	add	r3, r2
 80151f8:	8b3a      	ldrh	r2, [r7, #24]
 80151fa:	4619      	mov	r1, r3
 80151fc:	f00b fa79 	bl	80206f2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015200:	8afa      	ldrh	r2, [r7, #22]
 8015202:	8b3b      	ldrh	r3, [r7, #24]
 8015204:	4413      	add	r3, r2
 8015206:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8015208:	8b7a      	ldrh	r2, [r7, #26]
 801520a:	8b3b      	ldrh	r3, [r7, #24]
 801520c:	4413      	add	r3, r2
 801520e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015210:	88fa      	ldrh	r2, [r7, #6]
 8015212:	8b3b      	ldrh	r3, [r7, #24]
 8015214:	1ad3      	subs	r3, r2, r3
 8015216:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8015218:	2300      	movs	r3, #0
 801521a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801521c:	69fb      	ldr	r3, [r7, #28]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	61fb      	str	r3, [r7, #28]
 8015222:	88fb      	ldrh	r3, [r7, #6]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d002      	beq.n	801522e <pbuf_copy_partial+0xca>
 8015228:	69fb      	ldr	r3, [r7, #28]
 801522a:	2b00      	cmp	r3, #0
 801522c:	d1c4      	bne.n	80151b8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801522e:	8afb      	ldrh	r3, [r7, #22]
}
 8015230:	4618      	mov	r0, r3
 8015232:	3720      	adds	r7, #32
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}
 8015238:	08022448 	.word	0x08022448
 801523c:	08022790 	.word	0x08022790
 8015240:	080224a8 	.word	0x080224a8
 8015244:	080227b0 	.word	0x080227b0

08015248 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8015248:	b580      	push	{r7, lr}
 801524a:	b084      	sub	sp, #16
 801524c:	af00      	add	r7, sp, #0
 801524e:	4603      	mov	r3, r0
 8015250:	603a      	str	r2, [r7, #0]
 8015252:	71fb      	strb	r3, [r7, #7]
 8015254:	460b      	mov	r3, r1
 8015256:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8015258:	683b      	ldr	r3, [r7, #0]
 801525a:	8919      	ldrh	r1, [r3, #8]
 801525c:	88ba      	ldrh	r2, [r7, #4]
 801525e:	79fb      	ldrb	r3, [r7, #7]
 8015260:	4618      	mov	r0, r3
 8015262:	f7ff fa95 	bl	8014790 <pbuf_alloc>
 8015266:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d101      	bne.n	8015272 <pbuf_clone+0x2a>
    return NULL;
 801526e:	2300      	movs	r3, #0
 8015270:	e011      	b.n	8015296 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8015272:	6839      	ldr	r1, [r7, #0]
 8015274:	68f8      	ldr	r0, [r7, #12]
 8015276:	f7ff fea3 	bl	8014fc0 <pbuf_copy>
 801527a:	4603      	mov	r3, r0
 801527c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801527e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015282:	2b00      	cmp	r3, #0
 8015284:	d006      	beq.n	8015294 <pbuf_clone+0x4c>
 8015286:	4b06      	ldr	r3, [pc, #24]	@ (80152a0 <pbuf_clone+0x58>)
 8015288:	f240 5224 	movw	r2, #1316	@ 0x524
 801528c:	4905      	ldr	r1, [pc, #20]	@ (80152a4 <pbuf_clone+0x5c>)
 801528e:	4806      	ldr	r0, [pc, #24]	@ (80152a8 <pbuf_clone+0x60>)
 8015290:	f00b f804 	bl	802029c <iprintf>
  return q;
 8015294:	68fb      	ldr	r3, [r7, #12]
}
 8015296:	4618      	mov	r0, r3
 8015298:	3710      	adds	r7, #16
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	08022448 	.word	0x08022448
 80152a4:	080228bc 	.word	0x080228bc
 80152a8:	080224a8 	.word	0x080224a8

080152ac <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 80152ac:	b480      	push	{r7}
 80152ae:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 80152b0:	bf00      	nop
 80152b2:	46bd      	mov	sp, r7
 80152b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b8:	4770      	bx	lr
	...

080152bc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80152bc:	b580      	push	{r7, lr}
 80152be:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80152c0:	f00a feec 	bl	802009c <rand>
 80152c4:	4603      	mov	r3, r0
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80152cc:	b29b      	uxth	r3, r3
 80152ce:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80152d2:	b29a      	uxth	r2, r3
 80152d4:	4b01      	ldr	r3, [pc, #4]	@ (80152dc <tcp_init+0x20>)
 80152d6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80152d8:	bf00      	nop
 80152da:	bd80      	pop	{r7, pc}
 80152dc:	20000024 	.word	0x20000024

080152e0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b082      	sub	sp, #8
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	7d1b      	ldrb	r3, [r3, #20]
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d105      	bne.n	80152fc <tcp_free+0x1c>
 80152f0:	4b06      	ldr	r3, [pc, #24]	@ (801530c <tcp_free+0x2c>)
 80152f2:	22d4      	movs	r2, #212	@ 0xd4
 80152f4:	4906      	ldr	r1, [pc, #24]	@ (8015310 <tcp_free+0x30>)
 80152f6:	4807      	ldr	r0, [pc, #28]	@ (8015314 <tcp_free+0x34>)
 80152f8:	f00a ffd0 	bl	802029c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80152fc:	6879      	ldr	r1, [r7, #4]
 80152fe:	2001      	movs	r0, #1
 8015300:	f7fe fe86 	bl	8014010 <memp_free>
}
 8015304:	bf00      	nop
 8015306:	3708      	adds	r7, #8
 8015308:	46bd      	mov	sp, r7
 801530a:	bd80      	pop	{r7, pc}
 801530c:	08022948 	.word	0x08022948
 8015310:	08022978 	.word	0x08022978
 8015314:	0802298c 	.word	0x0802298c

08015318 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af00      	add	r7, sp, #0
 801531e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	7d1b      	ldrb	r3, [r3, #20]
 8015324:	2b01      	cmp	r3, #1
 8015326:	d105      	bne.n	8015334 <tcp_free_listen+0x1c>
 8015328:	4b06      	ldr	r3, [pc, #24]	@ (8015344 <tcp_free_listen+0x2c>)
 801532a:	22df      	movs	r2, #223	@ 0xdf
 801532c:	4906      	ldr	r1, [pc, #24]	@ (8015348 <tcp_free_listen+0x30>)
 801532e:	4807      	ldr	r0, [pc, #28]	@ (801534c <tcp_free_listen+0x34>)
 8015330:	f00a ffb4 	bl	802029c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015334:	6879      	ldr	r1, [r7, #4]
 8015336:	2002      	movs	r0, #2
 8015338:	f7fe fe6a 	bl	8014010 <memp_free>
}
 801533c:	bf00      	nop
 801533e:	3708      	adds	r7, #8
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}
 8015344:	08022948 	.word	0x08022948
 8015348:	080229b4 	.word	0x080229b4
 801534c:	0802298c 	.word	0x0802298c

08015350 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8015354:	f000 ffde 	bl	8016314 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8015358:	4b07      	ldr	r3, [pc, #28]	@ (8015378 <tcp_tmr+0x28>)
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	3301      	adds	r3, #1
 801535e:	b2da      	uxtb	r2, r3
 8015360:	4b05      	ldr	r3, [pc, #20]	@ (8015378 <tcp_tmr+0x28>)
 8015362:	701a      	strb	r2, [r3, #0]
 8015364:	4b04      	ldr	r3, [pc, #16]	@ (8015378 <tcp_tmr+0x28>)
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	f003 0301 	and.w	r3, r3, #1
 801536c:	2b00      	cmp	r3, #0
 801536e:	d001      	beq.n	8015374 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8015370:	f000 fc8e 	bl	8015c90 <tcp_slowtmr>
  }
}
 8015374:	bf00      	nop
 8015376:	bd80      	pop	{r7, pc}
 8015378:	200253bd 	.word	0x200253bd

0801537c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b084      	sub	sp, #16
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8015386:	683b      	ldr	r3, [r7, #0]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d105      	bne.n	8015398 <tcp_remove_listener+0x1c>
 801538c:	4b0d      	ldr	r3, [pc, #52]	@ (80153c4 <tcp_remove_listener+0x48>)
 801538e:	22ff      	movs	r2, #255	@ 0xff
 8015390:	490d      	ldr	r1, [pc, #52]	@ (80153c8 <tcp_remove_listener+0x4c>)
 8015392:	480e      	ldr	r0, [pc, #56]	@ (80153cc <tcp_remove_listener+0x50>)
 8015394:	f00a ff82 	bl	802029c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	60fb      	str	r3, [r7, #12]
 801539c:	e00a      	b.n	80153b4 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80153a2:	683a      	ldr	r2, [r7, #0]
 80153a4:	429a      	cmp	r2, r3
 80153a6:	d102      	bne.n	80153ae <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80153a8:	68fb      	ldr	r3, [r7, #12]
 80153aa:	2200      	movs	r2, #0
 80153ac:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	68db      	ldr	r3, [r3, #12]
 80153b2:	60fb      	str	r3, [r7, #12]
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	d1f1      	bne.n	801539e <tcp_remove_listener+0x22>
    }
  }
}
 80153ba:	bf00      	nop
 80153bc:	bf00      	nop
 80153be:	3710      	adds	r7, #16
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}
 80153c4:	08022948 	.word	0x08022948
 80153c8:	080229d0 	.word	0x080229d0
 80153cc:	0802298c 	.word	0x0802298c

080153d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80153d8:	687b      	ldr	r3, [r7, #4]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d106      	bne.n	80153ec <tcp_listen_closed+0x1c>
 80153de:	4b14      	ldr	r3, [pc, #80]	@ (8015430 <tcp_listen_closed+0x60>)
 80153e0:	f240 1211 	movw	r2, #273	@ 0x111
 80153e4:	4913      	ldr	r1, [pc, #76]	@ (8015434 <tcp_listen_closed+0x64>)
 80153e6:	4814      	ldr	r0, [pc, #80]	@ (8015438 <tcp_listen_closed+0x68>)
 80153e8:	f00a ff58 	bl	802029c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	7d1b      	ldrb	r3, [r3, #20]
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d006      	beq.n	8015402 <tcp_listen_closed+0x32>
 80153f4:	4b0e      	ldr	r3, [pc, #56]	@ (8015430 <tcp_listen_closed+0x60>)
 80153f6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 80153fa:	4910      	ldr	r1, [pc, #64]	@ (801543c <tcp_listen_closed+0x6c>)
 80153fc:	480e      	ldr	r0, [pc, #56]	@ (8015438 <tcp_listen_closed+0x68>)
 80153fe:	f00a ff4d 	bl	802029c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015402:	2301      	movs	r3, #1
 8015404:	60fb      	str	r3, [r7, #12]
 8015406:	e00b      	b.n	8015420 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015408:	4a0d      	ldr	r2, [pc, #52]	@ (8015440 <tcp_listen_closed+0x70>)
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015410:	681b      	ldr	r3, [r3, #0]
 8015412:	6879      	ldr	r1, [r7, #4]
 8015414:	4618      	mov	r0, r3
 8015416:	f7ff ffb1 	bl	801537c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	3301      	adds	r3, #1
 801541e:	60fb      	str	r3, [r7, #12]
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	2b03      	cmp	r3, #3
 8015424:	d9f0      	bls.n	8015408 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015426:	bf00      	nop
 8015428:	bf00      	nop
 801542a:	3710      	adds	r7, #16
 801542c:	46bd      	mov	sp, r7
 801542e:	bd80      	pop	{r7, pc}
 8015430:	08022948 	.word	0x08022948
 8015434:	080229f8 	.word	0x080229f8
 8015438:	0802298c 	.word	0x0802298c
 801543c:	08022a04 	.word	0x08022a04
 8015440:	08024e9c 	.word	0x08024e9c

08015444 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015444:	b5b0      	push	{r4, r5, r7, lr}
 8015446:	b088      	sub	sp, #32
 8015448:	af04      	add	r7, sp, #16
 801544a:	6078      	str	r0, [r7, #4]
 801544c:	460b      	mov	r3, r1
 801544e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	2b00      	cmp	r3, #0
 8015454:	d106      	bne.n	8015464 <tcp_close_shutdown+0x20>
 8015456:	4b63      	ldr	r3, [pc, #396]	@ (80155e4 <tcp_close_shutdown+0x1a0>)
 8015458:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801545c:	4962      	ldr	r1, [pc, #392]	@ (80155e8 <tcp_close_shutdown+0x1a4>)
 801545e:	4863      	ldr	r0, [pc, #396]	@ (80155ec <tcp_close_shutdown+0x1a8>)
 8015460:	f00a ff1c 	bl	802029c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8015464:	78fb      	ldrb	r3, [r7, #3]
 8015466:	2b00      	cmp	r3, #0
 8015468:	d066      	beq.n	8015538 <tcp_close_shutdown+0xf4>
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	7d1b      	ldrb	r3, [r3, #20]
 801546e:	2b04      	cmp	r3, #4
 8015470:	d003      	beq.n	801547a <tcp_close_shutdown+0x36>
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	7d1b      	ldrb	r3, [r3, #20]
 8015476:	2b07      	cmp	r3, #7
 8015478:	d15e      	bne.n	8015538 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801547e:	2b00      	cmp	r3, #0
 8015480:	d104      	bne.n	801548c <tcp_close_shutdown+0x48>
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015486:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801548a:	d055      	beq.n	8015538 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	8b5b      	ldrh	r3, [r3, #26]
 8015490:	f003 0310 	and.w	r3, r3, #16
 8015494:	2b00      	cmp	r3, #0
 8015496:	d106      	bne.n	80154a6 <tcp_close_shutdown+0x62>
 8015498:	4b52      	ldr	r3, [pc, #328]	@ (80155e4 <tcp_close_shutdown+0x1a0>)
 801549a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801549e:	4954      	ldr	r1, [pc, #336]	@ (80155f0 <tcp_close_shutdown+0x1ac>)
 80154a0:	4852      	ldr	r0, [pc, #328]	@ (80155ec <tcp_close_shutdown+0x1a8>)
 80154a2:	f00a fefb 	bl	802029c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80154ae:	687d      	ldr	r5, [r7, #4]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	3304      	adds	r3, #4
 80154b4:	687a      	ldr	r2, [r7, #4]
 80154b6:	8ad2      	ldrh	r2, [r2, #22]
 80154b8:	6879      	ldr	r1, [r7, #4]
 80154ba:	8b09      	ldrh	r1, [r1, #24]
 80154bc:	9102      	str	r1, [sp, #8]
 80154be:	9201      	str	r2, [sp, #4]
 80154c0:	9300      	str	r3, [sp, #0]
 80154c2:	462b      	mov	r3, r5
 80154c4:	4622      	mov	r2, r4
 80154c6:	4601      	mov	r1, r0
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f005 fdcb 	bl	801b064 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f001 fafa 	bl	8016ac8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80154d4:	4b47      	ldr	r3, [pc, #284]	@ (80155f4 <tcp_close_shutdown+0x1b0>)
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	687a      	ldr	r2, [r7, #4]
 80154da:	429a      	cmp	r2, r3
 80154dc:	d105      	bne.n	80154ea <tcp_close_shutdown+0xa6>
 80154de:	4b45      	ldr	r3, [pc, #276]	@ (80155f4 <tcp_close_shutdown+0x1b0>)
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	4a43      	ldr	r2, [pc, #268]	@ (80155f4 <tcp_close_shutdown+0x1b0>)
 80154e6:	6013      	str	r3, [r2, #0]
 80154e8:	e013      	b.n	8015512 <tcp_close_shutdown+0xce>
 80154ea:	4b42      	ldr	r3, [pc, #264]	@ (80155f4 <tcp_close_shutdown+0x1b0>)
 80154ec:	681b      	ldr	r3, [r3, #0]
 80154ee:	60fb      	str	r3, [r7, #12]
 80154f0:	e00c      	b.n	801550c <tcp_close_shutdown+0xc8>
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	68db      	ldr	r3, [r3, #12]
 80154f6:	687a      	ldr	r2, [r7, #4]
 80154f8:	429a      	cmp	r2, r3
 80154fa:	d104      	bne.n	8015506 <tcp_close_shutdown+0xc2>
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	68da      	ldr	r2, [r3, #12]
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	60da      	str	r2, [r3, #12]
 8015504:	e005      	b.n	8015512 <tcp_close_shutdown+0xce>
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	68db      	ldr	r3, [r3, #12]
 801550a:	60fb      	str	r3, [r7, #12]
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	2b00      	cmp	r3, #0
 8015510:	d1ef      	bne.n	80154f2 <tcp_close_shutdown+0xae>
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	2200      	movs	r2, #0
 8015516:	60da      	str	r2, [r3, #12]
 8015518:	4b37      	ldr	r3, [pc, #220]	@ (80155f8 <tcp_close_shutdown+0x1b4>)
 801551a:	2201      	movs	r2, #1
 801551c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801551e:	4b37      	ldr	r3, [pc, #220]	@ (80155fc <tcp_close_shutdown+0x1b8>)
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	687a      	ldr	r2, [r7, #4]
 8015524:	429a      	cmp	r2, r3
 8015526:	d102      	bne.n	801552e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015528:	f003 fff4 	bl	8019514 <tcp_trigger_input_pcb_close>
 801552c:	e002      	b.n	8015534 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801552e:	6878      	ldr	r0, [r7, #4]
 8015530:	f7ff fed6 	bl	80152e0 <tcp_free>
      }
      return ERR_OK;
 8015534:	2300      	movs	r3, #0
 8015536:	e050      	b.n	80155da <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	7d1b      	ldrb	r3, [r3, #20]
 801553c:	2b02      	cmp	r3, #2
 801553e:	d03b      	beq.n	80155b8 <tcp_close_shutdown+0x174>
 8015540:	2b02      	cmp	r3, #2
 8015542:	dc44      	bgt.n	80155ce <tcp_close_shutdown+0x18a>
 8015544:	2b00      	cmp	r3, #0
 8015546:	d002      	beq.n	801554e <tcp_close_shutdown+0x10a>
 8015548:	2b01      	cmp	r3, #1
 801554a:	d02a      	beq.n	80155a2 <tcp_close_shutdown+0x15e>
 801554c:	e03f      	b.n	80155ce <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	8adb      	ldrh	r3, [r3, #22]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d021      	beq.n	801559a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015556:	4b2a      	ldr	r3, [pc, #168]	@ (8015600 <tcp_close_shutdown+0x1bc>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	687a      	ldr	r2, [r7, #4]
 801555c:	429a      	cmp	r2, r3
 801555e:	d105      	bne.n	801556c <tcp_close_shutdown+0x128>
 8015560:	4b27      	ldr	r3, [pc, #156]	@ (8015600 <tcp_close_shutdown+0x1bc>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	68db      	ldr	r3, [r3, #12]
 8015566:	4a26      	ldr	r2, [pc, #152]	@ (8015600 <tcp_close_shutdown+0x1bc>)
 8015568:	6013      	str	r3, [r2, #0]
 801556a:	e013      	b.n	8015594 <tcp_close_shutdown+0x150>
 801556c:	4b24      	ldr	r3, [pc, #144]	@ (8015600 <tcp_close_shutdown+0x1bc>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	60bb      	str	r3, [r7, #8]
 8015572:	e00c      	b.n	801558e <tcp_close_shutdown+0x14a>
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	68db      	ldr	r3, [r3, #12]
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	429a      	cmp	r2, r3
 801557c:	d104      	bne.n	8015588 <tcp_close_shutdown+0x144>
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	68da      	ldr	r2, [r3, #12]
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	60da      	str	r2, [r3, #12]
 8015586:	e005      	b.n	8015594 <tcp_close_shutdown+0x150>
 8015588:	68bb      	ldr	r3, [r7, #8]
 801558a:	68db      	ldr	r3, [r3, #12]
 801558c:	60bb      	str	r3, [r7, #8]
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d1ef      	bne.n	8015574 <tcp_close_shutdown+0x130>
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2200      	movs	r2, #0
 8015598:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801559a:	6878      	ldr	r0, [r7, #4]
 801559c:	f7ff fea0 	bl	80152e0 <tcp_free>
      break;
 80155a0:	e01a      	b.n	80155d8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80155a2:	6878      	ldr	r0, [r7, #4]
 80155a4:	f7ff ff14 	bl	80153d0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80155a8:	6879      	ldr	r1, [r7, #4]
 80155aa:	4816      	ldr	r0, [pc, #88]	@ (8015604 <tcp_close_shutdown+0x1c0>)
 80155ac:	f001 fadc 	bl	8016b68 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80155b0:	6878      	ldr	r0, [r7, #4]
 80155b2:	f7ff feb1 	bl	8015318 <tcp_free_listen>
      break;
 80155b6:	e00f      	b.n	80155d8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80155b8:	6879      	ldr	r1, [r7, #4]
 80155ba:	480e      	ldr	r0, [pc, #56]	@ (80155f4 <tcp_close_shutdown+0x1b0>)
 80155bc:	f001 fad4 	bl	8016b68 <tcp_pcb_remove>
 80155c0:	4b0d      	ldr	r3, [pc, #52]	@ (80155f8 <tcp_close_shutdown+0x1b4>)
 80155c2:	2201      	movs	r2, #1
 80155c4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80155c6:	6878      	ldr	r0, [r7, #4]
 80155c8:	f7ff fe8a 	bl	80152e0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80155cc:	e004      	b.n	80155d8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	f000 f81a 	bl	8015608 <tcp_close_shutdown_fin>
 80155d4:	4603      	mov	r3, r0
 80155d6:	e000      	b.n	80155da <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80155d8:	2300      	movs	r3, #0
}
 80155da:	4618      	mov	r0, r3
 80155dc:	3710      	adds	r7, #16
 80155de:	46bd      	mov	sp, r7
 80155e0:	bdb0      	pop	{r4, r5, r7, pc}
 80155e2:	bf00      	nop
 80155e4:	08022948 	.word	0x08022948
 80155e8:	08022a1c 	.word	0x08022a1c
 80155ec:	0802298c 	.word	0x0802298c
 80155f0:	08022a3c 	.word	0x08022a3c
 80155f4:	200253b4 	.word	0x200253b4
 80155f8:	200253bc 	.word	0x200253bc
 80155fc:	200253f4 	.word	0x200253f4
 8015600:	200253ac 	.word	0x200253ac
 8015604:	200253b0 	.word	0x200253b0

08015608 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b084      	sub	sp, #16
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	2b00      	cmp	r3, #0
 8015614:	d106      	bne.n	8015624 <tcp_close_shutdown_fin+0x1c>
 8015616:	4b2e      	ldr	r3, [pc, #184]	@ (80156d0 <tcp_close_shutdown_fin+0xc8>)
 8015618:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 801561c:	492d      	ldr	r1, [pc, #180]	@ (80156d4 <tcp_close_shutdown_fin+0xcc>)
 801561e:	482e      	ldr	r0, [pc, #184]	@ (80156d8 <tcp_close_shutdown_fin+0xd0>)
 8015620:	f00a fe3c 	bl	802029c <iprintf>

  switch (pcb->state) {
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	7d1b      	ldrb	r3, [r3, #20]
 8015628:	2b07      	cmp	r3, #7
 801562a:	d020      	beq.n	801566e <tcp_close_shutdown_fin+0x66>
 801562c:	2b07      	cmp	r3, #7
 801562e:	dc2b      	bgt.n	8015688 <tcp_close_shutdown_fin+0x80>
 8015630:	2b03      	cmp	r3, #3
 8015632:	d002      	beq.n	801563a <tcp_close_shutdown_fin+0x32>
 8015634:	2b04      	cmp	r3, #4
 8015636:	d00d      	beq.n	8015654 <tcp_close_shutdown_fin+0x4c>
 8015638:	e026      	b.n	8015688 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f004 fdfa 	bl	801a234 <tcp_send_fin>
 8015640:	4603      	mov	r3, r0
 8015642:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d11f      	bne.n	801568c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	2205      	movs	r2, #5
 8015650:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015652:	e01b      	b.n	801568c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f004 fded 	bl	801a234 <tcp_send_fin>
 801565a:	4603      	mov	r3, r0
 801565c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801565e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015662:	2b00      	cmp	r3, #0
 8015664:	d114      	bne.n	8015690 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	2205      	movs	r2, #5
 801566a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801566c:	e010      	b.n	8015690 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801566e:	6878      	ldr	r0, [r7, #4]
 8015670:	f004 fde0 	bl	801a234 <tcp_send_fin>
 8015674:	4603      	mov	r3, r0
 8015676:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015678:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d109      	bne.n	8015694 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2209      	movs	r2, #9
 8015684:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015686:	e005      	b.n	8015694 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015688:	2300      	movs	r3, #0
 801568a:	e01c      	b.n	80156c6 <tcp_close_shutdown_fin+0xbe>
      break;
 801568c:	bf00      	nop
 801568e:	e002      	b.n	8015696 <tcp_close_shutdown_fin+0x8e>
      break;
 8015690:	bf00      	nop
 8015692:	e000      	b.n	8015696 <tcp_close_shutdown_fin+0x8e>
      break;
 8015694:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d103      	bne.n	80156a6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801569e:	6878      	ldr	r0, [r7, #4]
 80156a0:	f004 ff18 	bl	801a4d4 <tcp_output>
 80156a4:	e00d      	b.n	80156c2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80156a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80156aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80156ae:	d108      	bne.n	80156c2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	8b5b      	ldrh	r3, [r3, #26]
 80156b4:	f043 0308 	orr.w	r3, r3, #8
 80156b8:	b29a      	uxth	r2, r3
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80156be:	2300      	movs	r3, #0
 80156c0:	e001      	b.n	80156c6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80156c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80156c6:	4618      	mov	r0, r3
 80156c8:	3710      	adds	r7, #16
 80156ca:	46bd      	mov	sp, r7
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	08022948 	.word	0x08022948
 80156d4:	080229f8 	.word	0x080229f8
 80156d8:	0802298c 	.word	0x0802298c

080156dc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d109      	bne.n	80156fe <tcp_close+0x22>
 80156ea:	4b0f      	ldr	r3, [pc, #60]	@ (8015728 <tcp_close+0x4c>)
 80156ec:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80156f0:	490e      	ldr	r1, [pc, #56]	@ (801572c <tcp_close+0x50>)
 80156f2:	480f      	ldr	r0, [pc, #60]	@ (8015730 <tcp_close+0x54>)
 80156f4:	f00a fdd2 	bl	802029c <iprintf>
 80156f8:	f06f 030f 	mvn.w	r3, #15
 80156fc:	e00f      	b.n	801571e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	7d1b      	ldrb	r3, [r3, #20]
 8015702:	2b01      	cmp	r3, #1
 8015704:	d006      	beq.n	8015714 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	8b5b      	ldrh	r3, [r3, #26]
 801570a:	f043 0310 	orr.w	r3, r3, #16
 801570e:	b29a      	uxth	r2, r3
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015714:	2101      	movs	r1, #1
 8015716:	6878      	ldr	r0, [r7, #4]
 8015718:	f7ff fe94 	bl	8015444 <tcp_close_shutdown>
 801571c:	4603      	mov	r3, r0
}
 801571e:	4618      	mov	r0, r3
 8015720:	3708      	adds	r7, #8
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}
 8015726:	bf00      	nop
 8015728:	08022948 	.word	0x08022948
 801572c:	08022a58 	.word	0x08022a58
 8015730:	0802298c 	.word	0x0802298c

08015734 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	b084      	sub	sp, #16
 8015738:	af00      	add	r7, sp, #0
 801573a:	60f8      	str	r0, [r7, #12]
 801573c:	60b9      	str	r1, [r7, #8]
 801573e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d109      	bne.n	801575a <tcp_shutdown+0x26>
 8015746:	4b26      	ldr	r3, [pc, #152]	@ (80157e0 <tcp_shutdown+0xac>)
 8015748:	f240 2207 	movw	r2, #519	@ 0x207
 801574c:	4925      	ldr	r1, [pc, #148]	@ (80157e4 <tcp_shutdown+0xb0>)
 801574e:	4826      	ldr	r0, [pc, #152]	@ (80157e8 <tcp_shutdown+0xb4>)
 8015750:	f00a fda4 	bl	802029c <iprintf>
 8015754:	f06f 030f 	mvn.w	r3, #15
 8015758:	e03d      	b.n	80157d6 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	7d1b      	ldrb	r3, [r3, #20]
 801575e:	2b01      	cmp	r3, #1
 8015760:	d102      	bne.n	8015768 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015762:	f06f 030a 	mvn.w	r3, #10
 8015766:	e036      	b.n	80157d6 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015768:	68bb      	ldr	r3, [r7, #8]
 801576a:	2b00      	cmp	r3, #0
 801576c:	d01b      	beq.n	80157a6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	8b5b      	ldrh	r3, [r3, #26]
 8015772:	f043 0310 	orr.w	r3, r3, #16
 8015776:	b29a      	uxth	r2, r3
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d005      	beq.n	801578e <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8015782:	2101      	movs	r1, #1
 8015784:	68f8      	ldr	r0, [r7, #12]
 8015786:	f7ff fe5d 	bl	8015444 <tcp_close_shutdown>
 801578a:	4603      	mov	r3, r0
 801578c:	e023      	b.n	80157d6 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015792:	2b00      	cmp	r3, #0
 8015794:	d007      	beq.n	80157a6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801579a:	4618      	mov	r0, r3
 801579c:	f7ff fadc 	bl	8014d58 <pbuf_free>
      pcb->refused_data = NULL;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	2200      	movs	r2, #0
 80157a4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d013      	beq.n	80157d4 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	7d1b      	ldrb	r3, [r3, #20]
 80157b0:	2b04      	cmp	r3, #4
 80157b2:	dc02      	bgt.n	80157ba <tcp_shutdown+0x86>
 80157b4:	2b03      	cmp	r3, #3
 80157b6:	da02      	bge.n	80157be <tcp_shutdown+0x8a>
 80157b8:	e009      	b.n	80157ce <tcp_shutdown+0x9a>
 80157ba:	2b07      	cmp	r3, #7
 80157bc:	d107      	bne.n	80157ce <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	b2db      	uxtb	r3, r3
 80157c2:	4619      	mov	r1, r3
 80157c4:	68f8      	ldr	r0, [r7, #12]
 80157c6:	f7ff fe3d 	bl	8015444 <tcp_close_shutdown>
 80157ca:	4603      	mov	r3, r0
 80157cc:	e003      	b.n	80157d6 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80157ce:	f06f 030a 	mvn.w	r3, #10
 80157d2:	e000      	b.n	80157d6 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80157d4:	2300      	movs	r3, #0
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	3710      	adds	r7, #16
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	08022948 	.word	0x08022948
 80157e4:	08022a70 	.word	0x08022a70
 80157e8:	0802298c 	.word	0x0802298c

080157ec <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b08e      	sub	sp, #56	@ 0x38
 80157f0:	af04      	add	r7, sp, #16
 80157f2:	6078      	str	r0, [r7, #4]
 80157f4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d107      	bne.n	801580c <tcp_abandon+0x20>
 80157fc:	4b52      	ldr	r3, [pc, #328]	@ (8015948 <tcp_abandon+0x15c>)
 80157fe:	f240 223d 	movw	r2, #573	@ 0x23d
 8015802:	4952      	ldr	r1, [pc, #328]	@ (801594c <tcp_abandon+0x160>)
 8015804:	4852      	ldr	r0, [pc, #328]	@ (8015950 <tcp_abandon+0x164>)
 8015806:	f00a fd49 	bl	802029c <iprintf>
 801580a:	e099      	b.n	8015940 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	7d1b      	ldrb	r3, [r3, #20]
 8015810:	2b01      	cmp	r3, #1
 8015812:	d106      	bne.n	8015822 <tcp_abandon+0x36>
 8015814:	4b4c      	ldr	r3, [pc, #304]	@ (8015948 <tcp_abandon+0x15c>)
 8015816:	f44f 7210 	mov.w	r2, #576	@ 0x240
 801581a:	494e      	ldr	r1, [pc, #312]	@ (8015954 <tcp_abandon+0x168>)
 801581c:	484c      	ldr	r0, [pc, #304]	@ (8015950 <tcp_abandon+0x164>)
 801581e:	f00a fd3d 	bl	802029c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	7d1b      	ldrb	r3, [r3, #20]
 8015826:	2b0a      	cmp	r3, #10
 8015828:	d107      	bne.n	801583a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801582a:	6879      	ldr	r1, [r7, #4]
 801582c:	484a      	ldr	r0, [pc, #296]	@ (8015958 <tcp_abandon+0x16c>)
 801582e:	f001 f99b 	bl	8016b68 <tcp_pcb_remove>
    tcp_free(pcb);
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f7ff fd54 	bl	80152e0 <tcp_free>
 8015838:	e082      	b.n	8015940 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801583a:	2300      	movs	r3, #0
 801583c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 801583e:	2300      	movs	r3, #0
 8015840:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015846:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801584c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015854:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	691b      	ldr	r3, [r3, #16]
 801585a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	7d1b      	ldrb	r3, [r3, #20]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d126      	bne.n	80158b2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	8adb      	ldrh	r3, [r3, #22]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d02e      	beq.n	80158ca <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801586c:	4b3b      	ldr	r3, [pc, #236]	@ (801595c <tcp_abandon+0x170>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	687a      	ldr	r2, [r7, #4]
 8015872:	429a      	cmp	r2, r3
 8015874:	d105      	bne.n	8015882 <tcp_abandon+0x96>
 8015876:	4b39      	ldr	r3, [pc, #228]	@ (801595c <tcp_abandon+0x170>)
 8015878:	681b      	ldr	r3, [r3, #0]
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	4a37      	ldr	r2, [pc, #220]	@ (801595c <tcp_abandon+0x170>)
 801587e:	6013      	str	r3, [r2, #0]
 8015880:	e013      	b.n	80158aa <tcp_abandon+0xbe>
 8015882:	4b36      	ldr	r3, [pc, #216]	@ (801595c <tcp_abandon+0x170>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	61fb      	str	r3, [r7, #28]
 8015888:	e00c      	b.n	80158a4 <tcp_abandon+0xb8>
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	687a      	ldr	r2, [r7, #4]
 8015890:	429a      	cmp	r2, r3
 8015892:	d104      	bne.n	801589e <tcp_abandon+0xb2>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	68da      	ldr	r2, [r3, #12]
 8015898:	69fb      	ldr	r3, [r7, #28]
 801589a:	60da      	str	r2, [r3, #12]
 801589c:	e005      	b.n	80158aa <tcp_abandon+0xbe>
 801589e:	69fb      	ldr	r3, [r7, #28]
 80158a0:	68db      	ldr	r3, [r3, #12]
 80158a2:	61fb      	str	r3, [r7, #28]
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d1ef      	bne.n	801588a <tcp_abandon+0x9e>
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	2200      	movs	r2, #0
 80158ae:	60da      	str	r2, [r3, #12]
 80158b0:	e00b      	b.n	80158ca <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	8adb      	ldrh	r3, [r3, #22]
 80158ba:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80158bc:	6879      	ldr	r1, [r7, #4]
 80158be:	4828      	ldr	r0, [pc, #160]	@ (8015960 <tcp_abandon+0x174>)
 80158c0:	f001 f952 	bl	8016b68 <tcp_pcb_remove>
 80158c4:	4b27      	ldr	r3, [pc, #156]	@ (8015964 <tcp_abandon+0x178>)
 80158c6:	2201      	movs	r2, #1
 80158c8:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d004      	beq.n	80158dc <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80158d6:	4618      	mov	r0, r3
 80158d8:	f000 fdfc 	bl	80164d4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d004      	beq.n	80158ee <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158e8:	4618      	mov	r0, r3
 80158ea:	f000 fdf3 	bl	80164d4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d004      	beq.n	8015900 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80158fa:	4618      	mov	r0, r3
 80158fc:	f000 fdea 	bl	80164d4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015902:	2b00      	cmp	r3, #0
 8015904:	d00e      	beq.n	8015924 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015906:	6879      	ldr	r1, [r7, #4]
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	3304      	adds	r3, #4
 801590c:	687a      	ldr	r2, [r7, #4]
 801590e:	8b12      	ldrh	r2, [r2, #24]
 8015910:	9202      	str	r2, [sp, #8]
 8015912:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015914:	9201      	str	r2, [sp, #4]
 8015916:	9300      	str	r3, [sp, #0]
 8015918:	460b      	mov	r3, r1
 801591a:	697a      	ldr	r2, [r7, #20]
 801591c:	69b9      	ldr	r1, [r7, #24]
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f005 fba0 	bl	801b064 <tcp_rst>
    }
    last_state = pcb->state;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	7d1b      	ldrb	r3, [r3, #20]
 8015928:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f7ff fcd8 	bl	80152e0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d004      	beq.n	8015940 <tcp_abandon+0x154>
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	f06f 010c 	mvn.w	r1, #12
 801593c:	68f8      	ldr	r0, [r7, #12]
 801593e:	4798      	blx	r3
  }
}
 8015940:	3728      	adds	r7, #40	@ 0x28
 8015942:	46bd      	mov	sp, r7
 8015944:	bd80      	pop	{r7, pc}
 8015946:	bf00      	nop
 8015948:	08022948 	.word	0x08022948
 801594c:	08022a8c 	.word	0x08022a8c
 8015950:	0802298c 	.word	0x0802298c
 8015954:	08022aa8 	.word	0x08022aa8
 8015958:	200253b8 	.word	0x200253b8
 801595c:	200253ac 	.word	0x200253ac
 8015960:	200253b4 	.word	0x200253b4
 8015964:	200253bc 	.word	0x200253bc

08015968 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015970:	2101      	movs	r1, #1
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f7ff ff3a 	bl	80157ec <tcp_abandon>
}
 8015978:	bf00      	nop
 801597a:	3708      	adds	r7, #8
 801597c:	46bd      	mov	sp, r7
 801597e:	bd80      	pop	{r7, pc}

08015980 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b088      	sub	sp, #32
 8015984:	af00      	add	r7, sp, #0
 8015986:	60f8      	str	r0, [r7, #12]
 8015988:	60b9      	str	r1, [r7, #8]
 801598a:	4613      	mov	r3, r2
 801598c:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801598e:	2304      	movs	r3, #4
 8015990:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015992:	68bb      	ldr	r3, [r7, #8]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d101      	bne.n	801599c <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015998:	4b3e      	ldr	r3, [pc, #248]	@ (8015a94 <tcp_bind+0x114>)
 801599a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d109      	bne.n	80159b6 <tcp_bind+0x36>
 80159a2:	4b3d      	ldr	r3, [pc, #244]	@ (8015a98 <tcp_bind+0x118>)
 80159a4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 80159a8:	493c      	ldr	r1, [pc, #240]	@ (8015a9c <tcp_bind+0x11c>)
 80159aa:	483d      	ldr	r0, [pc, #244]	@ (8015aa0 <tcp_bind+0x120>)
 80159ac:	f00a fc76 	bl	802029c <iprintf>
 80159b0:	f06f 030f 	mvn.w	r3, #15
 80159b4:	e06a      	b.n	8015a8c <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	7d1b      	ldrb	r3, [r3, #20]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d009      	beq.n	80159d2 <tcp_bind+0x52>
 80159be:	4b36      	ldr	r3, [pc, #216]	@ (8015a98 <tcp_bind+0x118>)
 80159c0:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80159c4:	4937      	ldr	r1, [pc, #220]	@ (8015aa4 <tcp_bind+0x124>)
 80159c6:	4836      	ldr	r0, [pc, #216]	@ (8015aa0 <tcp_bind+0x120>)
 80159c8:	f00a fc68 	bl	802029c <iprintf>
 80159cc:	f06f 0305 	mvn.w	r3, #5
 80159d0:	e05c      	b.n	8015a8c <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80159d2:	88fb      	ldrh	r3, [r7, #6]
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	d109      	bne.n	80159ec <tcp_bind+0x6c>
    port = tcp_new_port();
 80159d8:	f000 f914 	bl	8015c04 <tcp_new_port>
 80159dc:	4603      	mov	r3, r0
 80159de:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80159e0:	88fb      	ldrh	r3, [r7, #6]
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d135      	bne.n	8015a52 <tcp_bind+0xd2>
      return ERR_BUF;
 80159e6:	f06f 0301 	mvn.w	r3, #1
 80159ea:	e04f      	b.n	8015a8c <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80159ec:	2300      	movs	r3, #0
 80159ee:	61fb      	str	r3, [r7, #28]
 80159f0:	e02b      	b.n	8015a4a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80159f2:	4a2d      	ldr	r2, [pc, #180]	@ (8015aa8 <tcp_bind+0x128>)
 80159f4:	69fb      	ldr	r3, [r7, #28]
 80159f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	61bb      	str	r3, [r7, #24]
 80159fe:	e01e      	b.n	8015a3e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	8adb      	ldrh	r3, [r3, #22]
 8015a04:	88fa      	ldrh	r2, [r7, #6]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d116      	bne.n	8015a38 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015a0a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d010      	beq.n	8015a32 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015a10:	69bb      	ldr	r3, [r7, #24]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d00c      	beq.n	8015a32 <tcp_bind+0xb2>
 8015a18:	68bb      	ldr	r3, [r7, #8]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d009      	beq.n	8015a32 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015a1e:	68bb      	ldr	r3, [r7, #8]
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d005      	beq.n	8015a32 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015a26:	69bb      	ldr	r3, [r7, #24]
 8015a28:	681a      	ldr	r2, [r3, #0]
 8015a2a:	68bb      	ldr	r3, [r7, #8]
 8015a2c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d102      	bne.n	8015a38 <tcp_bind+0xb8>
              return ERR_USE;
 8015a32:	f06f 0307 	mvn.w	r3, #7
 8015a36:	e029      	b.n	8015a8c <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015a38:	69bb      	ldr	r3, [r7, #24]
 8015a3a:	68db      	ldr	r3, [r3, #12]
 8015a3c:	61bb      	str	r3, [r7, #24]
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d1dd      	bne.n	8015a00 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015a44:	69fb      	ldr	r3, [r7, #28]
 8015a46:	3301      	adds	r3, #1
 8015a48:	61fb      	str	r3, [r7, #28]
 8015a4a:	69fa      	ldr	r2, [r7, #28]
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	429a      	cmp	r2, r3
 8015a50:	dbcf      	blt.n	80159f2 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015a52:	68bb      	ldr	r3, [r7, #8]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d00c      	beq.n	8015a72 <tcp_bind+0xf2>
 8015a58:	68bb      	ldr	r3, [r7, #8]
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d008      	beq.n	8015a72 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d002      	beq.n	8015a6c <tcp_bind+0xec>
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	e000      	b.n	8015a6e <tcp_bind+0xee>
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	68fa      	ldr	r2, [r7, #12]
 8015a70:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015a72:	68fb      	ldr	r3, [r7, #12]
 8015a74:	88fa      	ldrh	r2, [r7, #6]
 8015a76:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015a78:	4b0c      	ldr	r3, [pc, #48]	@ (8015aac <tcp_bind+0x12c>)
 8015a7a:	681a      	ldr	r2, [r3, #0]
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	60da      	str	r2, [r3, #12]
 8015a80:	4a0a      	ldr	r2, [pc, #40]	@ (8015aac <tcp_bind+0x12c>)
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	6013      	str	r3, [r2, #0]
 8015a86:	f005 fcaf 	bl	801b3e8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015a8a:	2300      	movs	r3, #0
}
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	3720      	adds	r7, #32
 8015a90:	46bd      	mov	sp, r7
 8015a92:	bd80      	pop	{r7, pc}
 8015a94:	08024ec4 	.word	0x08024ec4
 8015a98:	08022948 	.word	0x08022948
 8015a9c:	08022adc 	.word	0x08022adc
 8015aa0:	0802298c 	.word	0x0802298c
 8015aa4:	08022af4 	.word	0x08022af4
 8015aa8:	08024e9c 	.word	0x08024e9c
 8015aac:	200253ac 	.word	0x200253ac

08015ab0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b084      	sub	sp, #16
 8015ab4:	af00      	add	r7, sp, #0
 8015ab6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d106      	bne.n	8015acc <tcp_update_rcv_ann_wnd+0x1c>
 8015abe:	4b25      	ldr	r3, [pc, #148]	@ (8015b54 <tcp_update_rcv_ann_wnd+0xa4>)
 8015ac0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015ac4:	4924      	ldr	r1, [pc, #144]	@ (8015b58 <tcp_update_rcv_ann_wnd+0xa8>)
 8015ac6:	4825      	ldr	r0, [pc, #148]	@ (8015b5c <tcp_update_rcv_ann_wnd+0xac>)
 8015ac8:	f00a fbe8 	bl	802029c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ad0:	687a      	ldr	r2, [r7, #4]
 8015ad2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015ad4:	4413      	add	r3, r2
 8015ad6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015adc:	687a      	ldr	r2, [r7, #4]
 8015ade:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8015ae0:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015ae4:	bf28      	it	cs
 8015ae6:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8015aea:	b292      	uxth	r2, r2
 8015aec:	4413      	add	r3, r2
 8015aee:	68fa      	ldr	r2, [r7, #12]
 8015af0:	1ad3      	subs	r3, r2, r3
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	db08      	blt.n	8015b08 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b02:	68fa      	ldr	r2, [r7, #12]
 8015b04:	1ad3      	subs	r3, r2, r3
 8015b06:	e020      	b.n	8015b4a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b10:	1ad3      	subs	r3, r2, r3
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	dd03      	ble.n	8015b1e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2200      	movs	r2, #0
 8015b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015b1c:	e014      	b.n	8015b48 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b26:	1ad3      	subs	r3, r2, r3
 8015b28:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015b30:	d306      	bcc.n	8015b40 <tcp_update_rcv_ann_wnd+0x90>
 8015b32:	4b08      	ldr	r3, [pc, #32]	@ (8015b54 <tcp_update_rcv_ann_wnd+0xa4>)
 8015b34:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8015b38:	4909      	ldr	r1, [pc, #36]	@ (8015b60 <tcp_update_rcv_ann_wnd+0xb0>)
 8015b3a:	4808      	ldr	r0, [pc, #32]	@ (8015b5c <tcp_update_rcv_ann_wnd+0xac>)
 8015b3c:	f00a fbae 	bl	802029c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	b29a      	uxth	r2, r3
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015b48:	2300      	movs	r3, #0
  }
}
 8015b4a:	4618      	mov	r0, r3
 8015b4c:	3710      	adds	r7, #16
 8015b4e:	46bd      	mov	sp, r7
 8015b50:	bd80      	pop	{r7, pc}
 8015b52:	bf00      	nop
 8015b54:	08022948 	.word	0x08022948
 8015b58:	08022ba4 	.word	0x08022ba4
 8015b5c:	0802298c 	.word	0x0802298c
 8015b60:	08022bc8 	.word	0x08022bc8

08015b64 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b084      	sub	sp, #16
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
 8015b6c:	460b      	mov	r3, r1
 8015b6e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d107      	bne.n	8015b86 <tcp_recved+0x22>
 8015b76:	4b1f      	ldr	r3, [pc, #124]	@ (8015bf4 <tcp_recved+0x90>)
 8015b78:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015b7c:	491e      	ldr	r1, [pc, #120]	@ (8015bf8 <tcp_recved+0x94>)
 8015b7e:	481f      	ldr	r0, [pc, #124]	@ (8015bfc <tcp_recved+0x98>)
 8015b80:	f00a fb8c 	bl	802029c <iprintf>
 8015b84:	e032      	b.n	8015bec <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	7d1b      	ldrb	r3, [r3, #20]
 8015b8a:	2b01      	cmp	r3, #1
 8015b8c:	d106      	bne.n	8015b9c <tcp_recved+0x38>
 8015b8e:	4b19      	ldr	r3, [pc, #100]	@ (8015bf4 <tcp_recved+0x90>)
 8015b90:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015b94:	491a      	ldr	r1, [pc, #104]	@ (8015c00 <tcp_recved+0x9c>)
 8015b96:	4819      	ldr	r0, [pc, #100]	@ (8015bfc <tcp_recved+0x98>)
 8015b98:	f00a fb80 	bl	802029c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015ba0:	887b      	ldrh	r3, [r7, #2]
 8015ba2:	4413      	add	r3, r2
 8015ba4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015ba6:	89fb      	ldrh	r3, [r7, #14]
 8015ba8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015bac:	d804      	bhi.n	8015bb8 <tcp_recved+0x54>
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015bb2:	89fa      	ldrh	r2, [r7, #14]
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d204      	bcs.n	8015bc2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8015bbe:	851a      	strh	r2, [r3, #40]	@ 0x28
 8015bc0:	e002      	b.n	8015bc8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	89fa      	ldrh	r2, [r7, #14]
 8015bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015bc8:	6878      	ldr	r0, [r7, #4]
 8015bca:	f7ff ff71 	bl	8015ab0 <tcp_update_rcv_ann_wnd>
 8015bce:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015bd6:	d309      	bcc.n	8015bec <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	8b5b      	ldrh	r3, [r3, #26]
 8015bdc:	f043 0302 	orr.w	r3, r3, #2
 8015be0:	b29a      	uxth	r2, r3
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015be6:	6878      	ldr	r0, [r7, #4]
 8015be8:	f004 fc74 	bl	801a4d4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015bec:	3710      	adds	r7, #16
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}
 8015bf2:	bf00      	nop
 8015bf4:	08022948 	.word	0x08022948
 8015bf8:	08022be4 	.word	0x08022be4
 8015bfc:	0802298c 	.word	0x0802298c
 8015c00:	08022bfc 	.word	0x08022bfc

08015c04 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015c04:	b480      	push	{r7}
 8015c06:	b083      	sub	sp, #12
 8015c08:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8015c0e:	4b1e      	ldr	r3, [pc, #120]	@ (8015c88 <tcp_new_port+0x84>)
 8015c10:	881b      	ldrh	r3, [r3, #0]
 8015c12:	3301      	adds	r3, #1
 8015c14:	b29a      	uxth	r2, r3
 8015c16:	4b1c      	ldr	r3, [pc, #112]	@ (8015c88 <tcp_new_port+0x84>)
 8015c18:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8015c88 <tcp_new_port+0x84>)
 8015c1c:	881b      	ldrh	r3, [r3, #0]
 8015c1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c22:	4293      	cmp	r3, r2
 8015c24:	d103      	bne.n	8015c2e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015c26:	4b18      	ldr	r3, [pc, #96]	@ (8015c88 <tcp_new_port+0x84>)
 8015c28:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8015c2c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015c2e:	2300      	movs	r3, #0
 8015c30:	71fb      	strb	r3, [r7, #7]
 8015c32:	e01e      	b.n	8015c72 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015c34:	79fb      	ldrb	r3, [r7, #7]
 8015c36:	4a15      	ldr	r2, [pc, #84]	@ (8015c8c <tcp_new_port+0x88>)
 8015c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	603b      	str	r3, [r7, #0]
 8015c40:	e011      	b.n	8015c66 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015c42:	683b      	ldr	r3, [r7, #0]
 8015c44:	8ada      	ldrh	r2, [r3, #22]
 8015c46:	4b10      	ldr	r3, [pc, #64]	@ (8015c88 <tcp_new_port+0x84>)
 8015c48:	881b      	ldrh	r3, [r3, #0]
 8015c4a:	429a      	cmp	r2, r3
 8015c4c:	d108      	bne.n	8015c60 <tcp_new_port+0x5c>
        n++;
 8015c4e:	88bb      	ldrh	r3, [r7, #4]
 8015c50:	3301      	adds	r3, #1
 8015c52:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015c54:	88bb      	ldrh	r3, [r7, #4]
 8015c56:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015c5a:	d3d8      	bcc.n	8015c0e <tcp_new_port+0xa>
          return 0;
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	e00d      	b.n	8015c7c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	68db      	ldr	r3, [r3, #12]
 8015c64:	603b      	str	r3, [r7, #0]
 8015c66:	683b      	ldr	r3, [r7, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d1ea      	bne.n	8015c42 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015c6c:	79fb      	ldrb	r3, [r7, #7]
 8015c6e:	3301      	adds	r3, #1
 8015c70:	71fb      	strb	r3, [r7, #7]
 8015c72:	79fb      	ldrb	r3, [r7, #7]
 8015c74:	2b03      	cmp	r3, #3
 8015c76:	d9dd      	bls.n	8015c34 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8015c78:	4b03      	ldr	r3, [pc, #12]	@ (8015c88 <tcp_new_port+0x84>)
 8015c7a:	881b      	ldrh	r3, [r3, #0]
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	370c      	adds	r7, #12
 8015c80:	46bd      	mov	sp, r7
 8015c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c86:	4770      	bx	lr
 8015c88:	20000024 	.word	0x20000024
 8015c8c:	08024e9c 	.word	0x08024e9c

08015c90 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015c90:	b5b0      	push	{r4, r5, r7, lr}
 8015c92:	b090      	sub	sp, #64	@ 0x40
 8015c94:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015c96:	2300      	movs	r3, #0
 8015c98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 8015c9c:	4b95      	ldr	r3, [pc, #596]	@ (8015ef4 <tcp_slowtmr+0x264>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	3301      	adds	r3, #1
 8015ca2:	4a94      	ldr	r2, [pc, #592]	@ (8015ef4 <tcp_slowtmr+0x264>)
 8015ca4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015ca6:	4b94      	ldr	r3, [pc, #592]	@ (8015ef8 <tcp_slowtmr+0x268>)
 8015ca8:	781b      	ldrb	r3, [r3, #0]
 8015caa:	3301      	adds	r3, #1
 8015cac:	b2da      	uxtb	r2, r3
 8015cae:	4b92      	ldr	r3, [pc, #584]	@ (8015ef8 <tcp_slowtmr+0x268>)
 8015cb0:	701a      	strb	r2, [r3, #0]
 8015cb2:	e000      	b.n	8015cb6 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8015cb4:	bf00      	nop
  prev = NULL;
 8015cb6:	2300      	movs	r3, #0
 8015cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8015cba:	4b90      	ldr	r3, [pc, #576]	@ (8015efc <tcp_slowtmr+0x26c>)
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8015cc0:	e29d      	b.n	80161fe <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cc4:	7d1b      	ldrb	r3, [r3, #20]
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	d106      	bne.n	8015cd8 <tcp_slowtmr+0x48>
 8015cca:	4b8d      	ldr	r3, [pc, #564]	@ (8015f00 <tcp_slowtmr+0x270>)
 8015ccc:	f240 42be 	movw	r2, #1214	@ 0x4be
 8015cd0:	498c      	ldr	r1, [pc, #560]	@ (8015f04 <tcp_slowtmr+0x274>)
 8015cd2:	488d      	ldr	r0, [pc, #564]	@ (8015f08 <tcp_slowtmr+0x278>)
 8015cd4:	f00a fae2 	bl	802029c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cda:	7d1b      	ldrb	r3, [r3, #20]
 8015cdc:	2b01      	cmp	r3, #1
 8015cde:	d106      	bne.n	8015cee <tcp_slowtmr+0x5e>
 8015ce0:	4b87      	ldr	r3, [pc, #540]	@ (8015f00 <tcp_slowtmr+0x270>)
 8015ce2:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8015ce6:	4989      	ldr	r1, [pc, #548]	@ (8015f0c <tcp_slowtmr+0x27c>)
 8015ce8:	4887      	ldr	r0, [pc, #540]	@ (8015f08 <tcp_slowtmr+0x278>)
 8015cea:	f00a fad7 	bl	802029c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015cee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015cf0:	7d1b      	ldrb	r3, [r3, #20]
 8015cf2:	2b0a      	cmp	r3, #10
 8015cf4:	d106      	bne.n	8015d04 <tcp_slowtmr+0x74>
 8015cf6:	4b82      	ldr	r3, [pc, #520]	@ (8015f00 <tcp_slowtmr+0x270>)
 8015cf8:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8015cfc:	4984      	ldr	r1, [pc, #528]	@ (8015f10 <tcp_slowtmr+0x280>)
 8015cfe:	4882      	ldr	r0, [pc, #520]	@ (8015f08 <tcp_slowtmr+0x278>)
 8015d00:	f00a facc 	bl	802029c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8015d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d06:	7f9a      	ldrb	r2, [r3, #30]
 8015d08:	4b7b      	ldr	r3, [pc, #492]	@ (8015ef8 <tcp_slowtmr+0x268>)
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	d105      	bne.n	8015d1c <tcp_slowtmr+0x8c>
      prev = pcb;
 8015d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d12:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8015d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d16:	68db      	ldr	r3, [r3, #12]
 8015d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8015d1a:	e270      	b.n	80161fe <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 8015d1c:	4b76      	ldr	r3, [pc, #472]	@ (8015ef8 <tcp_slowtmr+0x268>)
 8015d1e:	781a      	ldrb	r2, [r3, #0]
 8015d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d22:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8015d24:	2300      	movs	r3, #0
 8015d26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d32:	7d1b      	ldrb	r3, [r3, #20]
 8015d34:	2b02      	cmp	r3, #2
 8015d36:	d10a      	bne.n	8015d4e <tcp_slowtmr+0xbe>
 8015d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d3a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d3e:	2b05      	cmp	r3, #5
 8015d40:	d905      	bls.n	8015d4e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8015d42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d46:	3301      	adds	r3, #1
 8015d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d4c:	e11e      	b.n	8015f8c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8015d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d50:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015d54:	2b0b      	cmp	r3, #11
 8015d56:	d905      	bls.n	8015d64 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 8015d58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d5c:	3301      	adds	r3, #1
 8015d5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d62:	e113      	b.n	8015f8c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8015d64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d66:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d075      	beq.n	8015e5a <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8015d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d006      	beq.n	8015d84 <tcp_slowtmr+0xf4>
 8015d76:	4b62      	ldr	r3, [pc, #392]	@ (8015f00 <tcp_slowtmr+0x270>)
 8015d78:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 8015d7c:	4965      	ldr	r1, [pc, #404]	@ (8015f14 <tcp_slowtmr+0x284>)
 8015d7e:	4862      	ldr	r0, [pc, #392]	@ (8015f08 <tcp_slowtmr+0x278>)
 8015d80:	f00a fa8c 	bl	802029c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d106      	bne.n	8015d9a <tcp_slowtmr+0x10a>
 8015d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8015f00 <tcp_slowtmr+0x270>)
 8015d8e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8015d92:	4961      	ldr	r1, [pc, #388]	@ (8015f18 <tcp_slowtmr+0x288>)
 8015d94:	485c      	ldr	r0, [pc, #368]	@ (8015f08 <tcp_slowtmr+0x278>)
 8015d96:	f00a fa81 	bl	802029c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015d9c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8015da0:	2b0b      	cmp	r3, #11
 8015da2:	d905      	bls.n	8015db0 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8015da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015da8:	3301      	adds	r3, #1
 8015daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015dae:	e0ed      	b.n	8015f8c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015db2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015db6:	3b01      	subs	r3, #1
 8015db8:	4a58      	ldr	r2, [pc, #352]	@ (8015f1c <tcp_slowtmr+0x28c>)
 8015dba:	5cd3      	ldrb	r3, [r2, r3]
 8015dbc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dc0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015dc4:	7c7a      	ldrb	r2, [r7, #17]
 8015dc6:	429a      	cmp	r2, r3
 8015dc8:	d907      	bls.n	8015dda <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8015dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dcc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	b2da      	uxtb	r2, r3
 8015dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dd6:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8015dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ddc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8015de0:	7c7a      	ldrb	r2, [r7, #17]
 8015de2:	429a      	cmp	r2, r3
 8015de4:	f200 80d2 	bhi.w	8015f8c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8015de8:	2301      	movs	r3, #1
 8015dea:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8015dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015dee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d108      	bne.n	8015e08 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8015df6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015df8:	f005 fa28 	bl	801b24c <tcp_zero_window_probe>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d014      	beq.n	8015e2c <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8015e02:	2300      	movs	r3, #0
 8015e04:	623b      	str	r3, [r7, #32]
 8015e06:	e011      	b.n	8015e2c <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015e0e:	4619      	mov	r1, r3
 8015e10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e12:	f004 f8bd 	bl	8019f90 <tcp_split_unsent_seg>
 8015e16:	4603      	mov	r3, r0
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d107      	bne.n	8015e2c <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8015e1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e1e:	f004 fb59 	bl	801a4d4 <tcp_output>
 8015e22:	4603      	mov	r3, r0
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d101      	bne.n	8015e2c <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8015e28:	2300      	movs	r3, #0
 8015e2a:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8015e2c:	6a3b      	ldr	r3, [r7, #32]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	f000 80ac 	beq.w	8015f8c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8015e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e36:	2200      	movs	r2, #0
 8015e38:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8015e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e3e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015e42:	2b06      	cmp	r3, #6
 8015e44:	f200 80a2 	bhi.w	8015f8c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8015e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8015e4e:	3301      	adds	r3, #1
 8015e50:	b2da      	uxtb	r2, r3
 8015e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e54:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 8015e58:	e098      	b.n	8015f8c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8015e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e5c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	db0f      	blt.n	8015e84 <tcp_slowtmr+0x1f4>
 8015e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015e6a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015e6e:	4293      	cmp	r3, r2
 8015e70:	d008      	beq.n	8015e84 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8015e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e74:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015e78:	b29b      	uxth	r3, r3
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	b29b      	uxth	r3, r3
 8015e7e:	b21a      	sxth	r2, r3
 8015e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e82:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8015e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e86:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 8015e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e8c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8015e90:	429a      	cmp	r2, r3
 8015e92:	db7b      	blt.n	8015f8c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015e94:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015e96:	f004 fe1b 	bl	801aad0 <tcp_rexmit_rto_prepare>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d007      	beq.n	8015eb0 <tcp_slowtmr+0x220>
 8015ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d171      	bne.n	8015f8c <tcp_slowtmr+0x2fc>
 8015ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d06d      	beq.n	8015f8c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8015eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eb2:	7d1b      	ldrb	r3, [r3, #20]
 8015eb4:	2b02      	cmp	r3, #2
 8015eb6:	d03a      	beq.n	8015f2e <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015eba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8015ebe:	2b0c      	cmp	r3, #12
 8015ec0:	bf28      	it	cs
 8015ec2:	230c      	movcs	r3, #12
 8015ec4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015ecc:	10db      	asrs	r3, r3, #3
 8015ece:	b21b      	sxth	r3, r3
 8015ed0:	461a      	mov	r2, r3
 8015ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ed4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015ed8:	4413      	add	r3, r2
 8015eda:	7efa      	ldrb	r2, [r7, #27]
 8015edc:	4910      	ldr	r1, [pc, #64]	@ (8015f20 <tcp_slowtmr+0x290>)
 8015ede:	5c8a      	ldrb	r2, [r1, r2]
 8015ee0:	4093      	lsls	r3, r2
 8015ee2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8015eea:	4293      	cmp	r3, r2
 8015eec:	dc1a      	bgt.n	8015f24 <tcp_slowtmr+0x294>
 8015eee:	697b      	ldr	r3, [r7, #20]
 8015ef0:	b21a      	sxth	r2, r3
 8015ef2:	e019      	b.n	8015f28 <tcp_slowtmr+0x298>
 8015ef4:	200253a8 	.word	0x200253a8
 8015ef8:	200253be 	.word	0x200253be
 8015efc:	200253b4 	.word	0x200253b4
 8015f00:	08022948 	.word	0x08022948
 8015f04:	08022c8c 	.word	0x08022c8c
 8015f08:	0802298c 	.word	0x0802298c
 8015f0c:	08022cb8 	.word	0x08022cb8
 8015f10:	08022ce4 	.word	0x08022ce4
 8015f14:	08022d14 	.word	0x08022d14
 8015f18:	08022d48 	.word	0x08022d48
 8015f1c:	08024e94 	.word	0x08024e94
 8015f20:	08024e84 	.word	0x08024e84
 8015f24:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8015f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f2a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8015f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f30:	2200      	movs	r2, #0
 8015f32:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8015f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015f40:	4293      	cmp	r3, r2
 8015f42:	bf28      	it	cs
 8015f44:	4613      	movcs	r3, r2
 8015f46:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015f48:	8a7b      	ldrh	r3, [r7, #18]
 8015f4a:	085b      	lsrs	r3, r3, #1
 8015f4c:	b29a      	uxth	r2, r3
 8015f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f50:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015f54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f5e:	005b      	lsls	r3, r3, #1
 8015f60:	b29b      	uxth	r3, r3
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d206      	bcs.n	8015f74 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015f6a:	005b      	lsls	r3, r3, #1
 8015f6c:	b29a      	uxth	r2, r3
 8015f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f70:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8015f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f76:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 8015f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f7a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 8015f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f80:	2200      	movs	r2, #0
 8015f82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8015f86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015f88:	f004 fe12 	bl	801abb0 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 8015f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f8e:	7d1b      	ldrb	r3, [r3, #20]
 8015f90:	2b06      	cmp	r3, #6
 8015f92:	d111      	bne.n	8015fb8 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8015f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f96:	8b5b      	ldrh	r3, [r3, #26]
 8015f98:	f003 0310 	and.w	r3, r3, #16
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d00b      	beq.n	8015fb8 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015fa0:	4b9c      	ldr	r3, [pc, #624]	@ (8016214 <tcp_slowtmr+0x584>)
 8015fa2:	681a      	ldr	r2, [r3, #0]
 8015fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fa6:	6a1b      	ldr	r3, [r3, #32]
 8015fa8:	1ad3      	subs	r3, r2, r3
 8015faa:	2b28      	cmp	r3, #40	@ 0x28
 8015fac:	d904      	bls.n	8015fb8 <tcp_slowtmr+0x328>
          ++pcb_remove;
 8015fae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fb2:	3301      	adds	r3, #1
 8015fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fba:	7a5b      	ldrb	r3, [r3, #9]
 8015fbc:	f003 0308 	and.w	r3, r3, #8
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d04a      	beq.n	801605a <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8015fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fc6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015fc8:	2b04      	cmp	r3, #4
 8015fca:	d003      	beq.n	8015fd4 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8015fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fce:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015fd0:	2b07      	cmp	r3, #7
 8015fd2:	d142      	bne.n	801605a <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015fd4:	4b8f      	ldr	r3, [pc, #572]	@ (8016214 <tcp_slowtmr+0x584>)
 8015fd6:	681a      	ldr	r2, [r3, #0]
 8015fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fda:	6a1b      	ldr	r3, [r3, #32]
 8015fdc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015fe0:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8015fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8016218 <tcp_slowtmr+0x588>)
 8015fe6:	440b      	add	r3, r1
 8015fe8:	498c      	ldr	r1, [pc, #560]	@ (801621c <tcp_slowtmr+0x58c>)
 8015fea:	fba1 1303 	umull	r1, r3, r1, r3
 8015fee:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015ff0:	429a      	cmp	r2, r3
 8015ff2:	d90a      	bls.n	801600a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8015ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ff8:	3301      	adds	r3, #1
 8015ffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8015ffe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016002:	3301      	adds	r3, #1
 8016004:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016008:	e027      	b.n	801605a <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801600a:	4b82      	ldr	r3, [pc, #520]	@ (8016214 <tcp_slowtmr+0x584>)
 801600c:	681a      	ldr	r2, [r3, #0]
 801600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016010:	6a1b      	ldr	r3, [r3, #32]
 8016012:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016016:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801601a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801601c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016020:	4618      	mov	r0, r3
 8016022:	4b7f      	ldr	r3, [pc, #508]	@ (8016220 <tcp_slowtmr+0x590>)
 8016024:	fb00 f303 	mul.w	r3, r0, r3
 8016028:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801602a:	497c      	ldr	r1, [pc, #496]	@ (801621c <tcp_slowtmr+0x58c>)
 801602c:	fba1 1303 	umull	r1, r3, r1, r3
 8016030:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016032:	429a      	cmp	r2, r3
 8016034:	d911      	bls.n	801605a <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8016036:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016038:	f005 f8c8 	bl	801b1cc <tcp_keepalive>
 801603c:	4603      	mov	r3, r0
 801603e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8016042:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016046:	2b00      	cmp	r3, #0
 8016048:	d107      	bne.n	801605a <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801604a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801604c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8016050:	3301      	adds	r3, #1
 8016052:	b2da      	uxtb	r2, r3
 8016054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016056:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 801605a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801605c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801605e:	2b00      	cmp	r3, #0
 8016060:	d011      	beq.n	8016086 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8016062:	4b6c      	ldr	r3, [pc, #432]	@ (8016214 <tcp_slowtmr+0x584>)
 8016064:	681a      	ldr	r2, [r3, #0]
 8016066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016068:	6a1b      	ldr	r3, [r3, #32]
 801606a:	1ad2      	subs	r2, r2, r3
 801606c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801606e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016072:	4619      	mov	r1, r3
 8016074:	460b      	mov	r3, r1
 8016076:	005b      	lsls	r3, r3, #1
 8016078:	440b      	add	r3, r1
 801607a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801607c:	429a      	cmp	r2, r3
 801607e:	d302      	bcc.n	8016086 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8016080:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016082:	f000 fed5 	bl	8016e30 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8016086:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016088:	7d1b      	ldrb	r3, [r3, #20]
 801608a:	2b03      	cmp	r3, #3
 801608c:	d10b      	bne.n	80160a6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801608e:	4b61      	ldr	r3, [pc, #388]	@ (8016214 <tcp_slowtmr+0x584>)
 8016090:	681a      	ldr	r2, [r3, #0]
 8016092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016094:	6a1b      	ldr	r3, [r3, #32]
 8016096:	1ad3      	subs	r3, r2, r3
 8016098:	2b28      	cmp	r3, #40	@ 0x28
 801609a:	d904      	bls.n	80160a6 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801609c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80160a0:	3301      	adds	r3, #1
 80160a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80160a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160a8:	7d1b      	ldrb	r3, [r3, #20]
 80160aa:	2b09      	cmp	r3, #9
 80160ac:	d10b      	bne.n	80160c6 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80160ae:	4b59      	ldr	r3, [pc, #356]	@ (8016214 <tcp_slowtmr+0x584>)
 80160b0:	681a      	ldr	r2, [r3, #0]
 80160b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160b4:	6a1b      	ldr	r3, [r3, #32]
 80160b6:	1ad3      	subs	r3, r2, r3
 80160b8:	2bf0      	cmp	r3, #240	@ 0xf0
 80160ba:	d904      	bls.n	80160c6 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80160bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80160c0:	3301      	adds	r3, #1
 80160c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80160c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d060      	beq.n	8016190 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 80160ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80160d4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80160d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80160d8:	f000 fcf6 	bl	8016ac8 <tcp_pcb_purge>
      if (prev != NULL) {
 80160dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d010      	beq.n	8016104 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80160e2:	4b50      	ldr	r3, [pc, #320]	@ (8016224 <tcp_slowtmr+0x594>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80160e8:	429a      	cmp	r2, r3
 80160ea:	d106      	bne.n	80160fa <tcp_slowtmr+0x46a>
 80160ec:	4b4e      	ldr	r3, [pc, #312]	@ (8016228 <tcp_slowtmr+0x598>)
 80160ee:	f240 526d 	movw	r2, #1389	@ 0x56d
 80160f2:	494e      	ldr	r1, [pc, #312]	@ (801622c <tcp_slowtmr+0x59c>)
 80160f4:	484e      	ldr	r0, [pc, #312]	@ (8016230 <tcp_slowtmr+0x5a0>)
 80160f6:	f00a f8d1 	bl	802029c <iprintf>
        prev->next = pcb->next;
 80160fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80160fc:	68da      	ldr	r2, [r3, #12]
 80160fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016100:	60da      	str	r2, [r3, #12]
 8016102:	e00f      	b.n	8016124 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016104:	4b47      	ldr	r3, [pc, #284]	@ (8016224 <tcp_slowtmr+0x594>)
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801610a:	429a      	cmp	r2, r3
 801610c:	d006      	beq.n	801611c <tcp_slowtmr+0x48c>
 801610e:	4b46      	ldr	r3, [pc, #280]	@ (8016228 <tcp_slowtmr+0x598>)
 8016110:	f240 5271 	movw	r2, #1393	@ 0x571
 8016114:	4947      	ldr	r1, [pc, #284]	@ (8016234 <tcp_slowtmr+0x5a4>)
 8016116:	4846      	ldr	r0, [pc, #280]	@ (8016230 <tcp_slowtmr+0x5a0>)
 8016118:	f00a f8c0 	bl	802029c <iprintf>
        tcp_active_pcbs = pcb->next;
 801611c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801611e:	68db      	ldr	r3, [r3, #12]
 8016120:	4a40      	ldr	r2, [pc, #256]	@ (8016224 <tcp_slowtmr+0x594>)
 8016122:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8016124:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016128:	2b00      	cmp	r3, #0
 801612a:	d013      	beq.n	8016154 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801612c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801612e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8016130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016132:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8016134:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8016136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016138:	3304      	adds	r3, #4
 801613a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801613c:	8ad2      	ldrh	r2, [r2, #22]
 801613e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016140:	8b09      	ldrh	r1, [r1, #24]
 8016142:	9102      	str	r1, [sp, #8]
 8016144:	9201      	str	r2, [sp, #4]
 8016146:	9300      	str	r3, [sp, #0]
 8016148:	462b      	mov	r3, r5
 801614a:	4622      	mov	r2, r4
 801614c:	4601      	mov	r1, r0
 801614e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016150:	f004 ff88 	bl	801b064 <tcp_rst>
      err_arg = pcb->callback_arg;
 8016154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016156:	691b      	ldr	r3, [r3, #16]
 8016158:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801615a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801615c:	7d1b      	ldrb	r3, [r3, #20]
 801615e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8016160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016162:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8016164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016166:	68db      	ldr	r3, [r3, #12]
 8016168:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 801616a:	6838      	ldr	r0, [r7, #0]
 801616c:	f7ff f8b8 	bl	80152e0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8016170:	4b31      	ldr	r3, [pc, #196]	@ (8016238 <tcp_slowtmr+0x5a8>)
 8016172:	2200      	movs	r2, #0
 8016174:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d004      	beq.n	8016186 <tcp_slowtmr+0x4f6>
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	f06f 010c 	mvn.w	r1, #12
 8016182:	68b8      	ldr	r0, [r7, #8]
 8016184:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016186:	4b2c      	ldr	r3, [pc, #176]	@ (8016238 <tcp_slowtmr+0x5a8>)
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	2b00      	cmp	r3, #0
 801618c:	d037      	beq.n	80161fe <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801618e:	e592      	b.n	8015cb6 <tcp_slowtmr+0x26>
      prev = pcb;
 8016190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016192:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016196:	68db      	ldr	r3, [r3, #12]
 8016198:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801619a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801619c:	7f1b      	ldrb	r3, [r3, #28]
 801619e:	3301      	adds	r3, #1
 80161a0:	b2da      	uxtb	r2, r3
 80161a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161a4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80161a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161a8:	7f1a      	ldrb	r2, [r3, #28]
 80161aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161ac:	7f5b      	ldrb	r3, [r3, #29]
 80161ae:	429a      	cmp	r2, r3
 80161b0:	d325      	bcc.n	80161fe <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 80161b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161b4:	2200      	movs	r2, #0
 80161b6:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80161b8:	4b1f      	ldr	r3, [pc, #124]	@ (8016238 <tcp_slowtmr+0x5a8>)
 80161ba:	2200      	movs	r2, #0
 80161bc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80161be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d00b      	beq.n	80161e0 <tcp_slowtmr+0x550>
 80161c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80161ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80161d0:	6912      	ldr	r2, [r2, #16]
 80161d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80161d4:	4610      	mov	r0, r2
 80161d6:	4798      	blx	r3
 80161d8:	4603      	mov	r3, r0
 80161da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80161de:	e002      	b.n	80161e6 <tcp_slowtmr+0x556>
 80161e0:	2300      	movs	r3, #0
 80161e2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 80161e6:	4b14      	ldr	r3, [pc, #80]	@ (8016238 <tcp_slowtmr+0x5a8>)
 80161e8:	781b      	ldrb	r3, [r3, #0]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	f47f ad62 	bne.w	8015cb4 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80161f0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d102      	bne.n	80161fe <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80161f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80161fa:	f004 f96b 	bl	801a4d4 <tcp_output>
  while (pcb != NULL) {
 80161fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016200:	2b00      	cmp	r3, #0
 8016202:	f47f ad5e 	bne.w	8015cc2 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016206:	2300      	movs	r3, #0
 8016208:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801620a:	4b0c      	ldr	r3, [pc, #48]	@ (801623c <tcp_slowtmr+0x5ac>)
 801620c:	681b      	ldr	r3, [r3, #0]
 801620e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016210:	e069      	b.n	80162e6 <tcp_slowtmr+0x656>
 8016212:	bf00      	nop
 8016214:	200253a8 	.word	0x200253a8
 8016218:	000a4cb8 	.word	0x000a4cb8
 801621c:	10624dd3 	.word	0x10624dd3
 8016220:	000124f8 	.word	0x000124f8
 8016224:	200253b4 	.word	0x200253b4
 8016228:	08022948 	.word	0x08022948
 801622c:	08022d80 	.word	0x08022d80
 8016230:	0802298c 	.word	0x0802298c
 8016234:	08022dac 	.word	0x08022dac
 8016238:	200253bc 	.word	0x200253bc
 801623c:	200253b8 	.word	0x200253b8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8016240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016242:	7d1b      	ldrb	r3, [r3, #20]
 8016244:	2b0a      	cmp	r3, #10
 8016246:	d006      	beq.n	8016256 <tcp_slowtmr+0x5c6>
 8016248:	4b2b      	ldr	r3, [pc, #172]	@ (80162f8 <tcp_slowtmr+0x668>)
 801624a:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 801624e:	492b      	ldr	r1, [pc, #172]	@ (80162fc <tcp_slowtmr+0x66c>)
 8016250:	482b      	ldr	r0, [pc, #172]	@ (8016300 <tcp_slowtmr+0x670>)
 8016252:	f00a f823 	bl	802029c <iprintf>
    pcb_remove = 0;
 8016256:	2300      	movs	r3, #0
 8016258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801625c:	4b29      	ldr	r3, [pc, #164]	@ (8016304 <tcp_slowtmr+0x674>)
 801625e:	681a      	ldr	r2, [r3, #0]
 8016260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016262:	6a1b      	ldr	r3, [r3, #32]
 8016264:	1ad3      	subs	r3, r2, r3
 8016266:	2bf0      	cmp	r3, #240	@ 0xf0
 8016268:	d904      	bls.n	8016274 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 801626a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801626e:	3301      	adds	r3, #1
 8016270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8016274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016278:	2b00      	cmp	r3, #0
 801627a:	d02f      	beq.n	80162dc <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801627c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801627e:	f000 fc23 	bl	8016ac8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016284:	2b00      	cmp	r3, #0
 8016286:	d010      	beq.n	80162aa <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016288:	4b1f      	ldr	r3, [pc, #124]	@ (8016308 <tcp_slowtmr+0x678>)
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801628e:	429a      	cmp	r2, r3
 8016290:	d106      	bne.n	80162a0 <tcp_slowtmr+0x610>
 8016292:	4b19      	ldr	r3, [pc, #100]	@ (80162f8 <tcp_slowtmr+0x668>)
 8016294:	f240 52af 	movw	r2, #1455	@ 0x5af
 8016298:	491c      	ldr	r1, [pc, #112]	@ (801630c <tcp_slowtmr+0x67c>)
 801629a:	4819      	ldr	r0, [pc, #100]	@ (8016300 <tcp_slowtmr+0x670>)
 801629c:	f009 fffe 	bl	802029c <iprintf>
        prev->next = pcb->next;
 80162a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162a2:	68da      	ldr	r2, [r3, #12]
 80162a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162a6:	60da      	str	r2, [r3, #12]
 80162a8:	e00f      	b.n	80162ca <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80162aa:	4b17      	ldr	r3, [pc, #92]	@ (8016308 <tcp_slowtmr+0x678>)
 80162ac:	681b      	ldr	r3, [r3, #0]
 80162ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80162b0:	429a      	cmp	r2, r3
 80162b2:	d006      	beq.n	80162c2 <tcp_slowtmr+0x632>
 80162b4:	4b10      	ldr	r3, [pc, #64]	@ (80162f8 <tcp_slowtmr+0x668>)
 80162b6:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 80162ba:	4915      	ldr	r1, [pc, #84]	@ (8016310 <tcp_slowtmr+0x680>)
 80162bc:	4810      	ldr	r0, [pc, #64]	@ (8016300 <tcp_slowtmr+0x670>)
 80162be:	f009 ffed 	bl	802029c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80162c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162c4:	68db      	ldr	r3, [r3, #12]
 80162c6:	4a10      	ldr	r2, [pc, #64]	@ (8016308 <tcp_slowtmr+0x678>)
 80162c8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80162ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162cc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80162ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80162d4:	69f8      	ldr	r0, [r7, #28]
 80162d6:	f7ff f803 	bl	80152e0 <tcp_free>
 80162da:	e004      	b.n	80162e6 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 80162dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162de:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80162e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e2:	68db      	ldr	r3, [r3, #12]
 80162e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80162e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d1a9      	bne.n	8016240 <tcp_slowtmr+0x5b0>
    }
  }
}
 80162ec:	bf00      	nop
 80162ee:	bf00      	nop
 80162f0:	3730      	adds	r7, #48	@ 0x30
 80162f2:	46bd      	mov	sp, r7
 80162f4:	bdb0      	pop	{r4, r5, r7, pc}
 80162f6:	bf00      	nop
 80162f8:	08022948 	.word	0x08022948
 80162fc:	08022dd8 	.word	0x08022dd8
 8016300:	0802298c 	.word	0x0802298c
 8016304:	200253a8 	.word	0x200253a8
 8016308:	200253b8 	.word	0x200253b8
 801630c:	08022e08 	.word	0x08022e08
 8016310:	08022e30 	.word	0x08022e30

08016314 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b082      	sub	sp, #8
 8016318:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801631a:	4b2d      	ldr	r3, [pc, #180]	@ (80163d0 <tcp_fasttmr+0xbc>)
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	3301      	adds	r3, #1
 8016320:	b2da      	uxtb	r2, r3
 8016322:	4b2b      	ldr	r3, [pc, #172]	@ (80163d0 <tcp_fasttmr+0xbc>)
 8016324:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8016326:	4b2b      	ldr	r3, [pc, #172]	@ (80163d4 <tcp_fasttmr+0xc0>)
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801632c:	e048      	b.n	80163c0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	7f9a      	ldrb	r2, [r3, #30]
 8016332:	4b27      	ldr	r3, [pc, #156]	@ (80163d0 <tcp_fasttmr+0xbc>)
 8016334:	781b      	ldrb	r3, [r3, #0]
 8016336:	429a      	cmp	r2, r3
 8016338:	d03f      	beq.n	80163ba <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801633a:	4b25      	ldr	r3, [pc, #148]	@ (80163d0 <tcp_fasttmr+0xbc>)
 801633c:	781a      	ldrb	r2, [r3, #0]
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	8b5b      	ldrh	r3, [r3, #26]
 8016346:	f003 0301 	and.w	r3, r3, #1
 801634a:	2b00      	cmp	r3, #0
 801634c:	d010      	beq.n	8016370 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	8b5b      	ldrh	r3, [r3, #26]
 8016352:	f043 0302 	orr.w	r3, r3, #2
 8016356:	b29a      	uxth	r2, r3
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	f004 f8b9 	bl	801a4d4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	8b5b      	ldrh	r3, [r3, #26]
 8016366:	f023 0303 	bic.w	r3, r3, #3
 801636a:	b29a      	uxth	r2, r3
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	8b5b      	ldrh	r3, [r3, #26]
 8016374:	f003 0308 	and.w	r3, r3, #8
 8016378:	2b00      	cmp	r3, #0
 801637a:	d009      	beq.n	8016390 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	8b5b      	ldrh	r3, [r3, #26]
 8016380:	f023 0308 	bic.w	r3, r3, #8
 8016384:	b29a      	uxth	r2, r3
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f7ff f93c 	bl	8015608 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016390:	687b      	ldr	r3, [r7, #4]
 8016392:	68db      	ldr	r3, [r3, #12]
 8016394:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801639a:	2b00      	cmp	r3, #0
 801639c:	d00a      	beq.n	80163b4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801639e:	4b0e      	ldr	r3, [pc, #56]	@ (80163d8 <tcp_fasttmr+0xc4>)
 80163a0:	2200      	movs	r2, #0
 80163a2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80163a4:	6878      	ldr	r0, [r7, #4]
 80163a6:	f000 f819 	bl	80163dc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80163aa:	4b0b      	ldr	r3, [pc, #44]	@ (80163d8 <tcp_fasttmr+0xc4>)
 80163ac:	781b      	ldrb	r3, [r3, #0]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d000      	beq.n	80163b4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80163b2:	e7b8      	b.n	8016326 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	607b      	str	r3, [r7, #4]
 80163b8:	e002      	b.n	80163c0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d1b3      	bne.n	801632e <tcp_fasttmr+0x1a>
    }
  }
}
 80163c6:	bf00      	nop
 80163c8:	bf00      	nop
 80163ca:	3708      	adds	r7, #8
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	200253be 	.word	0x200253be
 80163d4:	200253b4 	.word	0x200253b4
 80163d8:	200253bc 	.word	0x200253bc

080163dc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80163dc:	b590      	push	{r4, r7, lr}
 80163de:	b085      	sub	sp, #20
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d109      	bne.n	80163fe <tcp_process_refused_data+0x22>
 80163ea:	4b37      	ldr	r3, [pc, #220]	@ (80164c8 <tcp_process_refused_data+0xec>)
 80163ec:	f240 6209 	movw	r2, #1545	@ 0x609
 80163f0:	4936      	ldr	r1, [pc, #216]	@ (80164cc <tcp_process_refused_data+0xf0>)
 80163f2:	4837      	ldr	r0, [pc, #220]	@ (80164d0 <tcp_process_refused_data+0xf4>)
 80163f4:	f009 ff52 	bl	802029c <iprintf>
 80163f8:	f06f 030f 	mvn.w	r3, #15
 80163fc:	e060      	b.n	80164c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016402:	7b5b      	ldrb	r3, [r3, #13]
 8016404:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801640a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2200      	movs	r2, #0
 8016410:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016418:	2b00      	cmp	r3, #0
 801641a:	d00b      	beq.n	8016434 <tcp_process_refused_data+0x58>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	6918      	ldr	r0, [r3, #16]
 8016426:	2300      	movs	r3, #0
 8016428:	68ba      	ldr	r2, [r7, #8]
 801642a:	6879      	ldr	r1, [r7, #4]
 801642c:	47a0      	blx	r4
 801642e:	4603      	mov	r3, r0
 8016430:	73fb      	strb	r3, [r7, #15]
 8016432:	e007      	b.n	8016444 <tcp_process_refused_data+0x68>
 8016434:	2300      	movs	r3, #0
 8016436:	68ba      	ldr	r2, [r7, #8]
 8016438:	6879      	ldr	r1, [r7, #4]
 801643a:	2000      	movs	r0, #0
 801643c:	f000 f8a4 	bl	8016588 <tcp_recv_null>
 8016440:	4603      	mov	r3, r0
 8016442:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016444:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d12a      	bne.n	80164a2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801644c:	7bbb      	ldrb	r3, [r7, #14]
 801644e:	f003 0320 	and.w	r3, r3, #32
 8016452:	2b00      	cmp	r3, #0
 8016454:	d033      	beq.n	80164be <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801645a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801645e:	d005      	beq.n	801646c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016464:	3301      	adds	r3, #1
 8016466:	b29a      	uxth	r2, r3
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016472:	2b00      	cmp	r3, #0
 8016474:	d00b      	beq.n	801648e <tcp_process_refused_data+0xb2>
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	6918      	ldr	r0, [r3, #16]
 8016480:	2300      	movs	r3, #0
 8016482:	2200      	movs	r2, #0
 8016484:	6879      	ldr	r1, [r7, #4]
 8016486:	47a0      	blx	r4
 8016488:	4603      	mov	r3, r0
 801648a:	73fb      	strb	r3, [r7, #15]
 801648c:	e001      	b.n	8016492 <tcp_process_refused_data+0xb6>
 801648e:	2300      	movs	r3, #0
 8016490:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016496:	f113 0f0d 	cmn.w	r3, #13
 801649a:	d110      	bne.n	80164be <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801649c:	f06f 030c 	mvn.w	r3, #12
 80164a0:	e00e      	b.n	80164c0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80164a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80164a6:	f113 0f0d 	cmn.w	r3, #13
 80164aa:	d102      	bne.n	80164b2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80164ac:	f06f 030c 	mvn.w	r3, #12
 80164b0:	e006      	b.n	80164c0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	68ba      	ldr	r2, [r7, #8]
 80164b6:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 80164b8:	f06f 0304 	mvn.w	r3, #4
 80164bc:	e000      	b.n	80164c0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80164be:	2300      	movs	r3, #0
}
 80164c0:	4618      	mov	r0, r3
 80164c2:	3714      	adds	r7, #20
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd90      	pop	{r4, r7, pc}
 80164c8:	08022948 	.word	0x08022948
 80164cc:	08022e58 	.word	0x08022e58
 80164d0:	0802298c 	.word	0x0802298c

080164d4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b084      	sub	sp, #16
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80164dc:	e007      	b.n	80164ee <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80164de:	687b      	ldr	r3, [r7, #4]
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80164e4:	6878      	ldr	r0, [r7, #4]
 80164e6:	f000 f80a 	bl	80164fe <tcp_seg_free>
    seg = next;
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d1f4      	bne.n	80164de <tcp_segs_free+0xa>
  }
}
 80164f4:	bf00      	nop
 80164f6:	bf00      	nop
 80164f8:	3710      	adds	r7, #16
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}

080164fe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80164fe:	b580      	push	{r7, lr}
 8016500:	b082      	sub	sp, #8
 8016502:	af00      	add	r7, sp, #0
 8016504:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d00c      	beq.n	8016526 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	2b00      	cmp	r3, #0
 8016512:	d004      	beq.n	801651e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	685b      	ldr	r3, [r3, #4]
 8016518:	4618      	mov	r0, r3
 801651a:	f7fe fc1d 	bl	8014d58 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801651e:	6879      	ldr	r1, [r7, #4]
 8016520:	2003      	movs	r0, #3
 8016522:	f7fd fd75 	bl	8014010 <memp_free>
  }
}
 8016526:	bf00      	nop
 8016528:	3708      	adds	r7, #8
 801652a:	46bd      	mov	sp, r7
 801652c:	bd80      	pop	{r7, pc}
	...

08016530 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b084      	sub	sp, #16
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d106      	bne.n	801654c <tcp_seg_copy+0x1c>
 801653e:	4b0f      	ldr	r3, [pc, #60]	@ (801657c <tcp_seg_copy+0x4c>)
 8016540:	f240 6282 	movw	r2, #1666	@ 0x682
 8016544:	490e      	ldr	r1, [pc, #56]	@ (8016580 <tcp_seg_copy+0x50>)
 8016546:	480f      	ldr	r0, [pc, #60]	@ (8016584 <tcp_seg_copy+0x54>)
 8016548:	f009 fea8 	bl	802029c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801654c:	2003      	movs	r0, #3
 801654e:	f7fd fce3 	bl	8013f18 <memp_malloc>
 8016552:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d101      	bne.n	801655e <tcp_seg_copy+0x2e>
    return NULL;
 801655a:	2300      	movs	r3, #0
 801655c:	e00a      	b.n	8016574 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801655e:	2210      	movs	r2, #16
 8016560:	6879      	ldr	r1, [r7, #4]
 8016562:	68f8      	ldr	r0, [r7, #12]
 8016564:	f00a f8c5 	bl	80206f2 <memcpy>
  pbuf_ref(cseg->p);
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	685b      	ldr	r3, [r3, #4]
 801656c:	4618      	mov	r0, r3
 801656e:	f7fe fc99 	bl	8014ea4 <pbuf_ref>
  return cseg;
 8016572:	68fb      	ldr	r3, [r7, #12]
}
 8016574:	4618      	mov	r0, r3
 8016576:	3710      	adds	r7, #16
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}
 801657c:	08022948 	.word	0x08022948
 8016580:	08022e9c 	.word	0x08022e9c
 8016584:	0802298c 	.word	0x0802298c

08016588 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b084      	sub	sp, #16
 801658c:	af00      	add	r7, sp, #0
 801658e:	60f8      	str	r0, [r7, #12]
 8016590:	60b9      	str	r1, [r7, #8]
 8016592:	607a      	str	r2, [r7, #4]
 8016594:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016596:	68bb      	ldr	r3, [r7, #8]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d109      	bne.n	80165b0 <tcp_recv_null+0x28>
 801659c:	4b12      	ldr	r3, [pc, #72]	@ (80165e8 <tcp_recv_null+0x60>)
 801659e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80165a2:	4912      	ldr	r1, [pc, #72]	@ (80165ec <tcp_recv_null+0x64>)
 80165a4:	4812      	ldr	r0, [pc, #72]	@ (80165f0 <tcp_recv_null+0x68>)
 80165a6:	f009 fe79 	bl	802029c <iprintf>
 80165aa:	f06f 030f 	mvn.w	r3, #15
 80165ae:	e016      	b.n	80165de <tcp_recv_null+0x56>

  if (p != NULL) {
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d009      	beq.n	80165ca <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	891b      	ldrh	r3, [r3, #8]
 80165ba:	4619      	mov	r1, r3
 80165bc:	68b8      	ldr	r0, [r7, #8]
 80165be:	f7ff fad1 	bl	8015b64 <tcp_recved>
    pbuf_free(p);
 80165c2:	6878      	ldr	r0, [r7, #4]
 80165c4:	f7fe fbc8 	bl	8014d58 <pbuf_free>
 80165c8:	e008      	b.n	80165dc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80165ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d104      	bne.n	80165dc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80165d2:	68b8      	ldr	r0, [r7, #8]
 80165d4:	f7ff f882 	bl	80156dc <tcp_close>
 80165d8:	4603      	mov	r3, r0
 80165da:	e000      	b.n	80165de <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80165dc:	2300      	movs	r3, #0
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3710      	adds	r7, #16
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop
 80165e8:	08022948 	.word	0x08022948
 80165ec:	08022eb8 	.word	0x08022eb8
 80165f0:	0802298c 	.word	0x0802298c

080165f4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b086      	sub	sp, #24
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	4603      	mov	r3, r0
 80165fc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80165fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016602:	2b00      	cmp	r3, #0
 8016604:	db01      	blt.n	801660a <tcp_kill_prio+0x16>
 8016606:	79fb      	ldrb	r3, [r7, #7]
 8016608:	e000      	b.n	801660c <tcp_kill_prio+0x18>
 801660a:	237f      	movs	r3, #127	@ 0x7f
 801660c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801660e:	7afb      	ldrb	r3, [r7, #11]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d034      	beq.n	801667e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016614:	7afb      	ldrb	r3, [r7, #11]
 8016616:	3b01      	subs	r3, #1
 8016618:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801661a:	2300      	movs	r3, #0
 801661c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801661e:	2300      	movs	r3, #0
 8016620:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016622:	4b19      	ldr	r3, [pc, #100]	@ (8016688 <tcp_kill_prio+0x94>)
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	617b      	str	r3, [r7, #20]
 8016628:	e01f      	b.n	801666a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801662a:	697b      	ldr	r3, [r7, #20]
 801662c:	7d5b      	ldrb	r3, [r3, #21]
 801662e:	7afa      	ldrb	r2, [r7, #11]
 8016630:	429a      	cmp	r2, r3
 8016632:	d80c      	bhi.n	801664e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016638:	7afa      	ldrb	r2, [r7, #11]
 801663a:	429a      	cmp	r2, r3
 801663c:	d112      	bne.n	8016664 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801663e:	4b13      	ldr	r3, [pc, #76]	@ (801668c <tcp_kill_prio+0x98>)
 8016640:	681a      	ldr	r2, [r3, #0]
 8016642:	697b      	ldr	r3, [r7, #20]
 8016644:	6a1b      	ldr	r3, [r3, #32]
 8016646:	1ad3      	subs	r3, r2, r3
 8016648:	68fa      	ldr	r2, [r7, #12]
 801664a:	429a      	cmp	r2, r3
 801664c:	d80a      	bhi.n	8016664 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801664e:	4b0f      	ldr	r3, [pc, #60]	@ (801668c <tcp_kill_prio+0x98>)
 8016650:	681a      	ldr	r2, [r3, #0]
 8016652:	697b      	ldr	r3, [r7, #20]
 8016654:	6a1b      	ldr	r3, [r3, #32]
 8016656:	1ad3      	subs	r3, r2, r3
 8016658:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801665a:	697b      	ldr	r3, [r7, #20]
 801665c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801665e:	697b      	ldr	r3, [r7, #20]
 8016660:	7d5b      	ldrb	r3, [r3, #21]
 8016662:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	68db      	ldr	r3, [r3, #12]
 8016668:	617b      	str	r3, [r7, #20]
 801666a:	697b      	ldr	r3, [r7, #20]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d1dc      	bne.n	801662a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016670:	693b      	ldr	r3, [r7, #16]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d004      	beq.n	8016680 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016676:	6938      	ldr	r0, [r7, #16]
 8016678:	f7ff f976 	bl	8015968 <tcp_abort>
 801667c:	e000      	b.n	8016680 <tcp_kill_prio+0x8c>
    return;
 801667e:	bf00      	nop
  }
}
 8016680:	3718      	adds	r7, #24
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}
 8016686:	bf00      	nop
 8016688:	200253b4 	.word	0x200253b4
 801668c:	200253a8 	.word	0x200253a8

08016690 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b086      	sub	sp, #24
 8016694:	af00      	add	r7, sp, #0
 8016696:	4603      	mov	r3, r0
 8016698:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801669a:	79fb      	ldrb	r3, [r7, #7]
 801669c:	2b08      	cmp	r3, #8
 801669e:	d009      	beq.n	80166b4 <tcp_kill_state+0x24>
 80166a0:	79fb      	ldrb	r3, [r7, #7]
 80166a2:	2b09      	cmp	r3, #9
 80166a4:	d006      	beq.n	80166b4 <tcp_kill_state+0x24>
 80166a6:	4b1a      	ldr	r3, [pc, #104]	@ (8016710 <tcp_kill_state+0x80>)
 80166a8:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 80166ac:	4919      	ldr	r1, [pc, #100]	@ (8016714 <tcp_kill_state+0x84>)
 80166ae:	481a      	ldr	r0, [pc, #104]	@ (8016718 <tcp_kill_state+0x88>)
 80166b0:	f009 fdf4 	bl	802029c <iprintf>

  inactivity = 0;
 80166b4:	2300      	movs	r3, #0
 80166b6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80166b8:	2300      	movs	r3, #0
 80166ba:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166bc:	4b17      	ldr	r3, [pc, #92]	@ (801671c <tcp_kill_state+0x8c>)
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	617b      	str	r3, [r7, #20]
 80166c2:	e017      	b.n	80166f4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80166c4:	697b      	ldr	r3, [r7, #20]
 80166c6:	7d1b      	ldrb	r3, [r3, #20]
 80166c8:	79fa      	ldrb	r2, [r7, #7]
 80166ca:	429a      	cmp	r2, r3
 80166cc:	d10f      	bne.n	80166ee <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80166ce:	4b14      	ldr	r3, [pc, #80]	@ (8016720 <tcp_kill_state+0x90>)
 80166d0:	681a      	ldr	r2, [r3, #0]
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	6a1b      	ldr	r3, [r3, #32]
 80166d6:	1ad3      	subs	r3, r2, r3
 80166d8:	68fa      	ldr	r2, [r7, #12]
 80166da:	429a      	cmp	r2, r3
 80166dc:	d807      	bhi.n	80166ee <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80166de:	4b10      	ldr	r3, [pc, #64]	@ (8016720 <tcp_kill_state+0x90>)
 80166e0:	681a      	ldr	r2, [r3, #0]
 80166e2:	697b      	ldr	r3, [r7, #20]
 80166e4:	6a1b      	ldr	r3, [r3, #32]
 80166e6:	1ad3      	subs	r3, r2, r3
 80166e8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80166ea:	697b      	ldr	r3, [r7, #20]
 80166ec:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	68db      	ldr	r3, [r3, #12]
 80166f2:	617b      	str	r3, [r7, #20]
 80166f4:	697b      	ldr	r3, [r7, #20]
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d1e4      	bne.n	80166c4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80166fa:	693b      	ldr	r3, [r7, #16]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d003      	beq.n	8016708 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016700:	2100      	movs	r1, #0
 8016702:	6938      	ldr	r0, [r7, #16]
 8016704:	f7ff f872 	bl	80157ec <tcp_abandon>
  }
}
 8016708:	bf00      	nop
 801670a:	3718      	adds	r7, #24
 801670c:	46bd      	mov	sp, r7
 801670e:	bd80      	pop	{r7, pc}
 8016710:	08022948 	.word	0x08022948
 8016714:	08022ed4 	.word	0x08022ed4
 8016718:	0802298c 	.word	0x0802298c
 801671c:	200253b4 	.word	0x200253b4
 8016720:	200253a8 	.word	0x200253a8

08016724 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b084      	sub	sp, #16
 8016728:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801672a:	2300      	movs	r3, #0
 801672c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801672e:	2300      	movs	r3, #0
 8016730:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016732:	4b12      	ldr	r3, [pc, #72]	@ (801677c <tcp_kill_timewait+0x58>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	60fb      	str	r3, [r7, #12]
 8016738:	e012      	b.n	8016760 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801673a:	4b11      	ldr	r3, [pc, #68]	@ (8016780 <tcp_kill_timewait+0x5c>)
 801673c:	681a      	ldr	r2, [r3, #0]
 801673e:	68fb      	ldr	r3, [r7, #12]
 8016740:	6a1b      	ldr	r3, [r3, #32]
 8016742:	1ad3      	subs	r3, r2, r3
 8016744:	687a      	ldr	r2, [r7, #4]
 8016746:	429a      	cmp	r2, r3
 8016748:	d807      	bhi.n	801675a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801674a:	4b0d      	ldr	r3, [pc, #52]	@ (8016780 <tcp_kill_timewait+0x5c>)
 801674c:	681a      	ldr	r2, [r3, #0]
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	6a1b      	ldr	r3, [r3, #32]
 8016752:	1ad3      	subs	r3, r2, r3
 8016754:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016756:	68fb      	ldr	r3, [r7, #12]
 8016758:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	68db      	ldr	r3, [r3, #12]
 801675e:	60fb      	str	r3, [r7, #12]
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d1e9      	bne.n	801673a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016766:	68bb      	ldr	r3, [r7, #8]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d002      	beq.n	8016772 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801676c:	68b8      	ldr	r0, [r7, #8]
 801676e:	f7ff f8fb 	bl	8015968 <tcp_abort>
  }
}
 8016772:	bf00      	nop
 8016774:	3710      	adds	r7, #16
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
 801677a:	bf00      	nop
 801677c:	200253b8 	.word	0x200253b8
 8016780:	200253a8 	.word	0x200253a8

08016784 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b082      	sub	sp, #8
 8016788:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801678a:	4b10      	ldr	r3, [pc, #64]	@ (80167cc <tcp_handle_closepend+0x48>)
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016790:	e014      	b.n	80167bc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	68db      	ldr	r3, [r3, #12]
 8016796:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	8b5b      	ldrh	r3, [r3, #26]
 801679c:	f003 0308 	and.w	r3, r3, #8
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d009      	beq.n	80167b8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	8b5b      	ldrh	r3, [r3, #26]
 80167a8:	f023 0308 	bic.w	r3, r3, #8
 80167ac:	b29a      	uxth	r2, r3
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80167b2:	6878      	ldr	r0, [r7, #4]
 80167b4:	f7fe ff28 	bl	8015608 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80167b8:	683b      	ldr	r3, [r7, #0]
 80167ba:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d1e7      	bne.n	8016792 <tcp_handle_closepend+0xe>
  }
}
 80167c2:	bf00      	nop
 80167c4:	bf00      	nop
 80167c6:	3708      	adds	r7, #8
 80167c8:	46bd      	mov	sp, r7
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	200253b4 	.word	0x200253b4

080167d0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b084      	sub	sp, #16
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	4603      	mov	r3, r0
 80167d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167da:	2001      	movs	r0, #1
 80167dc:	f7fd fb9c 	bl	8013f18 <memp_malloc>
 80167e0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	d14e      	bne.n	8016886 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80167e8:	f7ff ffcc 	bl	8016784 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80167ec:	f7ff ff9a 	bl	8016724 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80167f0:	2001      	movs	r0, #1
 80167f2:	f7fd fb91 	bl	8013f18 <memp_malloc>
 80167f6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d139      	bne.n	8016872 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80167fe:	2009      	movs	r0, #9
 8016800:	f7ff ff46 	bl	8016690 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016804:	2001      	movs	r0, #1
 8016806:	f7fd fb87 	bl	8013f18 <memp_malloc>
 801680a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801680c:	68fb      	ldr	r3, [r7, #12]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d125      	bne.n	801685e <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016812:	2008      	movs	r0, #8
 8016814:	f7ff ff3c 	bl	8016690 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016818:	2001      	movs	r0, #1
 801681a:	f7fd fb7d 	bl	8013f18 <memp_malloc>
 801681e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	2b00      	cmp	r3, #0
 8016824:	d111      	bne.n	801684a <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016826:	79fb      	ldrb	r3, [r7, #7]
 8016828:	4618      	mov	r0, r3
 801682a:	f7ff fee3 	bl	80165f4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801682e:	2001      	movs	r0, #1
 8016830:	f7fd fb72 	bl	8013f18 <memp_malloc>
 8016834:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d006      	beq.n	801684a <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801683c:	4b36      	ldr	r3, [pc, #216]	@ (8016918 <tcp_alloc+0x148>)
 801683e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016842:	881a      	ldrh	r2, [r3, #0]
 8016844:	3a01      	subs	r2, #1
 8016846:	b292      	uxth	r2, r2
 8016848:	801a      	strh	r2, [r3, #0]
          }
        }
        if (pcb != NULL) {
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d006      	beq.n	801685e <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016850:	4b31      	ldr	r3, [pc, #196]	@ (8016918 <tcp_alloc+0x148>)
 8016852:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8016856:	881a      	ldrh	r2, [r3, #0]
 8016858:	3a01      	subs	r2, #1
 801685a:	b292      	uxth	r2, r2
 801685c:	801a      	strh	r2, [r3, #0]
        }
      }
      if (pcb != NULL) {
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d006      	beq.n	8016872 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016864:	4b2c      	ldr	r3, [pc, #176]	@ (8016918 <tcp_alloc+0x148>)
 8016866:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801686a:	881a      	ldrh	r2, [r3, #0]
 801686c:	3a01      	subs	r2, #1
 801686e:	b292      	uxth	r2, r2
 8016870:	801a      	strh	r2, [r3, #0]
      }
    }
    if (pcb != NULL) {
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	2b00      	cmp	r3, #0
 8016876:	d006      	beq.n	8016886 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016878:	4b27      	ldr	r3, [pc, #156]	@ (8016918 <tcp_alloc+0x148>)
 801687a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801687e:	881a      	ldrh	r2, [r3, #0]
 8016880:	3a01      	subs	r2, #1
 8016882:	b292      	uxth	r2, r2
 8016884:	801a      	strh	r2, [r3, #0]
    }
  }
  if (pcb != NULL) {
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d03f      	beq.n	801690c <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801688c:	229c      	movs	r2, #156	@ 0x9c
 801688e:	2100      	movs	r1, #0
 8016890:	68f8      	ldr	r0, [r7, #12]
 8016892:	f009 fe5b 	bl	802054c <memset>
    pcb->prio = prio;
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	79fa      	ldrb	r2, [r7, #7]
 801689a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801689c:	68fb      	ldr	r3, [r7, #12]
 801689e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80168a2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80168ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80168b2:	68fb      	ldr	r3, [r7, #12]
 80168b4:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	22ff      	movs	r2, #255	@ 0xff
 80168ba:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80168c2:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	2206      	movs	r2, #6
 80168c8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	2206      	movs	r2, #6
 80168d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80168d2:	68fb      	ldr	r3, [r7, #12]
 80168d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80168d8:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	2201      	movs	r2, #1
 80168de:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80168e2:	4b0e      	ldr	r3, [pc, #56]	@ (801691c <tcp_alloc+0x14c>)
 80168e4:	681a      	ldr	r2, [r3, #0]
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80168ea:	4b0d      	ldr	r3, [pc, #52]	@ (8016920 <tcp_alloc+0x150>)
 80168ec:	781a      	ldrb	r2, [r3, #0]
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80168f8:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	4a09      	ldr	r2, [pc, #36]	@ (8016924 <tcp_alloc+0x154>)
 8016900:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016904:	68fb      	ldr	r3, [r7, #12]
 8016906:	4a08      	ldr	r2, [pc, #32]	@ (8016928 <tcp_alloc+0x158>)
 8016908:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801690c:	68fb      	ldr	r3, [r7, #12]
}
 801690e:	4618      	mov	r0, r3
 8016910:	3710      	adds	r7, #16
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	200252ac 	.word	0x200252ac
 801691c:	200253a8 	.word	0x200253a8
 8016920:	200253be 	.word	0x200253be
 8016924:	08016589 	.word	0x08016589
 8016928:	006ddd00 	.word	0x006ddd00

0801692c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801692c:	b580      	push	{r7, lr}
 801692e:	b084      	sub	sp, #16
 8016930:	af00      	add	r7, sp, #0
 8016932:	4603      	mov	r3, r0
 8016934:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016936:	2040      	movs	r0, #64	@ 0x40
 8016938:	f7ff ff4a 	bl	80167d0 <tcp_alloc>
 801693c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801693e:	68fb      	ldr	r3, [r7, #12]
}
 8016940:	4618      	mov	r0, r3
 8016942:	3710      	adds	r7, #16
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}

08016948 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016948:	b480      	push	{r7}
 801694a:	b083      	sub	sp, #12
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
 8016950:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d002      	beq.n	801695e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	683a      	ldr	r2, [r7, #0]
 801695c:	611a      	str	r2, [r3, #16]
  }
}
 801695e:	bf00      	nop
 8016960:	370c      	adds	r7, #12
 8016962:	46bd      	mov	sp, r7
 8016964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016968:	4770      	bx	lr
	...

0801696c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b082      	sub	sp, #8
 8016970:	af00      	add	r7, sp, #0
 8016972:	6078      	str	r0, [r7, #4]
 8016974:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d00e      	beq.n	801699a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	7d1b      	ldrb	r3, [r3, #20]
 8016980:	2b01      	cmp	r3, #1
 8016982:	d106      	bne.n	8016992 <tcp_recv+0x26>
 8016984:	4b07      	ldr	r3, [pc, #28]	@ (80169a4 <tcp_recv+0x38>)
 8016986:	f240 72df 	movw	r2, #2015	@ 0x7df
 801698a:	4907      	ldr	r1, [pc, #28]	@ (80169a8 <tcp_recv+0x3c>)
 801698c:	4807      	ldr	r0, [pc, #28]	@ (80169ac <tcp_recv+0x40>)
 801698e:	f009 fc85 	bl	802029c <iprintf>
    pcb->recv = recv;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	683a      	ldr	r2, [r7, #0]
 8016996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801699a:	bf00      	nop
 801699c:	3708      	adds	r7, #8
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}
 80169a2:	bf00      	nop
 80169a4:	08022948 	.word	0x08022948
 80169a8:	08022ee4 	.word	0x08022ee4
 80169ac:	0802298c 	.word	0x0802298c

080169b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b082      	sub	sp, #8
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
 80169b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	d00e      	beq.n	80169de <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	7d1b      	ldrb	r3, [r3, #20]
 80169c4:	2b01      	cmp	r3, #1
 80169c6:	d106      	bne.n	80169d6 <tcp_sent+0x26>
 80169c8:	4b07      	ldr	r3, [pc, #28]	@ (80169e8 <tcp_sent+0x38>)
 80169ca:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 80169ce:	4907      	ldr	r1, [pc, #28]	@ (80169ec <tcp_sent+0x3c>)
 80169d0:	4807      	ldr	r0, [pc, #28]	@ (80169f0 <tcp_sent+0x40>)
 80169d2:	f009 fc63 	bl	802029c <iprintf>
    pcb->sent = sent;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	683a      	ldr	r2, [r7, #0]
 80169da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80169de:	bf00      	nop
 80169e0:	3708      	adds	r7, #8
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bd80      	pop	{r7, pc}
 80169e6:	bf00      	nop
 80169e8:	08022948 	.word	0x08022948
 80169ec:	08022f0c 	.word	0x08022f0c
 80169f0:	0802298c 	.word	0x0802298c

080169f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80169f4:	b580      	push	{r7, lr}
 80169f6:	b082      	sub	sp, #8
 80169f8:	af00      	add	r7, sp, #0
 80169fa:	6078      	str	r0, [r7, #4]
 80169fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d00e      	beq.n	8016a22 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	7d1b      	ldrb	r3, [r3, #20]
 8016a08:	2b01      	cmp	r3, #1
 8016a0a:	d106      	bne.n	8016a1a <tcp_err+0x26>
 8016a0c:	4b07      	ldr	r3, [pc, #28]	@ (8016a2c <tcp_err+0x38>)
 8016a0e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8016a12:	4907      	ldr	r1, [pc, #28]	@ (8016a30 <tcp_err+0x3c>)
 8016a14:	4807      	ldr	r0, [pc, #28]	@ (8016a34 <tcp_err+0x40>)
 8016a16:	f009 fc41 	bl	802029c <iprintf>
    pcb->errf = err;
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	683a      	ldr	r2, [r7, #0]
 8016a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8016a22:	bf00      	nop
 8016a24:	3708      	adds	r7, #8
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bd80      	pop	{r7, pc}
 8016a2a:	bf00      	nop
 8016a2c:	08022948 	.word	0x08022948
 8016a30:	08022f34 	.word	0x08022f34
 8016a34:	0802298c 	.word	0x0802298c

08016a38 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8016a38:	b480      	push	{r7}
 8016a3a:	b085      	sub	sp, #20
 8016a3c:	af00      	add	r7, sp, #0
 8016a3e:	6078      	str	r0, [r7, #4]
 8016a40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d008      	beq.n	8016a5a <tcp_accept+0x22>
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	7d1b      	ldrb	r3, [r3, #20]
 8016a4c:	2b01      	cmp	r3, #1
 8016a4e:	d104      	bne.n	8016a5a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	683a      	ldr	r2, [r7, #0]
 8016a58:	619a      	str	r2, [r3, #24]
  }
}
 8016a5a:	bf00      	nop
 8016a5c:	3714      	adds	r7, #20
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a64:	4770      	bx	lr
	...

08016a68 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b084      	sub	sp, #16
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	60f8      	str	r0, [r7, #12]
 8016a70:	60b9      	str	r1, [r7, #8]
 8016a72:	4613      	mov	r3, r2
 8016a74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d107      	bne.n	8016a8c <tcp_poll+0x24>
 8016a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8016ab8 <tcp_poll+0x50>)
 8016a7e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8016a82:	490e      	ldr	r1, [pc, #56]	@ (8016abc <tcp_poll+0x54>)
 8016a84:	480e      	ldr	r0, [pc, #56]	@ (8016ac0 <tcp_poll+0x58>)
 8016a86:	f009 fc09 	bl	802029c <iprintf>
 8016a8a:	e011      	b.n	8016ab0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	7d1b      	ldrb	r3, [r3, #20]
 8016a90:	2b01      	cmp	r3, #1
 8016a92:	d106      	bne.n	8016aa2 <tcp_poll+0x3a>
 8016a94:	4b08      	ldr	r3, [pc, #32]	@ (8016ab8 <tcp_poll+0x50>)
 8016a96:	f640 023e 	movw	r2, #2110	@ 0x83e
 8016a9a:	490a      	ldr	r1, [pc, #40]	@ (8016ac4 <tcp_poll+0x5c>)
 8016a9c:	4808      	ldr	r0, [pc, #32]	@ (8016ac0 <tcp_poll+0x58>)
 8016a9e:	f009 fbfd 	bl	802029c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	68ba      	ldr	r2, [r7, #8]
 8016aa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8016aaa:	68fb      	ldr	r3, [r7, #12]
 8016aac:	79fa      	ldrb	r2, [r7, #7]
 8016aae:	775a      	strb	r2, [r3, #29]
}
 8016ab0:	3710      	adds	r7, #16
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}
 8016ab6:	bf00      	nop
 8016ab8:	08022948 	.word	0x08022948
 8016abc:	08022f5c 	.word	0x08022f5c
 8016ac0:	0802298c 	.word	0x0802298c
 8016ac4:	08022f74 	.word	0x08022f74

08016ac8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d107      	bne.n	8016ae6 <tcp_pcb_purge+0x1e>
 8016ad6:	4b21      	ldr	r3, [pc, #132]	@ (8016b5c <tcp_pcb_purge+0x94>)
 8016ad8:	f640 0251 	movw	r2, #2129	@ 0x851
 8016adc:	4920      	ldr	r1, [pc, #128]	@ (8016b60 <tcp_pcb_purge+0x98>)
 8016ade:	4821      	ldr	r0, [pc, #132]	@ (8016b64 <tcp_pcb_purge+0x9c>)
 8016ae0:	f009 fbdc 	bl	802029c <iprintf>
 8016ae4:	e037      	b.n	8016b56 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	7d1b      	ldrb	r3, [r3, #20]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d033      	beq.n	8016b56 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016af2:	2b0a      	cmp	r3, #10
 8016af4:	d02f      	beq.n	8016b56 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	d02b      	beq.n	8016b56 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d007      	beq.n	8016b16 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7fe f924 	bl	8014d58 <pbuf_free>
      pcb->refused_data = NULL;
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	2200      	movs	r2, #0
 8016b14:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	d002      	beq.n	8016b24 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f000 f986 	bl	8016e30 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016b2a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b30:	4618      	mov	r0, r3
 8016b32:	f7ff fccf 	bl	80164d4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	f7ff fcca 	bl	80164d4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	2200      	movs	r2, #0
 8016b44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2200      	movs	r2, #0
 8016b52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8016b56:	3708      	adds	r7, #8
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}
 8016b5c:	08022948 	.word	0x08022948
 8016b60:	08022f94 	.word	0x08022f94
 8016b64:	0802298c 	.word	0x0802298c

08016b68 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
 8016b70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d106      	bne.n	8016b86 <tcp_pcb_remove+0x1e>
 8016b78:	4b3e      	ldr	r3, [pc, #248]	@ (8016c74 <tcp_pcb_remove+0x10c>)
 8016b7a:	f640 0283 	movw	r2, #2179	@ 0x883
 8016b7e:	493e      	ldr	r1, [pc, #248]	@ (8016c78 <tcp_pcb_remove+0x110>)
 8016b80:	483e      	ldr	r0, [pc, #248]	@ (8016c7c <tcp_pcb_remove+0x114>)
 8016b82:	f009 fb8b 	bl	802029c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d106      	bne.n	8016b9a <tcp_pcb_remove+0x32>
 8016b8c:	4b39      	ldr	r3, [pc, #228]	@ (8016c74 <tcp_pcb_remove+0x10c>)
 8016b8e:	f640 0284 	movw	r2, #2180	@ 0x884
 8016b92:	493b      	ldr	r1, [pc, #236]	@ (8016c80 <tcp_pcb_remove+0x118>)
 8016b94:	4839      	ldr	r0, [pc, #228]	@ (8016c7c <tcp_pcb_remove+0x114>)
 8016b96:	f009 fb81 	bl	802029c <iprintf>

  TCP_RMV(pcblist, pcb);
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	683a      	ldr	r2, [r7, #0]
 8016ba0:	429a      	cmp	r2, r3
 8016ba2:	d105      	bne.n	8016bb0 <tcp_pcb_remove+0x48>
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	681b      	ldr	r3, [r3, #0]
 8016ba8:	68da      	ldr	r2, [r3, #12]
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	601a      	str	r2, [r3, #0]
 8016bae:	e013      	b.n	8016bd8 <tcp_pcb_remove+0x70>
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	60fb      	str	r3, [r7, #12]
 8016bb6:	e00c      	b.n	8016bd2 <tcp_pcb_remove+0x6a>
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	68db      	ldr	r3, [r3, #12]
 8016bbc:	683a      	ldr	r2, [r7, #0]
 8016bbe:	429a      	cmp	r2, r3
 8016bc0:	d104      	bne.n	8016bcc <tcp_pcb_remove+0x64>
 8016bc2:	683b      	ldr	r3, [r7, #0]
 8016bc4:	68da      	ldr	r2, [r3, #12]
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	60da      	str	r2, [r3, #12]
 8016bca:	e005      	b.n	8016bd8 <tcp_pcb_remove+0x70>
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	68db      	ldr	r3, [r3, #12]
 8016bd0:	60fb      	str	r3, [r7, #12]
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d1ef      	bne.n	8016bb8 <tcp_pcb_remove+0x50>
 8016bd8:	683b      	ldr	r3, [r7, #0]
 8016bda:	2200      	movs	r2, #0
 8016bdc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016bde:	6838      	ldr	r0, [r7, #0]
 8016be0:	f7ff ff72 	bl	8016ac8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	7d1b      	ldrb	r3, [r3, #20]
 8016be8:	2b0a      	cmp	r3, #10
 8016bea:	d013      	beq.n	8016c14 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016bec:	683b      	ldr	r3, [r7, #0]
 8016bee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016bf0:	2b01      	cmp	r3, #1
 8016bf2:	d00f      	beq.n	8016c14 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016bf4:	683b      	ldr	r3, [r7, #0]
 8016bf6:	8b5b      	ldrh	r3, [r3, #26]
 8016bf8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d009      	beq.n	8016c14 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	8b5b      	ldrh	r3, [r3, #26]
 8016c04:	f043 0302 	orr.w	r3, r3, #2
 8016c08:	b29a      	uxth	r2, r3
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016c0e:	6838      	ldr	r0, [r7, #0]
 8016c10:	f003 fc60 	bl	801a4d4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	7d1b      	ldrb	r3, [r3, #20]
 8016c18:	2b01      	cmp	r3, #1
 8016c1a:	d020      	beq.n	8016c5e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016c1c:	683b      	ldr	r3, [r7, #0]
 8016c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d006      	beq.n	8016c32 <tcp_pcb_remove+0xca>
 8016c24:	4b13      	ldr	r3, [pc, #76]	@ (8016c74 <tcp_pcb_remove+0x10c>)
 8016c26:	f640 0293 	movw	r2, #2195	@ 0x893
 8016c2a:	4916      	ldr	r1, [pc, #88]	@ (8016c84 <tcp_pcb_remove+0x11c>)
 8016c2c:	4813      	ldr	r0, [pc, #76]	@ (8016c7c <tcp_pcb_remove+0x114>)
 8016c2e:	f009 fb35 	bl	802029c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016c32:	683b      	ldr	r3, [r7, #0]
 8016c34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d006      	beq.n	8016c48 <tcp_pcb_remove+0xe0>
 8016c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8016c74 <tcp_pcb_remove+0x10c>)
 8016c3c:	f640 0294 	movw	r2, #2196	@ 0x894
 8016c40:	4911      	ldr	r1, [pc, #68]	@ (8016c88 <tcp_pcb_remove+0x120>)
 8016c42:	480e      	ldr	r0, [pc, #56]	@ (8016c7c <tcp_pcb_remove+0x114>)
 8016c44:	f009 fb2a 	bl	802029c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8016c48:	683b      	ldr	r3, [r7, #0]
 8016c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d006      	beq.n	8016c5e <tcp_pcb_remove+0xf6>
 8016c50:	4b08      	ldr	r3, [pc, #32]	@ (8016c74 <tcp_pcb_remove+0x10c>)
 8016c52:	f640 0296 	movw	r2, #2198	@ 0x896
 8016c56:	490d      	ldr	r1, [pc, #52]	@ (8016c8c <tcp_pcb_remove+0x124>)
 8016c58:	4808      	ldr	r0, [pc, #32]	@ (8016c7c <tcp_pcb_remove+0x114>)
 8016c5a:	f009 fb1f 	bl	802029c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016c5e:	683b      	ldr	r3, [r7, #0]
 8016c60:	2200      	movs	r2, #0
 8016c62:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016c64:	683b      	ldr	r3, [r7, #0]
 8016c66:	2200      	movs	r2, #0
 8016c68:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8016c6a:	bf00      	nop
 8016c6c:	3710      	adds	r7, #16
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	08022948 	.word	0x08022948
 8016c78:	08022fb0 	.word	0x08022fb0
 8016c7c:	0802298c 	.word	0x0802298c
 8016c80:	08022fcc 	.word	0x08022fcc
 8016c84:	08022fec 	.word	0x08022fec
 8016c88:	08023004 	.word	0x08023004
 8016c8c:	08023020 	.word	0x08023020

08016c90 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b082      	sub	sp, #8
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d106      	bne.n	8016cac <tcp_next_iss+0x1c>
 8016c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8016cc8 <tcp_next_iss+0x38>)
 8016ca0:	f640 02af 	movw	r2, #2223	@ 0x8af
 8016ca4:	4909      	ldr	r1, [pc, #36]	@ (8016ccc <tcp_next_iss+0x3c>)
 8016ca6:	480a      	ldr	r0, [pc, #40]	@ (8016cd0 <tcp_next_iss+0x40>)
 8016ca8:	f009 faf8 	bl	802029c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016cac:	4b09      	ldr	r3, [pc, #36]	@ (8016cd4 <tcp_next_iss+0x44>)
 8016cae:	681a      	ldr	r2, [r3, #0]
 8016cb0:	4b09      	ldr	r3, [pc, #36]	@ (8016cd8 <tcp_next_iss+0x48>)
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	4413      	add	r3, r2
 8016cb6:	4a07      	ldr	r2, [pc, #28]	@ (8016cd4 <tcp_next_iss+0x44>)
 8016cb8:	6013      	str	r3, [r2, #0]
  return iss;
 8016cba:	4b06      	ldr	r3, [pc, #24]	@ (8016cd4 <tcp_next_iss+0x44>)
 8016cbc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3708      	adds	r7, #8
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
 8016cc6:	bf00      	nop
 8016cc8:	08022948 	.word	0x08022948
 8016ccc:	08023038 	.word	0x08023038
 8016cd0:	0802298c 	.word	0x0802298c
 8016cd4:	20000028 	.word	0x20000028
 8016cd8:	200253a8 	.word	0x200253a8

08016cdc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b086      	sub	sp, #24
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	60b9      	str	r1, [r7, #8]
 8016ce6:	607a      	str	r2, [r7, #4]
 8016ce8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d106      	bne.n	8016cfe <tcp_eff_send_mss_netif+0x22>
 8016cf0:	4b14      	ldr	r3, [pc, #80]	@ (8016d44 <tcp_eff_send_mss_netif+0x68>)
 8016cf2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8016cf6:	4914      	ldr	r1, [pc, #80]	@ (8016d48 <tcp_eff_send_mss_netif+0x6c>)
 8016cf8:	4814      	ldr	r0, [pc, #80]	@ (8016d4c <tcp_eff_send_mss_netif+0x70>)
 8016cfa:	f009 facf 	bl	802029c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016cfe:	68bb      	ldr	r3, [r7, #8]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d101      	bne.n	8016d08 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016d04:	89fb      	ldrh	r3, [r7, #14]
 8016d06:	e019      	b.n	8016d3c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8016d08:	68bb      	ldr	r3, [r7, #8]
 8016d0a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8016d0c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016d0e:	8afb      	ldrh	r3, [r7, #22]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d012      	beq.n	8016d3a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016d14:	2328      	movs	r3, #40	@ 0x28
 8016d16:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8016d18:	8afa      	ldrh	r2, [r7, #22]
 8016d1a:	8abb      	ldrh	r3, [r7, #20]
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d904      	bls.n	8016d2a <tcp_eff_send_mss_netif+0x4e>
 8016d20:	8afa      	ldrh	r2, [r7, #22]
 8016d22:	8abb      	ldrh	r3, [r7, #20]
 8016d24:	1ad3      	subs	r3, r2, r3
 8016d26:	b29b      	uxth	r3, r3
 8016d28:	e000      	b.n	8016d2c <tcp_eff_send_mss_netif+0x50>
 8016d2a:	2300      	movs	r3, #0
 8016d2c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016d2e:	8a7a      	ldrh	r2, [r7, #18]
 8016d30:	89fb      	ldrh	r3, [r7, #14]
 8016d32:	4293      	cmp	r3, r2
 8016d34:	bf28      	it	cs
 8016d36:	4613      	movcs	r3, r2
 8016d38:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8016d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8016d3c:	4618      	mov	r0, r3
 8016d3e:	3718      	adds	r7, #24
 8016d40:	46bd      	mov	sp, r7
 8016d42:	bd80      	pop	{r7, pc}
 8016d44:	08022948 	.word	0x08022948
 8016d48:	08023054 	.word	0x08023054
 8016d4c:	0802298c 	.word	0x0802298c

08016d50 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b084      	sub	sp, #16
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
 8016d58:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8016d5a:	683b      	ldr	r3, [r7, #0]
 8016d5c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d119      	bne.n	8016d98 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016d64:	4b10      	ldr	r3, [pc, #64]	@ (8016da8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8016d66:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 8016d6a:	4910      	ldr	r1, [pc, #64]	@ (8016dac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016d6c:	4810      	ldr	r0, [pc, #64]	@ (8016db0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016d6e:	f009 fa95 	bl	802029c <iprintf>

  while (pcb != NULL) {
 8016d72:	e011      	b.n	8016d98 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	681a      	ldr	r2, [r3, #0]
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	681b      	ldr	r3, [r3, #0]
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d108      	bne.n	8016d92 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	68db      	ldr	r3, [r3, #12]
 8016d84:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8016d86:	68f8      	ldr	r0, [r7, #12]
 8016d88:	f7fe fdee 	bl	8015968 <tcp_abort>
      pcb = next;
 8016d8c:	68bb      	ldr	r3, [r7, #8]
 8016d8e:	60fb      	str	r3, [r7, #12]
 8016d90:	e002      	b.n	8016d98 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	68db      	ldr	r3, [r3, #12]
 8016d96:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d1ea      	bne.n	8016d74 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016d9e:	bf00      	nop
 8016da0:	bf00      	nop
 8016da2:	3710      	adds	r7, #16
 8016da4:	46bd      	mov	sp, r7
 8016da6:	bd80      	pop	{r7, pc}
 8016da8:	08022948 	.word	0x08022948
 8016dac:	0802307c 	.word	0x0802307c
 8016db0:	0802298c 	.word	0x0802298c

08016db4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b084      	sub	sp, #16
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	6078      	str	r0, [r7, #4]
 8016dbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d02a      	beq.n	8016e1a <tcp_netif_ip_addr_changed+0x66>
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d026      	beq.n	8016e1a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016dcc:	4b15      	ldr	r3, [pc, #84]	@ (8016e24 <tcp_netif_ip_addr_changed+0x70>)
 8016dce:	681b      	ldr	r3, [r3, #0]
 8016dd0:	4619      	mov	r1, r3
 8016dd2:	6878      	ldr	r0, [r7, #4]
 8016dd4:	f7ff ffbc 	bl	8016d50 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8016dd8:	4b13      	ldr	r3, [pc, #76]	@ (8016e28 <tcp_netif_ip_addr_changed+0x74>)
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	4619      	mov	r1, r3
 8016dde:	6878      	ldr	r0, [r7, #4]
 8016de0:	f7ff ffb6 	bl	8016d50 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d017      	beq.n	8016e1a <tcp_netif_ip_addr_changed+0x66>
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d013      	beq.n	8016e1a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016df2:	4b0e      	ldr	r3, [pc, #56]	@ (8016e2c <tcp_netif_ip_addr_changed+0x78>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	60fb      	str	r3, [r7, #12]
 8016df8:	e00c      	b.n	8016e14 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	429a      	cmp	r2, r3
 8016e04:	d103      	bne.n	8016e0e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8016e06:	683b      	ldr	r3, [r7, #0]
 8016e08:	681a      	ldr	r2, [r3, #0]
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016e0e:	68fb      	ldr	r3, [r7, #12]
 8016e10:	68db      	ldr	r3, [r3, #12]
 8016e12:	60fb      	str	r3, [r7, #12]
 8016e14:	68fb      	ldr	r3, [r7, #12]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d1ef      	bne.n	8016dfa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8016e1a:	bf00      	nop
 8016e1c:	3710      	adds	r7, #16
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	200253b4 	.word	0x200253b4
 8016e28:	200253ac 	.word	0x200253ac
 8016e2c:	200253b0 	.word	0x200253b0

08016e30 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b082      	sub	sp, #8
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d007      	beq.n	8016e50 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7ff fb45 	bl	80164d4 <tcp_segs_free>
    pcb->ooseq = NULL;
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016e50:	bf00      	nop
 8016e52:	3708      	adds	r7, #8
 8016e54:	46bd      	mov	sp, r7
 8016e56:	bd80      	pop	{r7, pc}

08016e58 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8016e58:	b590      	push	{r4, r7, lr}
 8016e5a:	b08d      	sub	sp, #52	@ 0x34
 8016e5c:	af04      	add	r7, sp, #16
 8016e5e:	6078      	str	r0, [r7, #4]
 8016e60:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d105      	bne.n	8016e74 <tcp_input+0x1c>
 8016e68:	4b9b      	ldr	r3, [pc, #620]	@ (80170d8 <tcp_input+0x280>)
 8016e6a:	2283      	movs	r2, #131	@ 0x83
 8016e6c:	499b      	ldr	r1, [pc, #620]	@ (80170dc <tcp_input+0x284>)
 8016e6e:	489c      	ldr	r0, [pc, #624]	@ (80170e0 <tcp_input+0x288>)
 8016e70:	f009 fa14 	bl	802029c <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8016e74:	4b9b      	ldr	r3, [pc, #620]	@ (80170e4 <tcp_input+0x28c>)
 8016e76:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8016e7a:	3301      	adds	r3, #1
 8016e7c:	b29a      	uxth	r2, r3
 8016e7e:	4b99      	ldr	r3, [pc, #612]	@ (80170e4 <tcp_input+0x28c>)
 8016e80:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	685b      	ldr	r3, [r3, #4]
 8016e88:	4a97      	ldr	r2, [pc, #604]	@ (80170e8 <tcp_input+0x290>)
 8016e8a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	895b      	ldrh	r3, [r3, #10]
 8016e90:	2b13      	cmp	r3, #19
 8016e92:	d809      	bhi.n	8016ea8 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8016e94:	4b93      	ldr	r3, [pc, #588]	@ (80170e4 <tcp_input+0x28c>)
 8016e96:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	b29a      	uxth	r2, r3
 8016e9e:	4b91      	ldr	r3, [pc, #580]	@ (80170e4 <tcp_input+0x28c>)
 8016ea0:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016ea4:	f000 bc1c 	b.w	80176e0 <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016ea8:	4b90      	ldr	r3, [pc, #576]	@ (80170ec <tcp_input+0x294>)
 8016eaa:	695b      	ldr	r3, [r3, #20]
 8016eac:	4a8f      	ldr	r2, [pc, #572]	@ (80170ec <tcp_input+0x294>)
 8016eae:	6812      	ldr	r2, [r2, #0]
 8016eb0:	4611      	mov	r1, r2
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f006 fdaa 	bl	801da0c <ip4_addr_isbroadcast_u32>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d105      	bne.n	8016eca <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8016ebe:	4b8b      	ldr	r3, [pc, #556]	@ (80170ec <tcp_input+0x294>)
 8016ec0:	695b      	ldr	r3, [r3, #20]
 8016ec2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016ec6:	2be0      	cmp	r3, #224	@ 0xe0
 8016ec8:	d109      	bne.n	8016ede <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8016eca:	4b86      	ldr	r3, [pc, #536]	@ (80170e4 <tcp_input+0x28c>)
 8016ecc:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8016ed0:	3301      	adds	r3, #1
 8016ed2:	b29a      	uxth	r2, r3
 8016ed4:	4b83      	ldr	r3, [pc, #524]	@ (80170e4 <tcp_input+0x28c>)
 8016ed6:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8016eda:	f000 bc01 	b.w	80176e0 <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016ede:	4b82      	ldr	r3, [pc, #520]	@ (80170e8 <tcp_input+0x290>)
 8016ee0:	681b      	ldr	r3, [r3, #0]
 8016ee2:	899b      	ldrh	r3, [r3, #12]
 8016ee4:	b29b      	uxth	r3, r3
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7fc fa78 	bl	80133dc <lwip_htons>
 8016eec:	4603      	mov	r3, r0
 8016eee:	0b1b      	lsrs	r3, r3, #12
 8016ef0:	b29b      	uxth	r3, r3
 8016ef2:	b2db      	uxtb	r3, r3
 8016ef4:	009b      	lsls	r3, r3, #2
 8016ef6:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016ef8:	7cbb      	ldrb	r3, [r7, #18]
 8016efa:	2b13      	cmp	r3, #19
 8016efc:	d905      	bls.n	8016f0a <tcp_input+0xb2>
 8016efe:	7cbb      	ldrb	r3, [r7, #18]
 8016f00:	b29a      	uxth	r2, r3
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	891b      	ldrh	r3, [r3, #8]
 8016f06:	429a      	cmp	r2, r3
 8016f08:	d908      	bls.n	8016f1c <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8016f0a:	4b76      	ldr	r3, [pc, #472]	@ (80170e4 <tcp_input+0x28c>)
 8016f0c:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016f10:	3301      	adds	r3, #1
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	4b73      	ldr	r3, [pc, #460]	@ (80170e4 <tcp_input+0x28c>)
 8016f16:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8016f1a:	e3e1      	b.n	80176e0 <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016f1c:	7cbb      	ldrb	r3, [r7, #18]
 8016f1e:	b29b      	uxth	r3, r3
 8016f20:	3b14      	subs	r3, #20
 8016f22:	b29a      	uxth	r2, r3
 8016f24:	4b72      	ldr	r3, [pc, #456]	@ (80170f0 <tcp_input+0x298>)
 8016f26:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016f28:	4b72      	ldr	r3, [pc, #456]	@ (80170f4 <tcp_input+0x29c>)
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	895a      	ldrh	r2, [r3, #10]
 8016f32:	7cbb      	ldrb	r3, [r7, #18]
 8016f34:	b29b      	uxth	r3, r3
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d309      	bcc.n	8016f4e <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80170f0 <tcp_input+0x298>)
 8016f3c:	881a      	ldrh	r2, [r3, #0]
 8016f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80170f8 <tcp_input+0x2a0>)
 8016f40:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016f42:	7cbb      	ldrb	r3, [r7, #18]
 8016f44:	4619      	mov	r1, r3
 8016f46:	6878      	ldr	r0, [r7, #4]
 8016f48:	f7fd fe80 	bl	8014c4c <pbuf_remove_header>
 8016f4c:	e056      	b.n	8016ffc <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	2b00      	cmp	r3, #0
 8016f54:	d105      	bne.n	8016f62 <tcp_input+0x10a>
 8016f56:	4b60      	ldr	r3, [pc, #384]	@ (80170d8 <tcp_input+0x280>)
 8016f58:	22c2      	movs	r2, #194	@ 0xc2
 8016f5a:	4968      	ldr	r1, [pc, #416]	@ (80170fc <tcp_input+0x2a4>)
 8016f5c:	4860      	ldr	r0, [pc, #384]	@ (80170e0 <tcp_input+0x288>)
 8016f5e:	f009 f99d 	bl	802029c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016f62:	2114      	movs	r1, #20
 8016f64:	6878      	ldr	r0, [r7, #4]
 8016f66:	f7fd fe71 	bl	8014c4c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	895a      	ldrh	r2, [r3, #10]
 8016f6e:	4b62      	ldr	r3, [pc, #392]	@ (80170f8 <tcp_input+0x2a0>)
 8016f70:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016f72:	4b5f      	ldr	r3, [pc, #380]	@ (80170f0 <tcp_input+0x298>)
 8016f74:	881a      	ldrh	r2, [r3, #0]
 8016f76:	4b60      	ldr	r3, [pc, #384]	@ (80170f8 <tcp_input+0x2a0>)
 8016f78:	881b      	ldrh	r3, [r3, #0]
 8016f7a:	1ad3      	subs	r3, r2, r3
 8016f7c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016f7e:	4b5e      	ldr	r3, [pc, #376]	@ (80170f8 <tcp_input+0x2a0>)
 8016f80:	881b      	ldrh	r3, [r3, #0]
 8016f82:	4619      	mov	r1, r3
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f7fd fe61 	bl	8014c4c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	895b      	ldrh	r3, [r3, #10]
 8016f90:	8a3a      	ldrh	r2, [r7, #16]
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d908      	bls.n	8016fa8 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8016f96:	4b53      	ldr	r3, [pc, #332]	@ (80170e4 <tcp_input+0x28c>)
 8016f98:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8016f9c:	3301      	adds	r3, #1
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	4b50      	ldr	r3, [pc, #320]	@ (80170e4 <tcp_input+0x28c>)
 8016fa2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8016fa6:	e39b      	b.n	80176e0 <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	4a51      	ldr	r2, [pc, #324]	@ (80170f4 <tcp_input+0x29c>)
 8016fb0:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	8a3a      	ldrh	r2, [r7, #16]
 8016fb8:	4611      	mov	r1, r2
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7fd fe46 	bl	8014c4c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	891a      	ldrh	r2, [r3, #8]
 8016fc4:	8a3b      	ldrh	r3, [r7, #16]
 8016fc6:	1ad3      	subs	r3, r2, r3
 8016fc8:	b29a      	uxth	r2, r3
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	895b      	ldrh	r3, [r3, #10]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d005      	beq.n	8016fe2 <tcp_input+0x18a>
 8016fd6:	4b40      	ldr	r3, [pc, #256]	@ (80170d8 <tcp_input+0x280>)
 8016fd8:	22df      	movs	r2, #223	@ 0xdf
 8016fda:	4949      	ldr	r1, [pc, #292]	@ (8017100 <tcp_input+0x2a8>)
 8016fdc:	4840      	ldr	r0, [pc, #256]	@ (80170e0 <tcp_input+0x288>)
 8016fde:	f009 f95d 	bl	802029c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	891a      	ldrh	r2, [r3, #8]
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	891b      	ldrh	r3, [r3, #8]
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d005      	beq.n	8016ffc <tcp_input+0x1a4>
 8016ff0:	4b39      	ldr	r3, [pc, #228]	@ (80170d8 <tcp_input+0x280>)
 8016ff2:	22e0      	movs	r2, #224	@ 0xe0
 8016ff4:	4943      	ldr	r1, [pc, #268]	@ (8017104 <tcp_input+0x2ac>)
 8016ff6:	483a      	ldr	r0, [pc, #232]	@ (80170e0 <tcp_input+0x288>)
 8016ff8:	f009 f950 	bl	802029c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016ffc:	4b3a      	ldr	r3, [pc, #232]	@ (80170e8 <tcp_input+0x290>)
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	881b      	ldrh	r3, [r3, #0]
 8017002:	b29b      	uxth	r3, r3
 8017004:	4a38      	ldr	r2, [pc, #224]	@ (80170e8 <tcp_input+0x290>)
 8017006:	6814      	ldr	r4, [r2, #0]
 8017008:	4618      	mov	r0, r3
 801700a:	f7fc f9e7 	bl	80133dc <lwip_htons>
 801700e:	4603      	mov	r3, r0
 8017010:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8017012:	4b35      	ldr	r3, [pc, #212]	@ (80170e8 <tcp_input+0x290>)
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	885b      	ldrh	r3, [r3, #2]
 8017018:	b29b      	uxth	r3, r3
 801701a:	4a33      	ldr	r2, [pc, #204]	@ (80170e8 <tcp_input+0x290>)
 801701c:	6814      	ldr	r4, [r2, #0]
 801701e:	4618      	mov	r0, r3
 8017020:	f7fc f9dc 	bl	80133dc <lwip_htons>
 8017024:	4603      	mov	r3, r0
 8017026:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8017028:	4b2f      	ldr	r3, [pc, #188]	@ (80170e8 <tcp_input+0x290>)
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	685b      	ldr	r3, [r3, #4]
 801702e:	4a2e      	ldr	r2, [pc, #184]	@ (80170e8 <tcp_input+0x290>)
 8017030:	6814      	ldr	r4, [r2, #0]
 8017032:	4618      	mov	r0, r3
 8017034:	f7fc f9e8 	bl	8013408 <lwip_htonl>
 8017038:	4603      	mov	r3, r0
 801703a:	6063      	str	r3, [r4, #4]
 801703c:	6863      	ldr	r3, [r4, #4]
 801703e:	4a32      	ldr	r2, [pc, #200]	@ (8017108 <tcp_input+0x2b0>)
 8017040:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8017042:	4b29      	ldr	r3, [pc, #164]	@ (80170e8 <tcp_input+0x290>)
 8017044:	681b      	ldr	r3, [r3, #0]
 8017046:	689b      	ldr	r3, [r3, #8]
 8017048:	4a27      	ldr	r2, [pc, #156]	@ (80170e8 <tcp_input+0x290>)
 801704a:	6814      	ldr	r4, [r2, #0]
 801704c:	4618      	mov	r0, r3
 801704e:	f7fc f9db 	bl	8013408 <lwip_htonl>
 8017052:	4603      	mov	r3, r0
 8017054:	60a3      	str	r3, [r4, #8]
 8017056:	68a3      	ldr	r3, [r4, #8]
 8017058:	4a2c      	ldr	r2, [pc, #176]	@ (801710c <tcp_input+0x2b4>)
 801705a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801705c:	4b22      	ldr	r3, [pc, #136]	@ (80170e8 <tcp_input+0x290>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	89db      	ldrh	r3, [r3, #14]
 8017062:	b29b      	uxth	r3, r3
 8017064:	4a20      	ldr	r2, [pc, #128]	@ (80170e8 <tcp_input+0x290>)
 8017066:	6814      	ldr	r4, [r2, #0]
 8017068:	4618      	mov	r0, r3
 801706a:	f7fc f9b7 	bl	80133dc <lwip_htons>
 801706e:	4603      	mov	r3, r0
 8017070:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8017072:	4b1d      	ldr	r3, [pc, #116]	@ (80170e8 <tcp_input+0x290>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	899b      	ldrh	r3, [r3, #12]
 8017078:	b29b      	uxth	r3, r3
 801707a:	4618      	mov	r0, r3
 801707c:	f7fc f9ae 	bl	80133dc <lwip_htons>
 8017080:	4603      	mov	r3, r0
 8017082:	b2db      	uxtb	r3, r3
 8017084:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017088:	b2da      	uxtb	r2, r3
 801708a:	4b21      	ldr	r3, [pc, #132]	@ (8017110 <tcp_input+0x2b8>)
 801708c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	891a      	ldrh	r2, [r3, #8]
 8017092:	4b20      	ldr	r3, [pc, #128]	@ (8017114 <tcp_input+0x2bc>)
 8017094:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017096:	4b1e      	ldr	r3, [pc, #120]	@ (8017110 <tcp_input+0x2b8>)
 8017098:	781b      	ldrb	r3, [r3, #0]
 801709a:	f003 0303 	and.w	r3, r3, #3
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d014      	beq.n	80170cc <tcp_input+0x274>
    tcplen++;
 80170a2:	4b1c      	ldr	r3, [pc, #112]	@ (8017114 <tcp_input+0x2bc>)
 80170a4:	881b      	ldrh	r3, [r3, #0]
 80170a6:	3301      	adds	r3, #1
 80170a8:	b29a      	uxth	r2, r3
 80170aa:	4b1a      	ldr	r3, [pc, #104]	@ (8017114 <tcp_input+0x2bc>)
 80170ac:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	891a      	ldrh	r2, [r3, #8]
 80170b2:	4b18      	ldr	r3, [pc, #96]	@ (8017114 <tcp_input+0x2bc>)
 80170b4:	881b      	ldrh	r3, [r3, #0]
 80170b6:	429a      	cmp	r2, r3
 80170b8:	d908      	bls.n	80170cc <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 80170ba:	4b0a      	ldr	r3, [pc, #40]	@ (80170e4 <tcp_input+0x28c>)
 80170bc:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 80170c0:	3301      	adds	r3, #1
 80170c2:	b29a      	uxth	r2, r3
 80170c4:	4b07      	ldr	r3, [pc, #28]	@ (80170e4 <tcp_input+0x28c>)
 80170c6:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 80170ca:	e309      	b.n	80176e0 <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80170cc:	2300      	movs	r3, #0
 80170ce:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80170d0:	4b11      	ldr	r3, [pc, #68]	@ (8017118 <tcp_input+0x2c0>)
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	61fb      	str	r3, [r7, #28]
 80170d6:	e0a1      	b.n	801721c <tcp_input+0x3c4>
 80170d8:	080230b0 	.word	0x080230b0
 80170dc:	080230e4 	.word	0x080230e4
 80170e0:	080230fc 	.word	0x080230fc
 80170e4:	200252ac 	.word	0x200252ac
 80170e8:	200253d0 	.word	0x200253d0
 80170ec:	2001f0b0 	.word	0x2001f0b0
 80170f0:	200253d4 	.word	0x200253d4
 80170f4:	200253d8 	.word	0x200253d8
 80170f8:	200253d6 	.word	0x200253d6
 80170fc:	08023124 	.word	0x08023124
 8017100:	08023134 	.word	0x08023134
 8017104:	08023140 	.word	0x08023140
 8017108:	200253e0 	.word	0x200253e0
 801710c:	200253e4 	.word	0x200253e4
 8017110:	200253ec 	.word	0x200253ec
 8017114:	200253ea 	.word	0x200253ea
 8017118:	200253b4 	.word	0x200253b4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801711c:	69fb      	ldr	r3, [r7, #28]
 801711e:	7d1b      	ldrb	r3, [r3, #20]
 8017120:	2b00      	cmp	r3, #0
 8017122:	d105      	bne.n	8017130 <tcp_input+0x2d8>
 8017124:	4b8a      	ldr	r3, [pc, #552]	@ (8017350 <tcp_input+0x4f8>)
 8017126:	22fb      	movs	r2, #251	@ 0xfb
 8017128:	498a      	ldr	r1, [pc, #552]	@ (8017354 <tcp_input+0x4fc>)
 801712a:	488b      	ldr	r0, [pc, #556]	@ (8017358 <tcp_input+0x500>)
 801712c:	f009 f8b6 	bl	802029c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8017130:	69fb      	ldr	r3, [r7, #28]
 8017132:	7d1b      	ldrb	r3, [r3, #20]
 8017134:	2b0a      	cmp	r3, #10
 8017136:	d105      	bne.n	8017144 <tcp_input+0x2ec>
 8017138:	4b85      	ldr	r3, [pc, #532]	@ (8017350 <tcp_input+0x4f8>)
 801713a:	22fc      	movs	r2, #252	@ 0xfc
 801713c:	4987      	ldr	r1, [pc, #540]	@ (801735c <tcp_input+0x504>)
 801713e:	4886      	ldr	r0, [pc, #536]	@ (8017358 <tcp_input+0x500>)
 8017140:	f009 f8ac 	bl	802029c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8017144:	69fb      	ldr	r3, [r7, #28]
 8017146:	7d1b      	ldrb	r3, [r3, #20]
 8017148:	2b01      	cmp	r3, #1
 801714a:	d105      	bne.n	8017158 <tcp_input+0x300>
 801714c:	4b80      	ldr	r3, [pc, #512]	@ (8017350 <tcp_input+0x4f8>)
 801714e:	22fd      	movs	r2, #253	@ 0xfd
 8017150:	4983      	ldr	r1, [pc, #524]	@ (8017360 <tcp_input+0x508>)
 8017152:	4881      	ldr	r0, [pc, #516]	@ (8017358 <tcp_input+0x500>)
 8017154:	f009 f8a2 	bl	802029c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017158:	69fb      	ldr	r3, [r7, #28]
 801715a:	7a1b      	ldrb	r3, [r3, #8]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d00c      	beq.n	801717a <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017160:	69fb      	ldr	r3, [r7, #28]
 8017162:	7a1a      	ldrb	r2, [r3, #8]
 8017164:	4b7f      	ldr	r3, [pc, #508]	@ (8017364 <tcp_input+0x50c>)
 8017166:	685b      	ldr	r3, [r3, #4]
 8017168:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801716c:	3301      	adds	r3, #1
 801716e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017170:	429a      	cmp	r2, r3
 8017172:	d002      	beq.n	801717a <tcp_input+0x322>
      prev = pcb;
 8017174:	69fb      	ldr	r3, [r7, #28]
 8017176:	61bb      	str	r3, [r7, #24]
      continue;
 8017178:	e04d      	b.n	8017216 <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 801717a:	69fb      	ldr	r3, [r7, #28]
 801717c:	8b1a      	ldrh	r2, [r3, #24]
 801717e:	4b7a      	ldr	r3, [pc, #488]	@ (8017368 <tcp_input+0x510>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	881b      	ldrh	r3, [r3, #0]
 8017184:	b29b      	uxth	r3, r3
 8017186:	429a      	cmp	r2, r3
 8017188:	d143      	bne.n	8017212 <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 801718a:	69fb      	ldr	r3, [r7, #28]
 801718c:	8ada      	ldrh	r2, [r3, #22]
 801718e:	4b76      	ldr	r3, [pc, #472]	@ (8017368 <tcp_input+0x510>)
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	885b      	ldrh	r3, [r3, #2]
 8017194:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017196:	429a      	cmp	r2, r3
 8017198:	d13b      	bne.n	8017212 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801719a:	69fb      	ldr	r3, [r7, #28]
 801719c:	685a      	ldr	r2, [r3, #4]
 801719e:	4b71      	ldr	r3, [pc, #452]	@ (8017364 <tcp_input+0x50c>)
 80171a0:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80171a2:	429a      	cmp	r2, r3
 80171a4:	d135      	bne.n	8017212 <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80171a6:	69fb      	ldr	r3, [r7, #28]
 80171a8:	681a      	ldr	r2, [r3, #0]
 80171aa:	4b6e      	ldr	r3, [pc, #440]	@ (8017364 <tcp_input+0x50c>)
 80171ac:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80171ae:	429a      	cmp	r2, r3
 80171b0:	d12f      	bne.n	8017212 <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80171b2:	69fb      	ldr	r3, [r7, #28]
 80171b4:	68db      	ldr	r3, [r3, #12]
 80171b6:	69fa      	ldr	r2, [r7, #28]
 80171b8:	429a      	cmp	r2, r3
 80171ba:	d106      	bne.n	80171ca <tcp_input+0x372>
 80171bc:	4b64      	ldr	r3, [pc, #400]	@ (8017350 <tcp_input+0x4f8>)
 80171be:	f240 120d 	movw	r2, #269	@ 0x10d
 80171c2:	496a      	ldr	r1, [pc, #424]	@ (801736c <tcp_input+0x514>)
 80171c4:	4864      	ldr	r0, [pc, #400]	@ (8017358 <tcp_input+0x500>)
 80171c6:	f009 f869 	bl	802029c <iprintf>
      if (prev != NULL) {
 80171ca:	69bb      	ldr	r3, [r7, #24]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d00b      	beq.n	80171e8 <tcp_input+0x390>
        prev->next = pcb->next;
 80171d0:	69fb      	ldr	r3, [r7, #28]
 80171d2:	68da      	ldr	r2, [r3, #12]
 80171d4:	69bb      	ldr	r3, [r7, #24]
 80171d6:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80171d8:	4b65      	ldr	r3, [pc, #404]	@ (8017370 <tcp_input+0x518>)
 80171da:	681a      	ldr	r2, [r3, #0]
 80171dc:	69fb      	ldr	r3, [r7, #28]
 80171de:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80171e0:	4a63      	ldr	r2, [pc, #396]	@ (8017370 <tcp_input+0x518>)
 80171e2:	69fb      	ldr	r3, [r7, #28]
 80171e4:	6013      	str	r3, [r2, #0]
 80171e6:	e007      	b.n	80171f8 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 80171e8:	4b62      	ldr	r3, [pc, #392]	@ (8017374 <tcp_input+0x51c>)
 80171ea:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 80171ee:	3301      	adds	r3, #1
 80171f0:	b29a      	uxth	r2, r3
 80171f2:	4b60      	ldr	r3, [pc, #384]	@ (8017374 <tcp_input+0x51c>)
 80171f4:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80171f8:	69fb      	ldr	r3, [r7, #28]
 80171fa:	68db      	ldr	r3, [r3, #12]
 80171fc:	69fa      	ldr	r2, [r7, #28]
 80171fe:	429a      	cmp	r2, r3
 8017200:	d111      	bne.n	8017226 <tcp_input+0x3ce>
 8017202:	4b53      	ldr	r3, [pc, #332]	@ (8017350 <tcp_input+0x4f8>)
 8017204:	f240 1215 	movw	r2, #277	@ 0x115
 8017208:	495b      	ldr	r1, [pc, #364]	@ (8017378 <tcp_input+0x520>)
 801720a:	4853      	ldr	r0, [pc, #332]	@ (8017358 <tcp_input+0x500>)
 801720c:	f009 f846 	bl	802029c <iprintf>
      break;
 8017210:	e009      	b.n	8017226 <tcp_input+0x3ce>
    }
    prev = pcb;
 8017212:	69fb      	ldr	r3, [r7, #28]
 8017214:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8017216:	69fb      	ldr	r3, [r7, #28]
 8017218:	68db      	ldr	r3, [r3, #12]
 801721a:	61fb      	str	r3, [r7, #28]
 801721c:	69fb      	ldr	r3, [r7, #28]
 801721e:	2b00      	cmp	r3, #0
 8017220:	f47f af7c 	bne.w	801711c <tcp_input+0x2c4>
 8017224:	e000      	b.n	8017228 <tcp_input+0x3d0>
      break;
 8017226:	bf00      	nop
  }

  if (pcb == NULL) {
 8017228:	69fb      	ldr	r3, [r7, #28]
 801722a:	2b00      	cmp	r3, #0
 801722c:	f040 80bb 	bne.w	80173a6 <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8017230:	4b52      	ldr	r3, [pc, #328]	@ (801737c <tcp_input+0x524>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	61fb      	str	r3, [r7, #28]
 8017236:	e03f      	b.n	80172b8 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8017238:	69fb      	ldr	r3, [r7, #28]
 801723a:	7d1b      	ldrb	r3, [r3, #20]
 801723c:	2b0a      	cmp	r3, #10
 801723e:	d006      	beq.n	801724e <tcp_input+0x3f6>
 8017240:	4b43      	ldr	r3, [pc, #268]	@ (8017350 <tcp_input+0x4f8>)
 8017242:	f240 121f 	movw	r2, #287	@ 0x11f
 8017246:	494e      	ldr	r1, [pc, #312]	@ (8017380 <tcp_input+0x528>)
 8017248:	4843      	ldr	r0, [pc, #268]	@ (8017358 <tcp_input+0x500>)
 801724a:	f009 f827 	bl	802029c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801724e:	69fb      	ldr	r3, [r7, #28]
 8017250:	7a1b      	ldrb	r3, [r3, #8]
 8017252:	2b00      	cmp	r3, #0
 8017254:	d009      	beq.n	801726a <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017256:	69fb      	ldr	r3, [r7, #28]
 8017258:	7a1a      	ldrb	r2, [r3, #8]
 801725a:	4b42      	ldr	r3, [pc, #264]	@ (8017364 <tcp_input+0x50c>)
 801725c:	685b      	ldr	r3, [r3, #4]
 801725e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017262:	3301      	adds	r3, #1
 8017264:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017266:	429a      	cmp	r2, r3
 8017268:	d122      	bne.n	80172b0 <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801726a:	69fb      	ldr	r3, [r7, #28]
 801726c:	8b1a      	ldrh	r2, [r3, #24]
 801726e:	4b3e      	ldr	r3, [pc, #248]	@ (8017368 <tcp_input+0x510>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	881b      	ldrh	r3, [r3, #0]
 8017274:	b29b      	uxth	r3, r3
 8017276:	429a      	cmp	r2, r3
 8017278:	d11b      	bne.n	80172b2 <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 801727a:	69fb      	ldr	r3, [r7, #28]
 801727c:	8ada      	ldrh	r2, [r3, #22]
 801727e:	4b3a      	ldr	r3, [pc, #232]	@ (8017368 <tcp_input+0x510>)
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	885b      	ldrh	r3, [r3, #2]
 8017284:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017286:	429a      	cmp	r2, r3
 8017288:	d113      	bne.n	80172b2 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801728a:	69fb      	ldr	r3, [r7, #28]
 801728c:	685a      	ldr	r2, [r3, #4]
 801728e:	4b35      	ldr	r3, [pc, #212]	@ (8017364 <tcp_input+0x50c>)
 8017290:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8017292:	429a      	cmp	r2, r3
 8017294:	d10d      	bne.n	80172b2 <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017296:	69fb      	ldr	r3, [r7, #28]
 8017298:	681a      	ldr	r2, [r3, #0]
 801729a:	4b32      	ldr	r3, [pc, #200]	@ (8017364 <tcp_input+0x50c>)
 801729c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801729e:	429a      	cmp	r2, r3
 80172a0:	d107      	bne.n	80172b2 <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80172a2:	69f8      	ldr	r0, [r7, #28]
 80172a4:	f000 fb88 	bl	80179b8 <tcp_timewait_input>
        }
        pbuf_free(p);
 80172a8:	6878      	ldr	r0, [r7, #4]
 80172aa:	f7fd fd55 	bl	8014d58 <pbuf_free>
        return;
 80172ae:	e224      	b.n	80176fa <tcp_input+0x8a2>
        continue;
 80172b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80172b2:	69fb      	ldr	r3, [r7, #28]
 80172b4:	68db      	ldr	r3, [r3, #12]
 80172b6:	61fb      	str	r3, [r7, #28]
 80172b8:	69fb      	ldr	r3, [r7, #28]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d1bc      	bne.n	8017238 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80172be:	2300      	movs	r3, #0
 80172c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80172c2:	4b30      	ldr	r3, [pc, #192]	@ (8017384 <tcp_input+0x52c>)
 80172c4:	681b      	ldr	r3, [r3, #0]
 80172c6:	617b      	str	r3, [r7, #20]
 80172c8:	e02a      	b.n	8017320 <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	7a1b      	ldrb	r3, [r3, #8]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d00c      	beq.n	80172ec <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80172d2:	697b      	ldr	r3, [r7, #20]
 80172d4:	7a1a      	ldrb	r2, [r3, #8]
 80172d6:	4b23      	ldr	r3, [pc, #140]	@ (8017364 <tcp_input+0x50c>)
 80172d8:	685b      	ldr	r3, [r3, #4]
 80172da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80172de:	3301      	adds	r3, #1
 80172e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80172e2:	429a      	cmp	r2, r3
 80172e4:	d002      	beq.n	80172ec <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 80172e6:	697b      	ldr	r3, [r7, #20]
 80172e8:	61bb      	str	r3, [r7, #24]
        continue;
 80172ea:	e016      	b.n	801731a <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	8ada      	ldrh	r2, [r3, #22]
 80172f0:	4b1d      	ldr	r3, [pc, #116]	@ (8017368 <tcp_input+0x510>)
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	885b      	ldrh	r3, [r3, #2]
 80172f6:	b29b      	uxth	r3, r3
 80172f8:	429a      	cmp	r2, r3
 80172fa:	d10c      	bne.n	8017316 <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	681a      	ldr	r2, [r3, #0]
 8017300:	4b18      	ldr	r3, [pc, #96]	@ (8017364 <tcp_input+0x50c>)
 8017302:	695b      	ldr	r3, [r3, #20]
 8017304:	429a      	cmp	r2, r3
 8017306:	d00f      	beq.n	8017328 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d00d      	beq.n	801732a <tcp_input+0x4d2>
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d009      	beq.n	801732a <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8017316:	697b      	ldr	r3, [r7, #20]
 8017318:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801731a:	697b      	ldr	r3, [r7, #20]
 801731c:	68db      	ldr	r3, [r3, #12]
 801731e:	617b      	str	r3, [r7, #20]
 8017320:	697b      	ldr	r3, [r7, #20]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d1d1      	bne.n	80172ca <tcp_input+0x472>
 8017326:	e000      	b.n	801732a <tcp_input+0x4d2>
            break;
 8017328:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801732a:	697b      	ldr	r3, [r7, #20]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d03a      	beq.n	80173a6 <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8017330:	69bb      	ldr	r3, [r7, #24]
 8017332:	2b00      	cmp	r3, #0
 8017334:	d028      	beq.n	8017388 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8017336:	697b      	ldr	r3, [r7, #20]
 8017338:	68da      	ldr	r2, [r3, #12]
 801733a:	69bb      	ldr	r3, [r7, #24]
 801733c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801733e:	4b11      	ldr	r3, [pc, #68]	@ (8017384 <tcp_input+0x52c>)
 8017340:	681a      	ldr	r2, [r3, #0]
 8017342:	697b      	ldr	r3, [r7, #20]
 8017344:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8017346:	4a0f      	ldr	r2, [pc, #60]	@ (8017384 <tcp_input+0x52c>)
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	6013      	str	r3, [r2, #0]
 801734c:	e024      	b.n	8017398 <tcp_input+0x540>
 801734e:	bf00      	nop
 8017350:	080230b0 	.word	0x080230b0
 8017354:	08023160 	.word	0x08023160
 8017358:	080230fc 	.word	0x080230fc
 801735c:	08023188 	.word	0x08023188
 8017360:	080231b4 	.word	0x080231b4
 8017364:	2001f0b0 	.word	0x2001f0b0
 8017368:	200253d0 	.word	0x200253d0
 801736c:	080231dc 	.word	0x080231dc
 8017370:	200253b4 	.word	0x200253b4
 8017374:	200252ac 	.word	0x200252ac
 8017378:	08023208 	.word	0x08023208
 801737c:	200253b8 	.word	0x200253b8
 8017380:	08023234 	.word	0x08023234
 8017384:	200253b0 	.word	0x200253b0
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017388:	4ba0      	ldr	r3, [pc, #640]	@ (801760c <tcp_input+0x7b4>)
 801738a:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801738e:	3301      	adds	r3, #1
 8017390:	b29a      	uxth	r2, r3
 8017392:	4b9e      	ldr	r3, [pc, #632]	@ (801760c <tcp_input+0x7b4>)
 8017394:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017398:	6978      	ldr	r0, [r7, #20]
 801739a:	f000 fa05 	bl	80177a8 <tcp_listen_input>
      }
      pbuf_free(p);
 801739e:	6878      	ldr	r0, [r7, #4]
 80173a0:	f7fd fcda 	bl	8014d58 <pbuf_free>
      return;
 80173a4:	e1a9      	b.n	80176fa <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80173a6:	69fb      	ldr	r3, [r7, #28]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	f000 815f 	beq.w	801766c <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80173ae:	4b98      	ldr	r3, [pc, #608]	@ (8017610 <tcp_input+0x7b8>)
 80173b0:	2200      	movs	r2, #0
 80173b2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	891a      	ldrh	r2, [r3, #8]
 80173b8:	4b95      	ldr	r3, [pc, #596]	@ (8017610 <tcp_input+0x7b8>)
 80173ba:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80173bc:	4a94      	ldr	r2, [pc, #592]	@ (8017610 <tcp_input+0x7b8>)
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80173c2:	4b94      	ldr	r3, [pc, #592]	@ (8017614 <tcp_input+0x7bc>)
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	4a92      	ldr	r2, [pc, #584]	@ (8017610 <tcp_input+0x7b8>)
 80173c8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80173ca:	4b93      	ldr	r3, [pc, #588]	@ (8017618 <tcp_input+0x7c0>)
 80173cc:	2200      	movs	r2, #0
 80173ce:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80173d0:	4b92      	ldr	r3, [pc, #584]	@ (801761c <tcp_input+0x7c4>)
 80173d2:	2200      	movs	r2, #0
 80173d4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80173d6:	4b92      	ldr	r3, [pc, #584]	@ (8017620 <tcp_input+0x7c8>)
 80173d8:	2200      	movs	r2, #0
 80173da:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80173dc:	4b91      	ldr	r3, [pc, #580]	@ (8017624 <tcp_input+0x7cc>)
 80173de:	781b      	ldrb	r3, [r3, #0]
 80173e0:	f003 0308 	and.w	r3, r3, #8
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d006      	beq.n	80173f6 <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	7b5b      	ldrb	r3, [r3, #13]
 80173ec:	f043 0301 	orr.w	r3, r3, #1
 80173f0:	b2da      	uxtb	r2, r3
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80173f6:	69fb      	ldr	r3, [r7, #28]
 80173f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	d01e      	beq.n	801743c <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80173fe:	69f8      	ldr	r0, [r7, #28]
 8017400:	f7fe ffec 	bl	80163dc <tcp_process_refused_data>
 8017404:	4603      	mov	r3, r0
 8017406:	f113 0f0d 	cmn.w	r3, #13
 801740a:	d007      	beq.n	801741c <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801740c:	69fb      	ldr	r3, [r7, #28]
 801740e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017410:	2b00      	cmp	r3, #0
 8017412:	d013      	beq.n	801743c <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017414:	4b84      	ldr	r3, [pc, #528]	@ (8017628 <tcp_input+0x7d0>)
 8017416:	881b      	ldrh	r3, [r3, #0]
 8017418:	2b00      	cmp	r3, #0
 801741a:	d00f      	beq.n	801743c <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801741c:	69fb      	ldr	r3, [r7, #28]
 801741e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017420:	2b00      	cmp	r3, #0
 8017422:	d102      	bne.n	801742a <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017424:	69f8      	ldr	r0, [r7, #28]
 8017426:	f003 fe6f 	bl	801b108 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 801742a:	4b78      	ldr	r3, [pc, #480]	@ (801760c <tcp_input+0x7b4>)
 801742c:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017430:	3301      	adds	r3, #1
 8017432:	b29a      	uxth	r2, r3
 8017434:	4b75      	ldr	r3, [pc, #468]	@ (801760c <tcp_input+0x7b4>)
 8017436:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801743a:	e104      	b.n	8017646 <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 801743c:	4a7b      	ldr	r2, [pc, #492]	@ (801762c <tcp_input+0x7d4>)
 801743e:	69fb      	ldr	r3, [r7, #28]
 8017440:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017442:	69f8      	ldr	r0, [r7, #28]
 8017444:	f000 fb32 	bl	8017aac <tcp_process>
 8017448:	4603      	mov	r3, r0
 801744a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801744c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017450:	f113 0f0d 	cmn.w	r3, #13
 8017454:	f000 80d1 	beq.w	80175fa <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8017458:	4b70      	ldr	r3, [pc, #448]	@ (801761c <tcp_input+0x7c4>)
 801745a:	781b      	ldrb	r3, [r3, #0]
 801745c:	f003 0308 	and.w	r3, r3, #8
 8017460:	2b00      	cmp	r3, #0
 8017462:	d015      	beq.n	8017490 <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017464:	69fb      	ldr	r3, [r7, #28]
 8017466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801746a:	2b00      	cmp	r3, #0
 801746c:	d008      	beq.n	8017480 <tcp_input+0x628>
 801746e:	69fb      	ldr	r3, [r7, #28]
 8017470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017474:	69fa      	ldr	r2, [r7, #28]
 8017476:	6912      	ldr	r2, [r2, #16]
 8017478:	f06f 010d 	mvn.w	r1, #13
 801747c:	4610      	mov	r0, r2
 801747e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017480:	69f9      	ldr	r1, [r7, #28]
 8017482:	486b      	ldr	r0, [pc, #428]	@ (8017630 <tcp_input+0x7d8>)
 8017484:	f7ff fb70 	bl	8016b68 <tcp_pcb_remove>
        tcp_free(pcb);
 8017488:	69f8      	ldr	r0, [r7, #28]
 801748a:	f7fd ff29 	bl	80152e0 <tcp_free>
 801748e:	e0da      	b.n	8017646 <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 8017490:	2300      	movs	r3, #0
 8017492:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017494:	4b62      	ldr	r3, [pc, #392]	@ (8017620 <tcp_input+0x7c8>)
 8017496:	881b      	ldrh	r3, [r3, #0]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d01d      	beq.n	80174d8 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801749c:	4b60      	ldr	r3, [pc, #384]	@ (8017620 <tcp_input+0x7c8>)
 801749e:	881b      	ldrh	r3, [r3, #0]
 80174a0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80174a2:	69fb      	ldr	r3, [r7, #28]
 80174a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d00a      	beq.n	80174c2 <tcp_input+0x66a>
 80174ac:	69fb      	ldr	r3, [r7, #28]
 80174ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80174b2:	69fa      	ldr	r2, [r7, #28]
 80174b4:	6910      	ldr	r0, [r2, #16]
 80174b6:	89fa      	ldrh	r2, [r7, #14]
 80174b8:	69f9      	ldr	r1, [r7, #28]
 80174ba:	4798      	blx	r3
 80174bc:	4603      	mov	r3, r0
 80174be:	74fb      	strb	r3, [r7, #19]
 80174c0:	e001      	b.n	80174c6 <tcp_input+0x66e>
 80174c2:	2300      	movs	r3, #0
 80174c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80174c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80174ca:	f113 0f0d 	cmn.w	r3, #13
 80174ce:	f000 8096 	beq.w	80175fe <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 80174d2:	4b53      	ldr	r3, [pc, #332]	@ (8017620 <tcp_input+0x7c8>)
 80174d4:	2200      	movs	r2, #0
 80174d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80174d8:	69f8      	ldr	r0, [r7, #28]
 80174da:	f000 f925 	bl	8017728 <tcp_input_delayed_close>
 80174de:	4603      	mov	r3, r0
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	f040 808e 	bne.w	8017602 <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80174e6:	4b4c      	ldr	r3, [pc, #304]	@ (8017618 <tcp_input+0x7c0>)
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d041      	beq.n	8017572 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80174ee:	69fb      	ldr	r3, [r7, #28]
 80174f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d006      	beq.n	8017504 <tcp_input+0x6ac>
 80174f6:	4b4f      	ldr	r3, [pc, #316]	@ (8017634 <tcp_input+0x7dc>)
 80174f8:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80174fc:	494e      	ldr	r1, [pc, #312]	@ (8017638 <tcp_input+0x7e0>)
 80174fe:	484f      	ldr	r0, [pc, #316]	@ (801763c <tcp_input+0x7e4>)
 8017500:	f008 fecc 	bl	802029c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017504:	69fb      	ldr	r3, [r7, #28]
 8017506:	8b5b      	ldrh	r3, [r3, #26]
 8017508:	f003 0310 	and.w	r3, r3, #16
 801750c:	2b00      	cmp	r3, #0
 801750e:	d008      	beq.n	8017522 <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017510:	4b41      	ldr	r3, [pc, #260]	@ (8017618 <tcp_input+0x7c0>)
 8017512:	681b      	ldr	r3, [r3, #0]
 8017514:	4618      	mov	r0, r3
 8017516:	f7fd fc1f 	bl	8014d58 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801751a:	69f8      	ldr	r0, [r7, #28]
 801751c:	f7fe fa24 	bl	8015968 <tcp_abort>
            goto aborted;
 8017520:	e091      	b.n	8017646 <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017522:	69fb      	ldr	r3, [r7, #28]
 8017524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017528:	2b00      	cmp	r3, #0
 801752a:	d00c      	beq.n	8017546 <tcp_input+0x6ee>
 801752c:	69fb      	ldr	r3, [r7, #28]
 801752e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017532:	69fb      	ldr	r3, [r7, #28]
 8017534:	6918      	ldr	r0, [r3, #16]
 8017536:	4b38      	ldr	r3, [pc, #224]	@ (8017618 <tcp_input+0x7c0>)
 8017538:	681a      	ldr	r2, [r3, #0]
 801753a:	2300      	movs	r3, #0
 801753c:	69f9      	ldr	r1, [r7, #28]
 801753e:	47a0      	blx	r4
 8017540:	4603      	mov	r3, r0
 8017542:	74fb      	strb	r3, [r7, #19]
 8017544:	e008      	b.n	8017558 <tcp_input+0x700>
 8017546:	4b34      	ldr	r3, [pc, #208]	@ (8017618 <tcp_input+0x7c0>)
 8017548:	681a      	ldr	r2, [r3, #0]
 801754a:	2300      	movs	r3, #0
 801754c:	69f9      	ldr	r1, [r7, #28]
 801754e:	2000      	movs	r0, #0
 8017550:	f7ff f81a 	bl	8016588 <tcp_recv_null>
 8017554:	4603      	mov	r3, r0
 8017556:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017558:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801755c:	f113 0f0d 	cmn.w	r3, #13
 8017560:	d051      	beq.n	8017606 <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017562:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d003      	beq.n	8017572 <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801756a:	4b2b      	ldr	r3, [pc, #172]	@ (8017618 <tcp_input+0x7c0>)
 801756c:	681a      	ldr	r2, [r3, #0]
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017572:	4b2a      	ldr	r3, [pc, #168]	@ (801761c <tcp_input+0x7c4>)
 8017574:	781b      	ldrb	r3, [r3, #0]
 8017576:	f003 0320 	and.w	r3, r3, #32
 801757a:	2b00      	cmp	r3, #0
 801757c:	d030      	beq.n	80175e0 <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 801757e:	69fb      	ldr	r3, [r7, #28]
 8017580:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017582:	2b00      	cmp	r3, #0
 8017584:	d009      	beq.n	801759a <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017586:	69fb      	ldr	r3, [r7, #28]
 8017588:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801758a:	7b5a      	ldrb	r2, [r3, #13]
 801758c:	69fb      	ldr	r3, [r7, #28]
 801758e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017590:	f042 0220 	orr.w	r2, r2, #32
 8017594:	b2d2      	uxtb	r2, r2
 8017596:	735a      	strb	r2, [r3, #13]
 8017598:	e022      	b.n	80175e0 <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801759a:	69fb      	ldr	r3, [r7, #28]
 801759c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801759e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80175a2:	d005      	beq.n	80175b0 <tcp_input+0x758>
              pcb->rcv_wnd++;
 80175a4:	69fb      	ldr	r3, [r7, #28]
 80175a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80175a8:	3301      	adds	r3, #1
 80175aa:	b29a      	uxth	r2, r3
 80175ac:	69fb      	ldr	r3, [r7, #28]
 80175ae:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80175b0:	69fb      	ldr	r3, [r7, #28]
 80175b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d00b      	beq.n	80175d2 <tcp_input+0x77a>
 80175ba:	69fb      	ldr	r3, [r7, #28]
 80175bc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80175c0:	69fb      	ldr	r3, [r7, #28]
 80175c2:	6918      	ldr	r0, [r3, #16]
 80175c4:	2300      	movs	r3, #0
 80175c6:	2200      	movs	r2, #0
 80175c8:	69f9      	ldr	r1, [r7, #28]
 80175ca:	47a0      	blx	r4
 80175cc:	4603      	mov	r3, r0
 80175ce:	74fb      	strb	r3, [r7, #19]
 80175d0:	e001      	b.n	80175d6 <tcp_input+0x77e>
 80175d2:	2300      	movs	r3, #0
 80175d4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80175d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80175da:	f113 0f0d 	cmn.w	r3, #13
 80175de:	d02f      	beq.n	8017640 <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80175e0:	4b12      	ldr	r3, [pc, #72]	@ (801762c <tcp_input+0x7d4>)
 80175e2:	2200      	movs	r2, #0
 80175e4:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80175e6:	69f8      	ldr	r0, [r7, #28]
 80175e8:	f000 f89e 	bl	8017728 <tcp_input_delayed_close>
 80175ec:	4603      	mov	r3, r0
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d128      	bne.n	8017644 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80175f2:	69f8      	ldr	r0, [r7, #28]
 80175f4:	f002 ff6e 	bl	801a4d4 <tcp_output>
 80175f8:	e025      	b.n	8017646 <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80175fa:	bf00      	nop
 80175fc:	e023      	b.n	8017646 <tcp_input+0x7ee>
              goto aborted;
 80175fe:	bf00      	nop
 8017600:	e021      	b.n	8017646 <tcp_input+0x7ee>
          goto aborted;
 8017602:	bf00      	nop
 8017604:	e01f      	b.n	8017646 <tcp_input+0x7ee>
            goto aborted;
 8017606:	bf00      	nop
 8017608:	e01d      	b.n	8017646 <tcp_input+0x7ee>
 801760a:	bf00      	nop
 801760c:	200252ac 	.word	0x200252ac
 8017610:	200253c0 	.word	0x200253c0
 8017614:	200253d0 	.word	0x200253d0
 8017618:	200253f0 	.word	0x200253f0
 801761c:	200253ed 	.word	0x200253ed
 8017620:	200253e8 	.word	0x200253e8
 8017624:	200253ec 	.word	0x200253ec
 8017628:	200253ea 	.word	0x200253ea
 801762c:	200253f4 	.word	0x200253f4
 8017630:	200253b4 	.word	0x200253b4
 8017634:	080230b0 	.word	0x080230b0
 8017638:	08023264 	.word	0x08023264
 801763c:	080230fc 	.word	0x080230fc
              goto aborted;
 8017640:	bf00      	nop
 8017642:	e000      	b.n	8017646 <tcp_input+0x7ee>
          goto aborted;
 8017644:	bf00      	nop
    tcp_input_pcb = NULL;
 8017646:	4b2e      	ldr	r3, [pc, #184]	@ (8017700 <tcp_input+0x8a8>)
 8017648:	2200      	movs	r2, #0
 801764a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801764c:	4b2d      	ldr	r3, [pc, #180]	@ (8017704 <tcp_input+0x8ac>)
 801764e:	2200      	movs	r2, #0
 8017650:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017652:	4b2d      	ldr	r3, [pc, #180]	@ (8017708 <tcp_input+0x8b0>)
 8017654:	685b      	ldr	r3, [r3, #4]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d04e      	beq.n	80176f8 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 801765a:	4b2b      	ldr	r3, [pc, #172]	@ (8017708 <tcp_input+0x8b0>)
 801765c:	685b      	ldr	r3, [r3, #4]
 801765e:	4618      	mov	r0, r3
 8017660:	f7fd fb7a 	bl	8014d58 <pbuf_free>
      inseg.p = NULL;
 8017664:	4b28      	ldr	r3, [pc, #160]	@ (8017708 <tcp_input+0x8b0>)
 8017666:	2200      	movs	r2, #0
 8017668:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801766a:	e045      	b.n	80176f8 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801766c:	4b27      	ldr	r3, [pc, #156]	@ (801770c <tcp_input+0x8b4>)
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	899b      	ldrh	r3, [r3, #12]
 8017672:	b29b      	uxth	r3, r3
 8017674:	4618      	mov	r0, r3
 8017676:	f7fb feb1 	bl	80133dc <lwip_htons>
 801767a:	4603      	mov	r3, r0
 801767c:	b2db      	uxtb	r3, r3
 801767e:	f003 0304 	and.w	r3, r3, #4
 8017682:	2b00      	cmp	r3, #0
 8017684:	d128      	bne.n	80176d8 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 8017686:	4b22      	ldr	r3, [pc, #136]	@ (8017710 <tcp_input+0x8b8>)
 8017688:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 801768c:	3301      	adds	r3, #1
 801768e:	b29a      	uxth	r2, r3
 8017690:	4b1f      	ldr	r3, [pc, #124]	@ (8017710 <tcp_input+0x8b8>)
 8017692:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 8017696:	4b1e      	ldr	r3, [pc, #120]	@ (8017710 <tcp_input+0x8b8>)
 8017698:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 801769c:	3301      	adds	r3, #1
 801769e:	b29a      	uxth	r2, r3
 80176a0:	4b1b      	ldr	r3, [pc, #108]	@ (8017710 <tcp_input+0x8b8>)
 80176a2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176a6:	4b1b      	ldr	r3, [pc, #108]	@ (8017714 <tcp_input+0x8bc>)
 80176a8:	6819      	ldr	r1, [r3, #0]
 80176aa:	4b1b      	ldr	r3, [pc, #108]	@ (8017718 <tcp_input+0x8c0>)
 80176ac:	881b      	ldrh	r3, [r3, #0]
 80176ae:	461a      	mov	r2, r3
 80176b0:	4b1a      	ldr	r3, [pc, #104]	@ (801771c <tcp_input+0x8c4>)
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176b6:	4b15      	ldr	r3, [pc, #84]	@ (801770c <tcp_input+0x8b4>)
 80176b8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176ba:	885b      	ldrh	r3, [r3, #2]
 80176bc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176be:	4a13      	ldr	r2, [pc, #76]	@ (801770c <tcp_input+0x8b4>)
 80176c0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176c2:	8812      	ldrh	r2, [r2, #0]
 80176c4:	b292      	uxth	r2, r2
 80176c6:	9202      	str	r2, [sp, #8]
 80176c8:	9301      	str	r3, [sp, #4]
 80176ca:	4b15      	ldr	r3, [pc, #84]	@ (8017720 <tcp_input+0x8c8>)
 80176cc:	9300      	str	r3, [sp, #0]
 80176ce:	4b15      	ldr	r3, [pc, #84]	@ (8017724 <tcp_input+0x8cc>)
 80176d0:	4602      	mov	r2, r0
 80176d2:	2000      	movs	r0, #0
 80176d4:	f003 fcc6 	bl	801b064 <tcp_rst>
    pbuf_free(p);
 80176d8:	6878      	ldr	r0, [r7, #4]
 80176da:	f7fd fb3d 	bl	8014d58 <pbuf_free>
  return;
 80176de:	e00b      	b.n	80176f8 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 80176e0:	4b0b      	ldr	r3, [pc, #44]	@ (8017710 <tcp_input+0x8b8>)
 80176e2:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 80176e6:	3301      	adds	r3, #1
 80176e8:	b29a      	uxth	r2, r3
 80176ea:	4b09      	ldr	r3, [pc, #36]	@ (8017710 <tcp_input+0x8b8>)
 80176ec:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80176f0:	6878      	ldr	r0, [r7, #4]
 80176f2:	f7fd fb31 	bl	8014d58 <pbuf_free>
 80176f6:	e000      	b.n	80176fa <tcp_input+0x8a2>
  return;
 80176f8:	bf00      	nop
}
 80176fa:	3724      	adds	r7, #36	@ 0x24
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd90      	pop	{r4, r7, pc}
 8017700:	200253f4 	.word	0x200253f4
 8017704:	200253f0 	.word	0x200253f0
 8017708:	200253c0 	.word	0x200253c0
 801770c:	200253d0 	.word	0x200253d0
 8017710:	200252ac 	.word	0x200252ac
 8017714:	200253e4 	.word	0x200253e4
 8017718:	200253ea 	.word	0x200253ea
 801771c:	200253e0 	.word	0x200253e0
 8017720:	2001f0c0 	.word	0x2001f0c0
 8017724:	2001f0c4 	.word	0x2001f0c4

08017728 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b082      	sub	sp, #8
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d106      	bne.n	8017744 <tcp_input_delayed_close+0x1c>
 8017736:	4b17      	ldr	r3, [pc, #92]	@ (8017794 <tcp_input_delayed_close+0x6c>)
 8017738:	f240 225a 	movw	r2, #602	@ 0x25a
 801773c:	4916      	ldr	r1, [pc, #88]	@ (8017798 <tcp_input_delayed_close+0x70>)
 801773e:	4817      	ldr	r0, [pc, #92]	@ (801779c <tcp_input_delayed_close+0x74>)
 8017740:	f008 fdac 	bl	802029c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017744:	4b16      	ldr	r3, [pc, #88]	@ (80177a0 <tcp_input_delayed_close+0x78>)
 8017746:	781b      	ldrb	r3, [r3, #0]
 8017748:	f003 0310 	and.w	r3, r3, #16
 801774c:	2b00      	cmp	r3, #0
 801774e:	d01c      	beq.n	801778a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	8b5b      	ldrh	r3, [r3, #26]
 8017754:	f003 0310 	and.w	r3, r3, #16
 8017758:	2b00      	cmp	r3, #0
 801775a:	d10d      	bne.n	8017778 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017762:	2b00      	cmp	r3, #0
 8017764:	d008      	beq.n	8017778 <tcp_input_delayed_close+0x50>
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801776c:	687a      	ldr	r2, [r7, #4]
 801776e:	6912      	ldr	r2, [r2, #16]
 8017770:	f06f 010e 	mvn.w	r1, #14
 8017774:	4610      	mov	r0, r2
 8017776:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017778:	6879      	ldr	r1, [r7, #4]
 801777a:	480a      	ldr	r0, [pc, #40]	@ (80177a4 <tcp_input_delayed_close+0x7c>)
 801777c:	f7ff f9f4 	bl	8016b68 <tcp_pcb_remove>
    tcp_free(pcb);
 8017780:	6878      	ldr	r0, [r7, #4]
 8017782:	f7fd fdad 	bl	80152e0 <tcp_free>
    return 1;
 8017786:	2301      	movs	r3, #1
 8017788:	e000      	b.n	801778c <tcp_input_delayed_close+0x64>
  }
  return 0;
 801778a:	2300      	movs	r3, #0
}
 801778c:	4618      	mov	r0, r3
 801778e:	3708      	adds	r7, #8
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}
 8017794:	080230b0 	.word	0x080230b0
 8017798:	08023280 	.word	0x08023280
 801779c:	080230fc 	.word	0x080230fc
 80177a0:	200253ed 	.word	0x200253ed
 80177a4:	200253b4 	.word	0x200253b4

080177a8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80177a8:	b590      	push	{r4, r7, lr}
 80177aa:	b08b      	sub	sp, #44	@ 0x2c
 80177ac:	af04      	add	r7, sp, #16
 80177ae:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80177b0:	4b73      	ldr	r3, [pc, #460]	@ (8017980 <tcp_listen_input+0x1d8>)
 80177b2:	781b      	ldrb	r3, [r3, #0]
 80177b4:	f003 0304 	and.w	r3, r3, #4
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	f040 80da 	bne.w	8017972 <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	2b00      	cmp	r3, #0
 80177c2:	d106      	bne.n	80177d2 <tcp_listen_input+0x2a>
 80177c4:	4b6f      	ldr	r3, [pc, #444]	@ (8017984 <tcp_listen_input+0x1dc>)
 80177c6:	f240 2281 	movw	r2, #641	@ 0x281
 80177ca:	496f      	ldr	r1, [pc, #444]	@ (8017988 <tcp_listen_input+0x1e0>)
 80177cc:	486f      	ldr	r0, [pc, #444]	@ (801798c <tcp_listen_input+0x1e4>)
 80177ce:	f008 fd65 	bl	802029c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80177d2:	4b6b      	ldr	r3, [pc, #428]	@ (8017980 <tcp_listen_input+0x1d8>)
 80177d4:	781b      	ldrb	r3, [r3, #0]
 80177d6:	f003 0310 	and.w	r3, r3, #16
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d019      	beq.n	8017812 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177de:	4b6c      	ldr	r3, [pc, #432]	@ (8017990 <tcp_listen_input+0x1e8>)
 80177e0:	6819      	ldr	r1, [r3, #0]
 80177e2:	4b6c      	ldr	r3, [pc, #432]	@ (8017994 <tcp_listen_input+0x1ec>)
 80177e4:	881b      	ldrh	r3, [r3, #0]
 80177e6:	461a      	mov	r2, r3
 80177e8:	4b6b      	ldr	r3, [pc, #428]	@ (8017998 <tcp_listen_input+0x1f0>)
 80177ea:	681b      	ldr	r3, [r3, #0]
 80177ec:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177ee:	4b6b      	ldr	r3, [pc, #428]	@ (801799c <tcp_listen_input+0x1f4>)
 80177f0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177f2:	885b      	ldrh	r3, [r3, #2]
 80177f4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80177f6:	4a69      	ldr	r2, [pc, #420]	@ (801799c <tcp_listen_input+0x1f4>)
 80177f8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80177fa:	8812      	ldrh	r2, [r2, #0]
 80177fc:	b292      	uxth	r2, r2
 80177fe:	9202      	str	r2, [sp, #8]
 8017800:	9301      	str	r3, [sp, #4]
 8017802:	4b67      	ldr	r3, [pc, #412]	@ (80179a0 <tcp_listen_input+0x1f8>)
 8017804:	9300      	str	r3, [sp, #0]
 8017806:	4b67      	ldr	r3, [pc, #412]	@ (80179a4 <tcp_listen_input+0x1fc>)
 8017808:	4602      	mov	r2, r0
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f003 fc2a 	bl	801b064 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017810:	e0b1      	b.n	8017976 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 8017812:	4b5b      	ldr	r3, [pc, #364]	@ (8017980 <tcp_listen_input+0x1d8>)
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	f003 0302 	and.w	r3, r3, #2
 801781a:	2b00      	cmp	r3, #0
 801781c:	f000 80ab 	beq.w	8017976 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	7d5b      	ldrb	r3, [r3, #21]
 8017824:	4618      	mov	r0, r3
 8017826:	f7fe ffd3 	bl	80167d0 <tcp_alloc>
 801782a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801782c:	697b      	ldr	r3, [r7, #20]
 801782e:	2b00      	cmp	r3, #0
 8017830:	d119      	bne.n	8017866 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8017832:	4b5d      	ldr	r3, [pc, #372]	@ (80179a8 <tcp_listen_input+0x200>)
 8017834:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8017838:	3301      	adds	r3, #1
 801783a:	b29a      	uxth	r2, r3
 801783c:	4b5a      	ldr	r3, [pc, #360]	@ (80179a8 <tcp_listen_input+0x200>)
 801783e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	699b      	ldr	r3, [r3, #24]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d00a      	beq.n	8017860 <tcp_listen_input+0xb8>
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	699b      	ldr	r3, [r3, #24]
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	6910      	ldr	r0, [r2, #16]
 8017852:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017856:	2100      	movs	r1, #0
 8017858:	4798      	blx	r3
 801785a:	4603      	mov	r3, r0
 801785c:	73bb      	strb	r3, [r7, #14]
      return;
 801785e:	e08b      	b.n	8017978 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017860:	23f0      	movs	r3, #240	@ 0xf0
 8017862:	73bb      	strb	r3, [r7, #14]
      return;
 8017864:	e088      	b.n	8017978 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017866:	4b51      	ldr	r3, [pc, #324]	@ (80179ac <tcp_listen_input+0x204>)
 8017868:	695a      	ldr	r2, [r3, #20]
 801786a:	697b      	ldr	r3, [r7, #20]
 801786c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801786e:	4b4f      	ldr	r3, [pc, #316]	@ (80179ac <tcp_listen_input+0x204>)
 8017870:	691a      	ldr	r2, [r3, #16]
 8017872:	697b      	ldr	r3, [r7, #20]
 8017874:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	8ada      	ldrh	r2, [r3, #22]
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801787e:	4b47      	ldr	r3, [pc, #284]	@ (801799c <tcp_listen_input+0x1f4>)
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	881b      	ldrh	r3, [r3, #0]
 8017884:	b29a      	uxth	r2, r3
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	2203      	movs	r2, #3
 801788e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017890:	4b41      	ldr	r3, [pc, #260]	@ (8017998 <tcp_listen_input+0x1f0>)
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	1c5a      	adds	r2, r3, #1
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801789a:	697b      	ldr	r3, [r7, #20]
 801789c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 80178a2:	6978      	ldr	r0, [r7, #20]
 80178a4:	f7ff f9f4 	bl	8016c90 <tcp_next_iss>
 80178a8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	693a      	ldr	r2, [r7, #16]
 80178ae:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 80178b0:	697b      	ldr	r3, [r7, #20]
 80178b2:	693a      	ldr	r2, [r7, #16]
 80178b4:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	693a      	ldr	r2, [r7, #16]
 80178ba:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 80178bc:	697b      	ldr	r3, [r7, #20]
 80178be:	693a      	ldr	r2, [r7, #16]
 80178c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80178c2:	4b35      	ldr	r3, [pc, #212]	@ (8017998 <tcp_listen_input+0x1f0>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	1e5a      	subs	r2, r3, #1
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	691a      	ldr	r2, [r3, #16]
 80178d0:	697b      	ldr	r3, [r7, #20]
 80178d2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	687a      	ldr	r2, [r7, #4]
 80178d8:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	7a5b      	ldrb	r3, [r3, #9]
 80178de:	f003 030c 	and.w	r3, r3, #12
 80178e2:	b2da      	uxtb	r2, r3
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	7a1a      	ldrb	r2, [r3, #8]
 80178ec:	697b      	ldr	r3, [r7, #20]
 80178ee:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80178f0:	4b2f      	ldr	r3, [pc, #188]	@ (80179b0 <tcp_listen_input+0x208>)
 80178f2:	681a      	ldr	r2, [r3, #0]
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	60da      	str	r2, [r3, #12]
 80178f8:	4a2d      	ldr	r2, [pc, #180]	@ (80179b0 <tcp_listen_input+0x208>)
 80178fa:	697b      	ldr	r3, [r7, #20]
 80178fc:	6013      	str	r3, [r2, #0]
 80178fe:	f003 fd73 	bl	801b3e8 <tcp_timer_needed>
 8017902:	4b2c      	ldr	r3, [pc, #176]	@ (80179b4 <tcp_listen_input+0x20c>)
 8017904:	2201      	movs	r2, #1
 8017906:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017908:	6978      	ldr	r0, [r7, #20]
 801790a:	f001 fd8d 	bl	8019428 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801790e:	4b23      	ldr	r3, [pc, #140]	@ (801799c <tcp_listen_input+0x1f4>)
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	89db      	ldrh	r3, [r3, #14]
 8017914:	b29a      	uxth	r2, r3
 8017916:	697b      	ldr	r3, [r7, #20]
 8017918:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801791c:	697b      	ldr	r3, [r7, #20]
 801791e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017922:	697b      	ldr	r3, [r7, #20]
 8017924:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017928:	697b      	ldr	r3, [r7, #20]
 801792a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801792c:	697b      	ldr	r3, [r7, #20]
 801792e:	3304      	adds	r3, #4
 8017930:	4618      	mov	r0, r3
 8017932:	f005 fd63 	bl	801d3fc <ip4_route>
 8017936:	4601      	mov	r1, r0
 8017938:	697b      	ldr	r3, [r7, #20]
 801793a:	3304      	adds	r3, #4
 801793c:	461a      	mov	r2, r3
 801793e:	4620      	mov	r0, r4
 8017940:	f7ff f9cc 	bl	8016cdc <tcp_eff_send_mss_netif>
 8017944:	4603      	mov	r3, r0
 8017946:	461a      	mov	r2, r3
 8017948:	697b      	ldr	r3, [r7, #20]
 801794a:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801794c:	2112      	movs	r1, #18
 801794e:	6978      	ldr	r0, [r7, #20]
 8017950:	f002 fcc0 	bl	801a2d4 <tcp_enqueue_flags>
 8017954:	4603      	mov	r3, r0
 8017956:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801795c:	2b00      	cmp	r3, #0
 801795e:	d004      	beq.n	801796a <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8017960:	2100      	movs	r1, #0
 8017962:	6978      	ldr	r0, [r7, #20]
 8017964:	f7fd ff42 	bl	80157ec <tcp_abandon>
      return;
 8017968:	e006      	b.n	8017978 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 801796a:	6978      	ldr	r0, [r7, #20]
 801796c:	f002 fdb2 	bl	801a4d4 <tcp_output>
  return;
 8017970:	e001      	b.n	8017976 <tcp_listen_input+0x1ce>
    return;
 8017972:	bf00      	nop
 8017974:	e000      	b.n	8017978 <tcp_listen_input+0x1d0>
  return;
 8017976:	bf00      	nop
}
 8017978:	371c      	adds	r7, #28
 801797a:	46bd      	mov	sp, r7
 801797c:	bd90      	pop	{r4, r7, pc}
 801797e:	bf00      	nop
 8017980:	200253ec 	.word	0x200253ec
 8017984:	080230b0 	.word	0x080230b0
 8017988:	080232a8 	.word	0x080232a8
 801798c:	080230fc 	.word	0x080230fc
 8017990:	200253e4 	.word	0x200253e4
 8017994:	200253ea 	.word	0x200253ea
 8017998:	200253e0 	.word	0x200253e0
 801799c:	200253d0 	.word	0x200253d0
 80179a0:	2001f0c0 	.word	0x2001f0c0
 80179a4:	2001f0c4 	.word	0x2001f0c4
 80179a8:	200252ac 	.word	0x200252ac
 80179ac:	2001f0b0 	.word	0x2001f0b0
 80179b0:	200253b4 	.word	0x200253b4
 80179b4:	200253bc 	.word	0x200253bc

080179b8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b086      	sub	sp, #24
 80179bc:	af04      	add	r7, sp, #16
 80179be:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80179c0:	4b2f      	ldr	r3, [pc, #188]	@ (8017a80 <tcp_timewait_input+0xc8>)
 80179c2:	781b      	ldrb	r3, [r3, #0]
 80179c4:	f003 0304 	and.w	r3, r3, #4
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d153      	bne.n	8017a74 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d106      	bne.n	80179e0 <tcp_timewait_input+0x28>
 80179d2:	4b2c      	ldr	r3, [pc, #176]	@ (8017a84 <tcp_timewait_input+0xcc>)
 80179d4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80179d8:	492b      	ldr	r1, [pc, #172]	@ (8017a88 <tcp_timewait_input+0xd0>)
 80179da:	482c      	ldr	r0, [pc, #176]	@ (8017a8c <tcp_timewait_input+0xd4>)
 80179dc:	f008 fc5e 	bl	802029c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80179e0:	4b27      	ldr	r3, [pc, #156]	@ (8017a80 <tcp_timewait_input+0xc8>)
 80179e2:	781b      	ldrb	r3, [r3, #0]
 80179e4:	f003 0302 	and.w	r3, r3, #2
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d02a      	beq.n	8017a42 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80179ec:	4b28      	ldr	r3, [pc, #160]	@ (8017a90 <tcp_timewait_input+0xd8>)
 80179ee:	681a      	ldr	r2, [r3, #0]
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80179f4:	1ad3      	subs	r3, r2, r3
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	db2d      	blt.n	8017a56 <tcp_timewait_input+0x9e>
 80179fa:	4b25      	ldr	r3, [pc, #148]	@ (8017a90 <tcp_timewait_input+0xd8>)
 80179fc:	681a      	ldr	r2, [r3, #0]
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017a02:	6879      	ldr	r1, [r7, #4]
 8017a04:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017a06:	440b      	add	r3, r1
 8017a08:	1ad3      	subs	r3, r2, r3
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	dc23      	bgt.n	8017a56 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a0e:	4b21      	ldr	r3, [pc, #132]	@ (8017a94 <tcp_timewait_input+0xdc>)
 8017a10:	6819      	ldr	r1, [r3, #0]
 8017a12:	4b21      	ldr	r3, [pc, #132]	@ (8017a98 <tcp_timewait_input+0xe0>)
 8017a14:	881b      	ldrh	r3, [r3, #0]
 8017a16:	461a      	mov	r2, r3
 8017a18:	4b1d      	ldr	r3, [pc, #116]	@ (8017a90 <tcp_timewait_input+0xd8>)
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a1e:	4b1f      	ldr	r3, [pc, #124]	@ (8017a9c <tcp_timewait_input+0xe4>)
 8017a20:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a22:	885b      	ldrh	r3, [r3, #2]
 8017a24:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017a26:	4a1d      	ldr	r2, [pc, #116]	@ (8017a9c <tcp_timewait_input+0xe4>)
 8017a28:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017a2a:	8812      	ldrh	r2, [r2, #0]
 8017a2c:	b292      	uxth	r2, r2
 8017a2e:	9202      	str	r2, [sp, #8]
 8017a30:	9301      	str	r3, [sp, #4]
 8017a32:	4b1b      	ldr	r3, [pc, #108]	@ (8017aa0 <tcp_timewait_input+0xe8>)
 8017a34:	9300      	str	r3, [sp, #0]
 8017a36:	4b1b      	ldr	r3, [pc, #108]	@ (8017aa4 <tcp_timewait_input+0xec>)
 8017a38:	4602      	mov	r2, r0
 8017a3a:	6878      	ldr	r0, [r7, #4]
 8017a3c:	f003 fb12 	bl	801b064 <tcp_rst>
      return;
 8017a40:	e01b      	b.n	8017a7a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017a42:	4b0f      	ldr	r3, [pc, #60]	@ (8017a80 <tcp_timewait_input+0xc8>)
 8017a44:	781b      	ldrb	r3, [r3, #0]
 8017a46:	f003 0301 	and.w	r3, r3, #1
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d003      	beq.n	8017a56 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017a4e:	4b16      	ldr	r3, [pc, #88]	@ (8017aa8 <tcp_timewait_input+0xf0>)
 8017a50:	681a      	ldr	r2, [r3, #0]
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8017a56:	4b10      	ldr	r3, [pc, #64]	@ (8017a98 <tcp_timewait_input+0xe0>)
 8017a58:	881b      	ldrh	r3, [r3, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d00c      	beq.n	8017a78 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	8b5b      	ldrh	r3, [r3, #26]
 8017a62:	f043 0302 	orr.w	r3, r3, #2
 8017a66:	b29a      	uxth	r2, r3
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8017a6c:	6878      	ldr	r0, [r7, #4]
 8017a6e:	f002 fd31 	bl	801a4d4 <tcp_output>
  }
  return;
 8017a72:	e001      	b.n	8017a78 <tcp_timewait_input+0xc0>
    return;
 8017a74:	bf00      	nop
 8017a76:	e000      	b.n	8017a7a <tcp_timewait_input+0xc2>
  return;
 8017a78:	bf00      	nop
}
 8017a7a:	3708      	adds	r7, #8
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}
 8017a80:	200253ec 	.word	0x200253ec
 8017a84:	080230b0 	.word	0x080230b0
 8017a88:	080232c8 	.word	0x080232c8
 8017a8c:	080230fc 	.word	0x080230fc
 8017a90:	200253e0 	.word	0x200253e0
 8017a94:	200253e4 	.word	0x200253e4
 8017a98:	200253ea 	.word	0x200253ea
 8017a9c:	200253d0 	.word	0x200253d0
 8017aa0:	2001f0c0 	.word	0x2001f0c0
 8017aa4:	2001f0c4 	.word	0x2001f0c4
 8017aa8:	200253a8 	.word	0x200253a8

08017aac <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8017aac:	b590      	push	{r4, r7, lr}
 8017aae:	b08d      	sub	sp, #52	@ 0x34
 8017ab0:	af04      	add	r7, sp, #16
 8017ab2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8017ab4:	2300      	movs	r3, #0
 8017ab6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8017ab8:	2300      	movs	r3, #0
 8017aba:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d106      	bne.n	8017ad0 <tcp_process+0x24>
 8017ac2:	4b9d      	ldr	r3, [pc, #628]	@ (8017d38 <tcp_process+0x28c>)
 8017ac4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8017ac8:	499c      	ldr	r1, [pc, #624]	@ (8017d3c <tcp_process+0x290>)
 8017aca:	489d      	ldr	r0, [pc, #628]	@ (8017d40 <tcp_process+0x294>)
 8017acc:	f008 fbe6 	bl	802029c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017ad0:	4b9c      	ldr	r3, [pc, #624]	@ (8017d44 <tcp_process+0x298>)
 8017ad2:	781b      	ldrb	r3, [r3, #0]
 8017ad4:	f003 0304 	and.w	r3, r3, #4
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d04e      	beq.n	8017b7a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	7d1b      	ldrb	r3, [r3, #20]
 8017ae0:	2b02      	cmp	r3, #2
 8017ae2:	d108      	bne.n	8017af6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ae8:	4b97      	ldr	r3, [pc, #604]	@ (8017d48 <tcp_process+0x29c>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d123      	bne.n	8017b38 <tcp_process+0x8c>
        acceptable = 1;
 8017af0:	2301      	movs	r3, #1
 8017af2:	76fb      	strb	r3, [r7, #27]
 8017af4:	e020      	b.n	8017b38 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017afa:	4b94      	ldr	r3, [pc, #592]	@ (8017d4c <tcp_process+0x2a0>)
 8017afc:	681b      	ldr	r3, [r3, #0]
 8017afe:	429a      	cmp	r2, r3
 8017b00:	d102      	bne.n	8017b08 <tcp_process+0x5c>
        acceptable = 1;
 8017b02:	2301      	movs	r3, #1
 8017b04:	76fb      	strb	r3, [r7, #27]
 8017b06:	e017      	b.n	8017b38 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017b08:	4b90      	ldr	r3, [pc, #576]	@ (8017d4c <tcp_process+0x2a0>)
 8017b0a:	681a      	ldr	r2, [r3, #0]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b10:	1ad3      	subs	r3, r2, r3
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	db10      	blt.n	8017b38 <tcp_process+0x8c>
 8017b16:	4b8d      	ldr	r3, [pc, #564]	@ (8017d4c <tcp_process+0x2a0>)
 8017b18:	681a      	ldr	r2, [r3, #0]
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017b1e:	6879      	ldr	r1, [r7, #4]
 8017b20:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8017b22:	440b      	add	r3, r1
 8017b24:	1ad3      	subs	r3, r2, r3
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	dc06      	bgt.n	8017b38 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	8b5b      	ldrh	r3, [r3, #26]
 8017b2e:	f043 0302 	orr.w	r3, r3, #2
 8017b32:	b29a      	uxth	r2, r3
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8017b38:	7efb      	ldrb	r3, [r7, #27]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d01b      	beq.n	8017b76 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	7d1b      	ldrb	r3, [r3, #20]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d106      	bne.n	8017b54 <tcp_process+0xa8>
 8017b46:	4b7c      	ldr	r3, [pc, #496]	@ (8017d38 <tcp_process+0x28c>)
 8017b48:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8017b4c:	4980      	ldr	r1, [pc, #512]	@ (8017d50 <tcp_process+0x2a4>)
 8017b4e:	487c      	ldr	r0, [pc, #496]	@ (8017d40 <tcp_process+0x294>)
 8017b50:	f008 fba4 	bl	802029c <iprintf>
      recv_flags |= TF_RESET;
 8017b54:	4b7f      	ldr	r3, [pc, #508]	@ (8017d54 <tcp_process+0x2a8>)
 8017b56:	781b      	ldrb	r3, [r3, #0]
 8017b58:	f043 0308 	orr.w	r3, r3, #8
 8017b5c:	b2da      	uxtb	r2, r3
 8017b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8017d54 <tcp_process+0x2a8>)
 8017b60:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	8b5b      	ldrh	r3, [r3, #26]
 8017b66:	f023 0301 	bic.w	r3, r3, #1
 8017b6a:	b29a      	uxth	r2, r3
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017b70:	f06f 030d 	mvn.w	r3, #13
 8017b74:	e37a      	b.n	801826c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8017b76:	2300      	movs	r3, #0
 8017b78:	e378      	b.n	801826c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8017b7a:	4b72      	ldr	r3, [pc, #456]	@ (8017d44 <tcp_process+0x298>)
 8017b7c:	781b      	ldrb	r3, [r3, #0]
 8017b7e:	f003 0302 	and.w	r3, r3, #2
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d010      	beq.n	8017ba8 <tcp_process+0xfc>
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	7d1b      	ldrb	r3, [r3, #20]
 8017b8a:	2b02      	cmp	r3, #2
 8017b8c:	d00c      	beq.n	8017ba8 <tcp_process+0xfc>
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	7d1b      	ldrb	r3, [r3, #20]
 8017b92:	2b03      	cmp	r3, #3
 8017b94:	d008      	beq.n	8017ba8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	8b5b      	ldrh	r3, [r3, #26]
 8017b9a:	f043 0302 	orr.w	r3, r3, #2
 8017b9e:	b29a      	uxth	r2, r3
 8017ba0:	687b      	ldr	r3, [r7, #4]
 8017ba2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	e361      	b.n	801826c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	8b5b      	ldrh	r3, [r3, #26]
 8017bac:	f003 0310 	and.w	r3, r3, #16
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d103      	bne.n	8017bbc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017bb4:	4b68      	ldr	r3, [pc, #416]	@ (8017d58 <tcp_process+0x2ac>)
 8017bb6:	681a      	ldr	r2, [r3, #0]
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8017bcc:	6878      	ldr	r0, [r7, #4]
 8017bce:	f001 fc2b 	bl	8019428 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	7d1b      	ldrb	r3, [r3, #20]
 8017bd6:	3b02      	subs	r3, #2
 8017bd8:	2b07      	cmp	r3, #7
 8017bda:	f200 8337 	bhi.w	801824c <tcp_process+0x7a0>
 8017bde:	a201      	add	r2, pc, #4	@ (adr r2, 8017be4 <tcp_process+0x138>)
 8017be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017be4:	08017c05 	.word	0x08017c05
 8017be8:	08017e35 	.word	0x08017e35
 8017bec:	08017fad 	.word	0x08017fad
 8017bf0:	08017fd7 	.word	0x08017fd7
 8017bf4:	080180fb 	.word	0x080180fb
 8017bf8:	08017fad 	.word	0x08017fad
 8017bfc:	08018187 	.word	0x08018187
 8017c00:	08018217 	.word	0x08018217
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017c04:	4b4f      	ldr	r3, [pc, #316]	@ (8017d44 <tcp_process+0x298>)
 8017c06:	781b      	ldrb	r3, [r3, #0]
 8017c08:	f003 0310 	and.w	r3, r3, #16
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	f000 80e4 	beq.w	8017dda <tcp_process+0x32e>
 8017c12:	4b4c      	ldr	r3, [pc, #304]	@ (8017d44 <tcp_process+0x298>)
 8017c14:	781b      	ldrb	r3, [r3, #0]
 8017c16:	f003 0302 	and.w	r3, r3, #2
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	f000 80dd 	beq.w	8017dda <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017c24:	1c5a      	adds	r2, r3, #1
 8017c26:	4b48      	ldr	r3, [pc, #288]	@ (8017d48 <tcp_process+0x29c>)
 8017c28:	681b      	ldr	r3, [r3, #0]
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	f040 80d5 	bne.w	8017dda <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017c30:	4b46      	ldr	r3, [pc, #280]	@ (8017d4c <tcp_process+0x2a0>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	1c5a      	adds	r2, r3, #1
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8017c42:	4b41      	ldr	r3, [pc, #260]	@ (8017d48 <tcp_process+0x29c>)
 8017c44:	681a      	ldr	r2, [r3, #0]
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8017c4a:	4b44      	ldr	r3, [pc, #272]	@ (8017d5c <tcp_process+0x2b0>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	89db      	ldrh	r3, [r3, #14]
 8017c50:	b29a      	uxth	r2, r3
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017c64:	4b39      	ldr	r3, [pc, #228]	@ (8017d4c <tcp_process+0x2a0>)
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	1e5a      	subs	r2, r3, #1
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	2204      	movs	r2, #4
 8017c72:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	3304      	adds	r3, #4
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f005 fbbd 	bl	801d3fc <ip4_route>
 8017c82:	4601      	mov	r1, r0
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	3304      	adds	r3, #4
 8017c88:	461a      	mov	r2, r3
 8017c8a:	4620      	mov	r0, r4
 8017c8c:	f7ff f826 	bl	8016cdc <tcp_eff_send_mss_netif>
 8017c90:	4603      	mov	r3, r0
 8017c92:	461a      	mov	r2, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017c9c:	009a      	lsls	r2, r3, #2
 8017c9e:	687b      	ldr	r3, [r7, #4]
 8017ca0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ca2:	005b      	lsls	r3, r3, #1
 8017ca4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017ca8:	428b      	cmp	r3, r1
 8017caa:	bf38      	it	cc
 8017cac:	460b      	movcc	r3, r1
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	d204      	bcs.n	8017cbc <tcp_process+0x210>
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017cb6:	009b      	lsls	r3, r3, #2
 8017cb8:	b29b      	uxth	r3, r3
 8017cba:	e00d      	b.n	8017cd8 <tcp_process+0x22c>
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017cc0:	005b      	lsls	r3, r3, #1
 8017cc2:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d904      	bls.n	8017cd4 <tcp_process+0x228>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017cce:	005b      	lsls	r3, r3, #1
 8017cd0:	b29b      	uxth	r3, r3
 8017cd2:	e001      	b.n	8017cd8 <tcp_process+0x22c>
 8017cd4:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017cd8:	687a      	ldr	r2, [r7, #4]
 8017cda:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d106      	bne.n	8017cf6 <tcp_process+0x24a>
 8017ce8:	4b13      	ldr	r3, [pc, #76]	@ (8017d38 <tcp_process+0x28c>)
 8017cea:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8017cee:	491c      	ldr	r1, [pc, #112]	@ (8017d60 <tcp_process+0x2b4>)
 8017cf0:	4813      	ldr	r0, [pc, #76]	@ (8017d40 <tcp_process+0x294>)
 8017cf2:	f008 fad3 	bl	802029c <iprintf>
        --pcb->snd_queuelen;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8017cfc:	3b01      	subs	r3, #1
 8017cfe:	b29a      	uxth	r2, r3
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017d0a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017d0c:	69fb      	ldr	r3, [r7, #28]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d12a      	bne.n	8017d68 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017d16:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8017d18:	69fb      	ldr	r3, [r7, #28]
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d106      	bne.n	8017d2c <tcp_process+0x280>
 8017d1e:	4b06      	ldr	r3, [pc, #24]	@ (8017d38 <tcp_process+0x28c>)
 8017d20:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8017d24:	490f      	ldr	r1, [pc, #60]	@ (8017d64 <tcp_process+0x2b8>)
 8017d26:	4806      	ldr	r0, [pc, #24]	@ (8017d40 <tcp_process+0x294>)
 8017d28:	f008 fab8 	bl	802029c <iprintf>
          pcb->unsent = rseg->next;
 8017d2c:	69fb      	ldr	r3, [r7, #28]
 8017d2e:	681a      	ldr	r2, [r3, #0]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017d34:	e01c      	b.n	8017d70 <tcp_process+0x2c4>
 8017d36:	bf00      	nop
 8017d38:	080230b0 	.word	0x080230b0
 8017d3c:	080232e8 	.word	0x080232e8
 8017d40:	080230fc 	.word	0x080230fc
 8017d44:	200253ec 	.word	0x200253ec
 8017d48:	200253e4 	.word	0x200253e4
 8017d4c:	200253e0 	.word	0x200253e0
 8017d50:	08023304 	.word	0x08023304
 8017d54:	200253ed 	.word	0x200253ed
 8017d58:	200253a8 	.word	0x200253a8
 8017d5c:	200253d0 	.word	0x200253d0
 8017d60:	08023324 	.word	0x08023324
 8017d64:	0802333c 	.word	0x0802333c
        } else {
          pcb->unacked = rseg->next;
 8017d68:	69fb      	ldr	r3, [r7, #28]
 8017d6a:	681a      	ldr	r2, [r3, #0]
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8017d70:	69f8      	ldr	r0, [r7, #28]
 8017d72:	f7fe fbc4 	bl	80164fe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d104      	bne.n	8017d88 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017d7e:	687b      	ldr	r3, [r7, #4]
 8017d80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d84:	861a      	strh	r2, [r3, #48]	@ 0x30
 8017d86:	e006      	b.n	8017d96 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	2200      	movs	r2, #0
 8017d8c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	2200      	movs	r2, #0
 8017d92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d00a      	beq.n	8017db6 <tcp_process+0x30a>
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017da6:	687a      	ldr	r2, [r7, #4]
 8017da8:	6910      	ldr	r0, [r2, #16]
 8017daa:	2200      	movs	r2, #0
 8017dac:	6879      	ldr	r1, [r7, #4]
 8017dae:	4798      	blx	r3
 8017db0:	4603      	mov	r3, r0
 8017db2:	76bb      	strb	r3, [r7, #26]
 8017db4:	e001      	b.n	8017dba <tcp_process+0x30e>
 8017db6:	2300      	movs	r3, #0
 8017db8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8017dba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017dbe:	f113 0f0d 	cmn.w	r3, #13
 8017dc2:	d102      	bne.n	8017dca <tcp_process+0x31e>
          return ERR_ABRT;
 8017dc4:	f06f 030c 	mvn.w	r3, #12
 8017dc8:	e250      	b.n	801826c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	8b5b      	ldrh	r3, [r3, #26]
 8017dce:	f043 0302 	orr.w	r3, r3, #2
 8017dd2:	b29a      	uxth	r2, r3
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8017dd8:	e23a      	b.n	8018250 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8017dda:	4b98      	ldr	r3, [pc, #608]	@ (801803c <tcp_process+0x590>)
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	f003 0310 	and.w	r3, r3, #16
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	f000 8234 	beq.w	8018250 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017de8:	4b95      	ldr	r3, [pc, #596]	@ (8018040 <tcp_process+0x594>)
 8017dea:	6819      	ldr	r1, [r3, #0]
 8017dec:	4b95      	ldr	r3, [pc, #596]	@ (8018044 <tcp_process+0x598>)
 8017dee:	881b      	ldrh	r3, [r3, #0]
 8017df0:	461a      	mov	r2, r3
 8017df2:	4b95      	ldr	r3, [pc, #596]	@ (8018048 <tcp_process+0x59c>)
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017df8:	4b94      	ldr	r3, [pc, #592]	@ (801804c <tcp_process+0x5a0>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017dfc:	885b      	ldrh	r3, [r3, #2]
 8017dfe:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e00:	4a92      	ldr	r2, [pc, #584]	@ (801804c <tcp_process+0x5a0>)
 8017e02:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e04:	8812      	ldrh	r2, [r2, #0]
 8017e06:	b292      	uxth	r2, r2
 8017e08:	9202      	str	r2, [sp, #8]
 8017e0a:	9301      	str	r3, [sp, #4]
 8017e0c:	4b90      	ldr	r3, [pc, #576]	@ (8018050 <tcp_process+0x5a4>)
 8017e0e:	9300      	str	r3, [sp, #0]
 8017e10:	4b90      	ldr	r3, [pc, #576]	@ (8018054 <tcp_process+0x5a8>)
 8017e12:	4602      	mov	r2, r0
 8017e14:	6878      	ldr	r0, [r7, #4]
 8017e16:	f003 f925 	bl	801b064 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017e20:	2b05      	cmp	r3, #5
 8017e22:	f200 8215 	bhi.w	8018250 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2200      	movs	r2, #0
 8017e2a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8017e2c:	6878      	ldr	r0, [r7, #4]
 8017e2e:	f002 fee7 	bl	801ac00 <tcp_rexmit_rto>
      break;
 8017e32:	e20d      	b.n	8018250 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017e34:	4b81      	ldr	r3, [pc, #516]	@ (801803c <tcp_process+0x590>)
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	f003 0310 	and.w	r3, r3, #16
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	f000 80a1 	beq.w	8017f84 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017e42:	4b7f      	ldr	r3, [pc, #508]	@ (8018040 <tcp_process+0x594>)
 8017e44:	681a      	ldr	r2, [r3, #0]
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017e4a:	1ad3      	subs	r3, r2, r3
 8017e4c:	3b01      	subs	r3, #1
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	db7e      	blt.n	8017f50 <tcp_process+0x4a4>
 8017e52:	4b7b      	ldr	r3, [pc, #492]	@ (8018040 <tcp_process+0x594>)
 8017e54:	681a      	ldr	r2, [r3, #0]
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e5a:	1ad3      	subs	r3, r2, r3
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	dc77      	bgt.n	8017f50 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017e60:	687b      	ldr	r3, [r7, #4]
 8017e62:	2204      	movs	r2, #4
 8017e64:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d102      	bne.n	8017e74 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017e6e:	23fa      	movs	r3, #250	@ 0xfa
 8017e70:	76bb      	strb	r3, [r7, #26]
 8017e72:	e01d      	b.n	8017eb0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e78:	699b      	ldr	r3, [r3, #24]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d106      	bne.n	8017e8c <tcp_process+0x3e0>
 8017e7e:	4b76      	ldr	r3, [pc, #472]	@ (8018058 <tcp_process+0x5ac>)
 8017e80:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8017e84:	4975      	ldr	r1, [pc, #468]	@ (801805c <tcp_process+0x5b0>)
 8017e86:	4876      	ldr	r0, [pc, #472]	@ (8018060 <tcp_process+0x5b4>)
 8017e88:	f008 fa08 	bl	802029c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e90:	699b      	ldr	r3, [r3, #24]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	d00a      	beq.n	8017eac <tcp_process+0x400>
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8017e9a:	699b      	ldr	r3, [r3, #24]
 8017e9c:	687a      	ldr	r2, [r7, #4]
 8017e9e:	6910      	ldr	r0, [r2, #16]
 8017ea0:	2200      	movs	r2, #0
 8017ea2:	6879      	ldr	r1, [r7, #4]
 8017ea4:	4798      	blx	r3
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	76bb      	strb	r3, [r7, #26]
 8017eaa:	e001      	b.n	8017eb0 <tcp_process+0x404>
 8017eac:	23f0      	movs	r3, #240	@ 0xf0
 8017eae:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017eb0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d00a      	beq.n	8017ece <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8017eb8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017ebc:	f113 0f0d 	cmn.w	r3, #13
 8017ec0:	d002      	beq.n	8017ec8 <tcp_process+0x41c>
              tcp_abort(pcb);
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f7fd fd50 	bl	8015968 <tcp_abort>
            }
            return ERR_ABRT;
 8017ec8:	f06f 030c 	mvn.w	r3, #12
 8017ecc:	e1ce      	b.n	801826c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017ece:	6878      	ldr	r0, [r7, #4]
 8017ed0:	f000 fae0 	bl	8018494 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017ed4:	4b63      	ldr	r3, [pc, #396]	@ (8018064 <tcp_process+0x5b8>)
 8017ed6:	881b      	ldrh	r3, [r3, #0]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d005      	beq.n	8017ee8 <tcp_process+0x43c>
            recv_acked--;
 8017edc:	4b61      	ldr	r3, [pc, #388]	@ (8018064 <tcp_process+0x5b8>)
 8017ede:	881b      	ldrh	r3, [r3, #0]
 8017ee0:	3b01      	subs	r3, #1
 8017ee2:	b29a      	uxth	r2, r3
 8017ee4:	4b5f      	ldr	r3, [pc, #380]	@ (8018064 <tcp_process+0x5b8>)
 8017ee6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017eec:	009a      	lsls	r2, r3, #2
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ef2:	005b      	lsls	r3, r3, #1
 8017ef4:	f241 111c 	movw	r1, #4380	@ 0x111c
 8017ef8:	428b      	cmp	r3, r1
 8017efa:	bf38      	it	cc
 8017efc:	460b      	movcc	r3, r1
 8017efe:	429a      	cmp	r2, r3
 8017f00:	d204      	bcs.n	8017f0c <tcp_process+0x460>
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f06:	009b      	lsls	r3, r3, #2
 8017f08:	b29b      	uxth	r3, r3
 8017f0a:	e00d      	b.n	8017f28 <tcp_process+0x47c>
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f10:	005b      	lsls	r3, r3, #1
 8017f12:	f241 121c 	movw	r2, #4380	@ 0x111c
 8017f16:	4293      	cmp	r3, r2
 8017f18:	d904      	bls.n	8017f24 <tcp_process+0x478>
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017f1e:	005b      	lsls	r3, r3, #1
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	e001      	b.n	8017f28 <tcp_process+0x47c>
 8017f24:	f241 131c 	movw	r3, #4380	@ 0x111c
 8017f28:	687a      	ldr	r2, [r7, #4]
 8017f2a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017f2e:	4b4e      	ldr	r3, [pc, #312]	@ (8018068 <tcp_process+0x5bc>)
 8017f30:	781b      	ldrb	r3, [r3, #0]
 8017f32:	f003 0320 	and.w	r3, r3, #32
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d037      	beq.n	8017faa <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	8b5b      	ldrh	r3, [r3, #26]
 8017f3e:	f043 0302 	orr.w	r3, r3, #2
 8017f42:	b29a      	uxth	r2, r3
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	2207      	movs	r2, #7
 8017f4c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017f4e:	e02c      	b.n	8017faa <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f50:	4b3b      	ldr	r3, [pc, #236]	@ (8018040 <tcp_process+0x594>)
 8017f52:	6819      	ldr	r1, [r3, #0]
 8017f54:	4b3b      	ldr	r3, [pc, #236]	@ (8018044 <tcp_process+0x598>)
 8017f56:	881b      	ldrh	r3, [r3, #0]
 8017f58:	461a      	mov	r2, r3
 8017f5a:	4b3b      	ldr	r3, [pc, #236]	@ (8018048 <tcp_process+0x59c>)
 8017f5c:	681b      	ldr	r3, [r3, #0]
 8017f5e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017f60:	4b3a      	ldr	r3, [pc, #232]	@ (801804c <tcp_process+0x5a0>)
 8017f62:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f64:	885b      	ldrh	r3, [r3, #2]
 8017f66:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017f68:	4a38      	ldr	r2, [pc, #224]	@ (801804c <tcp_process+0x5a0>)
 8017f6a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017f6c:	8812      	ldrh	r2, [r2, #0]
 8017f6e:	b292      	uxth	r2, r2
 8017f70:	9202      	str	r2, [sp, #8]
 8017f72:	9301      	str	r3, [sp, #4]
 8017f74:	4b36      	ldr	r3, [pc, #216]	@ (8018050 <tcp_process+0x5a4>)
 8017f76:	9300      	str	r3, [sp, #0]
 8017f78:	4b36      	ldr	r3, [pc, #216]	@ (8018054 <tcp_process+0x5a8>)
 8017f7a:	4602      	mov	r2, r0
 8017f7c:	6878      	ldr	r0, [r7, #4]
 8017f7e:	f003 f871 	bl	801b064 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017f82:	e167      	b.n	8018254 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017f84:	4b2d      	ldr	r3, [pc, #180]	@ (801803c <tcp_process+0x590>)
 8017f86:	781b      	ldrb	r3, [r3, #0]
 8017f88:	f003 0302 	and.w	r3, r3, #2
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	f000 8161 	beq.w	8018254 <tcp_process+0x7a8>
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017f96:	1e5a      	subs	r2, r3, #1
 8017f98:	4b2b      	ldr	r3, [pc, #172]	@ (8018048 <tcp_process+0x59c>)
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	f040 8159 	bne.w	8018254 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017fa2:	6878      	ldr	r0, [r7, #4]
 8017fa4:	f002 fe4e 	bl	801ac44 <tcp_rexmit>
      break;
 8017fa8:	e154      	b.n	8018254 <tcp_process+0x7a8>
 8017faa:	e153      	b.n	8018254 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017fac:	6878      	ldr	r0, [r7, #4]
 8017fae:	f000 fa71 	bl	8018494 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8018068 <tcp_process+0x5bc>)
 8017fb4:	781b      	ldrb	r3, [r3, #0]
 8017fb6:	f003 0320 	and.w	r3, r3, #32
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	f000 814c 	beq.w	8018258 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	8b5b      	ldrh	r3, [r3, #26]
 8017fc4:	f043 0302 	orr.w	r3, r3, #2
 8017fc8:	b29a      	uxth	r2, r3
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2207      	movs	r2, #7
 8017fd2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017fd4:	e140      	b.n	8018258 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8017fd6:	6878      	ldr	r0, [r7, #4]
 8017fd8:	f000 fa5c 	bl	8018494 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017fdc:	4b22      	ldr	r3, [pc, #136]	@ (8018068 <tcp_process+0x5bc>)
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	f003 0320 	and.w	r3, r3, #32
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d071      	beq.n	80180cc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017fe8:	4b14      	ldr	r3, [pc, #80]	@ (801803c <tcp_process+0x590>)
 8017fea:	781b      	ldrb	r3, [r3, #0]
 8017fec:	f003 0310 	and.w	r3, r3, #16
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d060      	beq.n	80180b6 <tcp_process+0x60a>
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8017ff8:	4b11      	ldr	r3, [pc, #68]	@ (8018040 <tcp_process+0x594>)
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	d15a      	bne.n	80180b6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018004:	2b00      	cmp	r3, #0
 8018006:	d156      	bne.n	80180b6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	8b5b      	ldrh	r3, [r3, #26]
 801800c:	f043 0302 	orr.w	r3, r3, #2
 8018010:	b29a      	uxth	r2, r3
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8018016:	6878      	ldr	r0, [r7, #4]
 8018018:	f7fe fd56 	bl	8016ac8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801801c:	4b13      	ldr	r3, [pc, #76]	@ (801806c <tcp_process+0x5c0>)
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	687a      	ldr	r2, [r7, #4]
 8018022:	429a      	cmp	r2, r3
 8018024:	d105      	bne.n	8018032 <tcp_process+0x586>
 8018026:	4b11      	ldr	r3, [pc, #68]	@ (801806c <tcp_process+0x5c0>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	68db      	ldr	r3, [r3, #12]
 801802c:	4a0f      	ldr	r2, [pc, #60]	@ (801806c <tcp_process+0x5c0>)
 801802e:	6013      	str	r3, [r2, #0]
 8018030:	e02e      	b.n	8018090 <tcp_process+0x5e4>
 8018032:	4b0e      	ldr	r3, [pc, #56]	@ (801806c <tcp_process+0x5c0>)
 8018034:	681b      	ldr	r3, [r3, #0]
 8018036:	617b      	str	r3, [r7, #20]
 8018038:	e027      	b.n	801808a <tcp_process+0x5de>
 801803a:	bf00      	nop
 801803c:	200253ec 	.word	0x200253ec
 8018040:	200253e4 	.word	0x200253e4
 8018044:	200253ea 	.word	0x200253ea
 8018048:	200253e0 	.word	0x200253e0
 801804c:	200253d0 	.word	0x200253d0
 8018050:	2001f0c0 	.word	0x2001f0c0
 8018054:	2001f0c4 	.word	0x2001f0c4
 8018058:	080230b0 	.word	0x080230b0
 801805c:	08023350 	.word	0x08023350
 8018060:	080230fc 	.word	0x080230fc
 8018064:	200253e8 	.word	0x200253e8
 8018068:	200253ed 	.word	0x200253ed
 801806c:	200253b4 	.word	0x200253b4
 8018070:	697b      	ldr	r3, [r7, #20]
 8018072:	68db      	ldr	r3, [r3, #12]
 8018074:	687a      	ldr	r2, [r7, #4]
 8018076:	429a      	cmp	r2, r3
 8018078:	d104      	bne.n	8018084 <tcp_process+0x5d8>
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	68da      	ldr	r2, [r3, #12]
 801807e:	697b      	ldr	r3, [r7, #20]
 8018080:	60da      	str	r2, [r3, #12]
 8018082:	e005      	b.n	8018090 <tcp_process+0x5e4>
 8018084:	697b      	ldr	r3, [r7, #20]
 8018086:	68db      	ldr	r3, [r3, #12]
 8018088:	617b      	str	r3, [r7, #20]
 801808a:	697b      	ldr	r3, [r7, #20]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d1ef      	bne.n	8018070 <tcp_process+0x5c4>
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2200      	movs	r2, #0
 8018094:	60da      	str	r2, [r3, #12]
 8018096:	4b77      	ldr	r3, [pc, #476]	@ (8018274 <tcp_process+0x7c8>)
 8018098:	2201      	movs	r2, #1
 801809a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	220a      	movs	r2, #10
 80180a0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80180a2:	4b75      	ldr	r3, [pc, #468]	@ (8018278 <tcp_process+0x7cc>)
 80180a4:	681a      	ldr	r2, [r3, #0]
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	60da      	str	r2, [r3, #12]
 80180aa:	4a73      	ldr	r2, [pc, #460]	@ (8018278 <tcp_process+0x7cc>)
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	6013      	str	r3, [r2, #0]
 80180b0:	f003 f99a 	bl	801b3e8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80180b4:	e0d2      	b.n	801825c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	8b5b      	ldrh	r3, [r3, #26]
 80180ba:	f043 0302 	orr.w	r3, r3, #2
 80180be:	b29a      	uxth	r2, r3
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	2208      	movs	r2, #8
 80180c8:	751a      	strb	r2, [r3, #20]
      break;
 80180ca:	e0c7      	b.n	801825c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80180cc:	4b6b      	ldr	r3, [pc, #428]	@ (801827c <tcp_process+0x7d0>)
 80180ce:	781b      	ldrb	r3, [r3, #0]
 80180d0:	f003 0310 	and.w	r3, r3, #16
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	f000 80c1 	beq.w	801825c <tcp_process+0x7b0>
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80180de:	4b68      	ldr	r3, [pc, #416]	@ (8018280 <tcp_process+0x7d4>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	429a      	cmp	r2, r3
 80180e4:	f040 80ba 	bne.w	801825c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	f040 80b5 	bne.w	801825c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	2206      	movs	r2, #6
 80180f6:	751a      	strb	r2, [r3, #20]
      break;
 80180f8:	e0b0      	b.n	801825c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80180fa:	6878      	ldr	r0, [r7, #4]
 80180fc:	f000 f9ca 	bl	8018494 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018100:	4b60      	ldr	r3, [pc, #384]	@ (8018284 <tcp_process+0x7d8>)
 8018102:	781b      	ldrb	r3, [r3, #0]
 8018104:	f003 0320 	and.w	r3, r3, #32
 8018108:	2b00      	cmp	r3, #0
 801810a:	f000 80a9 	beq.w	8018260 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	8b5b      	ldrh	r3, [r3, #26]
 8018112:	f043 0302 	orr.w	r3, r3, #2
 8018116:	b29a      	uxth	r2, r3
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801811c:	6878      	ldr	r0, [r7, #4]
 801811e:	f7fe fcd3 	bl	8016ac8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8018122:	4b59      	ldr	r3, [pc, #356]	@ (8018288 <tcp_process+0x7dc>)
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	687a      	ldr	r2, [r7, #4]
 8018128:	429a      	cmp	r2, r3
 801812a:	d105      	bne.n	8018138 <tcp_process+0x68c>
 801812c:	4b56      	ldr	r3, [pc, #344]	@ (8018288 <tcp_process+0x7dc>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	68db      	ldr	r3, [r3, #12]
 8018132:	4a55      	ldr	r2, [pc, #340]	@ (8018288 <tcp_process+0x7dc>)
 8018134:	6013      	str	r3, [r2, #0]
 8018136:	e013      	b.n	8018160 <tcp_process+0x6b4>
 8018138:	4b53      	ldr	r3, [pc, #332]	@ (8018288 <tcp_process+0x7dc>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	613b      	str	r3, [r7, #16]
 801813e:	e00c      	b.n	801815a <tcp_process+0x6ae>
 8018140:	693b      	ldr	r3, [r7, #16]
 8018142:	68db      	ldr	r3, [r3, #12]
 8018144:	687a      	ldr	r2, [r7, #4]
 8018146:	429a      	cmp	r2, r3
 8018148:	d104      	bne.n	8018154 <tcp_process+0x6a8>
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	68da      	ldr	r2, [r3, #12]
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	60da      	str	r2, [r3, #12]
 8018152:	e005      	b.n	8018160 <tcp_process+0x6b4>
 8018154:	693b      	ldr	r3, [r7, #16]
 8018156:	68db      	ldr	r3, [r3, #12]
 8018158:	613b      	str	r3, [r7, #16]
 801815a:	693b      	ldr	r3, [r7, #16]
 801815c:	2b00      	cmp	r3, #0
 801815e:	d1ef      	bne.n	8018140 <tcp_process+0x694>
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	2200      	movs	r2, #0
 8018164:	60da      	str	r2, [r3, #12]
 8018166:	4b43      	ldr	r3, [pc, #268]	@ (8018274 <tcp_process+0x7c8>)
 8018168:	2201      	movs	r2, #1
 801816a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	220a      	movs	r2, #10
 8018170:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018172:	4b41      	ldr	r3, [pc, #260]	@ (8018278 <tcp_process+0x7cc>)
 8018174:	681a      	ldr	r2, [r3, #0]
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	60da      	str	r2, [r3, #12]
 801817a:	4a3f      	ldr	r2, [pc, #252]	@ (8018278 <tcp_process+0x7cc>)
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	6013      	str	r3, [r2, #0]
 8018180:	f003 f932 	bl	801b3e8 <tcp_timer_needed>
      }
      break;
 8018184:	e06c      	b.n	8018260 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018186:	6878      	ldr	r0, [r7, #4]
 8018188:	f000 f984 	bl	8018494 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801818c:	4b3b      	ldr	r3, [pc, #236]	@ (801827c <tcp_process+0x7d0>)
 801818e:	781b      	ldrb	r3, [r3, #0]
 8018190:	f003 0310 	and.w	r3, r3, #16
 8018194:	2b00      	cmp	r3, #0
 8018196:	d065      	beq.n	8018264 <tcp_process+0x7b8>
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801819c:	4b38      	ldr	r3, [pc, #224]	@ (8018280 <tcp_process+0x7d4>)
 801819e:	681b      	ldr	r3, [r3, #0]
 80181a0:	429a      	cmp	r2, r3
 80181a2:	d15f      	bne.n	8018264 <tcp_process+0x7b8>
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d15b      	bne.n	8018264 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80181ac:	6878      	ldr	r0, [r7, #4]
 80181ae:	f7fe fc8b 	bl	8016ac8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80181b2:	4b35      	ldr	r3, [pc, #212]	@ (8018288 <tcp_process+0x7dc>)
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	687a      	ldr	r2, [r7, #4]
 80181b8:	429a      	cmp	r2, r3
 80181ba:	d105      	bne.n	80181c8 <tcp_process+0x71c>
 80181bc:	4b32      	ldr	r3, [pc, #200]	@ (8018288 <tcp_process+0x7dc>)
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	68db      	ldr	r3, [r3, #12]
 80181c2:	4a31      	ldr	r2, [pc, #196]	@ (8018288 <tcp_process+0x7dc>)
 80181c4:	6013      	str	r3, [r2, #0]
 80181c6:	e013      	b.n	80181f0 <tcp_process+0x744>
 80181c8:	4b2f      	ldr	r3, [pc, #188]	@ (8018288 <tcp_process+0x7dc>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	60fb      	str	r3, [r7, #12]
 80181ce:	e00c      	b.n	80181ea <tcp_process+0x73e>
 80181d0:	68fb      	ldr	r3, [r7, #12]
 80181d2:	68db      	ldr	r3, [r3, #12]
 80181d4:	687a      	ldr	r2, [r7, #4]
 80181d6:	429a      	cmp	r2, r3
 80181d8:	d104      	bne.n	80181e4 <tcp_process+0x738>
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	68da      	ldr	r2, [r3, #12]
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	60da      	str	r2, [r3, #12]
 80181e2:	e005      	b.n	80181f0 <tcp_process+0x744>
 80181e4:	68fb      	ldr	r3, [r7, #12]
 80181e6:	68db      	ldr	r3, [r3, #12]
 80181e8:	60fb      	str	r3, [r7, #12]
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d1ef      	bne.n	80181d0 <tcp_process+0x724>
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	2200      	movs	r2, #0
 80181f4:	60da      	str	r2, [r3, #12]
 80181f6:	4b1f      	ldr	r3, [pc, #124]	@ (8018274 <tcp_process+0x7c8>)
 80181f8:	2201      	movs	r2, #1
 80181fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	220a      	movs	r2, #10
 8018200:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8018202:	4b1d      	ldr	r3, [pc, #116]	@ (8018278 <tcp_process+0x7cc>)
 8018204:	681a      	ldr	r2, [r3, #0]
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	60da      	str	r2, [r3, #12]
 801820a:	4a1b      	ldr	r2, [pc, #108]	@ (8018278 <tcp_process+0x7cc>)
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	6013      	str	r3, [r2, #0]
 8018210:	f003 f8ea 	bl	801b3e8 <tcp_timer_needed>
      }
      break;
 8018214:	e026      	b.n	8018264 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8018216:	6878      	ldr	r0, [r7, #4]
 8018218:	f000 f93c 	bl	8018494 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801821c:	4b17      	ldr	r3, [pc, #92]	@ (801827c <tcp_process+0x7d0>)
 801821e:	781b      	ldrb	r3, [r3, #0]
 8018220:	f003 0310 	and.w	r3, r3, #16
 8018224:	2b00      	cmp	r3, #0
 8018226:	d01f      	beq.n	8018268 <tcp_process+0x7bc>
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801822c:	4b14      	ldr	r3, [pc, #80]	@ (8018280 <tcp_process+0x7d4>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	429a      	cmp	r2, r3
 8018232:	d119      	bne.n	8018268 <tcp_process+0x7bc>
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018238:	2b00      	cmp	r3, #0
 801823a:	d115      	bne.n	8018268 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801823c:	4b11      	ldr	r3, [pc, #68]	@ (8018284 <tcp_process+0x7d8>)
 801823e:	781b      	ldrb	r3, [r3, #0]
 8018240:	f043 0310 	orr.w	r3, r3, #16
 8018244:	b2da      	uxtb	r2, r3
 8018246:	4b0f      	ldr	r3, [pc, #60]	@ (8018284 <tcp_process+0x7d8>)
 8018248:	701a      	strb	r2, [r3, #0]
      }
      break;
 801824a:	e00d      	b.n	8018268 <tcp_process+0x7bc>
    default:
      break;
 801824c:	bf00      	nop
 801824e:	e00c      	b.n	801826a <tcp_process+0x7be>
      break;
 8018250:	bf00      	nop
 8018252:	e00a      	b.n	801826a <tcp_process+0x7be>
      break;
 8018254:	bf00      	nop
 8018256:	e008      	b.n	801826a <tcp_process+0x7be>
      break;
 8018258:	bf00      	nop
 801825a:	e006      	b.n	801826a <tcp_process+0x7be>
      break;
 801825c:	bf00      	nop
 801825e:	e004      	b.n	801826a <tcp_process+0x7be>
      break;
 8018260:	bf00      	nop
 8018262:	e002      	b.n	801826a <tcp_process+0x7be>
      break;
 8018264:	bf00      	nop
 8018266:	e000      	b.n	801826a <tcp_process+0x7be>
      break;
 8018268:	bf00      	nop
  }
  return ERR_OK;
 801826a:	2300      	movs	r3, #0
}
 801826c:	4618      	mov	r0, r3
 801826e:	3724      	adds	r7, #36	@ 0x24
 8018270:	46bd      	mov	sp, r7
 8018272:	bd90      	pop	{r4, r7, pc}
 8018274:	200253bc 	.word	0x200253bc
 8018278:	200253b8 	.word	0x200253b8
 801827c:	200253ec 	.word	0x200253ec
 8018280:	200253e4 	.word	0x200253e4
 8018284:	200253ed 	.word	0x200253ed
 8018288:	200253b4 	.word	0x200253b4

0801828c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801828c:	b590      	push	{r4, r7, lr}
 801828e:	b085      	sub	sp, #20
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
 8018294:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d106      	bne.n	80182aa <tcp_oos_insert_segment+0x1e>
 801829c:	4b3b      	ldr	r3, [pc, #236]	@ (801838c <tcp_oos_insert_segment+0x100>)
 801829e:	f240 421f 	movw	r2, #1055	@ 0x41f
 80182a2:	493b      	ldr	r1, [pc, #236]	@ (8018390 <tcp_oos_insert_segment+0x104>)
 80182a4:	483b      	ldr	r0, [pc, #236]	@ (8018394 <tcp_oos_insert_segment+0x108>)
 80182a6:	f007 fff9 	bl	802029c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	68db      	ldr	r3, [r3, #12]
 80182ae:	899b      	ldrh	r3, [r3, #12]
 80182b0:	b29b      	uxth	r3, r3
 80182b2:	4618      	mov	r0, r3
 80182b4:	f7fb f892 	bl	80133dc <lwip_htons>
 80182b8:	4603      	mov	r3, r0
 80182ba:	b2db      	uxtb	r3, r3
 80182bc:	f003 0301 	and.w	r3, r3, #1
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d028      	beq.n	8018316 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80182c4:	6838      	ldr	r0, [r7, #0]
 80182c6:	f7fe f905 	bl	80164d4 <tcp_segs_free>
    next = NULL;
 80182ca:	2300      	movs	r3, #0
 80182cc:	603b      	str	r3, [r7, #0]
 80182ce:	e056      	b.n	801837e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	68db      	ldr	r3, [r3, #12]
 80182d4:	899b      	ldrh	r3, [r3, #12]
 80182d6:	b29b      	uxth	r3, r3
 80182d8:	4618      	mov	r0, r3
 80182da:	f7fb f87f 	bl	80133dc <lwip_htons>
 80182de:	4603      	mov	r3, r0
 80182e0:	b2db      	uxtb	r3, r3
 80182e2:	f003 0301 	and.w	r3, r3, #1
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d00d      	beq.n	8018306 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	68db      	ldr	r3, [r3, #12]
 80182ee:	899b      	ldrh	r3, [r3, #12]
 80182f0:	b29c      	uxth	r4, r3
 80182f2:	2001      	movs	r0, #1
 80182f4:	f7fb f872 	bl	80133dc <lwip_htons>
 80182f8:	4603      	mov	r3, r0
 80182fa:	461a      	mov	r2, r3
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	68db      	ldr	r3, [r3, #12]
 8018300:	4322      	orrs	r2, r4
 8018302:	b292      	uxth	r2, r2
 8018304:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018306:	683b      	ldr	r3, [r7, #0]
 8018308:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801830a:	683b      	ldr	r3, [r7, #0]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8018310:	68f8      	ldr	r0, [r7, #12]
 8018312:	f7fe f8f4 	bl	80164fe <tcp_seg_free>
    while (next &&
 8018316:	683b      	ldr	r3, [r7, #0]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d00e      	beq.n	801833a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	891b      	ldrh	r3, [r3, #8]
 8018320:	461a      	mov	r2, r3
 8018322:	4b1d      	ldr	r3, [pc, #116]	@ (8018398 <tcp_oos_insert_segment+0x10c>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	441a      	add	r2, r3
 8018328:	683b      	ldr	r3, [r7, #0]
 801832a:	68db      	ldr	r3, [r3, #12]
 801832c:	685b      	ldr	r3, [r3, #4]
 801832e:	6839      	ldr	r1, [r7, #0]
 8018330:	8909      	ldrh	r1, [r1, #8]
 8018332:	440b      	add	r3, r1
 8018334:	1ad3      	subs	r3, r2, r3
    while (next &&
 8018336:	2b00      	cmp	r3, #0
 8018338:	daca      	bge.n	80182d0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801833a:	683b      	ldr	r3, [r7, #0]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d01e      	beq.n	801837e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	891b      	ldrh	r3, [r3, #8]
 8018344:	461a      	mov	r2, r3
 8018346:	4b14      	ldr	r3, [pc, #80]	@ (8018398 <tcp_oos_insert_segment+0x10c>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	441a      	add	r2, r3
 801834c:	683b      	ldr	r3, [r7, #0]
 801834e:	68db      	ldr	r3, [r3, #12]
 8018350:	685b      	ldr	r3, [r3, #4]
 8018352:	1ad3      	subs	r3, r2, r3
    if (next &&
 8018354:	2b00      	cmp	r3, #0
 8018356:	dd12      	ble.n	801837e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8018358:	683b      	ldr	r3, [r7, #0]
 801835a:	68db      	ldr	r3, [r3, #12]
 801835c:	685b      	ldr	r3, [r3, #4]
 801835e:	b29a      	uxth	r2, r3
 8018360:	4b0d      	ldr	r3, [pc, #52]	@ (8018398 <tcp_oos_insert_segment+0x10c>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	b29b      	uxth	r3, r3
 8018366:	1ad3      	subs	r3, r2, r3
 8018368:	b29a      	uxth	r2, r3
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	685a      	ldr	r2, [r3, #4]
 8018372:	687b      	ldr	r3, [r7, #4]
 8018374:	891b      	ldrh	r3, [r3, #8]
 8018376:	4619      	mov	r1, r3
 8018378:	4610      	mov	r0, r2
 801837a:	f7fc fb67 	bl	8014a4c <pbuf_realloc>
    }
  }
  cseg->next = next;
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	683a      	ldr	r2, [r7, #0]
 8018382:	601a      	str	r2, [r3, #0]
}
 8018384:	bf00      	nop
 8018386:	3714      	adds	r7, #20
 8018388:	46bd      	mov	sp, r7
 801838a:	bd90      	pop	{r4, r7, pc}
 801838c:	080230b0 	.word	0x080230b0
 8018390:	08023370 	.word	0x08023370
 8018394:	080230fc 	.word	0x080230fc
 8018398:	200253e0 	.word	0x200253e0

0801839c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801839c:	b5b0      	push	{r4, r5, r7, lr}
 801839e:	b086      	sub	sp, #24
 80183a0:	af00      	add	r7, sp, #0
 80183a2:	60f8      	str	r0, [r7, #12]
 80183a4:	60b9      	str	r1, [r7, #8]
 80183a6:	607a      	str	r2, [r7, #4]
 80183a8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80183aa:	e03e      	b.n	801842a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80183ac:	68bb      	ldr	r3, [r7, #8]
 80183ae:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80183b0:	68bb      	ldr	r3, [r7, #8]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80183b6:	697b      	ldr	r3, [r7, #20]
 80183b8:	685b      	ldr	r3, [r3, #4]
 80183ba:	4618      	mov	r0, r3
 80183bc:	f7fc fd5a 	bl	8014e74 <pbuf_clen>
 80183c0:	4603      	mov	r3, r0
 80183c2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80183ca:	8a7a      	ldrh	r2, [r7, #18]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	d906      	bls.n	80183de <tcp_free_acked_segments+0x42>
 80183d0:	4b2a      	ldr	r3, [pc, #168]	@ (801847c <tcp_free_acked_segments+0xe0>)
 80183d2:	f240 4257 	movw	r2, #1111	@ 0x457
 80183d6:	492a      	ldr	r1, [pc, #168]	@ (8018480 <tcp_free_acked_segments+0xe4>)
 80183d8:	482a      	ldr	r0, [pc, #168]	@ (8018484 <tcp_free_acked_segments+0xe8>)
 80183da:	f007 ff5f 	bl	802029c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 80183e4:	8a7b      	ldrh	r3, [r7, #18]
 80183e6:	1ad3      	subs	r3, r2, r3
 80183e8:	b29a      	uxth	r2, r3
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	891a      	ldrh	r2, [r3, #8]
 80183f4:	4b24      	ldr	r3, [pc, #144]	@ (8018488 <tcp_free_acked_segments+0xec>)
 80183f6:	881b      	ldrh	r3, [r3, #0]
 80183f8:	4413      	add	r3, r2
 80183fa:	b29a      	uxth	r2, r3
 80183fc:	4b22      	ldr	r3, [pc, #136]	@ (8018488 <tcp_free_acked_segments+0xec>)
 80183fe:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018400:	6978      	ldr	r0, [r7, #20]
 8018402:	f7fe f87c 	bl	80164fe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801840c:	2b00      	cmp	r3, #0
 801840e:	d00c      	beq.n	801842a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018410:	68bb      	ldr	r3, [r7, #8]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d109      	bne.n	801842a <tcp_free_acked_segments+0x8e>
 8018416:	683b      	ldr	r3, [r7, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d106      	bne.n	801842a <tcp_free_acked_segments+0x8e>
 801841c:	4b17      	ldr	r3, [pc, #92]	@ (801847c <tcp_free_acked_segments+0xe0>)
 801841e:	f240 4261 	movw	r2, #1121	@ 0x461
 8018422:	491a      	ldr	r1, [pc, #104]	@ (801848c <tcp_free_acked_segments+0xf0>)
 8018424:	4817      	ldr	r0, [pc, #92]	@ (8018484 <tcp_free_acked_segments+0xe8>)
 8018426:	f007 ff39 	bl	802029c <iprintf>
  while (seg_list != NULL &&
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d020      	beq.n	8018472 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018430:	68bb      	ldr	r3, [r7, #8]
 8018432:	68db      	ldr	r3, [r3, #12]
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	4618      	mov	r0, r3
 8018438:	f7fa ffe6 	bl	8013408 <lwip_htonl>
 801843c:	4604      	mov	r4, r0
 801843e:	68bb      	ldr	r3, [r7, #8]
 8018440:	891b      	ldrh	r3, [r3, #8]
 8018442:	461d      	mov	r5, r3
 8018444:	68bb      	ldr	r3, [r7, #8]
 8018446:	68db      	ldr	r3, [r3, #12]
 8018448:	899b      	ldrh	r3, [r3, #12]
 801844a:	b29b      	uxth	r3, r3
 801844c:	4618      	mov	r0, r3
 801844e:	f7fa ffc5 	bl	80133dc <lwip_htons>
 8018452:	4603      	mov	r3, r0
 8018454:	b2db      	uxtb	r3, r3
 8018456:	f003 0303 	and.w	r3, r3, #3
 801845a:	2b00      	cmp	r3, #0
 801845c:	d001      	beq.n	8018462 <tcp_free_acked_segments+0xc6>
 801845e:	2301      	movs	r3, #1
 8018460:	e000      	b.n	8018464 <tcp_free_acked_segments+0xc8>
 8018462:	2300      	movs	r3, #0
 8018464:	442b      	add	r3, r5
 8018466:	18e2      	adds	r2, r4, r3
 8018468:	4b09      	ldr	r3, [pc, #36]	@ (8018490 <tcp_free_acked_segments+0xf4>)
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801846e:	2b00      	cmp	r3, #0
 8018470:	dd9c      	ble.n	80183ac <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018472:	68bb      	ldr	r3, [r7, #8]
}
 8018474:	4618      	mov	r0, r3
 8018476:	3718      	adds	r7, #24
 8018478:	46bd      	mov	sp, r7
 801847a:	bdb0      	pop	{r4, r5, r7, pc}
 801847c:	080230b0 	.word	0x080230b0
 8018480:	08023398 	.word	0x08023398
 8018484:	080230fc 	.word	0x080230fc
 8018488:	200253e8 	.word	0x200253e8
 801848c:	080233c0 	.word	0x080233c0
 8018490:	200253e4 	.word	0x200253e4

08018494 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018494:	b5b0      	push	{r4, r5, r7, lr}
 8018496:	b094      	sub	sp, #80	@ 0x50
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801849c:	2300      	movs	r3, #0
 801849e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d106      	bne.n	80184b4 <tcp_receive+0x20>
 80184a6:	4b91      	ldr	r3, [pc, #580]	@ (80186ec <tcp_receive+0x258>)
 80184a8:	f240 427b 	movw	r2, #1147	@ 0x47b
 80184ac:	4990      	ldr	r1, [pc, #576]	@ (80186f0 <tcp_receive+0x25c>)
 80184ae:	4891      	ldr	r0, [pc, #580]	@ (80186f4 <tcp_receive+0x260>)
 80184b0:	f007 fef4 	bl	802029c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	7d1b      	ldrb	r3, [r3, #20]
 80184b8:	2b03      	cmp	r3, #3
 80184ba:	d806      	bhi.n	80184ca <tcp_receive+0x36>
 80184bc:	4b8b      	ldr	r3, [pc, #556]	@ (80186ec <tcp_receive+0x258>)
 80184be:	f240 427c 	movw	r2, #1148	@ 0x47c
 80184c2:	498d      	ldr	r1, [pc, #564]	@ (80186f8 <tcp_receive+0x264>)
 80184c4:	488b      	ldr	r0, [pc, #556]	@ (80186f4 <tcp_receive+0x260>)
 80184c6:	f007 fee9 	bl	802029c <iprintf>

  if (flags & TCP_ACK) {
 80184ca:	4b8c      	ldr	r3, [pc, #560]	@ (80186fc <tcp_receive+0x268>)
 80184cc:	781b      	ldrb	r3, [r3, #0]
 80184ce:	f003 0310 	and.w	r3, r3, #16
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	f000 8264 	beq.w	80189a0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80184de:	461a      	mov	r2, r3
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80184e4:	4413      	add	r3, r2
 80184e6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80184ec:	4b84      	ldr	r3, [pc, #528]	@ (8018700 <tcp_receive+0x26c>)
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	1ad3      	subs	r3, r2, r3
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	db1b      	blt.n	801852e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80184fa:	4b81      	ldr	r3, [pc, #516]	@ (8018700 <tcp_receive+0x26c>)
 80184fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80184fe:	429a      	cmp	r2, r3
 8018500:	d106      	bne.n	8018510 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018502:	687b      	ldr	r3, [r7, #4]
 8018504:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018506:	4b7f      	ldr	r3, [pc, #508]	@ (8018704 <tcp_receive+0x270>)
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	1ad3      	subs	r3, r2, r3
 801850c:	2b00      	cmp	r3, #0
 801850e:	db0e      	blt.n	801852e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018514:	4b7b      	ldr	r3, [pc, #492]	@ (8018704 <tcp_receive+0x270>)
 8018516:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018518:	429a      	cmp	r2, r3
 801851a:	d125      	bne.n	8018568 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801851c:	4b7a      	ldr	r3, [pc, #488]	@ (8018708 <tcp_receive+0x274>)
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	89db      	ldrh	r3, [r3, #14]
 8018522:	b29a      	uxth	r2, r3
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801852a:	429a      	cmp	r2, r3
 801852c:	d91c      	bls.n	8018568 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801852e:	4b76      	ldr	r3, [pc, #472]	@ (8018708 <tcp_receive+0x274>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	89db      	ldrh	r3, [r3, #14]
 8018534:	b29a      	uxth	r2, r3
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018548:	429a      	cmp	r2, r3
 801854a:	d205      	bcs.n	8018558 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8018558:	4b69      	ldr	r3, [pc, #420]	@ (8018700 <tcp_receive+0x26c>)
 801855a:	681a      	ldr	r2, [r3, #0]
 801855c:	687b      	ldr	r3, [r7, #4]
 801855e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8018560:	4b68      	ldr	r3, [pc, #416]	@ (8018704 <tcp_receive+0x270>)
 8018562:	681a      	ldr	r2, [r3, #0]
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018568:	4b66      	ldr	r3, [pc, #408]	@ (8018704 <tcp_receive+0x270>)
 801856a:	681a      	ldr	r2, [r3, #0]
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018570:	1ad3      	subs	r3, r2, r3
 8018572:	2b00      	cmp	r3, #0
 8018574:	dc58      	bgt.n	8018628 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018576:	4b65      	ldr	r3, [pc, #404]	@ (801870c <tcp_receive+0x278>)
 8018578:	881b      	ldrh	r3, [r3, #0]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d14b      	bne.n	8018616 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018582:	687a      	ldr	r2, [r7, #4]
 8018584:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8018588:	4413      	add	r3, r2
 801858a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801858c:	429a      	cmp	r2, r3
 801858e:	d142      	bne.n	8018616 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018590:	687b      	ldr	r3, [r7, #4]
 8018592:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018596:	2b00      	cmp	r3, #0
 8018598:	db3d      	blt.n	8018616 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801859e:	4b59      	ldr	r3, [pc, #356]	@ (8018704 <tcp_receive+0x270>)
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	429a      	cmp	r2, r3
 80185a4:	d137      	bne.n	8018616 <tcp_receive+0x182>
              found_dupack = 1;
 80185a6:	2301      	movs	r3, #1
 80185a8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80185b0:	2bff      	cmp	r3, #255	@ 0xff
 80185b2:	d007      	beq.n	80185c4 <tcp_receive+0x130>
                ++pcb->dupacks;
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80185ba:	3301      	adds	r3, #1
 80185bc:	b2da      	uxtb	r2, r3
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80185ca:	2b03      	cmp	r3, #3
 80185cc:	d91b      	bls.n	8018606 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80185d8:	4413      	add	r3, r2
 80185da:	b29a      	uxth	r2, r3
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80185e2:	429a      	cmp	r2, r3
 80185e4:	d30a      	bcc.n	80185fc <tcp_receive+0x168>
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80185f0:	4413      	add	r3, r2
 80185f2:	b29a      	uxth	r2, r3
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80185fa:	e004      	b.n	8018606 <tcp_receive+0x172>
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018602:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 801860c:	2b02      	cmp	r3, #2
 801860e:	d902      	bls.n	8018616 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018610:	6878      	ldr	r0, [r7, #4]
 8018612:	f002 fb83 	bl	801ad1c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018616:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018618:	2b00      	cmp	r3, #0
 801861a:	f040 8161 	bne.w	80188e0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	2200      	movs	r2, #0
 8018622:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018626:	e15b      	b.n	80188e0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018628:	4b36      	ldr	r3, [pc, #216]	@ (8018704 <tcp_receive+0x270>)
 801862a:	681a      	ldr	r2, [r3, #0]
 801862c:	687b      	ldr	r3, [r7, #4]
 801862e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018630:	1ad3      	subs	r3, r2, r3
 8018632:	3b01      	subs	r3, #1
 8018634:	2b00      	cmp	r3, #0
 8018636:	f2c0 814e 	blt.w	80188d6 <tcp_receive+0x442>
 801863a:	4b32      	ldr	r3, [pc, #200]	@ (8018704 <tcp_receive+0x270>)
 801863c:	681a      	ldr	r2, [r3, #0]
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018642:	1ad3      	subs	r3, r2, r3
 8018644:	2b00      	cmp	r3, #0
 8018646:	f300 8146 	bgt.w	80188d6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	8b5b      	ldrh	r3, [r3, #26]
 801864e:	f003 0304 	and.w	r3, r3, #4
 8018652:	2b00      	cmp	r3, #0
 8018654:	d010      	beq.n	8018678 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	8b5b      	ldrh	r3, [r3, #26]
 801865a:	f023 0304 	bic.w	r3, r3, #4
 801865e:	b29a      	uxth	r2, r3
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	2200      	movs	r2, #0
 8018674:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	2200      	movs	r2, #0
 801867c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018686:	10db      	asrs	r3, r3, #3
 8018688:	b21b      	sxth	r3, r3
 801868a:	b29a      	uxth	r2, r3
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018692:	b29b      	uxth	r3, r3
 8018694:	4413      	add	r3, r2
 8018696:	b29b      	uxth	r3, r3
 8018698:	b21a      	sxth	r2, r3
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80186a0:	4b18      	ldr	r3, [pc, #96]	@ (8018704 <tcp_receive+0x270>)
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	b29a      	uxth	r2, r3
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80186aa:	b29b      	uxth	r3, r3
 80186ac:	1ad3      	subs	r3, r2, r3
 80186ae:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80186b0:	687b      	ldr	r3, [r7, #4]
 80186b2:	2200      	movs	r2, #0
 80186b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80186b8:	4b12      	ldr	r3, [pc, #72]	@ (8018704 <tcp_receive+0x270>)
 80186ba:	681a      	ldr	r2, [r3, #0]
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80186c0:	687b      	ldr	r3, [r7, #4]
 80186c2:	7d1b      	ldrb	r3, [r3, #20]
 80186c4:	2b03      	cmp	r3, #3
 80186c6:	f240 8097 	bls.w	80187f8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d245      	bcs.n	8018766 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	8b5b      	ldrh	r3, [r3, #26]
 80186de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80186e2:	2b00      	cmp	r3, #0
 80186e4:	d014      	beq.n	8018710 <tcp_receive+0x27c>
 80186e6:	2301      	movs	r3, #1
 80186e8:	e013      	b.n	8018712 <tcp_receive+0x27e>
 80186ea:	bf00      	nop
 80186ec:	080230b0 	.word	0x080230b0
 80186f0:	080233e0 	.word	0x080233e0
 80186f4:	080230fc 	.word	0x080230fc
 80186f8:	080233fc 	.word	0x080233fc
 80186fc:	200253ec 	.word	0x200253ec
 8018700:	200253e0 	.word	0x200253e0
 8018704:	200253e4 	.word	0x200253e4
 8018708:	200253d0 	.word	0x200253d0
 801870c:	200253ea 	.word	0x200253ea
 8018710:	2302      	movs	r3, #2
 8018712:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018716:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 801871a:	b29a      	uxth	r2, r3
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018720:	fb12 f303 	smulbb	r3, r2, r3
 8018724:	b29b      	uxth	r3, r3
 8018726:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018728:	4293      	cmp	r3, r2
 801872a:	bf28      	it	cs
 801872c:	4613      	movcs	r3, r2
 801872e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018736:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018738:	4413      	add	r3, r2
 801873a:	b29a      	uxth	r2, r3
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018742:	429a      	cmp	r2, r3
 8018744:	d309      	bcc.n	801875a <tcp_receive+0x2c6>
 8018746:	687b      	ldr	r3, [r7, #4]
 8018748:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801874c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801874e:	4413      	add	r3, r2
 8018750:	b29a      	uxth	r2, r3
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018758:	e04e      	b.n	80187f8 <tcp_receive+0x364>
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018760:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018764:	e048      	b.n	80187f8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801876c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801876e:	4413      	add	r3, r2
 8018770:	b29a      	uxth	r2, r3
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018778:	429a      	cmp	r2, r3
 801877a:	d309      	bcc.n	8018790 <tcp_receive+0x2fc>
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018782:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018784:	4413      	add	r3, r2
 8018786:	b29a      	uxth	r2, r3
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 801878e:	e004      	b.n	801879a <tcp_receive+0x306>
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018796:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80187a6:	429a      	cmp	r2, r3
 80187a8:	d326      	bcc.n	80187f8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80187b0:	687b      	ldr	r3, [r7, #4]
 80187b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80187b6:	1ad3      	subs	r3, r2, r3
 80187b8:	b29a      	uxth	r2, r3
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80187c0:	687b      	ldr	r3, [r7, #4]
 80187c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80187ca:	4413      	add	r3, r2
 80187cc:	b29a      	uxth	r2, r3
 80187ce:	687b      	ldr	r3, [r7, #4]
 80187d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80187d4:	429a      	cmp	r2, r3
 80187d6:	d30a      	bcc.n	80187ee <tcp_receive+0x35a>
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80187e2:	4413      	add	r3, r2
 80187e4:	b29a      	uxth	r2, r3
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80187ec:	e004      	b.n	80187f8 <tcp_receive+0x364>
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80187f4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018800:	4a98      	ldr	r2, [pc, #608]	@ (8018a64 <tcp_receive+0x5d0>)
 8018802:	6878      	ldr	r0, [r7, #4]
 8018804:	f7ff fdca 	bl	801839c <tcp_free_acked_segments>
 8018808:	4602      	mov	r2, r0
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018816:	4a94      	ldr	r2, [pc, #592]	@ (8018a68 <tcp_receive+0x5d4>)
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f7ff fdbf 	bl	801839c <tcp_free_acked_segments>
 801881e:	4602      	mov	r2, r0
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018828:	2b00      	cmp	r3, #0
 801882a:	d104      	bne.n	8018836 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018832:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018834:	e002      	b.n	801883c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2200      	movs	r2, #0
 801883a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	2200      	movs	r2, #0
 8018840:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018846:	2b00      	cmp	r3, #0
 8018848:	d103      	bne.n	8018852 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2200      	movs	r2, #0
 801884e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018858:	4b84      	ldr	r3, [pc, #528]	@ (8018a6c <tcp_receive+0x5d8>)
 801885a:	881b      	ldrh	r3, [r3, #0]
 801885c:	4413      	add	r3, r2
 801885e:	b29a      	uxth	r2, r3
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	8b5b      	ldrh	r3, [r3, #26]
 801886a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801886e:	2b00      	cmp	r3, #0
 8018870:	d035      	beq.n	80188de <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018876:	2b00      	cmp	r3, #0
 8018878:	d118      	bne.n	80188ac <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801887e:	2b00      	cmp	r3, #0
 8018880:	d00c      	beq.n	801889c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018882:	687b      	ldr	r3, [r7, #4]
 8018884:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801888a:	68db      	ldr	r3, [r3, #12]
 801888c:	685b      	ldr	r3, [r3, #4]
 801888e:	4618      	mov	r0, r3
 8018890:	f7fa fdba 	bl	8013408 <lwip_htonl>
 8018894:	4603      	mov	r3, r0
 8018896:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018898:	2b00      	cmp	r3, #0
 801889a:	dc20      	bgt.n	80188de <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	8b5b      	ldrh	r3, [r3, #26]
 80188a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80188a4:	b29a      	uxth	r2, r3
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80188aa:	e018      	b.n	80188de <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80188b4:	68db      	ldr	r3, [r3, #12]
 80188b6:	685b      	ldr	r3, [r3, #4]
 80188b8:	4618      	mov	r0, r3
 80188ba:	f7fa fda5 	bl	8013408 <lwip_htonl>
 80188be:	4603      	mov	r3, r0
 80188c0:	1ae3      	subs	r3, r4, r3
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	dc0b      	bgt.n	80188de <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80188c6:	687b      	ldr	r3, [r7, #4]
 80188c8:	8b5b      	ldrh	r3, [r3, #26]
 80188ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80188ce:	b29a      	uxth	r2, r3
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80188d4:	e003      	b.n	80188de <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80188d6:	6878      	ldr	r0, [r7, #4]
 80188d8:	f002 fc16 	bl	801b108 <tcp_send_empty_ack>
 80188dc:	e000      	b.n	80188e0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80188de:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	d05b      	beq.n	80189a0 <tcp_receive+0x50c>
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80188ec:	4b60      	ldr	r3, [pc, #384]	@ (8018a70 <tcp_receive+0x5dc>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	1ad3      	subs	r3, r2, r3
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	da54      	bge.n	80189a0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80188f6:	4b5f      	ldr	r3, [pc, #380]	@ (8018a74 <tcp_receive+0x5e0>)
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	b29a      	uxth	r2, r3
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018900:	b29b      	uxth	r3, r3
 8018902:	1ad3      	subs	r3, r2, r3
 8018904:	b29b      	uxth	r3, r3
 8018906:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801890a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018914:	10db      	asrs	r3, r3, #3
 8018916:	b21b      	sxth	r3, r3
 8018918:	b29b      	uxth	r3, r3
 801891a:	1ad3      	subs	r3, r2, r3
 801891c:	b29b      	uxth	r3, r3
 801891e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018928:	b29a      	uxth	r2, r3
 801892a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801892e:	4413      	add	r3, r2
 8018930:	b29b      	uxth	r3, r3
 8018932:	b21a      	sxth	r2, r3
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018938:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 801893c:	2b00      	cmp	r3, #0
 801893e:	da05      	bge.n	801894c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018940:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018944:	425b      	negs	r3, r3
 8018946:	b29b      	uxth	r3, r3
 8018948:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801894c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018956:	109b      	asrs	r3, r3, #2
 8018958:	b21b      	sxth	r3, r3
 801895a:	b29b      	uxth	r3, r3
 801895c:	1ad3      	subs	r3, r2, r3
 801895e:	b29b      	uxth	r3, r3
 8018960:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801896a:	b29a      	uxth	r2, r3
 801896c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018970:	4413      	add	r3, r2
 8018972:	b29b      	uxth	r3, r3
 8018974:	b21a      	sxth	r2, r3
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018980:	10db      	asrs	r3, r3, #3
 8018982:	b21b      	sxth	r3, r3
 8018984:	b29a      	uxth	r2, r3
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801898c:	b29b      	uxth	r3, r3
 801898e:	4413      	add	r3, r2
 8018990:	b29b      	uxth	r3, r3
 8018992:	b21a      	sxth	r2, r3
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	2200      	movs	r2, #0
 801899e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80189a0:	4b35      	ldr	r3, [pc, #212]	@ (8018a78 <tcp_receive+0x5e4>)
 80189a2:	881b      	ldrh	r3, [r3, #0]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	f000 84df 	beq.w	8019368 <tcp_receive+0xed4>
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	7d1b      	ldrb	r3, [r3, #20]
 80189ae:	2b06      	cmp	r3, #6
 80189b0:	f200 84da 	bhi.w	8019368 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189b8:	4b30      	ldr	r3, [pc, #192]	@ (8018a7c <tcp_receive+0x5e8>)
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	1ad3      	subs	r3, r2, r3
 80189be:	3b01      	subs	r3, #1
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	f2c0 808f 	blt.w	8018ae4 <tcp_receive+0x650>
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189ca:	4b2b      	ldr	r3, [pc, #172]	@ (8018a78 <tcp_receive+0x5e4>)
 80189cc:	881b      	ldrh	r3, [r3, #0]
 80189ce:	4619      	mov	r1, r3
 80189d0:	4b2a      	ldr	r3, [pc, #168]	@ (8018a7c <tcp_receive+0x5e8>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	440b      	add	r3, r1
 80189d6:	1ad3      	subs	r3, r2, r3
 80189d8:	3301      	adds	r3, #1
 80189da:	2b00      	cmp	r3, #0
 80189dc:	f300 8082 	bgt.w	8018ae4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80189e0:	4b27      	ldr	r3, [pc, #156]	@ (8018a80 <tcp_receive+0x5ec>)
 80189e2:	685b      	ldr	r3, [r3, #4]
 80189e4:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80189ea:	4b24      	ldr	r3, [pc, #144]	@ (8018a7c <tcp_receive+0x5e8>)
 80189ec:	681b      	ldr	r3, [r3, #0]
 80189ee:	1ad3      	subs	r3, r2, r3
 80189f0:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80189f2:	4b23      	ldr	r3, [pc, #140]	@ (8018a80 <tcp_receive+0x5ec>)
 80189f4:	685b      	ldr	r3, [r3, #4]
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d106      	bne.n	8018a08 <tcp_receive+0x574>
 80189fa:	4b22      	ldr	r3, [pc, #136]	@ (8018a84 <tcp_receive+0x5f0>)
 80189fc:	f240 5294 	movw	r2, #1428	@ 0x594
 8018a00:	4921      	ldr	r1, [pc, #132]	@ (8018a88 <tcp_receive+0x5f4>)
 8018a02:	4822      	ldr	r0, [pc, #136]	@ (8018a8c <tcp_receive+0x5f8>)
 8018a04:	f007 fc4a 	bl	802029c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8018a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a0a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8018a0e:	4293      	cmp	r3, r2
 8018a10:	d906      	bls.n	8018a20 <tcp_receive+0x58c>
 8018a12:	4b1c      	ldr	r3, [pc, #112]	@ (8018a84 <tcp_receive+0x5f0>)
 8018a14:	f240 5295 	movw	r2, #1429	@ 0x595
 8018a18:	491d      	ldr	r1, [pc, #116]	@ (8018a90 <tcp_receive+0x5fc>)
 8018a1a:	481c      	ldr	r0, [pc, #112]	@ (8018a8c <tcp_receive+0x5f8>)
 8018a1c:	f007 fc3e 	bl	802029c <iprintf>
      off = (u16_t)off32;
 8018a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018a22:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018a26:	4b16      	ldr	r3, [pc, #88]	@ (8018a80 <tcp_receive+0x5ec>)
 8018a28:	685b      	ldr	r3, [r3, #4]
 8018a2a:	891b      	ldrh	r3, [r3, #8]
 8018a2c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018a30:	429a      	cmp	r2, r3
 8018a32:	d906      	bls.n	8018a42 <tcp_receive+0x5ae>
 8018a34:	4b13      	ldr	r3, [pc, #76]	@ (8018a84 <tcp_receive+0x5f0>)
 8018a36:	f240 5297 	movw	r2, #1431	@ 0x597
 8018a3a:	4916      	ldr	r1, [pc, #88]	@ (8018a94 <tcp_receive+0x600>)
 8018a3c:	4813      	ldr	r0, [pc, #76]	@ (8018a8c <tcp_receive+0x5f8>)
 8018a3e:	f007 fc2d 	bl	802029c <iprintf>
      inseg.len -= off;
 8018a42:	4b0f      	ldr	r3, [pc, #60]	@ (8018a80 <tcp_receive+0x5ec>)
 8018a44:	891a      	ldrh	r2, [r3, #8]
 8018a46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018a4a:	1ad3      	subs	r3, r2, r3
 8018a4c:	b29a      	uxth	r2, r3
 8018a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8018a80 <tcp_receive+0x5ec>)
 8018a50:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018a52:	4b0b      	ldr	r3, [pc, #44]	@ (8018a80 <tcp_receive+0x5ec>)
 8018a54:	685b      	ldr	r3, [r3, #4]
 8018a56:	891a      	ldrh	r2, [r3, #8]
 8018a58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018a5c:	1ad3      	subs	r3, r2, r3
 8018a5e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8018a60:	e02a      	b.n	8018ab8 <tcp_receive+0x624>
 8018a62:	bf00      	nop
 8018a64:	08023418 	.word	0x08023418
 8018a68:	08023420 	.word	0x08023420
 8018a6c:	200253e8 	.word	0x200253e8
 8018a70:	200253e4 	.word	0x200253e4
 8018a74:	200253a8 	.word	0x200253a8
 8018a78:	200253ea 	.word	0x200253ea
 8018a7c:	200253e0 	.word	0x200253e0
 8018a80:	200253c0 	.word	0x200253c0
 8018a84:	080230b0 	.word	0x080230b0
 8018a88:	08023428 	.word	0x08023428
 8018a8c:	080230fc 	.word	0x080230fc
 8018a90:	08023438 	.word	0x08023438
 8018a94:	08023448 	.word	0x08023448
        off -= p->len;
 8018a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018a9a:	895b      	ldrh	r3, [r3, #10]
 8018a9c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018aa0:	1ad3      	subs	r3, r2, r3
 8018aa2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8018aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018aa8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8018aaa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8018aac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018aae:	2200      	movs	r2, #0
 8018ab0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8018ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8018ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018aba:	895b      	ldrh	r3, [r3, #10]
 8018abc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8018ac0:	429a      	cmp	r2, r3
 8018ac2:	d8e9      	bhi.n	8018a98 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018ac4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8018ac8:	4619      	mov	r1, r3
 8018aca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8018acc:	f7fc f8be 	bl	8014c4c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ad4:	4a90      	ldr	r2, [pc, #576]	@ (8018d18 <tcp_receive+0x884>)
 8018ad6:	6013      	str	r3, [r2, #0]
 8018ad8:	4b90      	ldr	r3, [pc, #576]	@ (8018d1c <tcp_receive+0x888>)
 8018ada:	68db      	ldr	r3, [r3, #12]
 8018adc:	4a8e      	ldr	r2, [pc, #568]	@ (8018d18 <tcp_receive+0x884>)
 8018ade:	6812      	ldr	r2, [r2, #0]
 8018ae0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018ae2:	e00d      	b.n	8018b00 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018ae4:	4b8c      	ldr	r3, [pc, #560]	@ (8018d18 <tcp_receive+0x884>)
 8018ae6:	681a      	ldr	r2, [r3, #0]
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018aec:	1ad3      	subs	r3, r2, r3
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	da06      	bge.n	8018b00 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	8b5b      	ldrh	r3, [r3, #26]
 8018af6:	f043 0302 	orr.w	r3, r3, #2
 8018afa:	b29a      	uxth	r2, r3
 8018afc:	687b      	ldr	r3, [r7, #4]
 8018afe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018b00:	4b85      	ldr	r3, [pc, #532]	@ (8018d18 <tcp_receive+0x884>)
 8018b02:	681a      	ldr	r2, [r3, #0]
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b08:	1ad3      	subs	r3, r2, r3
 8018b0a:	2b00      	cmp	r3, #0
 8018b0c:	f2c0 8427 	blt.w	801935e <tcp_receive+0xeca>
 8018b10:	4b81      	ldr	r3, [pc, #516]	@ (8018d18 <tcp_receive+0x884>)
 8018b12:	681a      	ldr	r2, [r3, #0]
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b18:	6879      	ldr	r1, [r7, #4]
 8018b1a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018b1c:	440b      	add	r3, r1
 8018b1e:	1ad3      	subs	r3, r2, r3
 8018b20:	3301      	adds	r3, #1
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	f300 841b 	bgt.w	801935e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018b2c:	4b7a      	ldr	r3, [pc, #488]	@ (8018d18 <tcp_receive+0x884>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	429a      	cmp	r2, r3
 8018b32:	f040 8298 	bne.w	8019066 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018b36:	4b79      	ldr	r3, [pc, #484]	@ (8018d1c <tcp_receive+0x888>)
 8018b38:	891c      	ldrh	r4, [r3, #8]
 8018b3a:	4b78      	ldr	r3, [pc, #480]	@ (8018d1c <tcp_receive+0x888>)
 8018b3c:	68db      	ldr	r3, [r3, #12]
 8018b3e:	899b      	ldrh	r3, [r3, #12]
 8018b40:	b29b      	uxth	r3, r3
 8018b42:	4618      	mov	r0, r3
 8018b44:	f7fa fc4a 	bl	80133dc <lwip_htons>
 8018b48:	4603      	mov	r3, r0
 8018b4a:	b2db      	uxtb	r3, r3
 8018b4c:	f003 0303 	and.w	r3, r3, #3
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d001      	beq.n	8018b58 <tcp_receive+0x6c4>
 8018b54:	2301      	movs	r3, #1
 8018b56:	e000      	b.n	8018b5a <tcp_receive+0x6c6>
 8018b58:	2300      	movs	r3, #0
 8018b5a:	4423      	add	r3, r4
 8018b5c:	b29a      	uxth	r2, r3
 8018b5e:	4b70      	ldr	r3, [pc, #448]	@ (8018d20 <tcp_receive+0x88c>)
 8018b60:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018b66:	4b6e      	ldr	r3, [pc, #440]	@ (8018d20 <tcp_receive+0x88c>)
 8018b68:	881b      	ldrh	r3, [r3, #0]
 8018b6a:	429a      	cmp	r2, r3
 8018b6c:	d274      	bcs.n	8018c58 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018b6e:	4b6b      	ldr	r3, [pc, #428]	@ (8018d1c <tcp_receive+0x888>)
 8018b70:	68db      	ldr	r3, [r3, #12]
 8018b72:	899b      	ldrh	r3, [r3, #12]
 8018b74:	b29b      	uxth	r3, r3
 8018b76:	4618      	mov	r0, r3
 8018b78:	f7fa fc30 	bl	80133dc <lwip_htons>
 8018b7c:	4603      	mov	r3, r0
 8018b7e:	b2db      	uxtb	r3, r3
 8018b80:	f003 0301 	and.w	r3, r3, #1
 8018b84:	2b00      	cmp	r3, #0
 8018b86:	d01e      	beq.n	8018bc6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8018b88:	4b64      	ldr	r3, [pc, #400]	@ (8018d1c <tcp_receive+0x888>)
 8018b8a:	68db      	ldr	r3, [r3, #12]
 8018b8c:	899b      	ldrh	r3, [r3, #12]
 8018b8e:	b29b      	uxth	r3, r3
 8018b90:	b21b      	sxth	r3, r3
 8018b92:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8018b96:	b21c      	sxth	r4, r3
 8018b98:	4b60      	ldr	r3, [pc, #384]	@ (8018d1c <tcp_receive+0x888>)
 8018b9a:	68db      	ldr	r3, [r3, #12]
 8018b9c:	899b      	ldrh	r3, [r3, #12]
 8018b9e:	b29b      	uxth	r3, r3
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	f7fa fc1b 	bl	80133dc <lwip_htons>
 8018ba6:	4603      	mov	r3, r0
 8018ba8:	b2db      	uxtb	r3, r3
 8018baa:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8018bae:	b29b      	uxth	r3, r3
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	f7fa fc13 	bl	80133dc <lwip_htons>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	b21b      	sxth	r3, r3
 8018bba:	4323      	orrs	r3, r4
 8018bbc:	b21a      	sxth	r2, r3
 8018bbe:	4b57      	ldr	r3, [pc, #348]	@ (8018d1c <tcp_receive+0x888>)
 8018bc0:	68db      	ldr	r3, [r3, #12]
 8018bc2:	b292      	uxth	r2, r2
 8018bc4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018bca:	4b54      	ldr	r3, [pc, #336]	@ (8018d1c <tcp_receive+0x888>)
 8018bcc:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018bce:	4b53      	ldr	r3, [pc, #332]	@ (8018d1c <tcp_receive+0x888>)
 8018bd0:	68db      	ldr	r3, [r3, #12]
 8018bd2:	899b      	ldrh	r3, [r3, #12]
 8018bd4:	b29b      	uxth	r3, r3
 8018bd6:	4618      	mov	r0, r3
 8018bd8:	f7fa fc00 	bl	80133dc <lwip_htons>
 8018bdc:	4603      	mov	r3, r0
 8018bde:	b2db      	uxtb	r3, r3
 8018be0:	f003 0302 	and.w	r3, r3, #2
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d005      	beq.n	8018bf4 <tcp_receive+0x760>
            inseg.len -= 1;
 8018be8:	4b4c      	ldr	r3, [pc, #304]	@ (8018d1c <tcp_receive+0x888>)
 8018bea:	891b      	ldrh	r3, [r3, #8]
 8018bec:	3b01      	subs	r3, #1
 8018bee:	b29a      	uxth	r2, r3
 8018bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8018d1c <tcp_receive+0x888>)
 8018bf2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018bf4:	4b49      	ldr	r3, [pc, #292]	@ (8018d1c <tcp_receive+0x888>)
 8018bf6:	685b      	ldr	r3, [r3, #4]
 8018bf8:	4a48      	ldr	r2, [pc, #288]	@ (8018d1c <tcp_receive+0x888>)
 8018bfa:	8912      	ldrh	r2, [r2, #8]
 8018bfc:	4611      	mov	r1, r2
 8018bfe:	4618      	mov	r0, r3
 8018c00:	f7fb ff24 	bl	8014a4c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018c04:	4b45      	ldr	r3, [pc, #276]	@ (8018d1c <tcp_receive+0x888>)
 8018c06:	891c      	ldrh	r4, [r3, #8]
 8018c08:	4b44      	ldr	r3, [pc, #272]	@ (8018d1c <tcp_receive+0x888>)
 8018c0a:	68db      	ldr	r3, [r3, #12]
 8018c0c:	899b      	ldrh	r3, [r3, #12]
 8018c0e:	b29b      	uxth	r3, r3
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7fa fbe3 	bl	80133dc <lwip_htons>
 8018c16:	4603      	mov	r3, r0
 8018c18:	b2db      	uxtb	r3, r3
 8018c1a:	f003 0303 	and.w	r3, r3, #3
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d001      	beq.n	8018c26 <tcp_receive+0x792>
 8018c22:	2301      	movs	r3, #1
 8018c24:	e000      	b.n	8018c28 <tcp_receive+0x794>
 8018c26:	2300      	movs	r3, #0
 8018c28:	4423      	add	r3, r4
 8018c2a:	b29a      	uxth	r2, r3
 8018c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8018d20 <tcp_receive+0x88c>)
 8018c2e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018c30:	4b3b      	ldr	r3, [pc, #236]	@ (8018d20 <tcp_receive+0x88c>)
 8018c32:	881b      	ldrh	r3, [r3, #0]
 8018c34:	461a      	mov	r2, r3
 8018c36:	4b38      	ldr	r3, [pc, #224]	@ (8018d18 <tcp_receive+0x884>)
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	441a      	add	r2, r3
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c40:	6879      	ldr	r1, [r7, #4]
 8018c42:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018c44:	440b      	add	r3, r1
 8018c46:	429a      	cmp	r2, r3
 8018c48:	d006      	beq.n	8018c58 <tcp_receive+0x7c4>
 8018c4a:	4b36      	ldr	r3, [pc, #216]	@ (8018d24 <tcp_receive+0x890>)
 8018c4c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8018c50:	4935      	ldr	r1, [pc, #212]	@ (8018d28 <tcp_receive+0x894>)
 8018c52:	4836      	ldr	r0, [pc, #216]	@ (8018d2c <tcp_receive+0x898>)
 8018c54:	f007 fb22 	bl	802029c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	f000 80e6 	beq.w	8018e2e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018c62:	4b2e      	ldr	r3, [pc, #184]	@ (8018d1c <tcp_receive+0x888>)
 8018c64:	68db      	ldr	r3, [r3, #12]
 8018c66:	899b      	ldrh	r3, [r3, #12]
 8018c68:	b29b      	uxth	r3, r3
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f7fa fbb6 	bl	80133dc <lwip_htons>
 8018c70:	4603      	mov	r3, r0
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	f003 0301 	and.w	r3, r3, #1
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d010      	beq.n	8018c9e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018c7c:	e00a      	b.n	8018c94 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c82:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c88:	681a      	ldr	r2, [r3, #0]
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8018c8e:	68f8      	ldr	r0, [r7, #12]
 8018c90:	f7fd fc35 	bl	80164fe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018c98:	2b00      	cmp	r3, #0
 8018c9a:	d1f0      	bne.n	8018c7e <tcp_receive+0x7ea>
 8018c9c:	e0c7      	b.n	8018e2e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8018ca4:	e051      	b.n	8018d4a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018ca6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018ca8:	68db      	ldr	r3, [r3, #12]
 8018caa:	899b      	ldrh	r3, [r3, #12]
 8018cac:	b29b      	uxth	r3, r3
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7fa fb94 	bl	80133dc <lwip_htons>
 8018cb4:	4603      	mov	r3, r0
 8018cb6:	b2db      	uxtb	r3, r3
 8018cb8:	f003 0301 	and.w	r3, r3, #1
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d03c      	beq.n	8018d3a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018cc0:	4b16      	ldr	r3, [pc, #88]	@ (8018d1c <tcp_receive+0x888>)
 8018cc2:	68db      	ldr	r3, [r3, #12]
 8018cc4:	899b      	ldrh	r3, [r3, #12]
 8018cc6:	b29b      	uxth	r3, r3
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f7fa fb87 	bl	80133dc <lwip_htons>
 8018cce:	4603      	mov	r3, r0
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018cd6:	2b00      	cmp	r3, #0
 8018cd8:	d12f      	bne.n	8018d3a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8018cda:	4b10      	ldr	r3, [pc, #64]	@ (8018d1c <tcp_receive+0x888>)
 8018cdc:	68db      	ldr	r3, [r3, #12]
 8018cde:	899b      	ldrh	r3, [r3, #12]
 8018ce0:	b29c      	uxth	r4, r3
 8018ce2:	2001      	movs	r0, #1
 8018ce4:	f7fa fb7a 	bl	80133dc <lwip_htons>
 8018ce8:	4603      	mov	r3, r0
 8018cea:	461a      	mov	r2, r3
 8018cec:	4b0b      	ldr	r3, [pc, #44]	@ (8018d1c <tcp_receive+0x888>)
 8018cee:	68db      	ldr	r3, [r3, #12]
 8018cf0:	4322      	orrs	r2, r4
 8018cf2:	b292      	uxth	r2, r2
 8018cf4:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018cf6:	4b09      	ldr	r3, [pc, #36]	@ (8018d1c <tcp_receive+0x888>)
 8018cf8:	891c      	ldrh	r4, [r3, #8]
 8018cfa:	4b08      	ldr	r3, [pc, #32]	@ (8018d1c <tcp_receive+0x888>)
 8018cfc:	68db      	ldr	r3, [r3, #12]
 8018cfe:	899b      	ldrh	r3, [r3, #12]
 8018d00:	b29b      	uxth	r3, r3
 8018d02:	4618      	mov	r0, r3
 8018d04:	f7fa fb6a 	bl	80133dc <lwip_htons>
 8018d08:	4603      	mov	r3, r0
 8018d0a:	b2db      	uxtb	r3, r3
 8018d0c:	f003 0303 	and.w	r3, r3, #3
 8018d10:	2b00      	cmp	r3, #0
 8018d12:	d00d      	beq.n	8018d30 <tcp_receive+0x89c>
 8018d14:	2301      	movs	r3, #1
 8018d16:	e00c      	b.n	8018d32 <tcp_receive+0x89e>
 8018d18:	200253e0 	.word	0x200253e0
 8018d1c:	200253c0 	.word	0x200253c0
 8018d20:	200253ea 	.word	0x200253ea
 8018d24:	080230b0 	.word	0x080230b0
 8018d28:	08023458 	.word	0x08023458
 8018d2c:	080230fc 	.word	0x080230fc
 8018d30:	2300      	movs	r3, #0
 8018d32:	4423      	add	r3, r4
 8018d34:	b29a      	uxth	r2, r3
 8018d36:	4b98      	ldr	r3, [pc, #608]	@ (8018f98 <tcp_receive+0xb04>)
 8018d38:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018d3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d3c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8018d44:	6938      	ldr	r0, [r7, #16]
 8018d46:	f7fd fbda 	bl	80164fe <tcp_seg_free>
            while (next &&
 8018d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d00e      	beq.n	8018d6e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018d50:	4b91      	ldr	r3, [pc, #580]	@ (8018f98 <tcp_receive+0xb04>)
 8018d52:	881b      	ldrh	r3, [r3, #0]
 8018d54:	461a      	mov	r2, r3
 8018d56:	4b91      	ldr	r3, [pc, #580]	@ (8018f9c <tcp_receive+0xb08>)
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	441a      	add	r2, r3
 8018d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d5e:	68db      	ldr	r3, [r3, #12]
 8018d60:	685b      	ldr	r3, [r3, #4]
 8018d62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8018d64:	8909      	ldrh	r1, [r1, #8]
 8018d66:	440b      	add	r3, r1
 8018d68:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	da9b      	bge.n	8018ca6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018d6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d70:	2b00      	cmp	r3, #0
 8018d72:	d059      	beq.n	8018e28 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8018d74:	4b88      	ldr	r3, [pc, #544]	@ (8018f98 <tcp_receive+0xb04>)
 8018d76:	881b      	ldrh	r3, [r3, #0]
 8018d78:	461a      	mov	r2, r3
 8018d7a:	4b88      	ldr	r3, [pc, #544]	@ (8018f9c <tcp_receive+0xb08>)
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	441a      	add	r2, r3
 8018d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d82:	68db      	ldr	r3, [r3, #12]
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	dd4d      	ble.n	8018e28 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018d8e:	68db      	ldr	r3, [r3, #12]
 8018d90:	685b      	ldr	r3, [r3, #4]
 8018d92:	b29a      	uxth	r2, r3
 8018d94:	4b81      	ldr	r3, [pc, #516]	@ (8018f9c <tcp_receive+0xb08>)
 8018d96:	681b      	ldr	r3, [r3, #0]
 8018d98:	b29b      	uxth	r3, r3
 8018d9a:	1ad3      	subs	r3, r2, r3
 8018d9c:	b29a      	uxth	r2, r3
 8018d9e:	4b80      	ldr	r3, [pc, #512]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018da0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018da2:	4b7f      	ldr	r3, [pc, #508]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018da4:	68db      	ldr	r3, [r3, #12]
 8018da6:	899b      	ldrh	r3, [r3, #12]
 8018da8:	b29b      	uxth	r3, r3
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7fa fb16 	bl	80133dc <lwip_htons>
 8018db0:	4603      	mov	r3, r0
 8018db2:	b2db      	uxtb	r3, r3
 8018db4:	f003 0302 	and.w	r3, r3, #2
 8018db8:	2b00      	cmp	r3, #0
 8018dba:	d005      	beq.n	8018dc8 <tcp_receive+0x934>
                inseg.len -= 1;
 8018dbc:	4b78      	ldr	r3, [pc, #480]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018dbe:	891b      	ldrh	r3, [r3, #8]
 8018dc0:	3b01      	subs	r3, #1
 8018dc2:	b29a      	uxth	r2, r3
 8018dc4:	4b76      	ldr	r3, [pc, #472]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018dc6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8018dc8:	4b75      	ldr	r3, [pc, #468]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018dca:	685b      	ldr	r3, [r3, #4]
 8018dcc:	4a74      	ldr	r2, [pc, #464]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018dce:	8912      	ldrh	r2, [r2, #8]
 8018dd0:	4611      	mov	r1, r2
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	f7fb fe3a 	bl	8014a4c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8018dd8:	4b71      	ldr	r3, [pc, #452]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018dda:	891c      	ldrh	r4, [r3, #8]
 8018ddc:	4b70      	ldr	r3, [pc, #448]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018dde:	68db      	ldr	r3, [r3, #12]
 8018de0:	899b      	ldrh	r3, [r3, #12]
 8018de2:	b29b      	uxth	r3, r3
 8018de4:	4618      	mov	r0, r3
 8018de6:	f7fa faf9 	bl	80133dc <lwip_htons>
 8018dea:	4603      	mov	r3, r0
 8018dec:	b2db      	uxtb	r3, r3
 8018dee:	f003 0303 	and.w	r3, r3, #3
 8018df2:	2b00      	cmp	r3, #0
 8018df4:	d001      	beq.n	8018dfa <tcp_receive+0x966>
 8018df6:	2301      	movs	r3, #1
 8018df8:	e000      	b.n	8018dfc <tcp_receive+0x968>
 8018dfa:	2300      	movs	r3, #0
 8018dfc:	4423      	add	r3, r4
 8018dfe:	b29a      	uxth	r2, r3
 8018e00:	4b65      	ldr	r3, [pc, #404]	@ (8018f98 <tcp_receive+0xb04>)
 8018e02:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018e04:	4b64      	ldr	r3, [pc, #400]	@ (8018f98 <tcp_receive+0xb04>)
 8018e06:	881b      	ldrh	r3, [r3, #0]
 8018e08:	461a      	mov	r2, r3
 8018e0a:	4b64      	ldr	r3, [pc, #400]	@ (8018f9c <tcp_receive+0xb08>)
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	441a      	add	r2, r3
 8018e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018e12:	68db      	ldr	r3, [r3, #12]
 8018e14:	685b      	ldr	r3, [r3, #4]
 8018e16:	429a      	cmp	r2, r3
 8018e18:	d006      	beq.n	8018e28 <tcp_receive+0x994>
 8018e1a:	4b62      	ldr	r3, [pc, #392]	@ (8018fa4 <tcp_receive+0xb10>)
 8018e1c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8018e20:	4961      	ldr	r1, [pc, #388]	@ (8018fa8 <tcp_receive+0xb14>)
 8018e22:	4862      	ldr	r0, [pc, #392]	@ (8018fac <tcp_receive+0xb18>)
 8018e24:	f007 fa3a 	bl	802029c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8018e2c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8018f98 <tcp_receive+0xb04>)
 8018e30:	881b      	ldrh	r3, [r3, #0]
 8018e32:	461a      	mov	r2, r3
 8018e34:	4b59      	ldr	r3, [pc, #356]	@ (8018f9c <tcp_receive+0xb08>)
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	441a      	add	r2, r3
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018e42:	4b55      	ldr	r3, [pc, #340]	@ (8018f98 <tcp_receive+0xb04>)
 8018e44:	881b      	ldrh	r3, [r3, #0]
 8018e46:	429a      	cmp	r2, r3
 8018e48:	d206      	bcs.n	8018e58 <tcp_receive+0x9c4>
 8018e4a:	4b56      	ldr	r3, [pc, #344]	@ (8018fa4 <tcp_receive+0xb10>)
 8018e4c:	f240 6207 	movw	r2, #1543	@ 0x607
 8018e50:	4957      	ldr	r1, [pc, #348]	@ (8018fb0 <tcp_receive+0xb1c>)
 8018e52:	4856      	ldr	r0, [pc, #344]	@ (8018fac <tcp_receive+0xb18>)
 8018e54:	f007 fa22 	bl	802029c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018e5c:	4b4e      	ldr	r3, [pc, #312]	@ (8018f98 <tcp_receive+0xb04>)
 8018e5e:	881b      	ldrh	r3, [r3, #0]
 8018e60:	1ad3      	subs	r3, r2, r3
 8018e62:	b29a      	uxth	r2, r3
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018e68:	6878      	ldr	r0, [r7, #4]
 8018e6a:	f7fc fe21 	bl	8015ab0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018e6e:	4b4c      	ldr	r3, [pc, #304]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018e70:	685b      	ldr	r3, [r3, #4]
 8018e72:	891b      	ldrh	r3, [r3, #8]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d006      	beq.n	8018e86 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8018e78:	4b49      	ldr	r3, [pc, #292]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018e7a:	685b      	ldr	r3, [r3, #4]
 8018e7c:	4a4d      	ldr	r2, [pc, #308]	@ (8018fb4 <tcp_receive+0xb20>)
 8018e7e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018e80:	4b47      	ldr	r3, [pc, #284]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018e82:	2200      	movs	r2, #0
 8018e84:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018e86:	4b46      	ldr	r3, [pc, #280]	@ (8018fa0 <tcp_receive+0xb0c>)
 8018e88:	68db      	ldr	r3, [r3, #12]
 8018e8a:	899b      	ldrh	r3, [r3, #12]
 8018e8c:	b29b      	uxth	r3, r3
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f7fa faa4 	bl	80133dc <lwip_htons>
 8018e94:	4603      	mov	r3, r0
 8018e96:	b2db      	uxtb	r3, r3
 8018e98:	f003 0301 	and.w	r3, r3, #1
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	f000 80b8 	beq.w	8019012 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8018ea2:	4b45      	ldr	r3, [pc, #276]	@ (8018fb8 <tcp_receive+0xb24>)
 8018ea4:	781b      	ldrb	r3, [r3, #0]
 8018ea6:	f043 0320 	orr.w	r3, r3, #32
 8018eaa:	b2da      	uxtb	r2, r3
 8018eac:	4b42      	ldr	r3, [pc, #264]	@ (8018fb8 <tcp_receive+0xb24>)
 8018eae:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018eb0:	e0af      	b.n	8019012 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018eb6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ebc:	68db      	ldr	r3, [r3, #12]
 8018ebe:	685b      	ldr	r3, [r3, #4]
 8018ec0:	4a36      	ldr	r2, [pc, #216]	@ (8018f9c <tcp_receive+0xb08>)
 8018ec2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018ec4:	68bb      	ldr	r3, [r7, #8]
 8018ec6:	891b      	ldrh	r3, [r3, #8]
 8018ec8:	461c      	mov	r4, r3
 8018eca:	68bb      	ldr	r3, [r7, #8]
 8018ecc:	68db      	ldr	r3, [r3, #12]
 8018ece:	899b      	ldrh	r3, [r3, #12]
 8018ed0:	b29b      	uxth	r3, r3
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f7fa fa82 	bl	80133dc <lwip_htons>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	b2db      	uxtb	r3, r3
 8018edc:	f003 0303 	and.w	r3, r3, #3
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d001      	beq.n	8018ee8 <tcp_receive+0xa54>
 8018ee4:	2301      	movs	r3, #1
 8018ee6:	e000      	b.n	8018eea <tcp_receive+0xa56>
 8018ee8:	2300      	movs	r3, #0
 8018eea:	191a      	adds	r2, r3, r4
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ef0:	441a      	add	r2, r3
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018efa:	461c      	mov	r4, r3
 8018efc:	68bb      	ldr	r3, [r7, #8]
 8018efe:	891b      	ldrh	r3, [r3, #8]
 8018f00:	461d      	mov	r5, r3
 8018f02:	68bb      	ldr	r3, [r7, #8]
 8018f04:	68db      	ldr	r3, [r3, #12]
 8018f06:	899b      	ldrh	r3, [r3, #12]
 8018f08:	b29b      	uxth	r3, r3
 8018f0a:	4618      	mov	r0, r3
 8018f0c:	f7fa fa66 	bl	80133dc <lwip_htons>
 8018f10:	4603      	mov	r3, r0
 8018f12:	b2db      	uxtb	r3, r3
 8018f14:	f003 0303 	and.w	r3, r3, #3
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d001      	beq.n	8018f20 <tcp_receive+0xa8c>
 8018f1c:	2301      	movs	r3, #1
 8018f1e:	e000      	b.n	8018f22 <tcp_receive+0xa8e>
 8018f20:	2300      	movs	r3, #0
 8018f22:	442b      	add	r3, r5
 8018f24:	429c      	cmp	r4, r3
 8018f26:	d206      	bcs.n	8018f36 <tcp_receive+0xaa2>
 8018f28:	4b1e      	ldr	r3, [pc, #120]	@ (8018fa4 <tcp_receive+0xb10>)
 8018f2a:	f240 622b 	movw	r2, #1579	@ 0x62b
 8018f2e:	4923      	ldr	r1, [pc, #140]	@ (8018fbc <tcp_receive+0xb28>)
 8018f30:	481e      	ldr	r0, [pc, #120]	@ (8018fac <tcp_receive+0xb18>)
 8018f32:	f007 f9b3 	bl	802029c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8018f36:	68bb      	ldr	r3, [r7, #8]
 8018f38:	891b      	ldrh	r3, [r3, #8]
 8018f3a:	461c      	mov	r4, r3
 8018f3c:	68bb      	ldr	r3, [r7, #8]
 8018f3e:	68db      	ldr	r3, [r3, #12]
 8018f40:	899b      	ldrh	r3, [r3, #12]
 8018f42:	b29b      	uxth	r3, r3
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7fa fa49 	bl	80133dc <lwip_htons>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	b2db      	uxtb	r3, r3
 8018f4e:	f003 0303 	and.w	r3, r3, #3
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d001      	beq.n	8018f5a <tcp_receive+0xac6>
 8018f56:	2301      	movs	r3, #1
 8018f58:	e000      	b.n	8018f5c <tcp_receive+0xac8>
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	1919      	adds	r1, r3, r4
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8018f62:	b28b      	uxth	r3, r1
 8018f64:	1ad3      	subs	r3, r2, r3
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018f6c:	6878      	ldr	r0, [r7, #4]
 8018f6e:	f7fc fd9f 	bl	8015ab0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	685b      	ldr	r3, [r3, #4]
 8018f76:	891b      	ldrh	r3, [r3, #8]
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d028      	beq.n	8018fce <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8018fb4 <tcp_receive+0xb20>)
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d01d      	beq.n	8018fc0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8018f84:	4b0b      	ldr	r3, [pc, #44]	@ (8018fb4 <tcp_receive+0xb20>)
 8018f86:	681a      	ldr	r2, [r3, #0]
 8018f88:	68bb      	ldr	r3, [r7, #8]
 8018f8a:	685b      	ldr	r3, [r3, #4]
 8018f8c:	4619      	mov	r1, r3
 8018f8e:	4610      	mov	r0, r2
 8018f90:	f7fb ffb0 	bl	8014ef4 <pbuf_cat>
 8018f94:	e018      	b.n	8018fc8 <tcp_receive+0xb34>
 8018f96:	bf00      	nop
 8018f98:	200253ea 	.word	0x200253ea
 8018f9c:	200253e0 	.word	0x200253e0
 8018fa0:	200253c0 	.word	0x200253c0
 8018fa4:	080230b0 	.word	0x080230b0
 8018fa8:	08023490 	.word	0x08023490
 8018fac:	080230fc 	.word	0x080230fc
 8018fb0:	080234cc 	.word	0x080234cc
 8018fb4:	200253f0 	.word	0x200253f0
 8018fb8:	200253ed 	.word	0x200253ed
 8018fbc:	080234ec 	.word	0x080234ec
            } else {
              recv_data = cseg->p;
 8018fc0:	68bb      	ldr	r3, [r7, #8]
 8018fc2:	685b      	ldr	r3, [r3, #4]
 8018fc4:	4a70      	ldr	r2, [pc, #448]	@ (8019188 <tcp_receive+0xcf4>)
 8018fc6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8018fc8:	68bb      	ldr	r3, [r7, #8]
 8018fca:	2200      	movs	r2, #0
 8018fcc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018fce:	68bb      	ldr	r3, [r7, #8]
 8018fd0:	68db      	ldr	r3, [r3, #12]
 8018fd2:	899b      	ldrh	r3, [r3, #12]
 8018fd4:	b29b      	uxth	r3, r3
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	f7fa fa00 	bl	80133dc <lwip_htons>
 8018fdc:	4603      	mov	r3, r0
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	f003 0301 	and.w	r3, r3, #1
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	d00d      	beq.n	8019004 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8018fe8:	4b68      	ldr	r3, [pc, #416]	@ (801918c <tcp_receive+0xcf8>)
 8018fea:	781b      	ldrb	r3, [r3, #0]
 8018fec:	f043 0320 	orr.w	r3, r3, #32
 8018ff0:	b2da      	uxtb	r2, r3
 8018ff2:	4b66      	ldr	r3, [pc, #408]	@ (801918c <tcp_receive+0xcf8>)
 8018ff4:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	7d1b      	ldrb	r3, [r3, #20]
 8018ffa:	2b04      	cmp	r3, #4
 8018ffc:	d102      	bne.n	8019004 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018ffe:	687b      	ldr	r3, [r7, #4]
 8019000:	2207      	movs	r2, #7
 8019002:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019004:	68bb      	ldr	r3, [r7, #8]
 8019006:	681a      	ldr	r2, [r3, #0]
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801900c:	68b8      	ldr	r0, [r7, #8]
 801900e:	f7fd fa76 	bl	80164fe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019016:	2b00      	cmp	r3, #0
 8019018:	d008      	beq.n	801902c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801901e:	68db      	ldr	r3, [r3, #12]
 8019020:	685a      	ldr	r2, [r3, #4]
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8019026:	429a      	cmp	r2, r3
 8019028:	f43f af43 	beq.w	8018eb2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	8b5b      	ldrh	r3, [r3, #26]
 8019030:	f003 0301 	and.w	r3, r3, #1
 8019034:	2b00      	cmp	r3, #0
 8019036:	d00e      	beq.n	8019056 <tcp_receive+0xbc2>
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	8b5b      	ldrh	r3, [r3, #26]
 801903c:	f023 0301 	bic.w	r3, r3, #1
 8019040:	b29a      	uxth	r2, r3
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	835a      	strh	r2, [r3, #26]
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	8b5b      	ldrh	r3, [r3, #26]
 801904a:	f043 0302 	orr.w	r3, r3, #2
 801904e:	b29a      	uxth	r2, r3
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019054:	e187      	b.n	8019366 <tcp_receive+0xed2>
        tcp_ack(pcb);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	8b5b      	ldrh	r3, [r3, #26]
 801905a:	f043 0301 	orr.w	r3, r3, #1
 801905e:	b29a      	uxth	r2, r3
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8019064:	e17f      	b.n	8019366 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801906a:	2b00      	cmp	r3, #0
 801906c:	d106      	bne.n	801907c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801906e:	4848      	ldr	r0, [pc, #288]	@ (8019190 <tcp_receive+0xcfc>)
 8019070:	f7fd fa5e 	bl	8016530 <tcp_seg_copy>
 8019074:	4602      	mov	r2, r0
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	675a      	str	r2, [r3, #116]	@ 0x74
 801907a:	e16c      	b.n	8019356 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801907c:	2300      	movs	r3, #0
 801907e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019084:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019086:	e156      	b.n	8019336 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8019088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801908a:	68db      	ldr	r3, [r3, #12]
 801908c:	685a      	ldr	r2, [r3, #4]
 801908e:	4b41      	ldr	r3, [pc, #260]	@ (8019194 <tcp_receive+0xd00>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	429a      	cmp	r2, r3
 8019094:	d11d      	bne.n	80190d2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019096:	4b3e      	ldr	r3, [pc, #248]	@ (8019190 <tcp_receive+0xcfc>)
 8019098:	891a      	ldrh	r2, [r3, #8]
 801909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801909c:	891b      	ldrh	r3, [r3, #8]
 801909e:	429a      	cmp	r2, r3
 80190a0:	f240 814e 	bls.w	8019340 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80190a4:	483a      	ldr	r0, [pc, #232]	@ (8019190 <tcp_receive+0xcfc>)
 80190a6:	f7fd fa43 	bl	8016530 <tcp_seg_copy>
 80190aa:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80190ac:	697b      	ldr	r3, [r7, #20]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	f000 8148 	beq.w	8019344 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80190b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d003      	beq.n	80190c2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80190ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190bc:	697a      	ldr	r2, [r7, #20]
 80190be:	601a      	str	r2, [r3, #0]
 80190c0:	e002      	b.n	80190c8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80190c2:	687b      	ldr	r3, [r7, #4]
 80190c4:	697a      	ldr	r2, [r7, #20]
 80190c6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80190c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80190ca:	6978      	ldr	r0, [r7, #20]
 80190cc:	f7ff f8de 	bl	801828c <tcp_oos_insert_segment>
                }
                break;
 80190d0:	e138      	b.n	8019344 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80190d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d117      	bne.n	8019108 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80190d8:	4b2e      	ldr	r3, [pc, #184]	@ (8019194 <tcp_receive+0xd00>)
 80190da:	681a      	ldr	r2, [r3, #0]
 80190dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80190de:	68db      	ldr	r3, [r3, #12]
 80190e0:	685b      	ldr	r3, [r3, #4]
 80190e2:	1ad3      	subs	r3, r2, r3
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	da57      	bge.n	8019198 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80190e8:	4829      	ldr	r0, [pc, #164]	@ (8019190 <tcp_receive+0xcfc>)
 80190ea:	f7fd fa21 	bl	8016530 <tcp_seg_copy>
 80190ee:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80190f0:	69bb      	ldr	r3, [r7, #24]
 80190f2:	2b00      	cmp	r3, #0
 80190f4:	f000 8128 	beq.w	8019348 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	69ba      	ldr	r2, [r7, #24]
 80190fc:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 80190fe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019100:	69b8      	ldr	r0, [r7, #24]
 8019102:	f7ff f8c3 	bl	801828c <tcp_oos_insert_segment>
                  }
                  break;
 8019106:	e11f      	b.n	8019348 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019108:	4b22      	ldr	r3, [pc, #136]	@ (8019194 <tcp_receive+0xd00>)
 801910a:	681a      	ldr	r2, [r3, #0]
 801910c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801910e:	68db      	ldr	r3, [r3, #12]
 8019110:	685b      	ldr	r3, [r3, #4]
 8019112:	1ad3      	subs	r3, r2, r3
 8019114:	3b01      	subs	r3, #1
 8019116:	2b00      	cmp	r3, #0
 8019118:	db3e      	blt.n	8019198 <tcp_receive+0xd04>
 801911a:	4b1e      	ldr	r3, [pc, #120]	@ (8019194 <tcp_receive+0xd00>)
 801911c:	681a      	ldr	r2, [r3, #0]
 801911e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019120:	68db      	ldr	r3, [r3, #12]
 8019122:	685b      	ldr	r3, [r3, #4]
 8019124:	1ad3      	subs	r3, r2, r3
 8019126:	3301      	adds	r3, #1
 8019128:	2b00      	cmp	r3, #0
 801912a:	dc35      	bgt.n	8019198 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801912c:	4818      	ldr	r0, [pc, #96]	@ (8019190 <tcp_receive+0xcfc>)
 801912e:	f7fd f9ff 	bl	8016530 <tcp_seg_copy>
 8019132:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8019134:	69fb      	ldr	r3, [r7, #28]
 8019136:	2b00      	cmp	r3, #0
 8019138:	f000 8108 	beq.w	801934c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801913c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801913e:	68db      	ldr	r3, [r3, #12]
 8019140:	685b      	ldr	r3, [r3, #4]
 8019142:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019144:	8912      	ldrh	r2, [r2, #8]
 8019146:	441a      	add	r2, r3
 8019148:	4b12      	ldr	r3, [pc, #72]	@ (8019194 <tcp_receive+0xd00>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	1ad3      	subs	r3, r2, r3
 801914e:	2b00      	cmp	r3, #0
 8019150:	dd12      	ble.n	8019178 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8019152:	4b10      	ldr	r3, [pc, #64]	@ (8019194 <tcp_receive+0xd00>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	b29a      	uxth	r2, r3
 8019158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801915a:	68db      	ldr	r3, [r3, #12]
 801915c:	685b      	ldr	r3, [r3, #4]
 801915e:	b29b      	uxth	r3, r3
 8019160:	1ad3      	subs	r3, r2, r3
 8019162:	b29a      	uxth	r2, r3
 8019164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019166:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8019168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801916a:	685a      	ldr	r2, [r3, #4]
 801916c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801916e:	891b      	ldrh	r3, [r3, #8]
 8019170:	4619      	mov	r1, r3
 8019172:	4610      	mov	r0, r2
 8019174:	f7fb fc6a 	bl	8014a4c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801917a:	69fa      	ldr	r2, [r7, #28]
 801917c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801917e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019180:	69f8      	ldr	r0, [r7, #28]
 8019182:	f7ff f883 	bl	801828c <tcp_oos_insert_segment>
                  }
                  break;
 8019186:	e0e1      	b.n	801934c <tcp_receive+0xeb8>
 8019188:	200253f0 	.word	0x200253f0
 801918c:	200253ed 	.word	0x200253ed
 8019190:	200253c0 	.word	0x200253c0
 8019194:	200253e0 	.word	0x200253e0
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801919a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801919c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	2b00      	cmp	r3, #0
 80191a2:	f040 80c5 	bne.w	8019330 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80191a6:	4b7f      	ldr	r3, [pc, #508]	@ (80193a4 <tcp_receive+0xf10>)
 80191a8:	681a      	ldr	r2, [r3, #0]
 80191aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191ac:	68db      	ldr	r3, [r3, #12]
 80191ae:	685b      	ldr	r3, [r3, #4]
 80191b0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	f340 80bc 	ble.w	8019330 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80191b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191ba:	68db      	ldr	r3, [r3, #12]
 80191bc:	899b      	ldrh	r3, [r3, #12]
 80191be:	b29b      	uxth	r3, r3
 80191c0:	4618      	mov	r0, r3
 80191c2:	f7fa f90b 	bl	80133dc <lwip_htons>
 80191c6:	4603      	mov	r3, r0
 80191c8:	b2db      	uxtb	r3, r3
 80191ca:	f003 0301 	and.w	r3, r3, #1
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	f040 80be 	bne.w	8019350 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80191d4:	4874      	ldr	r0, [pc, #464]	@ (80193a8 <tcp_receive+0xf14>)
 80191d6:	f7fd f9ab 	bl	8016530 <tcp_seg_copy>
 80191da:	4602      	mov	r2, r0
 80191dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191de:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80191e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	f000 80b5 	beq.w	8019354 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80191ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80191ec:	68db      	ldr	r3, [r3, #12]
 80191ee:	685b      	ldr	r3, [r3, #4]
 80191f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80191f2:	8912      	ldrh	r2, [r2, #8]
 80191f4:	441a      	add	r2, r3
 80191f6:	4b6b      	ldr	r3, [pc, #428]	@ (80193a4 <tcp_receive+0xf10>)
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	1ad3      	subs	r3, r2, r3
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	dd12      	ble.n	8019226 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8019200:	4b68      	ldr	r3, [pc, #416]	@ (80193a4 <tcp_receive+0xf10>)
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	b29a      	uxth	r2, r3
 8019206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019208:	68db      	ldr	r3, [r3, #12]
 801920a:	685b      	ldr	r3, [r3, #4]
 801920c:	b29b      	uxth	r3, r3
 801920e:	1ad3      	subs	r3, r2, r3
 8019210:	b29a      	uxth	r2, r3
 8019212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019214:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8019216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019218:	685a      	ldr	r2, [r3, #4]
 801921a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801921c:	891b      	ldrh	r3, [r3, #8]
 801921e:	4619      	mov	r1, r3
 8019220:	4610      	mov	r0, r2
 8019222:	f7fb fc13 	bl	8014a4c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8019226:	4b61      	ldr	r3, [pc, #388]	@ (80193ac <tcp_receive+0xf18>)
 8019228:	881b      	ldrh	r3, [r3, #0]
 801922a:	461a      	mov	r2, r3
 801922c:	4b5d      	ldr	r3, [pc, #372]	@ (80193a4 <tcp_receive+0xf10>)
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	441a      	add	r2, r3
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019236:	6879      	ldr	r1, [r7, #4]
 8019238:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801923a:	440b      	add	r3, r1
 801923c:	1ad3      	subs	r3, r2, r3
 801923e:	2b00      	cmp	r3, #0
 8019240:	f340 8088 	ble.w	8019354 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8019244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	68db      	ldr	r3, [r3, #12]
 801924a:	899b      	ldrh	r3, [r3, #12]
 801924c:	b29b      	uxth	r3, r3
 801924e:	4618      	mov	r0, r3
 8019250:	f7fa f8c4 	bl	80133dc <lwip_htons>
 8019254:	4603      	mov	r3, r0
 8019256:	b2db      	uxtb	r3, r3
 8019258:	f003 0301 	and.w	r3, r3, #1
 801925c:	2b00      	cmp	r3, #0
 801925e:	d021      	beq.n	80192a4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8019260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019262:	681b      	ldr	r3, [r3, #0]
 8019264:	68db      	ldr	r3, [r3, #12]
 8019266:	899b      	ldrh	r3, [r3, #12]
 8019268:	b29b      	uxth	r3, r3
 801926a:	b21b      	sxth	r3, r3
 801926c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019270:	b21c      	sxth	r4, r3
 8019272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019274:	681b      	ldr	r3, [r3, #0]
 8019276:	68db      	ldr	r3, [r3, #12]
 8019278:	899b      	ldrh	r3, [r3, #12]
 801927a:	b29b      	uxth	r3, r3
 801927c:	4618      	mov	r0, r3
 801927e:	f7fa f8ad 	bl	80133dc <lwip_htons>
 8019282:	4603      	mov	r3, r0
 8019284:	b2db      	uxtb	r3, r3
 8019286:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801928a:	b29b      	uxth	r3, r3
 801928c:	4618      	mov	r0, r3
 801928e:	f7fa f8a5 	bl	80133dc <lwip_htons>
 8019292:	4603      	mov	r3, r0
 8019294:	b21b      	sxth	r3, r3
 8019296:	4323      	orrs	r3, r4
 8019298:	b21a      	sxth	r2, r3
 801929a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	68db      	ldr	r3, [r3, #12]
 80192a0:	b292      	uxth	r2, r2
 80192a2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192a8:	b29a      	uxth	r2, r3
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80192ae:	4413      	add	r3, r2
 80192b0:	b299      	uxth	r1, r3
 80192b2:	4b3c      	ldr	r3, [pc, #240]	@ (80193a4 <tcp_receive+0xf10>)
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	b29a      	uxth	r2, r3
 80192b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	1a8a      	subs	r2, r1, r2
 80192be:	b292      	uxth	r2, r2
 80192c0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80192c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	685a      	ldr	r2, [r3, #4]
 80192c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	891b      	ldrh	r3, [r3, #8]
 80192ce:	4619      	mov	r1, r3
 80192d0:	4610      	mov	r0, r2
 80192d2:	f7fb fbbb 	bl	8014a4c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80192d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	891c      	ldrh	r4, [r3, #8]
 80192dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	68db      	ldr	r3, [r3, #12]
 80192e2:	899b      	ldrh	r3, [r3, #12]
 80192e4:	b29b      	uxth	r3, r3
 80192e6:	4618      	mov	r0, r3
 80192e8:	f7fa f878 	bl	80133dc <lwip_htons>
 80192ec:	4603      	mov	r3, r0
 80192ee:	b2db      	uxtb	r3, r3
 80192f0:	f003 0303 	and.w	r3, r3, #3
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d001      	beq.n	80192fc <tcp_receive+0xe68>
 80192f8:	2301      	movs	r3, #1
 80192fa:	e000      	b.n	80192fe <tcp_receive+0xe6a>
 80192fc:	2300      	movs	r3, #0
 80192fe:	4423      	add	r3, r4
 8019300:	b29a      	uxth	r2, r3
 8019302:	4b2a      	ldr	r3, [pc, #168]	@ (80193ac <tcp_receive+0xf18>)
 8019304:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019306:	4b29      	ldr	r3, [pc, #164]	@ (80193ac <tcp_receive+0xf18>)
 8019308:	881b      	ldrh	r3, [r3, #0]
 801930a:	461a      	mov	r2, r3
 801930c:	4b25      	ldr	r3, [pc, #148]	@ (80193a4 <tcp_receive+0xf10>)
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	441a      	add	r2, r3
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019316:	6879      	ldr	r1, [r7, #4]
 8019318:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801931a:	440b      	add	r3, r1
 801931c:	429a      	cmp	r2, r3
 801931e:	d019      	beq.n	8019354 <tcp_receive+0xec0>
 8019320:	4b23      	ldr	r3, [pc, #140]	@ (80193b0 <tcp_receive+0xf1c>)
 8019322:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8019326:	4923      	ldr	r1, [pc, #140]	@ (80193b4 <tcp_receive+0xf20>)
 8019328:	4823      	ldr	r0, [pc, #140]	@ (80193b8 <tcp_receive+0xf24>)
 801932a:	f006 ffb7 	bl	802029c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801932e:	e011      	b.n	8019354 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8019330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019338:	2b00      	cmp	r3, #0
 801933a:	f47f aea5 	bne.w	8019088 <tcp_receive+0xbf4>
 801933e:	e00a      	b.n	8019356 <tcp_receive+0xec2>
                break;
 8019340:	bf00      	nop
 8019342:	e008      	b.n	8019356 <tcp_receive+0xec2>
                break;
 8019344:	bf00      	nop
 8019346:	e006      	b.n	8019356 <tcp_receive+0xec2>
                  break;
 8019348:	bf00      	nop
 801934a:	e004      	b.n	8019356 <tcp_receive+0xec2>
                  break;
 801934c:	bf00      	nop
 801934e:	e002      	b.n	8019356 <tcp_receive+0xec2>
                  break;
 8019350:	bf00      	nop
 8019352:	e000      	b.n	8019356 <tcp_receive+0xec2>
                break;
 8019354:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8019356:	6878      	ldr	r0, [r7, #4]
 8019358:	f001 fed6 	bl	801b108 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801935c:	e003      	b.n	8019366 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801935e:	6878      	ldr	r0, [r7, #4]
 8019360:	f001 fed2 	bl	801b108 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8019364:	e01a      	b.n	801939c <tcp_receive+0xf08>
 8019366:	e019      	b.n	801939c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8019368:	4b0e      	ldr	r3, [pc, #56]	@ (80193a4 <tcp_receive+0xf10>)
 801936a:	681a      	ldr	r2, [r3, #0]
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019370:	1ad3      	subs	r3, r2, r3
 8019372:	2b00      	cmp	r3, #0
 8019374:	db0a      	blt.n	801938c <tcp_receive+0xef8>
 8019376:	4b0b      	ldr	r3, [pc, #44]	@ (80193a4 <tcp_receive+0xf10>)
 8019378:	681a      	ldr	r2, [r3, #0]
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801937e:	6879      	ldr	r1, [r7, #4]
 8019380:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019382:	440b      	add	r3, r1
 8019384:	1ad3      	subs	r3, r2, r3
 8019386:	3301      	adds	r3, #1
 8019388:	2b00      	cmp	r3, #0
 801938a:	dd07      	ble.n	801939c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	8b5b      	ldrh	r3, [r3, #26]
 8019390:	f043 0302 	orr.w	r3, r3, #2
 8019394:	b29a      	uxth	r2, r3
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801939a:	e7ff      	b.n	801939c <tcp_receive+0xf08>
 801939c:	bf00      	nop
 801939e:	3750      	adds	r7, #80	@ 0x50
 80193a0:	46bd      	mov	sp, r7
 80193a2:	bdb0      	pop	{r4, r5, r7, pc}
 80193a4:	200253e0 	.word	0x200253e0
 80193a8:	200253c0 	.word	0x200253c0
 80193ac:	200253ea 	.word	0x200253ea
 80193b0:	080230b0 	.word	0x080230b0
 80193b4:	08023458 	.word	0x08023458
 80193b8:	080230fc 	.word	0x080230fc

080193bc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80193bc:	b480      	push	{r7}
 80193be:	b083      	sub	sp, #12
 80193c0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80193c2:	4b15      	ldr	r3, [pc, #84]	@ (8019418 <tcp_get_next_optbyte+0x5c>)
 80193c4:	881b      	ldrh	r3, [r3, #0]
 80193c6:	1c5a      	adds	r2, r3, #1
 80193c8:	b291      	uxth	r1, r2
 80193ca:	4a13      	ldr	r2, [pc, #76]	@ (8019418 <tcp_get_next_optbyte+0x5c>)
 80193cc:	8011      	strh	r1, [r2, #0]
 80193ce:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80193d0:	4b12      	ldr	r3, [pc, #72]	@ (801941c <tcp_get_next_optbyte+0x60>)
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d004      	beq.n	80193e2 <tcp_get_next_optbyte+0x26>
 80193d8:	4b11      	ldr	r3, [pc, #68]	@ (8019420 <tcp_get_next_optbyte+0x64>)
 80193da:	881b      	ldrh	r3, [r3, #0]
 80193dc:	88fa      	ldrh	r2, [r7, #6]
 80193de:	429a      	cmp	r2, r3
 80193e0:	d208      	bcs.n	80193f4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80193e2:	4b10      	ldr	r3, [pc, #64]	@ (8019424 <tcp_get_next_optbyte+0x68>)
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	3314      	adds	r3, #20
 80193e8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80193ea:	88fb      	ldrh	r3, [r7, #6]
 80193ec:	683a      	ldr	r2, [r7, #0]
 80193ee:	4413      	add	r3, r2
 80193f0:	781b      	ldrb	r3, [r3, #0]
 80193f2:	e00b      	b.n	801940c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80193f4:	88fb      	ldrh	r3, [r7, #6]
 80193f6:	b2da      	uxtb	r2, r3
 80193f8:	4b09      	ldr	r3, [pc, #36]	@ (8019420 <tcp_get_next_optbyte+0x64>)
 80193fa:	881b      	ldrh	r3, [r3, #0]
 80193fc:	b2db      	uxtb	r3, r3
 80193fe:	1ad3      	subs	r3, r2, r3
 8019400:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019402:	4b06      	ldr	r3, [pc, #24]	@ (801941c <tcp_get_next_optbyte+0x60>)
 8019404:	681a      	ldr	r2, [r3, #0]
 8019406:	797b      	ldrb	r3, [r7, #5]
 8019408:	4413      	add	r3, r2
 801940a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801940c:	4618      	mov	r0, r3
 801940e:	370c      	adds	r7, #12
 8019410:	46bd      	mov	sp, r7
 8019412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019416:	4770      	bx	lr
 8019418:	200253dc 	.word	0x200253dc
 801941c:	200253d8 	.word	0x200253d8
 8019420:	200253d6 	.word	0x200253d6
 8019424:	200253d0 	.word	0x200253d0

08019428 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b084      	sub	sp, #16
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2b00      	cmp	r3, #0
 8019434:	d106      	bne.n	8019444 <tcp_parseopt+0x1c>
 8019436:	4b32      	ldr	r3, [pc, #200]	@ (8019500 <tcp_parseopt+0xd8>)
 8019438:	f240 727d 	movw	r2, #1917	@ 0x77d
 801943c:	4931      	ldr	r1, [pc, #196]	@ (8019504 <tcp_parseopt+0xdc>)
 801943e:	4832      	ldr	r0, [pc, #200]	@ (8019508 <tcp_parseopt+0xe0>)
 8019440:	f006 ff2c 	bl	802029c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019444:	4b31      	ldr	r3, [pc, #196]	@ (801950c <tcp_parseopt+0xe4>)
 8019446:	881b      	ldrh	r3, [r3, #0]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d056      	beq.n	80194fa <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801944c:	4b30      	ldr	r3, [pc, #192]	@ (8019510 <tcp_parseopt+0xe8>)
 801944e:	2200      	movs	r2, #0
 8019450:	801a      	strh	r2, [r3, #0]
 8019452:	e046      	b.n	80194e2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8019454:	f7ff ffb2 	bl	80193bc <tcp_get_next_optbyte>
 8019458:	4603      	mov	r3, r0
 801945a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801945c:	7bfb      	ldrb	r3, [r7, #15]
 801945e:	2b02      	cmp	r3, #2
 8019460:	d006      	beq.n	8019470 <tcp_parseopt+0x48>
 8019462:	2b02      	cmp	r3, #2
 8019464:	dc2a      	bgt.n	80194bc <tcp_parseopt+0x94>
 8019466:	2b00      	cmp	r3, #0
 8019468:	d042      	beq.n	80194f0 <tcp_parseopt+0xc8>
 801946a:	2b01      	cmp	r3, #1
 801946c:	d038      	beq.n	80194e0 <tcp_parseopt+0xb8>
 801946e:	e025      	b.n	80194bc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019470:	f7ff ffa4 	bl	80193bc <tcp_get_next_optbyte>
 8019474:	4603      	mov	r3, r0
 8019476:	2b04      	cmp	r3, #4
 8019478:	d13c      	bne.n	80194f4 <tcp_parseopt+0xcc>
 801947a:	4b25      	ldr	r3, [pc, #148]	@ (8019510 <tcp_parseopt+0xe8>)
 801947c:	881b      	ldrh	r3, [r3, #0]
 801947e:	3301      	adds	r3, #1
 8019480:	4a22      	ldr	r2, [pc, #136]	@ (801950c <tcp_parseopt+0xe4>)
 8019482:	8812      	ldrh	r2, [r2, #0]
 8019484:	4293      	cmp	r3, r2
 8019486:	da35      	bge.n	80194f4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019488:	f7ff ff98 	bl	80193bc <tcp_get_next_optbyte>
 801948c:	4603      	mov	r3, r0
 801948e:	021b      	lsls	r3, r3, #8
 8019490:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019492:	f7ff ff93 	bl	80193bc <tcp_get_next_optbyte>
 8019496:	4603      	mov	r3, r0
 8019498:	461a      	mov	r2, r3
 801949a:	89bb      	ldrh	r3, [r7, #12]
 801949c:	4313      	orrs	r3, r2
 801949e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80194a0:	89bb      	ldrh	r3, [r7, #12]
 80194a2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80194a6:	d804      	bhi.n	80194b2 <tcp_parseopt+0x8a>
 80194a8:	89bb      	ldrh	r3, [r7, #12]
 80194aa:	2b00      	cmp	r3, #0
 80194ac:	d001      	beq.n	80194b2 <tcp_parseopt+0x8a>
 80194ae:	89ba      	ldrh	r2, [r7, #12]
 80194b0:	e001      	b.n	80194b6 <tcp_parseopt+0x8e>
 80194b2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80194b6:	687b      	ldr	r3, [r7, #4]
 80194b8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80194ba:	e012      	b.n	80194e2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80194bc:	f7ff ff7e 	bl	80193bc <tcp_get_next_optbyte>
 80194c0:	4603      	mov	r3, r0
 80194c2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80194c4:	7afb      	ldrb	r3, [r7, #11]
 80194c6:	2b01      	cmp	r3, #1
 80194c8:	d916      	bls.n	80194f8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80194ca:	7afb      	ldrb	r3, [r7, #11]
 80194cc:	b29a      	uxth	r2, r3
 80194ce:	4b10      	ldr	r3, [pc, #64]	@ (8019510 <tcp_parseopt+0xe8>)
 80194d0:	881b      	ldrh	r3, [r3, #0]
 80194d2:	4413      	add	r3, r2
 80194d4:	b29b      	uxth	r3, r3
 80194d6:	3b02      	subs	r3, #2
 80194d8:	b29a      	uxth	r2, r3
 80194da:	4b0d      	ldr	r3, [pc, #52]	@ (8019510 <tcp_parseopt+0xe8>)
 80194dc:	801a      	strh	r2, [r3, #0]
 80194de:	e000      	b.n	80194e2 <tcp_parseopt+0xba>
          break;
 80194e0:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80194e2:	4b0b      	ldr	r3, [pc, #44]	@ (8019510 <tcp_parseopt+0xe8>)
 80194e4:	881a      	ldrh	r2, [r3, #0]
 80194e6:	4b09      	ldr	r3, [pc, #36]	@ (801950c <tcp_parseopt+0xe4>)
 80194e8:	881b      	ldrh	r3, [r3, #0]
 80194ea:	429a      	cmp	r2, r3
 80194ec:	d3b2      	bcc.n	8019454 <tcp_parseopt+0x2c>
 80194ee:	e004      	b.n	80194fa <tcp_parseopt+0xd2>
          return;
 80194f0:	bf00      	nop
 80194f2:	e002      	b.n	80194fa <tcp_parseopt+0xd2>
            return;
 80194f4:	bf00      	nop
 80194f6:	e000      	b.n	80194fa <tcp_parseopt+0xd2>
            return;
 80194f8:	bf00      	nop
      }
    }
  }
}
 80194fa:	3710      	adds	r7, #16
 80194fc:	46bd      	mov	sp, r7
 80194fe:	bd80      	pop	{r7, pc}
 8019500:	080230b0 	.word	0x080230b0
 8019504:	08023514 	.word	0x08023514
 8019508:	080230fc 	.word	0x080230fc
 801950c:	200253d4 	.word	0x200253d4
 8019510:	200253dc 	.word	0x200253dc

08019514 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019514:	b480      	push	{r7}
 8019516:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019518:	4b05      	ldr	r3, [pc, #20]	@ (8019530 <tcp_trigger_input_pcb_close+0x1c>)
 801951a:	781b      	ldrb	r3, [r3, #0]
 801951c:	f043 0310 	orr.w	r3, r3, #16
 8019520:	b2da      	uxtb	r2, r3
 8019522:	4b03      	ldr	r3, [pc, #12]	@ (8019530 <tcp_trigger_input_pcb_close+0x1c>)
 8019524:	701a      	strb	r2, [r3, #0]
}
 8019526:	bf00      	nop
 8019528:	46bd      	mov	sp, r7
 801952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952e:	4770      	bx	lr
 8019530:	200253ed 	.word	0x200253ed

08019534 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019534:	b580      	push	{r7, lr}
 8019536:	b084      	sub	sp, #16
 8019538:	af00      	add	r7, sp, #0
 801953a:	60f8      	str	r0, [r7, #12]
 801953c:	60b9      	str	r1, [r7, #8]
 801953e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019540:	68fb      	ldr	r3, [r7, #12]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d00a      	beq.n	801955c <tcp_route+0x28>
 8019546:	68fb      	ldr	r3, [r7, #12]
 8019548:	7a1b      	ldrb	r3, [r3, #8]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d006      	beq.n	801955c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801954e:	68fb      	ldr	r3, [r7, #12]
 8019550:	7a1b      	ldrb	r3, [r3, #8]
 8019552:	4618      	mov	r0, r3
 8019554:	f7fb f872 	bl	801463c <netif_get_by_index>
 8019558:	4603      	mov	r3, r0
 801955a:	e003      	b.n	8019564 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801955c:	6878      	ldr	r0, [r7, #4]
 801955e:	f003 ff4d 	bl	801d3fc <ip4_route>
 8019562:	4603      	mov	r3, r0
  }
}
 8019564:	4618      	mov	r0, r3
 8019566:	3710      	adds	r7, #16
 8019568:	46bd      	mov	sp, r7
 801956a:	bd80      	pop	{r7, pc}

0801956c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801956c:	b590      	push	{r4, r7, lr}
 801956e:	b087      	sub	sp, #28
 8019570:	af00      	add	r7, sp, #0
 8019572:	60f8      	str	r0, [r7, #12]
 8019574:	60b9      	str	r1, [r7, #8]
 8019576:	603b      	str	r3, [r7, #0]
 8019578:	4613      	mov	r3, r2
 801957a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	2b00      	cmp	r3, #0
 8019580:	d105      	bne.n	801958e <tcp_create_segment+0x22>
 8019582:	4b47      	ldr	r3, [pc, #284]	@ (80196a0 <tcp_create_segment+0x134>)
 8019584:	22a3      	movs	r2, #163	@ 0xa3
 8019586:	4947      	ldr	r1, [pc, #284]	@ (80196a4 <tcp_create_segment+0x138>)
 8019588:	4847      	ldr	r0, [pc, #284]	@ (80196a8 <tcp_create_segment+0x13c>)
 801958a:	f006 fe87 	bl	802029c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801958e:	68bb      	ldr	r3, [r7, #8]
 8019590:	2b00      	cmp	r3, #0
 8019592:	d105      	bne.n	80195a0 <tcp_create_segment+0x34>
 8019594:	4b42      	ldr	r3, [pc, #264]	@ (80196a0 <tcp_create_segment+0x134>)
 8019596:	22a4      	movs	r2, #164	@ 0xa4
 8019598:	4944      	ldr	r1, [pc, #272]	@ (80196ac <tcp_create_segment+0x140>)
 801959a:	4843      	ldr	r0, [pc, #268]	@ (80196a8 <tcp_create_segment+0x13c>)
 801959c:	f006 fe7e 	bl	802029c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80195a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80195a4:	009b      	lsls	r3, r3, #2
 80195a6:	b2db      	uxtb	r3, r3
 80195a8:	f003 0304 	and.w	r3, r3, #4
 80195ac:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80195ae:	2003      	movs	r0, #3
 80195b0:	f7fa fcb2 	bl	8013f18 <memp_malloc>
 80195b4:	6138      	str	r0, [r7, #16]
 80195b6:	693b      	ldr	r3, [r7, #16]
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	d104      	bne.n	80195c6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80195bc:	68b8      	ldr	r0, [r7, #8]
 80195be:	f7fb fbcb 	bl	8014d58 <pbuf_free>
    return NULL;
 80195c2:	2300      	movs	r3, #0
 80195c4:	e068      	b.n	8019698 <tcp_create_segment+0x12c>
  }
  seg->flags = optflags;
 80195c6:	693b      	ldr	r3, [r7, #16]
 80195c8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80195cc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	2200      	movs	r2, #0
 80195d2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80195d4:	693b      	ldr	r3, [r7, #16]
 80195d6:	68ba      	ldr	r2, [r7, #8]
 80195d8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80195da:	68bb      	ldr	r3, [r7, #8]
 80195dc:	891a      	ldrh	r2, [r3, #8]
 80195de:	7dfb      	ldrb	r3, [r7, #23]
 80195e0:	b29b      	uxth	r3, r3
 80195e2:	429a      	cmp	r2, r3
 80195e4:	d205      	bcs.n	80195f2 <tcp_create_segment+0x86>
 80195e6:	4b2e      	ldr	r3, [pc, #184]	@ (80196a0 <tcp_create_segment+0x134>)
 80195e8:	22b0      	movs	r2, #176	@ 0xb0
 80195ea:	4931      	ldr	r1, [pc, #196]	@ (80196b0 <tcp_create_segment+0x144>)
 80195ec:	482e      	ldr	r0, [pc, #184]	@ (80196a8 <tcp_create_segment+0x13c>)
 80195ee:	f006 fe55 	bl	802029c <iprintf>
  seg->len = p->tot_len - optlen;
 80195f2:	68bb      	ldr	r3, [r7, #8]
 80195f4:	891a      	ldrh	r2, [r3, #8]
 80195f6:	7dfb      	ldrb	r3, [r7, #23]
 80195f8:	b29b      	uxth	r3, r3
 80195fa:	1ad3      	subs	r3, r2, r3
 80195fc:	b29a      	uxth	r2, r3
 80195fe:	693b      	ldr	r3, [r7, #16]
 8019600:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019602:	2114      	movs	r1, #20
 8019604:	68b8      	ldr	r0, [r7, #8]
 8019606:	f7fb fb11 	bl	8014c2c <pbuf_add_header>
 801960a:	4603      	mov	r3, r0
 801960c:	2b00      	cmp	r3, #0
 801960e:	d00c      	beq.n	801962a <tcp_create_segment+0xbe>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8019610:	4b28      	ldr	r3, [pc, #160]	@ (80196b4 <tcp_create_segment+0x148>)
 8019612:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8019616:	3301      	adds	r3, #1
 8019618:	b29a      	uxth	r2, r3
 801961a:	4b26      	ldr	r3, [pc, #152]	@ (80196b4 <tcp_create_segment+0x148>)
 801961c:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 8019620:	6938      	ldr	r0, [r7, #16]
 8019622:	f7fc ff6c 	bl	80164fe <tcp_seg_free>
    return NULL;
 8019626:	2300      	movs	r3, #0
 8019628:	e036      	b.n	8019698 <tcp_create_segment+0x12c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801962a:	693b      	ldr	r3, [r7, #16]
 801962c:	685b      	ldr	r3, [r3, #4]
 801962e:	685a      	ldr	r2, [r3, #4]
 8019630:	693b      	ldr	r3, [r7, #16]
 8019632:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	8ada      	ldrh	r2, [r3, #22]
 8019638:	693b      	ldr	r3, [r7, #16]
 801963a:	68dc      	ldr	r4, [r3, #12]
 801963c:	4610      	mov	r0, r2
 801963e:	f7f9 fecd 	bl	80133dc <lwip_htons>
 8019642:	4603      	mov	r3, r0
 8019644:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	8b1a      	ldrh	r2, [r3, #24]
 801964a:	693b      	ldr	r3, [r7, #16]
 801964c:	68dc      	ldr	r4, [r3, #12]
 801964e:	4610      	mov	r0, r2
 8019650:	f7f9 fec4 	bl	80133dc <lwip_htons>
 8019654:	4603      	mov	r3, r0
 8019656:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019658:	693b      	ldr	r3, [r7, #16]
 801965a:	68dc      	ldr	r4, [r3, #12]
 801965c:	6838      	ldr	r0, [r7, #0]
 801965e:	f7f9 fed3 	bl	8013408 <lwip_htonl>
 8019662:	4603      	mov	r3, r0
 8019664:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019666:	7dfb      	ldrb	r3, [r7, #23]
 8019668:	089b      	lsrs	r3, r3, #2
 801966a:	b2db      	uxtb	r3, r3
 801966c:	3305      	adds	r3, #5
 801966e:	b29b      	uxth	r3, r3
 8019670:	031b      	lsls	r3, r3, #12
 8019672:	b29a      	uxth	r2, r3
 8019674:	79fb      	ldrb	r3, [r7, #7]
 8019676:	b29b      	uxth	r3, r3
 8019678:	4313      	orrs	r3, r2
 801967a:	b29a      	uxth	r2, r3
 801967c:	693b      	ldr	r3, [r7, #16]
 801967e:	68dc      	ldr	r4, [r3, #12]
 8019680:	4610      	mov	r0, r2
 8019682:	f7f9 feab 	bl	80133dc <lwip_htons>
 8019686:	4603      	mov	r3, r0
 8019688:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801968a:	693b      	ldr	r3, [r7, #16]
 801968c:	68db      	ldr	r3, [r3, #12]
 801968e:	2200      	movs	r2, #0
 8019690:	749a      	strb	r2, [r3, #18]
 8019692:	2200      	movs	r2, #0
 8019694:	74da      	strb	r2, [r3, #19]
  return seg;
 8019696:	693b      	ldr	r3, [r7, #16]
}
 8019698:	4618      	mov	r0, r3
 801969a:	371c      	adds	r7, #28
 801969c:	46bd      	mov	sp, r7
 801969e:	bd90      	pop	{r4, r7, pc}
 80196a0:	08023530 	.word	0x08023530
 80196a4:	08023564 	.word	0x08023564
 80196a8:	08023584 	.word	0x08023584
 80196ac:	080235ac 	.word	0x080235ac
 80196b0:	080235d0 	.word	0x080235d0
 80196b4:	200252ac 	.word	0x200252ac

080196b8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b086      	sub	sp, #24
 80196bc:	af00      	add	r7, sp, #0
 80196be:	607b      	str	r3, [r7, #4]
 80196c0:	4603      	mov	r3, r0
 80196c2:	73fb      	strb	r3, [r7, #15]
 80196c4:	460b      	mov	r3, r1
 80196c6:	81bb      	strh	r3, [r7, #12]
 80196c8:	4613      	mov	r3, r2
 80196ca:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80196cc:	89bb      	ldrh	r3, [r7, #12]
 80196ce:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d105      	bne.n	80196e2 <tcp_pbuf_prealloc+0x2a>
 80196d6:	4b30      	ldr	r3, [pc, #192]	@ (8019798 <tcp_pbuf_prealloc+0xe0>)
 80196d8:	22e8      	movs	r2, #232	@ 0xe8
 80196da:	4930      	ldr	r1, [pc, #192]	@ (801979c <tcp_pbuf_prealloc+0xe4>)
 80196dc:	4830      	ldr	r0, [pc, #192]	@ (80197a0 <tcp_pbuf_prealloc+0xe8>)
 80196de:	f006 fddd 	bl	802029c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80196e2:	6a3b      	ldr	r3, [r7, #32]
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d105      	bne.n	80196f4 <tcp_pbuf_prealloc+0x3c>
 80196e8:	4b2b      	ldr	r3, [pc, #172]	@ (8019798 <tcp_pbuf_prealloc+0xe0>)
 80196ea:	22e9      	movs	r2, #233	@ 0xe9
 80196ec:	492d      	ldr	r1, [pc, #180]	@ (80197a4 <tcp_pbuf_prealloc+0xec>)
 80196ee:	482c      	ldr	r0, [pc, #176]	@ (80197a0 <tcp_pbuf_prealloc+0xe8>)
 80196f0:	f006 fdd4 	bl	802029c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80196f4:	89ba      	ldrh	r2, [r7, #12]
 80196f6:	897b      	ldrh	r3, [r7, #10]
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d221      	bcs.n	8019740 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80196fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019700:	f003 0302 	and.w	r3, r3, #2
 8019704:	2b00      	cmp	r3, #0
 8019706:	d111      	bne.n	801972c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019708:	6a3b      	ldr	r3, [r7, #32]
 801970a:	8b5b      	ldrh	r3, [r3, #26]
 801970c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019710:	2b00      	cmp	r3, #0
 8019712:	d115      	bne.n	8019740 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019714:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019718:	2b00      	cmp	r3, #0
 801971a:	d007      	beq.n	801972c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801971c:	6a3b      	ldr	r3, [r7, #32]
 801971e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019720:	2b00      	cmp	r3, #0
 8019722:	d103      	bne.n	801972c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019724:	6a3b      	ldr	r3, [r7, #32]
 8019726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8019728:	2b00      	cmp	r3, #0
 801972a:	d009      	beq.n	8019740 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801972c:	89bb      	ldrh	r3, [r7, #12]
 801972e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019732:	f023 0203 	bic.w	r2, r3, #3
 8019736:	897b      	ldrh	r3, [r7, #10]
 8019738:	4293      	cmp	r3, r2
 801973a:	bf28      	it	cs
 801973c:	4613      	movcs	r3, r2
 801973e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019740:	8af9      	ldrh	r1, [r7, #22]
 8019742:	7bfb      	ldrb	r3, [r7, #15]
 8019744:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019748:	4618      	mov	r0, r3
 801974a:	f7fb f821 	bl	8014790 <pbuf_alloc>
 801974e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019750:	693b      	ldr	r3, [r7, #16]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d101      	bne.n	801975a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019756:	2300      	movs	r3, #0
 8019758:	e019      	b.n	801978e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801975a:	693b      	ldr	r3, [r7, #16]
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	2b00      	cmp	r3, #0
 8019760:	d006      	beq.n	8019770 <tcp_pbuf_prealloc+0xb8>
 8019762:	4b0d      	ldr	r3, [pc, #52]	@ (8019798 <tcp_pbuf_prealloc+0xe0>)
 8019764:	f240 120b 	movw	r2, #267	@ 0x10b
 8019768:	490f      	ldr	r1, [pc, #60]	@ (80197a8 <tcp_pbuf_prealloc+0xf0>)
 801976a:	480d      	ldr	r0, [pc, #52]	@ (80197a0 <tcp_pbuf_prealloc+0xe8>)
 801976c:	f006 fd96 	bl	802029c <iprintf>
  *oversize = p->len - length;
 8019770:	693b      	ldr	r3, [r7, #16]
 8019772:	895a      	ldrh	r2, [r3, #10]
 8019774:	89bb      	ldrh	r3, [r7, #12]
 8019776:	1ad3      	subs	r3, r2, r3
 8019778:	b29a      	uxth	r2, r3
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801977e:	693b      	ldr	r3, [r7, #16]
 8019780:	89ba      	ldrh	r2, [r7, #12]
 8019782:	811a      	strh	r2, [r3, #8]
 8019784:	693b      	ldr	r3, [r7, #16]
 8019786:	891a      	ldrh	r2, [r3, #8]
 8019788:	693b      	ldr	r3, [r7, #16]
 801978a:	815a      	strh	r2, [r3, #10]
  return p;
 801978c:	693b      	ldr	r3, [r7, #16]
}
 801978e:	4618      	mov	r0, r3
 8019790:	3718      	adds	r7, #24
 8019792:	46bd      	mov	sp, r7
 8019794:	bd80      	pop	{r7, pc}
 8019796:	bf00      	nop
 8019798:	08023530 	.word	0x08023530
 801979c:	080235e8 	.word	0x080235e8
 80197a0:	08023584 	.word	0x08023584
 80197a4:	0802360c 	.word	0x0802360c
 80197a8:	0802362c 	.word	0x0802362c

080197ac <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b082      	sub	sp, #8
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	6078      	str	r0, [r7, #4]
 80197b4:	460b      	mov	r3, r1
 80197b6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d106      	bne.n	80197cc <tcp_write_checks+0x20>
 80197be:	4b37      	ldr	r3, [pc, #220]	@ (801989c <tcp_write_checks+0xf0>)
 80197c0:	f240 1233 	movw	r2, #307	@ 0x133
 80197c4:	4936      	ldr	r1, [pc, #216]	@ (80198a0 <tcp_write_checks+0xf4>)
 80197c6:	4837      	ldr	r0, [pc, #220]	@ (80198a4 <tcp_write_checks+0xf8>)
 80197c8:	f006 fd68 	bl	802029c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	7d1b      	ldrb	r3, [r3, #20]
 80197d0:	2b04      	cmp	r3, #4
 80197d2:	d00e      	beq.n	80197f2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80197d8:	2b07      	cmp	r3, #7
 80197da:	d00a      	beq.n	80197f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80197e0:	2b02      	cmp	r3, #2
 80197e2:	d006      	beq.n	80197f2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80197e8:	2b03      	cmp	r3, #3
 80197ea:	d002      	beq.n	80197f2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80197ec:	f06f 030a 	mvn.w	r3, #10
 80197f0:	e050      	b.n	8019894 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 80197f2:	887b      	ldrh	r3, [r7, #2]
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d101      	bne.n	80197fc <tcp_write_checks+0x50>
    return ERR_OK;
 80197f8:	2300      	movs	r3, #0
 80197fa:	e04b      	b.n	8019894 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019802:	887a      	ldrh	r2, [r7, #2]
 8019804:	429a      	cmp	r2, r3
 8019806:	d909      	bls.n	801981c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019808:	687b      	ldr	r3, [r7, #4]
 801980a:	8b5b      	ldrh	r3, [r3, #26]
 801980c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019810:	b29a      	uxth	r2, r3
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019816:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801981a:	e03b      	b.n	8019894 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019822:	2b08      	cmp	r3, #8
 8019824:	d911      	bls.n	801984a <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8019826:	4b20      	ldr	r3, [pc, #128]	@ (80198a8 <tcp_write_checks+0xfc>)
 8019828:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801982c:	3301      	adds	r3, #1
 801982e:	b29a      	uxth	r2, r3
 8019830:	4b1d      	ldr	r3, [pc, #116]	@ (80198a8 <tcp_write_checks+0xfc>)
 8019832:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	8b5b      	ldrh	r3, [r3, #26]
 801983a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801983e:	b29a      	uxth	r2, r3
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019844:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019848:	e024      	b.n	8019894 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019850:	2b00      	cmp	r3, #0
 8019852:	d00f      	beq.n	8019874 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019858:	2b00      	cmp	r3, #0
 801985a:	d11a      	bne.n	8019892 <tcp_write_checks+0xe6>
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019860:	2b00      	cmp	r3, #0
 8019862:	d116      	bne.n	8019892 <tcp_write_checks+0xe6>
 8019864:	4b0d      	ldr	r3, [pc, #52]	@ (801989c <tcp_write_checks+0xf0>)
 8019866:	f240 1255 	movw	r2, #341	@ 0x155
 801986a:	4910      	ldr	r1, [pc, #64]	@ (80198ac <tcp_write_checks+0x100>)
 801986c:	480d      	ldr	r0, [pc, #52]	@ (80198a4 <tcp_write_checks+0xf8>)
 801986e:	f006 fd15 	bl	802029c <iprintf>
 8019872:	e00e      	b.n	8019892 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019878:	2b00      	cmp	r3, #0
 801987a:	d103      	bne.n	8019884 <tcp_write_checks+0xd8>
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019880:	2b00      	cmp	r3, #0
 8019882:	d006      	beq.n	8019892 <tcp_write_checks+0xe6>
 8019884:	4b05      	ldr	r3, [pc, #20]	@ (801989c <tcp_write_checks+0xf0>)
 8019886:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801988a:	4909      	ldr	r1, [pc, #36]	@ (80198b0 <tcp_write_checks+0x104>)
 801988c:	4805      	ldr	r0, [pc, #20]	@ (80198a4 <tcp_write_checks+0xf8>)
 801988e:	f006 fd05 	bl	802029c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019892:	2300      	movs	r3, #0
}
 8019894:	4618      	mov	r0, r3
 8019896:	3708      	adds	r7, #8
 8019898:	46bd      	mov	sp, r7
 801989a:	bd80      	pop	{r7, pc}
 801989c:	08023530 	.word	0x08023530
 80198a0:	08023640 	.word	0x08023640
 80198a4:	08023584 	.word	0x08023584
 80198a8:	200252ac 	.word	0x200252ac
 80198ac:	08023660 	.word	0x08023660
 80198b0:	0802369c 	.word	0x0802369c

080198b4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80198b4:	b590      	push	{r4, r7, lr}
 80198b6:	b09b      	sub	sp, #108	@ 0x6c
 80198b8:	af04      	add	r7, sp, #16
 80198ba:	60f8      	str	r0, [r7, #12]
 80198bc:	60b9      	str	r1, [r7, #8]
 80198be:	4611      	mov	r1, r2
 80198c0:	461a      	mov	r2, r3
 80198c2:	460b      	mov	r3, r1
 80198c4:	80fb      	strh	r3, [r7, #6]
 80198c6:	4613      	mov	r3, r2
 80198c8:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80198ca:	2300      	movs	r3, #0
 80198cc:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80198ce:	2300      	movs	r3, #0
 80198d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80198d2:	2300      	movs	r3, #0
 80198d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80198d6:	2300      	movs	r3, #0
 80198d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80198da:	2300      	movs	r3, #0
 80198dc:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80198de:	2300      	movs	r3, #0
 80198e0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80198e4:	2300      	movs	r3, #0
 80198e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80198ea:	2300      	movs	r3, #0
 80198ec:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80198ee:	2300      	movs	r3, #0
 80198f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80198f2:	2300      	movs	r3, #0
 80198f4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d109      	bne.n	8019910 <tcp_write+0x5c>
 80198fc:	4ba4      	ldr	r3, [pc, #656]	@ (8019b90 <tcp_write+0x2dc>)
 80198fe:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8019902:	49a4      	ldr	r1, [pc, #656]	@ (8019b94 <tcp_write+0x2e0>)
 8019904:	48a4      	ldr	r0, [pc, #656]	@ (8019b98 <tcp_write+0x2e4>)
 8019906:	f006 fcc9 	bl	802029c <iprintf>
 801990a:	f06f 030f 	mvn.w	r3, #15
 801990e:	e332      	b.n	8019f76 <tcp_write+0x6c2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019910:	68fb      	ldr	r3, [r7, #12]
 8019912:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019916:	085b      	lsrs	r3, r3, #1
 8019918:	b29a      	uxth	r2, r3
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801991e:	4293      	cmp	r3, r2
 8019920:	bf28      	it	cs
 8019922:	4613      	movcs	r3, r2
 8019924:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8019926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019928:	2b00      	cmp	r3, #0
 801992a:	d102      	bne.n	8019932 <tcp_write+0x7e>
 801992c:	68fb      	ldr	r3, [r7, #12]
 801992e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019930:	e000      	b.n	8019934 <tcp_write+0x80>
 8019932:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8019934:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019936:	68bb      	ldr	r3, [r7, #8]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d109      	bne.n	8019950 <tcp_write+0x9c>
 801993c:	4b94      	ldr	r3, [pc, #592]	@ (8019b90 <tcp_write+0x2dc>)
 801993e:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8019942:	4996      	ldr	r1, [pc, #600]	@ (8019b9c <tcp_write+0x2e8>)
 8019944:	4894      	ldr	r0, [pc, #592]	@ (8019b98 <tcp_write+0x2e4>)
 8019946:	f006 fca9 	bl	802029c <iprintf>
 801994a:	f06f 030f 	mvn.w	r3, #15
 801994e:	e312      	b.n	8019f76 <tcp_write+0x6c2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019950:	88fb      	ldrh	r3, [r7, #6]
 8019952:	4619      	mov	r1, r3
 8019954:	68f8      	ldr	r0, [r7, #12]
 8019956:	f7ff ff29 	bl	80197ac <tcp_write_checks>
 801995a:	4603      	mov	r3, r0
 801995c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8019960:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8019964:	2b00      	cmp	r3, #0
 8019966:	d002      	beq.n	801996e <tcp_write+0xba>
    return err;
 8019968:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801996c:	e303      	b.n	8019f76 <tcp_write+0x6c2>
  }
  queuelen = pcb->snd_queuelen;
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019974:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019978:	2300      	movs	r3, #0
 801997a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019982:	2b00      	cmp	r3, #0
 8019984:	f000 80f6 	beq.w	8019b74 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801998c:	653b      	str	r3, [r7, #80]	@ 0x50
 801998e:	e002      	b.n	8019996 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8019990:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	2b00      	cmp	r3, #0
 801999c:	d1f8      	bne.n	8019990 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801999e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80199a0:	7a9b      	ldrb	r3, [r3, #10]
 80199a2:	009b      	lsls	r3, r3, #2
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	f003 0304 	and.w	r3, r3, #4
 80199aa:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80199ac:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80199ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80199b0:	891b      	ldrh	r3, [r3, #8]
 80199b2:	4619      	mov	r1, r3
 80199b4:	8c3b      	ldrh	r3, [r7, #32]
 80199b6:	440b      	add	r3, r1
 80199b8:	429a      	cmp	r2, r3
 80199ba:	da06      	bge.n	80199ca <tcp_write+0x116>
 80199bc:	4b74      	ldr	r3, [pc, #464]	@ (8019b90 <tcp_write+0x2dc>)
 80199be:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80199c2:	4977      	ldr	r1, [pc, #476]	@ (8019ba0 <tcp_write+0x2ec>)
 80199c4:	4874      	ldr	r0, [pc, #464]	@ (8019b98 <tcp_write+0x2e4>)
 80199c6:	f006 fc69 	bl	802029c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80199ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80199cc:	891a      	ldrh	r2, [r3, #8]
 80199ce:	8c3b      	ldrh	r3, [r7, #32]
 80199d0:	4413      	add	r3, r2
 80199d2:	b29b      	uxth	r3, r3
 80199d4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80199d6:	1ad3      	subs	r3, r2, r3
 80199d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80199e0:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80199e2:	8a7b      	ldrh	r3, [r7, #18]
 80199e4:	2b00      	cmp	r3, #0
 80199e6:	d026      	beq.n	8019a36 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80199e8:	8a7b      	ldrh	r3, [r7, #18]
 80199ea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d206      	bcs.n	80199fe <tcp_write+0x14a>
 80199f0:	4b67      	ldr	r3, [pc, #412]	@ (8019b90 <tcp_write+0x2dc>)
 80199f2:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80199f6:	496b      	ldr	r1, [pc, #428]	@ (8019ba4 <tcp_write+0x2f0>)
 80199f8:	4867      	ldr	r0, [pc, #412]	@ (8019b98 <tcp_write+0x2e4>)
 80199fa:	f006 fc4f 	bl	802029c <iprintf>
      seg = last_unsent;
 80199fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a00:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019a02:	8a7b      	ldrh	r3, [r7, #18]
 8019a04:	88fa      	ldrh	r2, [r7, #6]
 8019a06:	4293      	cmp	r3, r2
 8019a08:	bf28      	it	cs
 8019a0a:	4613      	movcs	r3, r2
 8019a0c:	b29b      	uxth	r3, r3
 8019a0e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019a10:	4293      	cmp	r3, r2
 8019a12:	bf28      	it	cs
 8019a14:	4613      	movcs	r3, r2
 8019a16:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8019a18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019a1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019a1e:	4413      	add	r3, r2
 8019a20:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8019a24:	8a7a      	ldrh	r2, [r7, #18]
 8019a26:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019a28:	1ad3      	subs	r3, r2, r3
 8019a2a:	b29b      	uxth	r3, r3
 8019a2c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8019a2e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019a30:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019a32:	1ad3      	subs	r3, r2, r3
 8019a34:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8019a36:	8a7b      	ldrh	r3, [r7, #18]
 8019a38:	2b00      	cmp	r3, #0
 8019a3a:	d00b      	beq.n	8019a54 <tcp_write+0x1a0>
 8019a3c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019a40:	88fb      	ldrh	r3, [r7, #6]
 8019a42:	429a      	cmp	r2, r3
 8019a44:	d006      	beq.n	8019a54 <tcp_write+0x1a0>
 8019a46:	4b52      	ldr	r3, [pc, #328]	@ (8019b90 <tcp_write+0x2dc>)
 8019a48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8019a4c:	4956      	ldr	r1, [pc, #344]	@ (8019ba8 <tcp_write+0x2f4>)
 8019a4e:	4852      	ldr	r0, [pc, #328]	@ (8019b98 <tcp_write+0x2e4>)
 8019a50:	f006 fc24 	bl	802029c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019a54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019a58:	88fb      	ldrh	r3, [r7, #6]
 8019a5a:	429a      	cmp	r2, r3
 8019a5c:	f080 8167 	bcs.w	8019d2e <tcp_write+0x47a>
 8019a60:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	f000 8163 	beq.w	8019d2e <tcp_write+0x47a>
 8019a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a6a:	891b      	ldrh	r3, [r3, #8]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	f000 815e 	beq.w	8019d2e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019a72:	88fa      	ldrh	r2, [r7, #6]
 8019a74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019a78:	1ad2      	subs	r2, r2, r3
 8019a7a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019a7c:	4293      	cmp	r3, r2
 8019a7e:	bfa8      	it	ge
 8019a80:	4613      	movge	r3, r2
 8019a82:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8019a84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019a86:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019a88:	797b      	ldrb	r3, [r7, #5]
 8019a8a:	f003 0301 	and.w	r3, r3, #1
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d027      	beq.n	8019ae2 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8019a92:	f107 0012 	add.w	r0, r7, #18
 8019a96:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019a98:	8bf9      	ldrh	r1, [r7, #30]
 8019a9a:	2301      	movs	r3, #1
 8019a9c:	9302      	str	r3, [sp, #8]
 8019a9e:	797b      	ldrb	r3, [r7, #5]
 8019aa0:	9301      	str	r3, [sp, #4]
 8019aa2:	68fb      	ldr	r3, [r7, #12]
 8019aa4:	9300      	str	r3, [sp, #0]
 8019aa6:	4603      	mov	r3, r0
 8019aa8:	2000      	movs	r0, #0
 8019aaa:	f7ff fe05 	bl	80196b8 <tcp_pbuf_prealloc>
 8019aae:	6578      	str	r0, [r7, #84]	@ 0x54
 8019ab0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	f000 8225 	beq.w	8019f02 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8019ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019aba:	6858      	ldr	r0, [r3, #4]
 8019abc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019ac0:	68ba      	ldr	r2, [r7, #8]
 8019ac2:	4413      	add	r3, r2
 8019ac4:	8bfa      	ldrh	r2, [r7, #30]
 8019ac6:	4619      	mov	r1, r3
 8019ac8:	f006 fe13 	bl	80206f2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8019acc:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019ace:	f7fb f9d1 	bl	8014e74 <pbuf_clen>
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	461a      	mov	r2, r3
 8019ad6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019ada:	4413      	add	r3, r2
 8019adc:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8019ae0:	e041      	b.n	8019b66 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019ae4:	685b      	ldr	r3, [r3, #4]
 8019ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8019ae8:	e002      	b.n	8019af0 <tcp_write+0x23c>
 8019aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	637b      	str	r3, [r7, #52]	@ 0x34
 8019af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d1f8      	bne.n	8019aea <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019afa:	7b1b      	ldrb	r3, [r3, #12]
 8019afc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8019b00:	2b00      	cmp	r3, #0
 8019b02:	d115      	bne.n	8019b30 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019b06:	685b      	ldr	r3, [r3, #4]
 8019b08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019b0a:	8952      	ldrh	r2, [r2, #10]
 8019b0c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019b0e:	68ba      	ldr	r2, [r7, #8]
 8019b10:	429a      	cmp	r2, r3
 8019b12:	d10d      	bne.n	8019b30 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019b14:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019b18:	2b00      	cmp	r3, #0
 8019b1a:	d006      	beq.n	8019b2a <tcp_write+0x276>
 8019b1c:	4b1c      	ldr	r3, [pc, #112]	@ (8019b90 <tcp_write+0x2dc>)
 8019b1e:	f240 2231 	movw	r2, #561	@ 0x231
 8019b22:	4922      	ldr	r1, [pc, #136]	@ (8019bac <tcp_write+0x2f8>)
 8019b24:	481c      	ldr	r0, [pc, #112]	@ (8019b98 <tcp_write+0x2e4>)
 8019b26:	f006 fbb9 	bl	802029c <iprintf>
          extendlen = seglen;
 8019b2a:	8bfb      	ldrh	r3, [r7, #30]
 8019b2c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8019b2e:	e01a      	b.n	8019b66 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019b30:	8bfb      	ldrh	r3, [r7, #30]
 8019b32:	2201      	movs	r2, #1
 8019b34:	4619      	mov	r1, r3
 8019b36:	2000      	movs	r0, #0
 8019b38:	f7fa fe2a 	bl	8014790 <pbuf_alloc>
 8019b3c:	6578      	str	r0, [r7, #84]	@ 0x54
 8019b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	f000 81e0 	beq.w	8019f06 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8019b46:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019b4a:	68ba      	ldr	r2, [r7, #8]
 8019b4c:	441a      	add	r2, r3
 8019b4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019b50:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019b52:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019b54:	f7fb f98e 	bl	8014e74 <pbuf_clen>
 8019b58:	4603      	mov	r3, r0
 8019b5a:	461a      	mov	r2, r3
 8019b5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019b60:	4413      	add	r3, r2
 8019b62:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8019b66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019b6a:	8bfb      	ldrh	r3, [r7, #30]
 8019b6c:	4413      	add	r3, r2
 8019b6e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8019b72:	e0dc      	b.n	8019d2e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019b74:	68fb      	ldr	r3, [r7, #12]
 8019b76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	f000 80d7 	beq.w	8019d2e <tcp_write+0x47a>
 8019b80:	4b03      	ldr	r3, [pc, #12]	@ (8019b90 <tcp_write+0x2dc>)
 8019b82:	f240 224a 	movw	r2, #586	@ 0x24a
 8019b86:	490a      	ldr	r1, [pc, #40]	@ (8019bb0 <tcp_write+0x2fc>)
 8019b88:	4803      	ldr	r0, [pc, #12]	@ (8019b98 <tcp_write+0x2e4>)
 8019b8a:	f006 fb87 	bl	802029c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019b8e:	e0ce      	b.n	8019d2e <tcp_write+0x47a>
 8019b90:	08023530 	.word	0x08023530
 8019b94:	080236d0 	.word	0x080236d0
 8019b98:	08023584 	.word	0x08023584
 8019b9c:	080236e8 	.word	0x080236e8
 8019ba0:	0802371c 	.word	0x0802371c
 8019ba4:	08023734 	.word	0x08023734
 8019ba8:	08023754 	.word	0x08023754
 8019bac:	08023774 	.word	0x08023774
 8019bb0:	080237a0 	.word	0x080237a0
    struct pbuf *p;
    u16_t left = len - pos;
 8019bb4:	88fa      	ldrh	r2, [r7, #6]
 8019bb6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019bba:	1ad3      	subs	r3, r2, r3
 8019bbc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019bbe:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019bc2:	b29b      	uxth	r3, r3
 8019bc4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019bc6:	1ad3      	subs	r3, r2, r3
 8019bc8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019bca:	8b7a      	ldrh	r2, [r7, #26]
 8019bcc:	8bbb      	ldrh	r3, [r7, #28]
 8019bce:	4293      	cmp	r3, r2
 8019bd0:	bf28      	it	cs
 8019bd2:	4613      	movcs	r3, r2
 8019bd4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8019bd6:	797b      	ldrb	r3, [r7, #5]
 8019bd8:	f003 0301 	and.w	r3, r3, #1
 8019bdc:	2b00      	cmp	r3, #0
 8019bde:	d036      	beq.n	8019c4e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019be0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019be4:	b29a      	uxth	r2, r3
 8019be6:	8b3b      	ldrh	r3, [r7, #24]
 8019be8:	4413      	add	r3, r2
 8019bea:	b299      	uxth	r1, r3
 8019bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	bf0c      	ite	eq
 8019bf2:	2301      	moveq	r3, #1
 8019bf4:	2300      	movne	r3, #0
 8019bf6:	b2db      	uxtb	r3, r3
 8019bf8:	f107 0012 	add.w	r0, r7, #18
 8019bfc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8019bfe:	9302      	str	r3, [sp, #8]
 8019c00:	797b      	ldrb	r3, [r7, #5]
 8019c02:	9301      	str	r3, [sp, #4]
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	9300      	str	r3, [sp, #0]
 8019c08:	4603      	mov	r3, r0
 8019c0a:	2036      	movs	r0, #54	@ 0x36
 8019c0c:	f7ff fd54 	bl	80196b8 <tcp_pbuf_prealloc>
 8019c10:	6338      	str	r0, [r7, #48]	@ 0x30
 8019c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	f000 8178 	beq.w	8019f0a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8019c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c1c:	895b      	ldrh	r3, [r3, #10]
 8019c1e:	8b3a      	ldrh	r2, [r7, #24]
 8019c20:	429a      	cmp	r2, r3
 8019c22:	d906      	bls.n	8019c32 <tcp_write+0x37e>
 8019c24:	4b8c      	ldr	r3, [pc, #560]	@ (8019e58 <tcp_write+0x5a4>)
 8019c26:	f240 2266 	movw	r2, #614	@ 0x266
 8019c2a:	498c      	ldr	r1, [pc, #560]	@ (8019e5c <tcp_write+0x5a8>)
 8019c2c:	488c      	ldr	r0, [pc, #560]	@ (8019e60 <tcp_write+0x5ac>)
 8019c2e:	f006 fb35 	bl	802029c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c34:	685a      	ldr	r2, [r3, #4]
 8019c36:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019c3a:	18d0      	adds	r0, r2, r3
 8019c3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019c40:	68ba      	ldr	r2, [r7, #8]
 8019c42:	4413      	add	r3, r2
 8019c44:	8b3a      	ldrh	r2, [r7, #24]
 8019c46:	4619      	mov	r1, r3
 8019c48:	f006 fd53 	bl	80206f2 <memcpy>
 8019c4c:	e02f      	b.n	8019cae <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019c4e:	8a7b      	ldrh	r3, [r7, #18]
 8019c50:	2b00      	cmp	r3, #0
 8019c52:	d006      	beq.n	8019c62 <tcp_write+0x3ae>
 8019c54:	4b80      	ldr	r3, [pc, #512]	@ (8019e58 <tcp_write+0x5a4>)
 8019c56:	f240 2271 	movw	r2, #625	@ 0x271
 8019c5a:	4982      	ldr	r1, [pc, #520]	@ (8019e64 <tcp_write+0x5b0>)
 8019c5c:	4880      	ldr	r0, [pc, #512]	@ (8019e60 <tcp_write+0x5ac>)
 8019c5e:	f006 fb1d 	bl	802029c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019c62:	8b3b      	ldrh	r3, [r7, #24]
 8019c64:	2201      	movs	r2, #1
 8019c66:	4619      	mov	r1, r3
 8019c68:	2036      	movs	r0, #54	@ 0x36
 8019c6a:	f7fa fd91 	bl	8014790 <pbuf_alloc>
 8019c6e:	6178      	str	r0, [r7, #20]
 8019c70:	697b      	ldr	r3, [r7, #20]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	f000 814b 	beq.w	8019f0e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019c78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019c7c:	68ba      	ldr	r2, [r7, #8]
 8019c7e:	441a      	add	r2, r3
 8019c80:	697b      	ldr	r3, [r7, #20]
 8019c82:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019c84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8019c88:	b29b      	uxth	r3, r3
 8019c8a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019c8e:	4619      	mov	r1, r3
 8019c90:	2036      	movs	r0, #54	@ 0x36
 8019c92:	f7fa fd7d 	bl	8014790 <pbuf_alloc>
 8019c96:	6338      	str	r0, [r7, #48]	@ 0x30
 8019c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c9a:	2b00      	cmp	r3, #0
 8019c9c:	d103      	bne.n	8019ca6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019c9e:	6978      	ldr	r0, [r7, #20]
 8019ca0:	f7fb f85a 	bl	8014d58 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8019ca4:	e136      	b.n	8019f14 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8019ca6:	6979      	ldr	r1, [r7, #20]
 8019ca8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019caa:	f7fb f923 	bl	8014ef4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019cae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019cb0:	f7fb f8e0 	bl	8014e74 <pbuf_clen>
 8019cb4:	4603      	mov	r3, r0
 8019cb6:	461a      	mov	r2, r3
 8019cb8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019cbc:	4413      	add	r3, r2
 8019cbe:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8019cc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8019cc6:	2b09      	cmp	r3, #9
 8019cc8:	d903      	bls.n	8019cd2 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019cca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019ccc:	f7fb f844 	bl	8014d58 <pbuf_free>
      goto memerr;
 8019cd0:	e120      	b.n	8019f14 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019cd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019cda:	441a      	add	r2, r3
 8019cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ce0:	9300      	str	r3, [sp, #0]
 8019ce2:	4613      	mov	r3, r2
 8019ce4:	2200      	movs	r2, #0
 8019ce6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019ce8:	68f8      	ldr	r0, [r7, #12]
 8019cea:	f7ff fc3f 	bl	801956c <tcp_create_segment>
 8019cee:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8019cf0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	f000 810d 	beq.w	8019f12 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8019cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019cfa:	2b00      	cmp	r3, #0
 8019cfc:	d102      	bne.n	8019d04 <tcp_write+0x450>
      queue = seg;
 8019cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8019d02:	e00c      	b.n	8019d1e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d106      	bne.n	8019d18 <tcp_write+0x464>
 8019d0a:	4b53      	ldr	r3, [pc, #332]	@ (8019e58 <tcp_write+0x5a4>)
 8019d0c:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8019d10:	4955      	ldr	r1, [pc, #340]	@ (8019e68 <tcp_write+0x5b4>)
 8019d12:	4853      	ldr	r0, [pc, #332]	@ (8019e60 <tcp_write+0x5ac>)
 8019d14:	f006 fac2 	bl	802029c <iprintf>
      prev_seg->next = seg;
 8019d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019d1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8019d1c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019d1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019d20:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019d22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d26:	8b3b      	ldrh	r3, [r7, #24]
 8019d28:	4413      	add	r3, r2
 8019d2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8019d2e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8019d32:	88fb      	ldrh	r3, [r7, #6]
 8019d34:	429a      	cmp	r2, r3
 8019d36:	f4ff af3d 	bcc.w	8019bb4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8019d3a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d02c      	beq.n	8019d9a <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019d40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d42:	685b      	ldr	r3, [r3, #4]
 8019d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d46:	e01e      	b.n	8019d86 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d4a:	891a      	ldrh	r2, [r3, #8]
 8019d4c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d4e:	4413      	add	r3, r2
 8019d50:	b29a      	uxth	r2, r3
 8019d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d54:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8019d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d58:	681b      	ldr	r3, [r3, #0]
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d110      	bne.n	8019d80 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d60:	685b      	ldr	r3, [r3, #4]
 8019d62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019d64:	8952      	ldrh	r2, [r2, #10]
 8019d66:	4413      	add	r3, r2
 8019d68:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8019d6a:	68b9      	ldr	r1, [r7, #8]
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f006 fcc0 	bl	80206f2 <memcpy>
        p->len += oversize_used;
 8019d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d74:	895a      	ldrh	r2, [r3, #10]
 8019d76:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d78:	4413      	add	r3, r2
 8019d7a:	b29a      	uxth	r2, r3
 8019d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d7e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d1dd      	bne.n	8019d48 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019d8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d8e:	891a      	ldrh	r2, [r3, #8]
 8019d90:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8019d92:	4413      	add	r3, r2
 8019d94:	b29a      	uxth	r2, r3
 8019d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019d98:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019d9a:	8a7a      	ldrh	r2, [r7, #18]
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8019da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d018      	beq.n	8019dda <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d106      	bne.n	8019dbc <tcp_write+0x508>
 8019dae:	4b2a      	ldr	r3, [pc, #168]	@ (8019e58 <tcp_write+0x5a4>)
 8019db0:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8019db4:	492d      	ldr	r1, [pc, #180]	@ (8019e6c <tcp_write+0x5b8>)
 8019db6:	482a      	ldr	r0, [pc, #168]	@ (8019e60 <tcp_write+0x5ac>)
 8019db8:	f006 fa70 	bl	802029c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dbe:	685b      	ldr	r3, [r3, #4]
 8019dc0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8019dc2:	4618      	mov	r0, r3
 8019dc4:	f7fb f896 	bl	8014ef4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dca:	891a      	ldrh	r2, [r3, #8]
 8019dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019dce:	891b      	ldrh	r3, [r3, #8]
 8019dd0:	4413      	add	r3, r2
 8019dd2:	b29a      	uxth	r2, r3
 8019dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dd6:	811a      	strh	r2, [r3, #8]
 8019dd8:	e037      	b.n	8019e4a <tcp_write+0x596>
  } else if (extendlen > 0) {
 8019dda:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019ddc:	2b00      	cmp	r3, #0
 8019dde:	d034      	beq.n	8019e4a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019de0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d003      	beq.n	8019dee <tcp_write+0x53a>
 8019de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019de8:	685b      	ldr	r3, [r3, #4]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d106      	bne.n	8019dfc <tcp_write+0x548>
 8019dee:	4b1a      	ldr	r3, [pc, #104]	@ (8019e58 <tcp_write+0x5a4>)
 8019df0:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8019df4:	491e      	ldr	r1, [pc, #120]	@ (8019e70 <tcp_write+0x5bc>)
 8019df6:	481a      	ldr	r0, [pc, #104]	@ (8019e60 <tcp_write+0x5ac>)
 8019df8:	f006 fa50 	bl	802029c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019dfe:	685b      	ldr	r3, [r3, #4]
 8019e00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e02:	e009      	b.n	8019e18 <tcp_write+0x564>
      p->tot_len += extendlen;
 8019e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e06:	891a      	ldrh	r2, [r3, #8]
 8019e08:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e0a:	4413      	add	r3, r2
 8019e0c:	b29a      	uxth	r2, r3
 8019e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e10:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e14:	681b      	ldr	r3, [r3, #0]
 8019e16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e1a:	681b      	ldr	r3, [r3, #0]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d1f1      	bne.n	8019e04 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e22:	891a      	ldrh	r2, [r3, #8]
 8019e24:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e26:	4413      	add	r3, r2
 8019e28:	b29a      	uxth	r2, r3
 8019e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e2c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e30:	895a      	ldrh	r2, [r3, #10]
 8019e32:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e34:	4413      	add	r3, r2
 8019e36:	b29a      	uxth	r2, r3
 8019e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e3a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e3e:	891a      	ldrh	r2, [r3, #8]
 8019e40:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8019e42:	4413      	add	r3, r2
 8019e44:	b29a      	uxth	r2, r3
 8019e46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e48:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019e4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d111      	bne.n	8019e74 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019e54:	66da      	str	r2, [r3, #108]	@ 0x6c
 8019e56:	e010      	b.n	8019e7a <tcp_write+0x5c6>
 8019e58:	08023530 	.word	0x08023530
 8019e5c:	080237d0 	.word	0x080237d0
 8019e60:	08023584 	.word	0x08023584
 8019e64:	08023810 	.word	0x08023810
 8019e68:	08023820 	.word	0x08023820
 8019e6c:	08023834 	.word	0x08023834
 8019e70:	0802386c 	.word	0x0802386c
  } else {
    last_unsent->next = queue;
 8019e74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019e78:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019e7e:	88fb      	ldrh	r3, [r7, #6]
 8019e80:	441a      	add	r2, r3
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8019e8c:	88fb      	ldrh	r3, [r7, #6]
 8019e8e:	1ad3      	subs	r3, r2, r3
 8019e90:	b29a      	uxth	r2, r3
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8019e9e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019ea2:	68fb      	ldr	r3, [r7, #12]
 8019ea4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d00e      	beq.n	8019eca <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d10a      	bne.n	8019eca <tcp_write+0x616>
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d106      	bne.n	8019eca <tcp_write+0x616>
 8019ebc:	4b30      	ldr	r3, [pc, #192]	@ (8019f80 <tcp_write+0x6cc>)
 8019ebe:	f240 3212 	movw	r2, #786	@ 0x312
 8019ec2:	4930      	ldr	r1, [pc, #192]	@ (8019f84 <tcp_write+0x6d0>)
 8019ec4:	4830      	ldr	r0, [pc, #192]	@ (8019f88 <tcp_write+0x6d4>)
 8019ec6:	f006 f9e9 	bl	802029c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019eca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d016      	beq.n	8019efe <tcp_write+0x64a>
 8019ed0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ed2:	68db      	ldr	r3, [r3, #12]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d012      	beq.n	8019efe <tcp_write+0x64a>
 8019ed8:	797b      	ldrb	r3, [r7, #5]
 8019eda:	f003 0302 	and.w	r3, r3, #2
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d10d      	bne.n	8019efe <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019ee2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ee4:	68db      	ldr	r3, [r3, #12]
 8019ee6:	899b      	ldrh	r3, [r3, #12]
 8019ee8:	b29c      	uxth	r4, r3
 8019eea:	2008      	movs	r0, #8
 8019eec:	f7f9 fa76 	bl	80133dc <lwip_htons>
 8019ef0:	4603      	mov	r3, r0
 8019ef2:	461a      	mov	r2, r3
 8019ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019ef6:	68db      	ldr	r3, [r3, #12]
 8019ef8:	4322      	orrs	r2, r4
 8019efa:	b292      	uxth	r2, r2
 8019efc:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019efe:	2300      	movs	r3, #0
 8019f00:	e039      	b.n	8019f76 <tcp_write+0x6c2>
          goto memerr;
 8019f02:	bf00      	nop
 8019f04:	e006      	b.n	8019f14 <tcp_write+0x660>
            goto memerr;
 8019f06:	bf00      	nop
 8019f08:	e004      	b.n	8019f14 <tcp_write+0x660>
        goto memerr;
 8019f0a:	bf00      	nop
 8019f0c:	e002      	b.n	8019f14 <tcp_write+0x660>
        goto memerr;
 8019f0e:	bf00      	nop
 8019f10:	e000      	b.n	8019f14 <tcp_write+0x660>
      goto memerr;
 8019f12:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	8b5b      	ldrh	r3, [r3, #26]
 8019f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019f1c:	b29a      	uxth	r2, r3
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 8019f22:	4b1a      	ldr	r3, [pc, #104]	@ (8019f8c <tcp_write+0x6d8>)
 8019f24:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019f28:	3301      	adds	r3, #1
 8019f2a:	b29a      	uxth	r2, r3
 8019f2c:	4b17      	ldr	r3, [pc, #92]	@ (8019f8c <tcp_write+0x6d8>)
 8019f2e:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 8019f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d002      	beq.n	8019f3e <tcp_write+0x68a>
    pbuf_free(concat_p);
 8019f38:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8019f3a:	f7fa ff0d 	bl	8014d58 <pbuf_free>
  }
  if (queue != NULL) {
 8019f3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d002      	beq.n	8019f4a <tcp_write+0x696>
    tcp_segs_free(queue);
 8019f44:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019f46:	f7fc fac5 	bl	80164d4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8019f4a:	68fb      	ldr	r3, [r7, #12]
 8019f4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d00e      	beq.n	8019f72 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019f54:	68fb      	ldr	r3, [r7, #12]
 8019f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d10a      	bne.n	8019f72 <tcp_write+0x6be>
 8019f5c:	68fb      	ldr	r3, [r7, #12]
 8019f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d106      	bne.n	8019f72 <tcp_write+0x6be>
 8019f64:	4b06      	ldr	r3, [pc, #24]	@ (8019f80 <tcp_write+0x6cc>)
 8019f66:	f240 3227 	movw	r2, #807	@ 0x327
 8019f6a:	4906      	ldr	r1, [pc, #24]	@ (8019f84 <tcp_write+0x6d0>)
 8019f6c:	4806      	ldr	r0, [pc, #24]	@ (8019f88 <tcp_write+0x6d4>)
 8019f6e:	f006 f995 	bl	802029c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019f72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8019f76:	4618      	mov	r0, r3
 8019f78:	375c      	adds	r7, #92	@ 0x5c
 8019f7a:	46bd      	mov	sp, r7
 8019f7c:	bd90      	pop	{r4, r7, pc}
 8019f7e:	bf00      	nop
 8019f80:	08023530 	.word	0x08023530
 8019f84:	080238a4 	.word	0x080238a4
 8019f88:	08023584 	.word	0x08023584
 8019f8c:	200252ac 	.word	0x200252ac

08019f90 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019f90:	b590      	push	{r4, r7, lr}
 8019f92:	b08b      	sub	sp, #44	@ 0x2c
 8019f94:	af02      	add	r7, sp, #8
 8019f96:	6078      	str	r0, [r7, #4]
 8019f98:	460b      	mov	r3, r1
 8019f9a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	61fb      	str	r3, [r7, #28]
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019fa4:	2300      	movs	r3, #0
 8019fa6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d106      	bne.n	8019fbc <tcp_split_unsent_seg+0x2c>
 8019fae:	4b99      	ldr	r3, [pc, #612]	@ (801a214 <tcp_split_unsent_seg+0x284>)
 8019fb0:	f240 324b 	movw	r2, #843	@ 0x34b
 8019fb4:	4998      	ldr	r1, [pc, #608]	@ (801a218 <tcp_split_unsent_seg+0x288>)
 8019fb6:	4899      	ldr	r0, [pc, #612]	@ (801a21c <tcp_split_unsent_seg+0x28c>)
 8019fb8:	f006 f970 	bl	802029c <iprintf>

  useg = pcb->unsent;
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019fc0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019fc2:	697b      	ldr	r3, [r7, #20]
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d102      	bne.n	8019fce <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8019fc8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019fcc:	e11e      	b.n	801a20c <tcp_split_unsent_seg+0x27c>
  }

  if (split == 0) {
 8019fce:	887b      	ldrh	r3, [r7, #2]
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d109      	bne.n	8019fe8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019fd4:	4b8f      	ldr	r3, [pc, #572]	@ (801a214 <tcp_split_unsent_seg+0x284>)
 8019fd6:	f240 3253 	movw	r2, #851	@ 0x353
 8019fda:	4991      	ldr	r1, [pc, #580]	@ (801a220 <tcp_split_unsent_seg+0x290>)
 8019fdc:	488f      	ldr	r0, [pc, #572]	@ (801a21c <tcp_split_unsent_seg+0x28c>)
 8019fde:	f006 f95d 	bl	802029c <iprintf>
    return ERR_VAL;
 8019fe2:	f06f 0305 	mvn.w	r3, #5
 8019fe6:	e111      	b.n	801a20c <tcp_split_unsent_seg+0x27c>
  }

  if (useg->len <= split) {
 8019fe8:	697b      	ldr	r3, [r7, #20]
 8019fea:	891b      	ldrh	r3, [r3, #8]
 8019fec:	887a      	ldrh	r2, [r7, #2]
 8019fee:	429a      	cmp	r2, r3
 8019ff0:	d301      	bcc.n	8019ff6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019ff2:	2300      	movs	r3, #0
 8019ff4:	e10a      	b.n	801a20c <tcp_split_unsent_seg+0x27c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019ffa:	887a      	ldrh	r2, [r7, #2]
 8019ffc:	429a      	cmp	r2, r3
 8019ffe:	d906      	bls.n	801a00e <tcp_split_unsent_seg+0x7e>
 801a000:	4b84      	ldr	r3, [pc, #528]	@ (801a214 <tcp_split_unsent_seg+0x284>)
 801a002:	f240 325b 	movw	r2, #859	@ 0x35b
 801a006:	4987      	ldr	r1, [pc, #540]	@ (801a224 <tcp_split_unsent_seg+0x294>)
 801a008:	4884      	ldr	r0, [pc, #528]	@ (801a21c <tcp_split_unsent_seg+0x28c>)
 801a00a:	f006 f947 	bl	802029c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	891b      	ldrh	r3, [r3, #8]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d106      	bne.n	801a024 <tcp_split_unsent_seg+0x94>
 801a016:	4b7f      	ldr	r3, [pc, #508]	@ (801a214 <tcp_split_unsent_seg+0x284>)
 801a018:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801a01c:	4982      	ldr	r1, [pc, #520]	@ (801a228 <tcp_split_unsent_seg+0x298>)
 801a01e:	487f      	ldr	r0, [pc, #508]	@ (801a21c <tcp_split_unsent_seg+0x28c>)
 801a020:	f006 f93c 	bl	802029c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a024:	697b      	ldr	r3, [r7, #20]
 801a026:	7a9b      	ldrb	r3, [r3, #10]
 801a028:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a02a:	7bfb      	ldrb	r3, [r7, #15]
 801a02c:	009b      	lsls	r3, r3, #2
 801a02e:	b2db      	uxtb	r3, r3
 801a030:	f003 0304 	and.w	r3, r3, #4
 801a034:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a036:	697b      	ldr	r3, [r7, #20]
 801a038:	891a      	ldrh	r2, [r3, #8]
 801a03a:	887b      	ldrh	r3, [r7, #2]
 801a03c:	1ad3      	subs	r3, r2, r3
 801a03e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a040:	7bbb      	ldrb	r3, [r7, #14]
 801a042:	b29a      	uxth	r2, r3
 801a044:	89bb      	ldrh	r3, [r7, #12]
 801a046:	4413      	add	r3, r2
 801a048:	b29b      	uxth	r3, r3
 801a04a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a04e:	4619      	mov	r1, r3
 801a050:	2036      	movs	r0, #54	@ 0x36
 801a052:	f7fa fb9d 	bl	8014790 <pbuf_alloc>
 801a056:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a058:	693b      	ldr	r3, [r7, #16]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	f000 80b7 	beq.w	801a1ce <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a060:	697b      	ldr	r3, [r7, #20]
 801a062:	685b      	ldr	r3, [r3, #4]
 801a064:	891a      	ldrh	r2, [r3, #8]
 801a066:	697b      	ldr	r3, [r7, #20]
 801a068:	891b      	ldrh	r3, [r3, #8]
 801a06a:	1ad3      	subs	r3, r2, r3
 801a06c:	b29a      	uxth	r2, r3
 801a06e:	887b      	ldrh	r3, [r7, #2]
 801a070:	4413      	add	r3, r2
 801a072:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a074:	697b      	ldr	r3, [r7, #20]
 801a076:	6858      	ldr	r0, [r3, #4]
 801a078:	693b      	ldr	r3, [r7, #16]
 801a07a:	685a      	ldr	r2, [r3, #4]
 801a07c:	7bbb      	ldrb	r3, [r7, #14]
 801a07e:	18d1      	adds	r1, r2, r3
 801a080:	897b      	ldrh	r3, [r7, #10]
 801a082:	89ba      	ldrh	r2, [r7, #12]
 801a084:	f7fb f86e 	bl	8015164 <pbuf_copy_partial>
 801a088:	4603      	mov	r3, r0
 801a08a:	461a      	mov	r2, r3
 801a08c:	89bb      	ldrh	r3, [r7, #12]
 801a08e:	4293      	cmp	r3, r2
 801a090:	f040 809f 	bne.w	801a1d2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a094:	697b      	ldr	r3, [r7, #20]
 801a096:	68db      	ldr	r3, [r3, #12]
 801a098:	899b      	ldrh	r3, [r3, #12]
 801a09a:	b29b      	uxth	r3, r3
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7f9 f99d 	bl	80133dc <lwip_htons>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	b2db      	uxtb	r3, r3
 801a0a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a0aa:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a0ac:	2300      	movs	r3, #0
 801a0ae:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801a0b0:	7efb      	ldrb	r3, [r7, #27]
 801a0b2:	f003 0308 	and.w	r3, r3, #8
 801a0b6:	2b00      	cmp	r3, #0
 801a0b8:	d007      	beq.n	801a0ca <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a0ba:	7efb      	ldrb	r3, [r7, #27]
 801a0bc:	f023 0308 	bic.w	r3, r3, #8
 801a0c0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801a0c2:	7ebb      	ldrb	r3, [r7, #26]
 801a0c4:	f043 0308 	orr.w	r3, r3, #8
 801a0c8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801a0ca:	7efb      	ldrb	r3, [r7, #27]
 801a0cc:	f003 0301 	and.w	r3, r3, #1
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d007      	beq.n	801a0e4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a0d4:	7efb      	ldrb	r3, [r7, #27]
 801a0d6:	f023 0301 	bic.w	r3, r3, #1
 801a0da:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801a0dc:	7ebb      	ldrb	r3, [r7, #26]
 801a0de:	f043 0301 	orr.w	r3, r3, #1
 801a0e2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a0e4:	697b      	ldr	r3, [r7, #20]
 801a0e6:	68db      	ldr	r3, [r3, #12]
 801a0e8:	685b      	ldr	r3, [r3, #4]
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f7f9 f98c 	bl	8013408 <lwip_htonl>
 801a0f0:	4602      	mov	r2, r0
 801a0f2:	887b      	ldrh	r3, [r7, #2]
 801a0f4:	18d1      	adds	r1, r2, r3
 801a0f6:	7eba      	ldrb	r2, [r7, #26]
 801a0f8:	7bfb      	ldrb	r3, [r7, #15]
 801a0fa:	9300      	str	r3, [sp, #0]
 801a0fc:	460b      	mov	r3, r1
 801a0fe:	6939      	ldr	r1, [r7, #16]
 801a100:	6878      	ldr	r0, [r7, #4]
 801a102:	f7ff fa33 	bl	801956c <tcp_create_segment>
 801a106:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801a108:	69fb      	ldr	r3, [r7, #28]
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d063      	beq.n	801a1d6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a10e:	697b      	ldr	r3, [r7, #20]
 801a110:	685b      	ldr	r3, [r3, #4]
 801a112:	4618      	mov	r0, r3
 801a114:	f7fa feae 	bl	8014e74 <pbuf_clen>
 801a118:	4603      	mov	r3, r0
 801a11a:	461a      	mov	r2, r3
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a122:	1a9b      	subs	r3, r3, r2
 801a124:	b29a      	uxth	r2, r3
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a12c:	697b      	ldr	r3, [r7, #20]
 801a12e:	6858      	ldr	r0, [r3, #4]
 801a130:	697b      	ldr	r3, [r7, #20]
 801a132:	685b      	ldr	r3, [r3, #4]
 801a134:	891a      	ldrh	r2, [r3, #8]
 801a136:	89bb      	ldrh	r3, [r7, #12]
 801a138:	1ad3      	subs	r3, r2, r3
 801a13a:	b29b      	uxth	r3, r3
 801a13c:	4619      	mov	r1, r3
 801a13e:	f7fa fc85 	bl	8014a4c <pbuf_realloc>
  useg->len -= remainder;
 801a142:	697b      	ldr	r3, [r7, #20]
 801a144:	891a      	ldrh	r2, [r3, #8]
 801a146:	89bb      	ldrh	r3, [r7, #12]
 801a148:	1ad3      	subs	r3, r2, r3
 801a14a:	b29a      	uxth	r2, r3
 801a14c:	697b      	ldr	r3, [r7, #20]
 801a14e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a150:	697b      	ldr	r3, [r7, #20]
 801a152:	68db      	ldr	r3, [r3, #12]
 801a154:	899b      	ldrh	r3, [r3, #12]
 801a156:	b29c      	uxth	r4, r3
 801a158:	7efb      	ldrb	r3, [r7, #27]
 801a15a:	b29b      	uxth	r3, r3
 801a15c:	4618      	mov	r0, r3
 801a15e:	f7f9 f93d 	bl	80133dc <lwip_htons>
 801a162:	4603      	mov	r3, r0
 801a164:	461a      	mov	r2, r3
 801a166:	697b      	ldr	r3, [r7, #20]
 801a168:	68db      	ldr	r3, [r3, #12]
 801a16a:	4322      	orrs	r2, r4
 801a16c:	b292      	uxth	r2, r2
 801a16e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a170:	697b      	ldr	r3, [r7, #20]
 801a172:	685b      	ldr	r3, [r3, #4]
 801a174:	4618      	mov	r0, r3
 801a176:	f7fa fe7d 	bl	8014e74 <pbuf_clen>
 801a17a:	4603      	mov	r3, r0
 801a17c:	461a      	mov	r2, r3
 801a17e:	687b      	ldr	r3, [r7, #4]
 801a180:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a184:	4413      	add	r3, r2
 801a186:	b29a      	uxth	r2, r3
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a18e:	69fb      	ldr	r3, [r7, #28]
 801a190:	685b      	ldr	r3, [r3, #4]
 801a192:	4618      	mov	r0, r3
 801a194:	f7fa fe6e 	bl	8014e74 <pbuf_clen>
 801a198:	4603      	mov	r3, r0
 801a19a:	461a      	mov	r2, r3
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a1a2:	4413      	add	r3, r2
 801a1a4:	b29a      	uxth	r2, r3
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a1ac:	697b      	ldr	r3, [r7, #20]
 801a1ae:	681a      	ldr	r2, [r3, #0]
 801a1b0:	69fb      	ldr	r3, [r7, #28]
 801a1b2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a1b4:	697b      	ldr	r3, [r7, #20]
 801a1b6:	69fa      	ldr	r2, [r7, #28]
 801a1b8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a1ba:	69fb      	ldr	r3, [r7, #28]
 801a1bc:	681b      	ldr	r3, [r3, #0]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d103      	bne.n	801a1ca <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a1ca:	2300      	movs	r3, #0
 801a1cc:	e01e      	b.n	801a20c <tcp_split_unsent_seg+0x27c>
    goto memerr;
 801a1ce:	bf00      	nop
 801a1d0:	e002      	b.n	801a1d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a1d2:	bf00      	nop
 801a1d4:	e000      	b.n	801a1d8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801a1d6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 801a1d8:	4b14      	ldr	r3, [pc, #80]	@ (801a22c <tcp_split_unsent_seg+0x29c>)
 801a1da:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a1de:	3301      	adds	r3, #1
 801a1e0:	b29a      	uxth	r2, r3
 801a1e2:	4b12      	ldr	r3, [pc, #72]	@ (801a22c <tcp_split_unsent_seg+0x29c>)
 801a1e4:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d006      	beq.n	801a1fc <tcp_split_unsent_seg+0x26c>
 801a1ee:	4b09      	ldr	r3, [pc, #36]	@ (801a214 <tcp_split_unsent_seg+0x284>)
 801a1f0:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801a1f4:	490e      	ldr	r1, [pc, #56]	@ (801a230 <tcp_split_unsent_seg+0x2a0>)
 801a1f6:	4809      	ldr	r0, [pc, #36]	@ (801a21c <tcp_split_unsent_seg+0x28c>)
 801a1f8:	f006 f850 	bl	802029c <iprintf>
  if (p != NULL) {
 801a1fc:	693b      	ldr	r3, [r7, #16]
 801a1fe:	2b00      	cmp	r3, #0
 801a200:	d002      	beq.n	801a208 <tcp_split_unsent_seg+0x278>
    pbuf_free(p);
 801a202:	6938      	ldr	r0, [r7, #16]
 801a204:	f7fa fda8 	bl	8014d58 <pbuf_free>
  }

  return ERR_MEM;
 801a208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a20c:	4618      	mov	r0, r3
 801a20e:	3724      	adds	r7, #36	@ 0x24
 801a210:	46bd      	mov	sp, r7
 801a212:	bd90      	pop	{r4, r7, pc}
 801a214:	08023530 	.word	0x08023530
 801a218:	080238c4 	.word	0x080238c4
 801a21c:	08023584 	.word	0x08023584
 801a220:	080238e8 	.word	0x080238e8
 801a224:	0802390c 	.word	0x0802390c
 801a228:	0802391c 	.word	0x0802391c
 801a22c:	200252ac 	.word	0x200252ac
 801a230:	0802392c 	.word	0x0802392c

0801a234 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a234:	b590      	push	{r4, r7, lr}
 801a236:	b085      	sub	sp, #20
 801a238:	af00      	add	r7, sp, #0
 801a23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d106      	bne.n	801a250 <tcp_send_fin+0x1c>
 801a242:	4b21      	ldr	r3, [pc, #132]	@ (801a2c8 <tcp_send_fin+0x94>)
 801a244:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a248:	4920      	ldr	r1, [pc, #128]	@ (801a2cc <tcp_send_fin+0x98>)
 801a24a:	4821      	ldr	r0, [pc, #132]	@ (801a2d0 <tcp_send_fin+0x9c>)
 801a24c:	f006 f826 	bl	802029c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a254:	2b00      	cmp	r3, #0
 801a256:	d02e      	beq.n	801a2b6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a25c:	60fb      	str	r3, [r7, #12]
 801a25e:	e002      	b.n	801a266 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	681b      	ldr	r3, [r3, #0]
 801a264:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d1f8      	bne.n	801a260 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	68db      	ldr	r3, [r3, #12]
 801a272:	899b      	ldrh	r3, [r3, #12]
 801a274:	b29b      	uxth	r3, r3
 801a276:	4618      	mov	r0, r3
 801a278:	f7f9 f8b0 	bl	80133dc <lwip_htons>
 801a27c:	4603      	mov	r3, r0
 801a27e:	b2db      	uxtb	r3, r3
 801a280:	f003 0307 	and.w	r3, r3, #7
 801a284:	2b00      	cmp	r3, #0
 801a286:	d116      	bne.n	801a2b6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	68db      	ldr	r3, [r3, #12]
 801a28c:	899b      	ldrh	r3, [r3, #12]
 801a28e:	b29c      	uxth	r4, r3
 801a290:	2001      	movs	r0, #1
 801a292:	f7f9 f8a3 	bl	80133dc <lwip_htons>
 801a296:	4603      	mov	r3, r0
 801a298:	461a      	mov	r2, r3
 801a29a:	68fb      	ldr	r3, [r7, #12]
 801a29c:	68db      	ldr	r3, [r3, #12]
 801a29e:	4322      	orrs	r2, r4
 801a2a0:	b292      	uxth	r2, r2
 801a2a2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	8b5b      	ldrh	r3, [r3, #26]
 801a2a8:	f043 0320 	orr.w	r3, r3, #32
 801a2ac:	b29a      	uxth	r2, r3
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801a2b2:	2300      	movs	r3, #0
 801a2b4:	e004      	b.n	801a2c0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801a2b6:	2101      	movs	r1, #1
 801a2b8:	6878      	ldr	r0, [r7, #4]
 801a2ba:	f000 f80b 	bl	801a2d4 <tcp_enqueue_flags>
 801a2be:	4603      	mov	r3, r0
}
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	3714      	adds	r7, #20
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	bd90      	pop	{r4, r7, pc}
 801a2c8:	08023530 	.word	0x08023530
 801a2cc:	08023938 	.word	0x08023938
 801a2d0:	08023584 	.word	0x08023584

0801a2d4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801a2d4:	b580      	push	{r7, lr}
 801a2d6:	b08a      	sub	sp, #40	@ 0x28
 801a2d8:	af02      	add	r7, sp, #8
 801a2da:	6078      	str	r0, [r7, #4]
 801a2dc:	460b      	mov	r3, r1
 801a2de:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801a2e0:	2300      	movs	r3, #0
 801a2e2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801a2e4:	2300      	movs	r3, #0
 801a2e6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801a2e8:	78fb      	ldrb	r3, [r7, #3]
 801a2ea:	f003 0303 	and.w	r3, r3, #3
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d106      	bne.n	801a300 <tcp_enqueue_flags+0x2c>
 801a2f2:	4b6f      	ldr	r3, [pc, #444]	@ (801a4b0 <tcp_enqueue_flags+0x1dc>)
 801a2f4:	f240 4211 	movw	r2, #1041	@ 0x411
 801a2f8:	496e      	ldr	r1, [pc, #440]	@ (801a4b4 <tcp_enqueue_flags+0x1e0>)
 801a2fa:	486f      	ldr	r0, [pc, #444]	@ (801a4b8 <tcp_enqueue_flags+0x1e4>)
 801a2fc:	f005 ffce 	bl	802029c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d106      	bne.n	801a314 <tcp_enqueue_flags+0x40>
 801a306:	4b6a      	ldr	r3, [pc, #424]	@ (801a4b0 <tcp_enqueue_flags+0x1dc>)
 801a308:	f240 4213 	movw	r2, #1043	@ 0x413
 801a30c:	496b      	ldr	r1, [pc, #428]	@ (801a4bc <tcp_enqueue_flags+0x1e8>)
 801a30e:	486a      	ldr	r0, [pc, #424]	@ (801a4b8 <tcp_enqueue_flags+0x1e4>)
 801a310:	f005 ffc4 	bl	802029c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801a314:	78fb      	ldrb	r3, [r7, #3]
 801a316:	f003 0302 	and.w	r3, r3, #2
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d001      	beq.n	801a322 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801a31e:	2301      	movs	r3, #1
 801a320:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a322:	7ffb      	ldrb	r3, [r7, #31]
 801a324:	009b      	lsls	r3, r3, #2
 801a326:	b2db      	uxtb	r3, r3
 801a328:	f003 0304 	and.w	r3, r3, #4
 801a32c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a32e:	7dfb      	ldrb	r3, [r7, #23]
 801a330:	b29b      	uxth	r3, r3
 801a332:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a336:	4619      	mov	r1, r3
 801a338:	2036      	movs	r0, #54	@ 0x36
 801a33a:	f7fa fa29 	bl	8014790 <pbuf_alloc>
 801a33e:	6138      	str	r0, [r7, #16]
 801a340:	693b      	ldr	r3, [r7, #16]
 801a342:	2b00      	cmp	r3, #0
 801a344:	d111      	bne.n	801a36a <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	8b5b      	ldrh	r3, [r3, #26]
 801a34a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a34e:	b29a      	uxth	r2, r3
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a354:	4b5a      	ldr	r3, [pc, #360]	@ (801a4c0 <tcp_enqueue_flags+0x1ec>)
 801a356:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a35a:	3301      	adds	r3, #1
 801a35c:	b29a      	uxth	r2, r3
 801a35e:	4b58      	ldr	r3, [pc, #352]	@ (801a4c0 <tcp_enqueue_flags+0x1ec>)
 801a360:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a364:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a368:	e09d      	b.n	801a4a6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801a36a:	693b      	ldr	r3, [r7, #16]
 801a36c:	895a      	ldrh	r2, [r3, #10]
 801a36e:	7dfb      	ldrb	r3, [r7, #23]
 801a370:	b29b      	uxth	r3, r3
 801a372:	429a      	cmp	r2, r3
 801a374:	d206      	bcs.n	801a384 <tcp_enqueue_flags+0xb0>
 801a376:	4b4e      	ldr	r3, [pc, #312]	@ (801a4b0 <tcp_enqueue_flags+0x1dc>)
 801a378:	f240 4239 	movw	r2, #1081	@ 0x439
 801a37c:	4951      	ldr	r1, [pc, #324]	@ (801a4c4 <tcp_enqueue_flags+0x1f0>)
 801a37e:	484e      	ldr	r0, [pc, #312]	@ (801a4b8 <tcp_enqueue_flags+0x1e4>)
 801a380:	f005 ff8c 	bl	802029c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801a388:	78fa      	ldrb	r2, [r7, #3]
 801a38a:	7ffb      	ldrb	r3, [r7, #31]
 801a38c:	9300      	str	r3, [sp, #0]
 801a38e:	460b      	mov	r3, r1
 801a390:	6939      	ldr	r1, [r7, #16]
 801a392:	6878      	ldr	r0, [r7, #4]
 801a394:	f7ff f8ea 	bl	801956c <tcp_create_segment>
 801a398:	60f8      	str	r0, [r7, #12]
 801a39a:	68fb      	ldr	r3, [r7, #12]
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	d111      	bne.n	801a3c4 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a3a0:	687b      	ldr	r3, [r7, #4]
 801a3a2:	8b5b      	ldrh	r3, [r3, #26]
 801a3a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a3a8:	b29a      	uxth	r2, r3
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801a3ae:	4b44      	ldr	r3, [pc, #272]	@ (801a4c0 <tcp_enqueue_flags+0x1ec>)
 801a3b0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a3b4:	3301      	adds	r3, #1
 801a3b6:	b29a      	uxth	r2, r3
 801a3b8:	4b41      	ldr	r3, [pc, #260]	@ (801a4c0 <tcp_enqueue_flags+0x1ec>)
 801a3ba:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801a3be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a3c2:	e070      	b.n	801a4a6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	68db      	ldr	r3, [r3, #12]
 801a3c8:	f003 0303 	and.w	r3, r3, #3
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	d006      	beq.n	801a3de <tcp_enqueue_flags+0x10a>
 801a3d0:	4b37      	ldr	r3, [pc, #220]	@ (801a4b0 <tcp_enqueue_flags+0x1dc>)
 801a3d2:	f240 4242 	movw	r2, #1090	@ 0x442
 801a3d6:	493c      	ldr	r1, [pc, #240]	@ (801a4c8 <tcp_enqueue_flags+0x1f4>)
 801a3d8:	4837      	ldr	r0, [pc, #220]	@ (801a4b8 <tcp_enqueue_flags+0x1e4>)
 801a3da:	f005 ff5f 	bl	802029c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	891b      	ldrh	r3, [r3, #8]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d006      	beq.n	801a3f4 <tcp_enqueue_flags+0x120>
 801a3e6:	4b32      	ldr	r3, [pc, #200]	@ (801a4b0 <tcp_enqueue_flags+0x1dc>)
 801a3e8:	f240 4243 	movw	r2, #1091	@ 0x443
 801a3ec:	4937      	ldr	r1, [pc, #220]	@ (801a4cc <tcp_enqueue_flags+0x1f8>)
 801a3ee:	4832      	ldr	r0, [pc, #200]	@ (801a4b8 <tcp_enqueue_flags+0x1e4>)
 801a3f0:	f005 ff54 	bl	802029c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d103      	bne.n	801a404 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	68fa      	ldr	r2, [r7, #12]
 801a400:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a402:	e00d      	b.n	801a420 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a408:	61bb      	str	r3, [r7, #24]
 801a40a:	e002      	b.n	801a412 <tcp_enqueue_flags+0x13e>
 801a40c:	69bb      	ldr	r3, [r7, #24]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	61bb      	str	r3, [r7, #24]
 801a412:	69bb      	ldr	r3, [r7, #24]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	2b00      	cmp	r3, #0
 801a418:	d1f8      	bne.n	801a40c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801a41a:	69bb      	ldr	r3, [r7, #24]
 801a41c:	68fa      	ldr	r2, [r7, #12]
 801a41e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	2200      	movs	r2, #0
 801a424:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801a428:	78fb      	ldrb	r3, [r7, #3]
 801a42a:	f003 0302 	and.w	r3, r3, #2
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d104      	bne.n	801a43c <tcp_enqueue_flags+0x168>
 801a432:	78fb      	ldrb	r3, [r7, #3]
 801a434:	f003 0301 	and.w	r3, r3, #1
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d004      	beq.n	801a446 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a440:	1c5a      	adds	r2, r3, #1
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801a446:	78fb      	ldrb	r3, [r7, #3]
 801a448:	f003 0301 	and.w	r3, r3, #1
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d006      	beq.n	801a45e <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	8b5b      	ldrh	r3, [r3, #26]
 801a454:	f043 0320 	orr.w	r3, r3, #32
 801a458:	b29a      	uxth	r2, r3
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a45e:	68fb      	ldr	r3, [r7, #12]
 801a460:	685b      	ldr	r3, [r3, #4]
 801a462:	4618      	mov	r0, r3
 801a464:	f7fa fd06 	bl	8014e74 <pbuf_clen>
 801a468:	4603      	mov	r3, r0
 801a46a:	461a      	mov	r2, r3
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a472:	4413      	add	r3, r2
 801a474:	b29a      	uxth	r2, r3
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a482:	2b00      	cmp	r3, #0
 801a484:	d00e      	beq.n	801a4a4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d10a      	bne.n	801a4a4 <tcp_enqueue_flags+0x1d0>
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a492:	2b00      	cmp	r3, #0
 801a494:	d106      	bne.n	801a4a4 <tcp_enqueue_flags+0x1d0>
 801a496:	4b06      	ldr	r3, [pc, #24]	@ (801a4b0 <tcp_enqueue_flags+0x1dc>)
 801a498:	f240 4265 	movw	r2, #1125	@ 0x465
 801a49c:	490c      	ldr	r1, [pc, #48]	@ (801a4d0 <tcp_enqueue_flags+0x1fc>)
 801a49e:	4806      	ldr	r0, [pc, #24]	@ (801a4b8 <tcp_enqueue_flags+0x1e4>)
 801a4a0:	f005 fefc 	bl	802029c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801a4a4:	2300      	movs	r3, #0
}
 801a4a6:	4618      	mov	r0, r3
 801a4a8:	3720      	adds	r7, #32
 801a4aa:	46bd      	mov	sp, r7
 801a4ac:	bd80      	pop	{r7, pc}
 801a4ae:	bf00      	nop
 801a4b0:	08023530 	.word	0x08023530
 801a4b4:	08023954 	.word	0x08023954
 801a4b8:	08023584 	.word	0x08023584
 801a4bc:	080239ac 	.word	0x080239ac
 801a4c0:	200252ac 	.word	0x200252ac
 801a4c4:	080239cc 	.word	0x080239cc
 801a4c8:	08023a08 	.word	0x08023a08
 801a4cc:	08023a20 	.word	0x08023a20
 801a4d0:	08023a4c 	.word	0x08023a4c

0801a4d4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801a4d4:	b5b0      	push	{r4, r5, r7, lr}
 801a4d6:	b08a      	sub	sp, #40	@ 0x28
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d106      	bne.n	801a4f0 <tcp_output+0x1c>
 801a4e2:	4b8a      	ldr	r3, [pc, #552]	@ (801a70c <tcp_output+0x238>)
 801a4e4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801a4e8:	4989      	ldr	r1, [pc, #548]	@ (801a710 <tcp_output+0x23c>)
 801a4ea:	488a      	ldr	r0, [pc, #552]	@ (801a714 <tcp_output+0x240>)
 801a4ec:	f005 fed6 	bl	802029c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	7d1b      	ldrb	r3, [r3, #20]
 801a4f4:	2b01      	cmp	r3, #1
 801a4f6:	d106      	bne.n	801a506 <tcp_output+0x32>
 801a4f8:	4b84      	ldr	r3, [pc, #528]	@ (801a70c <tcp_output+0x238>)
 801a4fa:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801a4fe:	4986      	ldr	r1, [pc, #536]	@ (801a718 <tcp_output+0x244>)
 801a500:	4884      	ldr	r0, [pc, #528]	@ (801a714 <tcp_output+0x240>)
 801a502:	f005 fecb 	bl	802029c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801a506:	4b85      	ldr	r3, [pc, #532]	@ (801a71c <tcp_output+0x248>)
 801a508:	681b      	ldr	r3, [r3, #0]
 801a50a:	687a      	ldr	r2, [r7, #4]
 801a50c:	429a      	cmp	r2, r3
 801a50e:	d101      	bne.n	801a514 <tcp_output+0x40>
    return ERR_OK;
 801a510:	2300      	movs	r3, #0
 801a512:	e1ce      	b.n	801a8b2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a520:	4293      	cmp	r3, r2
 801a522:	bf28      	it	cs
 801a524:	4613      	movcs	r3, r2
 801a526:	b29b      	uxth	r3, r3
 801a528:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a52e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a532:	2b00      	cmp	r3, #0
 801a534:	d10b      	bne.n	801a54e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	8b5b      	ldrh	r3, [r3, #26]
 801a53a:	f003 0302 	and.w	r3, r3, #2
 801a53e:	2b00      	cmp	r3, #0
 801a540:	f000 81aa 	beq.w	801a898 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801a544:	6878      	ldr	r0, [r7, #4]
 801a546:	f000 fddf 	bl	801b108 <tcp_send_empty_ack>
 801a54a:	4603      	mov	r3, r0
 801a54c:	e1b1      	b.n	801a8b2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801a54e:	6879      	ldr	r1, [r7, #4]
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	3304      	adds	r3, #4
 801a554:	461a      	mov	r2, r3
 801a556:	6878      	ldr	r0, [r7, #4]
 801a558:	f7fe ffec 	bl	8019534 <tcp_route>
 801a55c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801a55e:	697b      	ldr	r3, [r7, #20]
 801a560:	2b00      	cmp	r3, #0
 801a562:	d102      	bne.n	801a56a <tcp_output+0x96>
    return ERR_RTE;
 801a564:	f06f 0303 	mvn.w	r3, #3
 801a568:	e1a3      	b.n	801a8b2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d003      	beq.n	801a578 <tcp_output+0xa4>
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d111      	bne.n	801a59c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801a578:	697b      	ldr	r3, [r7, #20]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d002      	beq.n	801a584 <tcp_output+0xb0>
 801a57e:	697b      	ldr	r3, [r7, #20]
 801a580:	3304      	adds	r3, #4
 801a582:	e000      	b.n	801a586 <tcp_output+0xb2>
 801a584:	2300      	movs	r3, #0
 801a586:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801a588:	693b      	ldr	r3, [r7, #16]
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	d102      	bne.n	801a594 <tcp_output+0xc0>
      return ERR_RTE;
 801a58e:	f06f 0303 	mvn.w	r3, #3
 801a592:	e18e      	b.n	801a8b2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801a594:	693b      	ldr	r3, [r7, #16]
 801a596:	681a      	ldr	r2, [r3, #0]
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801a59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a59e:	68db      	ldr	r3, [r3, #12]
 801a5a0:	685b      	ldr	r3, [r3, #4]
 801a5a2:	4618      	mov	r0, r3
 801a5a4:	f7f8 ff30 	bl	8013408 <lwip_htonl>
 801a5a8:	4602      	mov	r2, r0
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a5ae:	1ad3      	subs	r3, r2, r3
 801a5b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a5b2:	8912      	ldrh	r2, [r2, #8]
 801a5b4:	4413      	add	r3, r2
 801a5b6:	69ba      	ldr	r2, [r7, #24]
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	d227      	bcs.n	801a60c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a5c2:	461a      	mov	r2, r3
 801a5c4:	69bb      	ldr	r3, [r7, #24]
 801a5c6:	4293      	cmp	r3, r2
 801a5c8:	d114      	bne.n	801a5f4 <tcp_output+0x120>
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d110      	bne.n	801a5f4 <tcp_output+0x120>
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d10b      	bne.n	801a5f4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801a5dc:	687b      	ldr	r3, [r7, #4]
 801a5de:	2200      	movs	r2, #0
 801a5e0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	2201      	movs	r2, #1
 801a5e8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801a5ec:	687b      	ldr	r3, [r7, #4]
 801a5ee:	2200      	movs	r2, #0
 801a5f0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	8b5b      	ldrh	r3, [r3, #26]
 801a5f8:	f003 0302 	and.w	r3, r3, #2
 801a5fc:	2b00      	cmp	r3, #0
 801a5fe:	f000 814d 	beq.w	801a89c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801a602:	6878      	ldr	r0, [r7, #4]
 801a604:	f000 fd80 	bl	801b108 <tcp_send_empty_ack>
 801a608:	4603      	mov	r3, r0
 801a60a:	e152      	b.n	801a8b2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	2200      	movs	r2, #0
 801a610:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a618:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801a61a:	6a3b      	ldr	r3, [r7, #32]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	f000 811c 	beq.w	801a85a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801a622:	e002      	b.n	801a62a <tcp_output+0x156>
 801a624:	6a3b      	ldr	r3, [r7, #32]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	623b      	str	r3, [r7, #32]
 801a62a:	6a3b      	ldr	r3, [r7, #32]
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	d1f8      	bne.n	801a624 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801a632:	e112      	b.n	801a85a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801a634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a636:	68db      	ldr	r3, [r3, #12]
 801a638:	899b      	ldrh	r3, [r3, #12]
 801a63a:	b29b      	uxth	r3, r3
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7f8 fecd 	bl	80133dc <lwip_htons>
 801a642:	4603      	mov	r3, r0
 801a644:	b2db      	uxtb	r3, r3
 801a646:	f003 0304 	and.w	r3, r3, #4
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d006      	beq.n	801a65c <tcp_output+0x188>
 801a64e:	4b2f      	ldr	r3, [pc, #188]	@ (801a70c <tcp_output+0x238>)
 801a650:	f240 5236 	movw	r2, #1334	@ 0x536
 801a654:	4932      	ldr	r1, [pc, #200]	@ (801a720 <tcp_output+0x24c>)
 801a656:	482f      	ldr	r0, [pc, #188]	@ (801a714 <tcp_output+0x240>)
 801a658:	f005 fe20 	bl	802029c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a660:	2b00      	cmp	r3, #0
 801a662:	d01f      	beq.n	801a6a4 <tcp_output+0x1d0>
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	8b5b      	ldrh	r3, [r3, #26]
 801a668:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d119      	bne.n	801a6a4 <tcp_output+0x1d0>
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a674:	2b00      	cmp	r3, #0
 801a676:	d00b      	beq.n	801a690 <tcp_output+0x1bc>
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d110      	bne.n	801a6a4 <tcp_output+0x1d0>
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a686:	891a      	ldrh	r2, [r3, #8]
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d209      	bcs.n	801a6a4 <tcp_output+0x1d0>
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801a696:	2b00      	cmp	r3, #0
 801a698:	d004      	beq.n	801a6a4 <tcp_output+0x1d0>
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a6a0:	2b08      	cmp	r3, #8
 801a6a2:	d901      	bls.n	801a6a8 <tcp_output+0x1d4>
 801a6a4:	2301      	movs	r3, #1
 801a6a6:	e000      	b.n	801a6aa <tcp_output+0x1d6>
 801a6a8:	2300      	movs	r3, #0
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d106      	bne.n	801a6bc <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	8b5b      	ldrh	r3, [r3, #26]
 801a6b2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801a6b6:	2b00      	cmp	r3, #0
 801a6b8:	f000 80e4 	beq.w	801a884 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	7d1b      	ldrb	r3, [r3, #20]
 801a6c0:	2b02      	cmp	r3, #2
 801a6c2:	d00d      	beq.n	801a6e0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801a6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6c6:	68db      	ldr	r3, [r3, #12]
 801a6c8:	899b      	ldrh	r3, [r3, #12]
 801a6ca:	b29c      	uxth	r4, r3
 801a6cc:	2010      	movs	r0, #16
 801a6ce:	f7f8 fe85 	bl	80133dc <lwip_htons>
 801a6d2:	4603      	mov	r3, r0
 801a6d4:	461a      	mov	r2, r3
 801a6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6d8:	68db      	ldr	r3, [r3, #12]
 801a6da:	4322      	orrs	r2, r4
 801a6dc:	b292      	uxth	r2, r2
 801a6de:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801a6e0:	697a      	ldr	r2, [r7, #20]
 801a6e2:	6879      	ldr	r1, [r7, #4]
 801a6e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a6e6:	f000 f909 	bl	801a8fc <tcp_output_segment>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801a6ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d016      	beq.n	801a724 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	8b5b      	ldrh	r3, [r3, #26]
 801a6fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a6fe:	b29a      	uxth	r2, r3
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	835a      	strh	r2, [r3, #26]
      return err;
 801a704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a708:	e0d3      	b.n	801a8b2 <tcp_output+0x3de>
 801a70a:	bf00      	nop
 801a70c:	08023530 	.word	0x08023530
 801a710:	08023a74 	.word	0x08023a74
 801a714:	08023584 	.word	0x08023584
 801a718:	08023a8c 	.word	0x08023a8c
 801a71c:	200253f4 	.word	0x200253f4
 801a720:	08023ab4 	.word	0x08023ab4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801a724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a726:	681a      	ldr	r2, [r3, #0]
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	7d1b      	ldrb	r3, [r3, #20]
 801a730:	2b02      	cmp	r3, #2
 801a732:	d006      	beq.n	801a742 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	8b5b      	ldrh	r3, [r3, #26]
 801a738:	f023 0303 	bic.w	r3, r3, #3
 801a73c:	b29a      	uxth	r2, r3
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a744:	68db      	ldr	r3, [r3, #12]
 801a746:	685b      	ldr	r3, [r3, #4]
 801a748:	4618      	mov	r0, r3
 801a74a:	f7f8 fe5d 	bl	8013408 <lwip_htonl>
 801a74e:	4604      	mov	r4, r0
 801a750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a752:	891b      	ldrh	r3, [r3, #8]
 801a754:	461d      	mov	r5, r3
 801a756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a758:	68db      	ldr	r3, [r3, #12]
 801a75a:	899b      	ldrh	r3, [r3, #12]
 801a75c:	b29b      	uxth	r3, r3
 801a75e:	4618      	mov	r0, r3
 801a760:	f7f8 fe3c 	bl	80133dc <lwip_htons>
 801a764:	4603      	mov	r3, r0
 801a766:	b2db      	uxtb	r3, r3
 801a768:	f003 0303 	and.w	r3, r3, #3
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d001      	beq.n	801a774 <tcp_output+0x2a0>
 801a770:	2301      	movs	r3, #1
 801a772:	e000      	b.n	801a776 <tcp_output+0x2a2>
 801a774:	2300      	movs	r3, #0
 801a776:	442b      	add	r3, r5
 801a778:	4423      	add	r3, r4
 801a77a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801a780:	68bb      	ldr	r3, [r7, #8]
 801a782:	1ad3      	subs	r3, r2, r3
 801a784:	2b00      	cmp	r3, #0
 801a786:	da02      	bge.n	801a78e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	68ba      	ldr	r2, [r7, #8]
 801a78c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801a78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a790:	891b      	ldrh	r3, [r3, #8]
 801a792:	461c      	mov	r4, r3
 801a794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a796:	68db      	ldr	r3, [r3, #12]
 801a798:	899b      	ldrh	r3, [r3, #12]
 801a79a:	b29b      	uxth	r3, r3
 801a79c:	4618      	mov	r0, r3
 801a79e:	f7f8 fe1d 	bl	80133dc <lwip_htons>
 801a7a2:	4603      	mov	r3, r0
 801a7a4:	b2db      	uxtb	r3, r3
 801a7a6:	f003 0303 	and.w	r3, r3, #3
 801a7aa:	2b00      	cmp	r3, #0
 801a7ac:	d001      	beq.n	801a7b2 <tcp_output+0x2de>
 801a7ae:	2301      	movs	r3, #1
 801a7b0:	e000      	b.n	801a7b4 <tcp_output+0x2e0>
 801a7b2:	2300      	movs	r3, #0
 801a7b4:	4423      	add	r3, r4
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	d049      	beq.n	801a84e <tcp_output+0x37a>
      seg->next = NULL;
 801a7ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7bc:	2200      	movs	r2, #0
 801a7be:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d105      	bne.n	801a7d4 <tcp_output+0x300>
        pcb->unacked = seg;
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a7cc:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801a7ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7d0:	623b      	str	r3, [r7, #32]
 801a7d2:	e03f      	b.n	801a854 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801a7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7d6:	68db      	ldr	r3, [r3, #12]
 801a7d8:	685b      	ldr	r3, [r3, #4]
 801a7da:	4618      	mov	r0, r3
 801a7dc:	f7f8 fe14 	bl	8013408 <lwip_htonl>
 801a7e0:	4604      	mov	r4, r0
 801a7e2:	6a3b      	ldr	r3, [r7, #32]
 801a7e4:	68db      	ldr	r3, [r3, #12]
 801a7e6:	685b      	ldr	r3, [r3, #4]
 801a7e8:	4618      	mov	r0, r3
 801a7ea:	f7f8 fe0d 	bl	8013408 <lwip_htonl>
 801a7ee:	4603      	mov	r3, r0
 801a7f0:	1ae3      	subs	r3, r4, r3
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	da24      	bge.n	801a840 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801a7f6:	687b      	ldr	r3, [r7, #4]
 801a7f8:	3370      	adds	r3, #112	@ 0x70
 801a7fa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a7fc:	e002      	b.n	801a804 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801a7fe:	69fb      	ldr	r3, [r7, #28]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801a804:	69fb      	ldr	r3, [r7, #28]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	2b00      	cmp	r3, #0
 801a80a:	d011      	beq.n	801a830 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a80c:	69fb      	ldr	r3, [r7, #28]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	68db      	ldr	r3, [r3, #12]
 801a812:	685b      	ldr	r3, [r3, #4]
 801a814:	4618      	mov	r0, r3
 801a816:	f7f8 fdf7 	bl	8013408 <lwip_htonl>
 801a81a:	4604      	mov	r4, r0
 801a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a81e:	68db      	ldr	r3, [r3, #12]
 801a820:	685b      	ldr	r3, [r3, #4]
 801a822:	4618      	mov	r0, r3
 801a824:	f7f8 fdf0 	bl	8013408 <lwip_htonl>
 801a828:	4603      	mov	r3, r0
 801a82a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	dbe6      	blt.n	801a7fe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801a830:	69fb      	ldr	r3, [r7, #28]
 801a832:	681a      	ldr	r2, [r3, #0]
 801a834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a836:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801a838:	69fb      	ldr	r3, [r7, #28]
 801a83a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a83c:	601a      	str	r2, [r3, #0]
 801a83e:	e009      	b.n	801a854 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801a840:	6a3b      	ldr	r3, [r7, #32]
 801a842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a844:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801a846:	6a3b      	ldr	r3, [r7, #32]
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	623b      	str	r3, [r7, #32]
 801a84c:	e002      	b.n	801a854 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801a84e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a850:	f7fb fe55 	bl	80164fe <tcp_seg_free>
    }
    seg = pcb->unsent;
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a858:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801a85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d012      	beq.n	801a886 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801a860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a862:	68db      	ldr	r3, [r3, #12]
 801a864:	685b      	ldr	r3, [r3, #4]
 801a866:	4618      	mov	r0, r3
 801a868:	f7f8 fdce 	bl	8013408 <lwip_htonl>
 801a86c:	4602      	mov	r2, r0
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a872:	1ad3      	subs	r3, r2, r3
 801a874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a876:	8912      	ldrh	r2, [r2, #8]
 801a878:	4413      	add	r3, r2
  while (seg != NULL &&
 801a87a:	69ba      	ldr	r2, [r7, #24]
 801a87c:	429a      	cmp	r2, r3
 801a87e:	f4bf aed9 	bcs.w	801a634 <tcp_output+0x160>
 801a882:	e000      	b.n	801a886 <tcp_output+0x3b2>
      break;
 801a884:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d108      	bne.n	801a8a0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	2200      	movs	r2, #0
 801a892:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801a896:	e004      	b.n	801a8a2 <tcp_output+0x3ce>
    goto output_done;
 801a898:	bf00      	nop
 801a89a:	e002      	b.n	801a8a2 <tcp_output+0x3ce>
    goto output_done;
 801a89c:	bf00      	nop
 801a89e:	e000      	b.n	801a8a2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801a8a0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	8b5b      	ldrh	r3, [r3, #26]
 801a8a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a8aa:	b29a      	uxth	r2, r3
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801a8b0:	2300      	movs	r3, #0
}
 801a8b2:	4618      	mov	r0, r3
 801a8b4:	3728      	adds	r7, #40	@ 0x28
 801a8b6:	46bd      	mov	sp, r7
 801a8b8:	bdb0      	pop	{r4, r5, r7, pc}
 801a8ba:	bf00      	nop

0801a8bc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801a8bc:	b580      	push	{r7, lr}
 801a8be:	b082      	sub	sp, #8
 801a8c0:	af00      	add	r7, sp, #0
 801a8c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d106      	bne.n	801a8d8 <tcp_output_segment_busy+0x1c>
 801a8ca:	4b09      	ldr	r3, [pc, #36]	@ (801a8f0 <tcp_output_segment_busy+0x34>)
 801a8cc:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a8d0:	4908      	ldr	r1, [pc, #32]	@ (801a8f4 <tcp_output_segment_busy+0x38>)
 801a8d2:	4809      	ldr	r0, [pc, #36]	@ (801a8f8 <tcp_output_segment_busy+0x3c>)
 801a8d4:	f005 fce2 	bl	802029c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	685b      	ldr	r3, [r3, #4]
 801a8dc:	7b9b      	ldrb	r3, [r3, #14]
 801a8de:	2b01      	cmp	r3, #1
 801a8e0:	d001      	beq.n	801a8e6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801a8e2:	2301      	movs	r3, #1
 801a8e4:	e000      	b.n	801a8e8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801a8e6:	2300      	movs	r3, #0
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	3708      	adds	r7, #8
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd80      	pop	{r7, pc}
 801a8f0:	08023530 	.word	0x08023530
 801a8f4:	08023acc 	.word	0x08023acc
 801a8f8:	08023584 	.word	0x08023584

0801a8fc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801a8fc:	b5b0      	push	{r4, r5, r7, lr}
 801a8fe:	b08c      	sub	sp, #48	@ 0x30
 801a900:	af04      	add	r7, sp, #16
 801a902:	60f8      	str	r0, [r7, #12]
 801a904:	60b9      	str	r1, [r7, #8]
 801a906:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d106      	bne.n	801a91c <tcp_output_segment+0x20>
 801a90e:	4b68      	ldr	r3, [pc, #416]	@ (801aab0 <tcp_output_segment+0x1b4>)
 801a910:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801a914:	4967      	ldr	r1, [pc, #412]	@ (801aab4 <tcp_output_segment+0x1b8>)
 801a916:	4868      	ldr	r0, [pc, #416]	@ (801aab8 <tcp_output_segment+0x1bc>)
 801a918:	f005 fcc0 	bl	802029c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801a91c:	68bb      	ldr	r3, [r7, #8]
 801a91e:	2b00      	cmp	r3, #0
 801a920:	d106      	bne.n	801a930 <tcp_output_segment+0x34>
 801a922:	4b63      	ldr	r3, [pc, #396]	@ (801aab0 <tcp_output_segment+0x1b4>)
 801a924:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801a928:	4964      	ldr	r1, [pc, #400]	@ (801aabc <tcp_output_segment+0x1c0>)
 801a92a:	4863      	ldr	r0, [pc, #396]	@ (801aab8 <tcp_output_segment+0x1bc>)
 801a92c:	f005 fcb6 	bl	802029c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d106      	bne.n	801a944 <tcp_output_segment+0x48>
 801a936:	4b5e      	ldr	r3, [pc, #376]	@ (801aab0 <tcp_output_segment+0x1b4>)
 801a938:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801a93c:	4960      	ldr	r1, [pc, #384]	@ (801aac0 <tcp_output_segment+0x1c4>)
 801a93e:	485e      	ldr	r0, [pc, #376]	@ (801aab8 <tcp_output_segment+0x1bc>)
 801a940:	f005 fcac 	bl	802029c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a944:	68f8      	ldr	r0, [r7, #12]
 801a946:	f7ff ffb9 	bl	801a8bc <tcp_output_segment_busy>
 801a94a:	4603      	mov	r3, r0
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d001      	beq.n	801a954 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a950:	2300      	movs	r3, #0
 801a952:	e0a9      	b.n	801aaa8 <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a954:	68bb      	ldr	r3, [r7, #8]
 801a956:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801a958:	68fb      	ldr	r3, [r7, #12]
 801a95a:	68dc      	ldr	r4, [r3, #12]
 801a95c:	4610      	mov	r0, r2
 801a95e:	f7f8 fd53 	bl	8013408 <lwip_htonl>
 801a962:	4603      	mov	r3, r0
 801a964:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a966:	68bb      	ldr	r3, [r7, #8]
 801a968:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	68dc      	ldr	r4, [r3, #12]
 801a96e:	4610      	mov	r0, r2
 801a970:	f7f8 fd34 	bl	80133dc <lwip_htons>
 801a974:	4603      	mov	r3, r0
 801a976:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a978:	68bb      	ldr	r3, [r7, #8]
 801a97a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a97c:	68ba      	ldr	r2, [r7, #8]
 801a97e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801a980:	441a      	add	r2, r3
 801a982:	68bb      	ldr	r3, [r7, #8]
 801a984:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	3314      	adds	r3, #20
 801a98c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	7a9b      	ldrb	r3, [r3, #10]
 801a992:	f003 0301 	and.w	r3, r3, #1
 801a996:	2b00      	cmp	r3, #0
 801a998:	d015      	beq.n	801a9c6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a99a:	68bb      	ldr	r3, [r7, #8]
 801a99c:	3304      	adds	r3, #4
 801a99e:	461a      	mov	r2, r3
 801a9a0:	6879      	ldr	r1, [r7, #4]
 801a9a2:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801a9a6:	f7fc f999 	bl	8016cdc <tcp_eff_send_mss_netif>
 801a9aa:	4603      	mov	r3, r0
 801a9ac:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a9ae:	8b7b      	ldrh	r3, [r7, #26]
 801a9b0:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801a9b4:	4618      	mov	r0, r3
 801a9b6:	f7f8 fd27 	bl	8013408 <lwip_htonl>
 801a9ba:	4602      	mov	r2, r0
 801a9bc:	69fb      	ldr	r3, [r7, #28]
 801a9be:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a9c0:	69fb      	ldr	r3, [r7, #28]
 801a9c2:	3304      	adds	r3, #4
 801a9c4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a9c6:	68bb      	ldr	r3, [r7, #8]
 801a9c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801a9cc:	2b00      	cmp	r3, #0
 801a9ce:	da02      	bge.n	801a9d6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a9d0:	68bb      	ldr	r3, [r7, #8]
 801a9d2:	2200      	movs	r2, #0
 801a9d4:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a9da:	2b00      	cmp	r3, #0
 801a9dc:	d10c      	bne.n	801a9f8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a9de:	4b39      	ldr	r3, [pc, #228]	@ (801aac4 <tcp_output_segment+0x1c8>)
 801a9e0:	681a      	ldr	r2, [r3, #0]
 801a9e2:	68bb      	ldr	r3, [r7, #8]
 801a9e4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	68db      	ldr	r3, [r3, #12]
 801a9ea:	685b      	ldr	r3, [r3, #4]
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f7f8 fd0b 	bl	8013408 <lwip_htonl>
 801a9f2:	4602      	mov	r2, r0
 801a9f4:	68bb      	ldr	r3, [r7, #8]
 801a9f6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	68da      	ldr	r2, [r3, #12]
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	685b      	ldr	r3, [r3, #4]
 801aa00:	685b      	ldr	r3, [r3, #4]
 801aa02:	1ad3      	subs	r3, r2, r3
 801aa04:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	685b      	ldr	r3, [r3, #4]
 801aa0a:	8959      	ldrh	r1, [r3, #10]
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	685b      	ldr	r3, [r3, #4]
 801aa10:	8b3a      	ldrh	r2, [r7, #24]
 801aa12:	1a8a      	subs	r2, r1, r2
 801aa14:	b292      	uxth	r2, r2
 801aa16:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	685b      	ldr	r3, [r3, #4]
 801aa1c:	8919      	ldrh	r1, [r3, #8]
 801aa1e:	68fb      	ldr	r3, [r7, #12]
 801aa20:	685b      	ldr	r3, [r3, #4]
 801aa22:	8b3a      	ldrh	r2, [r7, #24]
 801aa24:	1a8a      	subs	r2, r1, r2
 801aa26:	b292      	uxth	r2, r2
 801aa28:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801aa2a:	68fb      	ldr	r3, [r7, #12]
 801aa2c:	685b      	ldr	r3, [r3, #4]
 801aa2e:	68fa      	ldr	r2, [r7, #12]
 801aa30:	68d2      	ldr	r2, [r2, #12]
 801aa32:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801aa34:	68fb      	ldr	r3, [r7, #12]
 801aa36:	68db      	ldr	r3, [r3, #12]
 801aa38:	2200      	movs	r2, #0
 801aa3a:	741a      	strb	r2, [r3, #16]
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	68da      	ldr	r2, [r3, #12]
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	7a9b      	ldrb	r3, [r3, #10]
 801aa48:	f003 0301 	and.w	r3, r3, #1
 801aa4c:	2b00      	cmp	r3, #0
 801aa4e:	d001      	beq.n	801aa54 <tcp_output_segment+0x158>
 801aa50:	2318      	movs	r3, #24
 801aa52:	e000      	b.n	801aa56 <tcp_output_segment+0x15a>
 801aa54:	2314      	movs	r3, #20
 801aa56:	4413      	add	r3, r2
 801aa58:	69fa      	ldr	r2, [r7, #28]
 801aa5a:	429a      	cmp	r2, r3
 801aa5c:	d006      	beq.n	801aa6c <tcp_output_segment+0x170>
 801aa5e:	4b14      	ldr	r3, [pc, #80]	@ (801aab0 <tcp_output_segment+0x1b4>)
 801aa60:	f240 621c 	movw	r2, #1564	@ 0x61c
 801aa64:	4918      	ldr	r1, [pc, #96]	@ (801aac8 <tcp_output_segment+0x1cc>)
 801aa66:	4814      	ldr	r0, [pc, #80]	@ (801aab8 <tcp_output_segment+0x1bc>)
 801aa68:	f005 fc18 	bl	802029c <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801aa6c:	4b17      	ldr	r3, [pc, #92]	@ (801aacc <tcp_output_segment+0x1d0>)
 801aa6e:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801aa72:	3301      	adds	r3, #1
 801aa74:	b29a      	uxth	r2, r3
 801aa76:	4b15      	ldr	r3, [pc, #84]	@ (801aacc <tcp_output_segment+0x1d0>)
 801aa78:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801aa7c:	68fb      	ldr	r3, [r7, #12]
 801aa7e:	6858      	ldr	r0, [r3, #4]
 801aa80:	68b9      	ldr	r1, [r7, #8]
 801aa82:	68bb      	ldr	r3, [r7, #8]
 801aa84:	1d1c      	adds	r4, r3, #4
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	7add      	ldrb	r5, [r3, #11]
 801aa8a:	68bb      	ldr	r3, [r7, #8]
 801aa8c:	7a9b      	ldrb	r3, [r3, #10]
 801aa8e:	687a      	ldr	r2, [r7, #4]
 801aa90:	9202      	str	r2, [sp, #8]
 801aa92:	2206      	movs	r2, #6
 801aa94:	9201      	str	r2, [sp, #4]
 801aa96:	9300      	str	r3, [sp, #0]
 801aa98:	462b      	mov	r3, r5
 801aa9a:	4622      	mov	r2, r4
 801aa9c:	f002 fec4 	bl	801d828 <ip4_output_if>
 801aaa0:	4603      	mov	r3, r0
 801aaa2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801aaa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801aaa8:	4618      	mov	r0, r3
 801aaaa:	3720      	adds	r7, #32
 801aaac:	46bd      	mov	sp, r7
 801aaae:	bdb0      	pop	{r4, r5, r7, pc}
 801aab0:	08023530 	.word	0x08023530
 801aab4:	08023af4 	.word	0x08023af4
 801aab8:	08023584 	.word	0x08023584
 801aabc:	08023b14 	.word	0x08023b14
 801aac0:	08023b34 	.word	0x08023b34
 801aac4:	200253a8 	.word	0x200253a8
 801aac8:	08023b58 	.word	0x08023b58
 801aacc:	200252ac 	.word	0x200252ac

0801aad0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801aad0:	b5b0      	push	{r4, r5, r7, lr}
 801aad2:	b084      	sub	sp, #16
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d106      	bne.n	801aaec <tcp_rexmit_rto_prepare+0x1c>
 801aade:	4b31      	ldr	r3, [pc, #196]	@ (801aba4 <tcp_rexmit_rto_prepare+0xd4>)
 801aae0:	f240 6263 	movw	r2, #1635	@ 0x663
 801aae4:	4930      	ldr	r1, [pc, #192]	@ (801aba8 <tcp_rexmit_rto_prepare+0xd8>)
 801aae6:	4831      	ldr	r0, [pc, #196]	@ (801abac <tcp_rexmit_rto_prepare+0xdc>)
 801aae8:	f005 fbd8 	bl	802029c <iprintf>

  if (pcb->unacked == NULL) {
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aaf0:	2b00      	cmp	r3, #0
 801aaf2:	d102      	bne.n	801aafa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801aaf4:	f06f 0305 	mvn.w	r3, #5
 801aaf8:	e050      	b.n	801ab9c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801aafe:	60fb      	str	r3, [r7, #12]
 801ab00:	e00b      	b.n	801ab1a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801ab02:	68f8      	ldr	r0, [r7, #12]
 801ab04:	f7ff feda 	bl	801a8bc <tcp_output_segment_busy>
 801ab08:	4603      	mov	r3, r0
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d002      	beq.n	801ab14 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801ab0e:	f06f 0305 	mvn.w	r3, #5
 801ab12:	e043      	b.n	801ab9c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	60fb      	str	r3, [r7, #12]
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d1ef      	bne.n	801ab02 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801ab22:	68f8      	ldr	r0, [r7, #12]
 801ab24:	f7ff feca 	bl	801a8bc <tcp_output_segment_busy>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d002      	beq.n	801ab34 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801ab2e:	f06f 0305 	mvn.w	r3, #5
 801ab32:	e033      	b.n	801ab9c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	2200      	movs	r2, #0
 801ab48:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	8b5b      	ldrh	r3, [r3, #26]
 801ab4e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801ab52:	b29a      	uxth	r2, r3
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	68db      	ldr	r3, [r3, #12]
 801ab5c:	685b      	ldr	r3, [r3, #4]
 801ab5e:	4618      	mov	r0, r3
 801ab60:	f7f8 fc52 	bl	8013408 <lwip_htonl>
 801ab64:	4604      	mov	r4, r0
 801ab66:	68fb      	ldr	r3, [r7, #12]
 801ab68:	891b      	ldrh	r3, [r3, #8]
 801ab6a:	461d      	mov	r5, r3
 801ab6c:	68fb      	ldr	r3, [r7, #12]
 801ab6e:	68db      	ldr	r3, [r3, #12]
 801ab70:	899b      	ldrh	r3, [r3, #12]
 801ab72:	b29b      	uxth	r3, r3
 801ab74:	4618      	mov	r0, r3
 801ab76:	f7f8 fc31 	bl	80133dc <lwip_htons>
 801ab7a:	4603      	mov	r3, r0
 801ab7c:	b2db      	uxtb	r3, r3
 801ab7e:	f003 0303 	and.w	r3, r3, #3
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d001      	beq.n	801ab8a <tcp_rexmit_rto_prepare+0xba>
 801ab86:	2301      	movs	r3, #1
 801ab88:	e000      	b.n	801ab8c <tcp_rexmit_rto_prepare+0xbc>
 801ab8a:	2300      	movs	r3, #0
 801ab8c:	442b      	add	r3, r5
 801ab8e:	18e2      	adds	r2, r4, r3
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	2200      	movs	r2, #0
 801ab98:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801ab9a:	2300      	movs	r3, #0
}
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	3710      	adds	r7, #16
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bdb0      	pop	{r4, r5, r7, pc}
 801aba4:	08023530 	.word	0x08023530
 801aba8:	08023b6c 	.word	0x08023b6c
 801abac:	08023584 	.word	0x08023584

0801abb0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b082      	sub	sp, #8
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d106      	bne.n	801abcc <tcp_rexmit_rto_commit+0x1c>
 801abbe:	4b0d      	ldr	r3, [pc, #52]	@ (801abf4 <tcp_rexmit_rto_commit+0x44>)
 801abc0:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801abc4:	490c      	ldr	r1, [pc, #48]	@ (801abf8 <tcp_rexmit_rto_commit+0x48>)
 801abc6:	480d      	ldr	r0, [pc, #52]	@ (801abfc <tcp_rexmit_rto_commit+0x4c>)
 801abc8:	f005 fb68 	bl	802029c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801abd2:	2bff      	cmp	r3, #255	@ 0xff
 801abd4:	d007      	beq.n	801abe6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801abdc:	3301      	adds	r3, #1
 801abde:	b2da      	uxtb	r2, r3
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801abe6:	6878      	ldr	r0, [r7, #4]
 801abe8:	f7ff fc74 	bl	801a4d4 <tcp_output>
}
 801abec:	bf00      	nop
 801abee:	3708      	adds	r7, #8
 801abf0:	46bd      	mov	sp, r7
 801abf2:	bd80      	pop	{r7, pc}
 801abf4:	08023530 	.word	0x08023530
 801abf8:	08023b90 	.word	0x08023b90
 801abfc:	08023584 	.word	0x08023584

0801ac00 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801ac00:	b580      	push	{r7, lr}
 801ac02:	b082      	sub	sp, #8
 801ac04:	af00      	add	r7, sp, #0
 801ac06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d106      	bne.n	801ac1c <tcp_rexmit_rto+0x1c>
 801ac0e:	4b0a      	ldr	r3, [pc, #40]	@ (801ac38 <tcp_rexmit_rto+0x38>)
 801ac10:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801ac14:	4909      	ldr	r1, [pc, #36]	@ (801ac3c <tcp_rexmit_rto+0x3c>)
 801ac16:	480a      	ldr	r0, [pc, #40]	@ (801ac40 <tcp_rexmit_rto+0x40>)
 801ac18:	f005 fb40 	bl	802029c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801ac1c:	6878      	ldr	r0, [r7, #4]
 801ac1e:	f7ff ff57 	bl	801aad0 <tcp_rexmit_rto_prepare>
 801ac22:	4603      	mov	r3, r0
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d102      	bne.n	801ac2e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801ac28:	6878      	ldr	r0, [r7, #4]
 801ac2a:	f7ff ffc1 	bl	801abb0 <tcp_rexmit_rto_commit>
  }
}
 801ac2e:	bf00      	nop
 801ac30:	3708      	adds	r7, #8
 801ac32:	46bd      	mov	sp, r7
 801ac34:	bd80      	pop	{r7, pc}
 801ac36:	bf00      	nop
 801ac38:	08023530 	.word	0x08023530
 801ac3c:	08023bb4 	.word	0x08023bb4
 801ac40:	08023584 	.word	0x08023584

0801ac44 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801ac44:	b590      	push	{r4, r7, lr}
 801ac46:	b085      	sub	sp, #20
 801ac48:	af00      	add	r7, sp, #0
 801ac4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	2b00      	cmp	r3, #0
 801ac50:	d106      	bne.n	801ac60 <tcp_rexmit+0x1c>
 801ac52:	4b2f      	ldr	r3, [pc, #188]	@ (801ad10 <tcp_rexmit+0xcc>)
 801ac54:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801ac58:	492e      	ldr	r1, [pc, #184]	@ (801ad14 <tcp_rexmit+0xd0>)
 801ac5a:	482f      	ldr	r0, [pc, #188]	@ (801ad18 <tcp_rexmit+0xd4>)
 801ac5c:	f005 fb1e 	bl	802029c <iprintf>

  if (pcb->unacked == NULL) {
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d102      	bne.n	801ac6e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ac68:	f06f 0305 	mvn.w	r3, #5
 801ac6c:	e04c      	b.n	801ad08 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ac72:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ac74:	68b8      	ldr	r0, [r7, #8]
 801ac76:	f7ff fe21 	bl	801a8bc <tcp_output_segment_busy>
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	2b00      	cmp	r3, #0
 801ac7e:	d002      	beq.n	801ac86 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ac80:	f06f 0305 	mvn.w	r3, #5
 801ac84:	e040      	b.n	801ad08 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ac86:	68bb      	ldr	r3, [r7, #8]
 801ac88:	681a      	ldr	r2, [r3, #0]
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801ac8e:	687b      	ldr	r3, [r7, #4]
 801ac90:	336c      	adds	r3, #108	@ 0x6c
 801ac92:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ac94:	e002      	b.n	801ac9c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ac96:	68fb      	ldr	r3, [r7, #12]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ac9c:	68fb      	ldr	r3, [r7, #12]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	d011      	beq.n	801acc8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801aca4:	68fb      	ldr	r3, [r7, #12]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	68db      	ldr	r3, [r3, #12]
 801acaa:	685b      	ldr	r3, [r3, #4]
 801acac:	4618      	mov	r0, r3
 801acae:	f7f8 fbab 	bl	8013408 <lwip_htonl>
 801acb2:	4604      	mov	r4, r0
 801acb4:	68bb      	ldr	r3, [r7, #8]
 801acb6:	68db      	ldr	r3, [r3, #12]
 801acb8:	685b      	ldr	r3, [r3, #4]
 801acba:	4618      	mov	r0, r3
 801acbc:	f7f8 fba4 	bl	8013408 <lwip_htonl>
 801acc0:	4603      	mov	r3, r0
 801acc2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	dbe6      	blt.n	801ac96 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	681a      	ldr	r2, [r3, #0]
 801accc:	68bb      	ldr	r3, [r7, #8]
 801acce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801acd0:	68fb      	ldr	r3, [r7, #12]
 801acd2:	68ba      	ldr	r2, [r7, #8]
 801acd4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801acd6:	68bb      	ldr	r3, [r7, #8]
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d103      	bne.n	801ace6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	2200      	movs	r2, #0
 801ace2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801acec:	2bff      	cmp	r3, #255	@ 0xff
 801acee:	d007      	beq.n	801ad00 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801acf6:	3301      	adds	r3, #1
 801acf8:	b2da      	uxtb	r2, r3
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	2200      	movs	r2, #0
 801ad04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801ad06:	2300      	movs	r3, #0
}
 801ad08:	4618      	mov	r0, r3
 801ad0a:	3714      	adds	r7, #20
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	bd90      	pop	{r4, r7, pc}
 801ad10:	08023530 	.word	0x08023530
 801ad14:	08023bd0 	.word	0x08023bd0
 801ad18:	08023584 	.word	0x08023584

0801ad1c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b082      	sub	sp, #8
 801ad20:	af00      	add	r7, sp, #0
 801ad22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ad24:	687b      	ldr	r3, [r7, #4]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d106      	bne.n	801ad38 <tcp_rexmit_fast+0x1c>
 801ad2a:	4b2a      	ldr	r3, [pc, #168]	@ (801add4 <tcp_rexmit_fast+0xb8>)
 801ad2c:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801ad30:	4929      	ldr	r1, [pc, #164]	@ (801add8 <tcp_rexmit_fast+0xbc>)
 801ad32:	482a      	ldr	r0, [pc, #168]	@ (801addc <tcp_rexmit_fast+0xc0>)
 801ad34:	f005 fab2 	bl	802029c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d045      	beq.n	801adcc <tcp_rexmit_fast+0xb0>
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	8b5b      	ldrh	r3, [r3, #26]
 801ad44:	f003 0304 	and.w	r3, r3, #4
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d13f      	bne.n	801adcc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801ad4c:	6878      	ldr	r0, [r7, #4]
 801ad4e:	f7ff ff79 	bl	801ac44 <tcp_rexmit>
 801ad52:	4603      	mov	r3, r0
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d139      	bne.n	801adcc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801ad64:	4293      	cmp	r3, r2
 801ad66:	bf28      	it	cs
 801ad68:	4613      	movcs	r3, r2
 801ad6a:	b29b      	uxth	r3, r3
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	da00      	bge.n	801ad72 <tcp_rexmit_fast+0x56>
 801ad70:	3301      	adds	r3, #1
 801ad72:	105b      	asrs	r3, r3, #1
 801ad74:	b29a      	uxth	r2, r3
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801ad82:	461a      	mov	r2, r3
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ad88:	005b      	lsls	r3, r3, #1
 801ad8a:	429a      	cmp	r2, r3
 801ad8c:	d206      	bcs.n	801ad9c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ad92:	005b      	lsls	r3, r3, #1
 801ad94:	b29a      	uxth	r2, r3
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801ada6:	4619      	mov	r1, r3
 801ada8:	0049      	lsls	r1, r1, #1
 801adaa:	440b      	add	r3, r1
 801adac:	b29b      	uxth	r3, r3
 801adae:	4413      	add	r3, r2
 801adb0:	b29a      	uxth	r2, r3
 801adb2:	687b      	ldr	r3, [r7, #4]
 801adb4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	8b5b      	ldrh	r3, [r3, #26]
 801adbc:	f043 0304 	orr.w	r3, r3, #4
 801adc0:	b29a      	uxth	r2, r3
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	2200      	movs	r2, #0
 801adca:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801adcc:	bf00      	nop
 801adce:	3708      	adds	r7, #8
 801add0:	46bd      	mov	sp, r7
 801add2:	bd80      	pop	{r7, pc}
 801add4:	08023530 	.word	0x08023530
 801add8:	08023be8 	.word	0x08023be8
 801addc:	08023584 	.word	0x08023584

0801ade0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ade0:	b580      	push	{r7, lr}
 801ade2:	b086      	sub	sp, #24
 801ade4:	af00      	add	r7, sp, #0
 801ade6:	60f8      	str	r0, [r7, #12]
 801ade8:	607b      	str	r3, [r7, #4]
 801adea:	460b      	mov	r3, r1
 801adec:	817b      	strh	r3, [r7, #10]
 801adee:	4613      	mov	r3, r2
 801adf0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801adf2:	897a      	ldrh	r2, [r7, #10]
 801adf4:	893b      	ldrh	r3, [r7, #8]
 801adf6:	4413      	add	r3, r2
 801adf8:	b29b      	uxth	r3, r3
 801adfa:	3314      	adds	r3, #20
 801adfc:	b29b      	uxth	r3, r3
 801adfe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ae02:	4619      	mov	r1, r3
 801ae04:	2022      	movs	r0, #34	@ 0x22
 801ae06:	f7f9 fcc3 	bl	8014790 <pbuf_alloc>
 801ae0a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ae0c:	697b      	ldr	r3, [r7, #20]
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d04d      	beq.n	801aeae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ae12:	897b      	ldrh	r3, [r7, #10]
 801ae14:	3313      	adds	r3, #19
 801ae16:	697a      	ldr	r2, [r7, #20]
 801ae18:	8952      	ldrh	r2, [r2, #10]
 801ae1a:	4293      	cmp	r3, r2
 801ae1c:	db06      	blt.n	801ae2c <tcp_output_alloc_header_common+0x4c>
 801ae1e:	4b26      	ldr	r3, [pc, #152]	@ (801aeb8 <tcp_output_alloc_header_common+0xd8>)
 801ae20:	f240 7223 	movw	r2, #1827	@ 0x723
 801ae24:	4925      	ldr	r1, [pc, #148]	@ (801aebc <tcp_output_alloc_header_common+0xdc>)
 801ae26:	4826      	ldr	r0, [pc, #152]	@ (801aec0 <tcp_output_alloc_header_common+0xe0>)
 801ae28:	f005 fa38 	bl	802029c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ae2c:	697b      	ldr	r3, [r7, #20]
 801ae2e:	685b      	ldr	r3, [r3, #4]
 801ae30:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ae32:	8c3b      	ldrh	r3, [r7, #32]
 801ae34:	4618      	mov	r0, r3
 801ae36:	f7f8 fad1 	bl	80133dc <lwip_htons>
 801ae3a:	4603      	mov	r3, r0
 801ae3c:	461a      	mov	r2, r3
 801ae3e:	693b      	ldr	r3, [r7, #16]
 801ae40:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ae42:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801ae44:	4618      	mov	r0, r3
 801ae46:	f7f8 fac9 	bl	80133dc <lwip_htons>
 801ae4a:	4603      	mov	r3, r0
 801ae4c:	461a      	mov	r2, r3
 801ae4e:	693b      	ldr	r3, [r7, #16]
 801ae50:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ae52:	693b      	ldr	r3, [r7, #16]
 801ae54:	687a      	ldr	r2, [r7, #4]
 801ae56:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ae58:	68f8      	ldr	r0, [r7, #12]
 801ae5a:	f7f8 fad5 	bl	8013408 <lwip_htonl>
 801ae5e:	4602      	mov	r2, r0
 801ae60:	693b      	ldr	r3, [r7, #16]
 801ae62:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ae64:	897b      	ldrh	r3, [r7, #10]
 801ae66:	089b      	lsrs	r3, r3, #2
 801ae68:	b29b      	uxth	r3, r3
 801ae6a:	3305      	adds	r3, #5
 801ae6c:	b29b      	uxth	r3, r3
 801ae6e:	031b      	lsls	r3, r3, #12
 801ae70:	b29a      	uxth	r2, r3
 801ae72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801ae76:	b29b      	uxth	r3, r3
 801ae78:	4313      	orrs	r3, r2
 801ae7a:	b29b      	uxth	r3, r3
 801ae7c:	4618      	mov	r0, r3
 801ae7e:	f7f8 faad 	bl	80133dc <lwip_htons>
 801ae82:	4603      	mov	r3, r0
 801ae84:	461a      	mov	r2, r3
 801ae86:	693b      	ldr	r3, [r7, #16]
 801ae88:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ae8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801ae8c:	4618      	mov	r0, r3
 801ae8e:	f7f8 faa5 	bl	80133dc <lwip_htons>
 801ae92:	4603      	mov	r3, r0
 801ae94:	461a      	mov	r2, r3
 801ae96:	693b      	ldr	r3, [r7, #16]
 801ae98:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ae9a:	693b      	ldr	r3, [r7, #16]
 801ae9c:	2200      	movs	r2, #0
 801ae9e:	741a      	strb	r2, [r3, #16]
 801aea0:	2200      	movs	r2, #0
 801aea2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801aea4:	693b      	ldr	r3, [r7, #16]
 801aea6:	2200      	movs	r2, #0
 801aea8:	749a      	strb	r2, [r3, #18]
 801aeaa:	2200      	movs	r2, #0
 801aeac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801aeae:	697b      	ldr	r3, [r7, #20]
}
 801aeb0:	4618      	mov	r0, r3
 801aeb2:	3718      	adds	r7, #24
 801aeb4:	46bd      	mov	sp, r7
 801aeb6:	bd80      	pop	{r7, pc}
 801aeb8:	08023530 	.word	0x08023530
 801aebc:	08023c08 	.word	0x08023c08
 801aec0:	08023584 	.word	0x08023584

0801aec4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801aec4:	b5b0      	push	{r4, r5, r7, lr}
 801aec6:	b08a      	sub	sp, #40	@ 0x28
 801aec8:	af04      	add	r7, sp, #16
 801aeca:	60f8      	str	r0, [r7, #12]
 801aecc:	607b      	str	r3, [r7, #4]
 801aece:	460b      	mov	r3, r1
 801aed0:	817b      	strh	r3, [r7, #10]
 801aed2:	4613      	mov	r3, r2
 801aed4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d106      	bne.n	801aeea <tcp_output_alloc_header+0x26>
 801aedc:	4b15      	ldr	r3, [pc, #84]	@ (801af34 <tcp_output_alloc_header+0x70>)
 801aede:	f240 7242 	movw	r2, #1858	@ 0x742
 801aee2:	4915      	ldr	r1, [pc, #84]	@ (801af38 <tcp_output_alloc_header+0x74>)
 801aee4:	4815      	ldr	r0, [pc, #84]	@ (801af3c <tcp_output_alloc_header+0x78>)
 801aee6:	f005 f9d9 	bl	802029c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801aeea:	68fb      	ldr	r3, [r7, #12]
 801aeec:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	8adb      	ldrh	r3, [r3, #22]
 801aef2:	68fa      	ldr	r2, [r7, #12]
 801aef4:	8b12      	ldrh	r2, [r2, #24]
 801aef6:	68f9      	ldr	r1, [r7, #12]
 801aef8:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801aefa:	893d      	ldrh	r5, [r7, #8]
 801aefc:	897c      	ldrh	r4, [r7, #10]
 801aefe:	9103      	str	r1, [sp, #12]
 801af00:	2110      	movs	r1, #16
 801af02:	9102      	str	r1, [sp, #8]
 801af04:	9201      	str	r2, [sp, #4]
 801af06:	9300      	str	r3, [sp, #0]
 801af08:	687b      	ldr	r3, [r7, #4]
 801af0a:	462a      	mov	r2, r5
 801af0c:	4621      	mov	r1, r4
 801af0e:	f7ff ff67 	bl	801ade0 <tcp_output_alloc_header_common>
 801af12:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801af14:	697b      	ldr	r3, [r7, #20]
 801af16:	2b00      	cmp	r3, #0
 801af18:	d006      	beq.n	801af28 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af1e:	68fa      	ldr	r2, [r7, #12]
 801af20:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801af22:	441a      	add	r2, r3
 801af24:	68fb      	ldr	r3, [r7, #12]
 801af26:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801af28:	697b      	ldr	r3, [r7, #20]
}
 801af2a:	4618      	mov	r0, r3
 801af2c:	3718      	adds	r7, #24
 801af2e:	46bd      	mov	sp, r7
 801af30:	bdb0      	pop	{r4, r5, r7, pc}
 801af32:	bf00      	nop
 801af34:	08023530 	.word	0x08023530
 801af38:	08023c38 	.word	0x08023c38
 801af3c:	08023584 	.word	0x08023584

0801af40 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b088      	sub	sp, #32
 801af44:	af00      	add	r7, sp, #0
 801af46:	60f8      	str	r0, [r7, #12]
 801af48:	60b9      	str	r1, [r7, #8]
 801af4a:	4611      	mov	r1, r2
 801af4c:	461a      	mov	r2, r3
 801af4e:	460b      	mov	r3, r1
 801af50:	71fb      	strb	r3, [r7, #7]
 801af52:	4613      	mov	r3, r2
 801af54:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801af56:	2300      	movs	r3, #0
 801af58:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801af5a:	68bb      	ldr	r3, [r7, #8]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d106      	bne.n	801af6e <tcp_output_fill_options+0x2e>
 801af60:	4b12      	ldr	r3, [pc, #72]	@ (801afac <tcp_output_fill_options+0x6c>)
 801af62:	f240 7256 	movw	r2, #1878	@ 0x756
 801af66:	4912      	ldr	r1, [pc, #72]	@ (801afb0 <tcp_output_fill_options+0x70>)
 801af68:	4812      	ldr	r0, [pc, #72]	@ (801afb4 <tcp_output_fill_options+0x74>)
 801af6a:	f005 f997 	bl	802029c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801af6e:	68bb      	ldr	r3, [r7, #8]
 801af70:	685b      	ldr	r3, [r3, #4]
 801af72:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801af74:	69bb      	ldr	r3, [r7, #24]
 801af76:	3314      	adds	r3, #20
 801af78:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801af7a:	8bfb      	ldrh	r3, [r7, #30]
 801af7c:	009b      	lsls	r3, r3, #2
 801af7e:	461a      	mov	r2, r3
 801af80:	79fb      	ldrb	r3, [r7, #7]
 801af82:	009b      	lsls	r3, r3, #2
 801af84:	f003 0304 	and.w	r3, r3, #4
 801af88:	4413      	add	r3, r2
 801af8a:	3314      	adds	r3, #20
 801af8c:	69ba      	ldr	r2, [r7, #24]
 801af8e:	4413      	add	r3, r2
 801af90:	697a      	ldr	r2, [r7, #20]
 801af92:	429a      	cmp	r2, r3
 801af94:	d006      	beq.n	801afa4 <tcp_output_fill_options+0x64>
 801af96:	4b05      	ldr	r3, [pc, #20]	@ (801afac <tcp_output_fill_options+0x6c>)
 801af98:	f240 7275 	movw	r2, #1909	@ 0x775
 801af9c:	4906      	ldr	r1, [pc, #24]	@ (801afb8 <tcp_output_fill_options+0x78>)
 801af9e:	4805      	ldr	r0, [pc, #20]	@ (801afb4 <tcp_output_fill_options+0x74>)
 801afa0:	f005 f97c 	bl	802029c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801afa4:	bf00      	nop
 801afa6:	3720      	adds	r7, #32
 801afa8:	46bd      	mov	sp, r7
 801afaa:	bd80      	pop	{r7, pc}
 801afac:	08023530 	.word	0x08023530
 801afb0:	08023c60 	.word	0x08023c60
 801afb4:	08023584 	.word	0x08023584
 801afb8:	08023b58 	.word	0x08023b58

0801afbc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801afbc:	b580      	push	{r7, lr}
 801afbe:	b08a      	sub	sp, #40	@ 0x28
 801afc0:	af04      	add	r7, sp, #16
 801afc2:	60f8      	str	r0, [r7, #12]
 801afc4:	60b9      	str	r1, [r7, #8]
 801afc6:	607a      	str	r2, [r7, #4]
 801afc8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801afca:	68bb      	ldr	r3, [r7, #8]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d106      	bne.n	801afde <tcp_output_control_segment+0x22>
 801afd0:	4b20      	ldr	r3, [pc, #128]	@ (801b054 <tcp_output_control_segment+0x98>)
 801afd2:	f240 7287 	movw	r2, #1927	@ 0x787
 801afd6:	4920      	ldr	r1, [pc, #128]	@ (801b058 <tcp_output_control_segment+0x9c>)
 801afd8:	4820      	ldr	r0, [pc, #128]	@ (801b05c <tcp_output_control_segment+0xa0>)
 801afda:	f005 f95f 	bl	802029c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801afde:	683a      	ldr	r2, [r7, #0]
 801afe0:	6879      	ldr	r1, [r7, #4]
 801afe2:	68f8      	ldr	r0, [r7, #12]
 801afe4:	f7fe faa6 	bl	8019534 <tcp_route>
 801afe8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801afea:	693b      	ldr	r3, [r7, #16]
 801afec:	2b00      	cmp	r3, #0
 801afee:	d102      	bne.n	801aff6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801aff0:	23fc      	movs	r3, #252	@ 0xfc
 801aff2:	75fb      	strb	r3, [r7, #23]
 801aff4:	e024      	b.n	801b040 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d006      	beq.n	801b00a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801affc:	68fb      	ldr	r3, [r7, #12]
 801affe:	7adb      	ldrb	r3, [r3, #11]
 801b000:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b002:	68fb      	ldr	r3, [r7, #12]
 801b004:	7a9b      	ldrb	r3, [r3, #10]
 801b006:	757b      	strb	r3, [r7, #21]
 801b008:	e003      	b.n	801b012 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b00a:	23ff      	movs	r3, #255	@ 0xff
 801b00c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b00e:	2300      	movs	r3, #0
 801b010:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801b012:	4b13      	ldr	r3, [pc, #76]	@ (801b060 <tcp_output_control_segment+0xa4>)
 801b014:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b018:	3301      	adds	r3, #1
 801b01a:	b29a      	uxth	r2, r3
 801b01c:	4b10      	ldr	r3, [pc, #64]	@ (801b060 <tcp_output_control_segment+0xa4>)
 801b01e:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b022:	7dba      	ldrb	r2, [r7, #22]
 801b024:	693b      	ldr	r3, [r7, #16]
 801b026:	9302      	str	r3, [sp, #8]
 801b028:	2306      	movs	r3, #6
 801b02a:	9301      	str	r3, [sp, #4]
 801b02c:	7d7b      	ldrb	r3, [r7, #21]
 801b02e:	9300      	str	r3, [sp, #0]
 801b030:	4613      	mov	r3, r2
 801b032:	683a      	ldr	r2, [r7, #0]
 801b034:	6879      	ldr	r1, [r7, #4]
 801b036:	68b8      	ldr	r0, [r7, #8]
 801b038:	f002 fbf6 	bl	801d828 <ip4_output_if>
 801b03c:	4603      	mov	r3, r0
 801b03e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b040:	68b8      	ldr	r0, [r7, #8]
 801b042:	f7f9 fe89 	bl	8014d58 <pbuf_free>
  return err;
 801b046:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b04a:	4618      	mov	r0, r3
 801b04c:	3718      	adds	r7, #24
 801b04e:	46bd      	mov	sp, r7
 801b050:	bd80      	pop	{r7, pc}
 801b052:	bf00      	nop
 801b054:	08023530 	.word	0x08023530
 801b058:	08023c88 	.word	0x08023c88
 801b05c:	08023584 	.word	0x08023584
 801b060:	200252ac 	.word	0x200252ac

0801b064 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b064:	b590      	push	{r4, r7, lr}
 801b066:	b08b      	sub	sp, #44	@ 0x2c
 801b068:	af04      	add	r7, sp, #16
 801b06a:	60f8      	str	r0, [r7, #12]
 801b06c:	60b9      	str	r1, [r7, #8]
 801b06e:	607a      	str	r2, [r7, #4]
 801b070:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b072:	683b      	ldr	r3, [r7, #0]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d106      	bne.n	801b086 <tcp_rst+0x22>
 801b078:	4b1f      	ldr	r3, [pc, #124]	@ (801b0f8 <tcp_rst+0x94>)
 801b07a:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801b07e:	491f      	ldr	r1, [pc, #124]	@ (801b0fc <tcp_rst+0x98>)
 801b080:	481f      	ldr	r0, [pc, #124]	@ (801b100 <tcp_rst+0x9c>)
 801b082:	f005 f90b 	bl	802029c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d106      	bne.n	801b09a <tcp_rst+0x36>
 801b08c:	4b1a      	ldr	r3, [pc, #104]	@ (801b0f8 <tcp_rst+0x94>)
 801b08e:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801b092:	491c      	ldr	r1, [pc, #112]	@ (801b104 <tcp_rst+0xa0>)
 801b094:	481a      	ldr	r0, [pc, #104]	@ (801b100 <tcp_rst+0x9c>)
 801b096:	f005 f901 	bl	802029c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b09a:	2300      	movs	r3, #0
 801b09c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b09e:	f246 0308 	movw	r3, #24584	@ 0x6008
 801b0a2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b0a4:	7dfb      	ldrb	r3, [r7, #23]
 801b0a6:	b29c      	uxth	r4, r3
 801b0a8:	68b8      	ldr	r0, [r7, #8]
 801b0aa:	f7f8 f9ad 	bl	8013408 <lwip_htonl>
 801b0ae:	4602      	mov	r2, r0
 801b0b0:	8abb      	ldrh	r3, [r7, #20]
 801b0b2:	9303      	str	r3, [sp, #12]
 801b0b4:	2314      	movs	r3, #20
 801b0b6:	9302      	str	r3, [sp, #8]
 801b0b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801b0ba:	9301      	str	r3, [sp, #4]
 801b0bc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b0be:	9300      	str	r3, [sp, #0]
 801b0c0:	4613      	mov	r3, r2
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	4621      	mov	r1, r4
 801b0c6:	6878      	ldr	r0, [r7, #4]
 801b0c8:	f7ff fe8a 	bl	801ade0 <tcp_output_alloc_header_common>
 801b0cc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b0ce:	693b      	ldr	r3, [r7, #16]
 801b0d0:	2b00      	cmp	r3, #0
 801b0d2:	d00c      	beq.n	801b0ee <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b0d4:	7dfb      	ldrb	r3, [r7, #23]
 801b0d6:	2200      	movs	r2, #0
 801b0d8:	6939      	ldr	r1, [r7, #16]
 801b0da:	68f8      	ldr	r0, [r7, #12]
 801b0dc:	f7ff ff30 	bl	801af40 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b0e2:	683a      	ldr	r2, [r7, #0]
 801b0e4:	6939      	ldr	r1, [r7, #16]
 801b0e6:	68f8      	ldr	r0, [r7, #12]
 801b0e8:	f7ff ff68 	bl	801afbc <tcp_output_control_segment>
 801b0ec:	e000      	b.n	801b0f0 <tcp_rst+0x8c>
    return;
 801b0ee:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b0f0:	371c      	adds	r7, #28
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd90      	pop	{r4, r7, pc}
 801b0f6:	bf00      	nop
 801b0f8:	08023530 	.word	0x08023530
 801b0fc:	08023cb4 	.word	0x08023cb4
 801b100:	08023584 	.word	0x08023584
 801b104:	08023cd0 	.word	0x08023cd0

0801b108 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b108:	b590      	push	{r4, r7, lr}
 801b10a:	b087      	sub	sp, #28
 801b10c:	af00      	add	r7, sp, #0
 801b10e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b110:	2300      	movs	r3, #0
 801b112:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b114:	2300      	movs	r3, #0
 801b116:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	2b00      	cmp	r3, #0
 801b11c:	d106      	bne.n	801b12c <tcp_send_empty_ack+0x24>
 801b11e:	4b28      	ldr	r3, [pc, #160]	@ (801b1c0 <tcp_send_empty_ack+0xb8>)
 801b120:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801b124:	4927      	ldr	r1, [pc, #156]	@ (801b1c4 <tcp_send_empty_ack+0xbc>)
 801b126:	4828      	ldr	r0, [pc, #160]	@ (801b1c8 <tcp_send_empty_ack+0xc0>)
 801b128:	f005 f8b8 	bl	802029c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b12c:	7dfb      	ldrb	r3, [r7, #23]
 801b12e:	009b      	lsls	r3, r3, #2
 801b130:	b2db      	uxtb	r3, r3
 801b132:	f003 0304 	and.w	r3, r3, #4
 801b136:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b138:	7d7b      	ldrb	r3, [r7, #21]
 801b13a:	b29c      	uxth	r4, r3
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b140:	4618      	mov	r0, r3
 801b142:	f7f8 f961 	bl	8013408 <lwip_htonl>
 801b146:	4603      	mov	r3, r0
 801b148:	2200      	movs	r2, #0
 801b14a:	4621      	mov	r1, r4
 801b14c:	6878      	ldr	r0, [r7, #4]
 801b14e:	f7ff feb9 	bl	801aec4 <tcp_output_alloc_header>
 801b152:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b154:	693b      	ldr	r3, [r7, #16]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d109      	bne.n	801b16e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	8b5b      	ldrh	r3, [r3, #26]
 801b15e:	f043 0303 	orr.w	r3, r3, #3
 801b162:	b29a      	uxth	r2, r3
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b168:	f06f 0301 	mvn.w	r3, #1
 801b16c:	e023      	b.n	801b1b6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b16e:	7dbb      	ldrb	r3, [r7, #22]
 801b170:	7dfa      	ldrb	r2, [r7, #23]
 801b172:	6939      	ldr	r1, [r7, #16]
 801b174:	6878      	ldr	r0, [r7, #4]
 801b176:	f7ff fee3 	bl	801af40 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b17a:	687a      	ldr	r2, [r7, #4]
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	3304      	adds	r3, #4
 801b180:	6939      	ldr	r1, [r7, #16]
 801b182:	6878      	ldr	r0, [r7, #4]
 801b184:	f7ff ff1a 	bl	801afbc <tcp_output_control_segment>
 801b188:	4603      	mov	r3, r0
 801b18a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b18c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b190:	2b00      	cmp	r3, #0
 801b192:	d007      	beq.n	801b1a4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	8b5b      	ldrh	r3, [r3, #26]
 801b198:	f043 0303 	orr.w	r3, r3, #3
 801b19c:	b29a      	uxth	r2, r3
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	835a      	strh	r2, [r3, #26]
 801b1a2:	e006      	b.n	801b1b2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	8b5b      	ldrh	r3, [r3, #26]
 801b1a8:	f023 0303 	bic.w	r3, r3, #3
 801b1ac:	b29a      	uxth	r2, r3
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b1b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	371c      	adds	r7, #28
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd90      	pop	{r4, r7, pc}
 801b1be:	bf00      	nop
 801b1c0:	08023530 	.word	0x08023530
 801b1c4:	08023cec 	.word	0x08023cec
 801b1c8:	08023584 	.word	0x08023584

0801b1cc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b1cc:	b590      	push	{r4, r7, lr}
 801b1ce:	b087      	sub	sp, #28
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b1d4:	2300      	movs	r3, #0
 801b1d6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	d106      	bne.n	801b1ec <tcp_keepalive+0x20>
 801b1de:	4b18      	ldr	r3, [pc, #96]	@ (801b240 <tcp_keepalive+0x74>)
 801b1e0:	f640 0224 	movw	r2, #2084	@ 0x824
 801b1e4:	4917      	ldr	r1, [pc, #92]	@ (801b244 <tcp_keepalive+0x78>)
 801b1e6:	4818      	ldr	r0, [pc, #96]	@ (801b248 <tcp_keepalive+0x7c>)
 801b1e8:	f005 f858 	bl	802029c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b1ec:	7dfb      	ldrb	r3, [r7, #23]
 801b1ee:	b29c      	uxth	r4, r3
 801b1f0:	687b      	ldr	r3, [r7, #4]
 801b1f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b1f4:	3b01      	subs	r3, #1
 801b1f6:	4618      	mov	r0, r3
 801b1f8:	f7f8 f906 	bl	8013408 <lwip_htonl>
 801b1fc:	4603      	mov	r3, r0
 801b1fe:	2200      	movs	r2, #0
 801b200:	4621      	mov	r1, r4
 801b202:	6878      	ldr	r0, [r7, #4]
 801b204:	f7ff fe5e 	bl	801aec4 <tcp_output_alloc_header>
 801b208:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b20a:	693b      	ldr	r3, [r7, #16]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d102      	bne.n	801b216 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b214:	e010      	b.n	801b238 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b216:	7dfb      	ldrb	r3, [r7, #23]
 801b218:	2200      	movs	r2, #0
 801b21a:	6939      	ldr	r1, [r7, #16]
 801b21c:	6878      	ldr	r0, [r7, #4]
 801b21e:	f7ff fe8f 	bl	801af40 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b222:	687a      	ldr	r2, [r7, #4]
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	3304      	adds	r3, #4
 801b228:	6939      	ldr	r1, [r7, #16]
 801b22a:	6878      	ldr	r0, [r7, #4]
 801b22c:	f7ff fec6 	bl	801afbc <tcp_output_control_segment>
 801b230:	4603      	mov	r3, r0
 801b232:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b238:	4618      	mov	r0, r3
 801b23a:	371c      	adds	r7, #28
 801b23c:	46bd      	mov	sp, r7
 801b23e:	bd90      	pop	{r4, r7, pc}
 801b240:	08023530 	.word	0x08023530
 801b244:	08023d0c 	.word	0x08023d0c
 801b248:	08023584 	.word	0x08023584

0801b24c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b24c:	b590      	push	{r4, r7, lr}
 801b24e:	b08b      	sub	sp, #44	@ 0x2c
 801b250:	af00      	add	r7, sp, #0
 801b252:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b254:	2300      	movs	r3, #0
 801b256:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	d106      	bne.n	801b26e <tcp_zero_window_probe+0x22>
 801b260:	4b4c      	ldr	r3, [pc, #304]	@ (801b394 <tcp_zero_window_probe+0x148>)
 801b262:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b266:	494c      	ldr	r1, [pc, #304]	@ (801b398 <tcp_zero_window_probe+0x14c>)
 801b268:	484c      	ldr	r0, [pc, #304]	@ (801b39c <tcp_zero_window_probe+0x150>)
 801b26a:	f005 f817 	bl	802029c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b272:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801b274:	6a3b      	ldr	r3, [r7, #32]
 801b276:	2b00      	cmp	r3, #0
 801b278:	d101      	bne.n	801b27e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b27a:	2300      	movs	r3, #0
 801b27c:	e086      	b.n	801b38c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b284:	2bff      	cmp	r3, #255	@ 0xff
 801b286:	d007      	beq.n	801b298 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b28e:	3301      	adds	r3, #1
 801b290:	b2da      	uxtb	r2, r3
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b298:	6a3b      	ldr	r3, [r7, #32]
 801b29a:	68db      	ldr	r3, [r3, #12]
 801b29c:	899b      	ldrh	r3, [r3, #12]
 801b29e:	b29b      	uxth	r3, r3
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	f7f8 f89b 	bl	80133dc <lwip_htons>
 801b2a6:	4603      	mov	r3, r0
 801b2a8:	b2db      	uxtb	r3, r3
 801b2aa:	f003 0301 	and.w	r3, r3, #1
 801b2ae:	2b00      	cmp	r3, #0
 801b2b0:	d005      	beq.n	801b2be <tcp_zero_window_probe+0x72>
 801b2b2:	6a3b      	ldr	r3, [r7, #32]
 801b2b4:	891b      	ldrh	r3, [r3, #8]
 801b2b6:	2b00      	cmp	r3, #0
 801b2b8:	d101      	bne.n	801b2be <tcp_zero_window_probe+0x72>
 801b2ba:	2301      	movs	r3, #1
 801b2bc:	e000      	b.n	801b2c0 <tcp_zero_window_probe+0x74>
 801b2be:	2300      	movs	r3, #0
 801b2c0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801b2c2:	7ffb      	ldrb	r3, [r7, #31]
 801b2c4:	2b00      	cmp	r3, #0
 801b2c6:	bf0c      	ite	eq
 801b2c8:	2301      	moveq	r3, #1
 801b2ca:	2300      	movne	r3, #0
 801b2cc:	b2db      	uxtb	r3, r3
 801b2ce:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801b2d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b2d4:	b299      	uxth	r1, r3
 801b2d6:	6a3b      	ldr	r3, [r7, #32]
 801b2d8:	68db      	ldr	r3, [r3, #12]
 801b2da:	685b      	ldr	r3, [r3, #4]
 801b2dc:	8bba      	ldrh	r2, [r7, #28]
 801b2de:	6878      	ldr	r0, [r7, #4]
 801b2e0:	f7ff fdf0 	bl	801aec4 <tcp_output_alloc_header>
 801b2e4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801b2e6:	69bb      	ldr	r3, [r7, #24]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d102      	bne.n	801b2f2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801b2ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b2f0:	e04c      	b.n	801b38c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801b2f2:	69bb      	ldr	r3, [r7, #24]
 801b2f4:	685b      	ldr	r3, [r3, #4]
 801b2f6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801b2f8:	7ffb      	ldrb	r3, [r7, #31]
 801b2fa:	2b00      	cmp	r3, #0
 801b2fc:	d011      	beq.n	801b322 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801b2fe:	697b      	ldr	r3, [r7, #20]
 801b300:	899b      	ldrh	r3, [r3, #12]
 801b302:	b29b      	uxth	r3, r3
 801b304:	b21b      	sxth	r3, r3
 801b306:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801b30a:	b21c      	sxth	r4, r3
 801b30c:	2011      	movs	r0, #17
 801b30e:	f7f8 f865 	bl	80133dc <lwip_htons>
 801b312:	4603      	mov	r3, r0
 801b314:	b21b      	sxth	r3, r3
 801b316:	4323      	orrs	r3, r4
 801b318:	b21b      	sxth	r3, r3
 801b31a:	b29a      	uxth	r2, r3
 801b31c:	697b      	ldr	r3, [r7, #20]
 801b31e:	819a      	strh	r2, [r3, #12]
 801b320:	e010      	b.n	801b344 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801b322:	69bb      	ldr	r3, [r7, #24]
 801b324:	685b      	ldr	r3, [r3, #4]
 801b326:	3314      	adds	r3, #20
 801b328:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801b32a:	6a3b      	ldr	r3, [r7, #32]
 801b32c:	6858      	ldr	r0, [r3, #4]
 801b32e:	6a3b      	ldr	r3, [r7, #32]
 801b330:	685b      	ldr	r3, [r3, #4]
 801b332:	891a      	ldrh	r2, [r3, #8]
 801b334:	6a3b      	ldr	r3, [r7, #32]
 801b336:	891b      	ldrh	r3, [r3, #8]
 801b338:	1ad3      	subs	r3, r2, r3
 801b33a:	b29b      	uxth	r3, r3
 801b33c:	2201      	movs	r2, #1
 801b33e:	6939      	ldr	r1, [r7, #16]
 801b340:	f7f9 ff10 	bl	8015164 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801b344:	6a3b      	ldr	r3, [r7, #32]
 801b346:	68db      	ldr	r3, [r3, #12]
 801b348:	685b      	ldr	r3, [r3, #4]
 801b34a:	4618      	mov	r0, r3
 801b34c:	f7f8 f85c 	bl	8013408 <lwip_htonl>
 801b350:	4603      	mov	r3, r0
 801b352:	3301      	adds	r3, #1
 801b354:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801b35a:	68fb      	ldr	r3, [r7, #12]
 801b35c:	1ad3      	subs	r3, r2, r3
 801b35e:	2b00      	cmp	r3, #0
 801b360:	da02      	bge.n	801b368 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	68fa      	ldr	r2, [r7, #12]
 801b366:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b368:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801b36c:	2200      	movs	r2, #0
 801b36e:	69b9      	ldr	r1, [r7, #24]
 801b370:	6878      	ldr	r0, [r7, #4]
 801b372:	f7ff fde5 	bl	801af40 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b376:	687a      	ldr	r2, [r7, #4]
 801b378:	687b      	ldr	r3, [r7, #4]
 801b37a:	3304      	adds	r3, #4
 801b37c:	69b9      	ldr	r1, [r7, #24]
 801b37e:	6878      	ldr	r0, [r7, #4]
 801b380:	f7ff fe1c 	bl	801afbc <tcp_output_control_segment>
 801b384:	4603      	mov	r3, r0
 801b386:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b388:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b38c:	4618      	mov	r0, r3
 801b38e:	372c      	adds	r7, #44	@ 0x2c
 801b390:	46bd      	mov	sp, r7
 801b392:	bd90      	pop	{r4, r7, pc}
 801b394:	08023530 	.word	0x08023530
 801b398:	08023d28 	.word	0x08023d28
 801b39c:	08023584 	.word	0x08023584

0801b3a0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801b3a8:	f7f9 ffd2 	bl	8015350 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801b3ac:	4b0a      	ldr	r3, [pc, #40]	@ (801b3d8 <tcpip_tcp_timer+0x38>)
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	d103      	bne.n	801b3bc <tcpip_tcp_timer+0x1c>
 801b3b4:	4b09      	ldr	r3, [pc, #36]	@ (801b3dc <tcpip_tcp_timer+0x3c>)
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	2b00      	cmp	r3, #0
 801b3ba:	d005      	beq.n	801b3c8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b3bc:	2200      	movs	r2, #0
 801b3be:	4908      	ldr	r1, [pc, #32]	@ (801b3e0 <tcpip_tcp_timer+0x40>)
 801b3c0:	20fa      	movs	r0, #250	@ 0xfa
 801b3c2:	f000 f8f3 	bl	801b5ac <sys_timeout>
 801b3c6:	e003      	b.n	801b3d0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801b3c8:	4b06      	ldr	r3, [pc, #24]	@ (801b3e4 <tcpip_tcp_timer+0x44>)
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	601a      	str	r2, [r3, #0]
  }
}
 801b3ce:	bf00      	nop
 801b3d0:	bf00      	nop
 801b3d2:	3708      	adds	r7, #8
 801b3d4:	46bd      	mov	sp, r7
 801b3d6:	bd80      	pop	{r7, pc}
 801b3d8:	200253b4 	.word	0x200253b4
 801b3dc:	200253b8 	.word	0x200253b8
 801b3e0:	0801b3a1 	.word	0x0801b3a1
 801b3e4:	20025400 	.word	0x20025400

0801b3e8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801b3e8:	b580      	push	{r7, lr}
 801b3ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801b3ec:	4b0a      	ldr	r3, [pc, #40]	@ (801b418 <tcp_timer_needed+0x30>)
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d10f      	bne.n	801b414 <tcp_timer_needed+0x2c>
 801b3f4:	4b09      	ldr	r3, [pc, #36]	@ (801b41c <tcp_timer_needed+0x34>)
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	2b00      	cmp	r3, #0
 801b3fa:	d103      	bne.n	801b404 <tcp_timer_needed+0x1c>
 801b3fc:	4b08      	ldr	r3, [pc, #32]	@ (801b420 <tcp_timer_needed+0x38>)
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d007      	beq.n	801b414 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801b404:	4b04      	ldr	r3, [pc, #16]	@ (801b418 <tcp_timer_needed+0x30>)
 801b406:	2201      	movs	r2, #1
 801b408:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801b40a:	2200      	movs	r2, #0
 801b40c:	4905      	ldr	r1, [pc, #20]	@ (801b424 <tcp_timer_needed+0x3c>)
 801b40e:	20fa      	movs	r0, #250	@ 0xfa
 801b410:	f000 f8cc 	bl	801b5ac <sys_timeout>
  }
}
 801b414:	bf00      	nop
 801b416:	bd80      	pop	{r7, pc}
 801b418:	20025400 	.word	0x20025400
 801b41c:	200253b4 	.word	0x200253b4
 801b420:	200253b8 	.word	0x200253b8
 801b424:	0801b3a1 	.word	0x0801b3a1

0801b428 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801b428:	b580      	push	{r7, lr}
 801b42a:	b086      	sub	sp, #24
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	60f8      	str	r0, [r7, #12]
 801b430:	60b9      	str	r1, [r7, #8]
 801b432:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801b434:	200a      	movs	r0, #10
 801b436:	f7f8 fd6f 	bl	8013f18 <memp_malloc>
 801b43a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801b43c:	693b      	ldr	r3, [r7, #16]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d109      	bne.n	801b456 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801b442:	693b      	ldr	r3, [r7, #16]
 801b444:	2b00      	cmp	r3, #0
 801b446:	d151      	bne.n	801b4ec <sys_timeout_abs+0xc4>
 801b448:	4b2a      	ldr	r3, [pc, #168]	@ (801b4f4 <sys_timeout_abs+0xcc>)
 801b44a:	22be      	movs	r2, #190	@ 0xbe
 801b44c:	492a      	ldr	r1, [pc, #168]	@ (801b4f8 <sys_timeout_abs+0xd0>)
 801b44e:	482b      	ldr	r0, [pc, #172]	@ (801b4fc <sys_timeout_abs+0xd4>)
 801b450:	f004 ff24 	bl	802029c <iprintf>
    return;
 801b454:	e04a      	b.n	801b4ec <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801b456:	693b      	ldr	r3, [r7, #16]
 801b458:	2200      	movs	r2, #0
 801b45a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801b45c:	693b      	ldr	r3, [r7, #16]
 801b45e:	68ba      	ldr	r2, [r7, #8]
 801b460:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801b462:	693b      	ldr	r3, [r7, #16]
 801b464:	687a      	ldr	r2, [r7, #4]
 801b466:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801b468:	693b      	ldr	r3, [r7, #16]
 801b46a:	68fa      	ldr	r2, [r7, #12]
 801b46c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801b46e:	4b24      	ldr	r3, [pc, #144]	@ (801b500 <sys_timeout_abs+0xd8>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	2b00      	cmp	r3, #0
 801b474:	d103      	bne.n	801b47e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801b476:	4a22      	ldr	r2, [pc, #136]	@ (801b500 <sys_timeout_abs+0xd8>)
 801b478:	693b      	ldr	r3, [r7, #16]
 801b47a:	6013      	str	r3, [r2, #0]
    return;
 801b47c:	e037      	b.n	801b4ee <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801b47e:	693b      	ldr	r3, [r7, #16]
 801b480:	685a      	ldr	r2, [r3, #4]
 801b482:	4b1f      	ldr	r3, [pc, #124]	@ (801b500 <sys_timeout_abs+0xd8>)
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	685b      	ldr	r3, [r3, #4]
 801b488:	1ad3      	subs	r3, r2, r3
 801b48a:	0fdb      	lsrs	r3, r3, #31
 801b48c:	f003 0301 	and.w	r3, r3, #1
 801b490:	b2db      	uxtb	r3, r3
 801b492:	2b00      	cmp	r3, #0
 801b494:	d007      	beq.n	801b4a6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801b496:	4b1a      	ldr	r3, [pc, #104]	@ (801b500 <sys_timeout_abs+0xd8>)
 801b498:	681a      	ldr	r2, [r3, #0]
 801b49a:	693b      	ldr	r3, [r7, #16]
 801b49c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801b49e:	4a18      	ldr	r2, [pc, #96]	@ (801b500 <sys_timeout_abs+0xd8>)
 801b4a0:	693b      	ldr	r3, [r7, #16]
 801b4a2:	6013      	str	r3, [r2, #0]
 801b4a4:	e023      	b.n	801b4ee <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801b4a6:	4b16      	ldr	r3, [pc, #88]	@ (801b500 <sys_timeout_abs+0xd8>)
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	617b      	str	r3, [r7, #20]
 801b4ac:	e01a      	b.n	801b4e4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801b4ae:	697b      	ldr	r3, [r7, #20]
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d00b      	beq.n	801b4ce <sys_timeout_abs+0xa6>
 801b4b6:	693b      	ldr	r3, [r7, #16]
 801b4b8:	685a      	ldr	r2, [r3, #4]
 801b4ba:	697b      	ldr	r3, [r7, #20]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	685b      	ldr	r3, [r3, #4]
 801b4c0:	1ad3      	subs	r3, r2, r3
 801b4c2:	0fdb      	lsrs	r3, r3, #31
 801b4c4:	f003 0301 	and.w	r3, r3, #1
 801b4c8:	b2db      	uxtb	r3, r3
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d007      	beq.n	801b4de <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801b4ce:	697b      	ldr	r3, [r7, #20]
 801b4d0:	681a      	ldr	r2, [r3, #0]
 801b4d2:	693b      	ldr	r3, [r7, #16]
 801b4d4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801b4d6:	697b      	ldr	r3, [r7, #20]
 801b4d8:	693a      	ldr	r2, [r7, #16]
 801b4da:	601a      	str	r2, [r3, #0]
        break;
 801b4dc:	e007      	b.n	801b4ee <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801b4de:	697b      	ldr	r3, [r7, #20]
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	617b      	str	r3, [r7, #20]
 801b4e4:	697b      	ldr	r3, [r7, #20]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d1e1      	bne.n	801b4ae <sys_timeout_abs+0x86>
 801b4ea:	e000      	b.n	801b4ee <sys_timeout_abs+0xc6>
    return;
 801b4ec:	bf00      	nop
      }
    }
  }
}
 801b4ee:	3718      	adds	r7, #24
 801b4f0:	46bd      	mov	sp, r7
 801b4f2:	bd80      	pop	{r7, pc}
 801b4f4:	08023d4c 	.word	0x08023d4c
 801b4f8:	08023d80 	.word	0x08023d80
 801b4fc:	08023dc0 	.word	0x08023dc0
 801b500:	200253f8 	.word	0x200253f8

0801b504 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801b504:	b580      	push	{r7, lr}
 801b506:	b086      	sub	sp, #24
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801b510:	697b      	ldr	r3, [r7, #20]
 801b512:	685b      	ldr	r3, [r3, #4]
 801b514:	4798      	blx	r3

  now = sys_now();
 801b516:	f7f1 fbab 	bl	800cc70 <sys_now>
 801b51a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801b51c:	697b      	ldr	r3, [r7, #20]
 801b51e:	681a      	ldr	r2, [r3, #0]
 801b520:	4b0f      	ldr	r3, [pc, #60]	@ (801b560 <lwip_cyclic_timer+0x5c>)
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	4413      	add	r3, r2
 801b526:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801b528:	68fa      	ldr	r2, [r7, #12]
 801b52a:	693b      	ldr	r3, [r7, #16]
 801b52c:	1ad3      	subs	r3, r2, r3
 801b52e:	0fdb      	lsrs	r3, r3, #31
 801b530:	f003 0301 	and.w	r3, r3, #1
 801b534:	b2db      	uxtb	r3, r3
 801b536:	2b00      	cmp	r3, #0
 801b538:	d009      	beq.n	801b54e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801b53a:	697b      	ldr	r3, [r7, #20]
 801b53c:	681a      	ldr	r2, [r3, #0]
 801b53e:	693b      	ldr	r3, [r7, #16]
 801b540:	4413      	add	r3, r2
 801b542:	687a      	ldr	r2, [r7, #4]
 801b544:	4907      	ldr	r1, [pc, #28]	@ (801b564 <lwip_cyclic_timer+0x60>)
 801b546:	4618      	mov	r0, r3
 801b548:	f7ff ff6e 	bl	801b428 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801b54c:	e004      	b.n	801b558 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801b54e:	687a      	ldr	r2, [r7, #4]
 801b550:	4904      	ldr	r1, [pc, #16]	@ (801b564 <lwip_cyclic_timer+0x60>)
 801b552:	68f8      	ldr	r0, [r7, #12]
 801b554:	f7ff ff68 	bl	801b428 <sys_timeout_abs>
}
 801b558:	bf00      	nop
 801b55a:	3718      	adds	r7, #24
 801b55c:	46bd      	mov	sp, r7
 801b55e:	bd80      	pop	{r7, pc}
 801b560:	200253fc 	.word	0x200253fc
 801b564:	0801b505 	.word	0x0801b505

0801b568 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801b568:	b580      	push	{r7, lr}
 801b56a:	b082      	sub	sp, #8
 801b56c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b56e:	2301      	movs	r3, #1
 801b570:	607b      	str	r3, [r7, #4]
 801b572:	e00e      	b.n	801b592 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801b574:	4a0b      	ldr	r2, [pc, #44]	@ (801b5a4 <sys_timeouts_init+0x3c>)
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	00db      	lsls	r3, r3, #3
 801b580:	4a08      	ldr	r2, [pc, #32]	@ (801b5a4 <sys_timeouts_init+0x3c>)
 801b582:	4413      	add	r3, r2
 801b584:	461a      	mov	r2, r3
 801b586:	4908      	ldr	r1, [pc, #32]	@ (801b5a8 <sys_timeouts_init+0x40>)
 801b588:	f000 f810 	bl	801b5ac <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	3301      	adds	r3, #1
 801b590:	607b      	str	r3, [r7, #4]
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	2b02      	cmp	r3, #2
 801b596:	d9ed      	bls.n	801b574 <sys_timeouts_init+0xc>
  }
}
 801b598:	bf00      	nop
 801b59a:	bf00      	nop
 801b59c:	3708      	adds	r7, #8
 801b59e:	46bd      	mov	sp, r7
 801b5a0:	bd80      	pop	{r7, pc}
 801b5a2:	bf00      	nop
 801b5a4:	08024eac 	.word	0x08024eac
 801b5a8:	0801b505 	.word	0x0801b505

0801b5ac <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801b5ac:	b580      	push	{r7, lr}
 801b5ae:	b086      	sub	sp, #24
 801b5b0:	af00      	add	r7, sp, #0
 801b5b2:	60f8      	str	r0, [r7, #12]
 801b5b4:	60b9      	str	r1, [r7, #8]
 801b5b6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b5be:	d306      	bcc.n	801b5ce <sys_timeout+0x22>
 801b5c0:	4b0a      	ldr	r3, [pc, #40]	@ (801b5ec <sys_timeout+0x40>)
 801b5c2:	f240 1229 	movw	r2, #297	@ 0x129
 801b5c6:	490a      	ldr	r1, [pc, #40]	@ (801b5f0 <sys_timeout+0x44>)
 801b5c8:	480a      	ldr	r0, [pc, #40]	@ (801b5f4 <sys_timeout+0x48>)
 801b5ca:	f004 fe67 	bl	802029c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801b5ce:	f7f1 fb4f 	bl	800cc70 <sys_now>
 801b5d2:	4602      	mov	r2, r0
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	4413      	add	r3, r2
 801b5d8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801b5da:	687a      	ldr	r2, [r7, #4]
 801b5dc:	68b9      	ldr	r1, [r7, #8]
 801b5de:	6978      	ldr	r0, [r7, #20]
 801b5e0:	f7ff ff22 	bl	801b428 <sys_timeout_abs>
#endif
}
 801b5e4:	bf00      	nop
 801b5e6:	3718      	adds	r7, #24
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	bd80      	pop	{r7, pc}
 801b5ec:	08023d4c 	.word	0x08023d4c
 801b5f0:	08023de8 	.word	0x08023de8
 801b5f4:	08023dc0 	.word	0x08023dc0

0801b5f8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801b5f8:	b580      	push	{r7, lr}
 801b5fa:	b084      	sub	sp, #16
 801b5fc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801b5fe:	f7f1 fb37 	bl	800cc70 <sys_now>
 801b602:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801b604:	4b17      	ldr	r3, [pc, #92]	@ (801b664 <sys_check_timeouts+0x6c>)
 801b606:	681b      	ldr	r3, [r3, #0]
 801b608:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801b60a:	68bb      	ldr	r3, [r7, #8]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	d022      	beq.n	801b656 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801b610:	68bb      	ldr	r3, [r7, #8]
 801b612:	685b      	ldr	r3, [r3, #4]
 801b614:	68fa      	ldr	r2, [r7, #12]
 801b616:	1ad3      	subs	r3, r2, r3
 801b618:	0fdb      	lsrs	r3, r3, #31
 801b61a:	f003 0301 	and.w	r3, r3, #1
 801b61e:	b2db      	uxtb	r3, r3
 801b620:	2b00      	cmp	r3, #0
 801b622:	d11a      	bne.n	801b65a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801b624:	68bb      	ldr	r3, [r7, #8]
 801b626:	681b      	ldr	r3, [r3, #0]
 801b628:	4a0e      	ldr	r2, [pc, #56]	@ (801b664 <sys_check_timeouts+0x6c>)
 801b62a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801b62c:	68bb      	ldr	r3, [r7, #8]
 801b62e:	689b      	ldr	r3, [r3, #8]
 801b630:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801b632:	68bb      	ldr	r3, [r7, #8]
 801b634:	68db      	ldr	r3, [r3, #12]
 801b636:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801b638:	68bb      	ldr	r3, [r7, #8]
 801b63a:	685b      	ldr	r3, [r3, #4]
 801b63c:	4a0a      	ldr	r2, [pc, #40]	@ (801b668 <sys_check_timeouts+0x70>)
 801b63e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801b640:	68b9      	ldr	r1, [r7, #8]
 801b642:	200a      	movs	r0, #10
 801b644:	f7f8 fce4 	bl	8014010 <memp_free>
    if (handler != NULL) {
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	2b00      	cmp	r3, #0
 801b64c:	d0da      	beq.n	801b604 <sys_check_timeouts+0xc>
      handler(arg);
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	6838      	ldr	r0, [r7, #0]
 801b652:	4798      	blx	r3
  do {
 801b654:	e7d6      	b.n	801b604 <sys_check_timeouts+0xc>
      return;
 801b656:	bf00      	nop
 801b658:	e000      	b.n	801b65c <sys_check_timeouts+0x64>
      return;
 801b65a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801b65c:	3710      	adds	r7, #16
 801b65e:	46bd      	mov	sp, r7
 801b660:	bd80      	pop	{r7, pc}
 801b662:	bf00      	nop
 801b664:	200253f8 	.word	0x200253f8
 801b668:	200253fc 	.word	0x200253fc

0801b66c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801b66c:	b580      	push	{r7, lr}
 801b66e:	b082      	sub	sp, #8
 801b670:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801b672:	4b16      	ldr	r3, [pc, #88]	@ (801b6cc <sys_timeouts_sleeptime+0x60>)
 801b674:	681b      	ldr	r3, [r3, #0]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d102      	bne.n	801b680 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801b67a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b67e:	e020      	b.n	801b6c2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801b680:	f7f1 faf6 	bl	800cc70 <sys_now>
 801b684:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801b686:	4b11      	ldr	r3, [pc, #68]	@ (801b6cc <sys_timeouts_sleeptime+0x60>)
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	685a      	ldr	r2, [r3, #4]
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	1ad3      	subs	r3, r2, r3
 801b690:	0fdb      	lsrs	r3, r3, #31
 801b692:	f003 0301 	and.w	r3, r3, #1
 801b696:	b2db      	uxtb	r3, r3
 801b698:	2b00      	cmp	r3, #0
 801b69a:	d001      	beq.n	801b6a0 <sys_timeouts_sleeptime+0x34>
    return 0;
 801b69c:	2300      	movs	r3, #0
 801b69e:	e010      	b.n	801b6c2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801b6a0:	4b0a      	ldr	r3, [pc, #40]	@ (801b6cc <sys_timeouts_sleeptime+0x60>)
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	685a      	ldr	r2, [r3, #4]
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	1ad3      	subs	r3, r2, r3
 801b6aa:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801b6ac:	683b      	ldr	r3, [r7, #0]
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	da06      	bge.n	801b6c0 <sys_timeouts_sleeptime+0x54>
 801b6b2:	4b07      	ldr	r3, [pc, #28]	@ (801b6d0 <sys_timeouts_sleeptime+0x64>)
 801b6b4:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801b6b8:	4906      	ldr	r1, [pc, #24]	@ (801b6d4 <sys_timeouts_sleeptime+0x68>)
 801b6ba:	4807      	ldr	r0, [pc, #28]	@ (801b6d8 <sys_timeouts_sleeptime+0x6c>)
 801b6bc:	f004 fdee 	bl	802029c <iprintf>
    return ret;
 801b6c0:	683b      	ldr	r3, [r7, #0]
  }
}
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	3708      	adds	r7, #8
 801b6c6:	46bd      	mov	sp, r7
 801b6c8:	bd80      	pop	{r7, pc}
 801b6ca:	bf00      	nop
 801b6cc:	200253f8 	.word	0x200253f8
 801b6d0:	08023d4c 	.word	0x08023d4c
 801b6d4:	08023e20 	.word	0x08023e20
 801b6d8:	08023dc0 	.word	0x08023dc0

0801b6dc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b6e0:	f004 fcdc 	bl	802009c <rand>
 801b6e4:	4603      	mov	r3, r0
 801b6e6:	b29b      	uxth	r3, r3
 801b6e8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801b6ec:	b29b      	uxth	r3, r3
 801b6ee:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801b6f2:	b29a      	uxth	r2, r3
 801b6f4:	4b01      	ldr	r3, [pc, #4]	@ (801b6fc <udp_init+0x20>)
 801b6f6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801b6f8:	bf00      	nop
 801b6fa:	bd80      	pop	{r7, pc}
 801b6fc:	2000002c 	.word	0x2000002c

0801b700 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801b700:	b480      	push	{r7}
 801b702:	b083      	sub	sp, #12
 801b704:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801b706:	2300      	movs	r3, #0
 801b708:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801b70a:	4b17      	ldr	r3, [pc, #92]	@ (801b768 <udp_new_port+0x68>)
 801b70c:	881b      	ldrh	r3, [r3, #0]
 801b70e:	1c5a      	adds	r2, r3, #1
 801b710:	b291      	uxth	r1, r2
 801b712:	4a15      	ldr	r2, [pc, #84]	@ (801b768 <udp_new_port+0x68>)
 801b714:	8011      	strh	r1, [r2, #0]
 801b716:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b71a:	4293      	cmp	r3, r2
 801b71c:	d103      	bne.n	801b726 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801b71e:	4b12      	ldr	r3, [pc, #72]	@ (801b768 <udp_new_port+0x68>)
 801b720:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801b724:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b726:	4b11      	ldr	r3, [pc, #68]	@ (801b76c <udp_new_port+0x6c>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	603b      	str	r3, [r7, #0]
 801b72c:	e011      	b.n	801b752 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801b72e:	683b      	ldr	r3, [r7, #0]
 801b730:	8a5a      	ldrh	r2, [r3, #18]
 801b732:	4b0d      	ldr	r3, [pc, #52]	@ (801b768 <udp_new_port+0x68>)
 801b734:	881b      	ldrh	r3, [r3, #0]
 801b736:	429a      	cmp	r2, r3
 801b738:	d108      	bne.n	801b74c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801b73a:	88fb      	ldrh	r3, [r7, #6]
 801b73c:	3301      	adds	r3, #1
 801b73e:	80fb      	strh	r3, [r7, #6]
 801b740:	88fb      	ldrh	r3, [r7, #6]
 801b742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b746:	d3e0      	bcc.n	801b70a <udp_new_port+0xa>
        return 0;
 801b748:	2300      	movs	r3, #0
 801b74a:	e007      	b.n	801b75c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b74c:	683b      	ldr	r3, [r7, #0]
 801b74e:	68db      	ldr	r3, [r3, #12]
 801b750:	603b      	str	r3, [r7, #0]
 801b752:	683b      	ldr	r3, [r7, #0]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d1ea      	bne.n	801b72e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801b758:	4b03      	ldr	r3, [pc, #12]	@ (801b768 <udp_new_port+0x68>)
 801b75a:	881b      	ldrh	r3, [r3, #0]
}
 801b75c:	4618      	mov	r0, r3
 801b75e:	370c      	adds	r7, #12
 801b760:	46bd      	mov	sp, r7
 801b762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b766:	4770      	bx	lr
 801b768:	2000002c 	.word	0x2000002c
 801b76c:	20025404 	.word	0x20025404

0801b770 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801b770:	b580      	push	{r7, lr}
 801b772:	b084      	sub	sp, #16
 801b774:	af00      	add	r7, sp, #0
 801b776:	60f8      	str	r0, [r7, #12]
 801b778:	60b9      	str	r1, [r7, #8]
 801b77a:	4613      	mov	r3, r2
 801b77c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801b77e:	68fb      	ldr	r3, [r7, #12]
 801b780:	2b00      	cmp	r3, #0
 801b782:	d105      	bne.n	801b790 <udp_input_local_match+0x20>
 801b784:	4b27      	ldr	r3, [pc, #156]	@ (801b824 <udp_input_local_match+0xb4>)
 801b786:	2287      	movs	r2, #135	@ 0x87
 801b788:	4927      	ldr	r1, [pc, #156]	@ (801b828 <udp_input_local_match+0xb8>)
 801b78a:	4828      	ldr	r0, [pc, #160]	@ (801b82c <udp_input_local_match+0xbc>)
 801b78c:	f004 fd86 	bl	802029c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801b790:	68bb      	ldr	r3, [r7, #8]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d105      	bne.n	801b7a2 <udp_input_local_match+0x32>
 801b796:	4b23      	ldr	r3, [pc, #140]	@ (801b824 <udp_input_local_match+0xb4>)
 801b798:	2288      	movs	r2, #136	@ 0x88
 801b79a:	4925      	ldr	r1, [pc, #148]	@ (801b830 <udp_input_local_match+0xc0>)
 801b79c:	4823      	ldr	r0, [pc, #140]	@ (801b82c <udp_input_local_match+0xbc>)
 801b79e:	f004 fd7d 	bl	802029c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b7a2:	68fb      	ldr	r3, [r7, #12]
 801b7a4:	7a1b      	ldrb	r3, [r3, #8]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d00b      	beq.n	801b7c2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	7a1a      	ldrb	r2, [r3, #8]
 801b7ae:	4b21      	ldr	r3, [pc, #132]	@ (801b834 <udp_input_local_match+0xc4>)
 801b7b0:	685b      	ldr	r3, [r3, #4]
 801b7b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b7b6:	3301      	adds	r3, #1
 801b7b8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b7ba:	429a      	cmp	r2, r3
 801b7bc:	d001      	beq.n	801b7c2 <udp_input_local_match+0x52>
    return 0;
 801b7be:	2300      	movs	r3, #0
 801b7c0:	e02b      	b.n	801b81a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801b7c2:	79fb      	ldrb	r3, [r7, #7]
 801b7c4:	2b00      	cmp	r3, #0
 801b7c6:	d018      	beq.n	801b7fa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	2b00      	cmp	r3, #0
 801b7cc:	d013      	beq.n	801b7f6 <udp_input_local_match+0x86>
 801b7ce:	68fb      	ldr	r3, [r7, #12]
 801b7d0:	681b      	ldr	r3, [r3, #0]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d00f      	beq.n	801b7f6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b7d6:	4b17      	ldr	r3, [pc, #92]	@ (801b834 <udp_input_local_match+0xc4>)
 801b7d8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b7da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b7de:	d00a      	beq.n	801b7f6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	681a      	ldr	r2, [r3, #0]
 801b7e4:	4b13      	ldr	r3, [pc, #76]	@ (801b834 <udp_input_local_match+0xc4>)
 801b7e6:	695b      	ldr	r3, [r3, #20]
 801b7e8:	405a      	eors	r2, r3
 801b7ea:	68bb      	ldr	r3, [r7, #8]
 801b7ec:	3308      	adds	r3, #8
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801b7f2:	2b00      	cmp	r3, #0
 801b7f4:	d110      	bne.n	801b818 <udp_input_local_match+0xa8>
          return 1;
 801b7f6:	2301      	movs	r3, #1
 801b7f8:	e00f      	b.n	801b81a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	2b00      	cmp	r3, #0
 801b7fe:	d009      	beq.n	801b814 <udp_input_local_match+0xa4>
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	681b      	ldr	r3, [r3, #0]
 801b804:	2b00      	cmp	r3, #0
 801b806:	d005      	beq.n	801b814 <udp_input_local_match+0xa4>
 801b808:	68fb      	ldr	r3, [r7, #12]
 801b80a:	681a      	ldr	r2, [r3, #0]
 801b80c:	4b09      	ldr	r3, [pc, #36]	@ (801b834 <udp_input_local_match+0xc4>)
 801b80e:	695b      	ldr	r3, [r3, #20]
 801b810:	429a      	cmp	r2, r3
 801b812:	d101      	bne.n	801b818 <udp_input_local_match+0xa8>
        return 1;
 801b814:	2301      	movs	r3, #1
 801b816:	e000      	b.n	801b81a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801b818:	2300      	movs	r3, #0
}
 801b81a:	4618      	mov	r0, r3
 801b81c:	3710      	adds	r7, #16
 801b81e:	46bd      	mov	sp, r7
 801b820:	bd80      	pop	{r7, pc}
 801b822:	bf00      	nop
 801b824:	08023e34 	.word	0x08023e34
 801b828:	08023e64 	.word	0x08023e64
 801b82c:	08023e88 	.word	0x08023e88
 801b830:	08023eb0 	.word	0x08023eb0
 801b834:	2001f0b0 	.word	0x2001f0b0

0801b838 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801b838:	b590      	push	{r4, r7, lr}
 801b83a:	b08d      	sub	sp, #52	@ 0x34
 801b83c:	af02      	add	r7, sp, #8
 801b83e:	6078      	str	r0, [r7, #4]
 801b840:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801b842:	2300      	movs	r3, #0
 801b844:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	2b00      	cmp	r3, #0
 801b84a:	d105      	bne.n	801b858 <udp_input+0x20>
 801b84c:	4b98      	ldr	r3, [pc, #608]	@ (801bab0 <udp_input+0x278>)
 801b84e:	22cf      	movs	r2, #207	@ 0xcf
 801b850:	4998      	ldr	r1, [pc, #608]	@ (801bab4 <udp_input+0x27c>)
 801b852:	4899      	ldr	r0, [pc, #612]	@ (801bab8 <udp_input+0x280>)
 801b854:	f004 fd22 	bl	802029c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801b858:	683b      	ldr	r3, [r7, #0]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d105      	bne.n	801b86a <udp_input+0x32>
 801b85e:	4b94      	ldr	r3, [pc, #592]	@ (801bab0 <udp_input+0x278>)
 801b860:	22d0      	movs	r2, #208	@ 0xd0
 801b862:	4996      	ldr	r1, [pc, #600]	@ (801babc <udp_input+0x284>)
 801b864:	4894      	ldr	r0, [pc, #592]	@ (801bab8 <udp_input+0x280>)
 801b866:	f004 fd19 	bl	802029c <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801b86a:	4b95      	ldr	r3, [pc, #596]	@ (801bac0 <udp_input+0x288>)
 801b86c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801b870:	3301      	adds	r3, #1
 801b872:	b29a      	uxth	r2, r3
 801b874:	4b92      	ldr	r3, [pc, #584]	@ (801bac0 <udp_input+0x288>)
 801b876:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	895b      	ldrh	r3, [r3, #10]
 801b87e:	2b07      	cmp	r3, #7
 801b880:	d813      	bhi.n	801b8aa <udp_input+0x72>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801b882:	4b8f      	ldr	r3, [pc, #572]	@ (801bac0 <udp_input+0x288>)
 801b884:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801b888:	3301      	adds	r3, #1
 801b88a:	b29a      	uxth	r2, r3
 801b88c:	4b8c      	ldr	r3, [pc, #560]	@ (801bac0 <udp_input+0x288>)
 801b88e:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801b892:	4b8b      	ldr	r3, [pc, #556]	@ (801bac0 <udp_input+0x288>)
 801b894:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801b898:	3301      	adds	r3, #1
 801b89a:	b29a      	uxth	r2, r3
 801b89c:	4b88      	ldr	r3, [pc, #544]	@ (801bac0 <udp_input+0x288>)
 801b89e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801b8a2:	6878      	ldr	r0, [r7, #4]
 801b8a4:	f7f9 fa58 	bl	8014d58 <pbuf_free>
    goto end;
 801b8a8:	e0fd      	b.n	801baa6 <udp_input+0x26e>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	685b      	ldr	r3, [r3, #4]
 801b8ae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b8b0:	4b84      	ldr	r3, [pc, #528]	@ (801bac4 <udp_input+0x28c>)
 801b8b2:	695b      	ldr	r3, [r3, #20]
 801b8b4:	4a83      	ldr	r2, [pc, #524]	@ (801bac4 <udp_input+0x28c>)
 801b8b6:	6812      	ldr	r2, [r2, #0]
 801b8b8:	4611      	mov	r1, r2
 801b8ba:	4618      	mov	r0, r3
 801b8bc:	f002 f8a6 	bl	801da0c <ip4_addr_isbroadcast_u32>
 801b8c0:	4603      	mov	r3, r0
 801b8c2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801b8c4:	697b      	ldr	r3, [r7, #20]
 801b8c6:	881b      	ldrh	r3, [r3, #0]
 801b8c8:	b29b      	uxth	r3, r3
 801b8ca:	4618      	mov	r0, r3
 801b8cc:	f7f7 fd86 	bl	80133dc <lwip_htons>
 801b8d0:	4603      	mov	r3, r0
 801b8d2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801b8d4:	697b      	ldr	r3, [r7, #20]
 801b8d6:	885b      	ldrh	r3, [r3, #2]
 801b8d8:	b29b      	uxth	r3, r3
 801b8da:	4618      	mov	r0, r3
 801b8dc:	f7f7 fd7e 	bl	80133dc <lwip_htons>
 801b8e0:	4603      	mov	r3, r0
 801b8e2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801b8e4:	2300      	movs	r3, #0
 801b8e6:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b8f0:	4b75      	ldr	r3, [pc, #468]	@ (801bac8 <udp_input+0x290>)
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	627b      	str	r3, [r7, #36]	@ 0x24
 801b8f6:	e05d      	b.n	801b9b4 <udp_input+0x17c>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801b8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8fa:	8a5b      	ldrh	r3, [r3, #18]
 801b8fc:	89fa      	ldrh	r2, [r7, #14]
 801b8fe:	429a      	cmp	r2, r3
 801b900:	d153      	bne.n	801b9aa <udp_input+0x172>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801b902:	7cfb      	ldrb	r3, [r7, #19]
 801b904:	461a      	mov	r2, r3
 801b906:	6839      	ldr	r1, [r7, #0]
 801b908:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801b90a:	f7ff ff31 	bl	801b770 <udp_input_local_match>
 801b90e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801b910:	2b00      	cmp	r3, #0
 801b912:	d04a      	beq.n	801b9aa <udp_input+0x172>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801b914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b916:	7c1b      	ldrb	r3, [r3, #16]
 801b918:	f003 0304 	and.w	r3, r3, #4
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d11d      	bne.n	801b95c <udp_input+0x124>
        if (uncon_pcb == NULL) {
 801b920:	69fb      	ldr	r3, [r7, #28]
 801b922:	2b00      	cmp	r3, #0
 801b924:	d102      	bne.n	801b92c <udp_input+0xf4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801b926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b928:	61fb      	str	r3, [r7, #28]
 801b92a:	e017      	b.n	801b95c <udp_input+0x124>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801b92c:	7cfb      	ldrb	r3, [r7, #19]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d014      	beq.n	801b95c <udp_input+0x124>
 801b932:	4b64      	ldr	r3, [pc, #400]	@ (801bac4 <udp_input+0x28c>)
 801b934:	695b      	ldr	r3, [r3, #20]
 801b936:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801b93a:	d10f      	bne.n	801b95c <udp_input+0x124>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801b93c:	69fb      	ldr	r3, [r7, #28]
 801b93e:	681a      	ldr	r2, [r3, #0]
 801b940:	683b      	ldr	r3, [r7, #0]
 801b942:	3304      	adds	r3, #4
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	429a      	cmp	r2, r3
 801b948:	d008      	beq.n	801b95c <udp_input+0x124>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801b94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b94c:	681a      	ldr	r2, [r3, #0]
 801b94e:	683b      	ldr	r3, [r7, #0]
 801b950:	3304      	adds	r3, #4
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	429a      	cmp	r2, r3
 801b956:	d101      	bne.n	801b95c <udp_input+0x124>
              /* better match */
              uncon_pcb = pcb;
 801b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b95a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801b95c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b95e:	8a9b      	ldrh	r3, [r3, #20]
 801b960:	8a3a      	ldrh	r2, [r7, #16]
 801b962:	429a      	cmp	r2, r3
 801b964:	d121      	bne.n	801b9aa <udp_input+0x172>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b968:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d005      	beq.n	801b97a <udp_input+0x142>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801b96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b970:	685a      	ldr	r2, [r3, #4]
 801b972:	4b54      	ldr	r3, [pc, #336]	@ (801bac4 <udp_input+0x28c>)
 801b974:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801b976:	429a      	cmp	r2, r3
 801b978:	d117      	bne.n	801b9aa <udp_input+0x172>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801b97a:	6a3b      	ldr	r3, [r7, #32]
 801b97c:	2b00      	cmp	r3, #0
 801b97e:	d00b      	beq.n	801b998 <udp_input+0x160>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b982:	68da      	ldr	r2, [r3, #12]
 801b984:	6a3b      	ldr	r3, [r7, #32]
 801b986:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b988:	4b4f      	ldr	r3, [pc, #316]	@ (801bac8 <udp_input+0x290>)
 801b98a:	681a      	ldr	r2, [r3, #0]
 801b98c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b98e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b990:	4a4d      	ldr	r2, [pc, #308]	@ (801bac8 <udp_input+0x290>)
 801b992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b994:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b996:	e010      	b.n	801b9ba <udp_input+0x182>
          UDP_STATS_INC(udp.cachehit);
 801b998:	4b49      	ldr	r3, [pc, #292]	@ (801bac0 <udp_input+0x288>)
 801b99a:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801b99e:	3301      	adds	r3, #1
 801b9a0:	b29a      	uxth	r2, r3
 801b9a2:	4b47      	ldr	r3, [pc, #284]	@ (801bac0 <udp_input+0x288>)
 801b9a4:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801b9a8:	e007      	b.n	801b9ba <udp_input+0x182>
      }
    }

    prev = pcb;
 801b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9ac:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9b0:	68db      	ldr	r3, [r3, #12]
 801b9b2:	627b      	str	r3, [r7, #36]	@ 0x24
 801b9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d19e      	bne.n	801b8f8 <udp_input+0xc0>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	d101      	bne.n	801b9c4 <udp_input+0x18c>
    pcb = uncon_pcb;
 801b9c0:	69fb      	ldr	r3, [r7, #28]
 801b9c2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d002      	beq.n	801b9d0 <udp_input+0x198>
    for_us = 1;
 801b9ca:	2301      	movs	r3, #1
 801b9cc:	76fb      	strb	r3, [r7, #27]
 801b9ce:	e00a      	b.n	801b9e6 <udp_input+0x1ae>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b9d0:	683b      	ldr	r3, [r7, #0]
 801b9d2:	3304      	adds	r3, #4
 801b9d4:	681a      	ldr	r2, [r3, #0]
 801b9d6:	4b3b      	ldr	r3, [pc, #236]	@ (801bac4 <udp_input+0x28c>)
 801b9d8:	695b      	ldr	r3, [r3, #20]
 801b9da:	429a      	cmp	r2, r3
 801b9dc:	bf0c      	ite	eq
 801b9de:	2301      	moveq	r3, #1
 801b9e0:	2300      	movne	r3, #0
 801b9e2:	b2db      	uxtb	r3, r3
 801b9e4:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b9e6:	7efb      	ldrb	r3, [r7, #27]
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d059      	beq.n	801baa0 <udp_input+0x268>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b9ec:	2108      	movs	r1, #8
 801b9ee:	6878      	ldr	r0, [r7, #4]
 801b9f0:	f7f9 f92c 	bl	8014c4c <pbuf_remove_header>
 801b9f4:	4603      	mov	r3, r0
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d012      	beq.n	801ba20 <udp_input+0x1e8>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b9fa:	4b2d      	ldr	r3, [pc, #180]	@ (801bab0 <udp_input+0x278>)
 801b9fc:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801ba00:	4932      	ldr	r1, [pc, #200]	@ (801bacc <udp_input+0x294>)
 801ba02:	482d      	ldr	r0, [pc, #180]	@ (801bab8 <udp_input+0x280>)
 801ba04:	f004 fc4a 	bl	802029c <iprintf>
      UDP_STATS_INC(udp.drop);
 801ba08:	4b2d      	ldr	r3, [pc, #180]	@ (801bac0 <udp_input+0x288>)
 801ba0a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801ba0e:	3301      	adds	r3, #1
 801ba10:	b29a      	uxth	r2, r3
 801ba12:	4b2b      	ldr	r3, [pc, #172]	@ (801bac0 <udp_input+0x288>)
 801ba14:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ba18:	6878      	ldr	r0, [r7, #4]
 801ba1a:	f7f9 f99d 	bl	8014d58 <pbuf_free>
      goto end;
 801ba1e:	e042      	b.n	801baa6 <udp_input+0x26e>
    }

    if (pcb != NULL) {
 801ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba22:	2b00      	cmp	r3, #0
 801ba24:	d012      	beq.n	801ba4c <udp_input+0x214>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ba26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba28:	699b      	ldr	r3, [r3, #24]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d00a      	beq.n	801ba44 <udp_input+0x20c>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba30:	699c      	ldr	r4, [r3, #24]
 801ba32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba34:	69d8      	ldr	r0, [r3, #28]
 801ba36:	8a3b      	ldrh	r3, [r7, #16]
 801ba38:	9300      	str	r3, [sp, #0]
 801ba3a:	4b25      	ldr	r3, [pc, #148]	@ (801bad0 <udp_input+0x298>)
 801ba3c:	687a      	ldr	r2, [r7, #4]
 801ba3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ba40:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ba42:	e031      	b.n	801baa8 <udp_input+0x270>
        pbuf_free(p);
 801ba44:	6878      	ldr	r0, [r7, #4]
 801ba46:	f7f9 f987 	bl	8014d58 <pbuf_free>
        goto end;
 801ba4a:	e02c      	b.n	801baa6 <udp_input+0x26e>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ba4c:	7cfb      	ldrb	r3, [r7, #19]
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d112      	bne.n	801ba78 <udp_input+0x240>
 801ba52:	4b1c      	ldr	r3, [pc, #112]	@ (801bac4 <udp_input+0x28c>)
 801ba54:	695b      	ldr	r3, [r3, #20]
 801ba56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ba5a:	2be0      	cmp	r3, #224	@ 0xe0
 801ba5c:	d00c      	beq.n	801ba78 <udp_input+0x240>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ba5e:	4b19      	ldr	r3, [pc, #100]	@ (801bac4 <udp_input+0x28c>)
 801ba60:	899b      	ldrh	r3, [r3, #12]
 801ba62:	3308      	adds	r3, #8
 801ba64:	b29b      	uxth	r3, r3
 801ba66:	b21b      	sxth	r3, r3
 801ba68:	4619      	mov	r1, r3
 801ba6a:	6878      	ldr	r0, [r7, #4]
 801ba6c:	f7f9 f961 	bl	8014d32 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ba70:	2103      	movs	r1, #3
 801ba72:	6878      	ldr	r0, [r7, #4]
 801ba74:	f001 fc2e 	bl	801d2d4 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801ba78:	4b11      	ldr	r3, [pc, #68]	@ (801bac0 <udp_input+0x288>)
 801ba7a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801ba7e:	3301      	adds	r3, #1
 801ba80:	b29a      	uxth	r2, r3
 801ba82:	4b0f      	ldr	r3, [pc, #60]	@ (801bac0 <udp_input+0x288>)
 801ba84:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801ba88:	4b0d      	ldr	r3, [pc, #52]	@ (801bac0 <udp_input+0x288>)
 801ba8a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801ba8e:	3301      	adds	r3, #1
 801ba90:	b29a      	uxth	r2, r3
 801ba92:	4b0b      	ldr	r3, [pc, #44]	@ (801bac0 <udp_input+0x288>)
 801ba94:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801ba98:	6878      	ldr	r0, [r7, #4]
 801ba9a:	f7f9 f95d 	bl	8014d58 <pbuf_free>
  return;
 801ba9e:	e003      	b.n	801baa8 <udp_input+0x270>
    pbuf_free(p);
 801baa0:	6878      	ldr	r0, [r7, #4]
 801baa2:	f7f9 f959 	bl	8014d58 <pbuf_free>
  return;
 801baa6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801baa8:	372c      	adds	r7, #44	@ 0x2c
 801baaa:	46bd      	mov	sp, r7
 801baac:	bd90      	pop	{r4, r7, pc}
 801baae:	bf00      	nop
 801bab0:	08023e34 	.word	0x08023e34
 801bab4:	08023ed8 	.word	0x08023ed8
 801bab8:	08023e88 	.word	0x08023e88
 801babc:	08023ef0 	.word	0x08023ef0
 801bac0:	200252ac 	.word	0x200252ac
 801bac4:	2001f0b0 	.word	0x2001f0b0
 801bac8:	20025404 	.word	0x20025404
 801bacc:	08023f0c 	.word	0x08023f0c
 801bad0:	2001f0c0 	.word	0x2001f0c0

0801bad4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801bad4:	b580      	push	{r7, lr}
 801bad6:	b082      	sub	sp, #8
 801bad8:	af00      	add	r7, sp, #0
 801bada:	6078      	str	r0, [r7, #4]
 801badc:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801bade:	687b      	ldr	r3, [r7, #4]
 801bae0:	2b00      	cmp	r3, #0
 801bae2:	d109      	bne.n	801baf8 <udp_send+0x24>
 801bae4:	4b11      	ldr	r3, [pc, #68]	@ (801bb2c <udp_send+0x58>)
 801bae6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801baea:	4911      	ldr	r1, [pc, #68]	@ (801bb30 <udp_send+0x5c>)
 801baec:	4811      	ldr	r0, [pc, #68]	@ (801bb34 <udp_send+0x60>)
 801baee:	f004 fbd5 	bl	802029c <iprintf>
 801baf2:	f06f 030f 	mvn.w	r3, #15
 801baf6:	e015      	b.n	801bb24 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801baf8:	683b      	ldr	r3, [r7, #0]
 801bafa:	2b00      	cmp	r3, #0
 801bafc:	d109      	bne.n	801bb12 <udp_send+0x3e>
 801bafe:	4b0b      	ldr	r3, [pc, #44]	@ (801bb2c <udp_send+0x58>)
 801bb00:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801bb04:	490c      	ldr	r1, [pc, #48]	@ (801bb38 <udp_send+0x64>)
 801bb06:	480b      	ldr	r0, [pc, #44]	@ (801bb34 <udp_send+0x60>)
 801bb08:	f004 fbc8 	bl	802029c <iprintf>
 801bb0c:	f06f 030f 	mvn.w	r3, #15
 801bb10:	e008      	b.n	801bb24 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	1d1a      	adds	r2, r3, #4
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	8a9b      	ldrh	r3, [r3, #20]
 801bb1a:	6839      	ldr	r1, [r7, #0]
 801bb1c:	6878      	ldr	r0, [r7, #4]
 801bb1e:	f000 f80d 	bl	801bb3c <udp_sendto>
 801bb22:	4603      	mov	r3, r0
}
 801bb24:	4618      	mov	r0, r3
 801bb26:	3708      	adds	r7, #8
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}
 801bb2c:	08023e34 	.word	0x08023e34
 801bb30:	08023f28 	.word	0x08023f28
 801bb34:	08023e88 	.word	0x08023e88
 801bb38:	08023f40 	.word	0x08023f40

0801bb3c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801bb3c:	b580      	push	{r7, lr}
 801bb3e:	b088      	sub	sp, #32
 801bb40:	af02      	add	r7, sp, #8
 801bb42:	60f8      	str	r0, [r7, #12]
 801bb44:	60b9      	str	r1, [r7, #8]
 801bb46:	607a      	str	r2, [r7, #4]
 801bb48:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801bb4a:	68fb      	ldr	r3, [r7, #12]
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d109      	bne.n	801bb64 <udp_sendto+0x28>
 801bb50:	4b27      	ldr	r3, [pc, #156]	@ (801bbf0 <udp_sendto+0xb4>)
 801bb52:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801bb56:	4927      	ldr	r1, [pc, #156]	@ (801bbf4 <udp_sendto+0xb8>)
 801bb58:	4827      	ldr	r0, [pc, #156]	@ (801bbf8 <udp_sendto+0xbc>)
 801bb5a:	f004 fb9f 	bl	802029c <iprintf>
 801bb5e:	f06f 030f 	mvn.w	r3, #15
 801bb62:	e040      	b.n	801bbe6 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801bb64:	68bb      	ldr	r3, [r7, #8]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d109      	bne.n	801bb7e <udp_sendto+0x42>
 801bb6a:	4b21      	ldr	r3, [pc, #132]	@ (801bbf0 <udp_sendto+0xb4>)
 801bb6c:	f240 2219 	movw	r2, #537	@ 0x219
 801bb70:	4922      	ldr	r1, [pc, #136]	@ (801bbfc <udp_sendto+0xc0>)
 801bb72:	4821      	ldr	r0, [pc, #132]	@ (801bbf8 <udp_sendto+0xbc>)
 801bb74:	f004 fb92 	bl	802029c <iprintf>
 801bb78:	f06f 030f 	mvn.w	r3, #15
 801bb7c:	e033      	b.n	801bbe6 <udp_sendto+0xaa>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	2b00      	cmp	r3, #0
 801bb82:	d109      	bne.n	801bb98 <udp_sendto+0x5c>
 801bb84:	4b1a      	ldr	r3, [pc, #104]	@ (801bbf0 <udp_sendto+0xb4>)
 801bb86:	f240 221a 	movw	r2, #538	@ 0x21a
 801bb8a:	491d      	ldr	r1, [pc, #116]	@ (801bc00 <udp_sendto+0xc4>)
 801bb8c:	481a      	ldr	r0, [pc, #104]	@ (801bbf8 <udp_sendto+0xbc>)
 801bb8e:	f004 fb85 	bl	802029c <iprintf>
 801bb92:	f06f 030f 	mvn.w	r3, #15
 801bb96:	e026      	b.n	801bbe6 <udp_sendto+0xaa>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801bb98:	68fb      	ldr	r3, [r7, #12]
 801bb9a:	7a1b      	ldrb	r3, [r3, #8]
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d006      	beq.n	801bbae <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801bba0:	68fb      	ldr	r3, [r7, #12]
 801bba2:	7a1b      	ldrb	r3, [r3, #8]
 801bba4:	4618      	mov	r0, r3
 801bba6:	f7f8 fd49 	bl	801463c <netif_get_by_index>
 801bbaa:	6178      	str	r0, [r7, #20]
 801bbac:	e003      	b.n	801bbb6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801bbae:	6878      	ldr	r0, [r7, #4]
 801bbb0:	f001 fc24 	bl	801d3fc <ip4_route>
 801bbb4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801bbb6:	697b      	ldr	r3, [r7, #20]
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d10a      	bne.n	801bbd2 <udp_sendto+0x96>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
 801bbbc:	4b11      	ldr	r3, [pc, #68]	@ (801bc04 <udp_sendto+0xc8>)
 801bbbe:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801bbc2:	3301      	adds	r3, #1
 801bbc4:	b29a      	uxth	r2, r3
 801bbc6:	4b0f      	ldr	r3, [pc, #60]	@ (801bc04 <udp_sendto+0xc8>)
 801bbc8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801bbcc:	f06f 0303 	mvn.w	r3, #3
 801bbd0:	e009      	b.n	801bbe6 <udp_sendto+0xaa>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801bbd2:	887a      	ldrh	r2, [r7, #2]
 801bbd4:	697b      	ldr	r3, [r7, #20]
 801bbd6:	9300      	str	r3, [sp, #0]
 801bbd8:	4613      	mov	r3, r2
 801bbda:	687a      	ldr	r2, [r7, #4]
 801bbdc:	68b9      	ldr	r1, [r7, #8]
 801bbde:	68f8      	ldr	r0, [r7, #12]
 801bbe0:	f000 f812 	bl	801bc08 <udp_sendto_if>
 801bbe4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	3718      	adds	r7, #24
 801bbea:	46bd      	mov	sp, r7
 801bbec:	bd80      	pop	{r7, pc}
 801bbee:	bf00      	nop
 801bbf0:	08023e34 	.word	0x08023e34
 801bbf4:	08023f58 	.word	0x08023f58
 801bbf8:	08023e88 	.word	0x08023e88
 801bbfc:	08023f70 	.word	0x08023f70
 801bc00:	08023f8c 	.word	0x08023f8c
 801bc04:	200252ac 	.word	0x200252ac

0801bc08 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801bc08:	b580      	push	{r7, lr}
 801bc0a:	b088      	sub	sp, #32
 801bc0c:	af02      	add	r7, sp, #8
 801bc0e:	60f8      	str	r0, [r7, #12]
 801bc10:	60b9      	str	r1, [r7, #8]
 801bc12:	607a      	str	r2, [r7, #4]
 801bc14:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d109      	bne.n	801bc30 <udp_sendto_if+0x28>
 801bc1c:	4b2e      	ldr	r3, [pc, #184]	@ (801bcd8 <udp_sendto_if+0xd0>)
 801bc1e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bc22:	492e      	ldr	r1, [pc, #184]	@ (801bcdc <udp_sendto_if+0xd4>)
 801bc24:	482e      	ldr	r0, [pc, #184]	@ (801bce0 <udp_sendto_if+0xd8>)
 801bc26:	f004 fb39 	bl	802029c <iprintf>
 801bc2a:	f06f 030f 	mvn.w	r3, #15
 801bc2e:	e04f      	b.n	801bcd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801bc30:	68bb      	ldr	r3, [r7, #8]
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d109      	bne.n	801bc4a <udp_sendto_if+0x42>
 801bc36:	4b28      	ldr	r3, [pc, #160]	@ (801bcd8 <udp_sendto_if+0xd0>)
 801bc38:	f240 2281 	movw	r2, #641	@ 0x281
 801bc3c:	4929      	ldr	r1, [pc, #164]	@ (801bce4 <udp_sendto_if+0xdc>)
 801bc3e:	4828      	ldr	r0, [pc, #160]	@ (801bce0 <udp_sendto_if+0xd8>)
 801bc40:	f004 fb2c 	bl	802029c <iprintf>
 801bc44:	f06f 030f 	mvn.w	r3, #15
 801bc48:	e042      	b.n	801bcd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	2b00      	cmp	r3, #0
 801bc4e:	d109      	bne.n	801bc64 <udp_sendto_if+0x5c>
 801bc50:	4b21      	ldr	r3, [pc, #132]	@ (801bcd8 <udp_sendto_if+0xd0>)
 801bc52:	f240 2282 	movw	r2, #642	@ 0x282
 801bc56:	4924      	ldr	r1, [pc, #144]	@ (801bce8 <udp_sendto_if+0xe0>)
 801bc58:	4821      	ldr	r0, [pc, #132]	@ (801bce0 <udp_sendto_if+0xd8>)
 801bc5a:	f004 fb1f 	bl	802029c <iprintf>
 801bc5e:	f06f 030f 	mvn.w	r3, #15
 801bc62:	e035      	b.n	801bcd0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801bc64:	6a3b      	ldr	r3, [r7, #32]
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d109      	bne.n	801bc7e <udp_sendto_if+0x76>
 801bc6a:	4b1b      	ldr	r3, [pc, #108]	@ (801bcd8 <udp_sendto_if+0xd0>)
 801bc6c:	f240 2283 	movw	r2, #643	@ 0x283
 801bc70:	491e      	ldr	r1, [pc, #120]	@ (801bcec <udp_sendto_if+0xe4>)
 801bc72:	481b      	ldr	r0, [pc, #108]	@ (801bce0 <udp_sendto_if+0xd8>)
 801bc74:	f004 fb12 	bl	802029c <iprintf>
 801bc78:	f06f 030f 	mvn.w	r3, #15
 801bc7c:	e028      	b.n	801bcd0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bc7e:	68fb      	ldr	r3, [r7, #12]
 801bc80:	2b00      	cmp	r3, #0
 801bc82:	d009      	beq.n	801bc98 <udp_sendto_if+0x90>
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	681b      	ldr	r3, [r3, #0]
 801bc88:	2b00      	cmp	r3, #0
 801bc8a:	d005      	beq.n	801bc98 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801bc8c:	68fb      	ldr	r3, [r7, #12]
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bc94:	2be0      	cmp	r3, #224	@ 0xe0
 801bc96:	d103      	bne.n	801bca0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801bc98:	6a3b      	ldr	r3, [r7, #32]
 801bc9a:	3304      	adds	r3, #4
 801bc9c:	617b      	str	r3, [r7, #20]
 801bc9e:	e00b      	b.n	801bcb8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801bca0:	68fb      	ldr	r3, [r7, #12]
 801bca2:	681a      	ldr	r2, [r3, #0]
 801bca4:	6a3b      	ldr	r3, [r7, #32]
 801bca6:	3304      	adds	r3, #4
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	429a      	cmp	r2, r3
 801bcac:	d002      	beq.n	801bcb4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801bcae:	f06f 0303 	mvn.w	r3, #3
 801bcb2:	e00d      	b.n	801bcd0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801bcb4:	68fb      	ldr	r3, [r7, #12]
 801bcb6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801bcb8:	887a      	ldrh	r2, [r7, #2]
 801bcba:	697b      	ldr	r3, [r7, #20]
 801bcbc:	9301      	str	r3, [sp, #4]
 801bcbe:	6a3b      	ldr	r3, [r7, #32]
 801bcc0:	9300      	str	r3, [sp, #0]
 801bcc2:	4613      	mov	r3, r2
 801bcc4:	687a      	ldr	r2, [r7, #4]
 801bcc6:	68b9      	ldr	r1, [r7, #8]
 801bcc8:	68f8      	ldr	r0, [r7, #12]
 801bcca:	f000 f811 	bl	801bcf0 <udp_sendto_if_src>
 801bcce:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801bcd0:	4618      	mov	r0, r3
 801bcd2:	3718      	adds	r7, #24
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	bd80      	pop	{r7, pc}
 801bcd8:	08023e34 	.word	0x08023e34
 801bcdc:	08023fa8 	.word	0x08023fa8
 801bce0:	08023e88 	.word	0x08023e88
 801bce4:	08023fc4 	.word	0x08023fc4
 801bce8:	08023fe0 	.word	0x08023fe0
 801bcec:	08024000 	.word	0x08024000

0801bcf0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b08c      	sub	sp, #48	@ 0x30
 801bcf4:	af04      	add	r7, sp, #16
 801bcf6:	60f8      	str	r0, [r7, #12]
 801bcf8:	60b9      	str	r1, [r7, #8]
 801bcfa:	607a      	str	r2, [r7, #4]
 801bcfc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	2b00      	cmp	r3, #0
 801bd02:	d109      	bne.n	801bd18 <udp_sendto_if_src+0x28>
 801bd04:	4b69      	ldr	r3, [pc, #420]	@ (801beac <udp_sendto_if_src+0x1bc>)
 801bd06:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801bd0a:	4969      	ldr	r1, [pc, #420]	@ (801beb0 <udp_sendto_if_src+0x1c0>)
 801bd0c:	4869      	ldr	r0, [pc, #420]	@ (801beb4 <udp_sendto_if_src+0x1c4>)
 801bd0e:	f004 fac5 	bl	802029c <iprintf>
 801bd12:	f06f 030f 	mvn.w	r3, #15
 801bd16:	e0c4      	b.n	801bea2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801bd18:	68bb      	ldr	r3, [r7, #8]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d109      	bne.n	801bd32 <udp_sendto_if_src+0x42>
 801bd1e:	4b63      	ldr	r3, [pc, #396]	@ (801beac <udp_sendto_if_src+0x1bc>)
 801bd20:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801bd24:	4964      	ldr	r1, [pc, #400]	@ (801beb8 <udp_sendto_if_src+0x1c8>)
 801bd26:	4863      	ldr	r0, [pc, #396]	@ (801beb4 <udp_sendto_if_src+0x1c4>)
 801bd28:	f004 fab8 	bl	802029c <iprintf>
 801bd2c:	f06f 030f 	mvn.w	r3, #15
 801bd30:	e0b7      	b.n	801bea2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	2b00      	cmp	r3, #0
 801bd36:	d109      	bne.n	801bd4c <udp_sendto_if_src+0x5c>
 801bd38:	4b5c      	ldr	r3, [pc, #368]	@ (801beac <udp_sendto_if_src+0x1bc>)
 801bd3a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801bd3e:	495f      	ldr	r1, [pc, #380]	@ (801bebc <udp_sendto_if_src+0x1cc>)
 801bd40:	485c      	ldr	r0, [pc, #368]	@ (801beb4 <udp_sendto_if_src+0x1c4>)
 801bd42:	f004 faab 	bl	802029c <iprintf>
 801bd46:	f06f 030f 	mvn.w	r3, #15
 801bd4a:	e0aa      	b.n	801bea2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801bd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	d109      	bne.n	801bd66 <udp_sendto_if_src+0x76>
 801bd52:	4b56      	ldr	r3, [pc, #344]	@ (801beac <udp_sendto_if_src+0x1bc>)
 801bd54:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801bd58:	4959      	ldr	r1, [pc, #356]	@ (801bec0 <udp_sendto_if_src+0x1d0>)
 801bd5a:	4856      	ldr	r0, [pc, #344]	@ (801beb4 <udp_sendto_if_src+0x1c4>)
 801bd5c:	f004 fa9e 	bl	802029c <iprintf>
 801bd60:	f06f 030f 	mvn.w	r3, #15
 801bd64:	e09d      	b.n	801bea2 <udp_sendto_if_src+0x1b2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801bd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d109      	bne.n	801bd80 <udp_sendto_if_src+0x90>
 801bd6c:	4b4f      	ldr	r3, [pc, #316]	@ (801beac <udp_sendto_if_src+0x1bc>)
 801bd6e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801bd72:	4954      	ldr	r1, [pc, #336]	@ (801bec4 <udp_sendto_if_src+0x1d4>)
 801bd74:	484f      	ldr	r0, [pc, #316]	@ (801beb4 <udp_sendto_if_src+0x1c4>)
 801bd76:	f004 fa91 	bl	802029c <iprintf>
 801bd7a:	f06f 030f 	mvn.w	r3, #15
 801bd7e:	e090      	b.n	801bea2 <udp_sendto_if_src+0x1b2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801bd80:	68fb      	ldr	r3, [r7, #12]
 801bd82:	8a5b      	ldrh	r3, [r3, #18]
 801bd84:	2b00      	cmp	r3, #0
 801bd86:	d10f      	bne.n	801bda8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801bd88:	68f9      	ldr	r1, [r7, #12]
 801bd8a:	68fb      	ldr	r3, [r7, #12]
 801bd8c:	8a5b      	ldrh	r3, [r3, #18]
 801bd8e:	461a      	mov	r2, r3
 801bd90:	68f8      	ldr	r0, [r7, #12]
 801bd92:	f000 f89d 	bl	801bed0 <udp_bind>
 801bd96:	4603      	mov	r3, r0
 801bd98:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801bd9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bd9e:	2b00      	cmp	r3, #0
 801bda0:	d002      	beq.n	801bda8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801bda2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801bda6:	e07c      	b.n	801bea2 <udp_sendto_if_src+0x1b2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	891b      	ldrh	r3, [r3, #8]
 801bdac:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801bdb0:	4293      	cmp	r3, r2
 801bdb2:	d902      	bls.n	801bdba <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801bdb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bdb8:	e073      	b.n	801bea2 <udp_sendto_if_src+0x1b2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801bdba:	2108      	movs	r1, #8
 801bdbc:	68b8      	ldr	r0, [r7, #8]
 801bdbe:	f7f8 ff35 	bl	8014c2c <pbuf_add_header>
 801bdc2:	4603      	mov	r3, r0
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d015      	beq.n	801bdf4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801bdc8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bdcc:	2108      	movs	r1, #8
 801bdce:	2022      	movs	r0, #34	@ 0x22
 801bdd0:	f7f8 fcde 	bl	8014790 <pbuf_alloc>
 801bdd4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801bdd6:	69fb      	ldr	r3, [r7, #28]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	d102      	bne.n	801bde2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801bddc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bde0:	e05f      	b.n	801bea2 <udp_sendto_if_src+0x1b2>
    }
    if (p->tot_len != 0) {
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	891b      	ldrh	r3, [r3, #8]
 801bde6:	2b00      	cmp	r3, #0
 801bde8:	d006      	beq.n	801bdf8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801bdea:	68b9      	ldr	r1, [r7, #8]
 801bdec:	69f8      	ldr	r0, [r7, #28]
 801bdee:	f7f9 f8d7 	bl	8014fa0 <pbuf_chain>
 801bdf2:	e001      	b.n	801bdf8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801bdf4:	68bb      	ldr	r3, [r7, #8]
 801bdf6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801bdf8:	69fb      	ldr	r3, [r7, #28]
 801bdfa:	895b      	ldrh	r3, [r3, #10]
 801bdfc:	2b07      	cmp	r3, #7
 801bdfe:	d806      	bhi.n	801be0e <udp_sendto_if_src+0x11e>
 801be00:	4b2a      	ldr	r3, [pc, #168]	@ (801beac <udp_sendto_if_src+0x1bc>)
 801be02:	f240 320d 	movw	r2, #781	@ 0x30d
 801be06:	4930      	ldr	r1, [pc, #192]	@ (801bec8 <udp_sendto_if_src+0x1d8>)
 801be08:	482a      	ldr	r0, [pc, #168]	@ (801beb4 <udp_sendto_if_src+0x1c4>)
 801be0a:	f004 fa47 	bl	802029c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801be0e:	69fb      	ldr	r3, [r7, #28]
 801be10:	685b      	ldr	r3, [r3, #4]
 801be12:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	8a5b      	ldrh	r3, [r3, #18]
 801be18:	4618      	mov	r0, r3
 801be1a:	f7f7 fadf 	bl	80133dc <lwip_htons>
 801be1e:	4603      	mov	r3, r0
 801be20:	461a      	mov	r2, r3
 801be22:	697b      	ldr	r3, [r7, #20]
 801be24:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801be26:	887b      	ldrh	r3, [r7, #2]
 801be28:	4618      	mov	r0, r3
 801be2a:	f7f7 fad7 	bl	80133dc <lwip_htons>
 801be2e:	4603      	mov	r3, r0
 801be30:	461a      	mov	r2, r3
 801be32:	697b      	ldr	r3, [r7, #20]
 801be34:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801be36:	697b      	ldr	r3, [r7, #20]
 801be38:	2200      	movs	r2, #0
 801be3a:	719a      	strb	r2, [r3, #6]
 801be3c:	2200      	movs	r2, #0
 801be3e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801be40:	69fb      	ldr	r3, [r7, #28]
 801be42:	891b      	ldrh	r3, [r3, #8]
 801be44:	4618      	mov	r0, r3
 801be46:	f7f7 fac9 	bl	80133dc <lwip_htons>
 801be4a:	4603      	mov	r3, r0
 801be4c:	461a      	mov	r2, r3
 801be4e:	697b      	ldr	r3, [r7, #20]
 801be50:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801be52:	2311      	movs	r3, #17
 801be54:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801be56:	68fb      	ldr	r3, [r7, #12]
 801be58:	7adb      	ldrb	r3, [r3, #11]
 801be5a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801be5c:	68fb      	ldr	r3, [r7, #12]
 801be5e:	7a9b      	ldrb	r3, [r3, #10]
 801be60:	7cb9      	ldrb	r1, [r7, #18]
 801be62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801be64:	9202      	str	r2, [sp, #8]
 801be66:	7cfa      	ldrb	r2, [r7, #19]
 801be68:	9201      	str	r2, [sp, #4]
 801be6a:	9300      	str	r3, [sp, #0]
 801be6c:	460b      	mov	r3, r1
 801be6e:	687a      	ldr	r2, [r7, #4]
 801be70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801be72:	69f8      	ldr	r0, [r7, #28]
 801be74:	f001 fd02 	bl	801d87c <ip4_output_if_src>
 801be78:	4603      	mov	r3, r0
 801be7a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801be7c:	69fa      	ldr	r2, [r7, #28]
 801be7e:	68bb      	ldr	r3, [r7, #8]
 801be80:	429a      	cmp	r2, r3
 801be82:	d004      	beq.n	801be8e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801be84:	69f8      	ldr	r0, [r7, #28]
 801be86:	f7f8 ff67 	bl	8014d58 <pbuf_free>
    q = NULL;
 801be8a:	2300      	movs	r3, #0
 801be8c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801be8e:	4b0f      	ldr	r3, [pc, #60]	@ (801becc <udp_sendto_if_src+0x1dc>)
 801be90:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801be94:	3301      	adds	r3, #1
 801be96:	b29a      	uxth	r2, r3
 801be98:	4b0c      	ldr	r3, [pc, #48]	@ (801becc <udp_sendto_if_src+0x1dc>)
 801be9a:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801be9e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801bea2:	4618      	mov	r0, r3
 801bea4:	3720      	adds	r7, #32
 801bea6:	46bd      	mov	sp, r7
 801bea8:	bd80      	pop	{r7, pc}
 801beaa:	bf00      	nop
 801beac:	08023e34 	.word	0x08023e34
 801beb0:	08024020 	.word	0x08024020
 801beb4:	08023e88 	.word	0x08023e88
 801beb8:	08024040 	.word	0x08024040
 801bebc:	08024060 	.word	0x08024060
 801bec0:	08024084 	.word	0x08024084
 801bec4:	080240a8 	.word	0x080240a8
 801bec8:	080240cc 	.word	0x080240cc
 801becc:	200252ac 	.word	0x200252ac

0801bed0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801bed0:	b580      	push	{r7, lr}
 801bed2:	b086      	sub	sp, #24
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	60f8      	str	r0, [r7, #12]
 801bed8:	60b9      	str	r1, [r7, #8]
 801beda:	4613      	mov	r3, r2
 801bedc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801bede:	68bb      	ldr	r3, [r7, #8]
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d101      	bne.n	801bee8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801bee4:	4b39      	ldr	r3, [pc, #228]	@ (801bfcc <udp_bind+0xfc>)
 801bee6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801bee8:	68fb      	ldr	r3, [r7, #12]
 801beea:	2b00      	cmp	r3, #0
 801beec:	d109      	bne.n	801bf02 <udp_bind+0x32>
 801beee:	4b38      	ldr	r3, [pc, #224]	@ (801bfd0 <udp_bind+0x100>)
 801bef0:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801bef4:	4937      	ldr	r1, [pc, #220]	@ (801bfd4 <udp_bind+0x104>)
 801bef6:	4838      	ldr	r0, [pc, #224]	@ (801bfd8 <udp_bind+0x108>)
 801bef8:	f004 f9d0 	bl	802029c <iprintf>
 801befc:	f06f 030f 	mvn.w	r3, #15
 801bf00:	e060      	b.n	801bfc4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801bf02:	2300      	movs	r3, #0
 801bf04:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf06:	4b35      	ldr	r3, [pc, #212]	@ (801bfdc <udp_bind+0x10c>)
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	617b      	str	r3, [r7, #20]
 801bf0c:	e009      	b.n	801bf22 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801bf0e:	68fa      	ldr	r2, [r7, #12]
 801bf10:	697b      	ldr	r3, [r7, #20]
 801bf12:	429a      	cmp	r2, r3
 801bf14:	d102      	bne.n	801bf1c <udp_bind+0x4c>
      rebind = 1;
 801bf16:	2301      	movs	r3, #1
 801bf18:	74fb      	strb	r3, [r7, #19]
      break;
 801bf1a:	e005      	b.n	801bf28 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf1c:	697b      	ldr	r3, [r7, #20]
 801bf1e:	68db      	ldr	r3, [r3, #12]
 801bf20:	617b      	str	r3, [r7, #20]
 801bf22:	697b      	ldr	r3, [r7, #20]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	d1f2      	bne.n	801bf0e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801bf28:	88fb      	ldrh	r3, [r7, #6]
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d109      	bne.n	801bf42 <udp_bind+0x72>
    port = udp_new_port();
 801bf2e:	f7ff fbe7 	bl	801b700 <udp_new_port>
 801bf32:	4603      	mov	r3, r0
 801bf34:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801bf36:	88fb      	ldrh	r3, [r7, #6]
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d12c      	bne.n	801bf96 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801bf3c:	f06f 0307 	mvn.w	r3, #7
 801bf40:	e040      	b.n	801bfc4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf42:	4b26      	ldr	r3, [pc, #152]	@ (801bfdc <udp_bind+0x10c>)
 801bf44:	681b      	ldr	r3, [r3, #0]
 801bf46:	617b      	str	r3, [r7, #20]
 801bf48:	e022      	b.n	801bf90 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801bf4a:	68fa      	ldr	r2, [r7, #12]
 801bf4c:	697b      	ldr	r3, [r7, #20]
 801bf4e:	429a      	cmp	r2, r3
 801bf50:	d01b      	beq.n	801bf8a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801bf52:	697b      	ldr	r3, [r7, #20]
 801bf54:	8a5b      	ldrh	r3, [r3, #18]
 801bf56:	88fa      	ldrh	r2, [r7, #6]
 801bf58:	429a      	cmp	r2, r3
 801bf5a:	d116      	bne.n	801bf8a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bf5c:	697b      	ldr	r3, [r7, #20]
 801bf5e:	681a      	ldr	r2, [r3, #0]
 801bf60:	68bb      	ldr	r3, [r7, #8]
 801bf62:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801bf64:	429a      	cmp	r2, r3
 801bf66:	d00d      	beq.n	801bf84 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bf68:	68bb      	ldr	r3, [r7, #8]
 801bf6a:	2b00      	cmp	r3, #0
 801bf6c:	d00a      	beq.n	801bf84 <udp_bind+0xb4>
 801bf6e:	68bb      	ldr	r3, [r7, #8]
 801bf70:	681b      	ldr	r3, [r3, #0]
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d006      	beq.n	801bf84 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bf76:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d003      	beq.n	801bf84 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801bf7c:	697b      	ldr	r3, [r7, #20]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d102      	bne.n	801bf8a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801bf84:	f06f 0307 	mvn.w	r3, #7
 801bf88:	e01c      	b.n	801bfc4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801bf8a:	697b      	ldr	r3, [r7, #20]
 801bf8c:	68db      	ldr	r3, [r3, #12]
 801bf8e:	617b      	str	r3, [r7, #20]
 801bf90:	697b      	ldr	r3, [r7, #20]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d1d9      	bne.n	801bf4a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801bf96:	68bb      	ldr	r3, [r7, #8]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d002      	beq.n	801bfa2 <udp_bind+0xd2>
 801bf9c:	68bb      	ldr	r3, [r7, #8]
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	e000      	b.n	801bfa4 <udp_bind+0xd4>
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	68fa      	ldr	r2, [r7, #12]
 801bfa6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801bfa8:	68fb      	ldr	r3, [r7, #12]
 801bfaa:	88fa      	ldrh	r2, [r7, #6]
 801bfac:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801bfae:	7cfb      	ldrb	r3, [r7, #19]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d106      	bne.n	801bfc2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801bfb4:	4b09      	ldr	r3, [pc, #36]	@ (801bfdc <udp_bind+0x10c>)
 801bfb6:	681a      	ldr	r2, [r3, #0]
 801bfb8:	68fb      	ldr	r3, [r7, #12]
 801bfba:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801bfbc:	4a07      	ldr	r2, [pc, #28]	@ (801bfdc <udp_bind+0x10c>)
 801bfbe:	68fb      	ldr	r3, [r7, #12]
 801bfc0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801bfc2:	2300      	movs	r3, #0
}
 801bfc4:	4618      	mov	r0, r3
 801bfc6:	3718      	adds	r7, #24
 801bfc8:	46bd      	mov	sp, r7
 801bfca:	bd80      	pop	{r7, pc}
 801bfcc:	08024ec4 	.word	0x08024ec4
 801bfd0:	08023e34 	.word	0x08023e34
 801bfd4:	080240fc 	.word	0x080240fc
 801bfd8:	08023e88 	.word	0x08023e88
 801bfdc:	20025404 	.word	0x20025404

0801bfe0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801bfe0:	b580      	push	{r7, lr}
 801bfe2:	b084      	sub	sp, #16
 801bfe4:	af00      	add	r7, sp, #0
 801bfe6:	60f8      	str	r0, [r7, #12]
 801bfe8:	60b9      	str	r1, [r7, #8]
 801bfea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d107      	bne.n	801c002 <udp_recv+0x22>
 801bff2:	4b08      	ldr	r3, [pc, #32]	@ (801c014 <udp_recv+0x34>)
 801bff4:	f240 428a 	movw	r2, #1162	@ 0x48a
 801bff8:	4907      	ldr	r1, [pc, #28]	@ (801c018 <udp_recv+0x38>)
 801bffa:	4808      	ldr	r0, [pc, #32]	@ (801c01c <udp_recv+0x3c>)
 801bffc:	f004 f94e 	bl	802029c <iprintf>
 801c000:	e005      	b.n	801c00e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	68ba      	ldr	r2, [r7, #8]
 801c006:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	687a      	ldr	r2, [r7, #4]
 801c00c:	61da      	str	r2, [r3, #28]
}
 801c00e:	3710      	adds	r7, #16
 801c010:	46bd      	mov	sp, r7
 801c012:	bd80      	pop	{r7, pc}
 801c014:	08023e34 	.word	0x08023e34
 801c018:	08024168 	.word	0x08024168
 801c01c:	08023e88 	.word	0x08023e88

0801c020 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b084      	sub	sp, #16
 801c024:	af00      	add	r7, sp, #0
 801c026:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	d107      	bne.n	801c03e <udp_remove+0x1e>
 801c02e:	4b19      	ldr	r3, [pc, #100]	@ (801c094 <udp_remove+0x74>)
 801c030:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801c034:	4918      	ldr	r1, [pc, #96]	@ (801c098 <udp_remove+0x78>)
 801c036:	4819      	ldr	r0, [pc, #100]	@ (801c09c <udp_remove+0x7c>)
 801c038:	f004 f930 	bl	802029c <iprintf>
 801c03c:	e026      	b.n	801c08c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801c03e:	4b18      	ldr	r3, [pc, #96]	@ (801c0a0 <udp_remove+0x80>)
 801c040:	681b      	ldr	r3, [r3, #0]
 801c042:	687a      	ldr	r2, [r7, #4]
 801c044:	429a      	cmp	r2, r3
 801c046:	d105      	bne.n	801c054 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801c048:	4b15      	ldr	r3, [pc, #84]	@ (801c0a0 <udp_remove+0x80>)
 801c04a:	681b      	ldr	r3, [r3, #0]
 801c04c:	68db      	ldr	r3, [r3, #12]
 801c04e:	4a14      	ldr	r2, [pc, #80]	@ (801c0a0 <udp_remove+0x80>)
 801c050:	6013      	str	r3, [r2, #0]
 801c052:	e017      	b.n	801c084 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c054:	4b12      	ldr	r3, [pc, #72]	@ (801c0a0 <udp_remove+0x80>)
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	60fb      	str	r3, [r7, #12]
 801c05a:	e010      	b.n	801c07e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	68db      	ldr	r3, [r3, #12]
 801c060:	2b00      	cmp	r3, #0
 801c062:	d009      	beq.n	801c078 <udp_remove+0x58>
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	68db      	ldr	r3, [r3, #12]
 801c068:	687a      	ldr	r2, [r7, #4]
 801c06a:	429a      	cmp	r2, r3
 801c06c:	d104      	bne.n	801c078 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801c06e:	687b      	ldr	r3, [r7, #4]
 801c070:	68da      	ldr	r2, [r3, #12]
 801c072:	68fb      	ldr	r3, [r7, #12]
 801c074:	60da      	str	r2, [r3, #12]
        break;
 801c076:	e005      	b.n	801c084 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801c078:	68fb      	ldr	r3, [r7, #12]
 801c07a:	68db      	ldr	r3, [r3, #12]
 801c07c:	60fb      	str	r3, [r7, #12]
 801c07e:	68fb      	ldr	r3, [r7, #12]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d1eb      	bne.n	801c05c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801c084:	6879      	ldr	r1, [r7, #4]
 801c086:	2000      	movs	r0, #0
 801c088:	f7f7 ffc2 	bl	8014010 <memp_free>
}
 801c08c:	3710      	adds	r7, #16
 801c08e:	46bd      	mov	sp, r7
 801c090:	bd80      	pop	{r7, pc}
 801c092:	bf00      	nop
 801c094:	08023e34 	.word	0x08023e34
 801c098:	08024180 	.word	0x08024180
 801c09c:	08023e88 	.word	0x08023e88
 801c0a0:	20025404 	.word	0x20025404

0801c0a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b082      	sub	sp, #8
 801c0a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801c0aa:	2000      	movs	r0, #0
 801c0ac:	f7f7 ff34 	bl	8013f18 <memp_malloc>
 801c0b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	2b00      	cmp	r3, #0
 801c0b6:	d007      	beq.n	801c0c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801c0b8:	2220      	movs	r2, #32
 801c0ba:	2100      	movs	r1, #0
 801c0bc:	6878      	ldr	r0, [r7, #4]
 801c0be:	f004 fa45 	bl	802054c <memset>
    pcb->ttl = UDP_TTL;
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	22ff      	movs	r2, #255	@ 0xff
 801c0c6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801c0c8:	687b      	ldr	r3, [r7, #4]
}
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	3708      	adds	r7, #8
 801c0ce:	46bd      	mov	sp, r7
 801c0d0:	bd80      	pop	{r7, pc}

0801c0d2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801c0d2:	b580      	push	{r7, lr}
 801c0d4:	b084      	sub	sp, #16
 801c0d6:	af00      	add	r7, sp, #0
 801c0d8:	4603      	mov	r3, r0
 801c0da:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801c0dc:	f7ff ffe2 	bl	801c0a4 <udp_new>
 801c0e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801c0e2:	68fb      	ldr	r3, [r7, #12]
}
 801c0e4:	4618      	mov	r0, r3
 801c0e6:	3710      	adds	r7, #16
 801c0e8:	46bd      	mov	sp, r7
 801c0ea:	bd80      	pop	{r7, pc}

0801c0ec <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801c0ec:	b480      	push	{r7}
 801c0ee:	b085      	sub	sp, #20
 801c0f0:	af00      	add	r7, sp, #0
 801c0f2:	6078      	str	r0, [r7, #4]
 801c0f4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d01e      	beq.n	801c13a <udp_netif_ip_addr_changed+0x4e>
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d01a      	beq.n	801c13a <udp_netif_ip_addr_changed+0x4e>
 801c104:	683b      	ldr	r3, [r7, #0]
 801c106:	2b00      	cmp	r3, #0
 801c108:	d017      	beq.n	801c13a <udp_netif_ip_addr_changed+0x4e>
 801c10a:	683b      	ldr	r3, [r7, #0]
 801c10c:	681b      	ldr	r3, [r3, #0]
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d013      	beq.n	801c13a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c112:	4b0d      	ldr	r3, [pc, #52]	@ (801c148 <udp_netif_ip_addr_changed+0x5c>)
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	60fb      	str	r3, [r7, #12]
 801c118:	e00c      	b.n	801c134 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	681a      	ldr	r2, [r3, #0]
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	681b      	ldr	r3, [r3, #0]
 801c122:	429a      	cmp	r2, r3
 801c124:	d103      	bne.n	801c12e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801c126:	683b      	ldr	r3, [r7, #0]
 801c128:	681a      	ldr	r2, [r3, #0]
 801c12a:	68fb      	ldr	r3, [r7, #12]
 801c12c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801c12e:	68fb      	ldr	r3, [r7, #12]
 801c130:	68db      	ldr	r3, [r3, #12]
 801c132:	60fb      	str	r3, [r7, #12]
 801c134:	68fb      	ldr	r3, [r7, #12]
 801c136:	2b00      	cmp	r3, #0
 801c138:	d1ef      	bne.n	801c11a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801c13a:	bf00      	nop
 801c13c:	3714      	adds	r7, #20
 801c13e:	46bd      	mov	sp, r7
 801c140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c144:	4770      	bx	lr
 801c146:	bf00      	nop
 801c148:	20025404 	.word	0x20025404

0801c14c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801c14c:	b580      	push	{r7, lr}
 801c14e:	b082      	sub	sp, #8
 801c150:	af00      	add	r7, sp, #0
 801c152:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801c154:	4915      	ldr	r1, [pc, #84]	@ (801c1ac <etharp_free_entry+0x60>)
 801c156:	687a      	ldr	r2, [r7, #4]
 801c158:	4613      	mov	r3, r2
 801c15a:	005b      	lsls	r3, r3, #1
 801c15c:	4413      	add	r3, r2
 801c15e:	00db      	lsls	r3, r3, #3
 801c160:	440b      	add	r3, r1
 801c162:	681b      	ldr	r3, [r3, #0]
 801c164:	2b00      	cmp	r3, #0
 801c166:	d013      	beq.n	801c190 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801c168:	4910      	ldr	r1, [pc, #64]	@ (801c1ac <etharp_free_entry+0x60>)
 801c16a:	687a      	ldr	r2, [r7, #4]
 801c16c:	4613      	mov	r3, r2
 801c16e:	005b      	lsls	r3, r3, #1
 801c170:	4413      	add	r3, r2
 801c172:	00db      	lsls	r3, r3, #3
 801c174:	440b      	add	r3, r1
 801c176:	681b      	ldr	r3, [r3, #0]
 801c178:	4618      	mov	r0, r3
 801c17a:	f7f8 fded 	bl	8014d58 <pbuf_free>
    arp_table[i].q = NULL;
 801c17e:	490b      	ldr	r1, [pc, #44]	@ (801c1ac <etharp_free_entry+0x60>)
 801c180:	687a      	ldr	r2, [r7, #4]
 801c182:	4613      	mov	r3, r2
 801c184:	005b      	lsls	r3, r3, #1
 801c186:	4413      	add	r3, r2
 801c188:	00db      	lsls	r3, r3, #3
 801c18a:	440b      	add	r3, r1
 801c18c:	2200      	movs	r2, #0
 801c18e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801c190:	4906      	ldr	r1, [pc, #24]	@ (801c1ac <etharp_free_entry+0x60>)
 801c192:	687a      	ldr	r2, [r7, #4]
 801c194:	4613      	mov	r3, r2
 801c196:	005b      	lsls	r3, r3, #1
 801c198:	4413      	add	r3, r2
 801c19a:	00db      	lsls	r3, r3, #3
 801c19c:	440b      	add	r3, r1
 801c19e:	3314      	adds	r3, #20
 801c1a0:	2200      	movs	r2, #0
 801c1a2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801c1a4:	bf00      	nop
 801c1a6:	3708      	adds	r7, #8
 801c1a8:	46bd      	mov	sp, r7
 801c1aa:	bd80      	pop	{r7, pc}
 801c1ac:	20025408 	.word	0x20025408

0801c1b0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b082      	sub	sp, #8
 801c1b4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c1b6:	2300      	movs	r3, #0
 801c1b8:	607b      	str	r3, [r7, #4]
 801c1ba:	e096      	b.n	801c2ea <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801c1bc:	494f      	ldr	r1, [pc, #316]	@ (801c2fc <etharp_tmr+0x14c>)
 801c1be:	687a      	ldr	r2, [r7, #4]
 801c1c0:	4613      	mov	r3, r2
 801c1c2:	005b      	lsls	r3, r3, #1
 801c1c4:	4413      	add	r3, r2
 801c1c6:	00db      	lsls	r3, r3, #3
 801c1c8:	440b      	add	r3, r1
 801c1ca:	3314      	adds	r3, #20
 801c1cc:	781b      	ldrb	r3, [r3, #0]
 801c1ce:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801c1d0:	78fb      	ldrb	r3, [r7, #3]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	f000 8086 	beq.w	801c2e4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801c1d8:	4948      	ldr	r1, [pc, #288]	@ (801c2fc <etharp_tmr+0x14c>)
 801c1da:	687a      	ldr	r2, [r7, #4]
 801c1dc:	4613      	mov	r3, r2
 801c1de:	005b      	lsls	r3, r3, #1
 801c1e0:	4413      	add	r3, r2
 801c1e2:	00db      	lsls	r3, r3, #3
 801c1e4:	440b      	add	r3, r1
 801c1e6:	3312      	adds	r3, #18
 801c1e8:	881b      	ldrh	r3, [r3, #0]
 801c1ea:	3301      	adds	r3, #1
 801c1ec:	b298      	uxth	r0, r3
 801c1ee:	4943      	ldr	r1, [pc, #268]	@ (801c2fc <etharp_tmr+0x14c>)
 801c1f0:	687a      	ldr	r2, [r7, #4]
 801c1f2:	4613      	mov	r3, r2
 801c1f4:	005b      	lsls	r3, r3, #1
 801c1f6:	4413      	add	r3, r2
 801c1f8:	00db      	lsls	r3, r3, #3
 801c1fa:	440b      	add	r3, r1
 801c1fc:	3312      	adds	r3, #18
 801c1fe:	4602      	mov	r2, r0
 801c200:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c202:	493e      	ldr	r1, [pc, #248]	@ (801c2fc <etharp_tmr+0x14c>)
 801c204:	687a      	ldr	r2, [r7, #4]
 801c206:	4613      	mov	r3, r2
 801c208:	005b      	lsls	r3, r3, #1
 801c20a:	4413      	add	r3, r2
 801c20c:	00db      	lsls	r3, r3, #3
 801c20e:	440b      	add	r3, r1
 801c210:	3312      	adds	r3, #18
 801c212:	881b      	ldrh	r3, [r3, #0]
 801c214:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801c218:	d215      	bcs.n	801c246 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c21a:	4938      	ldr	r1, [pc, #224]	@ (801c2fc <etharp_tmr+0x14c>)
 801c21c:	687a      	ldr	r2, [r7, #4]
 801c21e:	4613      	mov	r3, r2
 801c220:	005b      	lsls	r3, r3, #1
 801c222:	4413      	add	r3, r2
 801c224:	00db      	lsls	r3, r3, #3
 801c226:	440b      	add	r3, r1
 801c228:	3314      	adds	r3, #20
 801c22a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801c22c:	2b01      	cmp	r3, #1
 801c22e:	d10e      	bne.n	801c24e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801c230:	4932      	ldr	r1, [pc, #200]	@ (801c2fc <etharp_tmr+0x14c>)
 801c232:	687a      	ldr	r2, [r7, #4]
 801c234:	4613      	mov	r3, r2
 801c236:	005b      	lsls	r3, r3, #1
 801c238:	4413      	add	r3, r2
 801c23a:	00db      	lsls	r3, r3, #3
 801c23c:	440b      	add	r3, r1
 801c23e:	3312      	adds	r3, #18
 801c240:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801c242:	2b04      	cmp	r3, #4
 801c244:	d903      	bls.n	801c24e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801c246:	6878      	ldr	r0, [r7, #4]
 801c248:	f7ff ff80 	bl	801c14c <etharp_free_entry>
 801c24c:	e04a      	b.n	801c2e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801c24e:	492b      	ldr	r1, [pc, #172]	@ (801c2fc <etharp_tmr+0x14c>)
 801c250:	687a      	ldr	r2, [r7, #4]
 801c252:	4613      	mov	r3, r2
 801c254:	005b      	lsls	r3, r3, #1
 801c256:	4413      	add	r3, r2
 801c258:	00db      	lsls	r3, r3, #3
 801c25a:	440b      	add	r3, r1
 801c25c:	3314      	adds	r3, #20
 801c25e:	781b      	ldrb	r3, [r3, #0]
 801c260:	2b03      	cmp	r3, #3
 801c262:	d10a      	bne.n	801c27a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801c264:	4925      	ldr	r1, [pc, #148]	@ (801c2fc <etharp_tmr+0x14c>)
 801c266:	687a      	ldr	r2, [r7, #4]
 801c268:	4613      	mov	r3, r2
 801c26a:	005b      	lsls	r3, r3, #1
 801c26c:	4413      	add	r3, r2
 801c26e:	00db      	lsls	r3, r3, #3
 801c270:	440b      	add	r3, r1
 801c272:	3314      	adds	r3, #20
 801c274:	2204      	movs	r2, #4
 801c276:	701a      	strb	r2, [r3, #0]
 801c278:	e034      	b.n	801c2e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801c27a:	4920      	ldr	r1, [pc, #128]	@ (801c2fc <etharp_tmr+0x14c>)
 801c27c:	687a      	ldr	r2, [r7, #4]
 801c27e:	4613      	mov	r3, r2
 801c280:	005b      	lsls	r3, r3, #1
 801c282:	4413      	add	r3, r2
 801c284:	00db      	lsls	r3, r3, #3
 801c286:	440b      	add	r3, r1
 801c288:	3314      	adds	r3, #20
 801c28a:	781b      	ldrb	r3, [r3, #0]
 801c28c:	2b04      	cmp	r3, #4
 801c28e:	d10a      	bne.n	801c2a6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801c290:	491a      	ldr	r1, [pc, #104]	@ (801c2fc <etharp_tmr+0x14c>)
 801c292:	687a      	ldr	r2, [r7, #4]
 801c294:	4613      	mov	r3, r2
 801c296:	005b      	lsls	r3, r3, #1
 801c298:	4413      	add	r3, r2
 801c29a:	00db      	lsls	r3, r3, #3
 801c29c:	440b      	add	r3, r1
 801c29e:	3314      	adds	r3, #20
 801c2a0:	2202      	movs	r2, #2
 801c2a2:	701a      	strb	r2, [r3, #0]
 801c2a4:	e01e      	b.n	801c2e4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c2a6:	4915      	ldr	r1, [pc, #84]	@ (801c2fc <etharp_tmr+0x14c>)
 801c2a8:	687a      	ldr	r2, [r7, #4]
 801c2aa:	4613      	mov	r3, r2
 801c2ac:	005b      	lsls	r3, r3, #1
 801c2ae:	4413      	add	r3, r2
 801c2b0:	00db      	lsls	r3, r3, #3
 801c2b2:	440b      	add	r3, r1
 801c2b4:	3314      	adds	r3, #20
 801c2b6:	781b      	ldrb	r3, [r3, #0]
 801c2b8:	2b01      	cmp	r3, #1
 801c2ba:	d113      	bne.n	801c2e4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801c2bc:	490f      	ldr	r1, [pc, #60]	@ (801c2fc <etharp_tmr+0x14c>)
 801c2be:	687a      	ldr	r2, [r7, #4]
 801c2c0:	4613      	mov	r3, r2
 801c2c2:	005b      	lsls	r3, r3, #1
 801c2c4:	4413      	add	r3, r2
 801c2c6:	00db      	lsls	r3, r3, #3
 801c2c8:	440b      	add	r3, r1
 801c2ca:	3308      	adds	r3, #8
 801c2cc:	6818      	ldr	r0, [r3, #0]
 801c2ce:	687a      	ldr	r2, [r7, #4]
 801c2d0:	4613      	mov	r3, r2
 801c2d2:	005b      	lsls	r3, r3, #1
 801c2d4:	4413      	add	r3, r2
 801c2d6:	00db      	lsls	r3, r3, #3
 801c2d8:	4a08      	ldr	r2, [pc, #32]	@ (801c2fc <etharp_tmr+0x14c>)
 801c2da:	4413      	add	r3, r2
 801c2dc:	3304      	adds	r3, #4
 801c2de:	4619      	mov	r1, r3
 801c2e0:	f000 feae 	bl	801d040 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	3301      	adds	r3, #1
 801c2e8:	607b      	str	r3, [r7, #4]
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	2b09      	cmp	r3, #9
 801c2ee:	f77f af65 	ble.w	801c1bc <etharp_tmr+0xc>
      }
    }
  }
}
 801c2f2:	bf00      	nop
 801c2f4:	bf00      	nop
 801c2f6:	3708      	adds	r7, #8
 801c2f8:	46bd      	mov	sp, r7
 801c2fa:	bd80      	pop	{r7, pc}
 801c2fc:	20025408 	.word	0x20025408

0801c300 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b08a      	sub	sp, #40	@ 0x28
 801c304:	af00      	add	r7, sp, #0
 801c306:	60f8      	str	r0, [r7, #12]
 801c308:	460b      	mov	r3, r1
 801c30a:	607a      	str	r2, [r7, #4]
 801c30c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801c30e:	230a      	movs	r3, #10
 801c310:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801c312:	230a      	movs	r3, #10
 801c314:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801c316:	230a      	movs	r3, #10
 801c318:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801c31a:	2300      	movs	r3, #0
 801c31c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801c31e:	230a      	movs	r3, #10
 801c320:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801c322:	2300      	movs	r3, #0
 801c324:	83bb      	strh	r3, [r7, #28]
 801c326:	2300      	movs	r3, #0
 801c328:	837b      	strh	r3, [r7, #26]
 801c32a:	2300      	movs	r3, #0
 801c32c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c32e:	2300      	movs	r3, #0
 801c330:	843b      	strh	r3, [r7, #32]
 801c332:	e0ae      	b.n	801c492 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801c334:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c338:	49a6      	ldr	r1, [pc, #664]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c33a:	4613      	mov	r3, r2
 801c33c:	005b      	lsls	r3, r3, #1
 801c33e:	4413      	add	r3, r2
 801c340:	00db      	lsls	r3, r3, #3
 801c342:	440b      	add	r3, r1
 801c344:	3314      	adds	r3, #20
 801c346:	781b      	ldrb	r3, [r3, #0]
 801c348:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801c34a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c34e:	2b0a      	cmp	r3, #10
 801c350:	d105      	bne.n	801c35e <etharp_find_entry+0x5e>
 801c352:	7dfb      	ldrb	r3, [r7, #23]
 801c354:	2b00      	cmp	r3, #0
 801c356:	d102      	bne.n	801c35e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801c358:	8c3b      	ldrh	r3, [r7, #32]
 801c35a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801c35c:	e095      	b.n	801c48a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801c35e:	7dfb      	ldrb	r3, [r7, #23]
 801c360:	2b00      	cmp	r3, #0
 801c362:	f000 8092 	beq.w	801c48a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801c366:	7dfb      	ldrb	r3, [r7, #23]
 801c368:	2b01      	cmp	r3, #1
 801c36a:	d009      	beq.n	801c380 <etharp_find_entry+0x80>
 801c36c:	7dfb      	ldrb	r3, [r7, #23]
 801c36e:	2b01      	cmp	r3, #1
 801c370:	d806      	bhi.n	801c380 <etharp_find_entry+0x80>
 801c372:	4b99      	ldr	r3, [pc, #612]	@ (801c5d8 <etharp_find_entry+0x2d8>)
 801c374:	f240 1223 	movw	r2, #291	@ 0x123
 801c378:	4998      	ldr	r1, [pc, #608]	@ (801c5dc <etharp_find_entry+0x2dc>)
 801c37a:	4899      	ldr	r0, [pc, #612]	@ (801c5e0 <etharp_find_entry+0x2e0>)
 801c37c:	f003 ff8e 	bl	802029c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801c380:	68fb      	ldr	r3, [r7, #12]
 801c382:	2b00      	cmp	r3, #0
 801c384:	d020      	beq.n	801c3c8 <etharp_find_entry+0xc8>
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	6819      	ldr	r1, [r3, #0]
 801c38a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c38e:	4891      	ldr	r0, [pc, #580]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c390:	4613      	mov	r3, r2
 801c392:	005b      	lsls	r3, r3, #1
 801c394:	4413      	add	r3, r2
 801c396:	00db      	lsls	r3, r3, #3
 801c398:	4403      	add	r3, r0
 801c39a:	3304      	adds	r3, #4
 801c39c:	681b      	ldr	r3, [r3, #0]
 801c39e:	4299      	cmp	r1, r3
 801c3a0:	d112      	bne.n	801c3c8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	2b00      	cmp	r3, #0
 801c3a6:	d00c      	beq.n	801c3c2 <etharp_find_entry+0xc2>
 801c3a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3ac:	4989      	ldr	r1, [pc, #548]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c3ae:	4613      	mov	r3, r2
 801c3b0:	005b      	lsls	r3, r3, #1
 801c3b2:	4413      	add	r3, r2
 801c3b4:	00db      	lsls	r3, r3, #3
 801c3b6:	440b      	add	r3, r1
 801c3b8:	3308      	adds	r3, #8
 801c3ba:	681b      	ldr	r3, [r3, #0]
 801c3bc:	687a      	ldr	r2, [r7, #4]
 801c3be:	429a      	cmp	r2, r3
 801c3c0:	d102      	bne.n	801c3c8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801c3c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c3c6:	e100      	b.n	801c5ca <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801c3c8:	7dfb      	ldrb	r3, [r7, #23]
 801c3ca:	2b01      	cmp	r3, #1
 801c3cc:	d140      	bne.n	801c450 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801c3ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3d2:	4980      	ldr	r1, [pc, #512]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c3d4:	4613      	mov	r3, r2
 801c3d6:	005b      	lsls	r3, r3, #1
 801c3d8:	4413      	add	r3, r2
 801c3da:	00db      	lsls	r3, r3, #3
 801c3dc:	440b      	add	r3, r1
 801c3de:	681b      	ldr	r3, [r3, #0]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d01a      	beq.n	801c41a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801c3e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c3e8:	497a      	ldr	r1, [pc, #488]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c3ea:	4613      	mov	r3, r2
 801c3ec:	005b      	lsls	r3, r3, #1
 801c3ee:	4413      	add	r3, r2
 801c3f0:	00db      	lsls	r3, r3, #3
 801c3f2:	440b      	add	r3, r1
 801c3f4:	3312      	adds	r3, #18
 801c3f6:	881b      	ldrh	r3, [r3, #0]
 801c3f8:	8bba      	ldrh	r2, [r7, #28]
 801c3fa:	429a      	cmp	r2, r3
 801c3fc:	d845      	bhi.n	801c48a <etharp_find_entry+0x18a>
            old_queue = i;
 801c3fe:	8c3b      	ldrh	r3, [r7, #32]
 801c400:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801c402:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c406:	4973      	ldr	r1, [pc, #460]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c408:	4613      	mov	r3, r2
 801c40a:	005b      	lsls	r3, r3, #1
 801c40c:	4413      	add	r3, r2
 801c40e:	00db      	lsls	r3, r3, #3
 801c410:	440b      	add	r3, r1
 801c412:	3312      	adds	r3, #18
 801c414:	881b      	ldrh	r3, [r3, #0]
 801c416:	83bb      	strh	r3, [r7, #28]
 801c418:	e037      	b.n	801c48a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801c41a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c41e:	496d      	ldr	r1, [pc, #436]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c420:	4613      	mov	r3, r2
 801c422:	005b      	lsls	r3, r3, #1
 801c424:	4413      	add	r3, r2
 801c426:	00db      	lsls	r3, r3, #3
 801c428:	440b      	add	r3, r1
 801c42a:	3312      	adds	r3, #18
 801c42c:	881b      	ldrh	r3, [r3, #0]
 801c42e:	8b7a      	ldrh	r2, [r7, #26]
 801c430:	429a      	cmp	r2, r3
 801c432:	d82a      	bhi.n	801c48a <etharp_find_entry+0x18a>
            old_pending = i;
 801c434:	8c3b      	ldrh	r3, [r7, #32]
 801c436:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801c438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c43c:	4965      	ldr	r1, [pc, #404]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c43e:	4613      	mov	r3, r2
 801c440:	005b      	lsls	r3, r3, #1
 801c442:	4413      	add	r3, r2
 801c444:	00db      	lsls	r3, r3, #3
 801c446:	440b      	add	r3, r1
 801c448:	3312      	adds	r3, #18
 801c44a:	881b      	ldrh	r3, [r3, #0]
 801c44c:	837b      	strh	r3, [r7, #26]
 801c44e:	e01c      	b.n	801c48a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801c450:	7dfb      	ldrb	r3, [r7, #23]
 801c452:	2b01      	cmp	r3, #1
 801c454:	d919      	bls.n	801c48a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801c456:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c45a:	495e      	ldr	r1, [pc, #376]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c45c:	4613      	mov	r3, r2
 801c45e:	005b      	lsls	r3, r3, #1
 801c460:	4413      	add	r3, r2
 801c462:	00db      	lsls	r3, r3, #3
 801c464:	440b      	add	r3, r1
 801c466:	3312      	adds	r3, #18
 801c468:	881b      	ldrh	r3, [r3, #0]
 801c46a:	8b3a      	ldrh	r2, [r7, #24]
 801c46c:	429a      	cmp	r2, r3
 801c46e:	d80c      	bhi.n	801c48a <etharp_find_entry+0x18a>
            old_stable = i;
 801c470:	8c3b      	ldrh	r3, [r7, #32]
 801c472:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801c474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c478:	4956      	ldr	r1, [pc, #344]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c47a:	4613      	mov	r3, r2
 801c47c:	005b      	lsls	r3, r3, #1
 801c47e:	4413      	add	r3, r2
 801c480:	00db      	lsls	r3, r3, #3
 801c482:	440b      	add	r3, r1
 801c484:	3312      	adds	r3, #18
 801c486:	881b      	ldrh	r3, [r3, #0]
 801c488:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c48a:	8c3b      	ldrh	r3, [r7, #32]
 801c48c:	3301      	adds	r3, #1
 801c48e:	b29b      	uxth	r3, r3
 801c490:	843b      	strh	r3, [r7, #32]
 801c492:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c496:	2b09      	cmp	r3, #9
 801c498:	f77f af4c 	ble.w	801c334 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801c49c:	7afb      	ldrb	r3, [r7, #11]
 801c49e:	f003 0302 	and.w	r3, r3, #2
 801c4a2:	2b00      	cmp	r3, #0
 801c4a4:	d108      	bne.n	801c4b8 <etharp_find_entry+0x1b8>
 801c4a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c4aa:	2b0a      	cmp	r3, #10
 801c4ac:	d107      	bne.n	801c4be <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801c4ae:	7afb      	ldrb	r3, [r7, #11]
 801c4b0:	f003 0301 	and.w	r3, r3, #1
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d102      	bne.n	801c4be <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801c4b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c4bc:	e085      	b.n	801c5ca <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801c4be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801c4c2:	2b09      	cmp	r3, #9
 801c4c4:	dc02      	bgt.n	801c4cc <etharp_find_entry+0x1cc>
    i = empty;
 801c4c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801c4c8:	843b      	strh	r3, [r7, #32]
 801c4ca:	e039      	b.n	801c540 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801c4cc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801c4d0:	2b09      	cmp	r3, #9
 801c4d2:	dc14      	bgt.n	801c4fe <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801c4d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c4d6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801c4d8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c4dc:	493d      	ldr	r1, [pc, #244]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c4de:	4613      	mov	r3, r2
 801c4e0:	005b      	lsls	r3, r3, #1
 801c4e2:	4413      	add	r3, r2
 801c4e4:	00db      	lsls	r3, r3, #3
 801c4e6:	440b      	add	r3, r1
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d018      	beq.n	801c520 <etharp_find_entry+0x220>
 801c4ee:	4b3a      	ldr	r3, [pc, #232]	@ (801c5d8 <etharp_find_entry+0x2d8>)
 801c4f0:	f240 126d 	movw	r2, #365	@ 0x16d
 801c4f4:	493b      	ldr	r1, [pc, #236]	@ (801c5e4 <etharp_find_entry+0x2e4>)
 801c4f6:	483a      	ldr	r0, [pc, #232]	@ (801c5e0 <etharp_find_entry+0x2e0>)
 801c4f8:	f003 fed0 	bl	802029c <iprintf>
 801c4fc:	e010      	b.n	801c520 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801c4fe:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801c502:	2b09      	cmp	r3, #9
 801c504:	dc02      	bgt.n	801c50c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801c506:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c508:	843b      	strh	r3, [r7, #32]
 801c50a:	e009      	b.n	801c520 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801c50c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801c510:	2b09      	cmp	r3, #9
 801c512:	dc02      	bgt.n	801c51a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801c514:	8bfb      	ldrh	r3, [r7, #30]
 801c516:	843b      	strh	r3, [r7, #32]
 801c518:	e002      	b.n	801c520 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801c51a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c51e:	e054      	b.n	801c5ca <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c520:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c524:	2b09      	cmp	r3, #9
 801c526:	dd06      	ble.n	801c536 <etharp_find_entry+0x236>
 801c528:	4b2b      	ldr	r3, [pc, #172]	@ (801c5d8 <etharp_find_entry+0x2d8>)
 801c52a:	f240 127f 	movw	r2, #383	@ 0x17f
 801c52e:	492e      	ldr	r1, [pc, #184]	@ (801c5e8 <etharp_find_entry+0x2e8>)
 801c530:	482b      	ldr	r0, [pc, #172]	@ (801c5e0 <etharp_find_entry+0x2e0>)
 801c532:	f003 feb3 	bl	802029c <iprintf>
    etharp_free_entry(i);
 801c536:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c53a:	4618      	mov	r0, r3
 801c53c:	f7ff fe06 	bl	801c14c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801c540:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c544:	2b09      	cmp	r3, #9
 801c546:	dd06      	ble.n	801c556 <etharp_find_entry+0x256>
 801c548:	4b23      	ldr	r3, [pc, #140]	@ (801c5d8 <etharp_find_entry+0x2d8>)
 801c54a:	f240 1283 	movw	r2, #387	@ 0x183
 801c54e:	4926      	ldr	r1, [pc, #152]	@ (801c5e8 <etharp_find_entry+0x2e8>)
 801c550:	4823      	ldr	r0, [pc, #140]	@ (801c5e0 <etharp_find_entry+0x2e0>)
 801c552:	f003 fea3 	bl	802029c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801c556:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c55a:	491e      	ldr	r1, [pc, #120]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c55c:	4613      	mov	r3, r2
 801c55e:	005b      	lsls	r3, r3, #1
 801c560:	4413      	add	r3, r2
 801c562:	00db      	lsls	r3, r3, #3
 801c564:	440b      	add	r3, r1
 801c566:	3314      	adds	r3, #20
 801c568:	781b      	ldrb	r3, [r3, #0]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	d006      	beq.n	801c57c <etharp_find_entry+0x27c>
 801c56e:	4b1a      	ldr	r3, [pc, #104]	@ (801c5d8 <etharp_find_entry+0x2d8>)
 801c570:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801c574:	491d      	ldr	r1, [pc, #116]	@ (801c5ec <etharp_find_entry+0x2ec>)
 801c576:	481a      	ldr	r0, [pc, #104]	@ (801c5e0 <etharp_find_entry+0x2e0>)
 801c578:	f003 fe90 	bl	802029c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d00b      	beq.n	801c59a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801c582:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c586:	68fb      	ldr	r3, [r7, #12]
 801c588:	6819      	ldr	r1, [r3, #0]
 801c58a:	4812      	ldr	r0, [pc, #72]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c58c:	4613      	mov	r3, r2
 801c58e:	005b      	lsls	r3, r3, #1
 801c590:	4413      	add	r3, r2
 801c592:	00db      	lsls	r3, r3, #3
 801c594:	4403      	add	r3, r0
 801c596:	3304      	adds	r3, #4
 801c598:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801c59a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c59e:	490d      	ldr	r1, [pc, #52]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c5a0:	4613      	mov	r3, r2
 801c5a2:	005b      	lsls	r3, r3, #1
 801c5a4:	4413      	add	r3, r2
 801c5a6:	00db      	lsls	r3, r3, #3
 801c5a8:	440b      	add	r3, r1
 801c5aa:	3312      	adds	r3, #18
 801c5ac:	2200      	movs	r2, #0
 801c5ae:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801c5b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801c5b4:	4907      	ldr	r1, [pc, #28]	@ (801c5d4 <etharp_find_entry+0x2d4>)
 801c5b6:	4613      	mov	r3, r2
 801c5b8:	005b      	lsls	r3, r3, #1
 801c5ba:	4413      	add	r3, r2
 801c5bc:	00db      	lsls	r3, r3, #3
 801c5be:	440b      	add	r3, r1
 801c5c0:	3308      	adds	r3, #8
 801c5c2:	687a      	ldr	r2, [r7, #4]
 801c5c4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801c5c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801c5ca:	4618      	mov	r0, r3
 801c5cc:	3728      	adds	r7, #40	@ 0x28
 801c5ce:	46bd      	mov	sp, r7
 801c5d0:	bd80      	pop	{r7, pc}
 801c5d2:	bf00      	nop
 801c5d4:	20025408 	.word	0x20025408
 801c5d8:	08024198 	.word	0x08024198
 801c5dc:	080241d0 	.word	0x080241d0
 801c5e0:	08024210 	.word	0x08024210
 801c5e4:	08024238 	.word	0x08024238
 801c5e8:	08024250 	.word	0x08024250
 801c5ec:	08024264 	.word	0x08024264

0801c5f0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801c5f0:	b580      	push	{r7, lr}
 801c5f2:	b088      	sub	sp, #32
 801c5f4:	af02      	add	r7, sp, #8
 801c5f6:	60f8      	str	r0, [r7, #12]
 801c5f8:	60b9      	str	r1, [r7, #8]
 801c5fa:	607a      	str	r2, [r7, #4]
 801c5fc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801c604:	2b06      	cmp	r3, #6
 801c606:	d006      	beq.n	801c616 <etharp_update_arp_entry+0x26>
 801c608:	4b48      	ldr	r3, [pc, #288]	@ (801c72c <etharp_update_arp_entry+0x13c>)
 801c60a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801c60e:	4948      	ldr	r1, [pc, #288]	@ (801c730 <etharp_update_arp_entry+0x140>)
 801c610:	4848      	ldr	r0, [pc, #288]	@ (801c734 <etharp_update_arp_entry+0x144>)
 801c612:	f003 fe43 	bl	802029c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801c616:	68bb      	ldr	r3, [r7, #8]
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d012      	beq.n	801c642 <etharp_update_arp_entry+0x52>
 801c61c:	68bb      	ldr	r3, [r7, #8]
 801c61e:	681b      	ldr	r3, [r3, #0]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d00e      	beq.n	801c642 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c624:	68bb      	ldr	r3, [r7, #8]
 801c626:	681b      	ldr	r3, [r3, #0]
 801c628:	68f9      	ldr	r1, [r7, #12]
 801c62a:	4618      	mov	r0, r3
 801c62c:	f001 f9ee 	bl	801da0c <ip4_addr_isbroadcast_u32>
 801c630:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801c632:	2b00      	cmp	r3, #0
 801c634:	d105      	bne.n	801c642 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801c636:	68bb      	ldr	r3, [r7, #8]
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801c63e:	2be0      	cmp	r3, #224	@ 0xe0
 801c640:	d102      	bne.n	801c648 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c642:	f06f 030f 	mvn.w	r3, #15
 801c646:	e06c      	b.n	801c722 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801c648:	78fb      	ldrb	r3, [r7, #3]
 801c64a:	68fa      	ldr	r2, [r7, #12]
 801c64c:	4619      	mov	r1, r3
 801c64e:	68b8      	ldr	r0, [r7, #8]
 801c650:	f7ff fe56 	bl	801c300 <etharp_find_entry>
 801c654:	4603      	mov	r3, r0
 801c656:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801c658:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c65c:	2b00      	cmp	r3, #0
 801c65e:	da02      	bge.n	801c666 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801c660:	8afb      	ldrh	r3, [r7, #22]
 801c662:	b25b      	sxtb	r3, r3
 801c664:	e05d      	b.n	801c722 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801c666:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c66a:	4933      	ldr	r1, [pc, #204]	@ (801c738 <etharp_update_arp_entry+0x148>)
 801c66c:	4613      	mov	r3, r2
 801c66e:	005b      	lsls	r3, r3, #1
 801c670:	4413      	add	r3, r2
 801c672:	00db      	lsls	r3, r3, #3
 801c674:	440b      	add	r3, r1
 801c676:	3314      	adds	r3, #20
 801c678:	2202      	movs	r2, #2
 801c67a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801c67c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c680:	492d      	ldr	r1, [pc, #180]	@ (801c738 <etharp_update_arp_entry+0x148>)
 801c682:	4613      	mov	r3, r2
 801c684:	005b      	lsls	r3, r3, #1
 801c686:	4413      	add	r3, r2
 801c688:	00db      	lsls	r3, r3, #3
 801c68a:	440b      	add	r3, r1
 801c68c:	3308      	adds	r3, #8
 801c68e:	68fa      	ldr	r2, [r7, #12]
 801c690:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801c692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c696:	4613      	mov	r3, r2
 801c698:	005b      	lsls	r3, r3, #1
 801c69a:	4413      	add	r3, r2
 801c69c:	00db      	lsls	r3, r3, #3
 801c69e:	3308      	adds	r3, #8
 801c6a0:	4a25      	ldr	r2, [pc, #148]	@ (801c738 <etharp_update_arp_entry+0x148>)
 801c6a2:	4413      	add	r3, r2
 801c6a4:	3304      	adds	r3, #4
 801c6a6:	2206      	movs	r2, #6
 801c6a8:	6879      	ldr	r1, [r7, #4]
 801c6aa:	4618      	mov	r0, r3
 801c6ac:	f004 f821 	bl	80206f2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801c6b0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c6b4:	4920      	ldr	r1, [pc, #128]	@ (801c738 <etharp_update_arp_entry+0x148>)
 801c6b6:	4613      	mov	r3, r2
 801c6b8:	005b      	lsls	r3, r3, #1
 801c6ba:	4413      	add	r3, r2
 801c6bc:	00db      	lsls	r3, r3, #3
 801c6be:	440b      	add	r3, r1
 801c6c0:	3312      	adds	r3, #18
 801c6c2:	2200      	movs	r2, #0
 801c6c4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801c6c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c6ca:	491b      	ldr	r1, [pc, #108]	@ (801c738 <etharp_update_arp_entry+0x148>)
 801c6cc:	4613      	mov	r3, r2
 801c6ce:	005b      	lsls	r3, r3, #1
 801c6d0:	4413      	add	r3, r2
 801c6d2:	00db      	lsls	r3, r3, #3
 801c6d4:	440b      	add	r3, r1
 801c6d6:	681b      	ldr	r3, [r3, #0]
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	d021      	beq.n	801c720 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801c6dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c6e0:	4915      	ldr	r1, [pc, #84]	@ (801c738 <etharp_update_arp_entry+0x148>)
 801c6e2:	4613      	mov	r3, r2
 801c6e4:	005b      	lsls	r3, r3, #1
 801c6e6:	4413      	add	r3, r2
 801c6e8:	00db      	lsls	r3, r3, #3
 801c6ea:	440b      	add	r3, r1
 801c6ec:	681b      	ldr	r3, [r3, #0]
 801c6ee:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801c6f0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801c6f4:	4910      	ldr	r1, [pc, #64]	@ (801c738 <etharp_update_arp_entry+0x148>)
 801c6f6:	4613      	mov	r3, r2
 801c6f8:	005b      	lsls	r3, r3, #1
 801c6fa:	4413      	add	r3, r2
 801c6fc:	00db      	lsls	r3, r3, #3
 801c6fe:	440b      	add	r3, r1
 801c700:	2200      	movs	r2, #0
 801c702:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801c70a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801c70e:	9300      	str	r3, [sp, #0]
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	6939      	ldr	r1, [r7, #16]
 801c714:	68f8      	ldr	r0, [r7, #12]
 801c716:	f002 f8d9 	bl	801e8cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801c71a:	6938      	ldr	r0, [r7, #16]
 801c71c:	f7f8 fb1c 	bl	8014d58 <pbuf_free>
  }
  return ERR_OK;
 801c720:	2300      	movs	r3, #0
}
 801c722:	4618      	mov	r0, r3
 801c724:	3718      	adds	r7, #24
 801c726:	46bd      	mov	sp, r7
 801c728:	bd80      	pop	{r7, pc}
 801c72a:	bf00      	nop
 801c72c:	08024198 	.word	0x08024198
 801c730:	08024290 	.word	0x08024290
 801c734:	08024210 	.word	0x08024210
 801c738:	20025408 	.word	0x20025408

0801c73c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801c73c:	b580      	push	{r7, lr}
 801c73e:	b084      	sub	sp, #16
 801c740:	af00      	add	r7, sp, #0
 801c742:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c744:	2300      	movs	r3, #0
 801c746:	60fb      	str	r3, [r7, #12]
 801c748:	e01e      	b.n	801c788 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801c74a:	4913      	ldr	r1, [pc, #76]	@ (801c798 <etharp_cleanup_netif+0x5c>)
 801c74c:	68fa      	ldr	r2, [r7, #12]
 801c74e:	4613      	mov	r3, r2
 801c750:	005b      	lsls	r3, r3, #1
 801c752:	4413      	add	r3, r2
 801c754:	00db      	lsls	r3, r3, #3
 801c756:	440b      	add	r3, r1
 801c758:	3314      	adds	r3, #20
 801c75a:	781b      	ldrb	r3, [r3, #0]
 801c75c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801c75e:	7afb      	ldrb	r3, [r7, #11]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d00e      	beq.n	801c782 <etharp_cleanup_netif+0x46>
 801c764:	490c      	ldr	r1, [pc, #48]	@ (801c798 <etharp_cleanup_netif+0x5c>)
 801c766:	68fa      	ldr	r2, [r7, #12]
 801c768:	4613      	mov	r3, r2
 801c76a:	005b      	lsls	r3, r3, #1
 801c76c:	4413      	add	r3, r2
 801c76e:	00db      	lsls	r3, r3, #3
 801c770:	440b      	add	r3, r1
 801c772:	3308      	adds	r3, #8
 801c774:	681b      	ldr	r3, [r3, #0]
 801c776:	687a      	ldr	r2, [r7, #4]
 801c778:	429a      	cmp	r2, r3
 801c77a:	d102      	bne.n	801c782 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801c77c:	68f8      	ldr	r0, [r7, #12]
 801c77e:	f7ff fce5 	bl	801c14c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801c782:	68fb      	ldr	r3, [r7, #12]
 801c784:	3301      	adds	r3, #1
 801c786:	60fb      	str	r3, [r7, #12]
 801c788:	68fb      	ldr	r3, [r7, #12]
 801c78a:	2b09      	cmp	r3, #9
 801c78c:	dddd      	ble.n	801c74a <etharp_cleanup_netif+0xe>
    }
  }
}
 801c78e:	bf00      	nop
 801c790:	bf00      	nop
 801c792:	3710      	adds	r7, #16
 801c794:	46bd      	mov	sp, r7
 801c796:	bd80      	pop	{r7, pc}
 801c798:	20025408 	.word	0x20025408

0801c79c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801c79c:	b5b0      	push	{r4, r5, r7, lr}
 801c79e:	b08a      	sub	sp, #40	@ 0x28
 801c7a0:	af04      	add	r7, sp, #16
 801c7a2:	6078      	str	r0, [r7, #4]
 801c7a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801c7a6:	683b      	ldr	r3, [r7, #0]
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	d107      	bne.n	801c7bc <etharp_input+0x20>
 801c7ac:	4b49      	ldr	r3, [pc, #292]	@ (801c8d4 <etharp_input+0x138>)
 801c7ae:	f240 228a 	movw	r2, #650	@ 0x28a
 801c7b2:	4949      	ldr	r1, [pc, #292]	@ (801c8d8 <etharp_input+0x13c>)
 801c7b4:	4849      	ldr	r0, [pc, #292]	@ (801c8dc <etharp_input+0x140>)
 801c7b6:	f003 fd71 	bl	802029c <iprintf>
 801c7ba:	e088      	b.n	801c8ce <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	685b      	ldr	r3, [r3, #4]
 801c7c0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c7c2:	693b      	ldr	r3, [r7, #16]
 801c7c4:	881b      	ldrh	r3, [r3, #0]
 801c7c6:	b29b      	uxth	r3, r3
 801c7c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c7cc:	d10c      	bne.n	801c7e8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c7ce:	693b      	ldr	r3, [r7, #16]
 801c7d0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801c7d2:	2b06      	cmp	r3, #6
 801c7d4:	d108      	bne.n	801c7e8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c7d6:	693b      	ldr	r3, [r7, #16]
 801c7d8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801c7da:	2b04      	cmp	r3, #4
 801c7dc:	d104      	bne.n	801c7e8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801c7de:	693b      	ldr	r3, [r7, #16]
 801c7e0:	885b      	ldrh	r3, [r3, #2]
 801c7e2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801c7e4:	2b08      	cmp	r3, #8
 801c7e6:	d00f      	beq.n	801c808 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801c7e8:	4b3d      	ldr	r3, [pc, #244]	@ (801c8e0 <etharp_input+0x144>)
 801c7ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c7ec:	3301      	adds	r3, #1
 801c7ee:	b29a      	uxth	r2, r3
 801c7f0:	4b3b      	ldr	r3, [pc, #236]	@ (801c8e0 <etharp_input+0x144>)
 801c7f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801c7f4:	4b3a      	ldr	r3, [pc, #232]	@ (801c8e0 <etharp_input+0x144>)
 801c7f6:	8bdb      	ldrh	r3, [r3, #30]
 801c7f8:	3301      	adds	r3, #1
 801c7fa:	b29a      	uxth	r2, r3
 801c7fc:	4b38      	ldr	r3, [pc, #224]	@ (801c8e0 <etharp_input+0x144>)
 801c7fe:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801c800:	6878      	ldr	r0, [r7, #4]
 801c802:	f7f8 faa9 	bl	8014d58 <pbuf_free>
    return;
 801c806:	e062      	b.n	801c8ce <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801c808:	4b35      	ldr	r3, [pc, #212]	@ (801c8e0 <etharp_input+0x144>)
 801c80a:	8b5b      	ldrh	r3, [r3, #26]
 801c80c:	3301      	adds	r3, #1
 801c80e:	b29a      	uxth	r2, r3
 801c810:	4b33      	ldr	r3, [pc, #204]	@ (801c8e0 <etharp_input+0x144>)
 801c812:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801c814:	693b      	ldr	r3, [r7, #16]
 801c816:	330e      	adds	r3, #14
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801c81c:	693b      	ldr	r3, [r7, #16]
 801c81e:	3318      	adds	r3, #24
 801c820:	681b      	ldr	r3, [r3, #0]
 801c822:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c824:	683b      	ldr	r3, [r7, #0]
 801c826:	3304      	adds	r3, #4
 801c828:	681b      	ldr	r3, [r3, #0]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d102      	bne.n	801c834 <etharp_input+0x98>
    for_us = 0;
 801c82e:	2300      	movs	r3, #0
 801c830:	75fb      	strb	r3, [r7, #23]
 801c832:	e009      	b.n	801c848 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801c834:	68ba      	ldr	r2, [r7, #8]
 801c836:	683b      	ldr	r3, [r7, #0]
 801c838:	3304      	adds	r3, #4
 801c83a:	681b      	ldr	r3, [r3, #0]
 801c83c:	429a      	cmp	r2, r3
 801c83e:	bf0c      	ite	eq
 801c840:	2301      	moveq	r3, #1
 801c842:	2300      	movne	r3, #0
 801c844:	b2db      	uxtb	r3, r3
 801c846:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801c848:	693b      	ldr	r3, [r7, #16]
 801c84a:	f103 0208 	add.w	r2, r3, #8
 801c84e:	7dfb      	ldrb	r3, [r7, #23]
 801c850:	2b00      	cmp	r3, #0
 801c852:	d001      	beq.n	801c858 <etharp_input+0xbc>
 801c854:	2301      	movs	r3, #1
 801c856:	e000      	b.n	801c85a <etharp_input+0xbe>
 801c858:	2302      	movs	r3, #2
 801c85a:	f107 010c 	add.w	r1, r7, #12
 801c85e:	6838      	ldr	r0, [r7, #0]
 801c860:	f7ff fec6 	bl	801c5f0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801c864:	693b      	ldr	r3, [r7, #16]
 801c866:	88db      	ldrh	r3, [r3, #6]
 801c868:	b29b      	uxth	r3, r3
 801c86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c86e:	d003      	beq.n	801c878 <etharp_input+0xdc>
 801c870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c874:	d025      	beq.n	801c8c2 <etharp_input+0x126>
 801c876:	e01d      	b.n	801c8b4 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801c878:	7dfb      	ldrb	r3, [r7, #23]
 801c87a:	2b00      	cmp	r3, #0
 801c87c:	d023      	beq.n	801c8c6 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801c87e:	683b      	ldr	r3, [r7, #0]
 801c880:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801c884:	693b      	ldr	r3, [r7, #16]
 801c886:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801c88a:	683b      	ldr	r3, [r7, #0]
 801c88c:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801c890:	683b      	ldr	r3, [r7, #0]
 801c892:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801c894:	693a      	ldr	r2, [r7, #16]
 801c896:	3208      	adds	r2, #8
        etharp_raw(netif,
 801c898:	2102      	movs	r1, #2
 801c89a:	9103      	str	r1, [sp, #12]
 801c89c:	f107 010c 	add.w	r1, r7, #12
 801c8a0:	9102      	str	r1, [sp, #8]
 801c8a2:	9201      	str	r2, [sp, #4]
 801c8a4:	9300      	str	r3, [sp, #0]
 801c8a6:	462b      	mov	r3, r5
 801c8a8:	4622      	mov	r2, r4
 801c8aa:	4601      	mov	r1, r0
 801c8ac:	6838      	ldr	r0, [r7, #0]
 801c8ae:	f000 fb0b 	bl	801cec8 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801c8b2:	e008      	b.n	801c8c6 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801c8b4:	4b0a      	ldr	r3, [pc, #40]	@ (801c8e0 <etharp_input+0x144>)
 801c8b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801c8b8:	3301      	adds	r3, #1
 801c8ba:	b29a      	uxth	r2, r3
 801c8bc:	4b08      	ldr	r3, [pc, #32]	@ (801c8e0 <etharp_input+0x144>)
 801c8be:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801c8c0:	e002      	b.n	801c8c8 <etharp_input+0x12c>
      break;
 801c8c2:	bf00      	nop
 801c8c4:	e000      	b.n	801c8c8 <etharp_input+0x12c>
      break;
 801c8c6:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801c8c8:	6878      	ldr	r0, [r7, #4]
 801c8ca:	f7f8 fa45 	bl	8014d58 <pbuf_free>
}
 801c8ce:	3718      	adds	r7, #24
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	bdb0      	pop	{r4, r5, r7, pc}
 801c8d4:	08024198 	.word	0x08024198
 801c8d8:	080242e8 	.word	0x080242e8
 801c8dc:	08024210 	.word	0x08024210
 801c8e0:	200252ac 	.word	0x200252ac

0801c8e4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b086      	sub	sp, #24
 801c8e8:	af02      	add	r7, sp, #8
 801c8ea:	60f8      	str	r0, [r7, #12]
 801c8ec:	60b9      	str	r1, [r7, #8]
 801c8ee:	4613      	mov	r3, r2
 801c8f0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801c8f2:	79fa      	ldrb	r2, [r7, #7]
 801c8f4:	4944      	ldr	r1, [pc, #272]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c8f6:	4613      	mov	r3, r2
 801c8f8:	005b      	lsls	r3, r3, #1
 801c8fa:	4413      	add	r3, r2
 801c8fc:	00db      	lsls	r3, r3, #3
 801c8fe:	440b      	add	r3, r1
 801c900:	3314      	adds	r3, #20
 801c902:	781b      	ldrb	r3, [r3, #0]
 801c904:	2b01      	cmp	r3, #1
 801c906:	d806      	bhi.n	801c916 <etharp_output_to_arp_index+0x32>
 801c908:	4b40      	ldr	r3, [pc, #256]	@ (801ca0c <etharp_output_to_arp_index+0x128>)
 801c90a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801c90e:	4940      	ldr	r1, [pc, #256]	@ (801ca10 <etharp_output_to_arp_index+0x12c>)
 801c910:	4840      	ldr	r0, [pc, #256]	@ (801ca14 <etharp_output_to_arp_index+0x130>)
 801c912:	f003 fcc3 	bl	802029c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801c916:	79fa      	ldrb	r2, [r7, #7]
 801c918:	493b      	ldr	r1, [pc, #236]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c91a:	4613      	mov	r3, r2
 801c91c:	005b      	lsls	r3, r3, #1
 801c91e:	4413      	add	r3, r2
 801c920:	00db      	lsls	r3, r3, #3
 801c922:	440b      	add	r3, r1
 801c924:	3314      	adds	r3, #20
 801c926:	781b      	ldrb	r3, [r3, #0]
 801c928:	2b02      	cmp	r3, #2
 801c92a:	d153      	bne.n	801c9d4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801c92c:	79fa      	ldrb	r2, [r7, #7]
 801c92e:	4936      	ldr	r1, [pc, #216]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c930:	4613      	mov	r3, r2
 801c932:	005b      	lsls	r3, r3, #1
 801c934:	4413      	add	r3, r2
 801c936:	00db      	lsls	r3, r3, #3
 801c938:	440b      	add	r3, r1
 801c93a:	3312      	adds	r3, #18
 801c93c:	881b      	ldrh	r3, [r3, #0]
 801c93e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801c942:	d919      	bls.n	801c978 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801c944:	79fa      	ldrb	r2, [r7, #7]
 801c946:	4613      	mov	r3, r2
 801c948:	005b      	lsls	r3, r3, #1
 801c94a:	4413      	add	r3, r2
 801c94c:	00db      	lsls	r3, r3, #3
 801c94e:	4a2e      	ldr	r2, [pc, #184]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c950:	4413      	add	r3, r2
 801c952:	3304      	adds	r3, #4
 801c954:	4619      	mov	r1, r3
 801c956:	68f8      	ldr	r0, [r7, #12]
 801c958:	f000 fb72 	bl	801d040 <etharp_request>
 801c95c:	4603      	mov	r3, r0
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d138      	bne.n	801c9d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c962:	79fa      	ldrb	r2, [r7, #7]
 801c964:	4928      	ldr	r1, [pc, #160]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c966:	4613      	mov	r3, r2
 801c968:	005b      	lsls	r3, r3, #1
 801c96a:	4413      	add	r3, r2
 801c96c:	00db      	lsls	r3, r3, #3
 801c96e:	440b      	add	r3, r1
 801c970:	3314      	adds	r3, #20
 801c972:	2203      	movs	r2, #3
 801c974:	701a      	strb	r2, [r3, #0]
 801c976:	e02d      	b.n	801c9d4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801c978:	79fa      	ldrb	r2, [r7, #7]
 801c97a:	4923      	ldr	r1, [pc, #140]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c97c:	4613      	mov	r3, r2
 801c97e:	005b      	lsls	r3, r3, #1
 801c980:	4413      	add	r3, r2
 801c982:	00db      	lsls	r3, r3, #3
 801c984:	440b      	add	r3, r1
 801c986:	3312      	adds	r3, #18
 801c988:	881b      	ldrh	r3, [r3, #0]
 801c98a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801c98e:	d321      	bcc.n	801c9d4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801c990:	79fa      	ldrb	r2, [r7, #7]
 801c992:	4613      	mov	r3, r2
 801c994:	005b      	lsls	r3, r3, #1
 801c996:	4413      	add	r3, r2
 801c998:	00db      	lsls	r3, r3, #3
 801c99a:	4a1b      	ldr	r2, [pc, #108]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c99c:	4413      	add	r3, r2
 801c99e:	1d19      	adds	r1, r3, #4
 801c9a0:	79fa      	ldrb	r2, [r7, #7]
 801c9a2:	4613      	mov	r3, r2
 801c9a4:	005b      	lsls	r3, r3, #1
 801c9a6:	4413      	add	r3, r2
 801c9a8:	00db      	lsls	r3, r3, #3
 801c9aa:	3308      	adds	r3, #8
 801c9ac:	4a16      	ldr	r2, [pc, #88]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c9ae:	4413      	add	r3, r2
 801c9b0:	3304      	adds	r3, #4
 801c9b2:	461a      	mov	r2, r3
 801c9b4:	68f8      	ldr	r0, [r7, #12]
 801c9b6:	f000 fb21 	bl	801cffc <etharp_request_dst>
 801c9ba:	4603      	mov	r3, r0
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d109      	bne.n	801c9d4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801c9c0:	79fa      	ldrb	r2, [r7, #7]
 801c9c2:	4911      	ldr	r1, [pc, #68]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c9c4:	4613      	mov	r3, r2
 801c9c6:	005b      	lsls	r3, r3, #1
 801c9c8:	4413      	add	r3, r2
 801c9ca:	00db      	lsls	r3, r3, #3
 801c9cc:	440b      	add	r3, r1
 801c9ce:	3314      	adds	r3, #20
 801c9d0:	2203      	movs	r2, #3
 801c9d2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801c9d4:	68fb      	ldr	r3, [r7, #12]
 801c9d6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801c9da:	79fa      	ldrb	r2, [r7, #7]
 801c9dc:	4613      	mov	r3, r2
 801c9de:	005b      	lsls	r3, r3, #1
 801c9e0:	4413      	add	r3, r2
 801c9e2:	00db      	lsls	r3, r3, #3
 801c9e4:	3308      	adds	r3, #8
 801c9e6:	4a08      	ldr	r2, [pc, #32]	@ (801ca08 <etharp_output_to_arp_index+0x124>)
 801c9e8:	4413      	add	r3, r2
 801c9ea:	3304      	adds	r3, #4
 801c9ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c9f0:	9200      	str	r2, [sp, #0]
 801c9f2:	460a      	mov	r2, r1
 801c9f4:	68b9      	ldr	r1, [r7, #8]
 801c9f6:	68f8      	ldr	r0, [r7, #12]
 801c9f8:	f001 ff68 	bl	801e8cc <ethernet_output>
 801c9fc:	4603      	mov	r3, r0
}
 801c9fe:	4618      	mov	r0, r3
 801ca00:	3710      	adds	r7, #16
 801ca02:	46bd      	mov	sp, r7
 801ca04:	bd80      	pop	{r7, pc}
 801ca06:	bf00      	nop
 801ca08:	20025408 	.word	0x20025408
 801ca0c:	08024198 	.word	0x08024198
 801ca10:	08024308 	.word	0x08024308
 801ca14:	08024210 	.word	0x08024210

0801ca18 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ca18:	b580      	push	{r7, lr}
 801ca1a:	b08a      	sub	sp, #40	@ 0x28
 801ca1c:	af02      	add	r7, sp, #8
 801ca1e:	60f8      	str	r0, [r7, #12]
 801ca20:	60b9      	str	r1, [r7, #8]
 801ca22:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ca24:	687b      	ldr	r3, [r7, #4]
 801ca26:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ca28:	68fb      	ldr	r3, [r7, #12]
 801ca2a:	2b00      	cmp	r3, #0
 801ca2c:	d106      	bne.n	801ca3c <etharp_output+0x24>
 801ca2e:	4b76      	ldr	r3, [pc, #472]	@ (801cc08 <etharp_output+0x1f0>)
 801ca30:	f240 321e 	movw	r2, #798	@ 0x31e
 801ca34:	4975      	ldr	r1, [pc, #468]	@ (801cc0c <etharp_output+0x1f4>)
 801ca36:	4876      	ldr	r0, [pc, #472]	@ (801cc10 <etharp_output+0x1f8>)
 801ca38:	f003 fc30 	bl	802029c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ca3c:	68bb      	ldr	r3, [r7, #8]
 801ca3e:	2b00      	cmp	r3, #0
 801ca40:	d106      	bne.n	801ca50 <etharp_output+0x38>
 801ca42:	4b71      	ldr	r3, [pc, #452]	@ (801cc08 <etharp_output+0x1f0>)
 801ca44:	f240 321f 	movw	r2, #799	@ 0x31f
 801ca48:	4972      	ldr	r1, [pc, #456]	@ (801cc14 <etharp_output+0x1fc>)
 801ca4a:	4871      	ldr	r0, [pc, #452]	@ (801cc10 <etharp_output+0x1f8>)
 801ca4c:	f003 fc26 	bl	802029c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ca50:	687b      	ldr	r3, [r7, #4]
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d106      	bne.n	801ca64 <etharp_output+0x4c>
 801ca56:	4b6c      	ldr	r3, [pc, #432]	@ (801cc08 <etharp_output+0x1f0>)
 801ca58:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801ca5c:	496e      	ldr	r1, [pc, #440]	@ (801cc18 <etharp_output+0x200>)
 801ca5e:	486c      	ldr	r0, [pc, #432]	@ (801cc10 <etharp_output+0x1f8>)
 801ca60:	f003 fc1c 	bl	802029c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ca64:	687b      	ldr	r3, [r7, #4]
 801ca66:	681b      	ldr	r3, [r3, #0]
 801ca68:	68f9      	ldr	r1, [r7, #12]
 801ca6a:	4618      	mov	r0, r3
 801ca6c:	f000 ffce 	bl	801da0c <ip4_addr_isbroadcast_u32>
 801ca70:	4603      	mov	r3, r0
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d002      	beq.n	801ca7c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ca76:	4b69      	ldr	r3, [pc, #420]	@ (801cc1c <etharp_output+0x204>)
 801ca78:	61fb      	str	r3, [r7, #28]
 801ca7a:	e0b5      	b.n	801cbe8 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	681b      	ldr	r3, [r3, #0]
 801ca80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ca84:	2be0      	cmp	r3, #224	@ 0xe0
 801ca86:	d118      	bne.n	801caba <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ca88:	2301      	movs	r3, #1
 801ca8a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ca90:	235e      	movs	r3, #94	@ 0x5e
 801ca92:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	3301      	adds	r3, #1
 801ca98:	781b      	ldrb	r3, [r3, #0]
 801ca9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ca9e:	b2db      	uxtb	r3, r3
 801caa0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	3302      	adds	r3, #2
 801caa6:	781b      	ldrb	r3, [r3, #0]
 801caa8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	3303      	adds	r3, #3
 801caae:	781b      	ldrb	r3, [r3, #0]
 801cab0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801cab2:	f107 0310 	add.w	r3, r7, #16
 801cab6:	61fb      	str	r3, [r7, #28]
 801cab8:	e096      	b.n	801cbe8 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801caba:	687b      	ldr	r3, [r7, #4]
 801cabc:	681a      	ldr	r2, [r3, #0]
 801cabe:	68fb      	ldr	r3, [r7, #12]
 801cac0:	3304      	adds	r3, #4
 801cac2:	681b      	ldr	r3, [r3, #0]
 801cac4:	405a      	eors	r2, r3
 801cac6:	68fb      	ldr	r3, [r7, #12]
 801cac8:	3308      	adds	r3, #8
 801caca:	681b      	ldr	r3, [r3, #0]
 801cacc:	4013      	ands	r3, r2
 801cace:	2b00      	cmp	r3, #0
 801cad0:	d012      	beq.n	801caf8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	681b      	ldr	r3, [r3, #0]
 801cad6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801cad8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801cadc:	4293      	cmp	r3, r2
 801cade:	d00b      	beq.n	801caf8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801cae0:	68fb      	ldr	r3, [r7, #12]
 801cae2:	330c      	adds	r3, #12
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d003      	beq.n	801caf2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801caea:	68fb      	ldr	r3, [r7, #12]
 801caec:	330c      	adds	r3, #12
 801caee:	61bb      	str	r3, [r7, #24]
 801caf0:	e002      	b.n	801caf8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801caf2:	f06f 0303 	mvn.w	r3, #3
 801caf6:	e083      	b.n	801cc00 <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801caf8:	4b49      	ldr	r3, [pc, #292]	@ (801cc20 <etharp_output+0x208>)
 801cafa:	781b      	ldrb	r3, [r3, #0]
 801cafc:	4619      	mov	r1, r3
 801cafe:	4a49      	ldr	r2, [pc, #292]	@ (801cc24 <etharp_output+0x20c>)
 801cb00:	460b      	mov	r3, r1
 801cb02:	005b      	lsls	r3, r3, #1
 801cb04:	440b      	add	r3, r1
 801cb06:	00db      	lsls	r3, r3, #3
 801cb08:	4413      	add	r3, r2
 801cb0a:	3314      	adds	r3, #20
 801cb0c:	781b      	ldrb	r3, [r3, #0]
 801cb0e:	2b01      	cmp	r3, #1
 801cb10:	d92b      	bls.n	801cb6a <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cb12:	4b43      	ldr	r3, [pc, #268]	@ (801cc20 <etharp_output+0x208>)
 801cb14:	781b      	ldrb	r3, [r3, #0]
 801cb16:	4619      	mov	r1, r3
 801cb18:	4a42      	ldr	r2, [pc, #264]	@ (801cc24 <etharp_output+0x20c>)
 801cb1a:	460b      	mov	r3, r1
 801cb1c:	005b      	lsls	r3, r3, #1
 801cb1e:	440b      	add	r3, r1
 801cb20:	00db      	lsls	r3, r3, #3
 801cb22:	4413      	add	r3, r2
 801cb24:	3308      	adds	r3, #8
 801cb26:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801cb28:	68fa      	ldr	r2, [r7, #12]
 801cb2a:	429a      	cmp	r2, r3
 801cb2c:	d11d      	bne.n	801cb6a <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801cb2e:	69bb      	ldr	r3, [r7, #24]
 801cb30:	681a      	ldr	r2, [r3, #0]
 801cb32:	4b3b      	ldr	r3, [pc, #236]	@ (801cc20 <etharp_output+0x208>)
 801cb34:	781b      	ldrb	r3, [r3, #0]
 801cb36:	4618      	mov	r0, r3
 801cb38:	493a      	ldr	r1, [pc, #232]	@ (801cc24 <etharp_output+0x20c>)
 801cb3a:	4603      	mov	r3, r0
 801cb3c:	005b      	lsls	r3, r3, #1
 801cb3e:	4403      	add	r3, r0
 801cb40:	00db      	lsls	r3, r3, #3
 801cb42:	440b      	add	r3, r1
 801cb44:	3304      	adds	r3, #4
 801cb46:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801cb48:	429a      	cmp	r2, r3
 801cb4a:	d10e      	bne.n	801cb6a <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801cb4c:	4b36      	ldr	r3, [pc, #216]	@ (801cc28 <etharp_output+0x210>)
 801cb4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801cb50:	3301      	adds	r3, #1
 801cb52:	b29a      	uxth	r2, r3
 801cb54:	4b34      	ldr	r3, [pc, #208]	@ (801cc28 <etharp_output+0x210>)
 801cb56:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801cb58:	4b31      	ldr	r3, [pc, #196]	@ (801cc20 <etharp_output+0x208>)
 801cb5a:	781b      	ldrb	r3, [r3, #0]
 801cb5c:	461a      	mov	r2, r3
 801cb5e:	68b9      	ldr	r1, [r7, #8]
 801cb60:	68f8      	ldr	r0, [r7, #12]
 801cb62:	f7ff febf 	bl	801c8e4 <etharp_output_to_arp_index>
 801cb66:	4603      	mov	r3, r0
 801cb68:	e04a      	b.n	801cc00 <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cb6a:	2300      	movs	r3, #0
 801cb6c:	75fb      	strb	r3, [r7, #23]
 801cb6e:	e031      	b.n	801cbd4 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cb70:	7dfa      	ldrb	r2, [r7, #23]
 801cb72:	492c      	ldr	r1, [pc, #176]	@ (801cc24 <etharp_output+0x20c>)
 801cb74:	4613      	mov	r3, r2
 801cb76:	005b      	lsls	r3, r3, #1
 801cb78:	4413      	add	r3, r2
 801cb7a:	00db      	lsls	r3, r3, #3
 801cb7c:	440b      	add	r3, r1
 801cb7e:	3314      	adds	r3, #20
 801cb80:	781b      	ldrb	r3, [r3, #0]
 801cb82:	2b01      	cmp	r3, #1
 801cb84:	d923      	bls.n	801cbce <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801cb86:	7dfa      	ldrb	r2, [r7, #23]
 801cb88:	4926      	ldr	r1, [pc, #152]	@ (801cc24 <etharp_output+0x20c>)
 801cb8a:	4613      	mov	r3, r2
 801cb8c:	005b      	lsls	r3, r3, #1
 801cb8e:	4413      	add	r3, r2
 801cb90:	00db      	lsls	r3, r3, #3
 801cb92:	440b      	add	r3, r1
 801cb94:	3308      	adds	r3, #8
 801cb96:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801cb98:	68fa      	ldr	r2, [r7, #12]
 801cb9a:	429a      	cmp	r2, r3
 801cb9c:	d117      	bne.n	801cbce <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801cb9e:	69bb      	ldr	r3, [r7, #24]
 801cba0:	6819      	ldr	r1, [r3, #0]
 801cba2:	7dfa      	ldrb	r2, [r7, #23]
 801cba4:	481f      	ldr	r0, [pc, #124]	@ (801cc24 <etharp_output+0x20c>)
 801cba6:	4613      	mov	r3, r2
 801cba8:	005b      	lsls	r3, r3, #1
 801cbaa:	4413      	add	r3, r2
 801cbac:	00db      	lsls	r3, r3, #3
 801cbae:	4403      	add	r3, r0
 801cbb0:	3304      	adds	r3, #4
 801cbb2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801cbb4:	4299      	cmp	r1, r3
 801cbb6:	d10a      	bne.n	801cbce <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801cbb8:	4a19      	ldr	r2, [pc, #100]	@ (801cc20 <etharp_output+0x208>)
 801cbba:	7dfb      	ldrb	r3, [r7, #23]
 801cbbc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801cbbe:	7dfb      	ldrb	r3, [r7, #23]
 801cbc0:	461a      	mov	r2, r3
 801cbc2:	68b9      	ldr	r1, [r7, #8]
 801cbc4:	68f8      	ldr	r0, [r7, #12]
 801cbc6:	f7ff fe8d 	bl	801c8e4 <etharp_output_to_arp_index>
 801cbca:	4603      	mov	r3, r0
 801cbcc:	e018      	b.n	801cc00 <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801cbce:	7dfb      	ldrb	r3, [r7, #23]
 801cbd0:	3301      	adds	r3, #1
 801cbd2:	75fb      	strb	r3, [r7, #23]
 801cbd4:	7dfb      	ldrb	r3, [r7, #23]
 801cbd6:	2b09      	cmp	r3, #9
 801cbd8:	d9ca      	bls.n	801cb70 <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801cbda:	68ba      	ldr	r2, [r7, #8]
 801cbdc:	69b9      	ldr	r1, [r7, #24]
 801cbde:	68f8      	ldr	r0, [r7, #12]
 801cbe0:	f000 f824 	bl	801cc2c <etharp_query>
 801cbe4:	4603      	mov	r3, r0
 801cbe6:	e00b      	b.n	801cc00 <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801cbe8:	68fb      	ldr	r3, [r7, #12]
 801cbea:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801cbee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801cbf2:	9300      	str	r3, [sp, #0]
 801cbf4:	69fb      	ldr	r3, [r7, #28]
 801cbf6:	68b9      	ldr	r1, [r7, #8]
 801cbf8:	68f8      	ldr	r0, [r7, #12]
 801cbfa:	f001 fe67 	bl	801e8cc <ethernet_output>
 801cbfe:	4603      	mov	r3, r0
}
 801cc00:	4618      	mov	r0, r3
 801cc02:	3720      	adds	r7, #32
 801cc04:	46bd      	mov	sp, r7
 801cc06:	bd80      	pop	{r7, pc}
 801cc08:	08024198 	.word	0x08024198
 801cc0c:	080242e8 	.word	0x080242e8
 801cc10:	08024210 	.word	0x08024210
 801cc14:	08024338 	.word	0x08024338
 801cc18:	080242d8 	.word	0x080242d8
 801cc1c:	08024ec8 	.word	0x08024ec8
 801cc20:	200254f8 	.word	0x200254f8
 801cc24:	20025408 	.word	0x20025408
 801cc28:	200252ac 	.word	0x200252ac

0801cc2c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801cc2c:	b580      	push	{r7, lr}
 801cc2e:	b08c      	sub	sp, #48	@ 0x30
 801cc30:	af02      	add	r7, sp, #8
 801cc32:	60f8      	str	r0, [r7, #12]
 801cc34:	60b9      	str	r1, [r7, #8]
 801cc36:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801cc38:	68fb      	ldr	r3, [r7, #12]
 801cc3a:	3326      	adds	r3, #38	@ 0x26
 801cc3c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801cc3e:	23ff      	movs	r3, #255	@ 0xff
 801cc40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801cc44:	2300      	movs	r3, #0
 801cc46:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801cc48:	68bb      	ldr	r3, [r7, #8]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	68f9      	ldr	r1, [r7, #12]
 801cc4e:	4618      	mov	r0, r3
 801cc50:	f000 fedc 	bl	801da0c <ip4_addr_isbroadcast_u32>
 801cc54:	4603      	mov	r3, r0
 801cc56:	2b00      	cmp	r3, #0
 801cc58:	d10c      	bne.n	801cc74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801cc5a:	68bb      	ldr	r3, [r7, #8]
 801cc5c:	681b      	ldr	r3, [r3, #0]
 801cc5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801cc62:	2be0      	cmp	r3, #224	@ 0xe0
 801cc64:	d006      	beq.n	801cc74 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801cc66:	68bb      	ldr	r3, [r7, #8]
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d003      	beq.n	801cc74 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801cc6c:	68bb      	ldr	r3, [r7, #8]
 801cc6e:	681b      	ldr	r3, [r3, #0]
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d102      	bne.n	801cc7a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801cc74:	f06f 030f 	mvn.w	r3, #15
 801cc78:	e110      	b.n	801ce9c <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801cc7a:	68fa      	ldr	r2, [r7, #12]
 801cc7c:	2101      	movs	r1, #1
 801cc7e:	68b8      	ldr	r0, [r7, #8]
 801cc80:	f7ff fb3e 	bl	801c300 <etharp_find_entry>
 801cc84:	4603      	mov	r3, r0
 801cc86:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801cc88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	da0b      	bge.n	801cca8 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d005      	beq.n	801cca2 <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801cc96:	4b83      	ldr	r3, [pc, #524]	@ (801cea4 <etharp_query+0x278>)
 801cc98:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cc9a:	3301      	adds	r3, #1
 801cc9c:	b29a      	uxth	r2, r3
 801cc9e:	4b81      	ldr	r3, [pc, #516]	@ (801cea4 <etharp_query+0x278>)
 801cca0:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801cca2:	8a7b      	ldrh	r3, [r7, #18]
 801cca4:	b25b      	sxtb	r3, r3
 801cca6:	e0f9      	b.n	801ce9c <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801cca8:	8a7b      	ldrh	r3, [r7, #18]
 801ccaa:	2b7e      	cmp	r3, #126	@ 0x7e
 801ccac:	d906      	bls.n	801ccbc <etharp_query+0x90>
 801ccae:	4b7e      	ldr	r3, [pc, #504]	@ (801cea8 <etharp_query+0x27c>)
 801ccb0:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ccb4:	497d      	ldr	r1, [pc, #500]	@ (801ceac <etharp_query+0x280>)
 801ccb6:	487e      	ldr	r0, [pc, #504]	@ (801ceb0 <etharp_query+0x284>)
 801ccb8:	f003 faf0 	bl	802029c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ccbc:	8a7b      	ldrh	r3, [r7, #18]
 801ccbe:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ccc0:	7c7a      	ldrb	r2, [r7, #17]
 801ccc2:	497c      	ldr	r1, [pc, #496]	@ (801ceb4 <etharp_query+0x288>)
 801ccc4:	4613      	mov	r3, r2
 801ccc6:	005b      	lsls	r3, r3, #1
 801ccc8:	4413      	add	r3, r2
 801ccca:	00db      	lsls	r3, r3, #3
 801cccc:	440b      	add	r3, r1
 801ccce:	3314      	adds	r3, #20
 801ccd0:	781b      	ldrb	r3, [r3, #0]
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d115      	bne.n	801cd02 <etharp_query+0xd6>
    is_new_entry = 1;
 801ccd6:	2301      	movs	r3, #1
 801ccd8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ccda:	7c7a      	ldrb	r2, [r7, #17]
 801ccdc:	4975      	ldr	r1, [pc, #468]	@ (801ceb4 <etharp_query+0x288>)
 801ccde:	4613      	mov	r3, r2
 801cce0:	005b      	lsls	r3, r3, #1
 801cce2:	4413      	add	r3, r2
 801cce4:	00db      	lsls	r3, r3, #3
 801cce6:	440b      	add	r3, r1
 801cce8:	3314      	adds	r3, #20
 801ccea:	2201      	movs	r2, #1
 801ccec:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ccee:	7c7a      	ldrb	r2, [r7, #17]
 801ccf0:	4970      	ldr	r1, [pc, #448]	@ (801ceb4 <etharp_query+0x288>)
 801ccf2:	4613      	mov	r3, r2
 801ccf4:	005b      	lsls	r3, r3, #1
 801ccf6:	4413      	add	r3, r2
 801ccf8:	00db      	lsls	r3, r3, #3
 801ccfa:	440b      	add	r3, r1
 801ccfc:	3308      	adds	r3, #8
 801ccfe:	68fa      	ldr	r2, [r7, #12]
 801cd00:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801cd02:	7c7a      	ldrb	r2, [r7, #17]
 801cd04:	496b      	ldr	r1, [pc, #428]	@ (801ceb4 <etharp_query+0x288>)
 801cd06:	4613      	mov	r3, r2
 801cd08:	005b      	lsls	r3, r3, #1
 801cd0a:	4413      	add	r3, r2
 801cd0c:	00db      	lsls	r3, r3, #3
 801cd0e:	440b      	add	r3, r1
 801cd10:	3314      	adds	r3, #20
 801cd12:	781b      	ldrb	r3, [r3, #0]
 801cd14:	2b01      	cmp	r3, #1
 801cd16:	d011      	beq.n	801cd3c <etharp_query+0x110>
 801cd18:	7c7a      	ldrb	r2, [r7, #17]
 801cd1a:	4966      	ldr	r1, [pc, #408]	@ (801ceb4 <etharp_query+0x288>)
 801cd1c:	4613      	mov	r3, r2
 801cd1e:	005b      	lsls	r3, r3, #1
 801cd20:	4413      	add	r3, r2
 801cd22:	00db      	lsls	r3, r3, #3
 801cd24:	440b      	add	r3, r1
 801cd26:	3314      	adds	r3, #20
 801cd28:	781b      	ldrb	r3, [r3, #0]
 801cd2a:	2b01      	cmp	r3, #1
 801cd2c:	d806      	bhi.n	801cd3c <etharp_query+0x110>
 801cd2e:	4b5e      	ldr	r3, [pc, #376]	@ (801cea8 <etharp_query+0x27c>)
 801cd30:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801cd34:	4960      	ldr	r1, [pc, #384]	@ (801ceb8 <etharp_query+0x28c>)
 801cd36:	485e      	ldr	r0, [pc, #376]	@ (801ceb0 <etharp_query+0x284>)
 801cd38:	f003 fab0 	bl	802029c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801cd3c:	6a3b      	ldr	r3, [r7, #32]
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d102      	bne.n	801cd48 <etharp_query+0x11c>
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d10c      	bne.n	801cd62 <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801cd48:	68b9      	ldr	r1, [r7, #8]
 801cd4a:	68f8      	ldr	r0, [r7, #12]
 801cd4c:	f000 f978 	bl	801d040 <etharp_request>
 801cd50:	4603      	mov	r3, r0
 801cd52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d102      	bne.n	801cd62 <etharp_query+0x136>
      return result;
 801cd5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801cd60:	e09c      	b.n	801ce9c <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	d106      	bne.n	801cd76 <etharp_query+0x14a>
 801cd68:	4b4f      	ldr	r3, [pc, #316]	@ (801cea8 <etharp_query+0x27c>)
 801cd6a:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801cd6e:	4953      	ldr	r1, [pc, #332]	@ (801cebc <etharp_query+0x290>)
 801cd70:	484f      	ldr	r0, [pc, #316]	@ (801ceb0 <etharp_query+0x284>)
 801cd72:	f003 fa93 	bl	802029c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801cd76:	7c7a      	ldrb	r2, [r7, #17]
 801cd78:	494e      	ldr	r1, [pc, #312]	@ (801ceb4 <etharp_query+0x288>)
 801cd7a:	4613      	mov	r3, r2
 801cd7c:	005b      	lsls	r3, r3, #1
 801cd7e:	4413      	add	r3, r2
 801cd80:	00db      	lsls	r3, r3, #3
 801cd82:	440b      	add	r3, r1
 801cd84:	3314      	adds	r3, #20
 801cd86:	781b      	ldrb	r3, [r3, #0]
 801cd88:	2b01      	cmp	r3, #1
 801cd8a:	d917      	bls.n	801cdbc <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801cd8c:	4a4c      	ldr	r2, [pc, #304]	@ (801cec0 <etharp_query+0x294>)
 801cd8e:	7c7b      	ldrb	r3, [r7, #17]
 801cd90:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801cd92:	7c7a      	ldrb	r2, [r7, #17]
 801cd94:	4613      	mov	r3, r2
 801cd96:	005b      	lsls	r3, r3, #1
 801cd98:	4413      	add	r3, r2
 801cd9a:	00db      	lsls	r3, r3, #3
 801cd9c:	3308      	adds	r3, #8
 801cd9e:	4a45      	ldr	r2, [pc, #276]	@ (801ceb4 <etharp_query+0x288>)
 801cda0:	4413      	add	r3, r2
 801cda2:	3304      	adds	r3, #4
 801cda4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801cda8:	9200      	str	r2, [sp, #0]
 801cdaa:	697a      	ldr	r2, [r7, #20]
 801cdac:	6879      	ldr	r1, [r7, #4]
 801cdae:	68f8      	ldr	r0, [r7, #12]
 801cdb0:	f001 fd8c 	bl	801e8cc <ethernet_output>
 801cdb4:	4603      	mov	r3, r0
 801cdb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801cdba:	e06d      	b.n	801ce98 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cdbc:	7c7a      	ldrb	r2, [r7, #17]
 801cdbe:	493d      	ldr	r1, [pc, #244]	@ (801ceb4 <etharp_query+0x288>)
 801cdc0:	4613      	mov	r3, r2
 801cdc2:	005b      	lsls	r3, r3, #1
 801cdc4:	4413      	add	r3, r2
 801cdc6:	00db      	lsls	r3, r3, #3
 801cdc8:	440b      	add	r3, r1
 801cdca:	3314      	adds	r3, #20
 801cdcc:	781b      	ldrb	r3, [r3, #0]
 801cdce:	2b01      	cmp	r3, #1
 801cdd0:	d162      	bne.n	801ce98 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801cdd2:	2300      	movs	r3, #0
 801cdd4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	61fb      	str	r3, [r7, #28]
    while (p) {
 801cdda:	e01c      	b.n	801ce16 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801cddc:	69fb      	ldr	r3, [r7, #28]
 801cdde:	895a      	ldrh	r2, [r3, #10]
 801cde0:	69fb      	ldr	r3, [r7, #28]
 801cde2:	891b      	ldrh	r3, [r3, #8]
 801cde4:	429a      	cmp	r2, r3
 801cde6:	d10a      	bne.n	801cdfe <etharp_query+0x1d2>
 801cde8:	69fb      	ldr	r3, [r7, #28]
 801cdea:	681b      	ldr	r3, [r3, #0]
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d006      	beq.n	801cdfe <etharp_query+0x1d2>
 801cdf0:	4b2d      	ldr	r3, [pc, #180]	@ (801cea8 <etharp_query+0x27c>)
 801cdf2:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801cdf6:	4933      	ldr	r1, [pc, #204]	@ (801cec4 <etharp_query+0x298>)
 801cdf8:	482d      	ldr	r0, [pc, #180]	@ (801ceb0 <etharp_query+0x284>)
 801cdfa:	f003 fa4f 	bl	802029c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801cdfe:	69fb      	ldr	r3, [r7, #28]
 801ce00:	7b1b      	ldrb	r3, [r3, #12]
 801ce02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	d002      	beq.n	801ce10 <etharp_query+0x1e4>
        copy_needed = 1;
 801ce0a:	2301      	movs	r3, #1
 801ce0c:	61bb      	str	r3, [r7, #24]
        break;
 801ce0e:	e005      	b.n	801ce1c <etharp_query+0x1f0>
      }
      p = p->next;
 801ce10:	69fb      	ldr	r3, [r7, #28]
 801ce12:	681b      	ldr	r3, [r3, #0]
 801ce14:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ce16:	69fb      	ldr	r3, [r7, #28]
 801ce18:	2b00      	cmp	r3, #0
 801ce1a:	d1df      	bne.n	801cddc <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801ce1c:	69bb      	ldr	r3, [r7, #24]
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d007      	beq.n	801ce32 <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801ce22:	687a      	ldr	r2, [r7, #4]
 801ce24:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801ce28:	200e      	movs	r0, #14
 801ce2a:	f7f8 fa0d 	bl	8015248 <pbuf_clone>
 801ce2e:	61f8      	str	r0, [r7, #28]
 801ce30:	e004      	b.n	801ce3c <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801ce36:	69f8      	ldr	r0, [r7, #28]
 801ce38:	f7f8 f834 	bl	8014ea4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801ce3c:	69fb      	ldr	r3, [r7, #28]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	d021      	beq.n	801ce86 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801ce42:	7c7a      	ldrb	r2, [r7, #17]
 801ce44:	491b      	ldr	r1, [pc, #108]	@ (801ceb4 <etharp_query+0x288>)
 801ce46:	4613      	mov	r3, r2
 801ce48:	005b      	lsls	r3, r3, #1
 801ce4a:	4413      	add	r3, r2
 801ce4c:	00db      	lsls	r3, r3, #3
 801ce4e:	440b      	add	r3, r1
 801ce50:	681b      	ldr	r3, [r3, #0]
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d00a      	beq.n	801ce6c <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ce56:	7c7a      	ldrb	r2, [r7, #17]
 801ce58:	4916      	ldr	r1, [pc, #88]	@ (801ceb4 <etharp_query+0x288>)
 801ce5a:	4613      	mov	r3, r2
 801ce5c:	005b      	lsls	r3, r3, #1
 801ce5e:	4413      	add	r3, r2
 801ce60:	00db      	lsls	r3, r3, #3
 801ce62:	440b      	add	r3, r1
 801ce64:	681b      	ldr	r3, [r3, #0]
 801ce66:	4618      	mov	r0, r3
 801ce68:	f7f7 ff76 	bl	8014d58 <pbuf_free>
      }
      arp_table[i].q = p;
 801ce6c:	7c7a      	ldrb	r2, [r7, #17]
 801ce6e:	4911      	ldr	r1, [pc, #68]	@ (801ceb4 <etharp_query+0x288>)
 801ce70:	4613      	mov	r3, r2
 801ce72:	005b      	lsls	r3, r3, #1
 801ce74:	4413      	add	r3, r2
 801ce76:	00db      	lsls	r3, r3, #3
 801ce78:	440b      	add	r3, r1
 801ce7a:	69fa      	ldr	r2, [r7, #28]
 801ce7c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ce7e:	2300      	movs	r3, #0
 801ce80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ce84:	e008      	b.n	801ce98 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801ce86:	4b07      	ldr	r3, [pc, #28]	@ (801cea4 <etharp_query+0x278>)
 801ce88:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801ce8a:	3301      	adds	r3, #1
 801ce8c:	b29a      	uxth	r2, r3
 801ce8e:	4b05      	ldr	r3, [pc, #20]	@ (801cea4 <etharp_query+0x278>)
 801ce90:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ce92:	23ff      	movs	r3, #255	@ 0xff
 801ce94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801ce98:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801ce9c:	4618      	mov	r0, r3
 801ce9e:	3728      	adds	r7, #40	@ 0x28
 801cea0:	46bd      	mov	sp, r7
 801cea2:	bd80      	pop	{r7, pc}
 801cea4:	200252ac 	.word	0x200252ac
 801cea8:	08024198 	.word	0x08024198
 801ceac:	08024344 	.word	0x08024344
 801ceb0:	08024210 	.word	0x08024210
 801ceb4:	20025408 	.word	0x20025408
 801ceb8:	08024354 	.word	0x08024354
 801cebc:	08024338 	.word	0x08024338
 801cec0:	200254f8 	.word	0x200254f8
 801cec4:	0802437c 	.word	0x0802437c

0801cec8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801cec8:	b580      	push	{r7, lr}
 801ceca:	b08a      	sub	sp, #40	@ 0x28
 801cecc:	af02      	add	r7, sp, #8
 801cece:	60f8      	str	r0, [r7, #12]
 801ced0:	60b9      	str	r1, [r7, #8]
 801ced2:	607a      	str	r2, [r7, #4]
 801ced4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ced6:	2300      	movs	r3, #0
 801ced8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ceda:	68fb      	ldr	r3, [r7, #12]
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d106      	bne.n	801ceee <etharp_raw+0x26>
 801cee0:	4b40      	ldr	r3, [pc, #256]	@ (801cfe4 <etharp_raw+0x11c>)
 801cee2:	f240 4257 	movw	r2, #1111	@ 0x457
 801cee6:	4940      	ldr	r1, [pc, #256]	@ (801cfe8 <etharp_raw+0x120>)
 801cee8:	4840      	ldr	r0, [pc, #256]	@ (801cfec <etharp_raw+0x124>)
 801ceea:	f003 f9d7 	bl	802029c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ceee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801cef2:	211c      	movs	r1, #28
 801cef4:	200e      	movs	r0, #14
 801cef6:	f7f7 fc4b 	bl	8014790 <pbuf_alloc>
 801cefa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801cefc:	69bb      	ldr	r3, [r7, #24]
 801cefe:	2b00      	cmp	r3, #0
 801cf00:	d108      	bne.n	801cf14 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801cf02:	4b3b      	ldr	r3, [pc, #236]	@ (801cff0 <etharp_raw+0x128>)
 801cf04:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801cf06:	3301      	adds	r3, #1
 801cf08:	b29a      	uxth	r2, r3
 801cf0a:	4b39      	ldr	r3, [pc, #228]	@ (801cff0 <etharp_raw+0x128>)
 801cf0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801cf0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801cf12:	e063      	b.n	801cfdc <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801cf14:	69bb      	ldr	r3, [r7, #24]
 801cf16:	895b      	ldrh	r3, [r3, #10]
 801cf18:	2b1b      	cmp	r3, #27
 801cf1a:	d806      	bhi.n	801cf2a <etharp_raw+0x62>
 801cf1c:	4b31      	ldr	r3, [pc, #196]	@ (801cfe4 <etharp_raw+0x11c>)
 801cf1e:	f240 4262 	movw	r2, #1122	@ 0x462
 801cf22:	4934      	ldr	r1, [pc, #208]	@ (801cff4 <etharp_raw+0x12c>)
 801cf24:	4831      	ldr	r0, [pc, #196]	@ (801cfec <etharp_raw+0x124>)
 801cf26:	f003 f9b9 	bl	802029c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801cf2a:	69bb      	ldr	r3, [r7, #24]
 801cf2c:	685b      	ldr	r3, [r3, #4]
 801cf2e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801cf30:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801cf32:	4618      	mov	r0, r3
 801cf34:	f7f6 fa52 	bl	80133dc <lwip_htons>
 801cf38:	4603      	mov	r3, r0
 801cf3a:	461a      	mov	r2, r3
 801cf3c:	697b      	ldr	r3, [r7, #20]
 801cf3e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801cf40:	68fb      	ldr	r3, [r7, #12]
 801cf42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801cf46:	2b06      	cmp	r3, #6
 801cf48:	d006      	beq.n	801cf58 <etharp_raw+0x90>
 801cf4a:	4b26      	ldr	r3, [pc, #152]	@ (801cfe4 <etharp_raw+0x11c>)
 801cf4c:	f240 4269 	movw	r2, #1129	@ 0x469
 801cf50:	4929      	ldr	r1, [pc, #164]	@ (801cff8 <etharp_raw+0x130>)
 801cf52:	4826      	ldr	r0, [pc, #152]	@ (801cfec <etharp_raw+0x124>)
 801cf54:	f003 f9a2 	bl	802029c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801cf58:	697b      	ldr	r3, [r7, #20]
 801cf5a:	3308      	adds	r3, #8
 801cf5c:	2206      	movs	r2, #6
 801cf5e:	6839      	ldr	r1, [r7, #0]
 801cf60:	4618      	mov	r0, r3
 801cf62:	f003 fbc6 	bl	80206f2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801cf66:	697b      	ldr	r3, [r7, #20]
 801cf68:	3312      	adds	r3, #18
 801cf6a:	2206      	movs	r2, #6
 801cf6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cf6e:	4618      	mov	r0, r3
 801cf70:	f003 fbbf 	bl	80206f2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801cf74:	697b      	ldr	r3, [r7, #20]
 801cf76:	330e      	adds	r3, #14
 801cf78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801cf7a:	6812      	ldr	r2, [r2, #0]
 801cf7c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801cf7e:	697b      	ldr	r3, [r7, #20]
 801cf80:	3318      	adds	r3, #24
 801cf82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cf84:	6812      	ldr	r2, [r2, #0]
 801cf86:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801cf88:	697b      	ldr	r3, [r7, #20]
 801cf8a:	2200      	movs	r2, #0
 801cf8c:	701a      	strb	r2, [r3, #0]
 801cf8e:	2200      	movs	r2, #0
 801cf90:	f042 0201 	orr.w	r2, r2, #1
 801cf94:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801cf96:	697b      	ldr	r3, [r7, #20]
 801cf98:	2200      	movs	r2, #0
 801cf9a:	f042 0208 	orr.w	r2, r2, #8
 801cf9e:	709a      	strb	r2, [r3, #2]
 801cfa0:	2200      	movs	r2, #0
 801cfa2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801cfa4:	697b      	ldr	r3, [r7, #20]
 801cfa6:	2206      	movs	r2, #6
 801cfa8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801cfaa:	697b      	ldr	r3, [r7, #20]
 801cfac:	2204      	movs	r2, #4
 801cfae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801cfb0:	f640 0306 	movw	r3, #2054	@ 0x806
 801cfb4:	9300      	str	r3, [sp, #0]
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	68ba      	ldr	r2, [r7, #8]
 801cfba:	69b9      	ldr	r1, [r7, #24]
 801cfbc:	68f8      	ldr	r0, [r7, #12]
 801cfbe:	f001 fc85 	bl	801e8cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801cfc2:	4b0b      	ldr	r3, [pc, #44]	@ (801cff0 <etharp_raw+0x128>)
 801cfc4:	8b1b      	ldrh	r3, [r3, #24]
 801cfc6:	3301      	adds	r3, #1
 801cfc8:	b29a      	uxth	r2, r3
 801cfca:	4b09      	ldr	r3, [pc, #36]	@ (801cff0 <etharp_raw+0x128>)
 801cfcc:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801cfce:	69b8      	ldr	r0, [r7, #24]
 801cfd0:	f7f7 fec2 	bl	8014d58 <pbuf_free>
  p = NULL;
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801cfd8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801cfdc:	4618      	mov	r0, r3
 801cfde:	3720      	adds	r7, #32
 801cfe0:	46bd      	mov	sp, r7
 801cfe2:	bd80      	pop	{r7, pc}
 801cfe4:	08024198 	.word	0x08024198
 801cfe8:	080242e8 	.word	0x080242e8
 801cfec:	08024210 	.word	0x08024210
 801cff0:	200252ac 	.word	0x200252ac
 801cff4:	08024398 	.word	0x08024398
 801cff8:	080243cc 	.word	0x080243cc

0801cffc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801cffc:	b580      	push	{r7, lr}
 801cffe:	b088      	sub	sp, #32
 801d000:	af04      	add	r7, sp, #16
 801d002:	60f8      	str	r0, [r7, #12]
 801d004:	60b9      	str	r1, [r7, #8]
 801d006:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d008:	68fb      	ldr	r3, [r7, #12]
 801d00a:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801d014:	68fb      	ldr	r3, [r7, #12]
 801d016:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801d018:	2201      	movs	r2, #1
 801d01a:	9203      	str	r2, [sp, #12]
 801d01c:	68ba      	ldr	r2, [r7, #8]
 801d01e:	9202      	str	r2, [sp, #8]
 801d020:	4a06      	ldr	r2, [pc, #24]	@ (801d03c <etharp_request_dst+0x40>)
 801d022:	9201      	str	r2, [sp, #4]
 801d024:	9300      	str	r3, [sp, #0]
 801d026:	4603      	mov	r3, r0
 801d028:	687a      	ldr	r2, [r7, #4]
 801d02a:	68f8      	ldr	r0, [r7, #12]
 801d02c:	f7ff ff4c 	bl	801cec8 <etharp_raw>
 801d030:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801d032:	4618      	mov	r0, r3
 801d034:	3710      	adds	r7, #16
 801d036:	46bd      	mov	sp, r7
 801d038:	bd80      	pop	{r7, pc}
 801d03a:	bf00      	nop
 801d03c:	08024ed0 	.word	0x08024ed0

0801d040 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801d040:	b580      	push	{r7, lr}
 801d042:	b082      	sub	sp, #8
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
 801d048:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801d04a:	4a05      	ldr	r2, [pc, #20]	@ (801d060 <etharp_request+0x20>)
 801d04c:	6839      	ldr	r1, [r7, #0]
 801d04e:	6878      	ldr	r0, [r7, #4]
 801d050:	f7ff ffd4 	bl	801cffc <etharp_request_dst>
 801d054:	4603      	mov	r3, r0
}
 801d056:	4618      	mov	r0, r3
 801d058:	3708      	adds	r7, #8
 801d05a:	46bd      	mov	sp, r7
 801d05c:	bd80      	pop	{r7, pc}
 801d05e:	bf00      	nop
 801d060:	08024ec8 	.word	0x08024ec8

0801d064 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801d064:	b580      	push	{r7, lr}
 801d066:	b08e      	sub	sp, #56	@ 0x38
 801d068:	af04      	add	r7, sp, #16
 801d06a:	6078      	str	r0, [r7, #4]
 801d06c:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801d06e:	4b92      	ldr	r3, [pc, #584]	@ (801d2b8 <icmp_input+0x254>)
 801d070:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801d074:	3301      	adds	r3, #1
 801d076:	b29a      	uxth	r2, r3
 801d078:	4b8f      	ldr	r3, [pc, #572]	@ (801d2b8 <icmp_input+0x254>)
 801d07a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801d07e:	4b8f      	ldr	r3, [pc, #572]	@ (801d2bc <icmp_input+0x258>)
 801d080:	689b      	ldr	r3, [r3, #8]
 801d082:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801d084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d086:	781b      	ldrb	r3, [r3, #0]
 801d088:	f003 030f 	and.w	r3, r3, #15
 801d08c:	b2db      	uxtb	r3, r3
 801d08e:	009b      	lsls	r3, r3, #2
 801d090:	b2db      	uxtb	r3, r3
 801d092:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801d094:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d096:	2b13      	cmp	r3, #19
 801d098:	f240 80e6 	bls.w	801d268 <icmp_input+0x204>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	895b      	ldrh	r3, [r3, #10]
 801d0a0:	2b03      	cmp	r3, #3
 801d0a2:	f240 80e3 	bls.w	801d26c <icmp_input+0x208>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	685b      	ldr	r3, [r3, #4]
 801d0aa:	781b      	ldrb	r3, [r3, #0]
 801d0ac:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801d0b0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	f000 80d0 	beq.w	801d25a <icmp_input+0x1f6>
 801d0ba:	2b08      	cmp	r3, #8
 801d0bc:	f040 80bc 	bne.w	801d238 <icmp_input+0x1d4>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801d0c0:	4b7f      	ldr	r3, [pc, #508]	@ (801d2c0 <icmp_input+0x25c>)
 801d0c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d0c4:	4b7d      	ldr	r3, [pc, #500]	@ (801d2bc <icmp_input+0x258>)
 801d0c6:	695b      	ldr	r3, [r3, #20]
 801d0c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d0cc:	2be0      	cmp	r3, #224	@ 0xe0
 801d0ce:	f000 80dc 	beq.w	801d28a <icmp_input+0x226>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801d0d2:	4b7a      	ldr	r3, [pc, #488]	@ (801d2bc <icmp_input+0x258>)
 801d0d4:	695b      	ldr	r3, [r3, #20]
 801d0d6:	4a79      	ldr	r2, [pc, #484]	@ (801d2bc <icmp_input+0x258>)
 801d0d8:	6812      	ldr	r2, [r2, #0]
 801d0da:	4611      	mov	r1, r2
 801d0dc:	4618      	mov	r0, r3
 801d0de:	f000 fc95 	bl	801da0c <ip4_addr_isbroadcast_u32>
 801d0e2:	4603      	mov	r3, r0
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	f040 80d2 	bne.w	801d28e <icmp_input+0x22a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	891b      	ldrh	r3, [r3, #8]
 801d0ee:	2b07      	cmp	r3, #7
 801d0f0:	f240 80be 	bls.w	801d270 <icmp_input+0x20c>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d0f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d0f6:	330e      	adds	r3, #14
 801d0f8:	4619      	mov	r1, r3
 801d0fa:	6878      	ldr	r0, [r7, #4]
 801d0fc:	f7f7 fd96 	bl	8014c2c <pbuf_add_header>
 801d100:	4603      	mov	r3, r0
 801d102:	2b00      	cmp	r3, #0
 801d104:	d04b      	beq.n	801d19e <icmp_input+0x13a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	891a      	ldrh	r2, [r3, #8]
 801d10a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d10c:	4413      	add	r3, r2
 801d10e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	891b      	ldrh	r3, [r3, #8]
 801d114:	8b7a      	ldrh	r2, [r7, #26]
 801d116:	429a      	cmp	r2, r3
 801d118:	f0c0 80bb 	bcc.w	801d292 <icmp_input+0x22e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801d11c:	8b7b      	ldrh	r3, [r7, #26]
 801d11e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d122:	4619      	mov	r1, r3
 801d124:	200e      	movs	r0, #14
 801d126:	f7f7 fb33 	bl	8014790 <pbuf_alloc>
 801d12a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801d12c:	697b      	ldr	r3, [r7, #20]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	f000 80b1 	beq.w	801d296 <icmp_input+0x232>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801d134:	697b      	ldr	r3, [r7, #20]
 801d136:	895b      	ldrh	r3, [r3, #10]
 801d138:	461a      	mov	r2, r3
 801d13a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d13c:	3308      	adds	r3, #8
 801d13e:	429a      	cmp	r2, r3
 801d140:	d203      	bcs.n	801d14a <icmp_input+0xe6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801d142:	6978      	ldr	r0, [r7, #20]
 801d144:	f7f7 fe08 	bl	8014d58 <pbuf_free>
          goto icmperr;
 801d148:	e0a6      	b.n	801d298 <icmp_input+0x234>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801d14a:	697b      	ldr	r3, [r7, #20]
 801d14c:	685b      	ldr	r3, [r3, #4]
 801d14e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801d150:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801d152:	4618      	mov	r0, r3
 801d154:	f003 facd 	bl	80206f2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801d158:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d15a:	4619      	mov	r1, r3
 801d15c:	6978      	ldr	r0, [r7, #20]
 801d15e:	f7f7 fd75 	bl	8014c4c <pbuf_remove_header>
 801d162:	4603      	mov	r3, r0
 801d164:	2b00      	cmp	r3, #0
 801d166:	d009      	beq.n	801d17c <icmp_input+0x118>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801d168:	4b56      	ldr	r3, [pc, #344]	@ (801d2c4 <icmp_input+0x260>)
 801d16a:	22b6      	movs	r2, #182	@ 0xb6
 801d16c:	4956      	ldr	r1, [pc, #344]	@ (801d2c8 <icmp_input+0x264>)
 801d16e:	4857      	ldr	r0, [pc, #348]	@ (801d2cc <icmp_input+0x268>)
 801d170:	f003 f894 	bl	802029c <iprintf>
          pbuf_free(r);
 801d174:	6978      	ldr	r0, [r7, #20]
 801d176:	f7f7 fdef 	bl	8014d58 <pbuf_free>
          goto icmperr;
 801d17a:	e08d      	b.n	801d298 <icmp_input+0x234>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801d17c:	6879      	ldr	r1, [r7, #4]
 801d17e:	6978      	ldr	r0, [r7, #20]
 801d180:	f7f7 ff1e 	bl	8014fc0 <pbuf_copy>
 801d184:	4603      	mov	r3, r0
 801d186:	2b00      	cmp	r3, #0
 801d188:	d003      	beq.n	801d192 <icmp_input+0x12e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801d18a:	6978      	ldr	r0, [r7, #20]
 801d18c:	f7f7 fde4 	bl	8014d58 <pbuf_free>
          goto icmperr;
 801d190:	e082      	b.n	801d298 <icmp_input+0x234>
        }
        /* free the original p */
        pbuf_free(p);
 801d192:	6878      	ldr	r0, [r7, #4]
 801d194:	f7f7 fde0 	bl	8014d58 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801d198:	697b      	ldr	r3, [r7, #20]
 801d19a:	607b      	str	r3, [r7, #4]
 801d19c:	e00f      	b.n	801d1be <icmp_input+0x15a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801d19e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d1a0:	330e      	adds	r3, #14
 801d1a2:	4619      	mov	r1, r3
 801d1a4:	6878      	ldr	r0, [r7, #4]
 801d1a6:	f7f7 fd51 	bl	8014c4c <pbuf_remove_header>
 801d1aa:	4603      	mov	r3, r0
 801d1ac:	2b00      	cmp	r3, #0
 801d1ae:	d006      	beq.n	801d1be <icmp_input+0x15a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801d1b0:	4b44      	ldr	r3, [pc, #272]	@ (801d2c4 <icmp_input+0x260>)
 801d1b2:	22c7      	movs	r2, #199	@ 0xc7
 801d1b4:	4946      	ldr	r1, [pc, #280]	@ (801d2d0 <icmp_input+0x26c>)
 801d1b6:	4845      	ldr	r0, [pc, #276]	@ (801d2cc <icmp_input+0x268>)
 801d1b8:	f003 f870 	bl	802029c <iprintf>
          goto icmperr;
 801d1bc:	e06c      	b.n	801d298 <icmp_input+0x234>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	685b      	ldr	r3, [r3, #4]
 801d1c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801d1c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d1c6:	4619      	mov	r1, r3
 801d1c8:	6878      	ldr	r0, [r7, #4]
 801d1ca:	f7f7 fd2f 	bl	8014c2c <pbuf_add_header>
 801d1ce:	4603      	mov	r3, r0
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d144      	bne.n	801d25e <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801d1d4:	687b      	ldr	r3, [r7, #4]
 801d1d6:	685b      	ldr	r3, [r3, #4]
 801d1d8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801d1da:	69fb      	ldr	r3, [r7, #28]
 801d1dc:	681a      	ldr	r2, [r3, #0]
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801d1e2:	4b36      	ldr	r3, [pc, #216]	@ (801d2bc <icmp_input+0x258>)
 801d1e4:	691a      	ldr	r2, [r3, #16]
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801d1ea:	693b      	ldr	r3, [r7, #16]
 801d1ec:	2200      	movs	r2, #0
 801d1ee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801d1f0:	693b      	ldr	r3, [r7, #16]
 801d1f2:	2200      	movs	r2, #0
 801d1f4:	709a      	strb	r2, [r3, #2]
 801d1f6:	2200      	movs	r2, #0
 801d1f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	22ff      	movs	r2, #255	@ 0xff
 801d1fe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801d200:	68fb      	ldr	r3, [r7, #12]
 801d202:	2200      	movs	r2, #0
 801d204:	729a      	strb	r2, [r3, #10]
 801d206:	2200      	movs	r2, #0
 801d208:	72da      	strb	r2, [r3, #11]
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_IP) {
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
        }
#endif /* CHECKSUM_GEN_IP */

        ICMP_STATS_INC(icmp.xmit);
 801d20a:	4b2b      	ldr	r3, [pc, #172]	@ (801d2b8 <icmp_input+0x254>)
 801d20c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d210:	3301      	adds	r3, #1
 801d212:	b29a      	uxth	r2, r3
 801d214:	4b28      	ldr	r3, [pc, #160]	@ (801d2b8 <icmp_input+0x254>)
 801d216:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801d21a:	683b      	ldr	r3, [r7, #0]
 801d21c:	9302      	str	r3, [sp, #8]
 801d21e:	2301      	movs	r3, #1
 801d220:	9301      	str	r3, [sp, #4]
 801d222:	2300      	movs	r3, #0
 801d224:	9300      	str	r3, [sp, #0]
 801d226:	23ff      	movs	r3, #255	@ 0xff
 801d228:	2200      	movs	r2, #0
 801d22a:	69f9      	ldr	r1, [r7, #28]
 801d22c:	6878      	ldr	r0, [r7, #4]
 801d22e:	f000 fafb 	bl	801d828 <ip4_output_if>
 801d232:	4603      	mov	r3, r0
 801d234:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801d236:	e012      	b.n	801d25e <icmp_input+0x1fa>
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801d238:	4b1f      	ldr	r3, [pc, #124]	@ (801d2b8 <icmp_input+0x254>)
 801d23a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801d23e:	3301      	adds	r3, #1
 801d240:	b29a      	uxth	r2, r3
 801d242:	4b1d      	ldr	r3, [pc, #116]	@ (801d2b8 <icmp_input+0x254>)
 801d244:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801d248:	4b1b      	ldr	r3, [pc, #108]	@ (801d2b8 <icmp_input+0x254>)
 801d24a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801d24e:	3301      	adds	r3, #1
 801d250:	b29a      	uxth	r2, r3
 801d252:	4b19      	ldr	r3, [pc, #100]	@ (801d2b8 <icmp_input+0x254>)
 801d254:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801d258:	e002      	b.n	801d260 <icmp_input+0x1fc>
      break;
 801d25a:	bf00      	nop
 801d25c:	e000      	b.n	801d260 <icmp_input+0x1fc>
      break;
 801d25e:	bf00      	nop
  }
  pbuf_free(p);
 801d260:	6878      	ldr	r0, [r7, #4]
 801d262:	f7f7 fd79 	bl	8014d58 <pbuf_free>
  return;
 801d266:	e023      	b.n	801d2b0 <icmp_input+0x24c>
    goto lenerr;
 801d268:	bf00      	nop
 801d26a:	e002      	b.n	801d272 <icmp_input+0x20e>
    goto lenerr;
 801d26c:	bf00      	nop
 801d26e:	e000      	b.n	801d272 <icmp_input+0x20e>
        goto lenerr;
 801d270:	bf00      	nop
lenerr:
  pbuf_free(p);
 801d272:	6878      	ldr	r0, [r7, #4]
 801d274:	f7f7 fd70 	bl	8014d58 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801d278:	4b0f      	ldr	r3, [pc, #60]	@ (801d2b8 <icmp_input+0x254>)
 801d27a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801d27e:	3301      	adds	r3, #1
 801d280:	b29a      	uxth	r2, r3
 801d282:	4b0d      	ldr	r3, [pc, #52]	@ (801d2b8 <icmp_input+0x254>)
 801d284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d288:	e012      	b.n	801d2b0 <icmp_input+0x24c>
        goto icmperr;
 801d28a:	bf00      	nop
 801d28c:	e004      	b.n	801d298 <icmp_input+0x234>
        goto icmperr;
 801d28e:	bf00      	nop
 801d290:	e002      	b.n	801d298 <icmp_input+0x234>
          goto icmperr;
 801d292:	bf00      	nop
 801d294:	e000      	b.n	801d298 <icmp_input+0x234>
          goto icmperr;
 801d296:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801d298:	6878      	ldr	r0, [r7, #4]
 801d29a:	f7f7 fd5d 	bl	8014d58 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801d29e:	4b06      	ldr	r3, [pc, #24]	@ (801d2b8 <icmp_input+0x254>)
 801d2a0:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801d2a4:	3301      	adds	r3, #1
 801d2a6:	b29a      	uxth	r2, r3
 801d2a8:	4b03      	ldr	r3, [pc, #12]	@ (801d2b8 <icmp_input+0x254>)
 801d2aa:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801d2ae:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801d2b0:	3728      	adds	r7, #40	@ 0x28
 801d2b2:	46bd      	mov	sp, r7
 801d2b4:	bd80      	pop	{r7, pc}
 801d2b6:	bf00      	nop
 801d2b8:	200252ac 	.word	0x200252ac
 801d2bc:	2001f0b0 	.word	0x2001f0b0
 801d2c0:	2001f0c4 	.word	0x2001f0c4
 801d2c4:	08024410 	.word	0x08024410
 801d2c8:	08024448 	.word	0x08024448
 801d2cc:	08024480 	.word	0x08024480
 801d2d0:	080244a8 	.word	0x080244a8

0801d2d4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b082      	sub	sp, #8
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]
 801d2dc:	460b      	mov	r3, r1
 801d2de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801d2e0:	78fb      	ldrb	r3, [r7, #3]
 801d2e2:	461a      	mov	r2, r3
 801d2e4:	2103      	movs	r1, #3
 801d2e6:	6878      	ldr	r0, [r7, #4]
 801d2e8:	f000 f814 	bl	801d314 <icmp_send_response>
}
 801d2ec:	bf00      	nop
 801d2ee:	3708      	adds	r7, #8
 801d2f0:	46bd      	mov	sp, r7
 801d2f2:	bd80      	pop	{r7, pc}

0801d2f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801d2f4:	b580      	push	{r7, lr}
 801d2f6:	b082      	sub	sp, #8
 801d2f8:	af00      	add	r7, sp, #0
 801d2fa:	6078      	str	r0, [r7, #4]
 801d2fc:	460b      	mov	r3, r1
 801d2fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801d300:	78fb      	ldrb	r3, [r7, #3]
 801d302:	461a      	mov	r2, r3
 801d304:	210b      	movs	r1, #11
 801d306:	6878      	ldr	r0, [r7, #4]
 801d308:	f000 f804 	bl	801d314 <icmp_send_response>
}
 801d30c:	bf00      	nop
 801d30e:	3708      	adds	r7, #8
 801d310:	46bd      	mov	sp, r7
 801d312:	bd80      	pop	{r7, pc}

0801d314 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801d314:	b580      	push	{r7, lr}
 801d316:	b08c      	sub	sp, #48	@ 0x30
 801d318:	af04      	add	r7, sp, #16
 801d31a:	6078      	str	r0, [r7, #4]
 801d31c:	460b      	mov	r3, r1
 801d31e:	70fb      	strb	r3, [r7, #3]
 801d320:	4613      	mov	r3, r2
 801d322:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801d324:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801d328:	2124      	movs	r1, #36	@ 0x24
 801d32a:	2022      	movs	r0, #34	@ 0x22
 801d32c:	f7f7 fa30 	bl	8014790 <pbuf_alloc>
 801d330:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801d332:	69fb      	ldr	r3, [r7, #28]
 801d334:	2b00      	cmp	r3, #0
 801d336:	d054      	beq.n	801d3e2 <icmp_send_response+0xce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801d338:	69fb      	ldr	r3, [r7, #28]
 801d33a:	895b      	ldrh	r3, [r3, #10]
 801d33c:	2b23      	cmp	r3, #35	@ 0x23
 801d33e:	d806      	bhi.n	801d34e <icmp_send_response+0x3a>
 801d340:	4b2a      	ldr	r3, [pc, #168]	@ (801d3ec <icmp_send_response+0xd8>)
 801d342:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801d346:	492a      	ldr	r1, [pc, #168]	@ (801d3f0 <icmp_send_response+0xdc>)
 801d348:	482a      	ldr	r0, [pc, #168]	@ (801d3f4 <icmp_send_response+0xe0>)
 801d34a:	f002 ffa7 	bl	802029c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801d34e:	687b      	ldr	r3, [r7, #4]
 801d350:	685b      	ldr	r3, [r3, #4]
 801d352:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801d354:	69fb      	ldr	r3, [r7, #28]
 801d356:	685b      	ldr	r3, [r3, #4]
 801d358:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801d35a:	697b      	ldr	r3, [r7, #20]
 801d35c:	78fa      	ldrb	r2, [r7, #3]
 801d35e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801d360:	697b      	ldr	r3, [r7, #20]
 801d362:	78ba      	ldrb	r2, [r7, #2]
 801d364:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801d366:	697b      	ldr	r3, [r7, #20]
 801d368:	2200      	movs	r2, #0
 801d36a:	711a      	strb	r2, [r3, #4]
 801d36c:	2200      	movs	r2, #0
 801d36e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801d370:	697b      	ldr	r3, [r7, #20]
 801d372:	2200      	movs	r2, #0
 801d374:	719a      	strb	r2, [r3, #6]
 801d376:	2200      	movs	r2, #0
 801d378:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801d37a:	69fb      	ldr	r3, [r7, #28]
 801d37c:	685b      	ldr	r3, [r3, #4]
 801d37e:	f103 0008 	add.w	r0, r3, #8
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	685b      	ldr	r3, [r3, #4]
 801d386:	221c      	movs	r2, #28
 801d388:	4619      	mov	r1, r3
 801d38a:	f003 f9b2 	bl	80206f2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801d38e:	69bb      	ldr	r3, [r7, #24]
 801d390:	68db      	ldr	r3, [r3, #12]
 801d392:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801d394:	f107 030c 	add.w	r3, r7, #12
 801d398:	4618      	mov	r0, r3
 801d39a:	f000 f82f 	bl	801d3fc <ip4_route>
 801d39e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801d3a0:	693b      	ldr	r3, [r7, #16]
 801d3a2:	2b00      	cmp	r3, #0
 801d3a4:	d019      	beq.n	801d3da <icmp_send_response+0xc6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801d3a6:	697b      	ldr	r3, [r7, #20]
 801d3a8:	2200      	movs	r2, #0
 801d3aa:	709a      	strb	r2, [r3, #2]
 801d3ac:	2200      	movs	r2, #0
 801d3ae:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801d3b0:	4b11      	ldr	r3, [pc, #68]	@ (801d3f8 <icmp_send_response+0xe4>)
 801d3b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801d3b6:	3301      	adds	r3, #1
 801d3b8:	b29a      	uxth	r2, r3
 801d3ba:	4b0f      	ldr	r3, [pc, #60]	@ (801d3f8 <icmp_send_response+0xe4>)
 801d3bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801d3c0:	f107 020c 	add.w	r2, r7, #12
 801d3c4:	693b      	ldr	r3, [r7, #16]
 801d3c6:	9302      	str	r3, [sp, #8]
 801d3c8:	2301      	movs	r3, #1
 801d3ca:	9301      	str	r3, [sp, #4]
 801d3cc:	2300      	movs	r3, #0
 801d3ce:	9300      	str	r3, [sp, #0]
 801d3d0:	23ff      	movs	r3, #255	@ 0xff
 801d3d2:	2100      	movs	r1, #0
 801d3d4:	69f8      	ldr	r0, [r7, #28]
 801d3d6:	f000 fa27 	bl	801d828 <ip4_output_if>
  }
  pbuf_free(q);
 801d3da:	69f8      	ldr	r0, [r7, #28]
 801d3dc:	f7f7 fcbc 	bl	8014d58 <pbuf_free>
 801d3e0:	e000      	b.n	801d3e4 <icmp_send_response+0xd0>
    return;
 801d3e2:	bf00      	nop
}
 801d3e4:	3720      	adds	r7, #32
 801d3e6:	46bd      	mov	sp, r7
 801d3e8:	bd80      	pop	{r7, pc}
 801d3ea:	bf00      	nop
 801d3ec:	08024410 	.word	0x08024410
 801d3f0:	080244dc 	.word	0x080244dc
 801d3f4:	08024480 	.word	0x08024480
 801d3f8:	200252ac 	.word	0x200252ac

0801d3fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801d3fc:	b480      	push	{r7}
 801d3fe:	b085      	sub	sp, #20
 801d400:	af00      	add	r7, sp, #0
 801d402:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801d404:	4b37      	ldr	r3, [pc, #220]	@ (801d4e4 <ip4_route+0xe8>)
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	60fb      	str	r3, [r7, #12]
 801d40a:	e036      	b.n	801d47a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d412:	f003 0301 	and.w	r3, r3, #1
 801d416:	b2db      	uxtb	r3, r3
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d02b      	beq.n	801d474 <ip4_route+0x78>
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d422:	089b      	lsrs	r3, r3, #2
 801d424:	f003 0301 	and.w	r3, r3, #1
 801d428:	b2db      	uxtb	r3, r3
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	d022      	beq.n	801d474 <ip4_route+0x78>
 801d42e:	68fb      	ldr	r3, [r7, #12]
 801d430:	3304      	adds	r3, #4
 801d432:	681b      	ldr	r3, [r3, #0]
 801d434:	2b00      	cmp	r3, #0
 801d436:	d01d      	beq.n	801d474 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	681a      	ldr	r2, [r3, #0]
 801d43c:	68fb      	ldr	r3, [r7, #12]
 801d43e:	3304      	adds	r3, #4
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	405a      	eors	r2, r3
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	3308      	adds	r3, #8
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	4013      	ands	r3, r2
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d101      	bne.n	801d454 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	e040      	b.n	801d4d6 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801d454:	68fb      	ldr	r3, [r7, #12]
 801d456:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d45a:	f003 0302 	and.w	r3, r3, #2
 801d45e:	2b00      	cmp	r3, #0
 801d460:	d108      	bne.n	801d474 <ip4_route+0x78>
 801d462:	687b      	ldr	r3, [r7, #4]
 801d464:	681a      	ldr	r2, [r3, #0]
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	330c      	adds	r3, #12
 801d46a:	681b      	ldr	r3, [r3, #0]
 801d46c:	429a      	cmp	r2, r3
 801d46e:	d101      	bne.n	801d474 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801d470:	68fb      	ldr	r3, [r7, #12]
 801d472:	e030      	b.n	801d4d6 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801d474:	68fb      	ldr	r3, [r7, #12]
 801d476:	681b      	ldr	r3, [r3, #0]
 801d478:	60fb      	str	r3, [r7, #12]
 801d47a:	68fb      	ldr	r3, [r7, #12]
 801d47c:	2b00      	cmp	r3, #0
 801d47e:	d1c5      	bne.n	801d40c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d480:	4b19      	ldr	r3, [pc, #100]	@ (801d4e8 <ip4_route+0xec>)
 801d482:	681b      	ldr	r3, [r3, #0]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d01a      	beq.n	801d4be <ip4_route+0xc2>
 801d488:	4b17      	ldr	r3, [pc, #92]	@ (801d4e8 <ip4_route+0xec>)
 801d48a:	681b      	ldr	r3, [r3, #0]
 801d48c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d490:	f003 0301 	and.w	r3, r3, #1
 801d494:	2b00      	cmp	r3, #0
 801d496:	d012      	beq.n	801d4be <ip4_route+0xc2>
 801d498:	4b13      	ldr	r3, [pc, #76]	@ (801d4e8 <ip4_route+0xec>)
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d4a0:	f003 0304 	and.w	r3, r3, #4
 801d4a4:	2b00      	cmp	r3, #0
 801d4a6:	d00a      	beq.n	801d4be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d4a8:	4b0f      	ldr	r3, [pc, #60]	@ (801d4e8 <ip4_route+0xec>)
 801d4aa:	681b      	ldr	r3, [r3, #0]
 801d4ac:	3304      	adds	r3, #4
 801d4ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801d4b0:	2b00      	cmp	r3, #0
 801d4b2:	d004      	beq.n	801d4be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	b2db      	uxtb	r3, r3
 801d4ba:	2b7f      	cmp	r3, #127	@ 0x7f
 801d4bc:	d109      	bne.n	801d4d2 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801d4be:	4b0b      	ldr	r3, [pc, #44]	@ (801d4ec <ip4_route+0xf0>)
 801d4c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801d4c4:	3301      	adds	r3, #1
 801d4c6:	b29a      	uxth	r2, r3
 801d4c8:	4b08      	ldr	r3, [pc, #32]	@ (801d4ec <ip4_route+0xf0>)
 801d4ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801d4ce:	2300      	movs	r3, #0
 801d4d0:	e001      	b.n	801d4d6 <ip4_route+0xda>
  }

  return netif_default;
 801d4d2:	4b05      	ldr	r3, [pc, #20]	@ (801d4e8 <ip4_route+0xec>)
 801d4d4:	681b      	ldr	r3, [r3, #0]
}
 801d4d6:	4618      	mov	r0, r3
 801d4d8:	3714      	adds	r7, #20
 801d4da:	46bd      	mov	sp, r7
 801d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4e0:	4770      	bx	lr
 801d4e2:	bf00      	nop
 801d4e4:	200252a0 	.word	0x200252a0
 801d4e8:	200252a4 	.word	0x200252a4
 801d4ec:	200252ac 	.word	0x200252ac

0801d4f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801d4f0:	b580      	push	{r7, lr}
 801d4f2:	b082      	sub	sp, #8
 801d4f4:	af00      	add	r7, sp, #0
 801d4f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d4fe:	f003 0301 	and.w	r3, r3, #1
 801d502:	b2db      	uxtb	r3, r3
 801d504:	2b00      	cmp	r3, #0
 801d506:	d016      	beq.n	801d536 <ip4_input_accept+0x46>
 801d508:	687b      	ldr	r3, [r7, #4]
 801d50a:	3304      	adds	r3, #4
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d011      	beq.n	801d536 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d512:	4b0b      	ldr	r3, [pc, #44]	@ (801d540 <ip4_input_accept+0x50>)
 801d514:	695a      	ldr	r2, [r3, #20]
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	3304      	adds	r3, #4
 801d51a:	681b      	ldr	r3, [r3, #0]
 801d51c:	429a      	cmp	r2, r3
 801d51e:	d008      	beq.n	801d532 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801d520:	4b07      	ldr	r3, [pc, #28]	@ (801d540 <ip4_input_accept+0x50>)
 801d522:	695b      	ldr	r3, [r3, #20]
 801d524:	6879      	ldr	r1, [r7, #4]
 801d526:	4618      	mov	r0, r3
 801d528:	f000 fa70 	bl	801da0c <ip4_addr_isbroadcast_u32>
 801d52c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d001      	beq.n	801d536 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801d532:	2301      	movs	r3, #1
 801d534:	e000      	b.n	801d538 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801d536:	2300      	movs	r3, #0
}
 801d538:	4618      	mov	r0, r3
 801d53a:	3708      	adds	r7, #8
 801d53c:	46bd      	mov	sp, r7
 801d53e:	bd80      	pop	{r7, pc}
 801d540:	2001f0b0 	.word	0x2001f0b0

0801d544 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801d544:	b580      	push	{r7, lr}
 801d546:	b086      	sub	sp, #24
 801d548:	af00      	add	r7, sp, #0
 801d54a:	6078      	str	r0, [r7, #4]
 801d54c:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801d54e:	4b8f      	ldr	r3, [pc, #572]	@ (801d78c <ip4_input+0x248>)
 801d550:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801d554:	3301      	adds	r3, #1
 801d556:	b29a      	uxth	r2, r3
 801d558:	4b8c      	ldr	r3, [pc, #560]	@ (801d78c <ip4_input+0x248>)
 801d55a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801d55e:	687b      	ldr	r3, [r7, #4]
 801d560:	685b      	ldr	r3, [r3, #4]
 801d562:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801d564:	697b      	ldr	r3, [r7, #20]
 801d566:	781b      	ldrb	r3, [r3, #0]
 801d568:	091b      	lsrs	r3, r3, #4
 801d56a:	b2db      	uxtb	r3, r3
 801d56c:	2b04      	cmp	r3, #4
 801d56e:	d014      	beq.n	801d59a <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801d570:	6878      	ldr	r0, [r7, #4]
 801d572:	f7f7 fbf1 	bl	8014d58 <pbuf_free>
    IP_STATS_INC(ip.err);
 801d576:	4b85      	ldr	r3, [pc, #532]	@ (801d78c <ip4_input+0x248>)
 801d578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d57c:	3301      	adds	r3, #1
 801d57e:	b29a      	uxth	r2, r3
 801d580:	4b82      	ldr	r3, [pc, #520]	@ (801d78c <ip4_input+0x248>)
 801d582:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801d586:	4b81      	ldr	r3, [pc, #516]	@ (801d78c <ip4_input+0x248>)
 801d588:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d58c:	3301      	adds	r3, #1
 801d58e:	b29a      	uxth	r2, r3
 801d590:	4b7e      	ldr	r3, [pc, #504]	@ (801d78c <ip4_input+0x248>)
 801d592:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801d596:	2300      	movs	r3, #0
 801d598:	e13e      	b.n	801d818 <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801d59a:	697b      	ldr	r3, [r7, #20]
 801d59c:	781b      	ldrb	r3, [r3, #0]
 801d59e:	f003 030f 	and.w	r3, r3, #15
 801d5a2:	b2db      	uxtb	r3, r3
 801d5a4:	009b      	lsls	r3, r3, #2
 801d5a6:	b2db      	uxtb	r3, r3
 801d5a8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801d5aa:	697b      	ldr	r3, [r7, #20]
 801d5ac:	885b      	ldrh	r3, [r3, #2]
 801d5ae:	b29b      	uxth	r3, r3
 801d5b0:	4618      	mov	r0, r3
 801d5b2:	f7f5 ff13 	bl	80133dc <lwip_htons>
 801d5b6:	4603      	mov	r3, r0
 801d5b8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	891b      	ldrh	r3, [r3, #8]
 801d5be:	89ba      	ldrh	r2, [r7, #12]
 801d5c0:	429a      	cmp	r2, r3
 801d5c2:	d204      	bcs.n	801d5ce <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801d5c4:	89bb      	ldrh	r3, [r7, #12]
 801d5c6:	4619      	mov	r1, r3
 801d5c8:	6878      	ldr	r0, [r7, #4]
 801d5ca:	f7f7 fa3f 	bl	8014a4c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801d5ce:	687b      	ldr	r3, [r7, #4]
 801d5d0:	895b      	ldrh	r3, [r3, #10]
 801d5d2:	89fa      	ldrh	r2, [r7, #14]
 801d5d4:	429a      	cmp	r2, r3
 801d5d6:	d807      	bhi.n	801d5e8 <ip4_input+0xa4>
 801d5d8:	687b      	ldr	r3, [r7, #4]
 801d5da:	891b      	ldrh	r3, [r3, #8]
 801d5dc:	89ba      	ldrh	r2, [r7, #12]
 801d5de:	429a      	cmp	r2, r3
 801d5e0:	d802      	bhi.n	801d5e8 <ip4_input+0xa4>
 801d5e2:	89fb      	ldrh	r3, [r7, #14]
 801d5e4:	2b13      	cmp	r3, #19
 801d5e6:	d814      	bhi.n	801d612 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801d5e8:	6878      	ldr	r0, [r7, #4]
 801d5ea:	f7f7 fbb5 	bl	8014d58 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801d5ee:	4b67      	ldr	r3, [pc, #412]	@ (801d78c <ip4_input+0x248>)
 801d5f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801d5f4:	3301      	adds	r3, #1
 801d5f6:	b29a      	uxth	r2, r3
 801d5f8:	4b64      	ldr	r3, [pc, #400]	@ (801d78c <ip4_input+0x248>)
 801d5fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801d5fe:	4b63      	ldr	r3, [pc, #396]	@ (801d78c <ip4_input+0x248>)
 801d600:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d604:	3301      	adds	r3, #1
 801d606:	b29a      	uxth	r2, r3
 801d608:	4b60      	ldr	r3, [pc, #384]	@ (801d78c <ip4_input+0x248>)
 801d60a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801d60e:	2300      	movs	r3, #0
 801d610:	e102      	b.n	801d818 <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801d612:	697b      	ldr	r3, [r7, #20]
 801d614:	691b      	ldr	r3, [r3, #16]
 801d616:	4a5e      	ldr	r2, [pc, #376]	@ (801d790 <ip4_input+0x24c>)
 801d618:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801d61a:	697b      	ldr	r3, [r7, #20]
 801d61c:	68db      	ldr	r3, [r3, #12]
 801d61e:	4a5c      	ldr	r2, [pc, #368]	@ (801d790 <ip4_input+0x24c>)
 801d620:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d622:	4b5b      	ldr	r3, [pc, #364]	@ (801d790 <ip4_input+0x24c>)
 801d624:	695b      	ldr	r3, [r3, #20]
 801d626:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d62a:	2be0      	cmp	r3, #224	@ 0xe0
 801d62c:	d112      	bne.n	801d654 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801d62e:	683b      	ldr	r3, [r7, #0]
 801d630:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801d634:	f003 0301 	and.w	r3, r3, #1
 801d638:	b2db      	uxtb	r3, r3
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d007      	beq.n	801d64e <ip4_input+0x10a>
 801d63e:	683b      	ldr	r3, [r7, #0]
 801d640:	3304      	adds	r3, #4
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	2b00      	cmp	r3, #0
 801d646:	d002      	beq.n	801d64e <ip4_input+0x10a>
      netif = inp;
 801d648:	683b      	ldr	r3, [r7, #0]
 801d64a:	613b      	str	r3, [r7, #16]
 801d64c:	e02a      	b.n	801d6a4 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d64e:	2300      	movs	r3, #0
 801d650:	613b      	str	r3, [r7, #16]
 801d652:	e027      	b.n	801d6a4 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801d654:	6838      	ldr	r0, [r7, #0]
 801d656:	f7ff ff4b 	bl	801d4f0 <ip4_input_accept>
 801d65a:	4603      	mov	r3, r0
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d002      	beq.n	801d666 <ip4_input+0x122>
      netif = inp;
 801d660:	683b      	ldr	r3, [r7, #0]
 801d662:	613b      	str	r3, [r7, #16]
 801d664:	e01e      	b.n	801d6a4 <ip4_input+0x160>
    } else {
      netif = NULL;
 801d666:	2300      	movs	r3, #0
 801d668:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801d66a:	4b49      	ldr	r3, [pc, #292]	@ (801d790 <ip4_input+0x24c>)
 801d66c:	695b      	ldr	r3, [r3, #20]
 801d66e:	b2db      	uxtb	r3, r3
 801d670:	2b7f      	cmp	r3, #127	@ 0x7f
 801d672:	d017      	beq.n	801d6a4 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801d674:	4b47      	ldr	r3, [pc, #284]	@ (801d794 <ip4_input+0x250>)
 801d676:	681b      	ldr	r3, [r3, #0]
 801d678:	613b      	str	r3, [r7, #16]
 801d67a:	e00e      	b.n	801d69a <ip4_input+0x156>
          if (netif == inp) {
 801d67c:	693a      	ldr	r2, [r7, #16]
 801d67e:	683b      	ldr	r3, [r7, #0]
 801d680:	429a      	cmp	r2, r3
 801d682:	d006      	beq.n	801d692 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801d684:	6938      	ldr	r0, [r7, #16]
 801d686:	f7ff ff33 	bl	801d4f0 <ip4_input_accept>
 801d68a:	4603      	mov	r3, r0
 801d68c:	2b00      	cmp	r3, #0
 801d68e:	d108      	bne.n	801d6a2 <ip4_input+0x15e>
 801d690:	e000      	b.n	801d694 <ip4_input+0x150>
            continue;
 801d692:	bf00      	nop
        NETIF_FOREACH(netif) {
 801d694:	693b      	ldr	r3, [r7, #16]
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	613b      	str	r3, [r7, #16]
 801d69a:	693b      	ldr	r3, [r7, #16]
 801d69c:	2b00      	cmp	r3, #0
 801d69e:	d1ed      	bne.n	801d67c <ip4_input+0x138>
 801d6a0:	e000      	b.n	801d6a4 <ip4_input+0x160>
            break;
 801d6a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d6a4:	4b3a      	ldr	r3, [pc, #232]	@ (801d790 <ip4_input+0x24c>)
 801d6a6:	691b      	ldr	r3, [r3, #16]
 801d6a8:	6839      	ldr	r1, [r7, #0]
 801d6aa:	4618      	mov	r0, r3
 801d6ac:	f000 f9ae 	bl	801da0c <ip4_addr_isbroadcast_u32>
 801d6b0:	4603      	mov	r3, r0
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d105      	bne.n	801d6c2 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801d6b6:	4b36      	ldr	r3, [pc, #216]	@ (801d790 <ip4_input+0x24c>)
 801d6b8:	691b      	ldr	r3, [r3, #16]
 801d6ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801d6be:	2be0      	cmp	r3, #224	@ 0xe0
 801d6c0:	d10c      	bne.n	801d6dc <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801d6c2:	6878      	ldr	r0, [r7, #4]
 801d6c4:	f7f7 fb48 	bl	8014d58 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801d6c8:	4b30      	ldr	r3, [pc, #192]	@ (801d78c <ip4_input+0x248>)
 801d6ca:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d6ce:	3301      	adds	r3, #1
 801d6d0:	b29a      	uxth	r2, r3
 801d6d2:	4b2e      	ldr	r3, [pc, #184]	@ (801d78c <ip4_input+0x248>)
 801d6d4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801d6d8:	2300      	movs	r3, #0
 801d6da:	e09d      	b.n	801d818 <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801d6dc:	693b      	ldr	r3, [r7, #16]
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	d10c      	bne.n	801d6fc <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801d6e2:	4b2a      	ldr	r3, [pc, #168]	@ (801d78c <ip4_input+0x248>)
 801d6e4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d6e8:	3301      	adds	r3, #1
 801d6ea:	b29a      	uxth	r2, r3
 801d6ec:	4b27      	ldr	r3, [pc, #156]	@ (801d78c <ip4_input+0x248>)
 801d6ee:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801d6f2:	6878      	ldr	r0, [r7, #4]
 801d6f4:	f7f7 fb30 	bl	8014d58 <pbuf_free>
    return ERR_OK;
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	e08d      	b.n	801d818 <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	88db      	ldrh	r3, [r3, #6]
 801d700:	b29b      	uxth	r3, r3
 801d702:	461a      	mov	r2, r3
 801d704:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801d708:	4013      	ands	r3, r2
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d00b      	beq.n	801d726 <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801d70e:	6878      	ldr	r0, [r7, #4]
 801d710:	f000 fcca 	bl	801e0a8 <ip4_reass>
 801d714:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d101      	bne.n	801d720 <ip4_input+0x1dc>
      return ERR_OK;
 801d71c:	2300      	movs	r3, #0
 801d71e:	e07b      	b.n	801d818 <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	685b      	ldr	r3, [r3, #4]
 801d724:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801d726:	4a1a      	ldr	r2, [pc, #104]	@ (801d790 <ip4_input+0x24c>)
 801d728:	693b      	ldr	r3, [r7, #16]
 801d72a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801d72c:	4a18      	ldr	r2, [pc, #96]	@ (801d790 <ip4_input+0x24c>)
 801d72e:	683b      	ldr	r3, [r7, #0]
 801d730:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801d732:	4a17      	ldr	r2, [pc, #92]	@ (801d790 <ip4_input+0x24c>)
 801d734:	697b      	ldr	r3, [r7, #20]
 801d736:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801d738:	697b      	ldr	r3, [r7, #20]
 801d73a:	781b      	ldrb	r3, [r3, #0]
 801d73c:	f003 030f 	and.w	r3, r3, #15
 801d740:	b2db      	uxtb	r3, r3
 801d742:	009b      	lsls	r3, r3, #2
 801d744:	b2db      	uxtb	r3, r3
 801d746:	461a      	mov	r2, r3
 801d748:	4b11      	ldr	r3, [pc, #68]	@ (801d790 <ip4_input+0x24c>)
 801d74a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801d74c:	89fb      	ldrh	r3, [r7, #14]
 801d74e:	4619      	mov	r1, r3
 801d750:	6878      	ldr	r0, [r7, #4]
 801d752:	f7f7 fa7b 	bl	8014c4c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801d756:	697b      	ldr	r3, [r7, #20]
 801d758:	7a5b      	ldrb	r3, [r3, #9]
 801d75a:	2b11      	cmp	r3, #17
 801d75c:	d006      	beq.n	801d76c <ip4_input+0x228>
 801d75e:	2b11      	cmp	r3, #17
 801d760:	dc1a      	bgt.n	801d798 <ip4_input+0x254>
 801d762:	2b01      	cmp	r3, #1
 801d764:	d00c      	beq.n	801d780 <ip4_input+0x23c>
 801d766:	2b06      	cmp	r3, #6
 801d768:	d005      	beq.n	801d776 <ip4_input+0x232>
 801d76a:	e015      	b.n	801d798 <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801d76c:	6839      	ldr	r1, [r7, #0]
 801d76e:	6878      	ldr	r0, [r7, #4]
 801d770:	f7fe f862 	bl	801b838 <udp_input>
        break;
 801d774:	e03d      	b.n	801d7f2 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801d776:	6839      	ldr	r1, [r7, #0]
 801d778:	6878      	ldr	r0, [r7, #4]
 801d77a:	f7f9 fb6d 	bl	8016e58 <tcp_input>
        break;
 801d77e:	e038      	b.n	801d7f2 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801d780:	6839      	ldr	r1, [r7, #0]
 801d782:	6878      	ldr	r0, [r7, #4]
 801d784:	f7ff fc6e 	bl	801d064 <icmp_input>
        break;
 801d788:	e033      	b.n	801d7f2 <ip4_input+0x2ae>
 801d78a:	bf00      	nop
 801d78c:	200252ac 	.word	0x200252ac
 801d790:	2001f0b0 	.word	0x2001f0b0
 801d794:	200252a0 	.word	0x200252a0
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d798:	4b21      	ldr	r3, [pc, #132]	@ (801d820 <ip4_input+0x2dc>)
 801d79a:	695b      	ldr	r3, [r3, #20]
 801d79c:	6939      	ldr	r1, [r7, #16]
 801d79e:	4618      	mov	r0, r3
 801d7a0:	f000 f934 	bl	801da0c <ip4_addr_isbroadcast_u32>
 801d7a4:	4603      	mov	r3, r0
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d10f      	bne.n	801d7ca <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801d7aa:	4b1d      	ldr	r3, [pc, #116]	@ (801d820 <ip4_input+0x2dc>)
 801d7ac:	695b      	ldr	r3, [r3, #20]
 801d7ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801d7b2:	2be0      	cmp	r3, #224	@ 0xe0
 801d7b4:	d009      	beq.n	801d7ca <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801d7b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801d7ba:	4619      	mov	r1, r3
 801d7bc:	6878      	ldr	r0, [r7, #4]
 801d7be:	f7f7 fab8 	bl	8014d32 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801d7c2:	2102      	movs	r1, #2
 801d7c4:	6878      	ldr	r0, [r7, #4]
 801d7c6:	f7ff fd85 	bl	801d2d4 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801d7ca:	4b16      	ldr	r3, [pc, #88]	@ (801d824 <ip4_input+0x2e0>)
 801d7cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801d7d0:	3301      	adds	r3, #1
 801d7d2:	b29a      	uxth	r2, r3
 801d7d4:	4b13      	ldr	r3, [pc, #76]	@ (801d824 <ip4_input+0x2e0>)
 801d7d6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801d7da:	4b12      	ldr	r3, [pc, #72]	@ (801d824 <ip4_input+0x2e0>)
 801d7dc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801d7e0:	3301      	adds	r3, #1
 801d7e2:	b29a      	uxth	r2, r3
 801d7e4:	4b0f      	ldr	r3, [pc, #60]	@ (801d824 <ip4_input+0x2e0>)
 801d7e6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801d7ea:	6878      	ldr	r0, [r7, #4]
 801d7ec:	f7f7 fab4 	bl	8014d58 <pbuf_free>
        break;
 801d7f0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801d7f2:	4b0b      	ldr	r3, [pc, #44]	@ (801d820 <ip4_input+0x2dc>)
 801d7f4:	2200      	movs	r2, #0
 801d7f6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801d7f8:	4b09      	ldr	r3, [pc, #36]	@ (801d820 <ip4_input+0x2dc>)
 801d7fa:	2200      	movs	r2, #0
 801d7fc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801d7fe:	4b08      	ldr	r3, [pc, #32]	@ (801d820 <ip4_input+0x2dc>)
 801d800:	2200      	movs	r2, #0
 801d802:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801d804:	4b06      	ldr	r3, [pc, #24]	@ (801d820 <ip4_input+0x2dc>)
 801d806:	2200      	movs	r2, #0
 801d808:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801d80a:	4b05      	ldr	r3, [pc, #20]	@ (801d820 <ip4_input+0x2dc>)
 801d80c:	2200      	movs	r2, #0
 801d80e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801d810:	4b03      	ldr	r3, [pc, #12]	@ (801d820 <ip4_input+0x2dc>)
 801d812:	2200      	movs	r2, #0
 801d814:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801d816:	2300      	movs	r3, #0
}
 801d818:	4618      	mov	r0, r3
 801d81a:	3718      	adds	r7, #24
 801d81c:	46bd      	mov	sp, r7
 801d81e:	bd80      	pop	{r7, pc}
 801d820:	2001f0b0 	.word	0x2001f0b0
 801d824:	200252ac 	.word	0x200252ac

0801d828 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801d828:	b580      	push	{r7, lr}
 801d82a:	b08a      	sub	sp, #40	@ 0x28
 801d82c:	af04      	add	r7, sp, #16
 801d82e:	60f8      	str	r0, [r7, #12]
 801d830:	60b9      	str	r1, [r7, #8]
 801d832:	607a      	str	r2, [r7, #4]
 801d834:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801d836:	68bb      	ldr	r3, [r7, #8]
 801d838:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801d83a:	687b      	ldr	r3, [r7, #4]
 801d83c:	2b00      	cmp	r3, #0
 801d83e:	d009      	beq.n	801d854 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801d840:	68bb      	ldr	r3, [r7, #8]
 801d842:	2b00      	cmp	r3, #0
 801d844:	d003      	beq.n	801d84e <ip4_output_if+0x26>
 801d846:	68bb      	ldr	r3, [r7, #8]
 801d848:	681b      	ldr	r3, [r3, #0]
 801d84a:	2b00      	cmp	r3, #0
 801d84c:	d102      	bne.n	801d854 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801d84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d850:	3304      	adds	r3, #4
 801d852:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801d854:	78fa      	ldrb	r2, [r7, #3]
 801d856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d858:	9302      	str	r3, [sp, #8]
 801d85a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801d85e:	9301      	str	r3, [sp, #4]
 801d860:	f897 3020 	ldrb.w	r3, [r7, #32]
 801d864:	9300      	str	r3, [sp, #0]
 801d866:	4613      	mov	r3, r2
 801d868:	687a      	ldr	r2, [r7, #4]
 801d86a:	6979      	ldr	r1, [r7, #20]
 801d86c:	68f8      	ldr	r0, [r7, #12]
 801d86e:	f000 f805 	bl	801d87c <ip4_output_if_src>
 801d872:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801d874:	4618      	mov	r0, r3
 801d876:	3718      	adds	r7, #24
 801d878:	46bd      	mov	sp, r7
 801d87a:	bd80      	pop	{r7, pc}

0801d87c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801d87c:	b580      	push	{r7, lr}
 801d87e:	b088      	sub	sp, #32
 801d880:	af00      	add	r7, sp, #0
 801d882:	60f8      	str	r0, [r7, #12]
 801d884:	60b9      	str	r1, [r7, #8]
 801d886:	607a      	str	r2, [r7, #4]
 801d888:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801d88a:	68fb      	ldr	r3, [r7, #12]
 801d88c:	7b9b      	ldrb	r3, [r3, #14]
 801d88e:	2b01      	cmp	r3, #1
 801d890:	d006      	beq.n	801d8a0 <ip4_output_if_src+0x24>
 801d892:	4b57      	ldr	r3, [pc, #348]	@ (801d9f0 <ip4_output_if_src+0x174>)
 801d894:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801d898:	4956      	ldr	r1, [pc, #344]	@ (801d9f4 <ip4_output_if_src+0x178>)
 801d89a:	4857      	ldr	r0, [pc, #348]	@ (801d9f8 <ip4_output_if_src+0x17c>)
 801d89c:	f002 fcfe 	bl	802029c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d068      	beq.n	801d978 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801d8a6:	2314      	movs	r3, #20
 801d8a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801d8aa:	2114      	movs	r1, #20
 801d8ac:	68f8      	ldr	r0, [r7, #12]
 801d8ae:	f7f7 f9bd 	bl	8014c2c <pbuf_add_header>
 801d8b2:	4603      	mov	r3, r0
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d00a      	beq.n	801d8ce <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801d8b8:	4b50      	ldr	r3, [pc, #320]	@ (801d9fc <ip4_output_if_src+0x180>)
 801d8ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d8be:	3301      	adds	r3, #1
 801d8c0:	b29a      	uxth	r2, r3
 801d8c2:	4b4e      	ldr	r3, [pc, #312]	@ (801d9fc <ip4_output_if_src+0x180>)
 801d8c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d8c8:	f06f 0301 	mvn.w	r3, #1
 801d8cc:	e08c      	b.n	801d9e8 <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	685b      	ldr	r3, [r3, #4]
 801d8d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801d8d4:	68fb      	ldr	r3, [r7, #12]
 801d8d6:	895b      	ldrh	r3, [r3, #10]
 801d8d8:	2b13      	cmp	r3, #19
 801d8da:	d806      	bhi.n	801d8ea <ip4_output_if_src+0x6e>
 801d8dc:	4b44      	ldr	r3, [pc, #272]	@ (801d9f0 <ip4_output_if_src+0x174>)
 801d8de:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801d8e2:	4947      	ldr	r1, [pc, #284]	@ (801da00 <ip4_output_if_src+0x184>)
 801d8e4:	4844      	ldr	r0, [pc, #272]	@ (801d9f8 <ip4_output_if_src+0x17c>)
 801d8e6:	f002 fcd9 	bl	802029c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801d8ea:	69fb      	ldr	r3, [r7, #28]
 801d8ec:	78fa      	ldrb	r2, [r7, #3]
 801d8ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801d8f0:	69fb      	ldr	r3, [r7, #28]
 801d8f2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801d8f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801d8f8:	687b      	ldr	r3, [r7, #4]
 801d8fa:	681a      	ldr	r2, [r3, #0]
 801d8fc:	69fb      	ldr	r3, [r7, #28]
 801d8fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801d900:	8b7b      	ldrh	r3, [r7, #26]
 801d902:	089b      	lsrs	r3, r3, #2
 801d904:	b29b      	uxth	r3, r3
 801d906:	b2db      	uxtb	r3, r3
 801d908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d90c:	b2da      	uxtb	r2, r3
 801d90e:	69fb      	ldr	r3, [r7, #28]
 801d910:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801d912:	69fb      	ldr	r3, [r7, #28]
 801d914:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801d918:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	891b      	ldrh	r3, [r3, #8]
 801d91e:	4618      	mov	r0, r3
 801d920:	f7f5 fd5c 	bl	80133dc <lwip_htons>
 801d924:	4603      	mov	r3, r0
 801d926:	461a      	mov	r2, r3
 801d928:	69fb      	ldr	r3, [r7, #28]
 801d92a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801d92c:	69fb      	ldr	r3, [r7, #28]
 801d92e:	2200      	movs	r2, #0
 801d930:	719a      	strb	r2, [r3, #6]
 801d932:	2200      	movs	r2, #0
 801d934:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801d936:	4b33      	ldr	r3, [pc, #204]	@ (801da04 <ip4_output_if_src+0x188>)
 801d938:	881b      	ldrh	r3, [r3, #0]
 801d93a:	4618      	mov	r0, r3
 801d93c:	f7f5 fd4e 	bl	80133dc <lwip_htons>
 801d940:	4603      	mov	r3, r0
 801d942:	461a      	mov	r2, r3
 801d944:	69fb      	ldr	r3, [r7, #28]
 801d946:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801d948:	4b2e      	ldr	r3, [pc, #184]	@ (801da04 <ip4_output_if_src+0x188>)
 801d94a:	881b      	ldrh	r3, [r3, #0]
 801d94c:	3301      	adds	r3, #1
 801d94e:	b29a      	uxth	r2, r3
 801d950:	4b2c      	ldr	r3, [pc, #176]	@ (801da04 <ip4_output_if_src+0x188>)
 801d952:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801d954:	68bb      	ldr	r3, [r7, #8]
 801d956:	2b00      	cmp	r3, #0
 801d958:	d104      	bne.n	801d964 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801d95a:	4b2b      	ldr	r3, [pc, #172]	@ (801da08 <ip4_output_if_src+0x18c>)
 801d95c:	681a      	ldr	r2, [r3, #0]
 801d95e:	69fb      	ldr	r3, [r7, #28]
 801d960:	60da      	str	r2, [r3, #12]
 801d962:	e003      	b.n	801d96c <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801d964:	68bb      	ldr	r3, [r7, #8]
 801d966:	681a      	ldr	r2, [r3, #0]
 801d968:	69fb      	ldr	r3, [r7, #28]
 801d96a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801d96c:	69fb      	ldr	r3, [r7, #28]
 801d96e:	2200      	movs	r2, #0
 801d970:	729a      	strb	r2, [r3, #10]
 801d972:	2200      	movs	r2, #0
 801d974:	72da      	strb	r2, [r3, #11]
 801d976:	e017      	b.n	801d9a8 <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	895b      	ldrh	r3, [r3, #10]
 801d97c:	2b13      	cmp	r3, #19
 801d97e:	d80a      	bhi.n	801d996 <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801d980:	4b1e      	ldr	r3, [pc, #120]	@ (801d9fc <ip4_output_if_src+0x180>)
 801d982:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801d986:	3301      	adds	r3, #1
 801d988:	b29a      	uxth	r2, r3
 801d98a:	4b1c      	ldr	r3, [pc, #112]	@ (801d9fc <ip4_output_if_src+0x180>)
 801d98c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801d990:	f06f 0301 	mvn.w	r3, #1
 801d994:	e028      	b.n	801d9e8 <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	685b      	ldr	r3, [r3, #4]
 801d99a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801d99c:	69fb      	ldr	r3, [r7, #28]
 801d99e:	691b      	ldr	r3, [r3, #16]
 801d9a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801d9a2:	f107 0314 	add.w	r3, r7, #20
 801d9a6:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801d9a8:	4b14      	ldr	r3, [pc, #80]	@ (801d9fc <ip4_output_if_src+0x180>)
 801d9aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801d9ae:	3301      	adds	r3, #1
 801d9b0:	b29a      	uxth	r2, r3
 801d9b2:	4b12      	ldr	r3, [pc, #72]	@ (801d9fc <ip4_output_if_src+0x180>)
 801d9b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801d9b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d00c      	beq.n	801d9da <ip4_output_if_src+0x15e>
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	891a      	ldrh	r2, [r3, #8]
 801d9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d9c8:	429a      	cmp	r2, r3
 801d9ca:	d906      	bls.n	801d9da <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801d9cc:	687a      	ldr	r2, [r7, #4]
 801d9ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801d9d0:	68f8      	ldr	r0, [r7, #12]
 801d9d2:	f000 fd7b 	bl	801e4cc <ip4_frag>
 801d9d6:	4603      	mov	r3, r0
 801d9d8:	e006      	b.n	801d9e8 <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801d9da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d9dc:	695b      	ldr	r3, [r3, #20]
 801d9de:	687a      	ldr	r2, [r7, #4]
 801d9e0:	68f9      	ldr	r1, [r7, #12]
 801d9e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801d9e4:	4798      	blx	r3
 801d9e6:	4603      	mov	r3, r0
}
 801d9e8:	4618      	mov	r0, r3
 801d9ea:	3720      	adds	r7, #32
 801d9ec:	46bd      	mov	sp, r7
 801d9ee:	bd80      	pop	{r7, pc}
 801d9f0:	08024508 	.word	0x08024508
 801d9f4:	0802453c 	.word	0x0802453c
 801d9f8:	08024548 	.word	0x08024548
 801d9fc:	200252ac 	.word	0x200252ac
 801da00:	08024570 	.word	0x08024570
 801da04:	200254fa 	.word	0x200254fa
 801da08:	08024ec4 	.word	0x08024ec4

0801da0c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801da0c:	b480      	push	{r7}
 801da0e:	b085      	sub	sp, #20
 801da10:	af00      	add	r7, sp, #0
 801da12:	6078      	str	r0, [r7, #4]
 801da14:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801da16:	687b      	ldr	r3, [r7, #4]
 801da18:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801da1a:	687b      	ldr	r3, [r7, #4]
 801da1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801da20:	d002      	beq.n	801da28 <ip4_addr_isbroadcast_u32+0x1c>
 801da22:	687b      	ldr	r3, [r7, #4]
 801da24:	2b00      	cmp	r3, #0
 801da26:	d101      	bne.n	801da2c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801da28:	2301      	movs	r3, #1
 801da2a:	e02a      	b.n	801da82 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801da2c:	683b      	ldr	r3, [r7, #0]
 801da2e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801da32:	f003 0302 	and.w	r3, r3, #2
 801da36:	2b00      	cmp	r3, #0
 801da38:	d101      	bne.n	801da3e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801da3a:	2300      	movs	r3, #0
 801da3c:	e021      	b.n	801da82 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801da3e:	683b      	ldr	r3, [r7, #0]
 801da40:	3304      	adds	r3, #4
 801da42:	681b      	ldr	r3, [r3, #0]
 801da44:	687a      	ldr	r2, [r7, #4]
 801da46:	429a      	cmp	r2, r3
 801da48:	d101      	bne.n	801da4e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801da4a:	2300      	movs	r3, #0
 801da4c:	e019      	b.n	801da82 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801da4e:	68fa      	ldr	r2, [r7, #12]
 801da50:	683b      	ldr	r3, [r7, #0]
 801da52:	3304      	adds	r3, #4
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	405a      	eors	r2, r3
 801da58:	683b      	ldr	r3, [r7, #0]
 801da5a:	3308      	adds	r3, #8
 801da5c:	681b      	ldr	r3, [r3, #0]
 801da5e:	4013      	ands	r3, r2
 801da60:	2b00      	cmp	r3, #0
 801da62:	d10d      	bne.n	801da80 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801da64:	683b      	ldr	r3, [r7, #0]
 801da66:	3308      	adds	r3, #8
 801da68:	681b      	ldr	r3, [r3, #0]
 801da6a:	43da      	mvns	r2, r3
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801da70:	683b      	ldr	r3, [r7, #0]
 801da72:	3308      	adds	r3, #8
 801da74:	681b      	ldr	r3, [r3, #0]
 801da76:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801da78:	429a      	cmp	r2, r3
 801da7a:	d101      	bne.n	801da80 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801da7c:	2301      	movs	r3, #1
 801da7e:	e000      	b.n	801da82 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801da80:	2300      	movs	r3, #0
  }
}
 801da82:	4618      	mov	r0, r3
 801da84:	3714      	adds	r7, #20
 801da86:	46bd      	mov	sp, r7
 801da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da8c:	4770      	bx	lr
	...

0801da90 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801da90:	b580      	push	{r7, lr}
 801da92:	b084      	sub	sp, #16
 801da94:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801da96:	2300      	movs	r3, #0
 801da98:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801da9a:	4b12      	ldr	r3, [pc, #72]	@ (801dae4 <ip_reass_tmr+0x54>)
 801da9c:	681b      	ldr	r3, [r3, #0]
 801da9e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801daa0:	e018      	b.n	801dad4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801daa2:	68fb      	ldr	r3, [r7, #12]
 801daa4:	7fdb      	ldrb	r3, [r3, #31]
 801daa6:	2b00      	cmp	r3, #0
 801daa8:	d00b      	beq.n	801dac2 <ip_reass_tmr+0x32>
      r->timer--;
 801daaa:	68fb      	ldr	r3, [r7, #12]
 801daac:	7fdb      	ldrb	r3, [r3, #31]
 801daae:	3b01      	subs	r3, #1
 801dab0:	b2da      	uxtb	r2, r3
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801daba:	68fb      	ldr	r3, [r7, #12]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	60fb      	str	r3, [r7, #12]
 801dac0:	e008      	b.n	801dad4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801dac2:	68fb      	ldr	r3, [r7, #12]
 801dac4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801dac6:	68fb      	ldr	r3, [r7, #12]
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801dacc:	68b9      	ldr	r1, [r7, #8]
 801dace:	6878      	ldr	r0, [r7, #4]
 801dad0:	f000 f80a 	bl	801dae8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801dad4:	68fb      	ldr	r3, [r7, #12]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d1e3      	bne.n	801daa2 <ip_reass_tmr+0x12>
    }
  }
}
 801dada:	bf00      	nop
 801dadc:	bf00      	nop
 801dade:	3710      	adds	r7, #16
 801dae0:	46bd      	mov	sp, r7
 801dae2:	bd80      	pop	{r7, pc}
 801dae4:	200254fc 	.word	0x200254fc

0801dae8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801dae8:	b580      	push	{r7, lr}
 801daea:	b088      	sub	sp, #32
 801daec:	af00      	add	r7, sp, #0
 801daee:	6078      	str	r0, [r7, #4]
 801daf0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801daf2:	2300      	movs	r3, #0
 801daf4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801daf6:	683a      	ldr	r2, [r7, #0]
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	429a      	cmp	r2, r3
 801dafc:	d105      	bne.n	801db0a <ip_reass_free_complete_datagram+0x22>
 801dafe:	4b45      	ldr	r3, [pc, #276]	@ (801dc14 <ip_reass_free_complete_datagram+0x12c>)
 801db00:	22ab      	movs	r2, #171	@ 0xab
 801db02:	4945      	ldr	r1, [pc, #276]	@ (801dc18 <ip_reass_free_complete_datagram+0x130>)
 801db04:	4845      	ldr	r0, [pc, #276]	@ (801dc1c <ip_reass_free_complete_datagram+0x134>)
 801db06:	f002 fbc9 	bl	802029c <iprintf>
  if (prev != NULL) {
 801db0a:	683b      	ldr	r3, [r7, #0]
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	d00a      	beq.n	801db26 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801db10:	683b      	ldr	r3, [r7, #0]
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	687a      	ldr	r2, [r7, #4]
 801db16:	429a      	cmp	r2, r3
 801db18:	d005      	beq.n	801db26 <ip_reass_free_complete_datagram+0x3e>
 801db1a:	4b3e      	ldr	r3, [pc, #248]	@ (801dc14 <ip_reass_free_complete_datagram+0x12c>)
 801db1c:	22ad      	movs	r2, #173	@ 0xad
 801db1e:	4940      	ldr	r1, [pc, #256]	@ (801dc20 <ip_reass_free_complete_datagram+0x138>)
 801db20:	483e      	ldr	r0, [pc, #248]	@ (801dc1c <ip_reass_free_complete_datagram+0x134>)
 801db22:	f002 fbbb 	bl	802029c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801db26:	687b      	ldr	r3, [r7, #4]
 801db28:	685b      	ldr	r3, [r3, #4]
 801db2a:	685b      	ldr	r3, [r3, #4]
 801db2c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801db2e:	697b      	ldr	r3, [r7, #20]
 801db30:	889b      	ldrh	r3, [r3, #4]
 801db32:	b29b      	uxth	r3, r3
 801db34:	2b00      	cmp	r3, #0
 801db36:	d12a      	bne.n	801db8e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	685b      	ldr	r3, [r3, #4]
 801db3c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801db3e:	697b      	ldr	r3, [r7, #20]
 801db40:	681a      	ldr	r2, [r3, #0]
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801db46:	69bb      	ldr	r3, [r7, #24]
 801db48:	6858      	ldr	r0, [r3, #4]
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	3308      	adds	r3, #8
 801db4e:	2214      	movs	r2, #20
 801db50:	4619      	mov	r1, r3
 801db52:	f002 fdce 	bl	80206f2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801db56:	2101      	movs	r1, #1
 801db58:	69b8      	ldr	r0, [r7, #24]
 801db5a:	f7ff fbcb 	bl	801d2f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801db5e:	69b8      	ldr	r0, [r7, #24]
 801db60:	f7f7 f988 	bl	8014e74 <pbuf_clen>
 801db64:	4603      	mov	r3, r0
 801db66:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801db68:	8bfa      	ldrh	r2, [r7, #30]
 801db6a:	8a7b      	ldrh	r3, [r7, #18]
 801db6c:	4413      	add	r3, r2
 801db6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801db72:	db05      	blt.n	801db80 <ip_reass_free_complete_datagram+0x98>
 801db74:	4b27      	ldr	r3, [pc, #156]	@ (801dc14 <ip_reass_free_complete_datagram+0x12c>)
 801db76:	22bc      	movs	r2, #188	@ 0xbc
 801db78:	492a      	ldr	r1, [pc, #168]	@ (801dc24 <ip_reass_free_complete_datagram+0x13c>)
 801db7a:	4828      	ldr	r0, [pc, #160]	@ (801dc1c <ip_reass_free_complete_datagram+0x134>)
 801db7c:	f002 fb8e 	bl	802029c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801db80:	8bfa      	ldrh	r2, [r7, #30]
 801db82:	8a7b      	ldrh	r3, [r7, #18]
 801db84:	4413      	add	r3, r2
 801db86:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801db88:	69b8      	ldr	r0, [r7, #24]
 801db8a:	f7f7 f8e5 	bl	8014d58 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801db8e:	687b      	ldr	r3, [r7, #4]
 801db90:	685b      	ldr	r3, [r3, #4]
 801db92:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801db94:	e01f      	b.n	801dbd6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801db96:	69bb      	ldr	r3, [r7, #24]
 801db98:	685b      	ldr	r3, [r3, #4]
 801db9a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801db9c:	69bb      	ldr	r3, [r7, #24]
 801db9e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801dba0:	697b      	ldr	r3, [r7, #20]
 801dba2:	681b      	ldr	r3, [r3, #0]
 801dba4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801dba6:	68f8      	ldr	r0, [r7, #12]
 801dba8:	f7f7 f964 	bl	8014e74 <pbuf_clen>
 801dbac:	4603      	mov	r3, r0
 801dbae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801dbb0:	8bfa      	ldrh	r2, [r7, #30]
 801dbb2:	8a7b      	ldrh	r3, [r7, #18]
 801dbb4:	4413      	add	r3, r2
 801dbb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dbba:	db05      	blt.n	801dbc8 <ip_reass_free_complete_datagram+0xe0>
 801dbbc:	4b15      	ldr	r3, [pc, #84]	@ (801dc14 <ip_reass_free_complete_datagram+0x12c>)
 801dbbe:	22cc      	movs	r2, #204	@ 0xcc
 801dbc0:	4918      	ldr	r1, [pc, #96]	@ (801dc24 <ip_reass_free_complete_datagram+0x13c>)
 801dbc2:	4816      	ldr	r0, [pc, #88]	@ (801dc1c <ip_reass_free_complete_datagram+0x134>)
 801dbc4:	f002 fb6a 	bl	802029c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801dbc8:	8bfa      	ldrh	r2, [r7, #30]
 801dbca:	8a7b      	ldrh	r3, [r7, #18]
 801dbcc:	4413      	add	r3, r2
 801dbce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801dbd0:	68f8      	ldr	r0, [r7, #12]
 801dbd2:	f7f7 f8c1 	bl	8014d58 <pbuf_free>
  while (p != NULL) {
 801dbd6:	69bb      	ldr	r3, [r7, #24]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d1dc      	bne.n	801db96 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801dbdc:	6839      	ldr	r1, [r7, #0]
 801dbde:	6878      	ldr	r0, [r7, #4]
 801dbe0:	f000 f8ca 	bl	801dd78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801dbe4:	4b10      	ldr	r3, [pc, #64]	@ (801dc28 <ip_reass_free_complete_datagram+0x140>)
 801dbe6:	881b      	ldrh	r3, [r3, #0]
 801dbe8:	8bfa      	ldrh	r2, [r7, #30]
 801dbea:	429a      	cmp	r2, r3
 801dbec:	d905      	bls.n	801dbfa <ip_reass_free_complete_datagram+0x112>
 801dbee:	4b09      	ldr	r3, [pc, #36]	@ (801dc14 <ip_reass_free_complete_datagram+0x12c>)
 801dbf0:	22d2      	movs	r2, #210	@ 0xd2
 801dbf2:	490e      	ldr	r1, [pc, #56]	@ (801dc2c <ip_reass_free_complete_datagram+0x144>)
 801dbf4:	4809      	ldr	r0, [pc, #36]	@ (801dc1c <ip_reass_free_complete_datagram+0x134>)
 801dbf6:	f002 fb51 	bl	802029c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801dbfa:	4b0b      	ldr	r3, [pc, #44]	@ (801dc28 <ip_reass_free_complete_datagram+0x140>)
 801dbfc:	881a      	ldrh	r2, [r3, #0]
 801dbfe:	8bfb      	ldrh	r3, [r7, #30]
 801dc00:	1ad3      	subs	r3, r2, r3
 801dc02:	b29a      	uxth	r2, r3
 801dc04:	4b08      	ldr	r3, [pc, #32]	@ (801dc28 <ip_reass_free_complete_datagram+0x140>)
 801dc06:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801dc08:	8bfb      	ldrh	r3, [r7, #30]
}
 801dc0a:	4618      	mov	r0, r3
 801dc0c:	3720      	adds	r7, #32
 801dc0e:	46bd      	mov	sp, r7
 801dc10:	bd80      	pop	{r7, pc}
 801dc12:	bf00      	nop
 801dc14:	080245a0 	.word	0x080245a0
 801dc18:	080245dc 	.word	0x080245dc
 801dc1c:	080245e8 	.word	0x080245e8
 801dc20:	08024610 	.word	0x08024610
 801dc24:	08024624 	.word	0x08024624
 801dc28:	20025500 	.word	0x20025500
 801dc2c:	08024644 	.word	0x08024644

0801dc30 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801dc30:	b580      	push	{r7, lr}
 801dc32:	b08a      	sub	sp, #40	@ 0x28
 801dc34:	af00      	add	r7, sp, #0
 801dc36:	6078      	str	r0, [r7, #4]
 801dc38:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801dc3a:	2300      	movs	r3, #0
 801dc3c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801dc3e:	2300      	movs	r3, #0
 801dc40:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801dc42:	2300      	movs	r3, #0
 801dc44:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801dc46:	2300      	movs	r3, #0
 801dc48:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801dc4a:	2300      	movs	r3, #0
 801dc4c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801dc4e:	4b28      	ldr	r3, [pc, #160]	@ (801dcf0 <ip_reass_remove_oldest_datagram+0xc0>)
 801dc50:	681b      	ldr	r3, [r3, #0]
 801dc52:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801dc54:	e030      	b.n	801dcb8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801dc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc58:	695a      	ldr	r2, [r3, #20]
 801dc5a:	687b      	ldr	r3, [r7, #4]
 801dc5c:	68db      	ldr	r3, [r3, #12]
 801dc5e:	429a      	cmp	r2, r3
 801dc60:	d10c      	bne.n	801dc7c <ip_reass_remove_oldest_datagram+0x4c>
 801dc62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc64:	699a      	ldr	r2, [r3, #24]
 801dc66:	687b      	ldr	r3, [r7, #4]
 801dc68:	691b      	ldr	r3, [r3, #16]
 801dc6a:	429a      	cmp	r2, r3
 801dc6c:	d106      	bne.n	801dc7c <ip_reass_remove_oldest_datagram+0x4c>
 801dc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc70:	899a      	ldrh	r2, [r3, #12]
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	889b      	ldrh	r3, [r3, #4]
 801dc76:	b29b      	uxth	r3, r3
 801dc78:	429a      	cmp	r2, r3
 801dc7a:	d014      	beq.n	801dca6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801dc7c:	693b      	ldr	r3, [r7, #16]
 801dc7e:	3301      	adds	r3, #1
 801dc80:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801dc82:	6a3b      	ldr	r3, [r7, #32]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	d104      	bne.n	801dc92 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801dc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc8a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801dc8c:	69fb      	ldr	r3, [r7, #28]
 801dc8e:	61bb      	str	r3, [r7, #24]
 801dc90:	e009      	b.n	801dca6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801dc92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dc94:	7fda      	ldrb	r2, [r3, #31]
 801dc96:	6a3b      	ldr	r3, [r7, #32]
 801dc98:	7fdb      	ldrb	r3, [r3, #31]
 801dc9a:	429a      	cmp	r2, r3
 801dc9c:	d803      	bhi.n	801dca6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801dc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dca0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801dca2:	69fb      	ldr	r3, [r7, #28]
 801dca4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801dca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dca8:	681b      	ldr	r3, [r3, #0]
 801dcaa:	2b00      	cmp	r3, #0
 801dcac:	d001      	beq.n	801dcb2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801dcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcb0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801dcb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801dcb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dcba:	2b00      	cmp	r3, #0
 801dcbc:	d1cb      	bne.n	801dc56 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801dcbe:	6a3b      	ldr	r3, [r7, #32]
 801dcc0:	2b00      	cmp	r3, #0
 801dcc2:	d008      	beq.n	801dcd6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801dcc4:	69b9      	ldr	r1, [r7, #24]
 801dcc6:	6a38      	ldr	r0, [r7, #32]
 801dcc8:	f7ff ff0e 	bl	801dae8 <ip_reass_free_complete_datagram>
 801dccc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801dcce:	697a      	ldr	r2, [r7, #20]
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	4413      	add	r3, r2
 801dcd4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801dcd6:	697a      	ldr	r2, [r7, #20]
 801dcd8:	683b      	ldr	r3, [r7, #0]
 801dcda:	429a      	cmp	r2, r3
 801dcdc:	da02      	bge.n	801dce4 <ip_reass_remove_oldest_datagram+0xb4>
 801dcde:	693b      	ldr	r3, [r7, #16]
 801dce0:	2b01      	cmp	r3, #1
 801dce2:	dcac      	bgt.n	801dc3e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801dce4:	697b      	ldr	r3, [r7, #20]
}
 801dce6:	4618      	mov	r0, r3
 801dce8:	3728      	adds	r7, #40	@ 0x28
 801dcea:	46bd      	mov	sp, r7
 801dcec:	bd80      	pop	{r7, pc}
 801dcee:	bf00      	nop
 801dcf0:	200254fc 	.word	0x200254fc

0801dcf4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801dcf4:	b580      	push	{r7, lr}
 801dcf6:	b084      	sub	sp, #16
 801dcf8:	af00      	add	r7, sp, #0
 801dcfa:	6078      	str	r0, [r7, #4]
 801dcfc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801dcfe:	2004      	movs	r0, #4
 801dd00:	f7f6 f90a 	bl	8013f18 <memp_malloc>
 801dd04:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d116      	bne.n	801dd3a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801dd0c:	6839      	ldr	r1, [r7, #0]
 801dd0e:	6878      	ldr	r0, [r7, #4]
 801dd10:	f7ff ff8e 	bl	801dc30 <ip_reass_remove_oldest_datagram>
 801dd14:	4602      	mov	r2, r0
 801dd16:	683b      	ldr	r3, [r7, #0]
 801dd18:	4293      	cmp	r3, r2
 801dd1a:	dc03      	bgt.n	801dd24 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801dd1c:	2004      	movs	r0, #4
 801dd1e:	f7f6 f8fb 	bl	8013f18 <memp_malloc>
 801dd22:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801dd24:	68fb      	ldr	r3, [r7, #12]
 801dd26:	2b00      	cmp	r3, #0
 801dd28:	d107      	bne.n	801dd3a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801dd2a:	4b11      	ldr	r3, [pc, #68]	@ (801dd70 <ip_reass_enqueue_new_datagram+0x7c>)
 801dd2c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801dd2e:	3301      	adds	r3, #1
 801dd30:	b29a      	uxth	r2, r3
 801dd32:	4b0f      	ldr	r3, [pc, #60]	@ (801dd70 <ip_reass_enqueue_new_datagram+0x7c>)
 801dd34:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801dd36:	2300      	movs	r3, #0
 801dd38:	e016      	b.n	801dd68 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801dd3a:	2220      	movs	r2, #32
 801dd3c:	2100      	movs	r1, #0
 801dd3e:	68f8      	ldr	r0, [r7, #12]
 801dd40:	f002 fc04 	bl	802054c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	220f      	movs	r2, #15
 801dd48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801dd4a:	4b0a      	ldr	r3, [pc, #40]	@ (801dd74 <ip_reass_enqueue_new_datagram+0x80>)
 801dd4c:	681a      	ldr	r2, [r3, #0]
 801dd4e:	68fb      	ldr	r3, [r7, #12]
 801dd50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801dd52:	4a08      	ldr	r2, [pc, #32]	@ (801dd74 <ip_reass_enqueue_new_datagram+0x80>)
 801dd54:	68fb      	ldr	r3, [r7, #12]
 801dd56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801dd58:	68fb      	ldr	r3, [r7, #12]
 801dd5a:	3308      	adds	r3, #8
 801dd5c:	2214      	movs	r2, #20
 801dd5e:	6879      	ldr	r1, [r7, #4]
 801dd60:	4618      	mov	r0, r3
 801dd62:	f002 fcc6 	bl	80206f2 <memcpy>
  return ipr;
 801dd66:	68fb      	ldr	r3, [r7, #12]
}
 801dd68:	4618      	mov	r0, r3
 801dd6a:	3710      	adds	r7, #16
 801dd6c:	46bd      	mov	sp, r7
 801dd6e:	bd80      	pop	{r7, pc}
 801dd70:	200252ac 	.word	0x200252ac
 801dd74:	200254fc 	.word	0x200254fc

0801dd78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801dd78:	b580      	push	{r7, lr}
 801dd7a:	b082      	sub	sp, #8
 801dd7c:	af00      	add	r7, sp, #0
 801dd7e:	6078      	str	r0, [r7, #4]
 801dd80:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801dd82:	4b10      	ldr	r3, [pc, #64]	@ (801ddc4 <ip_reass_dequeue_datagram+0x4c>)
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	687a      	ldr	r2, [r7, #4]
 801dd88:	429a      	cmp	r2, r3
 801dd8a:	d104      	bne.n	801dd96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801dd8c:	687b      	ldr	r3, [r7, #4]
 801dd8e:	681b      	ldr	r3, [r3, #0]
 801dd90:	4a0c      	ldr	r2, [pc, #48]	@ (801ddc4 <ip_reass_dequeue_datagram+0x4c>)
 801dd92:	6013      	str	r3, [r2, #0]
 801dd94:	e00d      	b.n	801ddb2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801dd96:	683b      	ldr	r3, [r7, #0]
 801dd98:	2b00      	cmp	r3, #0
 801dd9a:	d106      	bne.n	801ddaa <ip_reass_dequeue_datagram+0x32>
 801dd9c:	4b0a      	ldr	r3, [pc, #40]	@ (801ddc8 <ip_reass_dequeue_datagram+0x50>)
 801dd9e:	f240 1245 	movw	r2, #325	@ 0x145
 801dda2:	490a      	ldr	r1, [pc, #40]	@ (801ddcc <ip_reass_dequeue_datagram+0x54>)
 801dda4:	480a      	ldr	r0, [pc, #40]	@ (801ddd0 <ip_reass_dequeue_datagram+0x58>)
 801dda6:	f002 fa79 	bl	802029c <iprintf>
    prev->next = ipr->next;
 801ddaa:	687b      	ldr	r3, [r7, #4]
 801ddac:	681a      	ldr	r2, [r3, #0]
 801ddae:	683b      	ldr	r3, [r7, #0]
 801ddb0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ddb2:	6879      	ldr	r1, [r7, #4]
 801ddb4:	2004      	movs	r0, #4
 801ddb6:	f7f6 f92b 	bl	8014010 <memp_free>
}
 801ddba:	bf00      	nop
 801ddbc:	3708      	adds	r7, #8
 801ddbe:	46bd      	mov	sp, r7
 801ddc0:	bd80      	pop	{r7, pc}
 801ddc2:	bf00      	nop
 801ddc4:	200254fc 	.word	0x200254fc
 801ddc8:	080245a0 	.word	0x080245a0
 801ddcc:	08024668 	.word	0x08024668
 801ddd0:	080245e8 	.word	0x080245e8

0801ddd4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ddd4:	b580      	push	{r7, lr}
 801ddd6:	b08c      	sub	sp, #48	@ 0x30
 801ddd8:	af00      	add	r7, sp, #0
 801ddda:	60f8      	str	r0, [r7, #12]
 801dddc:	60b9      	str	r1, [r7, #8]
 801ddde:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801dde0:	2300      	movs	r3, #0
 801dde2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801dde4:	2301      	movs	r3, #1
 801dde6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801dde8:	68bb      	ldr	r3, [r7, #8]
 801ddea:	685b      	ldr	r3, [r3, #4]
 801ddec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ddee:	69fb      	ldr	r3, [r7, #28]
 801ddf0:	885b      	ldrh	r3, [r3, #2]
 801ddf2:	b29b      	uxth	r3, r3
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	f7f5 faf1 	bl	80133dc <lwip_htons>
 801ddfa:	4603      	mov	r3, r0
 801ddfc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ddfe:	69fb      	ldr	r3, [r7, #28]
 801de00:	781b      	ldrb	r3, [r3, #0]
 801de02:	f003 030f 	and.w	r3, r3, #15
 801de06:	b2db      	uxtb	r3, r3
 801de08:	009b      	lsls	r3, r3, #2
 801de0a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801de0c:	7e7b      	ldrb	r3, [r7, #25]
 801de0e:	b29b      	uxth	r3, r3
 801de10:	8b7a      	ldrh	r2, [r7, #26]
 801de12:	429a      	cmp	r2, r3
 801de14:	d202      	bcs.n	801de1c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801de16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801de1a:	e135      	b.n	801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801de1c:	7e7b      	ldrb	r3, [r7, #25]
 801de1e:	b29b      	uxth	r3, r3
 801de20:	8b7a      	ldrh	r2, [r7, #26]
 801de22:	1ad3      	subs	r3, r2, r3
 801de24:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801de26:	69fb      	ldr	r3, [r7, #28]
 801de28:	88db      	ldrh	r3, [r3, #6]
 801de2a:	b29b      	uxth	r3, r3
 801de2c:	4618      	mov	r0, r3
 801de2e:	f7f5 fad5 	bl	80133dc <lwip_htons>
 801de32:	4603      	mov	r3, r0
 801de34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801de38:	b29b      	uxth	r3, r3
 801de3a:	00db      	lsls	r3, r3, #3
 801de3c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801de3e:	68bb      	ldr	r3, [r7, #8]
 801de40:	685b      	ldr	r3, [r3, #4]
 801de42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801de44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de46:	2200      	movs	r2, #0
 801de48:	701a      	strb	r2, [r3, #0]
 801de4a:	2200      	movs	r2, #0
 801de4c:	705a      	strb	r2, [r3, #1]
 801de4e:	2200      	movs	r2, #0
 801de50:	709a      	strb	r2, [r3, #2]
 801de52:	2200      	movs	r2, #0
 801de54:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801de56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de58:	8afa      	ldrh	r2, [r7, #22]
 801de5a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801de5c:	8afa      	ldrh	r2, [r7, #22]
 801de5e:	8b7b      	ldrh	r3, [r7, #26]
 801de60:	4413      	add	r3, r2
 801de62:	b29a      	uxth	r2, r3
 801de64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de66:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801de68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de6a:	88db      	ldrh	r3, [r3, #6]
 801de6c:	b29b      	uxth	r3, r3
 801de6e:	8afa      	ldrh	r2, [r7, #22]
 801de70:	429a      	cmp	r2, r3
 801de72:	d902      	bls.n	801de7a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801de74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801de78:	e106      	b.n	801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	685b      	ldr	r3, [r3, #4]
 801de7e:	627b      	str	r3, [r7, #36]	@ 0x24
 801de80:	e068      	b.n	801df54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801de82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801de84:	685b      	ldr	r3, [r3, #4]
 801de86:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801de88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de8a:	889b      	ldrh	r3, [r3, #4]
 801de8c:	b29a      	uxth	r2, r3
 801de8e:	693b      	ldr	r3, [r7, #16]
 801de90:	889b      	ldrh	r3, [r3, #4]
 801de92:	b29b      	uxth	r3, r3
 801de94:	429a      	cmp	r2, r3
 801de96:	d235      	bcs.n	801df04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801de98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801de9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801de9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801de9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801dea0:	2b00      	cmp	r3, #0
 801dea2:	d020      	beq.n	801dee6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801dea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dea6:	889b      	ldrh	r3, [r3, #4]
 801dea8:	b29a      	uxth	r2, r3
 801deaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801deac:	88db      	ldrh	r3, [r3, #6]
 801deae:	b29b      	uxth	r3, r3
 801deb0:	429a      	cmp	r2, r3
 801deb2:	d307      	bcc.n	801dec4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801deb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801deb6:	88db      	ldrh	r3, [r3, #6]
 801deb8:	b29a      	uxth	r2, r3
 801deba:	693b      	ldr	r3, [r7, #16]
 801debc:	889b      	ldrh	r3, [r3, #4]
 801debe:	b29b      	uxth	r3, r3
 801dec0:	429a      	cmp	r2, r3
 801dec2:	d902      	bls.n	801deca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801dec4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dec8:	e0de      	b.n	801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801deca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801decc:	68ba      	ldr	r2, [r7, #8]
 801dece:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ded0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ded2:	88db      	ldrh	r3, [r3, #6]
 801ded4:	b29a      	uxth	r2, r3
 801ded6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ded8:	889b      	ldrh	r3, [r3, #4]
 801deda:	b29b      	uxth	r3, r3
 801dedc:	429a      	cmp	r2, r3
 801dede:	d03d      	beq.n	801df5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801dee0:	2300      	movs	r3, #0
 801dee2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801dee4:	e03a      	b.n	801df5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801dee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dee8:	88db      	ldrh	r3, [r3, #6]
 801deea:	b29a      	uxth	r2, r3
 801deec:	693b      	ldr	r3, [r7, #16]
 801deee:	889b      	ldrh	r3, [r3, #4]
 801def0:	b29b      	uxth	r3, r3
 801def2:	429a      	cmp	r2, r3
 801def4:	d902      	bls.n	801defc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801def6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801defa:	e0c5      	b.n	801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801defc:	68fb      	ldr	r3, [r7, #12]
 801defe:	68ba      	ldr	r2, [r7, #8]
 801df00:	605a      	str	r2, [r3, #4]
      break;
 801df02:	e02b      	b.n	801df5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801df04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df06:	889b      	ldrh	r3, [r3, #4]
 801df08:	b29a      	uxth	r2, r3
 801df0a:	693b      	ldr	r3, [r7, #16]
 801df0c:	889b      	ldrh	r3, [r3, #4]
 801df0e:	b29b      	uxth	r3, r3
 801df10:	429a      	cmp	r2, r3
 801df12:	d102      	bne.n	801df1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801df14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801df18:	e0b6      	b.n	801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801df1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df1c:	889b      	ldrh	r3, [r3, #4]
 801df1e:	b29a      	uxth	r2, r3
 801df20:	693b      	ldr	r3, [r7, #16]
 801df22:	88db      	ldrh	r3, [r3, #6]
 801df24:	b29b      	uxth	r3, r3
 801df26:	429a      	cmp	r2, r3
 801df28:	d202      	bcs.n	801df30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801df2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801df2e:	e0ab      	b.n	801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801df30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df32:	2b00      	cmp	r3, #0
 801df34:	d009      	beq.n	801df4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801df36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df38:	88db      	ldrh	r3, [r3, #6]
 801df3a:	b29a      	uxth	r2, r3
 801df3c:	693b      	ldr	r3, [r7, #16]
 801df3e:	889b      	ldrh	r3, [r3, #4]
 801df40:	b29b      	uxth	r3, r3
 801df42:	429a      	cmp	r2, r3
 801df44:	d001      	beq.n	801df4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801df46:	2300      	movs	r3, #0
 801df48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801df4a:	693b      	ldr	r3, [r7, #16]
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801df50:	693b      	ldr	r3, [r7, #16]
 801df52:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801df54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df56:	2b00      	cmp	r3, #0
 801df58:	d193      	bne.n	801de82 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801df5a:	e000      	b.n	801df5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801df5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801df5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801df60:	2b00      	cmp	r3, #0
 801df62:	d12d      	bne.n	801dfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801df64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df66:	2b00      	cmp	r3, #0
 801df68:	d01c      	beq.n	801dfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801df6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df6c:	88db      	ldrh	r3, [r3, #6]
 801df6e:	b29a      	uxth	r2, r3
 801df70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df72:	889b      	ldrh	r3, [r3, #4]
 801df74:	b29b      	uxth	r3, r3
 801df76:	429a      	cmp	r2, r3
 801df78:	d906      	bls.n	801df88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801df7a:	4b45      	ldr	r3, [pc, #276]	@ (801e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801df7c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801df80:	4944      	ldr	r1, [pc, #272]	@ (801e094 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801df82:	4845      	ldr	r0, [pc, #276]	@ (801e098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801df84:	f002 f98a 	bl	802029c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801df88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df8a:	68ba      	ldr	r2, [r7, #8]
 801df8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801df8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801df90:	88db      	ldrh	r3, [r3, #6]
 801df92:	b29a      	uxth	r2, r3
 801df94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801df96:	889b      	ldrh	r3, [r3, #4]
 801df98:	b29b      	uxth	r3, r3
 801df9a:	429a      	cmp	r2, r3
 801df9c:	d010      	beq.n	801dfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801df9e:	2300      	movs	r3, #0
 801dfa0:	623b      	str	r3, [r7, #32]
 801dfa2:	e00d      	b.n	801dfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801dfa4:	68fb      	ldr	r3, [r7, #12]
 801dfa6:	685b      	ldr	r3, [r3, #4]
 801dfa8:	2b00      	cmp	r3, #0
 801dfaa:	d006      	beq.n	801dfba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801dfac:	4b38      	ldr	r3, [pc, #224]	@ (801e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801dfae:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801dfb2:	493a      	ldr	r1, [pc, #232]	@ (801e09c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801dfb4:	4838      	ldr	r0, [pc, #224]	@ (801e098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801dfb6:	f002 f971 	bl	802029c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	68ba      	ldr	r2, [r7, #8]
 801dfbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	2b00      	cmp	r3, #0
 801dfc4:	d105      	bne.n	801dfd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801dfc6:	68fb      	ldr	r3, [r7, #12]
 801dfc8:	7f9b      	ldrb	r3, [r3, #30]
 801dfca:	f003 0301 	and.w	r3, r3, #1
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d059      	beq.n	801e086 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801dfd2:	6a3b      	ldr	r3, [r7, #32]
 801dfd4:	2b00      	cmp	r3, #0
 801dfd6:	d04f      	beq.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801dfd8:	68fb      	ldr	r3, [r7, #12]
 801dfda:	685b      	ldr	r3, [r3, #4]
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d006      	beq.n	801dfee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	685b      	ldr	r3, [r3, #4]
 801dfe4:	685b      	ldr	r3, [r3, #4]
 801dfe6:	889b      	ldrh	r3, [r3, #4]
 801dfe8:	b29b      	uxth	r3, r3
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	d002      	beq.n	801dff4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801dfee:	2300      	movs	r3, #0
 801dff0:	623b      	str	r3, [r7, #32]
 801dff2:	e041      	b.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801dff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dff6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801dff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801dffa:	681b      	ldr	r3, [r3, #0]
 801dffc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801dffe:	e012      	b.n	801e026 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801e000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e002:	685b      	ldr	r3, [r3, #4]
 801e004:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801e006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e008:	88db      	ldrh	r3, [r3, #6]
 801e00a:	b29a      	uxth	r2, r3
 801e00c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e00e:	889b      	ldrh	r3, [r3, #4]
 801e010:	b29b      	uxth	r3, r3
 801e012:	429a      	cmp	r2, r3
 801e014:	d002      	beq.n	801e01c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801e016:	2300      	movs	r3, #0
 801e018:	623b      	str	r3, [r7, #32]
            break;
 801e01a:	e007      	b.n	801e02c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801e01c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e01e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801e020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801e026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d1e9      	bne.n	801e000 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801e02c:	6a3b      	ldr	r3, [r7, #32]
 801e02e:	2b00      	cmp	r3, #0
 801e030:	d022      	beq.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	685b      	ldr	r3, [r3, #4]
 801e036:	2b00      	cmp	r3, #0
 801e038:	d106      	bne.n	801e048 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801e03a:	4b15      	ldr	r3, [pc, #84]	@ (801e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e03c:	f240 12df 	movw	r2, #479	@ 0x1df
 801e040:	4917      	ldr	r1, [pc, #92]	@ (801e0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e042:	4815      	ldr	r0, [pc, #84]	@ (801e098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e044:	f002 f92a 	bl	802029c <iprintf>
          LWIP_ASSERT("sanity check",
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	685b      	ldr	r3, [r3, #4]
 801e04c:	685b      	ldr	r3, [r3, #4]
 801e04e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801e050:	429a      	cmp	r2, r3
 801e052:	d106      	bne.n	801e062 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801e054:	4b0e      	ldr	r3, [pc, #56]	@ (801e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e056:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801e05a:	4911      	ldr	r1, [pc, #68]	@ (801e0a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801e05c:	480e      	ldr	r0, [pc, #56]	@ (801e098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e05e:	f002 f91d 	bl	802029c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801e062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e064:	681b      	ldr	r3, [r3, #0]
 801e066:	2b00      	cmp	r3, #0
 801e068:	d006      	beq.n	801e078 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801e06a:	4b09      	ldr	r3, [pc, #36]	@ (801e090 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801e06c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801e070:	490c      	ldr	r1, [pc, #48]	@ (801e0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801e072:	4809      	ldr	r0, [pc, #36]	@ (801e098 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801e074:	f002 f912 	bl	802029c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801e078:	6a3b      	ldr	r3, [r7, #32]
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	bf14      	ite	ne
 801e07e:	2301      	movne	r3, #1
 801e080:	2300      	moveq	r3, #0
 801e082:	b2db      	uxtb	r3, r3
 801e084:	e000      	b.n	801e088 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801e086:	2300      	movs	r3, #0
}
 801e088:	4618      	mov	r0, r3
 801e08a:	3730      	adds	r7, #48	@ 0x30
 801e08c:	46bd      	mov	sp, r7
 801e08e:	bd80      	pop	{r7, pc}
 801e090:	080245a0 	.word	0x080245a0
 801e094:	08024684 	.word	0x08024684
 801e098:	080245e8 	.word	0x080245e8
 801e09c:	080246a4 	.word	0x080246a4
 801e0a0:	080246dc 	.word	0x080246dc
 801e0a4:	080246ec 	.word	0x080246ec

0801e0a8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801e0a8:	b580      	push	{r7, lr}
 801e0aa:	b08e      	sub	sp, #56	@ 0x38
 801e0ac:	af00      	add	r7, sp, #0
 801e0ae:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801e0b0:	4b9d      	ldr	r3, [pc, #628]	@ (801e328 <ip4_reass+0x280>)
 801e0b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801e0b4:	3301      	adds	r3, #1
 801e0b6:	b29a      	uxth	r2, r3
 801e0b8:	4b9b      	ldr	r3, [pc, #620]	@ (801e328 <ip4_reass+0x280>)
 801e0ba:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801e0bc:	687b      	ldr	r3, [r7, #4]
 801e0be:	685b      	ldr	r3, [r3, #4]
 801e0c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0c4:	781b      	ldrb	r3, [r3, #0]
 801e0c6:	f003 030f 	and.w	r3, r3, #15
 801e0ca:	b2db      	uxtb	r3, r3
 801e0cc:	009b      	lsls	r3, r3, #2
 801e0ce:	b2db      	uxtb	r3, r3
 801e0d0:	2b14      	cmp	r3, #20
 801e0d2:	d008      	beq.n	801e0e6 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801e0d4:	4b94      	ldr	r3, [pc, #592]	@ (801e328 <ip4_reass+0x280>)
 801e0d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801e0da:	3301      	adds	r3, #1
 801e0dc:	b29a      	uxth	r2, r3
 801e0de:	4b92      	ldr	r3, [pc, #584]	@ (801e328 <ip4_reass+0x280>)
 801e0e0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801e0e4:	e17c      	b.n	801e3e0 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801e0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e0e8:	88db      	ldrh	r3, [r3, #6]
 801e0ea:	b29b      	uxth	r3, r3
 801e0ec:	4618      	mov	r0, r3
 801e0ee:	f7f5 f975 	bl	80133dc <lwip_htons>
 801e0f2:	4603      	mov	r3, r0
 801e0f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e0f8:	b29b      	uxth	r3, r3
 801e0fa:	00db      	lsls	r3, r3, #3
 801e0fc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801e0fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e100:	885b      	ldrh	r3, [r3, #2]
 801e102:	b29b      	uxth	r3, r3
 801e104:	4618      	mov	r0, r3
 801e106:	f7f5 f969 	bl	80133dc <lwip_htons>
 801e10a:	4603      	mov	r3, r0
 801e10c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801e10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e110:	781b      	ldrb	r3, [r3, #0]
 801e112:	f003 030f 	and.w	r3, r3, #15
 801e116:	b2db      	uxtb	r3, r3
 801e118:	009b      	lsls	r3, r3, #2
 801e11a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801e11e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e122:	b29b      	uxth	r3, r3
 801e124:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e126:	429a      	cmp	r2, r3
 801e128:	f0c0 8157 	bcc.w	801e3da <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801e12c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801e130:	b29b      	uxth	r3, r3
 801e132:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801e134:	1ad3      	subs	r3, r2, r3
 801e136:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801e138:	6878      	ldr	r0, [r7, #4]
 801e13a:	f7f6 fe9b 	bl	8014e74 <pbuf_clen>
 801e13e:	4603      	mov	r3, r0
 801e140:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801e142:	4b7a      	ldr	r3, [pc, #488]	@ (801e32c <ip4_reass+0x284>)
 801e144:	881b      	ldrh	r3, [r3, #0]
 801e146:	461a      	mov	r2, r3
 801e148:	8c3b      	ldrh	r3, [r7, #32]
 801e14a:	4413      	add	r3, r2
 801e14c:	2b0a      	cmp	r3, #10
 801e14e:	dd15      	ble.n	801e17c <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e150:	8c3b      	ldrh	r3, [r7, #32]
 801e152:	4619      	mov	r1, r3
 801e154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e156:	f7ff fd6b 	bl	801dc30 <ip_reass_remove_oldest_datagram>
 801e15a:	4603      	mov	r3, r0
 801e15c:	2b00      	cmp	r3, #0
 801e15e:	d006      	beq.n	801e16e <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801e160:	4b72      	ldr	r3, [pc, #456]	@ (801e32c <ip4_reass+0x284>)
 801e162:	881b      	ldrh	r3, [r3, #0]
 801e164:	461a      	mov	r2, r3
 801e166:	8c3b      	ldrh	r3, [r7, #32]
 801e168:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801e16a:	2b0a      	cmp	r3, #10
 801e16c:	dd06      	ble.n	801e17c <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801e16e:	4b6e      	ldr	r3, [pc, #440]	@ (801e328 <ip4_reass+0x280>)
 801e170:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801e172:	3301      	adds	r3, #1
 801e174:	b29a      	uxth	r2, r3
 801e176:	4b6c      	ldr	r3, [pc, #432]	@ (801e328 <ip4_reass+0x280>)
 801e178:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801e17a:	e131      	b.n	801e3e0 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e17c:	4b6c      	ldr	r3, [pc, #432]	@ (801e330 <ip4_reass+0x288>)
 801e17e:	681b      	ldr	r3, [r3, #0]
 801e180:	633b      	str	r3, [r7, #48]	@ 0x30
 801e182:	e01e      	b.n	801e1c2 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801e184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e186:	695a      	ldr	r2, [r3, #20]
 801e188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e18a:	68db      	ldr	r3, [r3, #12]
 801e18c:	429a      	cmp	r2, r3
 801e18e:	d115      	bne.n	801e1bc <ip4_reass+0x114>
 801e190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e192:	699a      	ldr	r2, [r3, #24]
 801e194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e196:	691b      	ldr	r3, [r3, #16]
 801e198:	429a      	cmp	r2, r3
 801e19a:	d10f      	bne.n	801e1bc <ip4_reass+0x114>
 801e19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e19e:	899a      	ldrh	r2, [r3, #12]
 801e1a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e1a2:	889b      	ldrh	r3, [r3, #4]
 801e1a4:	b29b      	uxth	r3, r3
 801e1a6:	429a      	cmp	r2, r3
 801e1a8:	d108      	bne.n	801e1bc <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801e1aa:	4b5f      	ldr	r3, [pc, #380]	@ (801e328 <ip4_reass+0x280>)
 801e1ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801e1b0:	3301      	adds	r3, #1
 801e1b2:	b29a      	uxth	r2, r3
 801e1b4:	4b5c      	ldr	r3, [pc, #368]	@ (801e328 <ip4_reass+0x280>)
 801e1b6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801e1ba:	e005      	b.n	801e1c8 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801e1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	633b      	str	r3, [r7, #48]	@ 0x30
 801e1c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1c4:	2b00      	cmp	r3, #0
 801e1c6:	d1dd      	bne.n	801e184 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801e1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1ca:	2b00      	cmp	r3, #0
 801e1cc:	d109      	bne.n	801e1e2 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801e1ce:	8c3b      	ldrh	r3, [r7, #32]
 801e1d0:	4619      	mov	r1, r3
 801e1d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e1d4:	f7ff fd8e 	bl	801dcf4 <ip_reass_enqueue_new_datagram>
 801e1d8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801e1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d11c      	bne.n	801e21a <ip4_reass+0x172>
      goto nullreturn;
 801e1e0:	e0fe      	b.n	801e3e0 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e1e4:	88db      	ldrh	r3, [r3, #6]
 801e1e6:	b29b      	uxth	r3, r3
 801e1e8:	4618      	mov	r0, r3
 801e1ea:	f7f5 f8f7 	bl	80133dc <lwip_htons>
 801e1ee:	4603      	mov	r3, r0
 801e1f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d110      	bne.n	801e21a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801e1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e1fa:	89db      	ldrh	r3, [r3, #14]
 801e1fc:	4618      	mov	r0, r3
 801e1fe:	f7f5 f8ed 	bl	80133dc <lwip_htons>
 801e202:	4603      	mov	r3, r0
 801e204:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d006      	beq.n	801e21a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801e20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e20e:	3308      	adds	r3, #8
 801e210:	2214      	movs	r2, #20
 801e212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801e214:	4618      	mov	r0, r3
 801e216:	f002 fa6c 	bl	80206f2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801e21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e21c:	88db      	ldrh	r3, [r3, #6]
 801e21e:	b29b      	uxth	r3, r3
 801e220:	f003 0320 	and.w	r3, r3, #32
 801e224:	2b00      	cmp	r3, #0
 801e226:	bf0c      	ite	eq
 801e228:	2301      	moveq	r3, #1
 801e22a:	2300      	movne	r3, #0
 801e22c:	b2db      	uxtb	r3, r3
 801e22e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801e230:	69fb      	ldr	r3, [r7, #28]
 801e232:	2b00      	cmp	r3, #0
 801e234:	d00e      	beq.n	801e254 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801e236:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e238:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e23a:	4413      	add	r3, r2
 801e23c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801e23e:	8b7a      	ldrh	r2, [r7, #26]
 801e240:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801e242:	429a      	cmp	r2, r3
 801e244:	f0c0 80a7 	bcc.w	801e396 <ip4_reass+0x2ee>
 801e248:	8b7b      	ldrh	r3, [r7, #26]
 801e24a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801e24e:	4293      	cmp	r3, r2
 801e250:	f200 80a1 	bhi.w	801e396 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801e254:	69fa      	ldr	r2, [r7, #28]
 801e256:	6879      	ldr	r1, [r7, #4]
 801e258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e25a:	f7ff fdbb 	bl	801ddd4 <ip_reass_chain_frag_into_datagram_and_validate>
 801e25e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801e260:	697b      	ldr	r3, [r7, #20]
 801e262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e266:	f000 8098 	beq.w	801e39a <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801e26a:	4b30      	ldr	r3, [pc, #192]	@ (801e32c <ip4_reass+0x284>)
 801e26c:	881a      	ldrh	r2, [r3, #0]
 801e26e:	8c3b      	ldrh	r3, [r7, #32]
 801e270:	4413      	add	r3, r2
 801e272:	b29a      	uxth	r2, r3
 801e274:	4b2d      	ldr	r3, [pc, #180]	@ (801e32c <ip4_reass+0x284>)
 801e276:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801e278:	69fb      	ldr	r3, [r7, #28]
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	d00d      	beq.n	801e29a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801e27e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801e280:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801e282:	4413      	add	r3, r2
 801e284:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801e286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e288:	8a7a      	ldrh	r2, [r7, #18]
 801e28a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801e28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e28e:	7f9b      	ldrb	r3, [r3, #30]
 801e290:	f043 0301 	orr.w	r3, r3, #1
 801e294:	b2da      	uxtb	r2, r3
 801e296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e298:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801e29a:	697b      	ldr	r3, [r7, #20]
 801e29c:	2b01      	cmp	r3, #1
 801e29e:	d178      	bne.n	801e392 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801e2a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2a2:	8b9b      	ldrh	r3, [r3, #28]
 801e2a4:	3314      	adds	r3, #20
 801e2a6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801e2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2aa:	685b      	ldr	r3, [r3, #4]
 801e2ac:	685b      	ldr	r3, [r3, #4]
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801e2b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2b4:	685b      	ldr	r3, [r3, #4]
 801e2b6:	685b      	ldr	r3, [r3, #4]
 801e2b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801e2ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2bc:	3308      	adds	r3, #8
 801e2be:	2214      	movs	r2, #20
 801e2c0:	4619      	mov	r1, r3
 801e2c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801e2c4:	f002 fa15 	bl	80206f2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801e2c8:	8a3b      	ldrh	r3, [r7, #16]
 801e2ca:	4618      	mov	r0, r3
 801e2cc:	f7f5 f886 	bl	80133dc <lwip_htons>
 801e2d0:	4603      	mov	r3, r0
 801e2d2:	461a      	mov	r2, r3
 801e2d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2d6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801e2d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2da:	2200      	movs	r2, #0
 801e2dc:	719a      	strb	r2, [r3, #6]
 801e2de:	2200      	movs	r2, #0
 801e2e0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801e2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e2e4:	2200      	movs	r2, #0
 801e2e6:	729a      	strb	r2, [r3, #10]
 801e2e8:	2200      	movs	r2, #0
 801e2ea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801e2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e2ee:	685b      	ldr	r3, [r3, #4]
 801e2f0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801e2f2:	e00d      	b.n	801e310 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801e2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e2f6:	685b      	ldr	r3, [r3, #4]
 801e2f8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801e2fa:	2114      	movs	r1, #20
 801e2fc:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801e2fe:	f7f6 fca5 	bl	8014c4c <pbuf_remove_header>
      pbuf_cat(p, r);
 801e302:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e304:	6878      	ldr	r0, [r7, #4]
 801e306:	f7f6 fdf5 	bl	8014ef4 <pbuf_cat>
      r = iprh->next_pbuf;
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801e310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e312:	2b00      	cmp	r3, #0
 801e314:	d1ee      	bne.n	801e2f4 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801e316:	4b06      	ldr	r3, [pc, #24]	@ (801e330 <ip4_reass+0x288>)
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e31c:	429a      	cmp	r2, r3
 801e31e:	d109      	bne.n	801e334 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801e320:	2300      	movs	r3, #0
 801e322:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e324:	e017      	b.n	801e356 <ip4_reass+0x2ae>
 801e326:	bf00      	nop
 801e328:	200252ac 	.word	0x200252ac
 801e32c:	20025500 	.word	0x20025500
 801e330:	200254fc 	.word	0x200254fc
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e334:	4b31      	ldr	r3, [pc, #196]	@ (801e3fc <ip4_reass+0x354>)
 801e336:	681b      	ldr	r3, [r3, #0]
 801e338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e33a:	e007      	b.n	801e34c <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801e33c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e342:	429a      	cmp	r2, r3
 801e344:	d006      	beq.n	801e354 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801e346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e34c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d1f4      	bne.n	801e33c <ip4_reass+0x294>
 801e352:	e000      	b.n	801e356 <ip4_reass+0x2ae>
          break;
 801e354:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801e356:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801e358:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e35a:	f7ff fd0d 	bl	801dd78 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801e35e:	6878      	ldr	r0, [r7, #4]
 801e360:	f7f6 fd88 	bl	8014e74 <pbuf_clen>
 801e364:	4603      	mov	r3, r0
 801e366:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801e368:	4b25      	ldr	r3, [pc, #148]	@ (801e400 <ip4_reass+0x358>)
 801e36a:	881b      	ldrh	r3, [r3, #0]
 801e36c:	8c3a      	ldrh	r2, [r7, #32]
 801e36e:	429a      	cmp	r2, r3
 801e370:	d906      	bls.n	801e380 <ip4_reass+0x2d8>
 801e372:	4b24      	ldr	r3, [pc, #144]	@ (801e404 <ip4_reass+0x35c>)
 801e374:	f240 229b 	movw	r2, #667	@ 0x29b
 801e378:	4923      	ldr	r1, [pc, #140]	@ (801e408 <ip4_reass+0x360>)
 801e37a:	4824      	ldr	r0, [pc, #144]	@ (801e40c <ip4_reass+0x364>)
 801e37c:	f001 ff8e 	bl	802029c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801e380:	4b1f      	ldr	r3, [pc, #124]	@ (801e400 <ip4_reass+0x358>)
 801e382:	881a      	ldrh	r2, [r3, #0]
 801e384:	8c3b      	ldrh	r3, [r7, #32]
 801e386:	1ad3      	subs	r3, r2, r3
 801e388:	b29a      	uxth	r2, r3
 801e38a:	4b1d      	ldr	r3, [pc, #116]	@ (801e400 <ip4_reass+0x358>)
 801e38c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	e030      	b.n	801e3f4 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801e392:	2300      	movs	r3, #0
 801e394:	e02e      	b.n	801e3f4 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801e396:	bf00      	nop
 801e398:	e000      	b.n	801e39c <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801e39a:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801e39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d106      	bne.n	801e3b0 <ip4_reass+0x308>
 801e3a2:	4b18      	ldr	r3, [pc, #96]	@ (801e404 <ip4_reass+0x35c>)
 801e3a4:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801e3a8:	4919      	ldr	r1, [pc, #100]	@ (801e410 <ip4_reass+0x368>)
 801e3aa:	4818      	ldr	r0, [pc, #96]	@ (801e40c <ip4_reass+0x364>)
 801e3ac:	f001 ff76 	bl	802029c <iprintf>
  if (ipr->p == NULL) {
 801e3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e3b2:	685b      	ldr	r3, [r3, #4]
 801e3b4:	2b00      	cmp	r3, #0
 801e3b6:	d112      	bne.n	801e3de <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801e3b8:	4b10      	ldr	r3, [pc, #64]	@ (801e3fc <ip4_reass+0x354>)
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801e3be:	429a      	cmp	r2, r3
 801e3c0:	d006      	beq.n	801e3d0 <ip4_reass+0x328>
 801e3c2:	4b10      	ldr	r3, [pc, #64]	@ (801e404 <ip4_reass+0x35c>)
 801e3c4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801e3c8:	4912      	ldr	r1, [pc, #72]	@ (801e414 <ip4_reass+0x36c>)
 801e3ca:	4810      	ldr	r0, [pc, #64]	@ (801e40c <ip4_reass+0x364>)
 801e3cc:	f001 ff66 	bl	802029c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801e3d0:	2100      	movs	r1, #0
 801e3d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e3d4:	f7ff fcd0 	bl	801dd78 <ip_reass_dequeue_datagram>
 801e3d8:	e002      	b.n	801e3e0 <ip4_reass+0x338>
    goto nullreturn;
 801e3da:	bf00      	nop
 801e3dc:	e000      	b.n	801e3e0 <ip4_reass+0x338>
  }

nullreturn:
 801e3de:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801e3e0:	4b0d      	ldr	r3, [pc, #52]	@ (801e418 <ip4_reass+0x370>)
 801e3e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801e3e4:	3301      	adds	r3, #1
 801e3e6:	b29a      	uxth	r2, r3
 801e3e8:	4b0b      	ldr	r3, [pc, #44]	@ (801e418 <ip4_reass+0x370>)
 801e3ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801e3ec:	6878      	ldr	r0, [r7, #4]
 801e3ee:	f7f6 fcb3 	bl	8014d58 <pbuf_free>
  return NULL;
 801e3f2:	2300      	movs	r3, #0
}
 801e3f4:	4618      	mov	r0, r3
 801e3f6:	3738      	adds	r7, #56	@ 0x38
 801e3f8:	46bd      	mov	sp, r7
 801e3fa:	bd80      	pop	{r7, pc}
 801e3fc:	200254fc 	.word	0x200254fc
 801e400:	20025500 	.word	0x20025500
 801e404:	080245a0 	.word	0x080245a0
 801e408:	08024710 	.word	0x08024710
 801e40c:	080245e8 	.word	0x080245e8
 801e410:	0802472c 	.word	0x0802472c
 801e414:	08024738 	.word	0x08024738
 801e418:	200252ac 	.word	0x200252ac

0801e41c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801e41c:	b580      	push	{r7, lr}
 801e41e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801e420:	2005      	movs	r0, #5
 801e422:	f7f5 fd79 	bl	8013f18 <memp_malloc>
 801e426:	4603      	mov	r3, r0
}
 801e428:	4618      	mov	r0, r3
 801e42a:	bd80      	pop	{r7, pc}

0801e42c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801e42c:	b580      	push	{r7, lr}
 801e42e:	b082      	sub	sp, #8
 801e430:	af00      	add	r7, sp, #0
 801e432:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801e434:	687b      	ldr	r3, [r7, #4]
 801e436:	2b00      	cmp	r3, #0
 801e438:	d106      	bne.n	801e448 <ip_frag_free_pbuf_custom_ref+0x1c>
 801e43a:	4b07      	ldr	r3, [pc, #28]	@ (801e458 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801e43c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801e440:	4906      	ldr	r1, [pc, #24]	@ (801e45c <ip_frag_free_pbuf_custom_ref+0x30>)
 801e442:	4807      	ldr	r0, [pc, #28]	@ (801e460 <ip_frag_free_pbuf_custom_ref+0x34>)
 801e444:	f001 ff2a 	bl	802029c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801e448:	6879      	ldr	r1, [r7, #4]
 801e44a:	2005      	movs	r0, #5
 801e44c:	f7f5 fde0 	bl	8014010 <memp_free>
}
 801e450:	bf00      	nop
 801e452:	3708      	adds	r7, #8
 801e454:	46bd      	mov	sp, r7
 801e456:	bd80      	pop	{r7, pc}
 801e458:	080245a0 	.word	0x080245a0
 801e45c:	08024758 	.word	0x08024758
 801e460:	080245e8 	.word	0x080245e8

0801e464 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801e464:	b580      	push	{r7, lr}
 801e466:	b084      	sub	sp, #16
 801e468:	af00      	add	r7, sp, #0
 801e46a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801e470:	68fb      	ldr	r3, [r7, #12]
 801e472:	2b00      	cmp	r3, #0
 801e474:	d106      	bne.n	801e484 <ipfrag_free_pbuf_custom+0x20>
 801e476:	4b11      	ldr	r3, [pc, #68]	@ (801e4bc <ipfrag_free_pbuf_custom+0x58>)
 801e478:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801e47c:	4910      	ldr	r1, [pc, #64]	@ (801e4c0 <ipfrag_free_pbuf_custom+0x5c>)
 801e47e:	4811      	ldr	r0, [pc, #68]	@ (801e4c4 <ipfrag_free_pbuf_custom+0x60>)
 801e480:	f001 ff0c 	bl	802029c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801e484:	68fa      	ldr	r2, [r7, #12]
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	429a      	cmp	r2, r3
 801e48a:	d006      	beq.n	801e49a <ipfrag_free_pbuf_custom+0x36>
 801e48c:	4b0b      	ldr	r3, [pc, #44]	@ (801e4bc <ipfrag_free_pbuf_custom+0x58>)
 801e48e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801e492:	490d      	ldr	r1, [pc, #52]	@ (801e4c8 <ipfrag_free_pbuf_custom+0x64>)
 801e494:	480b      	ldr	r0, [pc, #44]	@ (801e4c4 <ipfrag_free_pbuf_custom+0x60>)
 801e496:	f001 ff01 	bl	802029c <iprintf>
  if (pcr->original != NULL) {
 801e49a:	68fb      	ldr	r3, [r7, #12]
 801e49c:	695b      	ldr	r3, [r3, #20]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d004      	beq.n	801e4ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801e4a2:	68fb      	ldr	r3, [r7, #12]
 801e4a4:	695b      	ldr	r3, [r3, #20]
 801e4a6:	4618      	mov	r0, r3
 801e4a8:	f7f6 fc56 	bl	8014d58 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801e4ac:	68f8      	ldr	r0, [r7, #12]
 801e4ae:	f7ff ffbd 	bl	801e42c <ip_frag_free_pbuf_custom_ref>
}
 801e4b2:	bf00      	nop
 801e4b4:	3710      	adds	r7, #16
 801e4b6:	46bd      	mov	sp, r7
 801e4b8:	bd80      	pop	{r7, pc}
 801e4ba:	bf00      	nop
 801e4bc:	080245a0 	.word	0x080245a0
 801e4c0:	08024764 	.word	0x08024764
 801e4c4:	080245e8 	.word	0x080245e8
 801e4c8:	08024770 	.word	0x08024770

0801e4cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801e4cc:	b580      	push	{r7, lr}
 801e4ce:	b094      	sub	sp, #80	@ 0x50
 801e4d0:	af02      	add	r7, sp, #8
 801e4d2:	60f8      	str	r0, [r7, #12]
 801e4d4:	60b9      	str	r1, [r7, #8]
 801e4d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801e4d8:	2300      	movs	r3, #0
 801e4da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801e4de:	68bb      	ldr	r3, [r7, #8]
 801e4e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e4e2:	3b14      	subs	r3, #20
 801e4e4:	2b00      	cmp	r3, #0
 801e4e6:	da00      	bge.n	801e4ea <ip4_frag+0x1e>
 801e4e8:	3307      	adds	r3, #7
 801e4ea:	10db      	asrs	r3, r3, #3
 801e4ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801e4ee:	2314      	movs	r3, #20
 801e4f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801e4f2:	68fb      	ldr	r3, [r7, #12]
 801e4f4:	685b      	ldr	r3, [r3, #4]
 801e4f6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801e4f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801e4fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801e4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e4fe:	781b      	ldrb	r3, [r3, #0]
 801e500:	f003 030f 	and.w	r3, r3, #15
 801e504:	b2db      	uxtb	r3, r3
 801e506:	009b      	lsls	r3, r3, #2
 801e508:	b2db      	uxtb	r3, r3
 801e50a:	2b14      	cmp	r3, #20
 801e50c:	d002      	beq.n	801e514 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801e50e:	f06f 0305 	mvn.w	r3, #5
 801e512:	e116      	b.n	801e742 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801e514:	68fb      	ldr	r3, [r7, #12]
 801e516:	895b      	ldrh	r3, [r3, #10]
 801e518:	2b13      	cmp	r3, #19
 801e51a:	d809      	bhi.n	801e530 <ip4_frag+0x64>
 801e51c:	4b8b      	ldr	r3, [pc, #556]	@ (801e74c <ip4_frag+0x280>)
 801e51e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801e522:	498b      	ldr	r1, [pc, #556]	@ (801e750 <ip4_frag+0x284>)
 801e524:	488b      	ldr	r0, [pc, #556]	@ (801e754 <ip4_frag+0x288>)
 801e526:	f001 feb9 	bl	802029c <iprintf>
 801e52a:	f06f 0305 	mvn.w	r3, #5
 801e52e:	e108      	b.n	801e742 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801e530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e532:	88db      	ldrh	r3, [r3, #6]
 801e534:	b29b      	uxth	r3, r3
 801e536:	4618      	mov	r0, r3
 801e538:	f7f4 ff50 	bl	80133dc <lwip_htons>
 801e53c:	4603      	mov	r3, r0
 801e53e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801e540:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e542:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e546:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801e54a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e54c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801e550:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801e552:	68fb      	ldr	r3, [r7, #12]
 801e554:	891b      	ldrh	r3, [r3, #8]
 801e556:	3b14      	subs	r3, #20
 801e558:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801e55c:	e0e7      	b.n	801e72e <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801e55e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e560:	00db      	lsls	r3, r3, #3
 801e562:	b29b      	uxth	r3, r3
 801e564:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e568:	4293      	cmp	r3, r2
 801e56a:	bf28      	it	cs
 801e56c:	4613      	movcs	r3, r2
 801e56e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801e570:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e574:	2114      	movs	r1, #20
 801e576:	200e      	movs	r0, #14
 801e578:	f7f6 f90a 	bl	8014790 <pbuf_alloc>
 801e57c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801e57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e580:	2b00      	cmp	r3, #0
 801e582:	f000 80db 	beq.w	801e73c <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801e586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e588:	895b      	ldrh	r3, [r3, #10]
 801e58a:	2b13      	cmp	r3, #19
 801e58c:	d806      	bhi.n	801e59c <ip4_frag+0xd0>
 801e58e:	4b6f      	ldr	r3, [pc, #444]	@ (801e74c <ip4_frag+0x280>)
 801e590:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801e594:	4970      	ldr	r1, [pc, #448]	@ (801e758 <ip4_frag+0x28c>)
 801e596:	486f      	ldr	r0, [pc, #444]	@ (801e754 <ip4_frag+0x288>)
 801e598:	f001 fe80 	bl	802029c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801e59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e59e:	685b      	ldr	r3, [r3, #4]
 801e5a0:	2214      	movs	r2, #20
 801e5a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801e5a4:	4618      	mov	r0, r3
 801e5a6:	f002 f8a4 	bl	80206f2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801e5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e5ac:	685b      	ldr	r3, [r3, #4]
 801e5ae:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801e5b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e5b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801e5b6:	e064      	b.n	801e682 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	895a      	ldrh	r2, [r3, #10]
 801e5bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e5be:	1ad3      	subs	r3, r2, r3
 801e5c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801e5c2:	68fb      	ldr	r3, [r7, #12]
 801e5c4:	895b      	ldrh	r3, [r3, #10]
 801e5c6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e5c8:	429a      	cmp	r2, r3
 801e5ca:	d906      	bls.n	801e5da <ip4_frag+0x10e>
 801e5cc:	4b5f      	ldr	r3, [pc, #380]	@ (801e74c <ip4_frag+0x280>)
 801e5ce:	f240 322d 	movw	r2, #813	@ 0x32d
 801e5d2:	4962      	ldr	r1, [pc, #392]	@ (801e75c <ip4_frag+0x290>)
 801e5d4:	485f      	ldr	r0, [pc, #380]	@ (801e754 <ip4_frag+0x288>)
 801e5d6:	f001 fe61 	bl	802029c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801e5da:	8bfa      	ldrh	r2, [r7, #30]
 801e5dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e5e0:	4293      	cmp	r3, r2
 801e5e2:	bf28      	it	cs
 801e5e4:	4613      	movcs	r3, r2
 801e5e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801e5ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	d105      	bne.n	801e5fe <ip4_frag+0x132>
        poff = 0;
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e5f6:	68fb      	ldr	r3, [r7, #12]
 801e5f8:	681b      	ldr	r3, [r3, #0]
 801e5fa:	60fb      	str	r3, [r7, #12]
        continue;
 801e5fc:	e041      	b.n	801e682 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801e5fe:	f7ff ff0d 	bl	801e41c <ip_frag_alloc_pbuf_custom_ref>
 801e602:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801e604:	69bb      	ldr	r3, [r7, #24]
 801e606:	2b00      	cmp	r3, #0
 801e608:	d103      	bne.n	801e612 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801e60a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e60c:	f7f6 fba4 	bl	8014d58 <pbuf_free>
        goto memerr;
 801e610:	e095      	b.n	801e73e <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e612:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801e618:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801e61a:	4413      	add	r3, r2
 801e61c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801e620:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801e624:	9201      	str	r2, [sp, #4]
 801e626:	9300      	str	r3, [sp, #0]
 801e628:	4603      	mov	r3, r0
 801e62a:	2241      	movs	r2, #65	@ 0x41
 801e62c:	2000      	movs	r0, #0
 801e62e:	f7f6 f9d9 	bl	80149e4 <pbuf_alloced_custom>
 801e632:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801e634:	697b      	ldr	r3, [r7, #20]
 801e636:	2b00      	cmp	r3, #0
 801e638:	d106      	bne.n	801e648 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801e63a:	69b8      	ldr	r0, [r7, #24]
 801e63c:	f7ff fef6 	bl	801e42c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801e640:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e642:	f7f6 fb89 	bl	8014d58 <pbuf_free>
        goto memerr;
 801e646:	e07a      	b.n	801e73e <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801e648:	68f8      	ldr	r0, [r7, #12]
 801e64a:	f7f6 fc2b 	bl	8014ea4 <pbuf_ref>
      pcr->original = p;
 801e64e:	69bb      	ldr	r3, [r7, #24]
 801e650:	68fa      	ldr	r2, [r7, #12]
 801e652:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801e654:	69bb      	ldr	r3, [r7, #24]
 801e656:	4a42      	ldr	r2, [pc, #264]	@ (801e760 <ip4_frag+0x294>)
 801e658:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801e65a:	6979      	ldr	r1, [r7, #20]
 801e65c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e65e:	f7f6 fc49 	bl	8014ef4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801e662:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801e666:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e66a:	1ad3      	subs	r3, r2, r3
 801e66c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801e670:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e674:	2b00      	cmp	r3, #0
 801e676:	d004      	beq.n	801e682 <ip4_frag+0x1b6>
        poff = 0;
 801e678:	2300      	movs	r3, #0
 801e67a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801e67c:	68fb      	ldr	r3, [r7, #12]
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801e682:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801e686:	2b00      	cmp	r3, #0
 801e688:	d196      	bne.n	801e5b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801e68a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801e68c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801e690:	4413      	add	r3, r2
 801e692:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801e694:	68bb      	ldr	r3, [r7, #8]
 801e696:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e698:	f1a3 0213 	sub.w	r2, r3, #19
 801e69c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e6a0:	429a      	cmp	r2, r3
 801e6a2:	bfcc      	ite	gt
 801e6a4:	2301      	movgt	r3, #1
 801e6a6:	2300      	movle	r3, #0
 801e6a8:	b2db      	uxtb	r3, r3
 801e6aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801e6ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801e6b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e6b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801e6b6:	6a3b      	ldr	r3, [r7, #32]
 801e6b8:	2b00      	cmp	r3, #0
 801e6ba:	d002      	beq.n	801e6c2 <ip4_frag+0x1f6>
 801e6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d003      	beq.n	801e6ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801e6c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e6c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801e6c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801e6ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801e6cc:	4618      	mov	r0, r3
 801e6ce:	f7f4 fe85 	bl	80133dc <lwip_htons>
 801e6d2:	4603      	mov	r3, r0
 801e6d4:	461a      	mov	r2, r3
 801e6d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801e6da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e6dc:	3314      	adds	r3, #20
 801e6de:	b29b      	uxth	r3, r3
 801e6e0:	4618      	mov	r0, r3
 801e6e2:	f7f4 fe7b 	bl	80133dc <lwip_htons>
 801e6e6:	4603      	mov	r3, r0
 801e6e8:	461a      	mov	r2, r3
 801e6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801e6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e6f0:	2200      	movs	r2, #0
 801e6f2:	729a      	strb	r2, [r3, #10]
 801e6f4:	2200      	movs	r2, #0
 801e6f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801e6f8:	68bb      	ldr	r3, [r7, #8]
 801e6fa:	695b      	ldr	r3, [r3, #20]
 801e6fc:	687a      	ldr	r2, [r7, #4]
 801e6fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801e700:	68b8      	ldr	r0, [r7, #8]
 801e702:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801e704:	4b17      	ldr	r3, [pc, #92]	@ (801e764 <ip4_frag+0x298>)
 801e706:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801e708:	3301      	adds	r3, #1
 801e70a:	b29a      	uxth	r2, r3
 801e70c:	4b15      	ldr	r3, [pc, #84]	@ (801e764 <ip4_frag+0x298>)
 801e70e:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801e710:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801e712:	f7f6 fb21 	bl	8014d58 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801e716:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801e71a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801e71c:	1ad3      	subs	r3, r2, r3
 801e71e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801e722:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801e726:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801e728:	4413      	add	r3, r2
 801e72a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801e72e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801e732:	2b00      	cmp	r3, #0
 801e734:	f47f af13 	bne.w	801e55e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801e738:	2300      	movs	r3, #0
 801e73a:	e002      	b.n	801e742 <ip4_frag+0x276>
      goto memerr;
 801e73c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801e73e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801e742:	4618      	mov	r0, r3
 801e744:	3748      	adds	r7, #72	@ 0x48
 801e746:	46bd      	mov	sp, r7
 801e748:	bd80      	pop	{r7, pc}
 801e74a:	bf00      	nop
 801e74c:	080245a0 	.word	0x080245a0
 801e750:	0802477c 	.word	0x0802477c
 801e754:	080245e8 	.word	0x080245e8
 801e758:	08024798 	.word	0x08024798
 801e75c:	080247b8 	.word	0x080247b8
 801e760:	0801e465 	.word	0x0801e465
 801e764:	200252ac 	.word	0x200252ac

0801e768 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801e768:	b580      	push	{r7, lr}
 801e76a:	b086      	sub	sp, #24
 801e76c:	af00      	add	r7, sp, #0
 801e76e:	6078      	str	r0, [r7, #4]
 801e770:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801e772:	230e      	movs	r3, #14
 801e774:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	895b      	ldrh	r3, [r3, #10]
 801e77a:	2b0e      	cmp	r3, #14
 801e77c:	d80c      	bhi.n	801e798 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801e77e:	4b51      	ldr	r3, [pc, #324]	@ (801e8c4 <ethernet_input+0x15c>)
 801e780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e782:	3301      	adds	r3, #1
 801e784:	b29a      	uxth	r2, r3
 801e786:	4b4f      	ldr	r3, [pc, #316]	@ (801e8c4 <ethernet_input+0x15c>)
 801e788:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801e78a:	4b4e      	ldr	r3, [pc, #312]	@ (801e8c4 <ethernet_input+0x15c>)
 801e78c:	8bdb      	ldrh	r3, [r3, #30]
 801e78e:	3301      	adds	r3, #1
 801e790:	b29a      	uxth	r2, r3
 801e792:	4b4c      	ldr	r3, [pc, #304]	@ (801e8c4 <ethernet_input+0x15c>)
 801e794:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801e796:	e08d      	b.n	801e8b4 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	7bdb      	ldrb	r3, [r3, #15]
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	d106      	bne.n	801e7ae <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801e7a0:	683b      	ldr	r3, [r7, #0]
 801e7a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801e7a6:	3301      	adds	r3, #1
 801e7a8:	b2da      	uxtb	r2, r3
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	685b      	ldr	r3, [r3, #4]
 801e7b2:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801e7b4:	693b      	ldr	r3, [r7, #16]
 801e7b6:	7b1a      	ldrb	r2, [r3, #12]
 801e7b8:	7b5b      	ldrb	r3, [r3, #13]
 801e7ba:	021b      	lsls	r3, r3, #8
 801e7bc:	4313      	orrs	r3, r2
 801e7be:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801e7c0:	693b      	ldr	r3, [r7, #16]
 801e7c2:	781b      	ldrb	r3, [r3, #0]
 801e7c4:	f003 0301 	and.w	r3, r3, #1
 801e7c8:	2b00      	cmp	r3, #0
 801e7ca:	d023      	beq.n	801e814 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801e7cc:	693b      	ldr	r3, [r7, #16]
 801e7ce:	781b      	ldrb	r3, [r3, #0]
 801e7d0:	2b01      	cmp	r3, #1
 801e7d2:	d10f      	bne.n	801e7f4 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e7d4:	693b      	ldr	r3, [r7, #16]
 801e7d6:	785b      	ldrb	r3, [r3, #1]
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d11b      	bne.n	801e814 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801e7dc:	693b      	ldr	r3, [r7, #16]
 801e7de:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801e7e0:	2b5e      	cmp	r3, #94	@ 0x5e
 801e7e2:	d117      	bne.n	801e814 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	7b5b      	ldrb	r3, [r3, #13]
 801e7e8:	f043 0310 	orr.w	r3, r3, #16
 801e7ec:	b2da      	uxtb	r2, r3
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	735a      	strb	r2, [r3, #13]
 801e7f2:	e00f      	b.n	801e814 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801e7f4:	693b      	ldr	r3, [r7, #16]
 801e7f6:	2206      	movs	r2, #6
 801e7f8:	4933      	ldr	r1, [pc, #204]	@ (801e8c8 <ethernet_input+0x160>)
 801e7fa:	4618      	mov	r0, r3
 801e7fc:	f001 fe96 	bl	802052c <memcmp>
 801e800:	4603      	mov	r3, r0
 801e802:	2b00      	cmp	r3, #0
 801e804:	d106      	bne.n	801e814 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	7b5b      	ldrb	r3, [r3, #13]
 801e80a:	f043 0308 	orr.w	r3, r3, #8
 801e80e:	b2da      	uxtb	r2, r3
 801e810:	687b      	ldr	r3, [r7, #4]
 801e812:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801e814:	89fb      	ldrh	r3, [r7, #14]
 801e816:	2b08      	cmp	r3, #8
 801e818:	d003      	beq.n	801e822 <ethernet_input+0xba>
 801e81a:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801e81e:	d014      	beq.n	801e84a <ethernet_input+0xe2>
 801e820:	e034      	b.n	801e88c <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e822:	683b      	ldr	r3, [r7, #0]
 801e824:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e828:	f003 0308 	and.w	r3, r3, #8
 801e82c:	2b00      	cmp	r3, #0
 801e82e:	d03c      	beq.n	801e8aa <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e830:	8afb      	ldrh	r3, [r7, #22]
 801e832:	4619      	mov	r1, r3
 801e834:	6878      	ldr	r0, [r7, #4]
 801e836:	f7f6 fa09 	bl	8014c4c <pbuf_remove_header>
 801e83a:	4603      	mov	r3, r0
 801e83c:	2b00      	cmp	r3, #0
 801e83e:	d136      	bne.n	801e8ae <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801e840:	6839      	ldr	r1, [r7, #0]
 801e842:	6878      	ldr	r0, [r7, #4]
 801e844:	f7fe fe7e 	bl	801d544 <ip4_input>
      }
      break;
 801e848:	e02d      	b.n	801e8a6 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801e84a:	683b      	ldr	r3, [r7, #0]
 801e84c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e850:	f003 0308 	and.w	r3, r3, #8
 801e854:	2b00      	cmp	r3, #0
 801e856:	d02c      	beq.n	801e8b2 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801e858:	8afb      	ldrh	r3, [r7, #22]
 801e85a:	4619      	mov	r1, r3
 801e85c:	6878      	ldr	r0, [r7, #4]
 801e85e:	f7f6 f9f5 	bl	8014c4c <pbuf_remove_header>
 801e862:	4603      	mov	r3, r0
 801e864:	2b00      	cmp	r3, #0
 801e866:	d00c      	beq.n	801e882 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801e868:	4b16      	ldr	r3, [pc, #88]	@ (801e8c4 <ethernet_input+0x15c>)
 801e86a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801e86c:	3301      	adds	r3, #1
 801e86e:	b29a      	uxth	r2, r3
 801e870:	4b14      	ldr	r3, [pc, #80]	@ (801e8c4 <ethernet_input+0x15c>)
 801e872:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801e874:	4b13      	ldr	r3, [pc, #76]	@ (801e8c4 <ethernet_input+0x15c>)
 801e876:	8bdb      	ldrh	r3, [r3, #30]
 801e878:	3301      	adds	r3, #1
 801e87a:	b29a      	uxth	r2, r3
 801e87c:	4b11      	ldr	r3, [pc, #68]	@ (801e8c4 <ethernet_input+0x15c>)
 801e87e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801e880:	e018      	b.n	801e8b4 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801e882:	6839      	ldr	r1, [r7, #0]
 801e884:	6878      	ldr	r0, [r7, #4]
 801e886:	f7fd ff89 	bl	801c79c <etharp_input>
      }
      break;
 801e88a:	e00c      	b.n	801e8a6 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801e88c:	4b0d      	ldr	r3, [pc, #52]	@ (801e8c4 <ethernet_input+0x15c>)
 801e88e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801e890:	3301      	adds	r3, #1
 801e892:	b29a      	uxth	r2, r3
 801e894:	4b0b      	ldr	r3, [pc, #44]	@ (801e8c4 <ethernet_input+0x15c>)
 801e896:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801e898:	4b0a      	ldr	r3, [pc, #40]	@ (801e8c4 <ethernet_input+0x15c>)
 801e89a:	8bdb      	ldrh	r3, [r3, #30]
 801e89c:	3301      	adds	r3, #1
 801e89e:	b29a      	uxth	r2, r3
 801e8a0:	4b08      	ldr	r3, [pc, #32]	@ (801e8c4 <ethernet_input+0x15c>)
 801e8a2:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801e8a4:	e006      	b.n	801e8b4 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801e8a6:	2300      	movs	r3, #0
 801e8a8:	e008      	b.n	801e8bc <ethernet_input+0x154>
        goto free_and_return;
 801e8aa:	bf00      	nop
 801e8ac:	e002      	b.n	801e8b4 <ethernet_input+0x14c>
        goto free_and_return;
 801e8ae:	bf00      	nop
 801e8b0:	e000      	b.n	801e8b4 <ethernet_input+0x14c>
        goto free_and_return;
 801e8b2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801e8b4:	6878      	ldr	r0, [r7, #4]
 801e8b6:	f7f6 fa4f 	bl	8014d58 <pbuf_free>
  return ERR_OK;
 801e8ba:	2300      	movs	r3, #0
}
 801e8bc:	4618      	mov	r0, r3
 801e8be:	3718      	adds	r7, #24
 801e8c0:	46bd      	mov	sp, r7
 801e8c2:	bd80      	pop	{r7, pc}
 801e8c4:	200252ac 	.word	0x200252ac
 801e8c8:	08024ec8 	.word	0x08024ec8

0801e8cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801e8cc:	b580      	push	{r7, lr}
 801e8ce:	b086      	sub	sp, #24
 801e8d0:	af00      	add	r7, sp, #0
 801e8d2:	60f8      	str	r0, [r7, #12]
 801e8d4:	60b9      	str	r1, [r7, #8]
 801e8d6:	607a      	str	r2, [r7, #4]
 801e8d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801e8da:	8c3b      	ldrh	r3, [r7, #32]
 801e8dc:	4618      	mov	r0, r3
 801e8de:	f7f4 fd7d 	bl	80133dc <lwip_htons>
 801e8e2:	4603      	mov	r3, r0
 801e8e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801e8e6:	210e      	movs	r1, #14
 801e8e8:	68b8      	ldr	r0, [r7, #8]
 801e8ea:	f7f6 f99f 	bl	8014c2c <pbuf_add_header>
 801e8ee:	4603      	mov	r3, r0
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d125      	bne.n	801e940 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801e8f4:	68bb      	ldr	r3, [r7, #8]
 801e8f6:	685b      	ldr	r3, [r3, #4]
 801e8f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801e8fa:	693b      	ldr	r3, [r7, #16]
 801e8fc:	8afa      	ldrh	r2, [r7, #22]
 801e8fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801e900:	693b      	ldr	r3, [r7, #16]
 801e902:	2206      	movs	r2, #6
 801e904:	6839      	ldr	r1, [r7, #0]
 801e906:	4618      	mov	r0, r3
 801e908:	f001 fef3 	bl	80206f2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801e90c:	693b      	ldr	r3, [r7, #16]
 801e90e:	3306      	adds	r3, #6
 801e910:	2206      	movs	r2, #6
 801e912:	6879      	ldr	r1, [r7, #4]
 801e914:	4618      	mov	r0, r3
 801e916:	f001 feec 	bl	80206f2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801e91a:	68fb      	ldr	r3, [r7, #12]
 801e91c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801e920:	2b06      	cmp	r3, #6
 801e922:	d006      	beq.n	801e932 <ethernet_output+0x66>
 801e924:	4b0d      	ldr	r3, [pc, #52]	@ (801e95c <ethernet_output+0x90>)
 801e926:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801e92a:	490d      	ldr	r1, [pc, #52]	@ (801e960 <ethernet_output+0x94>)
 801e92c:	480d      	ldr	r0, [pc, #52]	@ (801e964 <ethernet_output+0x98>)
 801e92e:	f001 fcb5 	bl	802029c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801e932:	68fb      	ldr	r3, [r7, #12]
 801e934:	699b      	ldr	r3, [r3, #24]
 801e936:	68b9      	ldr	r1, [r7, #8]
 801e938:	68f8      	ldr	r0, [r7, #12]
 801e93a:	4798      	blx	r3
 801e93c:	4603      	mov	r3, r0
 801e93e:	e008      	b.n	801e952 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801e940:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801e942:	4b09      	ldr	r3, [pc, #36]	@ (801e968 <ethernet_output+0x9c>)
 801e944:	895b      	ldrh	r3, [r3, #10]
 801e946:	3301      	adds	r3, #1
 801e948:	b29a      	uxth	r2, r3
 801e94a:	4b07      	ldr	r3, [pc, #28]	@ (801e968 <ethernet_output+0x9c>)
 801e94c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801e94e:	f06f 0301 	mvn.w	r3, #1
}
 801e952:	4618      	mov	r0, r3
 801e954:	3718      	adds	r7, #24
 801e956:	46bd      	mov	sp, r7
 801e958:	bd80      	pop	{r7, pc}
 801e95a:	bf00      	nop
 801e95c:	080247c8 	.word	0x080247c8
 801e960:	08024800 	.word	0x08024800
 801e964:	08024834 	.word	0x08024834
 801e968:	200252ac 	.word	0x200252ac

0801e96c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801e96c:	b580      	push	{r7, lr}
 801e96e:	b082      	sub	sp, #8
 801e970:	af00      	add	r7, sp, #0
 801e972:	6078      	str	r0, [r7, #4]
 801e974:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801e976:	683b      	ldr	r3, [r7, #0]
 801e978:	2200      	movs	r2, #0
 801e97a:	2104      	movs	r1, #4
 801e97c:	4618      	mov	r0, r3
 801e97e:	f7ee ffed 	bl	800d95c <osMessageQueueNew>
 801e982:	4602      	mov	r2, r0
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801e988:	4b10      	ldr	r3, [pc, #64]	@ (801e9cc <sys_mbox_new+0x60>)
 801e98a:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e98e:	3301      	adds	r3, #1
 801e990:	b29a      	uxth	r2, r3
 801e992:	4b0e      	ldr	r3, [pc, #56]	@ (801e9cc <sys_mbox_new+0x60>)
 801e994:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801e998:	4b0c      	ldr	r3, [pc, #48]	@ (801e9cc <sys_mbox_new+0x60>)
 801e99a:	f8b3 20f6 	ldrh.w	r2, [r3, #246]	@ 0xf6
 801e99e:	4b0b      	ldr	r3, [pc, #44]	@ (801e9cc <sys_mbox_new+0x60>)
 801e9a0:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801e9a4:	429a      	cmp	r2, r3
 801e9a6:	d205      	bcs.n	801e9b4 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801e9a8:	4b08      	ldr	r3, [pc, #32]	@ (801e9cc <sys_mbox_new+0x60>)
 801e9aa:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 801e9ae:	4b07      	ldr	r3, [pc, #28]	@ (801e9cc <sys_mbox_new+0x60>)
 801e9b0:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	2b00      	cmp	r3, #0
 801e9ba:	d102      	bne.n	801e9c2 <sys_mbox_new+0x56>
    return ERR_MEM;
 801e9bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801e9c0:	e000      	b.n	801e9c4 <sys_mbox_new+0x58>

  return ERR_OK;
 801e9c2:	2300      	movs	r3, #0
}
 801e9c4:	4618      	mov	r0, r3
 801e9c6:	3708      	adds	r7, #8
 801e9c8:	46bd      	mov	sp, r7
 801e9ca:	bd80      	pop	{r7, pc}
 801e9cc:	200252ac 	.word	0x200252ac

0801e9d0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801e9d0:	b580      	push	{r7, lr}
 801e9d2:	b082      	sub	sp, #8
 801e9d4:	af00      	add	r7, sp, #0
 801e9d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	4618      	mov	r0, r3
 801e9de:	f7ef f929 	bl	800dc34 <osMessageQueueGetCount>
 801e9e2:	4603      	mov	r3, r0
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	d007      	beq.n	801e9f8 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801e9e8:	4b0c      	ldr	r3, [pc, #48]	@ (801ea1c <sys_mbox_free+0x4c>)
 801e9ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801e9ee:	3301      	adds	r3, #1
 801e9f0:	b29a      	uxth	r2, r3
 801e9f2:	4b0a      	ldr	r3, [pc, #40]	@ (801ea1c <sys_mbox_free+0x4c>)
 801e9f4:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	681b      	ldr	r3, [r3, #0]
 801e9fc:	4618      	mov	r0, r3
 801e9fe:	f7ef f94b 	bl	800dc98 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801ea02:	4b06      	ldr	r3, [pc, #24]	@ (801ea1c <sys_mbox_free+0x4c>)
 801ea04:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	@ 0xf4
 801ea08:	3b01      	subs	r3, #1
 801ea0a:	b29a      	uxth	r2, r3
 801ea0c:	4b03      	ldr	r3, [pc, #12]	@ (801ea1c <sys_mbox_free+0x4c>)
 801ea0e:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
#endif /* SYS_STATS */
}
 801ea12:	bf00      	nop
 801ea14:	3708      	adds	r7, #8
 801ea16:	46bd      	mov	sp, r7
 801ea18:	bd80      	pop	{r7, pc}
 801ea1a:	bf00      	nop
 801ea1c:	200252ac 	.word	0x200252ac

0801ea20 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ea20:	b580      	push	{r7, lr}
 801ea22:	b084      	sub	sp, #16
 801ea24:	af00      	add	r7, sp, #0
 801ea26:	6078      	str	r0, [r7, #4]
 801ea28:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	6818      	ldr	r0, [r3, #0]
 801ea2e:	4639      	mov	r1, r7
 801ea30:	2300      	movs	r3, #0
 801ea32:	2200      	movs	r2, #0
 801ea34:	f7ef f818 	bl	800da68 <osMessageQueuePut>
 801ea38:	4603      	mov	r3, r0
 801ea3a:	2b00      	cmp	r3, #0
 801ea3c:	d102      	bne.n	801ea44 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ea3e:	2300      	movs	r3, #0
 801ea40:	73fb      	strb	r3, [r7, #15]
 801ea42:	e009      	b.n	801ea58 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ea44:	23ff      	movs	r3, #255	@ 0xff
 801ea46:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801ea48:	4b06      	ldr	r3, [pc, #24]	@ (801ea64 <sys_mbox_trypost+0x44>)
 801ea4a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801ea4e:	3301      	adds	r3, #1
 801ea50:	b29a      	uxth	r2, r3
 801ea52:	4b04      	ldr	r3, [pc, #16]	@ (801ea64 <sys_mbox_trypost+0x44>)
 801ea54:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
  }

  return result;
 801ea58:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ea5c:	4618      	mov	r0, r3
 801ea5e:	3710      	adds	r7, #16
 801ea60:	46bd      	mov	sp, r7
 801ea62:	bd80      	pop	{r7, pc}
 801ea64:	200252ac 	.word	0x200252ac

0801ea68 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ea68:	b580      	push	{r7, lr}
 801ea6a:	b086      	sub	sp, #24
 801ea6c:	af00      	add	r7, sp, #0
 801ea6e:	60f8      	str	r0, [r7, #12]
 801ea70:	60b9      	str	r1, [r7, #8]
 801ea72:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ea74:	f7ee fb96 	bl	800d1a4 <osKernelGetTickCount>
 801ea78:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801ea7a:	687b      	ldr	r3, [r7, #4]
 801ea7c:	2b00      	cmp	r3, #0
 801ea7e:	d013      	beq.n	801eaa8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801ea80:	68fb      	ldr	r3, [r7, #12]
 801ea82:	6818      	ldr	r0, [r3, #0]
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2200      	movs	r2, #0
 801ea88:	68b9      	ldr	r1, [r7, #8]
 801ea8a:	f7ef f861 	bl	800db50 <osMessageQueueGet>
 801ea8e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801ea90:	693b      	ldr	r3, [r7, #16]
 801ea92:	2b00      	cmp	r3, #0
 801ea94:	d105      	bne.n	801eaa2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ea96:	f7ee fb85 	bl	800d1a4 <osKernelGetTickCount>
 801ea9a:	4602      	mov	r2, r0
 801ea9c:	697b      	ldr	r3, [r7, #20]
 801ea9e:	1ad3      	subs	r3, r2, r3
 801eaa0:	e00f      	b.n	801eac2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801eaa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eaa6:	e00c      	b.n	801eac2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801eaa8:	68fb      	ldr	r3, [r7, #12]
 801eaaa:	6818      	ldr	r0, [r3, #0]
 801eaac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eab0:	2200      	movs	r2, #0
 801eab2:	68b9      	ldr	r1, [r7, #8]
 801eab4:	f7ef f84c 	bl	800db50 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801eab8:	f7ee fb74 	bl	800d1a4 <osKernelGetTickCount>
 801eabc:	4602      	mov	r2, r0
 801eabe:	697b      	ldr	r3, [r7, #20]
 801eac0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801eac2:	4618      	mov	r0, r3
 801eac4:	3718      	adds	r7, #24
 801eac6:	46bd      	mov	sp, r7
 801eac8:	bd80      	pop	{r7, pc}

0801eaca <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801eaca:	b580      	push	{r7, lr}
 801eacc:	b082      	sub	sp, #8
 801eace:	af00      	add	r7, sp, #0
 801ead0:	6078      	str	r0, [r7, #4]
 801ead2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	6818      	ldr	r0, [r3, #0]
 801ead8:	2300      	movs	r3, #0
 801eada:	2200      	movs	r2, #0
 801eadc:	6839      	ldr	r1, [r7, #0]
 801eade:	f7ef f837 	bl	800db50 <osMessageQueueGet>
 801eae2:	4603      	mov	r3, r0
 801eae4:	2b00      	cmp	r3, #0
 801eae6:	d101      	bne.n	801eaec <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801eae8:	2300      	movs	r3, #0
 801eaea:	e001      	b.n	801eaf0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801eaec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801eaf0:	4618      	mov	r0, r3
 801eaf2:	3708      	adds	r7, #8
 801eaf4:	46bd      	mov	sp, r7
 801eaf6:	bd80      	pop	{r7, pc}

0801eaf8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801eaf8:	b480      	push	{r7}
 801eafa:	b083      	sub	sp, #12
 801eafc:	af00      	add	r7, sp, #0
 801eafe:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	2b00      	cmp	r3, #0
 801eb06:	d101      	bne.n	801eb0c <sys_mbox_valid+0x14>
    return 0;
 801eb08:	2300      	movs	r3, #0
 801eb0a:	e000      	b.n	801eb0e <sys_mbox_valid+0x16>
  else
    return 1;
 801eb0c:	2301      	movs	r3, #1
}
 801eb0e:	4618      	mov	r0, r3
 801eb10:	370c      	adds	r7, #12
 801eb12:	46bd      	mov	sp, r7
 801eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb18:	4770      	bx	lr

0801eb1a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801eb1a:	b480      	push	{r7}
 801eb1c:	b083      	sub	sp, #12
 801eb1e:	af00      	add	r7, sp, #0
 801eb20:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	2200      	movs	r2, #0
 801eb26:	601a      	str	r2, [r3, #0]
}
 801eb28:	bf00      	nop
 801eb2a:	370c      	adds	r7, #12
 801eb2c:	46bd      	mov	sp, r7
 801eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb32:	4770      	bx	lr

0801eb34 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801eb34:	b580      	push	{r7, lr}
 801eb36:	b082      	sub	sp, #8
 801eb38:	af00      	add	r7, sp, #0
 801eb3a:	6078      	str	r0, [r7, #4]
 801eb3c:	460b      	mov	r3, r1
 801eb3e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801eb40:	78fb      	ldrb	r3, [r7, #3]
 801eb42:	2200      	movs	r2, #0
 801eb44:	4619      	mov	r1, r3
 801eb46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801eb4a:	f7ee fd77 	bl	800d63c <osSemaphoreNew>
 801eb4e:	4602      	mov	r2, r0
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	2b00      	cmp	r3, #0
 801eb5a:	d10a      	bne.n	801eb72 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801eb5c:	4b17      	ldr	r3, [pc, #92]	@ (801ebbc <sys_sem_new+0x88>)
 801eb5e:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801eb62:	3301      	adds	r3, #1
 801eb64:	b29a      	uxth	r2, r3
 801eb66:	4b15      	ldr	r3, [pc, #84]	@ (801ebbc <sys_sem_new+0x88>)
 801eb68:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */
    return ERR_MEM;
 801eb6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eb70:	e01f      	b.n	801ebb2 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 801eb72:	78fb      	ldrb	r3, [r7, #3]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d105      	bne.n	801eb84 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	681b      	ldr	r3, [r3, #0]
 801eb7c:	2100      	movs	r1, #0
 801eb7e:	4618      	mov	r0, r3
 801eb80:	f7ee fdf8 	bl	800d774 <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801eb84:	4b0d      	ldr	r3, [pc, #52]	@ (801ebbc <sys_sem_new+0x88>)
 801eb86:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801eb8a:	3301      	adds	r3, #1
 801eb8c:	b29a      	uxth	r2, r3
 801eb8e:	4b0b      	ldr	r3, [pc, #44]	@ (801ebbc <sys_sem_new+0x88>)
 801eb90:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801eb94:	4b09      	ldr	r3, [pc, #36]	@ (801ebbc <sys_sem_new+0x88>)
 801eb96:	f8b3 20ea 	ldrh.w	r2, [r3, #234]	@ 0xea
 801eb9a:	4b08      	ldr	r3, [pc, #32]	@ (801ebbc <sys_sem_new+0x88>)
 801eb9c:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801eba0:	429a      	cmp	r2, r3
 801eba2:	d205      	bcs.n	801ebb0 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801eba4:	4b05      	ldr	r3, [pc, #20]	@ (801ebbc <sys_sem_new+0x88>)
 801eba6:	f8b3 20e8 	ldrh.w	r2, [r3, #232]	@ 0xe8
 801ebaa:	4b04      	ldr	r3, [pc, #16]	@ (801ebbc <sys_sem_new+0x88>)
 801ebac:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801ebb0:	2300      	movs	r3, #0
}
 801ebb2:	4618      	mov	r0, r3
 801ebb4:	3708      	adds	r7, #8
 801ebb6:	46bd      	mov	sp, r7
 801ebb8:	bd80      	pop	{r7, pc}
 801ebba:	bf00      	nop
 801ebbc:	200252ac 	.word	0x200252ac

0801ebc0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ebc0:	b580      	push	{r7, lr}
 801ebc2:	b084      	sub	sp, #16
 801ebc4:	af00      	add	r7, sp, #0
 801ebc6:	6078      	str	r0, [r7, #4]
 801ebc8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801ebca:	f7ee faeb 	bl	800d1a4 <osKernelGetTickCount>
 801ebce:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801ebd0:	683b      	ldr	r3, [r7, #0]
 801ebd2:	2b00      	cmp	r3, #0
 801ebd4:	d011      	beq.n	801ebfa <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801ebd6:	687b      	ldr	r3, [r7, #4]
 801ebd8:	681b      	ldr	r3, [r3, #0]
 801ebda:	6839      	ldr	r1, [r7, #0]
 801ebdc:	4618      	mov	r0, r3
 801ebde:	f7ee fdc9 	bl	800d774 <osSemaphoreAcquire>
 801ebe2:	4603      	mov	r3, r0
 801ebe4:	2b00      	cmp	r3, #0
 801ebe6:	d105      	bne.n	801ebf4 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801ebe8:	f7ee fadc 	bl	800d1a4 <osKernelGetTickCount>
 801ebec:	4602      	mov	r2, r0
 801ebee:	68fb      	ldr	r3, [r7, #12]
 801ebf0:	1ad3      	subs	r3, r2, r3
 801ebf2:	e012      	b.n	801ec1a <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ebf4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ebf8:	e00f      	b.n	801ec1a <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801ebfa:	bf00      	nop
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ec04:	4618      	mov	r0, r3
 801ec06:	f7ee fdb5 	bl	800d774 <osSemaphoreAcquire>
 801ec0a:	4603      	mov	r3, r0
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d1f5      	bne.n	801ebfc <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801ec10:	f7ee fac8 	bl	800d1a4 <osKernelGetTickCount>
 801ec14:	4602      	mov	r2, r0
 801ec16:	68fb      	ldr	r3, [r7, #12]
 801ec18:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801ec1a:	4618      	mov	r0, r3
 801ec1c:	3710      	adds	r7, #16
 801ec1e:	46bd      	mov	sp, r7
 801ec20:	bd80      	pop	{r7, pc}

0801ec22 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801ec22:	b580      	push	{r7, lr}
 801ec24:	b082      	sub	sp, #8
 801ec26:	af00      	add	r7, sp, #0
 801ec28:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	4618      	mov	r0, r3
 801ec30:	f7ee fe06 	bl	800d840 <osSemaphoreRelease>
}
 801ec34:	bf00      	nop
 801ec36:	3708      	adds	r7, #8
 801ec38:	46bd      	mov	sp, r7
 801ec3a:	bd80      	pop	{r7, pc}

0801ec3c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801ec3c:	b580      	push	{r7, lr}
 801ec3e:	b082      	sub	sp, #8
 801ec40:	af00      	add	r7, sp, #0
 801ec42:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801ec44:	4b08      	ldr	r3, [pc, #32]	@ (801ec68 <sys_sem_free+0x2c>)
 801ec46:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 801ec4a:	3b01      	subs	r3, #1
 801ec4c:	b29a      	uxth	r2, r3
 801ec4e:	4b06      	ldr	r3, [pc, #24]	@ (801ec68 <sys_sem_free+0x2c>)
 801ec50:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	681b      	ldr	r3, [r3, #0]
 801ec58:	4618      	mov	r0, r3
 801ec5a:	f7ee fe49 	bl	800d8f0 <osSemaphoreDelete>
}
 801ec5e:	bf00      	nop
 801ec60:	3708      	adds	r7, #8
 801ec62:	46bd      	mov	sp, r7
 801ec64:	bd80      	pop	{r7, pc}
 801ec66:	bf00      	nop
 801ec68:	200252ac 	.word	0x200252ac

0801ec6c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801ec6c:	b480      	push	{r7}
 801ec6e:	b083      	sub	sp, #12
 801ec70:	af00      	add	r7, sp, #0
 801ec72:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801ec74:	687b      	ldr	r3, [r7, #4]
 801ec76:	681b      	ldr	r3, [r3, #0]
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d101      	bne.n	801ec80 <sys_sem_valid+0x14>
    return 0;
 801ec7c:	2300      	movs	r3, #0
 801ec7e:	e000      	b.n	801ec82 <sys_sem_valid+0x16>
  else
    return 1;
 801ec80:	2301      	movs	r3, #1
}
 801ec82:	4618      	mov	r0, r3
 801ec84:	370c      	adds	r7, #12
 801ec86:	46bd      	mov	sp, r7
 801ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec8c:	4770      	bx	lr

0801ec8e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ec8e:	b480      	push	{r7}
 801ec90:	b083      	sub	sp, #12
 801ec92:	af00      	add	r7, sp, #0
 801ec94:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	2200      	movs	r2, #0
 801ec9a:	601a      	str	r2, [r3, #0]
}
 801ec9c:	bf00      	nop
 801ec9e:	370c      	adds	r7, #12
 801eca0:	46bd      	mov	sp, r7
 801eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eca6:	4770      	bx	lr

0801eca8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801eca8:	b580      	push	{r7, lr}
 801ecaa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801ecac:	2000      	movs	r0, #0
 801ecae:	f7ee fb7d 	bl	800d3ac <osMutexNew>
 801ecb2:	4603      	mov	r3, r0
 801ecb4:	4a01      	ldr	r2, [pc, #4]	@ (801ecbc <sys_init+0x14>)
 801ecb6:	6013      	str	r3, [r2, #0]
#endif
}
 801ecb8:	bf00      	nop
 801ecba:	bd80      	pop	{r7, pc}
 801ecbc:	20025504 	.word	0x20025504

0801ecc0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ecc0:	b580      	push	{r7, lr}
 801ecc2:	b082      	sub	sp, #8
 801ecc4:	af00      	add	r7, sp, #0
 801ecc6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801ecc8:	2000      	movs	r0, #0
 801ecca:	f7ee fb6f 	bl	800d3ac <osMutexNew>
 801ecce:	4602      	mov	r2, r0
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801ecd4:	687b      	ldr	r3, [r7, #4]
 801ecd6:	681b      	ldr	r3, [r3, #0]
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d10a      	bne.n	801ecf2 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801ecdc:	4b12      	ldr	r3, [pc, #72]	@ (801ed28 <sys_mutex_new+0x68>)
 801ecde:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801ece2:	3301      	adds	r3, #1
 801ece4:	b29a      	uxth	r2, r3
 801ece6:	4b10      	ldr	r3, [pc, #64]	@ (801ed28 <sys_mutex_new+0x68>)
 801ece8:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
#endif /* SYS_STATS */
    return ERR_MEM;
 801ecec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ecf0:	e016      	b.n	801ed20 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801ecf2:	4b0d      	ldr	r3, [pc, #52]	@ (801ed28 <sys_mutex_new+0x68>)
 801ecf4:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 801ecf8:	3301      	adds	r3, #1
 801ecfa:	b29a      	uxth	r2, r3
 801ecfc:	4b0a      	ldr	r3, [pc, #40]	@ (801ed28 <sys_mutex_new+0x68>)
 801ecfe:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801ed02:	4b09      	ldr	r3, [pc, #36]	@ (801ed28 <sys_mutex_new+0x68>)
 801ed04:	f8b3 20f0 	ldrh.w	r2, [r3, #240]	@ 0xf0
 801ed08:	4b07      	ldr	r3, [pc, #28]	@ (801ed28 <sys_mutex_new+0x68>)
 801ed0a:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 801ed0e:	429a      	cmp	r2, r3
 801ed10:	d205      	bcs.n	801ed1e <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801ed12:	4b05      	ldr	r3, [pc, #20]	@ (801ed28 <sys_mutex_new+0x68>)
 801ed14:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 801ed18:	4b03      	ldr	r3, [pc, #12]	@ (801ed28 <sys_mutex_new+0x68>)
 801ed1a:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ed1e:	2300      	movs	r3, #0
}
 801ed20:	4618      	mov	r0, r3
 801ed22:	3708      	adds	r7, #8
 801ed24:	46bd      	mov	sp, r7
 801ed26:	bd80      	pop	{r7, pc}
 801ed28:	200252ac 	.word	0x200252ac

0801ed2c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801ed2c:	b580      	push	{r7, lr}
 801ed2e:	b082      	sub	sp, #8
 801ed30:	af00      	add	r7, sp, #0
 801ed32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801ed34:	687b      	ldr	r3, [r7, #4]
 801ed36:	681b      	ldr	r3, [r3, #0]
 801ed38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801ed3c:	4618      	mov	r0, r3
 801ed3e:	f7ee fbcf 	bl	800d4e0 <osMutexAcquire>
#endif
}
 801ed42:	bf00      	nop
 801ed44:	3708      	adds	r7, #8
 801ed46:	46bd      	mov	sp, r7
 801ed48:	bd80      	pop	{r7, pc}

0801ed4a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801ed4a:	b580      	push	{r7, lr}
 801ed4c:	b082      	sub	sp, #8
 801ed4e:	af00      	add	r7, sp, #0
 801ed50:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	681b      	ldr	r3, [r3, #0]
 801ed56:	4618      	mov	r0, r3
 801ed58:	f7ee fc20 	bl	800d59c <osMutexRelease>
}
 801ed5c:	bf00      	nop
 801ed5e:	3708      	adds	r7, #8
 801ed60:	46bd      	mov	sp, r7
 801ed62:	bd80      	pop	{r7, pc}

0801ed64 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801ed64:	b580      	push	{r7, lr}
 801ed66:	b08e      	sub	sp, #56	@ 0x38
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	60f8      	str	r0, [r7, #12]
 801ed6c:	60b9      	str	r1, [r7, #8]
 801ed6e:	607a      	str	r2, [r7, #4]
 801ed70:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801ed72:	f107 0314 	add.w	r3, r7, #20
 801ed76:	2224      	movs	r2, #36	@ 0x24
 801ed78:	2100      	movs	r1, #0
 801ed7a:	4618      	mov	r0, r3
 801ed7c:	f001 fbe6 	bl	802054c <memset>
 801ed80:	68fb      	ldr	r3, [r7, #12]
 801ed82:	617b      	str	r3, [r7, #20]
 801ed84:	683b      	ldr	r3, [r7, #0]
 801ed86:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ed88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801ed8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801ed8c:	f107 0314 	add.w	r3, r7, #20
 801ed90:	461a      	mov	r2, r3
 801ed92:	6879      	ldr	r1, [r7, #4]
 801ed94:	68b8      	ldr	r0, [r7, #8]
 801ed96:	f7ee fa2d 	bl	800d1f4 <osThreadNew>
 801ed9a:	4603      	mov	r3, r0
#endif
}
 801ed9c:	4618      	mov	r0, r3
 801ed9e:	3738      	adds	r7, #56	@ 0x38
 801eda0:	46bd      	mov	sp, r7
 801eda2:	bd80      	pop	{r7, pc}

0801eda4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801eda4:	b580      	push	{r7, lr}
 801eda6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801eda8:	4b04      	ldr	r3, [pc, #16]	@ (801edbc <sys_arch_protect+0x18>)
 801edaa:	681b      	ldr	r3, [r3, #0]
 801edac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801edb0:	4618      	mov	r0, r3
 801edb2:	f7ee fb95 	bl	800d4e0 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801edb6:	2301      	movs	r3, #1
}
 801edb8:	4618      	mov	r0, r3
 801edba:	bd80      	pop	{r7, pc}
 801edbc:	20025504 	.word	0x20025504

0801edc0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801edc0:	b580      	push	{r7, lr}
 801edc2:	b082      	sub	sp, #8
 801edc4:	af00      	add	r7, sp, #0
 801edc6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801edc8:	4b04      	ldr	r3, [pc, #16]	@ (801eddc <sys_arch_unprotect+0x1c>)
 801edca:	681b      	ldr	r3, [r3, #0]
 801edcc:	4618      	mov	r0, r3
 801edce:	f7ee fbe5 	bl	800d59c <osMutexRelease>
}
 801edd2:	bf00      	nop
 801edd4:	3708      	adds	r7, #8
 801edd6:	46bd      	mov	sp, r7
 801edd8:	bd80      	pop	{r7, pc}
 801edda:	bf00      	nop
 801eddc:	20025504 	.word	0x20025504

0801ede0 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801ede0:	b580      	push	{r7, lr}
 801ede2:	b0ca      	sub	sp, #296	@ 0x128
 801ede4:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;
	osStatus_t status;

	adcReadySem = osSemaphoreNew(1, 0, NULL);
 801ede6:	2200      	movs	r2, #0
 801ede8:	2100      	movs	r1, #0
 801edea:	2001      	movs	r0, #1
 801edec:	f7ee fc26 	bl	800d63c <osSemaphoreNew>
 801edf0:	4603      	mov	r3, r0
 801edf2:	4a37      	ldr	r2, [pc, #220]	@ (801eed0 <AdcTestTask+0xf0>)
 801edf4:	6013      	str	r3, [r2, #0]

	while (1)
	{
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801edf6:	4b37      	ldr	r3, [pc, #220]	@ (801eed4 <AdcTestTask+0xf4>)
 801edf8:	6818      	ldr	r0, [r3, #0]
 801edfa:	f107 0110 	add.w	r1, r7, #16
 801edfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ee02:	2200      	movs	r2, #0
 801ee04:	f7ee fea4 	bl	800db50 <osMessageQueueGet>
 801ee08:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 801ee0c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ee10:	2b00      	cmp	r3, #0
 801ee12:	d14a      	bne.n	801eeaa <AdcTestTask+0xca>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801ee14:	2300      	movs	r3, #0
 801ee16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ee1a:	e00d      	b.n	801ee38 <AdcTestTask+0x58>
			{
				result = ADC_Test_Perform();
 801ee1c:	f000 f860 	bl	801eee0 <ADC_Test_Perform>
 801ee20:	4603      	mov	r3, r0
 801ee22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801ee26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee2a:	2bff      	cmp	r3, #255	@ 0xff
 801ee2c:	d00e      	beq.n	801ee4c <AdcTestTask+0x6c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801ee2e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801ee32:	3301      	adds	r3, #1
 801ee34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801ee38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ee40:	7b1b      	ldrb	r3, [r3, #12]
 801ee42:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801ee46:	429a      	cmp	r2, r3
 801ee48:	d3e8      	bcc.n	801ee1c <AdcTestTask+0x3c>
 801ee4a:	e000      	b.n	801ee4e <AdcTestTask+0x6e>
					break;
 801ee4c:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801ee4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ee56:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801ee5a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801ee5e:	6812      	ldr	r2, [r2, #0]
 801ee60:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801ee62:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee66:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ee6a:	889a      	ldrh	r2, [r3, #4]
 801ee6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee70:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ee74:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801ee76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801ee7e:	689a      	ldr	r2, [r3, #8]
 801ee80:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee84:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ee88:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801ee8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801ee8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801ee92:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801ee96:	731a      	strb	r2, [r3, #12]
#ifdef PRINT_TESTS_DEBUG
		    printf("ADC test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801ee98:	4b0f      	ldr	r3, [pc, #60]	@ (801eed8 <AdcTestTask+0xf8>)
 801ee9a:	6818      	ldr	r0, [r3, #0]
 801ee9c:	4639      	mov	r1, r7
 801ee9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eea2:	2200      	movs	r2, #0
 801eea4:	f7ee fde0 	bl	800da68 <osMessageQueuePut>
 801eea8:	e7a5      	b.n	801edf6 <AdcTestTask+0x16>
		}
		else if (status == osErrorTimeout)
 801eeaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801eeae:	f113 0f02 	cmn.w	r3, #2
 801eeb2:	d103      	bne.n	801eebc <AdcTestTask+0xdc>
		{
			osDelay(1);
 801eeb4:	2001      	movs	r0, #1
 801eeb6:	f7ee fa4b 	bl	800d350 <osDelay>
 801eeba:	e79c      	b.n	801edf6 <AdcTestTask+0x16>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 801eebc:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801eec0:	4806      	ldr	r0, [pc, #24]	@ (801eedc <AdcTestTask+0xfc>)
 801eec2:	f001 f9eb 	bl	802029c <iprintf>
			osDelay(1);
 801eec6:	2001      	movs	r0, #1
 801eec8:	f7ee fa42 	bl	800d350 <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, osWaitForever);
 801eecc:	e793      	b.n	801edf6 <AdcTestTask+0x16>
 801eece:	bf00      	nop
 801eed0:	20025508 	.word	0x20025508
 801eed4:	200002ec 	.word	0x200002ec
 801eed8:	200002dc 	.word	0x200002dc
 801eedc:	0802485c 	.word	0x0802485c

0801eee0 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 801eee0:	b580      	push	{r7, lr}
 801eee2:	b082      	sub	sp, #8
 801eee4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801eee6:	2201      	movs	r2, #1
 801eee8:	4911      	ldr	r1, [pc, #68]	@ (801ef30 <ADC_Test_Perform+0x50>)
 801eeea:	4812      	ldr	r0, [pc, #72]	@ (801ef34 <ADC_Test_Perform+0x54>)
 801eeec:	f7e3 fab4 	bl	8002458 <HAL_ADC_Start_DMA>
 801eef0:	4603      	mov	r3, r0
 801eef2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801eef4:	79fb      	ldrb	r3, [r7, #7]
 801eef6:	2b00      	cmp	r3, #0
 801eef8:	d001      	beq.n	801eefe <ADC_Test_Perform+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
#endif
		return TEST_FAILED;
 801eefa:	23ff      	movs	r3, #255	@ 0xff
 801eefc:	e013      	b.n	801ef26 <ADC_Test_Perform+0x46>
	}

	if (osSemaphoreAcquire(adcReadySem, 10) != osOK) {
 801eefe:	4b0e      	ldr	r3, [pc, #56]	@ (801ef38 <ADC_Test_Perform+0x58>)
 801ef00:	681b      	ldr	r3, [r3, #0]
 801ef02:	210a      	movs	r1, #10
 801ef04:	4618      	mov	r0, r3
 801ef06:	f7ee fc35 	bl	800d774 <osSemaphoreAcquire>
 801ef0a:	4603      	mov	r3, r0
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	d001      	beq.n	801ef14 <ADC_Test_Perform+0x34>
#ifdef PRINT_TESTS_DEBUG
		printf("ADC semaphore timeout\n");
#endif
		return TEST_FAILED;
 801ef10:	23ff      	movs	r3, #255	@ 0xff
 801ef12:	e008      	b.n	801ef26 <ADC_Test_Perform+0x46>

#ifdef PRINT_TESTS_DEBUG2
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801ef14:	4b06      	ldr	r3, [pc, #24]	@ (801ef30 <ADC_Test_Perform+0x50>)
 801ef16:	881b      	ldrh	r3, [r3, #0]
 801ef18:	f640 7236 	movw	r2, #3894	@ 0xf36
 801ef1c:	4293      	cmp	r3, r2
 801ef1e:	d901      	bls.n	801ef24 <ADC_Test_Perform+0x44>
 801ef20:	2301      	movs	r3, #1
 801ef22:	e000      	b.n	801ef26 <ADC_Test_Perform+0x46>

#ifdef PRINT_TESTS_DEBUG
	else printf("bad adc value = %d\n",adc_buf[0]);
#endif

	return TEST_FAILED;
 801ef24:	23ff      	movs	r3, #255	@ 0xff
}
 801ef26:	4618      	mov	r0, r3
 801ef28:	3708      	adds	r7, #8
 801ef2a:	46bd      	mov	sp, r7
 801ef2c:	bd80      	pop	{r7, pc}
 801ef2e:	bf00      	nop
 801ef30:	2002550c 	.word	0x2002550c
 801ef34:	200001e8 	.word	0x200001e8
 801ef38:	20025508 	.word	0x20025508

0801ef3c <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801ef3c:	b580      	push	{r7, lr}
 801ef3e:	b082      	sub	sp, #8
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(adcReadySem);
 801ef44:	4b08      	ldr	r3, [pc, #32]	@ (801ef68 <HAL_ADC_ConvCpltCallback+0x2c>)
 801ef46:	681b      	ldr	r3, [r3, #0]
 801ef48:	4618      	mov	r0, r3
 801ef4a:	f7ee fc79 	bl	800d840 <osSemaphoreRelease>
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801ef4e:	4807      	ldr	r0, [pc, #28]	@ (801ef6c <HAL_ADC_ConvCpltCallback+0x30>)
 801ef50:	f7e3 fb80 	bl	8002654 <HAL_ADC_Stop_DMA>
 801ef54:	4603      	mov	r3, r0
 801ef56:	2b00      	cmp	r3, #0
 801ef58:	d001      	beq.n	801ef5e <HAL_ADC_ConvCpltCallback+0x22>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
#endif
		Error_Handler();
 801ef5a:	f7e2 f94d 	bl	80011f8 <Error_Handler>
	}
}
 801ef5e:	bf00      	nop
 801ef60:	3708      	adds	r7, #8
 801ef62:	46bd      	mov	sp, r7
 801ef64:	bd80      	pop	{r7, pc}
 801ef66:	bf00      	nop
 801ef68:	20025508 	.word	0x20025508
 801ef6c:	200001e8 	.word	0x200001e8

0801ef70 <TestDispatcherTask>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcherTask(void)
{
 801ef70:	b580      	push	{r7, lr}
 801ef72:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801ef76:	af00      	add	r7, sp, #0
	while(1)
	{
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801ef78:	4b53      	ldr	r3, [pc, #332]	@ (801f0c8 <TestDispatcherTask+0x158>)
 801ef7a:	6818      	ldr	r0, [r3, #0]
 801ef7c:	4639      	mov	r1, r7
 801ef7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ef82:	2200      	movs	r2, #0
 801ef84:	f7ee fde4 	bl	800db50 <osMessageQueueGet>
 801ef88:	4603      	mov	r3, r0
 801ef8a:	2b00      	cmp	r3, #0
 801ef8c:	d1f4      	bne.n	801ef78 <TestDispatcherTask+0x8>
		{
			// load test_data
			test_data.addr = in_msg.addr;
 801ef8e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ef92:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801ef96:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801ef9a:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801ef9e:	6812      	ldr	r2, [r2, #0]
 801efa0:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801efa2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efa6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801efaa:	889a      	ldrh	r2, [r3, #4]
 801efac:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efb0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801efb4:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801efb6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efba:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801efbe:	689a      	ldr	r2, [r3, #8]
 801efc0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efc4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801efc8:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801efca:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efce:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801efd2:	7b5a      	ldrb	r2, [r3, #13]
 801efd4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efd8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801efdc:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801efde:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efe2:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801efe6:	7b9a      	ldrb	r2, [r3, #14]
 801efe8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801efec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801eff0:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801eff2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801eff6:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801effa:	7b9b      	ldrb	r3, [r3, #14]
 801effc:	461a      	mov	r2, r3
 801effe:	463b      	mov	r3, r7
 801f000:	f103 010f 	add.w	r1, r3, #15
 801f004:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801f008:	330e      	adds	r3, #14
 801f00a:	4618      	mov	r0, r3
 801f00c:	f001 fb71 	bl	80206f2 <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801f010:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f014:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f018:	7b1b      	ldrb	r3, [r3, #12]
 801f01a:	f003 0302 	and.w	r3, r3, #2
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d008      	beq.n	801f034 <TestDispatcherTask+0xc4>
			{
				osMessageQueuePut(uartQueueHandle, &test_data, 0, osWaitForever);
 801f022:	4b2a      	ldr	r3, [pc, #168]	@ (801f0cc <TestDispatcherTask+0x15c>)
 801f024:	6818      	ldr	r0, [r3, #0]
 801f026:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f02a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f02e:	2200      	movs	r2, #0
 801f030:	f7ee fd1a 	bl	800da68 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_I2C)
 801f034:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f038:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f03c:	7b1b      	ldrb	r3, [r3, #12]
 801f03e:	f003 0308 	and.w	r3, r3, #8
 801f042:	2b00      	cmp	r3, #0
 801f044:	d008      	beq.n	801f058 <TestDispatcherTask+0xe8>
			{
				osMessageQueuePut(i2cQueueHandle, &test_data, 0, osWaitForever);
 801f046:	4b22      	ldr	r3, [pc, #136]	@ (801f0d0 <TestDispatcherTask+0x160>)
 801f048:	6818      	ldr	r0, [r3, #0]
 801f04a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f04e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f052:	2200      	movs	r2, #0
 801f054:	f7ee fd08 	bl	800da68 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_SPI)
 801f058:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f05c:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f060:	7b1b      	ldrb	r3, [r3, #12]
 801f062:	f003 0304 	and.w	r3, r3, #4
 801f066:	2b00      	cmp	r3, #0
 801f068:	d008      	beq.n	801f07c <TestDispatcherTask+0x10c>
			{
				osMessageQueuePut(spiQueueHandle, &test_data, 0, osWaitForever);
 801f06a:	4b1a      	ldr	r3, [pc, #104]	@ (801f0d4 <TestDispatcherTask+0x164>)
 801f06c:	6818      	ldr	r0, [r3, #0]
 801f06e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f072:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f076:	2200      	movs	r2, #0
 801f078:	f7ee fcf6 	bl	800da68 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_ADC)
 801f07c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f080:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f084:	7b1b      	ldrb	r3, [r3, #12]
 801f086:	f003 0310 	and.w	r3, r3, #16
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d008      	beq.n	801f0a0 <TestDispatcherTask+0x130>
			{
				osMessageQueuePut(adcQueueHandle, &test_data, 0, osWaitForever);
 801f08e:	4b12      	ldr	r3, [pc, #72]	@ (801f0d8 <TestDispatcherTask+0x168>)
 801f090:	6818      	ldr	r0, [r3, #0]
 801f092:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f09a:	2200      	movs	r2, #0
 801f09c:	f7ee fce4 	bl	800da68 <osMessageQueuePut>
			}
			if(in_msg.peripheral & TEST_TIM)
 801f0a0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801f0a4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801f0a8:	7b1b      	ldrb	r3, [r3, #12]
 801f0aa:	f003 0301 	and.w	r3, r3, #1
 801f0ae:	2b00      	cmp	r3, #0
 801f0b0:	f43f af62 	beq.w	801ef78 <TestDispatcherTask+0x8>
			{
				osMessageQueuePut(timQueueHandle, &test_data, 0, osWaitForever);
 801f0b4:	4b09      	ldr	r3, [pc, #36]	@ (801f0dc <TestDispatcherTask+0x16c>)
 801f0b6:	6818      	ldr	r0, [r3, #0]
 801f0b8:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801f0bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f0c0:	2200      	movs	r2, #0
 801f0c2:	f7ee fcd1 	bl	800da68 <osMessageQueuePut>
	{
 801f0c6:	e757      	b.n	801ef78 <TestDispatcherTask+0x8>
 801f0c8:	200002d8 	.word	0x200002d8
 801f0cc:	200002e0 	.word	0x200002e0
 801f0d0:	200002e4 	.word	0x200002e4
 801f0d4:	200002e8 	.word	0x200002e8
 801f0d8:	200002ec 	.word	0x200002ec
 801f0dc:	200002f0 	.word	0x200002f0

0801f0e0 <Init_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Init_CRC()
{
 801f0e0:	b580      	push	{r7, lr}
 801f0e2:	af00      	add	r7, sp, #0
	// init mutex only if needed
	if (crcMutex == NULL) crcMutex = osMutexNew(NULL);
 801f0e4:	4b0a      	ldr	r3, [pc, #40]	@ (801f110 <Init_CRC+0x30>)
 801f0e6:	681b      	ldr	r3, [r3, #0]
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	d105      	bne.n	801f0f8 <Init_CRC+0x18>
 801f0ec:	2000      	movs	r0, #0
 801f0ee:	f7ee f95d 	bl	800d3ac <osMutexNew>
 801f0f2:	4603      	mov	r3, r0
 801f0f4:	4a06      	ldr	r2, [pc, #24]	@ (801f110 <Init_CRC+0x30>)
 801f0f6:	6013      	str	r3, [r2, #0]

	if (crcMutex == NULL)
 801f0f8:	4b05      	ldr	r3, [pc, #20]	@ (801f110 <Init_CRC+0x30>)
 801f0fa:	681b      	ldr	r3, [r3, #0]
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d104      	bne.n	801f10a <Init_CRC+0x2a>
	{
		LOG_ERR("Init_CRC couldn't init mutex");
 801f100:	4804      	ldr	r0, [pc, #16]	@ (801f114 <Init_CRC+0x34>)
 801f102:	f001 f933 	bl	802036c <puts>
		return CRC_MATCH_FAIL;
 801f106:	2300      	movs	r3, #0
 801f108:	e000      	b.n	801f10c <Init_CRC+0x2c>
	}

	return CRC_MATCH_OK;
 801f10a:	2301      	movs	r3, #1
}
 801f10c:	4618      	mov	r0, r3
 801f10e:	bd80      	pop	{r7, pc}
 801f110:	2002570c 	.word	0x2002570c
 801f114:	08024874 	.word	0x08024874

0801f118 <Match_CRC>:

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801f118:	b590      	push	{r4, r7, lr}
 801f11a:	b087      	sub	sp, #28
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	60f8      	str	r0, [r7, #12]
 801f120:	607a      	str	r2, [r7, #4]
 801f122:	461a      	mov	r2, r3
 801f124:	460b      	mov	r3, r1
 801f126:	72fb      	strb	r3, [r7, #11]
 801f128:	4613      	mov	r3, r2
 801f12a:	72bb      	strb	r3, [r7, #10]
	if (crcMutex == NULL)
 801f12c:	4b1e      	ldr	r3, [pc, #120]	@ (801f1a8 <Match_CRC+0x90>)
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	2b00      	cmp	r3, #0
 801f132:	d107      	bne.n	801f144 <Match_CRC+0x2c>
	{
		LOG_ERR("CRC mutex is NULL. Must call Init_CRC beforehand");
 801f134:	481d      	ldr	r0, [pc, #116]	@ (801f1ac <Match_CRC+0x94>)
 801f136:	f001 f919 	bl	802036c <puts>
		return CRC_MATCH_FAIL;
 801f13a:	2300      	movs	r3, #0
 801f13c:	e02f      	b.n	801f19e <Match_CRC+0x86>
	}

	while (osMutexAcquire(crcMutex, osDelay(CRC_MTX_TO)) != osOK)
	{
		LOG_WARN("Match_CRC hit timeout while trying to acquire mutex");
 801f13e:	481c      	ldr	r0, [pc, #112]	@ (801f1b0 <Match_CRC+0x98>)
 801f140:	f001 f914 	bl	802036c <puts>
	while (osMutexAcquire(crcMutex, osDelay(CRC_MTX_TO)) != osOK)
 801f144:	4b18      	ldr	r3, [pc, #96]	@ (801f1a8 <Match_CRC+0x90>)
 801f146:	681c      	ldr	r4, [r3, #0]
 801f148:	2064      	movs	r0, #100	@ 0x64
 801f14a:	f7ee f901 	bl	800d350 <osDelay>
 801f14e:	4603      	mov	r3, r0
 801f150:	4619      	mov	r1, r3
 801f152:	4620      	mov	r0, r4
 801f154:	f7ee f9c4 	bl	800d4e0 <osMutexAcquire>
 801f158:	4603      	mov	r3, r0
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d1ef      	bne.n	801f13e <Match_CRC+0x26>
	}
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801f15e:	7afb      	ldrb	r3, [r7, #11]
 801f160:	461a      	mov	r2, r3
 801f162:	68f9      	ldr	r1, [r7, #12]
 801f164:	4813      	ldr	r0, [pc, #76]	@ (801f1b4 <Match_CRC+0x9c>)
 801f166:	f7e3 feff 	bl	8002f68 <HAL_CRC_Calculate>
 801f16a:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801f16c:	7abb      	ldrb	r3, [r7, #10]
 801f16e:	461a      	mov	r2, r3
 801f170:	6879      	ldr	r1, [r7, #4]
 801f172:	4810      	ldr	r0, [pc, #64]	@ (801f1b4 <Match_CRC+0x9c>)
 801f174:	f7e3 fef8 	bl	8002f68 <HAL_CRC_Calculate>
 801f178:	6138      	str	r0, [r7, #16]
	if (osMutexRelease(crcMutex) != osOK)
 801f17a:	4b0b      	ldr	r3, [pc, #44]	@ (801f1a8 <Match_CRC+0x90>)
 801f17c:	681b      	ldr	r3, [r3, #0]
 801f17e:	4618      	mov	r0, r3
 801f180:	f7ee fa0c 	bl	800d59c <osMutexRelease>
 801f184:	4603      	mov	r3, r0
 801f186:	2b00      	cmp	r3, #0
 801f188:	d002      	beq.n	801f190 <Match_CRC+0x78>
	{
		LOG_ERR("Match_CRC couldn't release mutex");
 801f18a:	480b      	ldr	r0, [pc, #44]	@ (801f1b8 <Match_CRC+0xa0>)
 801f18c:	f001 f8ee 	bl	802036c <puts>
	}

	if(buf1_crc == buf2_crc)
 801f190:	697a      	ldr	r2, [r7, #20]
 801f192:	693b      	ldr	r3, [r7, #16]
 801f194:	429a      	cmp	r2, r3
 801f196:	d101      	bne.n	801f19c <Match_CRC+0x84>
		return CRC_MATCH_OK;
 801f198:	2301      	movs	r3, #1
 801f19a:	e000      	b.n	801f19e <Match_CRC+0x86>

	return CRC_MATCH_FAIL;
 801f19c:	2300      	movs	r3, #0
}
 801f19e:	4618      	mov	r0, r3
 801f1a0:	371c      	adds	r7, #28
 801f1a2:	46bd      	mov	sp, r7
 801f1a4:	bd90      	pop	{r4, r7, pc}
 801f1a6:	bf00      	nop
 801f1a8:	2002570c 	.word	0x2002570c
 801f1ac:	08024898 	.word	0x08024898
 801f1b0:	080248d0 	.word	0x080248d0
 801f1b4:	20000290 	.word	0x20000290
 801f1b8:	0802490c 	.word	0x0802490c

0801f1bc <UDP_Listen>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Listen(void)
{
 801f1bc:	b580      	push	{r7, lr}
 801f1be:	b0ca      	sub	sp, #296	@ 0x128
 801f1c0:	af00      	add	r7, sp, #0
	InMsg_t in_msg;
	int n_read;
	err_t err;
	osStatus_t status;

	conn_recv = netconn_new(NETCONN_UDP);
 801f1c2:	2200      	movs	r2, #0
 801f1c4:	2100      	movs	r1, #0
 801f1c6:	2020      	movs	r0, #32
 801f1c8:	f7f2 f8c2 	bl	8011350 <netconn_new_with_proto_and_callback>
 801f1cc:	4603      	mov	r3, r0
 801f1ce:	4a84      	ldr	r2, [pc, #528]	@ (801f3e0 <UDP_Listen+0x224>)
 801f1d0:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 801f1d2:	4b83      	ldr	r3, [pc, #524]	@ (801f3e0 <UDP_Listen+0x224>)
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	2b00      	cmp	r3, #0
 801f1d8:	d104      	bne.n	801f1e4 <UDP_Listen+0x28>
	{
		LOG_ERR("error initializing UDP receive netconn");
 801f1da:	4882      	ldr	r0, [pc, #520]	@ (801f3e4 <UDP_Listen+0x228>)
 801f1dc:	f001 f8c6 	bl	802036c <puts>
		osThreadExit();
 801f1e0:	f7ee f8ae 	bl	800d340 <osThreadExit>
	}

	err = netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT);
 801f1e4:	4b7e      	ldr	r3, [pc, #504]	@ (801f3e0 <UDP_Listen+0x224>)
 801f1e6:	681b      	ldr	r3, [r3, #0]
 801f1e8:	f24d 4231 	movw	r2, #54321	@ 0xd431
 801f1ec:	497e      	ldr	r1, [pc, #504]	@ (801f3e8 <UDP_Listen+0x22c>)
 801f1ee:	4618      	mov	r0, r3
 801f1f0:	f7f2 f968 	bl	80114c4 <netconn_bind>
 801f1f4:	4603      	mov	r3, r0
 801f1f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
	if (err != ERR_OK)
 801f1fa:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f1fe:	2b00      	cmp	r3, #0
 801f200:	d01c      	beq.n	801f23c <UDP_Listen+0x80>
	{
		LOG_ERR("error binding UDP port (err code %d)", err);
 801f202:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f206:	4619      	mov	r1, r3
 801f208:	4878      	ldr	r0, [pc, #480]	@ (801f3ec <UDP_Listen+0x230>)
 801f20a:	f001 f847 	bl	802029c <iprintf>

		err = netconn_delete(conn_recv);
 801f20e:	4b74      	ldr	r3, [pc, #464]	@ (801f3e0 <UDP_Listen+0x224>)
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	4618      	mov	r0, r3
 801f214:	f7f2 f93a 	bl	801148c <netconn_delete>
 801f218:	4603      	mov	r3, r0
 801f21a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
		if (err != ERR_OK)
 801f21e:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f222:	2b00      	cmp	r3, #0
 801f224:	d005      	beq.n	801f232 <UDP_Listen+0x76>
			LOG_ERR("UDP_Listen couldn't delete netconn (err code %d)", err);
 801f226:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f22a:	4619      	mov	r1, r3
 801f22c:	4870      	ldr	r0, [pc, #448]	@ (801f3f0 <UDP_Listen+0x234>)
 801f22e:	f001 f835 	bl	802029c <iprintf>
		conn_recv = NULL;
 801f232:	4b6b      	ldr	r3, [pc, #428]	@ (801f3e0 <UDP_Listen+0x224>)
 801f234:	2200      	movs	r2, #0
 801f236:	601a      	str	r2, [r3, #0]
		osThreadExit();
 801f238:	f7ee f882 	bl	800d340 <osThreadExit>
	}

	while (1)
	{
		err = netconn_recv(conn_recv, &buf);
 801f23c:	4b68      	ldr	r3, [pc, #416]	@ (801f3e0 <UDP_Listen+0x224>)
 801f23e:	681b      	ldr	r3, [r3, #0]
 801f240:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 801f244:	4611      	mov	r1, r2
 801f246:	4618      	mov	r0, r3
 801f248:	f7f2 faf0 	bl	801182c <netconn_recv>
 801f24c:	4603      	mov	r3, r0
 801f24e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
		if (err == ERR_OK)
 801f252:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f256:	2b00      	cmp	r3, #0
 801f258:	f040 80bb 	bne.w	801f3d2 <UDP_Listen+0x216>
		{
			// Load in_msg
			in_msg.addr = *netbuf_fromaddr(buf);
 801f25c:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801f260:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f264:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f268:	6892      	ldr	r2, [r2, #8]
 801f26a:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 801f26c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801f270:	899a      	ldrh	r2, [r3, #12]
 801f272:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f276:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f27a:	809a      	strh	r2, [r3, #4]

			err = netbuf_data(buf, &raw_data, &len);
 801f27c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801f280:	f507 7289 	add.w	r2, r7, #274	@ 0x112
 801f284:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 801f288:	4618      	mov	r0, r3
 801f28a:	f7f3 fea5 	bl	8012fd8 <netbuf_data>
 801f28e:	4603      	mov	r3, r0
 801f290:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
			if (err == ERR_OK)
 801f294:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f298:	2b00      	cmp	r3, #0
 801f29a:	f040 8093 	bne.w	801f3c4 <UDP_Listen+0x208>
			{
				n_read = 0;
 801f29e:	2300      	movs	r3, #0
 801f2a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
				memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 801f2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	461a      	mov	r2, r3
 801f2ac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2b0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f2b4:	609a      	str	r2, [r3, #8]
				n_read += sizeof(in_msg.test_id);
 801f2b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f2ba:	3304      	adds	r3, #4
 801f2bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

				memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 801f2c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801f2c4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f2c8:	1c59      	adds	r1, r3, #1
 801f2ca:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 801f2ce:	4413      	add	r3, r2
 801f2d0:	781a      	ldrb	r2, [r3, #0]
 801f2d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f2da:	731a      	strb	r2, [r3, #12]
				memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 801f2dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801f2e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f2e4:	1c59      	adds	r1, r3, #1
 801f2e6:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 801f2ea:	4413      	add	r3, r2
 801f2ec:	781a      	ldrb	r2, [r3, #0]
 801f2ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f2f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f2f6:	735a      	strb	r2, [r3, #13]
				memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 801f2f8:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801f2fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f300:	1c59      	adds	r1, r3, #1
 801f302:	f8c7 1120 	str.w	r1, [r7, #288]	@ 0x120
 801f306:	4413      	add	r3, r2
 801f308:	781a      	ldrb	r2, [r3, #0]
 801f30a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f30e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f312:	739a      	strb	r2, [r3, #14]
				memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 801f314:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801f318:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801f31c:	18d1      	adds	r1, r2, r3
 801f31e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f322:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f326:	7b9b      	ldrb	r3, [r3, #14]
 801f328:	461a      	mov	r2, r3
 801f32a:	463b      	mov	r3, r7
 801f32c:	330f      	adds	r3, #15
 801f32e:	4618      	mov	r0, r3
 801f330:	f001 f9df 	bl	80206f2 <memcpy>
				in_msg.payload[in_msg.p_len] = '\0'; // for printing
 801f334:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f338:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f33c:	7b9b      	ldrb	r3, [r3, #14]
 801f33e:	461a      	mov	r2, r3
 801f340:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f344:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f348:	4413      	add	r3, r2
 801f34a:	2200      	movs	r2, #0
 801f34c:	73da      	strb	r2, [r3, #15]

				err = validate_data(&in_msg);
 801f34e:	463b      	mov	r3, r7
 801f350:	4618      	mov	r0, r3
 801f352:	f000 f8bf 	bl	801f4d4 <validate_data>
 801f356:	4603      	mov	r3, r0
 801f358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (err == INMSG_OK)
 801f35c:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f360:	2b00      	cmp	r3, #0
 801f362:	d123      	bne.n	801f3ac <UDP_Listen+0x1f0>
				{
					LOG_INFO("UDP Listener got message: id=%lu plen=%d msg=%s",
 801f364:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f368:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f36c:	6899      	ldr	r1, [r3, #8]
 801f36e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f372:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801f376:	7b9b      	ldrb	r3, [r3, #14]
 801f378:	461a      	mov	r2, r3
 801f37a:	463b      	mov	r3, r7
 801f37c:	330f      	adds	r3, #15
 801f37e:	481d      	ldr	r0, [pc, #116]	@ (801f3f4 <UDP_Listen+0x238>)
 801f380:	f000 ff8c 	bl	802029c <iprintf>
							 in_msg.test_id, in_msg.p_len, in_msg.payload);

					// send in_msg to InMsgQueue
					status = osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, osWaitForever);
 801f384:	4b1c      	ldr	r3, [pc, #112]	@ (801f3f8 <UDP_Listen+0x23c>)
 801f386:	6818      	ldr	r0, [r3, #0]
 801f388:	4639      	mov	r1, r7
 801f38a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f38e:	2200      	movs	r2, #0
 801f390:	f7ee fb6a 	bl	800da68 <osMessageQueuePut>
 801f394:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
					if (status != osOK)
 801f398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d00b      	beq.n	801f3b8 <UDP_Listen+0x1fc>
					{
						LOG_ERR("inMsgQueue put error: %d\n", status);
 801f3a0:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 801f3a4:	4815      	ldr	r0, [pc, #84]	@ (801f3fc <UDP_Listen+0x240>)
 801f3a6:	f000 ff79 	bl	802029c <iprintf>
 801f3aa:	e005      	b.n	801f3b8 <UDP_Listen+0x1fc>
					}
				}
				else
				{
					LOG_ERR("Invalid incoming message (err code %d)", err);
 801f3ac:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f3b0:	4619      	mov	r1, r3
 801f3b2:	4813      	ldr	r0, [pc, #76]	@ (801f400 <UDP_Listen+0x244>)
 801f3b4:	f000 ff72 	bl	802029c <iprintf>
				}

				netbuf_delete(buf);
 801f3b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801f3bc:	4618      	mov	r0, r3
 801f3be:	f7f3 fda1 	bl	8012f04 <netbuf_delete>
 801f3c2:	e73b      	b.n	801f23c <UDP_Listen+0x80>
			}
			else
			{
				LOG_ERR("netbuf_data() error code: %d", err);
 801f3c4:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f3c8:	4619      	mov	r1, r3
 801f3ca:	480e      	ldr	r0, [pc, #56]	@ (801f404 <UDP_Listen+0x248>)
 801f3cc:	f000 ff66 	bl	802029c <iprintf>
 801f3d0:	e734      	b.n	801f23c <UDP_Listen+0x80>
			}
		}
		else
		{
			LOG_ERR("UDP_Listen: netconn receive error (err code %d)", err);
 801f3d2:	f997 3127 	ldrsb.w	r3, [r7, #295]	@ 0x127
 801f3d6:	4619      	mov	r1, r3
 801f3d8:	480b      	ldr	r0, [pc, #44]	@ (801f408 <UDP_Listen+0x24c>)
 801f3da:	f000 ff5f 	bl	802029c <iprintf>
		err = netconn_recv(conn_recv, &buf);
 801f3de:	e72d      	b.n	801f23c <UDP_Listen+0x80>
 801f3e0:	20025710 	.word	0x20025710
 801f3e4:	08024934 	.word	0x08024934
 801f3e8:	08024ec4 	.word	0x08024ec4
 801f3ec:	08024964 	.word	0x08024964
 801f3f0:	08024990 	.word	0x08024990
 801f3f4:	080249c8 	.word	0x080249c8
 801f3f8:	200002d8 	.word	0x200002d8
 801f3fc:	08024a00 	.word	0x08024a00
 801f400:	08024a24 	.word	0x08024a24
 801f404:	08024a54 	.word	0x08024a54
 801f408:	08024a78 	.word	0x08024a78

0801f40c <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 801f40c:	b580      	push	{r7, lr}
 801f40e:	b088      	sub	sp, #32
 801f410:	af00      	add	r7, sp, #0
	struct netbuf *buf;
	OutMsg_t out_msg;
	osStatus_t status;
	err_t err;

	conn_send = netconn_new(NETCONN_UDP);
 801f412:	2200      	movs	r2, #0
 801f414:	2100      	movs	r1, #0
 801f416:	2020      	movs	r0, #32
 801f418:	f7f1 ff9a 	bl	8011350 <netconn_new_with_proto_and_callback>
 801f41c:	4603      	mov	r3, r0
 801f41e:	4a27      	ldr	r2, [pc, #156]	@ (801f4bc <UDP_Response+0xb0>)
 801f420:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 801f422:	4b26      	ldr	r3, [pc, #152]	@ (801f4bc <UDP_Response+0xb0>)
 801f424:	681b      	ldr	r3, [r3, #0]
 801f426:	2b00      	cmp	r3, #0
 801f428:	d104      	bne.n	801f434 <UDP_Response+0x28>
	{
		LOG_ERR("error initializing UDP send netconn");
 801f42a:	4825      	ldr	r0, [pc, #148]	@ (801f4c0 <UDP_Response+0xb4>)
 801f42c:	f000 ff9e 	bl	802036c <puts>
		osThreadExit();
 801f430:	f7ed ff86 	bl	800d340 <osThreadExit>
	}

	while(1)
	{
		status = osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f434:	4b23      	ldr	r3, [pc, #140]	@ (801f4c4 <UDP_Response+0xb8>)
 801f436:	6818      	ldr	r0, [r3, #0]
 801f438:	4639      	mov	r1, r7
 801f43a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f43e:	2200      	movs	r2, #0
 801f440:	f7ee fb86 	bl	800db50 <osMessageQueueGet>
 801f444:	61f8      	str	r0, [r7, #28]
		if(status == osOK)
 801f446:	69fb      	ldr	r3, [r7, #28]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d1f3      	bne.n	801f434 <UDP_Response+0x28>
		{
			//Load response buffer
			buf = netbuf_new();
 801f44c:	f7f3 fd46 	bl	8012edc <netbuf_new>
 801f450:	61b8      	str	r0, [r7, #24]
			if (!buf)
 801f452:	69bb      	ldr	r3, [r7, #24]
 801f454:	2b00      	cmp	r3, #0
 801f456:	d103      	bne.n	801f460 <UDP_Response+0x54>
			{
				LOG_ERR("responder netbuf_new() failed");
 801f458:	481b      	ldr	r0, [pc, #108]	@ (801f4c8 <UDP_Response+0xbc>)
 801f45a:	f000 ff87 	bl	802036c <puts>
				continue;
 801f45e:	e02b      	b.n	801f4b8 <UDP_Response+0xac>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 801f460:	2105      	movs	r1, #5
 801f462:	69b8      	ldr	r0, [r7, #24]
 801f464:	f7f3 fd6e 	bl	8012f44 <netbuf_alloc>
 801f468:	6178      	str	r0, [r7, #20]
			if (!data)
 801f46a:	697b      	ldr	r3, [r7, #20]
 801f46c:	2b00      	cmp	r3, #0
 801f46e:	d106      	bne.n	801f47e <UDP_Response+0x72>
			{
				LOG_ERR("responder netbuf_alloc() failed");
 801f470:	4816      	ldr	r0, [pc, #88]	@ (801f4cc <UDP_Response+0xc0>)
 801f472:	f000 ff7b 	bl	802036c <puts>
			    netbuf_delete(buf);
 801f476:	69b8      	ldr	r0, [r7, #24]
 801f478:	f7f3 fd44 	bl	8012f04 <netbuf_delete>
			    continue;
 801f47c:	e01c      	b.n	801f4b8 <UDP_Response+0xac>
			}

			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 801f47e:	68ba      	ldr	r2, [r7, #8]
 801f480:	697b      	ldr	r3, [r7, #20]
 801f482:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 801f484:	697b      	ldr	r3, [r7, #20]
 801f486:	3304      	adds	r3, #4
 801f488:	7b3a      	ldrb	r2, [r7, #12]
 801f48a:	701a      	strb	r2, [r3, #0]

			// Send response
			err = netconn_sendto(conn_send, buf, &out_msg.addr, out_msg.port);
 801f48c:	4b0b      	ldr	r3, [pc, #44]	@ (801f4bc <UDP_Response+0xb0>)
 801f48e:	6818      	ldr	r0, [r3, #0]
 801f490:	88bb      	ldrh	r3, [r7, #4]
 801f492:	463a      	mov	r2, r7
 801f494:	69b9      	ldr	r1, [r7, #24]
 801f496:	f7f2 fa43 	bl	8011920 <netconn_sendto>
 801f49a:	4603      	mov	r3, r0
 801f49c:	74fb      	strb	r3, [r7, #19]
			if (err != ERR_OK)
 801f49e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d005      	beq.n	801f4b2 <UDP_Response+0xa6>
			{
				LOG_ERR("responder netconn_sendto() failed with error %d", err);
 801f4a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801f4aa:	4619      	mov	r1, r3
 801f4ac:	4808      	ldr	r0, [pc, #32]	@ (801f4d0 <UDP_Response+0xc4>)
 801f4ae:	f000 fef5 	bl	802029c <iprintf>
			}

			netbuf_delete(buf);
 801f4b2:	69b8      	ldr	r0, [r7, #24]
 801f4b4:	f7f3 fd26 	bl	8012f04 <netbuf_delete>
		status = osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f4b8:	e7bc      	b.n	801f434 <UDP_Response+0x28>
 801f4ba:	bf00      	nop
 801f4bc:	20025714 	.word	0x20025714
 801f4c0:	08024ab0 	.word	0x08024ab0
 801f4c4:	200002dc 	.word	0x200002dc
 801f4c8:	08024adc 	.word	0x08024adc
 801f4cc:	08024b00 	.word	0x08024b00
 801f4d0:	08024b28 	.word	0x08024b28

0801f4d4 <validate_data>:
		}
	}
}

err_t validate_data(InMsg_t *inmsg)
{
 801f4d4:	b480      	push	{r7}
 801f4d6:	b083      	sub	sp, #12
 801f4d8:	af00      	add	r7, sp, #0
 801f4da:	6078      	str	r0, [r7, #4]
	// check test ID
	// to be implemented

	if (!(inmsg->peripheral & ANY_TEST)) return INMSG_ERR_TID;
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	7b1b      	ldrb	r3, [r3, #12]
 801f4e0:	f003 031f 	and.w	r3, r3, #31
 801f4e4:	2b00      	cmp	r3, #0
 801f4e6:	d102      	bne.n	801f4ee <validate_data+0x1a>
 801f4e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f4ec:	e00e      	b.n	801f50c <validate_data+0x38>

	if (inmsg->n_iter <= 0) return INMSG_ERR_ITER;
 801f4ee:	687b      	ldr	r3, [r7, #4]
 801f4f0:	7b5b      	ldrb	r3, [r3, #13]
 801f4f2:	2b00      	cmp	r3, #0
 801f4f4:	d102      	bne.n	801f4fc <validate_data+0x28>
 801f4f6:	f06f 0301 	mvn.w	r3, #1
 801f4fa:	e007      	b.n	801f50c <validate_data+0x38>

	if (inmsg->p_len <= 0) return INMSG_ERR_PLEN;
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	7b9b      	ldrb	r3, [r3, #14]
 801f500:	2b00      	cmp	r3, #0
 801f502:	d102      	bne.n	801f50a <validate_data+0x36>
 801f504:	f06f 0302 	mvn.w	r3, #2
 801f508:	e000      	b.n	801f50c <validate_data+0x38>

	return INMSG_OK;
 801f50a:	2300      	movs	r3, #0
}
 801f50c:	4618      	mov	r0, r3
 801f50e:	370c      	adds	r7, #12
 801f510:	46bd      	mov	sp, r7
 801f512:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f516:	4770      	bx	lr

0801f518 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 801f518:	b580      	push	{r7, lr}
 801f51a:	b0ca      	sub	sp, #296	@ 0x128
 801f51c:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	i2c1TxSem = osSemaphoreNew(1, 0, NULL);
 801f51e:	2200      	movs	r2, #0
 801f520:	2100      	movs	r1, #0
 801f522:	2001      	movs	r0, #1
 801f524:	f7ee f88a 	bl	800d63c <osSemaphoreNew>
 801f528:	4603      	mov	r3, r0
 801f52a:	4a3f      	ldr	r2, [pc, #252]	@ (801f628 <I2cTestTask+0x110>)
 801f52c:	6013      	str	r3, [r2, #0]
	i2c1RxSem = osSemaphoreNew(1, 0, NULL);
 801f52e:	2200      	movs	r2, #0
 801f530:	2100      	movs	r1, #0
 801f532:	2001      	movs	r0, #1
 801f534:	f7ee f882 	bl	800d63c <osSemaphoreNew>
 801f538:	4603      	mov	r3, r0
 801f53a:	4a3c      	ldr	r2, [pc, #240]	@ (801f62c <I2cTestTask+0x114>)
 801f53c:	6013      	str	r3, [r2, #0]
	i2c2TxSem = osSemaphoreNew(1, 0, NULL);
 801f53e:	2200      	movs	r2, #0
 801f540:	2100      	movs	r1, #0
 801f542:	2001      	movs	r0, #1
 801f544:	f7ee f87a 	bl	800d63c <osSemaphoreNew>
 801f548:	4603      	mov	r3, r0
 801f54a:	4a39      	ldr	r2, [pc, #228]	@ (801f630 <I2cTestTask+0x118>)
 801f54c:	6013      	str	r3, [r2, #0]
	i2c2RxSem = osSemaphoreNew(1, 0, NULL);
 801f54e:	2200      	movs	r2, #0
 801f550:	2100      	movs	r1, #0
 801f552:	2001      	movs	r0, #1
 801f554:	f7ee f872 	bl	800d63c <osSemaphoreNew>
 801f558:	4603      	mov	r3, r0
 801f55a:	4a36      	ldr	r2, [pc, #216]	@ (801f634 <I2cTestTask+0x11c>)
 801f55c:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f55e:	4b36      	ldr	r3, [pc, #216]	@ (801f638 <I2cTestTask+0x120>)
 801f560:	6818      	ldr	r0, [r3, #0]
 801f562:	f107 0114 	add.w	r1, r7, #20
 801f566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f56a:	2200      	movs	r2, #0
 801f56c:	f7ee faf0 	bl	800db50 <osMessageQueueGet>
 801f570:	4603      	mov	r3, r0
 801f572:	2b00      	cmp	r3, #0
 801f574:	d154      	bne.n	801f620 <I2cTestTask+0x108>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f576:	2300      	movs	r3, #0
 801f578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f57c:	e017      	b.n	801f5ae <I2cTestTask+0x96>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f57e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f582:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f586:	7b5a      	ldrb	r2, [r3, #13]
 801f588:	f107 0314 	add.w	r3, r7, #20
 801f58c:	330e      	adds	r3, #14
 801f58e:	4611      	mov	r1, r2
 801f590:	4618      	mov	r0, r3
 801f592:	f000 f855 	bl	801f640 <I2C_Test_Perform>
 801f596:	4603      	mov	r3, r0
 801f598:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f59c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f5a0:	2bff      	cmp	r3, #255	@ 0xff
 801f5a2:	d00e      	beq.n	801f5c2 <I2cTestTask+0xaa>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f5a4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f5a8:	3301      	adds	r3, #1
 801f5aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f5ae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f5b2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f5b6:	7b1b      	ldrb	r3, [r3, #12]
 801f5b8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f5bc:	429a      	cmp	r2, r3
 801f5be:	d3de      	bcc.n	801f57e <I2cTestTask+0x66>
 801f5c0:	e000      	b.n	801f5c4 <I2cTestTask+0xac>
					break;
 801f5c2:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f5c4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f5c8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f5cc:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f5d0:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f5d4:	6812      	ldr	r2, [r2, #0]
 801f5d6:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f5d8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f5dc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f5e0:	889a      	ldrh	r2, [r3, #4]
 801f5e2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f5e6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f5ea:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f5ec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f5f0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f5f4:	689a      	ldr	r2, [r3, #8]
 801f5f6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f5fa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f5fe:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f600:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f604:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f608:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f60c:	731a      	strb	r2, [r3, #12]
#ifdef PRINT_TESTS_DEBUG
		    printf("I2C test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f60e:	4b0b      	ldr	r3, [pc, #44]	@ (801f63c <I2cTestTask+0x124>)
 801f610:	6818      	ldr	r0, [r3, #0]
 801f612:	1d39      	adds	r1, r7, #4
 801f614:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f618:	2200      	movs	r2, #0
 801f61a:	f7ee fa25 	bl	800da68 <osMessageQueuePut>
 801f61e:	e79e      	b.n	801f55e <I2cTestTask+0x46>
		}
		else osDelay(1);
 801f620:	2001      	movs	r0, #1
 801f622:	f7ed fe95 	bl	800d350 <osDelay>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f626:	e79a      	b.n	801f55e <I2cTestTask+0x46>
 801f628:	20025718 	.word	0x20025718
 801f62c:	2002571c 	.word	0x2002571c
 801f630:	20025720 	.word	0x20025720
 801f634:	20025724 	.word	0x20025724
 801f638:	200002e4 	.word	0x200002e4
 801f63c:	200002dc 	.word	0x200002dc

0801f640 <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f640:	b590      	push	{r4, r7, lr}
 801f642:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f646:	af00      	add	r7, sp, #0
 801f648:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f64c:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f650:	6018      	str	r0, [r3, #0]
 801f652:	460a      	mov	r2, r1
 801f654:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f658:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f65c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	osSemaphoreAcquire(i2c1TxSem, 0);
 801f65e:	4b5c      	ldr	r3, [pc, #368]	@ (801f7d0 <I2C_Test_Perform+0x190>)
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	2100      	movs	r1, #0
 801f664:	4618      	mov	r0, r3
 801f666:	f7ee f885 	bl	800d774 <osSemaphoreAcquire>
	osSemaphoreAcquire(i2c1RxSem, 0);
 801f66a:	4b5a      	ldr	r3, [pc, #360]	@ (801f7d4 <I2C_Test_Perform+0x194>)
 801f66c:	681b      	ldr	r3, [r3, #0]
 801f66e:	2100      	movs	r1, #0
 801f670:	4618      	mov	r0, r3
 801f672:	f7ee f87f 	bl	800d774 <osSemaphoreAcquire>
	osSemaphoreAcquire(i2c2TxSem, 0);
 801f676:	4b58      	ldr	r3, [pc, #352]	@ (801f7d8 <I2C_Test_Perform+0x198>)
 801f678:	681b      	ldr	r3, [r3, #0]
 801f67a:	2100      	movs	r1, #0
 801f67c:	4618      	mov	r0, r3
 801f67e:	f7ee f879 	bl	800d774 <osSemaphoreAcquire>
	osSemaphoreAcquire(i2c2RxSem, 0);
 801f682:	4b56      	ldr	r3, [pc, #344]	@ (801f7dc <I2C_Test_Perform+0x19c>)
 801f684:	681b      	ldr	r3, [r3, #0]
 801f686:	2100      	movs	r1, #0
 801f688:	4618      	mov	r0, r3
 801f68a:	f7ee f873 	bl	800d774 <osSemaphoreAcquire>

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 801f68e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f692:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f696:	781b      	ldrb	r3, [r3, #0]
 801f698:	b29a      	uxth	r2, r3
 801f69a:	f107 0308 	add.w	r3, r7, #8
 801f69e:	4619      	mov	r1, r3
 801f6a0:	484f      	ldr	r0, [pc, #316]	@ (801f7e0 <I2C_Test_Perform+0x1a0>)
 801f6a2:	f7e6 fa2d 	bl	8005b00 <HAL_I2C_Slave_Receive_DMA>
 801f6a6:	4603      	mov	r3, r0
 801f6a8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f6ac:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d001      	beq.n	801f6b8 <I2C_Test_Perform+0x78>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
#endif
		return TEST_FAILED;
 801f6b4:	23ff      	movs	r3, #255	@ 0xff
 801f6b6:	e086      	b.n	801f7c6 <I2C_Test_Perform+0x186>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 801f6b8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f6bc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f6c0:	781b      	ldrb	r3, [r3, #0]
 801f6c2:	b29b      	uxth	r3, r3
 801f6c4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 801f6c8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 801f6cc:	6812      	ldr	r2, [r2, #0]
 801f6ce:	2114      	movs	r1, #20
 801f6d0:	4844      	ldr	r0, [pc, #272]	@ (801f7e4 <I2C_Test_Perform+0x1a4>)
 801f6d2:	f7e5 ff25 	bl	8005520 <HAL_I2C_Master_Transmit_DMA>
 801f6d6:	4603      	mov	r3, r0
 801f6d8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f6dc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f6e0:	2b00      	cmp	r3, #0
 801f6e2:	d001      	beq.n	801f6e8 <I2C_Test_Perform+0xa8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
#endif
		return TEST_FAILED;
 801f6e4:	23ff      	movs	r3, #255	@ 0xff
 801f6e6:	e06e      	b.n	801f7c6 <I2C_Test_Perform+0x186>
	}
	if (osSemaphoreAcquire(i2c1TxSem, 10) != osOK || osSemaphoreAcquire(i2c2RxSem, 10) != osOK)
 801f6e8:	4b39      	ldr	r3, [pc, #228]	@ (801f7d0 <I2C_Test_Perform+0x190>)
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	210a      	movs	r1, #10
 801f6ee:	4618      	mov	r0, r3
 801f6f0:	f7ee f840 	bl	800d774 <osSemaphoreAcquire>
 801f6f4:	4603      	mov	r3, r0
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d108      	bne.n	801f70c <I2C_Test_Perform+0xcc>
 801f6fa:	4b38      	ldr	r3, [pc, #224]	@ (801f7dc <I2C_Test_Perform+0x19c>)
 801f6fc:	681b      	ldr	r3, [r3, #0]
 801f6fe:	210a      	movs	r1, #10
 801f700:	4618      	mov	r0, r3
 801f702:	f7ee f837 	bl	800d774 <osSemaphoreAcquire>
 801f706:	4603      	mov	r3, r0
 801f708:	2b00      	cmp	r3, #0
 801f70a:	d001      	beq.n	801f710 <I2C_Test_Perform+0xd0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 semaphore timeout\n");
#endif
		return TEST_FAILED;
 801f70c:	23ff      	movs	r3, #255	@ 0xff
 801f70e:	e05a      	b.n	801f7c6 <I2C_Test_Perform+0x186>
	}

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 801f710:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f714:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f718:	781b      	ldrb	r3, [r3, #0]
 801f71a:	b29b      	uxth	r3, r3
 801f71c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f720:	2114      	movs	r1, #20
 801f722:	4830      	ldr	r0, [pc, #192]	@ (801f7e4 <I2C_Test_Perform+0x1a4>)
 801f724:	f7e6 f810 	bl	8005748 <HAL_I2C_Master_Receive_DMA>
 801f728:	4603      	mov	r3, r0
 801f72a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f72e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f732:	2b00      	cmp	r3, #0
 801f734:	d001      	beq.n	801f73a <I2C_Test_Perform+0xfa>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
#endif
		return TEST_FAILED;
 801f736:	23ff      	movs	r3, #255	@ 0xff
 801f738:	e045      	b.n	801f7c6 <I2C_Test_Perform+0x186>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 801f73a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f73e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f742:	781b      	ldrb	r3, [r3, #0]
 801f744:	b29a      	uxth	r2, r3
 801f746:	f107 0308 	add.w	r3, r7, #8
 801f74a:	4619      	mov	r1, r3
 801f74c:	4824      	ldr	r0, [pc, #144]	@ (801f7e0 <I2C_Test_Perform+0x1a0>)
 801f74e:	f7e6 f8eb 	bl	8005928 <HAL_I2C_Slave_Transmit_DMA>
 801f752:	4603      	mov	r3, r0
 801f754:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801f758:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d001      	beq.n	801f764 <I2C_Test_Perform+0x124>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
#endif
		return TEST_FAILED;
 801f760:	23ff      	movs	r3, #255	@ 0xff
 801f762:	e030      	b.n	801f7c6 <I2C_Test_Perform+0x186>
	}
	if (osSemaphoreAcquire(i2c2TxSem, 10) != osOK || osSemaphoreAcquire(i2c1RxSem, 10) != osOK)
 801f764:	4b1c      	ldr	r3, [pc, #112]	@ (801f7d8 <I2C_Test_Perform+0x198>)
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	210a      	movs	r1, #10
 801f76a:	4618      	mov	r0, r3
 801f76c:	f7ee f802 	bl	800d774 <osSemaphoreAcquire>
 801f770:	4603      	mov	r3, r0
 801f772:	2b00      	cmp	r3, #0
 801f774:	d108      	bne.n	801f788 <I2C_Test_Perform+0x148>
 801f776:	4b17      	ldr	r3, [pc, #92]	@ (801f7d4 <I2C_Test_Perform+0x194>)
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	210a      	movs	r1, #10
 801f77c:	4618      	mov	r0, r3
 801f77e:	f7ed fff9 	bl	800d774 <osSemaphoreAcquire>
 801f782:	4603      	mov	r3, r0
 801f784:	2b00      	cmp	r3, #0
 801f786:	d001      	beq.n	801f78c <I2C_Test_Perform+0x14c>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 semaphore timeout\n");
#endif
		return TEST_FAILED;
 801f788:	23ff      	movs	r3, #255	@ 0xff
 801f78a:	e01c      	b.n	801f7c6 <I2C_Test_Perform+0x186>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 801f78c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f790:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f794:	781c      	ldrb	r4, [r3, #0]
 801f796:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801f79a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f79e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f7a2:	7819      	ldrb	r1, [r3, #0]
 801f7a4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f7a8:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801f7ac:	4623      	mov	r3, r4
 801f7ae:	6800      	ldr	r0, [r0, #0]
 801f7b0:	f7ff fcb2 	bl	801f118 <Match_CRC>
 801f7b4:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801f7b8:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801f7bc:	2b01      	cmp	r3, #1
 801f7be:	d101      	bne.n	801f7c4 <I2C_Test_Perform+0x184>
 801f7c0:	2301      	movs	r3, #1
 801f7c2:	e000      	b.n	801f7c6 <I2C_Test_Perform+0x186>

	return TEST_FAILED;
 801f7c4:	23ff      	movs	r3, #255	@ 0xff
}
 801f7c6:	4618      	mov	r0, r3
 801f7c8:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801f7cc:	46bd      	mov	sp, r7
 801f7ce:	bd90      	pop	{r4, r7, pc}
 801f7d0:	20025718 	.word	0x20025718
 801f7d4:	2002571c 	.word	0x2002571c
 801f7d8:	20025720 	.word	0x20025720
 801f7dc:	20025724 	.word	0x20025724
 801f7e0:	20000348 	.word	0x20000348
 801f7e4:	200002f4 	.word	0x200002f4

0801f7e8 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f7e8:	b580      	push	{r7, lr}
 801f7ea:	b082      	sub	sp, #8
 801f7ec:	af00      	add	r7, sp, #0
 801f7ee:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1TxSem);
 801f7f0:	687b      	ldr	r3, [r7, #4]
 801f7f2:	4a06      	ldr	r2, [pc, #24]	@ (801f80c <HAL_I2C_MasterTxCpltCallback+0x24>)
 801f7f4:	4293      	cmp	r3, r2
 801f7f6:	d104      	bne.n	801f802 <HAL_I2C_MasterTxCpltCallback+0x1a>
 801f7f8:	4b05      	ldr	r3, [pc, #20]	@ (801f810 <HAL_I2C_MasterTxCpltCallback+0x28>)
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	4618      	mov	r0, r3
 801f7fe:	f7ee f81f 	bl	800d840 <osSemaphoreRelease>
}
 801f802:	bf00      	nop
 801f804:	3708      	adds	r7, #8
 801f806:	46bd      	mov	sp, r7
 801f808:	bd80      	pop	{r7, pc}
 801f80a:	bf00      	nop
 801f80c:	200002f4 	.word	0x200002f4
 801f810:	20025718 	.word	0x20025718

0801f814 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f814:	b580      	push	{r7, lr}
 801f816:	b082      	sub	sp, #8
 801f818:	af00      	add	r7, sp, #0
 801f81a:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) osSemaphoreRelease(i2c1RxSem);
 801f81c:	687b      	ldr	r3, [r7, #4]
 801f81e:	4a06      	ldr	r2, [pc, #24]	@ (801f838 <HAL_I2C_MasterRxCpltCallback+0x24>)
 801f820:	4293      	cmp	r3, r2
 801f822:	d104      	bne.n	801f82e <HAL_I2C_MasterRxCpltCallback+0x1a>
 801f824:	4b05      	ldr	r3, [pc, #20]	@ (801f83c <HAL_I2C_MasterRxCpltCallback+0x28>)
 801f826:	681b      	ldr	r3, [r3, #0]
 801f828:	4618      	mov	r0, r3
 801f82a:	f7ee f809 	bl	800d840 <osSemaphoreRelease>
}
 801f82e:	bf00      	nop
 801f830:	3708      	adds	r7, #8
 801f832:	46bd      	mov	sp, r7
 801f834:	bd80      	pop	{r7, pc}
 801f836:	bf00      	nop
 801f838:	200002f4 	.word	0x200002f4
 801f83c:	2002571c 	.word	0x2002571c

0801f840 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f840:	b580      	push	{r7, lr}
 801f842:	b082      	sub	sp, #8
 801f844:	af00      	add	r7, sp, #0
 801f846:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2TxSem);
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	4a06      	ldr	r2, [pc, #24]	@ (801f864 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 801f84c:	4293      	cmp	r3, r2
 801f84e:	d104      	bne.n	801f85a <HAL_I2C_SlaveTxCpltCallback+0x1a>
 801f850:	4b05      	ldr	r3, [pc, #20]	@ (801f868 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	4618      	mov	r0, r3
 801f856:	f7ed fff3 	bl	800d840 <osSemaphoreRelease>
}
 801f85a:	bf00      	nop
 801f85c:	3708      	adds	r7, #8
 801f85e:	46bd      	mov	sp, r7
 801f860:	bd80      	pop	{r7, pc}
 801f862:	bf00      	nop
 801f864:	20000348 	.word	0x20000348
 801f868:	20025720 	.word	0x20025720

0801f86c <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 801f86c:	b580      	push	{r7, lr}
 801f86e:	b082      	sub	sp, #8
 801f870:	af00      	add	r7, sp, #0
 801f872:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) osSemaphoreRelease(i2c2RxSem);
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	4a06      	ldr	r2, [pc, #24]	@ (801f890 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 801f878:	4293      	cmp	r3, r2
 801f87a:	d104      	bne.n	801f886 <HAL_I2C_SlaveRxCpltCallback+0x1a>
 801f87c:	4b05      	ldr	r3, [pc, #20]	@ (801f894 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	4618      	mov	r0, r3
 801f882:	f7ed ffdd 	bl	800d840 <osSemaphoreRelease>
}
 801f886:	bf00      	nop
 801f888:	3708      	adds	r7, #8
 801f88a:	46bd      	mov	sp, r7
 801f88c:	bd80      	pop	{r7, pc}
 801f88e:	bf00      	nop
 801f890:	20000348 	.word	0x20000348
 801f894:	20025724 	.word	0x20025724

0801f898 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 801f898:	b580      	push	{r7, lr}
 801f89a:	b0ca      	sub	sp, #296	@ 0x128
 801f89c:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	spi1TxSem = osSemaphoreNew(1, 0, NULL);
 801f89e:	2200      	movs	r2, #0
 801f8a0:	2100      	movs	r1, #0
 801f8a2:	2001      	movs	r0, #1
 801f8a4:	f7ed feca 	bl	800d63c <osSemaphoreNew>
 801f8a8:	4603      	mov	r3, r0
 801f8aa:	4a3f      	ldr	r2, [pc, #252]	@ (801f9a8 <SpiTestTask+0x110>)
 801f8ac:	6013      	str	r3, [r2, #0]
	spi1RxSem = osSemaphoreNew(1, 0, NULL);
 801f8ae:	2200      	movs	r2, #0
 801f8b0:	2100      	movs	r1, #0
 801f8b2:	2001      	movs	r0, #1
 801f8b4:	f7ed fec2 	bl	800d63c <osSemaphoreNew>
 801f8b8:	4603      	mov	r3, r0
 801f8ba:	4a3c      	ldr	r2, [pc, #240]	@ (801f9ac <SpiTestTask+0x114>)
 801f8bc:	6013      	str	r3, [r2, #0]
	spi4TxSem = osSemaphoreNew(1, 0, NULL);
 801f8be:	2200      	movs	r2, #0
 801f8c0:	2100      	movs	r1, #0
 801f8c2:	2001      	movs	r0, #1
 801f8c4:	f7ed feba 	bl	800d63c <osSemaphoreNew>
 801f8c8:	4603      	mov	r3, r0
 801f8ca:	4a39      	ldr	r2, [pc, #228]	@ (801f9b0 <SpiTestTask+0x118>)
 801f8cc:	6013      	str	r3, [r2, #0]
	spi4RxSem = osSemaphoreNew(1, 0, NULL);
 801f8ce:	2200      	movs	r2, #0
 801f8d0:	2100      	movs	r1, #0
 801f8d2:	2001      	movs	r0, #1
 801f8d4:	f7ed feb2 	bl	800d63c <osSemaphoreNew>
 801f8d8:	4603      	mov	r3, r0
 801f8da:	4a36      	ldr	r2, [pc, #216]	@ (801f9b4 <SpiTestTask+0x11c>)
 801f8dc:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f8de:	4b36      	ldr	r3, [pc, #216]	@ (801f9b8 <SpiTestTask+0x120>)
 801f8e0:	6818      	ldr	r0, [r3, #0]
 801f8e2:	f107 0114 	add.w	r1, r7, #20
 801f8e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8ea:	2200      	movs	r2, #0
 801f8ec:	f7ee f930 	bl	800db50 <osMessageQueueGet>
 801f8f0:	4603      	mov	r3, r0
 801f8f2:	2b00      	cmp	r3, #0
 801f8f4:	d154      	bne.n	801f9a0 <SpiTestTask+0x108>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f8f6:	2300      	movs	r3, #0
 801f8f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f8fc:	e017      	b.n	801f92e <SpiTestTask+0x96>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801f8fe:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f902:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f906:	7b5a      	ldrb	r2, [r3, #13]
 801f908:	f107 0314 	add.w	r3, r7, #20
 801f90c:	330e      	adds	r3, #14
 801f90e:	4611      	mov	r1, r2
 801f910:	4618      	mov	r0, r3
 801f912:	f000 f855 	bl	801f9c0 <SPI_Test_Perform>
 801f916:	4603      	mov	r3, r0
 801f918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801f91c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f920:	2bff      	cmp	r3, #255	@ 0xff
 801f922:	d00e      	beq.n	801f942 <SpiTestTask+0xaa>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801f924:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f928:	3301      	adds	r3, #1
 801f92a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801f92e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f932:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f936:	7b1b      	ldrb	r3, [r3, #12]
 801f938:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801f93c:	429a      	cmp	r2, r3
 801f93e:	d3de      	bcc.n	801f8fe <SpiTestTask+0x66>
 801f940:	e000      	b.n	801f944 <SpiTestTask+0xac>
					break;
 801f942:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801f944:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f948:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f94c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801f950:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801f954:	6812      	ldr	r2, [r2, #0]
 801f956:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801f958:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f95c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f960:	889a      	ldrh	r2, [r3, #4]
 801f962:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f966:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f96a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801f96c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f970:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801f974:	689a      	ldr	r2, [r3, #8]
 801f976:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f97a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f97e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801f980:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801f984:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801f988:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801f98c:	731a      	strb	r2, [r3, #12]
#ifdef PRINT_TESTS_DEBUG
		    printf("SPI test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801f98e:	4b0b      	ldr	r3, [pc, #44]	@ (801f9bc <SpiTestTask+0x124>)
 801f990:	6818      	ldr	r0, [r3, #0]
 801f992:	1d39      	adds	r1, r7, #4
 801f994:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f998:	2200      	movs	r2, #0
 801f99a:	f7ee f865 	bl	800da68 <osMessageQueuePut>
 801f99e:	e79e      	b.n	801f8de <SpiTestTask+0x46>
		}
		else osDelay(1);
 801f9a0:	2001      	movs	r0, #1
 801f9a2:	f7ed fcd5 	bl	800d350 <osDelay>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801f9a6:	e79a      	b.n	801f8de <SpiTestTask+0x46>
 801f9a8:	20025728 	.word	0x20025728
 801f9ac:	2002572c 	.word	0x2002572c
 801f9b0:	20025730 	.word	0x20025730
 801f9b4:	20025734 	.word	0x20025734
 801f9b8:	200002e8 	.word	0x200002e8
 801f9bc:	200002dc 	.word	0x200002dc

0801f9c0 <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801f9c0:	b590      	push	{r4, r7, lr}
 801f9c2:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801f9c6:	af00      	add	r7, sp, #0
 801f9c8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f9cc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801f9d0:	6018      	str	r0, [r3, #0]
 801f9d2:	460a      	mov	r2, r1
 801f9d4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801f9d8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801f9dc:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	osSemaphoreAcquire(spi1TxSem, 0);
 801f9de:	4b62      	ldr	r3, [pc, #392]	@ (801fb68 <SPI_Test_Perform+0x1a8>)
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	2100      	movs	r1, #0
 801f9e4:	4618      	mov	r0, r3
 801f9e6:	f7ed fec5 	bl	800d774 <osSemaphoreAcquire>
	osSemaphoreAcquire(spi4RxSem, 0);
 801f9ea:	4b60      	ldr	r3, [pc, #384]	@ (801fb6c <SPI_Test_Perform+0x1ac>)
 801f9ec:	681b      	ldr	r3, [r3, #0]
 801f9ee:	2100      	movs	r1, #0
 801f9f0:	4618      	mov	r0, r3
 801f9f2:	f7ed febf 	bl	800d774 <osSemaphoreAcquire>
	osSemaphoreAcquire(spi4TxSem, 0);
 801f9f6:	4b5e      	ldr	r3, [pc, #376]	@ (801fb70 <SPI_Test_Perform+0x1b0>)
 801f9f8:	681b      	ldr	r3, [r3, #0]
 801f9fa:	2100      	movs	r1, #0
 801f9fc:	4618      	mov	r0, r3
 801f9fe:	f7ed feb9 	bl	800d774 <osSemaphoreAcquire>
	osSemaphoreAcquire(spi1RxSem, 0);
 801fa02:	4b5c      	ldr	r3, [pc, #368]	@ (801fb74 <SPI_Test_Perform+0x1b4>)
 801fa04:	681b      	ldr	r3, [r3, #0]
 801fa06:	2100      	movs	r1, #0
 801fa08:	4618      	mov	r0, r3
 801fa0a:	f7ed feb3 	bl	800d774 <osSemaphoreAcquire>

	// reset SPI before first Xfer
	HAL_SPI_Abort(&hspi1);
 801fa0e:	485a      	ldr	r0, [pc, #360]	@ (801fb78 <SPI_Test_Perform+0x1b8>)
 801fa10:	f7e9 fc6a 	bl	80092e8 <HAL_SPI_Abort>
	HAL_SPI_Abort(&hspi4);
 801fa14:	4859      	ldr	r0, [pc, #356]	@ (801fb7c <SPI_Test_Perform+0x1bc>)
 801fa16:	f7e9 fc67 	bl	80092e8 <HAL_SPI_Abort>

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 801fa1a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa1e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fa22:	781b      	ldrb	r3, [r3, #0]
 801fa24:	b29a      	uxth	r2, r3
 801fa26:	f107 0308 	add.w	r3, r7, #8
 801fa2a:	4619      	mov	r1, r3
 801fa2c:	4853      	ldr	r0, [pc, #332]	@ (801fb7c <SPI_Test_Perform+0x1bc>)
 801fa2e:	f7e9 f9b5 	bl	8008d9c <HAL_SPI_Receive_DMA>
 801fa32:	4603      	mov	r3, r0
 801fa34:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fa38:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d001      	beq.n	801fa44 <SPI_Test_Perform+0x84>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
#endif
		return TEST_FAILED;
 801fa40:	23ff      	movs	r3, #255	@ 0xff
 801fa42:	e08b      	b.n	801fb5c <SPI_Test_Perform+0x19c>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 801fa44:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa48:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fa4c:	781b      	ldrb	r3, [r3, #0]
 801fa4e:	b29a      	uxth	r2, r3
 801fa50:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fa54:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801fa58:	6819      	ldr	r1, [r3, #0]
 801fa5a:	4847      	ldr	r0, [pc, #284]	@ (801fb78 <SPI_Test_Perform+0x1b8>)
 801fa5c:	f7e9 f8b0 	bl	8008bc0 <HAL_SPI_Transmit_DMA>
 801fa60:	4603      	mov	r3, r0
 801fa62:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fa66:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	d001      	beq.n	801fa72 <SPI_Test_Perform+0xb2>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
#endif
		return TEST_FAILED;
 801fa6e:	23ff      	movs	r3, #255	@ 0xff
 801fa70:	e074      	b.n	801fb5c <SPI_Test_Perform+0x19c>
	}
	if (osSemaphoreAcquire(spi1TxSem, 100) != osOK || osSemaphoreAcquire(spi4RxSem, 100) != osOK)
 801fa72:	4b3d      	ldr	r3, [pc, #244]	@ (801fb68 <SPI_Test_Perform+0x1a8>)
 801fa74:	681b      	ldr	r3, [r3, #0]
 801fa76:	2164      	movs	r1, #100	@ 0x64
 801fa78:	4618      	mov	r0, r3
 801fa7a:	f7ed fe7b 	bl	800d774 <osSemaphoreAcquire>
 801fa7e:	4603      	mov	r3, r0
 801fa80:	2b00      	cmp	r3, #0
 801fa82:	d108      	bne.n	801fa96 <SPI_Test_Perform+0xd6>
 801fa84:	4b39      	ldr	r3, [pc, #228]	@ (801fb6c <SPI_Test_Perform+0x1ac>)
 801fa86:	681b      	ldr	r3, [r3, #0]
 801fa88:	2164      	movs	r1, #100	@ 0x64
 801fa8a:	4618      	mov	r0, r3
 801fa8c:	f7ed fe72 	bl	800d774 <osSemaphoreAcquire>
 801fa90:	4603      	mov	r3, r0
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	d001      	beq.n	801fa9a <SPI_Test_Perform+0xda>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 semaphore timeout\n");
#endif
		return TEST_FAILED;
 801fa96:	23ff      	movs	r3, #255	@ 0xff
 801fa98:	e060      	b.n	801fb5c <SPI_Test_Perform+0x19c>
	}

	// reset SPI before second Xfer
	HAL_SPI_Abort(&hspi1);
 801fa9a:	4837      	ldr	r0, [pc, #220]	@ (801fb78 <SPI_Test_Perform+0x1b8>)
 801fa9c:	f7e9 fc24 	bl	80092e8 <HAL_SPI_Abort>
	HAL_SPI_Abort(&hspi4);
 801faa0:	4836      	ldr	r0, [pc, #216]	@ (801fb7c <SPI_Test_Perform+0x1bc>)
 801faa2:	f7e9 fc21 	bl	80092e8 <HAL_SPI_Abort>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 801faa6:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801faaa:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801faae:	781b      	ldrb	r3, [r3, #0]
 801fab0:	b29a      	uxth	r2, r3
 801fab2:	f107 0308 	add.w	r3, r7, #8
 801fab6:	4619      	mov	r1, r3
 801fab8:	4830      	ldr	r0, [pc, #192]	@ (801fb7c <SPI_Test_Perform+0x1bc>)
 801faba:	f7e9 f881 	bl	8008bc0 <HAL_SPI_Transmit_DMA>
 801fabe:	4603      	mov	r3, r0
 801fac0:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801fac4:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801fac8:	2b00      	cmp	r3, #0
 801faca:	d001      	beq.n	801fad0 <SPI_Test_Perform+0x110>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
#endif
		return TEST_FAILED;
 801facc:	23ff      	movs	r3, #255	@ 0xff
 801face:	e045      	b.n	801fb5c <SPI_Test_Perform+0x19c>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 801fad0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fad4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fad8:	781b      	ldrb	r3, [r3, #0]
 801fada:	b29a      	uxth	r2, r3
 801fadc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801fae0:	4619      	mov	r1, r3
 801fae2:	4825      	ldr	r0, [pc, #148]	@ (801fb78 <SPI_Test_Perform+0x1b8>)
 801fae4:	f7e9 f95a 	bl	8008d9c <HAL_SPI_Receive_DMA>
 801fae8:	4603      	mov	r3, r0
 801faea:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 801faee:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 801faf2:	2b00      	cmp	r3, #0
 801faf4:	d001      	beq.n	801fafa <SPI_Test_Perform+0x13a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
#endif
		return TEST_FAILED;
 801faf6:	23ff      	movs	r3, #255	@ 0xff
 801faf8:	e030      	b.n	801fb5c <SPI_Test_Perform+0x19c>
	}
	if (osSemaphoreAcquire(spi4TxSem, 100) != osOK || osSemaphoreAcquire(spi1RxSem, 100) != osOK)
 801fafa:	4b1d      	ldr	r3, [pc, #116]	@ (801fb70 <SPI_Test_Perform+0x1b0>)
 801fafc:	681b      	ldr	r3, [r3, #0]
 801fafe:	2164      	movs	r1, #100	@ 0x64
 801fb00:	4618      	mov	r0, r3
 801fb02:	f7ed fe37 	bl	800d774 <osSemaphoreAcquire>
 801fb06:	4603      	mov	r3, r0
 801fb08:	2b00      	cmp	r3, #0
 801fb0a:	d108      	bne.n	801fb1e <SPI_Test_Perform+0x15e>
 801fb0c:	4b19      	ldr	r3, [pc, #100]	@ (801fb74 <SPI_Test_Perform+0x1b4>)
 801fb0e:	681b      	ldr	r3, [r3, #0]
 801fb10:	2164      	movs	r1, #100	@ 0x64
 801fb12:	4618      	mov	r0, r3
 801fb14:	f7ed fe2e 	bl	800d774 <osSemaphoreAcquire>
 801fb18:	4603      	mov	r3, r0
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d001      	beq.n	801fb22 <SPI_Test_Perform+0x162>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 semaphore timeout\n");
#endif
		return TEST_FAILED;
 801fb1e:	23ff      	movs	r3, #255	@ 0xff
 801fb20:	e01c      	b.n	801fb5c <SPI_Test_Perform+0x19c>
	}

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 801fb22:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb26:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb2a:	781c      	ldrb	r4, [r3, #0]
 801fb2c:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801fb30:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb34:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801fb38:	7819      	ldrb	r1, [r3, #0]
 801fb3a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801fb3e:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 801fb42:	4623      	mov	r3, r4
 801fb44:	6800      	ldr	r0, [r0, #0]
 801fb46:	f7ff fae7 	bl	801f118 <Match_CRC>
 801fb4a:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 801fb4e:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 801fb52:	2b01      	cmp	r3, #1
 801fb54:	d101      	bne.n	801fb5a <SPI_Test_Perform+0x19a>
 801fb56:	2301      	movs	r3, #1
 801fb58:	e000      	b.n	801fb5c <SPI_Test_Perform+0x19c>

	return TEST_FAILED;
 801fb5a:	23ff      	movs	r3, #255	@ 0xff
}
 801fb5c:	4618      	mov	r0, r3
 801fb5e:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 801fb62:	46bd      	mov	sp, r7
 801fb64:	bd90      	pop	{r4, r7, pc}
 801fb66:	bf00      	nop
 801fb68:	20025728 	.word	0x20025728
 801fb6c:	20025734 	.word	0x20025734
 801fb70:	20025730 	.word	0x20025730
 801fb74:	2002572c 	.word	0x2002572c
 801fb78:	2000051c 	.word	0x2000051c
 801fb7c:	20000580 	.word	0x20000580

0801fb80 <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801fb80:	b580      	push	{r7, lr}
 801fb82:	b082      	sub	sp, #8
 801fb84:	af00      	add	r7, sp, #0
 801fb86:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1TxSem);
 801fb88:	687b      	ldr	r3, [r7, #4]
 801fb8a:	4a0a      	ldr	r2, [pc, #40]	@ (801fbb4 <HAL_SPI_TxCpltCallback+0x34>)
 801fb8c:	4293      	cmp	r3, r2
 801fb8e:	d104      	bne.n	801fb9a <HAL_SPI_TxCpltCallback+0x1a>
 801fb90:	4b09      	ldr	r3, [pc, #36]	@ (801fbb8 <HAL_SPI_TxCpltCallback+0x38>)
 801fb92:	681b      	ldr	r3, [r3, #0]
 801fb94:	4618      	mov	r0, r3
 801fb96:	f7ed fe53 	bl	800d840 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4TxSem);
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	4a07      	ldr	r2, [pc, #28]	@ (801fbbc <HAL_SPI_TxCpltCallback+0x3c>)
 801fb9e:	4293      	cmp	r3, r2
 801fba0:	d104      	bne.n	801fbac <HAL_SPI_TxCpltCallback+0x2c>
 801fba2:	4b07      	ldr	r3, [pc, #28]	@ (801fbc0 <HAL_SPI_TxCpltCallback+0x40>)
 801fba4:	681b      	ldr	r3, [r3, #0]
 801fba6:	4618      	mov	r0, r3
 801fba8:	f7ed fe4a 	bl	800d840 <osSemaphoreRelease>
}
 801fbac:	bf00      	nop
 801fbae:	3708      	adds	r7, #8
 801fbb0:	46bd      	mov	sp, r7
 801fbb2:	bd80      	pop	{r7, pc}
 801fbb4:	2000051c 	.word	0x2000051c
 801fbb8:	20025728 	.word	0x20025728
 801fbbc:	20000580 	.word	0x20000580
 801fbc0:	20025730 	.word	0x20025730

0801fbc4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 801fbc4:	b580      	push	{r7, lr}
 801fbc6:	b082      	sub	sp, #8
 801fbc8:	af00      	add	r7, sp, #0
 801fbca:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) osSemaphoreRelease(spi1RxSem);
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	4a0a      	ldr	r2, [pc, #40]	@ (801fbf8 <HAL_SPI_RxCpltCallback+0x34>)
 801fbd0:	4293      	cmp	r3, r2
 801fbd2:	d104      	bne.n	801fbde <HAL_SPI_RxCpltCallback+0x1a>
 801fbd4:	4b09      	ldr	r3, [pc, #36]	@ (801fbfc <HAL_SPI_RxCpltCallback+0x38>)
 801fbd6:	681b      	ldr	r3, [r3, #0]
 801fbd8:	4618      	mov	r0, r3
 801fbda:	f7ed fe31 	bl	800d840 <osSemaphoreRelease>
	if (hspi == &hspi4) osSemaphoreRelease(spi4RxSem);
 801fbde:	687b      	ldr	r3, [r7, #4]
 801fbe0:	4a07      	ldr	r2, [pc, #28]	@ (801fc00 <HAL_SPI_RxCpltCallback+0x3c>)
 801fbe2:	4293      	cmp	r3, r2
 801fbe4:	d104      	bne.n	801fbf0 <HAL_SPI_RxCpltCallback+0x2c>
 801fbe6:	4b07      	ldr	r3, [pc, #28]	@ (801fc04 <HAL_SPI_RxCpltCallback+0x40>)
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	4618      	mov	r0, r3
 801fbec:	f7ed fe28 	bl	800d840 <osSemaphoreRelease>
}
 801fbf0:	bf00      	nop
 801fbf2:	3708      	adds	r7, #8
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	bd80      	pop	{r7, pc}
 801fbf8:	2000051c 	.word	0x2000051c
 801fbfc:	2002572c 	.word	0x2002572c
 801fc00:	20000580 	.word	0x20000580
 801fc04:	20025734 	.word	0x20025734

0801fc08 <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 801fc08:	b580      	push	{r7, lr}
 801fc0a:	b0ca      	sub	sp, #296	@ 0x128
 801fc0c:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	testDoneSem = osSemaphoreNew(1, 0, NULL);
 801fc0e:	2200      	movs	r2, #0
 801fc10:	2100      	movs	r1, #0
 801fc12:	2001      	movs	r0, #1
 801fc14:	f7ed fd12 	bl	800d63c <osSemaphoreNew>
 801fc18:	4603      	mov	r3, r0
 801fc1a:	4a2e      	ldr	r2, [pc, #184]	@ (801fcd4 <TimTestTask+0xcc>)
 801fc1c:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fc1e:	4b2e      	ldr	r3, [pc, #184]	@ (801fcd8 <TimTestTask+0xd0>)
 801fc20:	6818      	ldr	r0, [r3, #0]
 801fc22:	f107 0114 	add.w	r1, r7, #20
 801fc26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fc2a:	2200      	movs	r2, #0
 801fc2c:	f7ed ff90 	bl	800db50 <osMessageQueueGet>
 801fc30:	4603      	mov	r3, r0
 801fc32:	2b00      	cmp	r3, #0
 801fc34:	d14a      	bne.n	801fccc <TimTestTask+0xc4>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fc36:	2300      	movs	r3, #0
 801fc38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fc3c:	e00d      	b.n	801fc5a <TimTestTask+0x52>
			{
				result = TIM_Test_Perform();
 801fc3e:	f000 f84f 	bl	801fce0 <TIM_Test_Perform>
 801fc42:	4603      	mov	r3, r0
 801fc44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fc48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc4c:	2bff      	cmp	r3, #255	@ 0xff
 801fc4e:	d00e      	beq.n	801fc6e <TimTestTask+0x66>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fc50:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fc54:	3301      	adds	r3, #1
 801fc56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fc5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc5e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fc62:	7b1b      	ldrb	r3, [r3, #12]
 801fc64:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fc68:	429a      	cmp	r2, r3
 801fc6a:	d3e8      	bcc.n	801fc3e <TimTestTask+0x36>
 801fc6c:	e000      	b.n	801fc70 <TimTestTask+0x68>
					break;
 801fc6e:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fc70:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc74:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc78:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fc7c:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fc80:	6812      	ldr	r2, [r2, #0]
 801fc82:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fc84:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc88:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fc8c:	889a      	ldrh	r2, [r3, #4]
 801fc8e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc92:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fc96:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fc98:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc9c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fca0:	689a      	ldr	r2, [r3, #8]
 801fca2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fca6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fcaa:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fcac:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fcb0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fcb4:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fcb8:	731a      	strb	r2, [r3, #12]
#ifdef PRINT_TESTS_DEBUG
		    printf("Timer test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fcba:	4b08      	ldr	r3, [pc, #32]	@ (801fcdc <TimTestTask+0xd4>)
 801fcbc:	6818      	ldr	r0, [r3, #0]
 801fcbe:	1d39      	adds	r1, r7, #4
 801fcc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fcc4:	2200      	movs	r2, #0
 801fcc6:	f7ed fecf 	bl	800da68 <osMessageQueuePut>
 801fcca:	e7a8      	b.n	801fc1e <TimTestTask+0x16>
		}
		else osDelay(1);
 801fccc:	2001      	movs	r0, #1
 801fcce:	f7ed fb3f 	bl	800d350 <osDelay>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fcd2:	e7a4      	b.n	801fc1e <TimTestTask+0x16>
 801fcd4:	20025738 	.word	0x20025738
 801fcd8:	200002f0 	.word	0x200002f0
 801fcdc:	200002dc 	.word	0x200002dc

0801fce0 <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 801fce0:	b580      	push	{r7, lr}
 801fce2:	b082      	sub	sp, #8
 801fce4:	af00      	add	r7, sp, #0
	static uint8_t callback_registered = 0;

	if (!callback_registered)
 801fce6:	4b35      	ldr	r3, [pc, #212]	@ (801fdbc <TIM_Test_Perform+0xdc>)
 801fce8:	781b      	ldrb	r3, [r3, #0]
 801fcea:	2b00      	cmp	r3, #0
 801fcec:	d107      	bne.n	801fcfe <TIM_Test_Perform+0x1e>
	{
		HAL_DMA_RegisterCallback(&hdma_tim6_up, HAL_DMA_XFER_CPLT_CB_ID, TIM6_UP_DMA_XferCplt);
 801fcee:	4a34      	ldr	r2, [pc, #208]	@ (801fdc0 <TIM_Test_Perform+0xe0>)
 801fcf0:	2100      	movs	r1, #0
 801fcf2:	4834      	ldr	r0, [pc, #208]	@ (801fdc4 <TIM_Test_Perform+0xe4>)
 801fcf4:	f7e3 fe08 	bl	8003908 <HAL_DMA_RegisterCallback>
		callback_registered = 1;
 801fcf8:	4b30      	ldr	r3, [pc, #192]	@ (801fdbc <TIM_Test_Perform+0xdc>)
 801fcfa:	2201      	movs	r2, #1
 801fcfc:	701a      	strb	r2, [r3, #0]
	}

	HAL_TIM_Base_Start(&htim2);
 801fcfe:	4832      	ldr	r0, [pc, #200]	@ (801fdc8 <TIM_Test_Perform+0xe8>)
 801fd00:	f7ea f9f4 	bl	800a0ec <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 801fd04:	4831      	ldr	r0, [pc, #196]	@ (801fdcc <TIM_Test_Perform+0xec>)
 801fd06:	f7ea f9f1 	bl	800a0ec <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 801fd0a:	4b2f      	ldr	r3, [pc, #188]	@ (801fdc8 <TIM_Test_Perform+0xe8>)
 801fd0c:	681b      	ldr	r3, [r3, #0]
 801fd0e:	3324      	adds	r3, #36	@ 0x24
 801fd10:	4619      	mov	r1, r3
 801fd12:	4a2f      	ldr	r2, [pc, #188]	@ (801fdd0 <TIM_Test_Perform+0xf0>)
 801fd14:	230a      	movs	r3, #10
 801fd16:	482b      	ldr	r0, [pc, #172]	@ (801fdc4 <TIM_Test_Perform+0xe4>)
 801fd18:	f7e3 fb7a 	bl	8003410 <HAL_DMA_Start_IT>
 801fd1c:	4603      	mov	r3, r0
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	d001      	beq.n	801fd26 <TIM_Test_Perform+0x46>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
#endif
		return TEST_FAILED;
 801fd22:	23ff      	movs	r3, #255	@ 0xff
 801fd24:	e046      	b.n	801fdb4 <TIM_Test_Perform+0xd4>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 801fd26:	4b29      	ldr	r3, [pc, #164]	@ (801fdcc <TIM_Test_Perform+0xec>)
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	68da      	ldr	r2, [r3, #12]
 801fd2c:	4b27      	ldr	r3, [pc, #156]	@ (801fdcc <TIM_Test_Perform+0xec>)
 801fd2e:	681b      	ldr	r3, [r3, #0]
 801fd30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801fd34:	60da      	str	r2, [r3, #12]

    if (osSemaphoreAcquire(testDoneSem, 10) != osOK)
 801fd36:	4b27      	ldr	r3, [pc, #156]	@ (801fdd4 <TIM_Test_Perform+0xf4>)
 801fd38:	681b      	ldr	r3, [r3, #0]
 801fd3a:	210a      	movs	r1, #10
 801fd3c:	4618      	mov	r0, r3
 801fd3e:	f7ed fd19 	bl	800d774 <osSemaphoreAcquire>
 801fd42:	4603      	mov	r3, r0
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	d007      	beq.n	801fd58 <TIM_Test_Perform+0x78>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("Timer test: timeout waiting for DMA complete\n");
#endif
		HAL_TIM_Base_Stop(&htim6);
 801fd48:	4820      	ldr	r0, [pc, #128]	@ (801fdcc <TIM_Test_Perform+0xec>)
 801fd4a:	f7ea fa3f 	bl	800a1cc <HAL_TIM_Base_Stop>
		HAL_TIM_Base_Stop(&htim2);
 801fd4e:	481e      	ldr	r0, [pc, #120]	@ (801fdc8 <TIM_Test_Perform+0xe8>)
 801fd50:	f7ea fa3c 	bl	800a1cc <HAL_TIM_Base_Stop>
		return TEST_FAILED;
 801fd54:	23ff      	movs	r3, #255	@ 0xff
 801fd56:	e02d      	b.n	801fdb4 <TIM_Test_Perform+0xd4>
	}

	HAL_TIM_Base_Stop(&htim6);
 801fd58:	481c      	ldr	r0, [pc, #112]	@ (801fdcc <TIM_Test_Perform+0xec>)
 801fd5a:	f7ea fa37 	bl	800a1cc <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 801fd5e:	481a      	ldr	r0, [pc, #104]	@ (801fdc8 <TIM_Test_Perform+0xe8>)
 801fd60:	f7ea fa34 	bl	800a1cc <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG2
	printf("Sampling complete\n");
#endif
	for (int i = 2; i < N_SAMPLES; i++)
 801fd64:	2302      	movs	r3, #2
 801fd66:	607b      	str	r3, [r7, #4]
 801fd68:	e020      	b.n	801fdac <TIM_Test_Perform+0xcc>
#ifdef PRINT_TESTS_DEBUG2
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] < EXPECTED_INTERVAL - TIM_ERR_TOLERANCE ||
 801fd6a:	4a19      	ldr	r2, [pc, #100]	@ (801fdd0 <TIM_Test_Perform+0xf0>)
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	3b01      	subs	r3, #1
 801fd76:	4916      	ldr	r1, [pc, #88]	@ (801fdd0 <TIM_Test_Perform+0xf0>)
 801fd78:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fd7c:	1ad3      	subs	r3, r2, r3
 801fd7e:	f24d 22e5 	movw	r2, #53989	@ 0xd2e5
 801fd82:	4293      	cmp	r3, r2
 801fd84:	d90d      	bls.n	801fda2 <TIM_Test_Perform+0xc2>
			tim2_samples[i] - tim2_samples[i-1] > EXPECTED_INTERVAL + TIM_ERR_TOLERANCE)
 801fd86:	4a12      	ldr	r2, [pc, #72]	@ (801fdd0 <TIM_Test_Perform+0xf0>)
 801fd88:	687b      	ldr	r3, [r7, #4]
 801fd8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801fd8e:	687b      	ldr	r3, [r7, #4]
 801fd90:	3b01      	subs	r3, #1
 801fd92:	490f      	ldr	r1, [pc, #60]	@ (801fdd0 <TIM_Test_Perform+0xf0>)
 801fd94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801fd98:	1ad3      	subs	r3, r2, r3
		if (tim2_samples[i] - tim2_samples[i-1] < EXPECTED_INTERVAL - TIM_ERR_TOLERANCE ||
 801fd9a:	f24d 22fa 	movw	r2, #54010	@ 0xd2fa
 801fd9e:	4293      	cmp	r3, r2
 801fda0:	d901      	bls.n	801fda6 <TIM_Test_Perform+0xc6>
			return TEST_FAILED;
 801fda2:	23ff      	movs	r3, #255	@ 0xff
 801fda4:	e006      	b.n	801fdb4 <TIM_Test_Perform+0xd4>
	for (int i = 2; i < N_SAMPLES; i++)
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	3301      	adds	r3, #1
 801fdaa:	607b      	str	r3, [r7, #4]
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	2b09      	cmp	r3, #9
 801fdb0:	dddb      	ble.n	801fd6a <TIM_Test_Perform+0x8a>
	}

	return TEST_SUCCESS;
 801fdb2:	2301      	movs	r3, #1
}
 801fdb4:	4618      	mov	r0, r3
 801fdb6:	3708      	adds	r7, #8
 801fdb8:	46bd      	mov	sp, r7
 801fdba:	bd80      	pop	{r7, pc}
 801fdbc:	20025764 	.word	0x20025764
 801fdc0:	0801fdd9 	.word	0x0801fdd9
 801fdc4:	2000084c 	.word	0x2000084c
 801fdc8:	200007b4 	.word	0x200007b4
 801fdcc:	20000800 	.word	0x20000800
 801fdd0:	2002573c 	.word	0x2002573c
 801fdd4:	20025738 	.word	0x20025738

0801fdd8 <TIM6_UP_DMA_XferCplt>:
 * Using the same strategy with FreeRTOS will break the code, so I implemented
 * here a different strategy.
 */

void TIM6_UP_DMA_XferCplt(DMA_HandleTypeDef *hdma)
{
 801fdd8:	b580      	push	{r7, lr}
 801fdda:	b082      	sub	sp, #8
 801fddc:	af00      	add	r7, sp, #0
 801fdde:	6078      	str	r0, [r7, #4]
    if (hdma == &hdma_tim6_up)
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	4a06      	ldr	r2, [pc, #24]	@ (801fdfc <TIM6_UP_DMA_XferCplt+0x24>)
 801fde4:	4293      	cmp	r3, r2
 801fde6:	d104      	bne.n	801fdf2 <TIM6_UP_DMA_XferCplt+0x1a>
    {
    	osSemaphoreRelease(testDoneSem);
 801fde8:	4b05      	ldr	r3, [pc, #20]	@ (801fe00 <TIM6_UP_DMA_XferCplt+0x28>)
 801fdea:	681b      	ldr	r3, [r3, #0]
 801fdec:	4618      	mov	r0, r3
 801fdee:	f7ed fd27 	bl	800d840 <osSemaphoreRelease>
    }
}
 801fdf2:	bf00      	nop
 801fdf4:	3708      	adds	r7, #8
 801fdf6:	46bd      	mov	sp, r7
 801fdf8:	bd80      	pop	{r7, pc}
 801fdfa:	bf00      	nop
 801fdfc:	2000084c 	.word	0x2000084c
 801fe00:	20025738 	.word	0x20025738

0801fe04 <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 801fe04:	b580      	push	{r7, lr}
 801fe06:	b0ca      	sub	sp, #296	@ 0x128
 801fe08:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;

	uart4RxSem = osSemaphoreNew(1, 0, NULL);
 801fe0a:	2200      	movs	r2, #0
 801fe0c:	2100      	movs	r1, #0
 801fe0e:	2001      	movs	r0, #1
 801fe10:	f7ed fc14 	bl	800d63c <osSemaphoreNew>
 801fe14:	4603      	mov	r3, r0
 801fe16:	4a35      	ldr	r2, [pc, #212]	@ (801feec <UartTestTask+0xe8>)
 801fe18:	6013      	str	r3, [r2, #0]
	uart5RxSem = osSemaphoreNew(1, 0, NULL);
 801fe1a:	2200      	movs	r2, #0
 801fe1c:	2100      	movs	r1, #0
 801fe1e:	2001      	movs	r0, #1
 801fe20:	f7ed fc0c 	bl	800d63c <osSemaphoreNew>
 801fe24:	4603      	mov	r3, r0
 801fe26:	4a32      	ldr	r2, [pc, #200]	@ (801fef0 <UartTestTask+0xec>)
 801fe28:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801fe2a:	4b32      	ldr	r3, [pc, #200]	@ (801fef4 <UartTestTask+0xf0>)
 801fe2c:	6818      	ldr	r0, [r3, #0]
 801fe2e:	f107 0114 	add.w	r1, r7, #20
 801fe32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fe36:	2200      	movs	r2, #0
 801fe38:	f7ed fe8a 	bl	800db50 <osMessageQueueGet>
 801fe3c:	4603      	mov	r3, r0
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d1f3      	bne.n	801fe2a <UartTestTask+0x26>
		{
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fe42:	2300      	movs	r3, #0
 801fe44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fe48:	e017      	b.n	801fe7a <UartTestTask+0x76>
			{
                result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 801fe4a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fe52:	7b5a      	ldrb	r2, [r3, #13]
 801fe54:	f107 0314 	add.w	r3, r7, #20
 801fe58:	330e      	adds	r3, #14
 801fe5a:	4611      	mov	r1, r2
 801fe5c:	4618      	mov	r0, r3
 801fe5e:	f000 f84d 	bl	801fefc <UART_Test_Perform>
 801fe62:	4603      	mov	r3, r0
 801fe64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fe68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fe6c:	2bff      	cmp	r3, #255	@ 0xff
 801fe6e:	d00e      	beq.n	801fe8e <UartTestTask+0x8a>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fe70:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fe74:	3301      	adds	r3, #1
 801fe76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fe7a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe7e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fe82:	7b1b      	ldrb	r3, [r3, #12]
 801fe84:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fe88:	429a      	cmp	r2, r3
 801fe8a:	d3de      	bcc.n	801fe4a <UartTestTask+0x46>
 801fe8c:	e000      	b.n	801fe90 <UartTestTask+0x8c>
					break;
 801fe8e:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fe90:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fe94:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fe98:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fe9c:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 801fea0:	6812      	ldr	r2, [r2, #0]
 801fea2:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fea4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fea8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801feac:	889a      	ldrh	r2, [r3, #4]
 801feae:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801feb2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801feb6:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801feb8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801febc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 801fec0:	689a      	ldr	r2, [r3, #8]
 801fec2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fec6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801feca:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fecc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fed0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 801fed4:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fed8:	731a      	strb	r2, [r3, #12]
#ifdef PRINT_TESTS_DEBUG
		    printf("UART test %s\n", (result == TEST_SUCCESS)? "success" : "failed");
#endif

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801feda:	4b07      	ldr	r3, [pc, #28]	@ (801fef8 <UartTestTask+0xf4>)
 801fedc:	6818      	ldr	r0, [r3, #0]
 801fede:	1d39      	adds	r1, r7, #4
 801fee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fee4:	2200      	movs	r2, #0
 801fee6:	f7ed fdbf 	bl	800da68 <osMessageQueuePut>
		if(osMessageQueueGet(uartQueueHandle, &test_data, 0, osWaitForever) == osOK)
 801feea:	e79e      	b.n	801fe2a <UartTestTask+0x26>
 801feec:	20025768 	.word	0x20025768
 801fef0:	2002576c 	.word	0x2002576c
 801fef4:	200002e0 	.word	0x200002e0
 801fef8:	200002dc 	.word	0x200002dc

0801fefc <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 801fefc:	b590      	push	{r4, r7, lr}
 801fefe:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 801ff02:	af00      	add	r7, sp, #0
 801ff04:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff08:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801ff0c:	6018      	str	r0, [r3, #0]
 801ff0e:	460a      	mov	r2, r1
 801ff10:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff14:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff18:	701a      	strb	r2, [r3, #0]
	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	osSemaphoreAcquire(uart4RxSem, 0);
 801ff1a:	4b4b      	ldr	r3, [pc, #300]	@ (8020048 <UART_Test_Perform+0x14c>)
 801ff1c:	681b      	ldr	r3, [r3, #0]
 801ff1e:	2100      	movs	r1, #0
 801ff20:	4618      	mov	r0, r3
 801ff22:	f7ed fc27 	bl	800d774 <osSemaphoreAcquire>
	osSemaphoreAcquire(uart5RxSem, 0);
 801ff26:	4b49      	ldr	r3, [pc, #292]	@ (802004c <UART_Test_Perform+0x150>)
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	2100      	movs	r1, #0
 801ff2c:	4618      	mov	r0, r3
 801ff2e:	f7ed fc21 	bl	800d774 <osSemaphoreAcquire>

	HAL_UART_Abort(&huart4);
 801ff32:	4847      	ldr	r0, [pc, #284]	@ (8020050 <UART_Test_Perform+0x154>)
 801ff34:	f7ea ff4a 	bl	800adcc <HAL_UART_Abort>
	HAL_UART_Abort(&huart5);
 801ff38:	4846      	ldr	r0, [pc, #280]	@ (8020054 <UART_Test_Perform+0x158>)
 801ff3a:	f7ea ff47 	bl	800adcc <HAL_UART_Abort>

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 801ff3e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff42:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff46:	781b      	ldrb	r3, [r3, #0]
 801ff48:	b29a      	uxth	r2, r3
 801ff4a:	f107 030c 	add.w	r3, r7, #12
 801ff4e:	4619      	mov	r1, r3
 801ff50:	4840      	ldr	r0, [pc, #256]	@ (8020054 <UART_Test_Perform+0x158>)
 801ff52:	f7ea fef7 	bl	800ad44 <HAL_UART_Receive_DMA>
 801ff56:	4603      	mov	r3, r0
 801ff58:	2b00      	cmp	r3, #0
 801ff5a:	d001      	beq.n	801ff60 <UART_Test_Perform+0x64>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
#endif
		return TEST_FAILED;
 801ff5c:	23ff      	movs	r3, #255	@ 0xff
 801ff5e:	e06d      	b.n	802003c <UART_Test_Perform+0x140>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 801ff60:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff64:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ff68:	781b      	ldrb	r3, [r3, #0]
 801ff6a:	b29a      	uxth	r2, r3
 801ff6c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ff70:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 801ff74:	6819      	ldr	r1, [r3, #0]
 801ff76:	4836      	ldr	r0, [pc, #216]	@ (8020050 <UART_Test_Perform+0x154>)
 801ff78:	f7ea fe86 	bl	800ac88 <HAL_UART_Transmit_IT>
 801ff7c:	4603      	mov	r3, r0
 801ff7e:	2b00      	cmp	r3, #0
 801ff80:	d001      	beq.n	801ff86 <UART_Test_Perform+0x8a>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
#endif
		return TEST_FAILED;
 801ff82:	23ff      	movs	r3, #255	@ 0xff
 801ff84:	e05a      	b.n	802003c <UART_Test_Perform+0x140>
	}
	if (osSemaphoreAcquire(uart5RxSem, 10) != osOK) {
 801ff86:	4b31      	ldr	r3, [pc, #196]	@ (802004c <UART_Test_Perform+0x150>)
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	210a      	movs	r1, #10
 801ff8c:	4618      	mov	r0, r3
 801ff8e:	f7ed fbf1 	bl	800d774 <osSemaphoreAcquire>
 801ff92:	4603      	mov	r3, r0
 801ff94:	2b00      	cmp	r3, #0
 801ff96:	d001      	beq.n	801ff9c <UART_Test_Perform+0xa0>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart5 RX semaphore timeout\n");
#endif
	    return TEST_FAILED;
 801ff98:	23ff      	movs	r3, #255	@ 0xff
 801ff9a:	e04f      	b.n	802003c <UART_Test_Perform+0x140>
	}

	HAL_UART_Abort(&huart4);
 801ff9c:	482c      	ldr	r0, [pc, #176]	@ (8020050 <UART_Test_Perform+0x154>)
 801ff9e:	f7ea ff15 	bl	800adcc <HAL_UART_Abort>
	HAL_UART_Abort(&huart5);
 801ffa2:	482c      	ldr	r0, [pc, #176]	@ (8020054 <UART_Test_Perform+0x158>)
 801ffa4:	f7ea ff12 	bl	800adcc <HAL_UART_Abort>

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 801ffa8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ffac:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ffb0:	781b      	ldrb	r3, [r3, #0]
 801ffb2:	b29a      	uxth	r2, r3
 801ffb4:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 801ffb8:	4619      	mov	r1, r3
 801ffba:	4825      	ldr	r0, [pc, #148]	@ (8020050 <UART_Test_Perform+0x154>)
 801ffbc:	f7ea fec2 	bl	800ad44 <HAL_UART_Receive_DMA>
 801ffc0:	4603      	mov	r3, r0
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d001      	beq.n	801ffca <UART_Test_Perform+0xce>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
#endif
		return TEST_FAILED;
 801ffc6:	23ff      	movs	r3, #255	@ 0xff
 801ffc8:	e038      	b.n	802003c <UART_Test_Perform+0x140>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 801ffca:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 801ffce:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 801ffd2:	781b      	ldrb	r3, [r3, #0]
 801ffd4:	b29a      	uxth	r2, r3
 801ffd6:	f107 030c 	add.w	r3, r7, #12
 801ffda:	4619      	mov	r1, r3
 801ffdc:	481d      	ldr	r0, [pc, #116]	@ (8020054 <UART_Test_Perform+0x158>)
 801ffde:	f7ea fe53 	bl	800ac88 <HAL_UART_Transmit_IT>
 801ffe2:	4603      	mov	r3, r0
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d001      	beq.n	801ffec <UART_Test_Perform+0xf0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
#endif
		return TEST_FAILED;
 801ffe8:	23ff      	movs	r3, #255	@ 0xff
 801ffea:	e027      	b.n	802003c <UART_Test_Perform+0x140>
	}
	if (osSemaphoreAcquire(uart4RxSem, 10) != osOK) {
 801ffec:	4b16      	ldr	r3, [pc, #88]	@ (8020048 <UART_Test_Perform+0x14c>)
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	210a      	movs	r1, #10
 801fff2:	4618      	mov	r0, r3
 801fff4:	f7ed fbbe 	bl	800d774 <osSemaphoreAcquire>
 801fff8:	4603      	mov	r3, r0
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d001      	beq.n	8020002 <UART_Test_Perform+0x106>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart4 RX semaphore timeout\n");
#endif
	    return TEST_FAILED;
 801fffe:	23ff      	movs	r3, #255	@ 0xff
 8020000:	e01c      	b.n	802003c <UART_Test_Perform+0x140>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8020002:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020006:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802000a:	781c      	ldrb	r4, [r3, #0]
 802000c:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8020010:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020014:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020018:	7819      	ldrb	r1, [r3, #0]
 802001a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802001e:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020022:	4623      	mov	r3, r4
 8020024:	6800      	ldr	r0, [r0, #0]
 8020026:	f7ff f877 	bl	801f118 <Match_CRC>
 802002a:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 802002e:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020032:	2b01      	cmp	r3, #1
 8020034:	d101      	bne.n	802003a <UART_Test_Perform+0x13e>
 8020036:	2301      	movs	r3, #1
 8020038:	e000      	b.n	802003c <UART_Test_Perform+0x140>

	return TEST_FAILED;
 802003a:	23ff      	movs	r3, #255	@ 0xff
}
 802003c:	4618      	mov	r0, r3
 802003e:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020042:	46bd      	mov	sp, r7
 8020044:	bd90      	pop	{r4, r7, pc}
 8020046:	bf00      	nop
 8020048:	20025768 	.word	0x20025768
 802004c:	2002576c 	.word	0x2002576c
 8020050:	200008ac 	.word	0x200008ac
 8020054:	20000934 	.word	0x20000934

08020058 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8020058:	b580      	push	{r7, lr}
 802005a:	b082      	sub	sp, #8
 802005c:	af00      	add	r7, sp, #0
 802005e:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) osSemaphoreRelease(uart4RxSem);
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	4a0a      	ldr	r2, [pc, #40]	@ (802008c <HAL_UART_RxCpltCallback+0x34>)
 8020064:	4293      	cmp	r3, r2
 8020066:	d104      	bne.n	8020072 <HAL_UART_RxCpltCallback+0x1a>
 8020068:	4b09      	ldr	r3, [pc, #36]	@ (8020090 <HAL_UART_RxCpltCallback+0x38>)
 802006a:	681b      	ldr	r3, [r3, #0]
 802006c:	4618      	mov	r0, r3
 802006e:	f7ed fbe7 	bl	800d840 <osSemaphoreRelease>
    if (huart == &huart5) osSemaphoreRelease(uart5RxSem);
 8020072:	687b      	ldr	r3, [r7, #4]
 8020074:	4a07      	ldr	r2, [pc, #28]	@ (8020094 <HAL_UART_RxCpltCallback+0x3c>)
 8020076:	4293      	cmp	r3, r2
 8020078:	d104      	bne.n	8020084 <HAL_UART_RxCpltCallback+0x2c>
 802007a:	4b07      	ldr	r3, [pc, #28]	@ (8020098 <HAL_UART_RxCpltCallback+0x40>)
 802007c:	681b      	ldr	r3, [r3, #0]
 802007e:	4618      	mov	r0, r3
 8020080:	f7ed fbde 	bl	800d840 <osSemaphoreRelease>
}
 8020084:	bf00      	nop
 8020086:	3708      	adds	r7, #8
 8020088:	46bd      	mov	sp, r7
 802008a:	bd80      	pop	{r7, pc}
 802008c:	200008ac 	.word	0x200008ac
 8020090:	20025768 	.word	0x20025768
 8020094:	20000934 	.word	0x20000934
 8020098:	2002576c 	.word	0x2002576c

0802009c <rand>:
 802009c:	4b16      	ldr	r3, [pc, #88]	@ (80200f8 <rand+0x5c>)
 802009e:	b510      	push	{r4, lr}
 80200a0:	681c      	ldr	r4, [r3, #0]
 80200a2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80200a4:	b9b3      	cbnz	r3, 80200d4 <rand+0x38>
 80200a6:	2018      	movs	r0, #24
 80200a8:	f000 fb9a 	bl	80207e0 <malloc>
 80200ac:	4602      	mov	r2, r0
 80200ae:	6320      	str	r0, [r4, #48]	@ 0x30
 80200b0:	b920      	cbnz	r0, 80200bc <rand+0x20>
 80200b2:	4b12      	ldr	r3, [pc, #72]	@ (80200fc <rand+0x60>)
 80200b4:	4812      	ldr	r0, [pc, #72]	@ (8020100 <rand+0x64>)
 80200b6:	2152      	movs	r1, #82	@ 0x52
 80200b8:	f000 fb2a 	bl	8020710 <__assert_func>
 80200bc:	4911      	ldr	r1, [pc, #68]	@ (8020104 <rand+0x68>)
 80200be:	4b12      	ldr	r3, [pc, #72]	@ (8020108 <rand+0x6c>)
 80200c0:	e9c0 1300 	strd	r1, r3, [r0]
 80200c4:	4b11      	ldr	r3, [pc, #68]	@ (802010c <rand+0x70>)
 80200c6:	6083      	str	r3, [r0, #8]
 80200c8:	230b      	movs	r3, #11
 80200ca:	8183      	strh	r3, [r0, #12]
 80200cc:	2100      	movs	r1, #0
 80200ce:	2001      	movs	r0, #1
 80200d0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80200d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80200d6:	480e      	ldr	r0, [pc, #56]	@ (8020110 <rand+0x74>)
 80200d8:	690b      	ldr	r3, [r1, #16]
 80200da:	694c      	ldr	r4, [r1, #20]
 80200dc:	4a0d      	ldr	r2, [pc, #52]	@ (8020114 <rand+0x78>)
 80200de:	4358      	muls	r0, r3
 80200e0:	fb02 0004 	mla	r0, r2, r4, r0
 80200e4:	fba3 3202 	umull	r3, r2, r3, r2
 80200e8:	3301      	adds	r3, #1
 80200ea:	eb40 0002 	adc.w	r0, r0, r2
 80200ee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80200f2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80200f6:	bd10      	pop	{r4, pc}
 80200f8:	2000003c 	.word	0x2000003c
 80200fc:	08024ed6 	.word	0x08024ed6
 8020100:	08024eed 	.word	0x08024eed
 8020104:	abcd330e 	.word	0xabcd330e
 8020108:	e66d1234 	.word	0xe66d1234
 802010c:	0005deec 	.word	0x0005deec
 8020110:	5851f42d 	.word	0x5851f42d
 8020114:	4c957f2d 	.word	0x4c957f2d

08020118 <std>:
 8020118:	2300      	movs	r3, #0
 802011a:	b510      	push	{r4, lr}
 802011c:	4604      	mov	r4, r0
 802011e:	e9c0 3300 	strd	r3, r3, [r0]
 8020122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020126:	6083      	str	r3, [r0, #8]
 8020128:	8181      	strh	r1, [r0, #12]
 802012a:	6643      	str	r3, [r0, #100]	@ 0x64
 802012c:	81c2      	strh	r2, [r0, #14]
 802012e:	6183      	str	r3, [r0, #24]
 8020130:	4619      	mov	r1, r3
 8020132:	2208      	movs	r2, #8
 8020134:	305c      	adds	r0, #92	@ 0x5c
 8020136:	f000 fa09 	bl	802054c <memset>
 802013a:	4b0d      	ldr	r3, [pc, #52]	@ (8020170 <std+0x58>)
 802013c:	6263      	str	r3, [r4, #36]	@ 0x24
 802013e:	4b0d      	ldr	r3, [pc, #52]	@ (8020174 <std+0x5c>)
 8020140:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020142:	4b0d      	ldr	r3, [pc, #52]	@ (8020178 <std+0x60>)
 8020144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020146:	4b0d      	ldr	r3, [pc, #52]	@ (802017c <std+0x64>)
 8020148:	6323      	str	r3, [r4, #48]	@ 0x30
 802014a:	4b0d      	ldr	r3, [pc, #52]	@ (8020180 <std+0x68>)
 802014c:	6224      	str	r4, [r4, #32]
 802014e:	429c      	cmp	r4, r3
 8020150:	d006      	beq.n	8020160 <std+0x48>
 8020152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020156:	4294      	cmp	r4, r2
 8020158:	d002      	beq.n	8020160 <std+0x48>
 802015a:	33d0      	adds	r3, #208	@ 0xd0
 802015c:	429c      	cmp	r4, r3
 802015e:	d105      	bne.n	802016c <std+0x54>
 8020160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020168:	f000 bac0 	b.w	80206ec <__retarget_lock_init_recursive>
 802016c:	bd10      	pop	{r4, pc}
 802016e:	bf00      	nop
 8020170:	0802037d 	.word	0x0802037d
 8020174:	0802039f 	.word	0x0802039f
 8020178:	080203d7 	.word	0x080203d7
 802017c:	080203fb 	.word	0x080203fb
 8020180:	20025770 	.word	0x20025770

08020184 <stdio_exit_handler>:
 8020184:	4a02      	ldr	r2, [pc, #8]	@ (8020190 <stdio_exit_handler+0xc>)
 8020186:	4903      	ldr	r1, [pc, #12]	@ (8020194 <stdio_exit_handler+0x10>)
 8020188:	4803      	ldr	r0, [pc, #12]	@ (8020198 <stdio_exit_handler+0x14>)
 802018a:	f000 b869 	b.w	8020260 <_fwalk_sglue>
 802018e:	bf00      	nop
 8020190:	20000030 	.word	0x20000030
 8020194:	08020ff1 	.word	0x08020ff1
 8020198:	20000040 	.word	0x20000040

0802019c <cleanup_stdio>:
 802019c:	6841      	ldr	r1, [r0, #4]
 802019e:	4b0c      	ldr	r3, [pc, #48]	@ (80201d0 <cleanup_stdio+0x34>)
 80201a0:	4299      	cmp	r1, r3
 80201a2:	b510      	push	{r4, lr}
 80201a4:	4604      	mov	r4, r0
 80201a6:	d001      	beq.n	80201ac <cleanup_stdio+0x10>
 80201a8:	f000 ff22 	bl	8020ff0 <_fflush_r>
 80201ac:	68a1      	ldr	r1, [r4, #8]
 80201ae:	4b09      	ldr	r3, [pc, #36]	@ (80201d4 <cleanup_stdio+0x38>)
 80201b0:	4299      	cmp	r1, r3
 80201b2:	d002      	beq.n	80201ba <cleanup_stdio+0x1e>
 80201b4:	4620      	mov	r0, r4
 80201b6:	f000 ff1b 	bl	8020ff0 <_fflush_r>
 80201ba:	68e1      	ldr	r1, [r4, #12]
 80201bc:	4b06      	ldr	r3, [pc, #24]	@ (80201d8 <cleanup_stdio+0x3c>)
 80201be:	4299      	cmp	r1, r3
 80201c0:	d004      	beq.n	80201cc <cleanup_stdio+0x30>
 80201c2:	4620      	mov	r0, r4
 80201c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80201c8:	f000 bf12 	b.w	8020ff0 <_fflush_r>
 80201cc:	bd10      	pop	{r4, pc}
 80201ce:	bf00      	nop
 80201d0:	20025770 	.word	0x20025770
 80201d4:	200257d8 	.word	0x200257d8
 80201d8:	20025840 	.word	0x20025840

080201dc <global_stdio_init.part.0>:
 80201dc:	b510      	push	{r4, lr}
 80201de:	4b0b      	ldr	r3, [pc, #44]	@ (802020c <global_stdio_init.part.0+0x30>)
 80201e0:	4c0b      	ldr	r4, [pc, #44]	@ (8020210 <global_stdio_init.part.0+0x34>)
 80201e2:	4a0c      	ldr	r2, [pc, #48]	@ (8020214 <global_stdio_init.part.0+0x38>)
 80201e4:	601a      	str	r2, [r3, #0]
 80201e6:	4620      	mov	r0, r4
 80201e8:	2200      	movs	r2, #0
 80201ea:	2104      	movs	r1, #4
 80201ec:	f7ff ff94 	bl	8020118 <std>
 80201f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80201f4:	2201      	movs	r2, #1
 80201f6:	2109      	movs	r1, #9
 80201f8:	f7ff ff8e 	bl	8020118 <std>
 80201fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020200:	2202      	movs	r2, #2
 8020202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020206:	2112      	movs	r1, #18
 8020208:	f7ff bf86 	b.w	8020118 <std>
 802020c:	200258a8 	.word	0x200258a8
 8020210:	20025770 	.word	0x20025770
 8020214:	08020185 	.word	0x08020185

08020218 <__sfp_lock_acquire>:
 8020218:	4801      	ldr	r0, [pc, #4]	@ (8020220 <__sfp_lock_acquire+0x8>)
 802021a:	f000 ba68 	b.w	80206ee <__retarget_lock_acquire_recursive>
 802021e:	bf00      	nop
 8020220:	200258b1 	.word	0x200258b1

08020224 <__sfp_lock_release>:
 8020224:	4801      	ldr	r0, [pc, #4]	@ (802022c <__sfp_lock_release+0x8>)
 8020226:	f000 ba63 	b.w	80206f0 <__retarget_lock_release_recursive>
 802022a:	bf00      	nop
 802022c:	200258b1 	.word	0x200258b1

08020230 <__sinit>:
 8020230:	b510      	push	{r4, lr}
 8020232:	4604      	mov	r4, r0
 8020234:	f7ff fff0 	bl	8020218 <__sfp_lock_acquire>
 8020238:	6a23      	ldr	r3, [r4, #32]
 802023a:	b11b      	cbz	r3, 8020244 <__sinit+0x14>
 802023c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020240:	f7ff bff0 	b.w	8020224 <__sfp_lock_release>
 8020244:	4b04      	ldr	r3, [pc, #16]	@ (8020258 <__sinit+0x28>)
 8020246:	6223      	str	r3, [r4, #32]
 8020248:	4b04      	ldr	r3, [pc, #16]	@ (802025c <__sinit+0x2c>)
 802024a:	681b      	ldr	r3, [r3, #0]
 802024c:	2b00      	cmp	r3, #0
 802024e:	d1f5      	bne.n	802023c <__sinit+0xc>
 8020250:	f7ff ffc4 	bl	80201dc <global_stdio_init.part.0>
 8020254:	e7f2      	b.n	802023c <__sinit+0xc>
 8020256:	bf00      	nop
 8020258:	0802019d 	.word	0x0802019d
 802025c:	200258a8 	.word	0x200258a8

08020260 <_fwalk_sglue>:
 8020260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020264:	4607      	mov	r7, r0
 8020266:	4688      	mov	r8, r1
 8020268:	4614      	mov	r4, r2
 802026a:	2600      	movs	r6, #0
 802026c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020270:	f1b9 0901 	subs.w	r9, r9, #1
 8020274:	d505      	bpl.n	8020282 <_fwalk_sglue+0x22>
 8020276:	6824      	ldr	r4, [r4, #0]
 8020278:	2c00      	cmp	r4, #0
 802027a:	d1f7      	bne.n	802026c <_fwalk_sglue+0xc>
 802027c:	4630      	mov	r0, r6
 802027e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020282:	89ab      	ldrh	r3, [r5, #12]
 8020284:	2b01      	cmp	r3, #1
 8020286:	d907      	bls.n	8020298 <_fwalk_sglue+0x38>
 8020288:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802028c:	3301      	adds	r3, #1
 802028e:	d003      	beq.n	8020298 <_fwalk_sglue+0x38>
 8020290:	4629      	mov	r1, r5
 8020292:	4638      	mov	r0, r7
 8020294:	47c0      	blx	r8
 8020296:	4306      	orrs	r6, r0
 8020298:	3568      	adds	r5, #104	@ 0x68
 802029a:	e7e9      	b.n	8020270 <_fwalk_sglue+0x10>

0802029c <iprintf>:
 802029c:	b40f      	push	{r0, r1, r2, r3}
 802029e:	b507      	push	{r0, r1, r2, lr}
 80202a0:	4906      	ldr	r1, [pc, #24]	@ (80202bc <iprintf+0x20>)
 80202a2:	ab04      	add	r3, sp, #16
 80202a4:	6808      	ldr	r0, [r1, #0]
 80202a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80202aa:	6881      	ldr	r1, [r0, #8]
 80202ac:	9301      	str	r3, [sp, #4]
 80202ae:	f000 fb77 	bl	80209a0 <_vfiprintf_r>
 80202b2:	b003      	add	sp, #12
 80202b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80202b8:	b004      	add	sp, #16
 80202ba:	4770      	bx	lr
 80202bc:	2000003c 	.word	0x2000003c

080202c0 <_puts_r>:
 80202c0:	6a03      	ldr	r3, [r0, #32]
 80202c2:	b570      	push	{r4, r5, r6, lr}
 80202c4:	6884      	ldr	r4, [r0, #8]
 80202c6:	4605      	mov	r5, r0
 80202c8:	460e      	mov	r6, r1
 80202ca:	b90b      	cbnz	r3, 80202d0 <_puts_r+0x10>
 80202cc:	f7ff ffb0 	bl	8020230 <__sinit>
 80202d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80202d2:	07db      	lsls	r3, r3, #31
 80202d4:	d405      	bmi.n	80202e2 <_puts_r+0x22>
 80202d6:	89a3      	ldrh	r3, [r4, #12]
 80202d8:	0598      	lsls	r0, r3, #22
 80202da:	d402      	bmi.n	80202e2 <_puts_r+0x22>
 80202dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80202de:	f000 fa06 	bl	80206ee <__retarget_lock_acquire_recursive>
 80202e2:	89a3      	ldrh	r3, [r4, #12]
 80202e4:	0719      	lsls	r1, r3, #28
 80202e6:	d502      	bpl.n	80202ee <_puts_r+0x2e>
 80202e8:	6923      	ldr	r3, [r4, #16]
 80202ea:	2b00      	cmp	r3, #0
 80202ec:	d135      	bne.n	802035a <_puts_r+0x9a>
 80202ee:	4621      	mov	r1, r4
 80202f0:	4628      	mov	r0, r5
 80202f2:	f000 f8c5 	bl	8020480 <__swsetup_r>
 80202f6:	b380      	cbz	r0, 802035a <_puts_r+0x9a>
 80202f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80202fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80202fe:	07da      	lsls	r2, r3, #31
 8020300:	d405      	bmi.n	802030e <_puts_r+0x4e>
 8020302:	89a3      	ldrh	r3, [r4, #12]
 8020304:	059b      	lsls	r3, r3, #22
 8020306:	d402      	bmi.n	802030e <_puts_r+0x4e>
 8020308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802030a:	f000 f9f1 	bl	80206f0 <__retarget_lock_release_recursive>
 802030e:	4628      	mov	r0, r5
 8020310:	bd70      	pop	{r4, r5, r6, pc}
 8020312:	2b00      	cmp	r3, #0
 8020314:	da04      	bge.n	8020320 <_puts_r+0x60>
 8020316:	69a2      	ldr	r2, [r4, #24]
 8020318:	429a      	cmp	r2, r3
 802031a:	dc17      	bgt.n	802034c <_puts_r+0x8c>
 802031c:	290a      	cmp	r1, #10
 802031e:	d015      	beq.n	802034c <_puts_r+0x8c>
 8020320:	6823      	ldr	r3, [r4, #0]
 8020322:	1c5a      	adds	r2, r3, #1
 8020324:	6022      	str	r2, [r4, #0]
 8020326:	7019      	strb	r1, [r3, #0]
 8020328:	68a3      	ldr	r3, [r4, #8]
 802032a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 802032e:	3b01      	subs	r3, #1
 8020330:	60a3      	str	r3, [r4, #8]
 8020332:	2900      	cmp	r1, #0
 8020334:	d1ed      	bne.n	8020312 <_puts_r+0x52>
 8020336:	2b00      	cmp	r3, #0
 8020338:	da11      	bge.n	802035e <_puts_r+0x9e>
 802033a:	4622      	mov	r2, r4
 802033c:	210a      	movs	r1, #10
 802033e:	4628      	mov	r0, r5
 8020340:	f000 f85f 	bl	8020402 <__swbuf_r>
 8020344:	3001      	adds	r0, #1
 8020346:	d0d7      	beq.n	80202f8 <_puts_r+0x38>
 8020348:	250a      	movs	r5, #10
 802034a:	e7d7      	b.n	80202fc <_puts_r+0x3c>
 802034c:	4622      	mov	r2, r4
 802034e:	4628      	mov	r0, r5
 8020350:	f000 f857 	bl	8020402 <__swbuf_r>
 8020354:	3001      	adds	r0, #1
 8020356:	d1e7      	bne.n	8020328 <_puts_r+0x68>
 8020358:	e7ce      	b.n	80202f8 <_puts_r+0x38>
 802035a:	3e01      	subs	r6, #1
 802035c:	e7e4      	b.n	8020328 <_puts_r+0x68>
 802035e:	6823      	ldr	r3, [r4, #0]
 8020360:	1c5a      	adds	r2, r3, #1
 8020362:	6022      	str	r2, [r4, #0]
 8020364:	220a      	movs	r2, #10
 8020366:	701a      	strb	r2, [r3, #0]
 8020368:	e7ee      	b.n	8020348 <_puts_r+0x88>
	...

0802036c <puts>:
 802036c:	4b02      	ldr	r3, [pc, #8]	@ (8020378 <puts+0xc>)
 802036e:	4601      	mov	r1, r0
 8020370:	6818      	ldr	r0, [r3, #0]
 8020372:	f7ff bfa5 	b.w	80202c0 <_puts_r>
 8020376:	bf00      	nop
 8020378:	2000003c 	.word	0x2000003c

0802037c <__sread>:
 802037c:	b510      	push	{r4, lr}
 802037e:	460c      	mov	r4, r1
 8020380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020384:	f000 f96a 	bl	802065c <_read_r>
 8020388:	2800      	cmp	r0, #0
 802038a:	bfab      	itete	ge
 802038c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802038e:	89a3      	ldrhlt	r3, [r4, #12]
 8020390:	181b      	addge	r3, r3, r0
 8020392:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020396:	bfac      	ite	ge
 8020398:	6563      	strge	r3, [r4, #84]	@ 0x54
 802039a:	81a3      	strhlt	r3, [r4, #12]
 802039c:	bd10      	pop	{r4, pc}

0802039e <__swrite>:
 802039e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80203a2:	461f      	mov	r7, r3
 80203a4:	898b      	ldrh	r3, [r1, #12]
 80203a6:	05db      	lsls	r3, r3, #23
 80203a8:	4605      	mov	r5, r0
 80203aa:	460c      	mov	r4, r1
 80203ac:	4616      	mov	r6, r2
 80203ae:	d505      	bpl.n	80203bc <__swrite+0x1e>
 80203b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203b4:	2302      	movs	r3, #2
 80203b6:	2200      	movs	r2, #0
 80203b8:	f000 f93e 	bl	8020638 <_lseek_r>
 80203bc:	89a3      	ldrh	r3, [r4, #12]
 80203be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80203c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80203c6:	81a3      	strh	r3, [r4, #12]
 80203c8:	4632      	mov	r2, r6
 80203ca:	463b      	mov	r3, r7
 80203cc:	4628      	mov	r0, r5
 80203ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80203d2:	f000 b955 	b.w	8020680 <_write_r>

080203d6 <__sseek>:
 80203d6:	b510      	push	{r4, lr}
 80203d8:	460c      	mov	r4, r1
 80203da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203de:	f000 f92b 	bl	8020638 <_lseek_r>
 80203e2:	1c43      	adds	r3, r0, #1
 80203e4:	89a3      	ldrh	r3, [r4, #12]
 80203e6:	bf15      	itete	ne
 80203e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80203ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80203ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80203f2:	81a3      	strheq	r3, [r4, #12]
 80203f4:	bf18      	it	ne
 80203f6:	81a3      	strhne	r3, [r4, #12]
 80203f8:	bd10      	pop	{r4, pc}

080203fa <__sclose>:
 80203fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80203fe:	f000 b8ad 	b.w	802055c <_close_r>

08020402 <__swbuf_r>:
 8020402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020404:	460e      	mov	r6, r1
 8020406:	4614      	mov	r4, r2
 8020408:	4605      	mov	r5, r0
 802040a:	b118      	cbz	r0, 8020414 <__swbuf_r+0x12>
 802040c:	6a03      	ldr	r3, [r0, #32]
 802040e:	b90b      	cbnz	r3, 8020414 <__swbuf_r+0x12>
 8020410:	f7ff ff0e 	bl	8020230 <__sinit>
 8020414:	69a3      	ldr	r3, [r4, #24]
 8020416:	60a3      	str	r3, [r4, #8]
 8020418:	89a3      	ldrh	r3, [r4, #12]
 802041a:	071a      	lsls	r2, r3, #28
 802041c:	d501      	bpl.n	8020422 <__swbuf_r+0x20>
 802041e:	6923      	ldr	r3, [r4, #16]
 8020420:	b943      	cbnz	r3, 8020434 <__swbuf_r+0x32>
 8020422:	4621      	mov	r1, r4
 8020424:	4628      	mov	r0, r5
 8020426:	f000 f82b 	bl	8020480 <__swsetup_r>
 802042a:	b118      	cbz	r0, 8020434 <__swbuf_r+0x32>
 802042c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8020430:	4638      	mov	r0, r7
 8020432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020434:	6823      	ldr	r3, [r4, #0]
 8020436:	6922      	ldr	r2, [r4, #16]
 8020438:	1a98      	subs	r0, r3, r2
 802043a:	6963      	ldr	r3, [r4, #20]
 802043c:	b2f6      	uxtb	r6, r6
 802043e:	4283      	cmp	r3, r0
 8020440:	4637      	mov	r7, r6
 8020442:	dc05      	bgt.n	8020450 <__swbuf_r+0x4e>
 8020444:	4621      	mov	r1, r4
 8020446:	4628      	mov	r0, r5
 8020448:	f000 fdd2 	bl	8020ff0 <_fflush_r>
 802044c:	2800      	cmp	r0, #0
 802044e:	d1ed      	bne.n	802042c <__swbuf_r+0x2a>
 8020450:	68a3      	ldr	r3, [r4, #8]
 8020452:	3b01      	subs	r3, #1
 8020454:	60a3      	str	r3, [r4, #8]
 8020456:	6823      	ldr	r3, [r4, #0]
 8020458:	1c5a      	adds	r2, r3, #1
 802045a:	6022      	str	r2, [r4, #0]
 802045c:	701e      	strb	r6, [r3, #0]
 802045e:	6962      	ldr	r2, [r4, #20]
 8020460:	1c43      	adds	r3, r0, #1
 8020462:	429a      	cmp	r2, r3
 8020464:	d004      	beq.n	8020470 <__swbuf_r+0x6e>
 8020466:	89a3      	ldrh	r3, [r4, #12]
 8020468:	07db      	lsls	r3, r3, #31
 802046a:	d5e1      	bpl.n	8020430 <__swbuf_r+0x2e>
 802046c:	2e0a      	cmp	r6, #10
 802046e:	d1df      	bne.n	8020430 <__swbuf_r+0x2e>
 8020470:	4621      	mov	r1, r4
 8020472:	4628      	mov	r0, r5
 8020474:	f000 fdbc 	bl	8020ff0 <_fflush_r>
 8020478:	2800      	cmp	r0, #0
 802047a:	d0d9      	beq.n	8020430 <__swbuf_r+0x2e>
 802047c:	e7d6      	b.n	802042c <__swbuf_r+0x2a>
	...

08020480 <__swsetup_r>:
 8020480:	b538      	push	{r3, r4, r5, lr}
 8020482:	4b29      	ldr	r3, [pc, #164]	@ (8020528 <__swsetup_r+0xa8>)
 8020484:	4605      	mov	r5, r0
 8020486:	6818      	ldr	r0, [r3, #0]
 8020488:	460c      	mov	r4, r1
 802048a:	b118      	cbz	r0, 8020494 <__swsetup_r+0x14>
 802048c:	6a03      	ldr	r3, [r0, #32]
 802048e:	b90b      	cbnz	r3, 8020494 <__swsetup_r+0x14>
 8020490:	f7ff fece 	bl	8020230 <__sinit>
 8020494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020498:	0719      	lsls	r1, r3, #28
 802049a:	d422      	bmi.n	80204e2 <__swsetup_r+0x62>
 802049c:	06da      	lsls	r2, r3, #27
 802049e:	d407      	bmi.n	80204b0 <__swsetup_r+0x30>
 80204a0:	2209      	movs	r2, #9
 80204a2:	602a      	str	r2, [r5, #0]
 80204a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80204a8:	81a3      	strh	r3, [r4, #12]
 80204aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80204ae:	e033      	b.n	8020518 <__swsetup_r+0x98>
 80204b0:	0758      	lsls	r0, r3, #29
 80204b2:	d512      	bpl.n	80204da <__swsetup_r+0x5a>
 80204b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80204b6:	b141      	cbz	r1, 80204ca <__swsetup_r+0x4a>
 80204b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80204bc:	4299      	cmp	r1, r3
 80204be:	d002      	beq.n	80204c6 <__swsetup_r+0x46>
 80204c0:	4628      	mov	r0, r5
 80204c2:	f000 f943 	bl	802074c <_free_r>
 80204c6:	2300      	movs	r3, #0
 80204c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80204ca:	89a3      	ldrh	r3, [r4, #12]
 80204cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80204d0:	81a3      	strh	r3, [r4, #12]
 80204d2:	2300      	movs	r3, #0
 80204d4:	6063      	str	r3, [r4, #4]
 80204d6:	6923      	ldr	r3, [r4, #16]
 80204d8:	6023      	str	r3, [r4, #0]
 80204da:	89a3      	ldrh	r3, [r4, #12]
 80204dc:	f043 0308 	orr.w	r3, r3, #8
 80204e0:	81a3      	strh	r3, [r4, #12]
 80204e2:	6923      	ldr	r3, [r4, #16]
 80204e4:	b94b      	cbnz	r3, 80204fa <__swsetup_r+0x7a>
 80204e6:	89a3      	ldrh	r3, [r4, #12]
 80204e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80204ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80204f0:	d003      	beq.n	80204fa <__swsetup_r+0x7a>
 80204f2:	4621      	mov	r1, r4
 80204f4:	4628      	mov	r0, r5
 80204f6:	f000 fddb 	bl	80210b0 <__smakebuf_r>
 80204fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204fe:	f013 0201 	ands.w	r2, r3, #1
 8020502:	d00a      	beq.n	802051a <__swsetup_r+0x9a>
 8020504:	2200      	movs	r2, #0
 8020506:	60a2      	str	r2, [r4, #8]
 8020508:	6962      	ldr	r2, [r4, #20]
 802050a:	4252      	negs	r2, r2
 802050c:	61a2      	str	r2, [r4, #24]
 802050e:	6922      	ldr	r2, [r4, #16]
 8020510:	b942      	cbnz	r2, 8020524 <__swsetup_r+0xa4>
 8020512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020516:	d1c5      	bne.n	80204a4 <__swsetup_r+0x24>
 8020518:	bd38      	pop	{r3, r4, r5, pc}
 802051a:	0799      	lsls	r1, r3, #30
 802051c:	bf58      	it	pl
 802051e:	6962      	ldrpl	r2, [r4, #20]
 8020520:	60a2      	str	r2, [r4, #8]
 8020522:	e7f4      	b.n	802050e <__swsetup_r+0x8e>
 8020524:	2000      	movs	r0, #0
 8020526:	e7f7      	b.n	8020518 <__swsetup_r+0x98>
 8020528:	2000003c 	.word	0x2000003c

0802052c <memcmp>:
 802052c:	b510      	push	{r4, lr}
 802052e:	3901      	subs	r1, #1
 8020530:	4402      	add	r2, r0
 8020532:	4290      	cmp	r0, r2
 8020534:	d101      	bne.n	802053a <memcmp+0xe>
 8020536:	2000      	movs	r0, #0
 8020538:	e005      	b.n	8020546 <memcmp+0x1a>
 802053a:	7803      	ldrb	r3, [r0, #0]
 802053c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8020540:	42a3      	cmp	r3, r4
 8020542:	d001      	beq.n	8020548 <memcmp+0x1c>
 8020544:	1b18      	subs	r0, r3, r4
 8020546:	bd10      	pop	{r4, pc}
 8020548:	3001      	adds	r0, #1
 802054a:	e7f2      	b.n	8020532 <memcmp+0x6>

0802054c <memset>:
 802054c:	4402      	add	r2, r0
 802054e:	4603      	mov	r3, r0
 8020550:	4293      	cmp	r3, r2
 8020552:	d100      	bne.n	8020556 <memset+0xa>
 8020554:	4770      	bx	lr
 8020556:	f803 1b01 	strb.w	r1, [r3], #1
 802055a:	e7f9      	b.n	8020550 <memset+0x4>

0802055c <_close_r>:
 802055c:	b538      	push	{r3, r4, r5, lr}
 802055e:	4d06      	ldr	r5, [pc, #24]	@ (8020578 <_close_r+0x1c>)
 8020560:	2300      	movs	r3, #0
 8020562:	4604      	mov	r4, r0
 8020564:	4608      	mov	r0, r1
 8020566:	602b      	str	r3, [r5, #0]
 8020568:	f7e1 fa2a 	bl	80019c0 <_close>
 802056c:	1c43      	adds	r3, r0, #1
 802056e:	d102      	bne.n	8020576 <_close_r+0x1a>
 8020570:	682b      	ldr	r3, [r5, #0]
 8020572:	b103      	cbz	r3, 8020576 <_close_r+0x1a>
 8020574:	6023      	str	r3, [r4, #0]
 8020576:	bd38      	pop	{r3, r4, r5, pc}
 8020578:	200258ac 	.word	0x200258ac

0802057c <_reclaim_reent>:
 802057c:	4b2d      	ldr	r3, [pc, #180]	@ (8020634 <_reclaim_reent+0xb8>)
 802057e:	681b      	ldr	r3, [r3, #0]
 8020580:	4283      	cmp	r3, r0
 8020582:	b570      	push	{r4, r5, r6, lr}
 8020584:	4604      	mov	r4, r0
 8020586:	d053      	beq.n	8020630 <_reclaim_reent+0xb4>
 8020588:	69c3      	ldr	r3, [r0, #28]
 802058a:	b31b      	cbz	r3, 80205d4 <_reclaim_reent+0x58>
 802058c:	68db      	ldr	r3, [r3, #12]
 802058e:	b163      	cbz	r3, 80205aa <_reclaim_reent+0x2e>
 8020590:	2500      	movs	r5, #0
 8020592:	69e3      	ldr	r3, [r4, #28]
 8020594:	68db      	ldr	r3, [r3, #12]
 8020596:	5959      	ldr	r1, [r3, r5]
 8020598:	b9b1      	cbnz	r1, 80205c8 <_reclaim_reent+0x4c>
 802059a:	3504      	adds	r5, #4
 802059c:	2d80      	cmp	r5, #128	@ 0x80
 802059e:	d1f8      	bne.n	8020592 <_reclaim_reent+0x16>
 80205a0:	69e3      	ldr	r3, [r4, #28]
 80205a2:	4620      	mov	r0, r4
 80205a4:	68d9      	ldr	r1, [r3, #12]
 80205a6:	f000 f8d1 	bl	802074c <_free_r>
 80205aa:	69e3      	ldr	r3, [r4, #28]
 80205ac:	6819      	ldr	r1, [r3, #0]
 80205ae:	b111      	cbz	r1, 80205b6 <_reclaim_reent+0x3a>
 80205b0:	4620      	mov	r0, r4
 80205b2:	f000 f8cb 	bl	802074c <_free_r>
 80205b6:	69e3      	ldr	r3, [r4, #28]
 80205b8:	689d      	ldr	r5, [r3, #8]
 80205ba:	b15d      	cbz	r5, 80205d4 <_reclaim_reent+0x58>
 80205bc:	4629      	mov	r1, r5
 80205be:	4620      	mov	r0, r4
 80205c0:	682d      	ldr	r5, [r5, #0]
 80205c2:	f000 f8c3 	bl	802074c <_free_r>
 80205c6:	e7f8      	b.n	80205ba <_reclaim_reent+0x3e>
 80205c8:	680e      	ldr	r6, [r1, #0]
 80205ca:	4620      	mov	r0, r4
 80205cc:	f000 f8be 	bl	802074c <_free_r>
 80205d0:	4631      	mov	r1, r6
 80205d2:	e7e1      	b.n	8020598 <_reclaim_reent+0x1c>
 80205d4:	6961      	ldr	r1, [r4, #20]
 80205d6:	b111      	cbz	r1, 80205de <_reclaim_reent+0x62>
 80205d8:	4620      	mov	r0, r4
 80205da:	f000 f8b7 	bl	802074c <_free_r>
 80205de:	69e1      	ldr	r1, [r4, #28]
 80205e0:	b111      	cbz	r1, 80205e8 <_reclaim_reent+0x6c>
 80205e2:	4620      	mov	r0, r4
 80205e4:	f000 f8b2 	bl	802074c <_free_r>
 80205e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80205ea:	b111      	cbz	r1, 80205f2 <_reclaim_reent+0x76>
 80205ec:	4620      	mov	r0, r4
 80205ee:	f000 f8ad 	bl	802074c <_free_r>
 80205f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80205f4:	b111      	cbz	r1, 80205fc <_reclaim_reent+0x80>
 80205f6:	4620      	mov	r0, r4
 80205f8:	f000 f8a8 	bl	802074c <_free_r>
 80205fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80205fe:	b111      	cbz	r1, 8020606 <_reclaim_reent+0x8a>
 8020600:	4620      	mov	r0, r4
 8020602:	f000 f8a3 	bl	802074c <_free_r>
 8020606:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8020608:	b111      	cbz	r1, 8020610 <_reclaim_reent+0x94>
 802060a:	4620      	mov	r0, r4
 802060c:	f000 f89e 	bl	802074c <_free_r>
 8020610:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8020612:	b111      	cbz	r1, 802061a <_reclaim_reent+0x9e>
 8020614:	4620      	mov	r0, r4
 8020616:	f000 f899 	bl	802074c <_free_r>
 802061a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 802061c:	b111      	cbz	r1, 8020624 <_reclaim_reent+0xa8>
 802061e:	4620      	mov	r0, r4
 8020620:	f000 f894 	bl	802074c <_free_r>
 8020624:	6a23      	ldr	r3, [r4, #32]
 8020626:	b11b      	cbz	r3, 8020630 <_reclaim_reent+0xb4>
 8020628:	4620      	mov	r0, r4
 802062a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802062e:	4718      	bx	r3
 8020630:	bd70      	pop	{r4, r5, r6, pc}
 8020632:	bf00      	nop
 8020634:	2000003c 	.word	0x2000003c

08020638 <_lseek_r>:
 8020638:	b538      	push	{r3, r4, r5, lr}
 802063a:	4d07      	ldr	r5, [pc, #28]	@ (8020658 <_lseek_r+0x20>)
 802063c:	4604      	mov	r4, r0
 802063e:	4608      	mov	r0, r1
 8020640:	4611      	mov	r1, r2
 8020642:	2200      	movs	r2, #0
 8020644:	602a      	str	r2, [r5, #0]
 8020646:	461a      	mov	r2, r3
 8020648:	f7e1 f9e1 	bl	8001a0e <_lseek>
 802064c:	1c43      	adds	r3, r0, #1
 802064e:	d102      	bne.n	8020656 <_lseek_r+0x1e>
 8020650:	682b      	ldr	r3, [r5, #0]
 8020652:	b103      	cbz	r3, 8020656 <_lseek_r+0x1e>
 8020654:	6023      	str	r3, [r4, #0]
 8020656:	bd38      	pop	{r3, r4, r5, pc}
 8020658:	200258ac 	.word	0x200258ac

0802065c <_read_r>:
 802065c:	b538      	push	{r3, r4, r5, lr}
 802065e:	4d07      	ldr	r5, [pc, #28]	@ (802067c <_read_r+0x20>)
 8020660:	4604      	mov	r4, r0
 8020662:	4608      	mov	r0, r1
 8020664:	4611      	mov	r1, r2
 8020666:	2200      	movs	r2, #0
 8020668:	602a      	str	r2, [r5, #0]
 802066a:	461a      	mov	r2, r3
 802066c:	f7e1 f98b 	bl	8001986 <_read>
 8020670:	1c43      	adds	r3, r0, #1
 8020672:	d102      	bne.n	802067a <_read_r+0x1e>
 8020674:	682b      	ldr	r3, [r5, #0]
 8020676:	b103      	cbz	r3, 802067a <_read_r+0x1e>
 8020678:	6023      	str	r3, [r4, #0]
 802067a:	bd38      	pop	{r3, r4, r5, pc}
 802067c:	200258ac 	.word	0x200258ac

08020680 <_write_r>:
 8020680:	b538      	push	{r3, r4, r5, lr}
 8020682:	4d07      	ldr	r5, [pc, #28]	@ (80206a0 <_write_r+0x20>)
 8020684:	4604      	mov	r4, r0
 8020686:	4608      	mov	r0, r1
 8020688:	4611      	mov	r1, r2
 802068a:	2200      	movs	r2, #0
 802068c:	602a      	str	r2, [r5, #0]
 802068e:	461a      	mov	r2, r3
 8020690:	f7e0 fcea 	bl	8001068 <_write>
 8020694:	1c43      	adds	r3, r0, #1
 8020696:	d102      	bne.n	802069e <_write_r+0x1e>
 8020698:	682b      	ldr	r3, [r5, #0]
 802069a:	b103      	cbz	r3, 802069e <_write_r+0x1e>
 802069c:	6023      	str	r3, [r4, #0]
 802069e:	bd38      	pop	{r3, r4, r5, pc}
 80206a0:	200258ac 	.word	0x200258ac

080206a4 <__libc_init_array>:
 80206a4:	b570      	push	{r4, r5, r6, lr}
 80206a6:	4d0d      	ldr	r5, [pc, #52]	@ (80206dc <__libc_init_array+0x38>)
 80206a8:	4c0d      	ldr	r4, [pc, #52]	@ (80206e0 <__libc_init_array+0x3c>)
 80206aa:	1b64      	subs	r4, r4, r5
 80206ac:	10a4      	asrs	r4, r4, #2
 80206ae:	2600      	movs	r6, #0
 80206b0:	42a6      	cmp	r6, r4
 80206b2:	d109      	bne.n	80206c8 <__libc_init_array+0x24>
 80206b4:	4d0b      	ldr	r5, [pc, #44]	@ (80206e4 <__libc_init_array+0x40>)
 80206b6:	4c0c      	ldr	r4, [pc, #48]	@ (80206e8 <__libc_init_array+0x44>)
 80206b8:	f000 fdb4 	bl	8021224 <_init>
 80206bc:	1b64      	subs	r4, r4, r5
 80206be:	10a4      	asrs	r4, r4, #2
 80206c0:	2600      	movs	r6, #0
 80206c2:	42a6      	cmp	r6, r4
 80206c4:	d105      	bne.n	80206d2 <__libc_init_array+0x2e>
 80206c6:	bd70      	pop	{r4, r5, r6, pc}
 80206c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80206cc:	4798      	blx	r3
 80206ce:	3601      	adds	r6, #1
 80206d0:	e7ee      	b.n	80206b0 <__libc_init_array+0xc>
 80206d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80206d6:	4798      	blx	r3
 80206d8:	3601      	adds	r6, #1
 80206da:	e7f2      	b.n	80206c2 <__libc_init_array+0x1e>
 80206dc:	08024fbc 	.word	0x08024fbc
 80206e0:	08024fbc 	.word	0x08024fbc
 80206e4:	08024fbc 	.word	0x08024fbc
 80206e8:	08024fc0 	.word	0x08024fc0

080206ec <__retarget_lock_init_recursive>:
 80206ec:	4770      	bx	lr

080206ee <__retarget_lock_acquire_recursive>:
 80206ee:	4770      	bx	lr

080206f0 <__retarget_lock_release_recursive>:
 80206f0:	4770      	bx	lr

080206f2 <memcpy>:
 80206f2:	440a      	add	r2, r1
 80206f4:	4291      	cmp	r1, r2
 80206f6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80206fa:	d100      	bne.n	80206fe <memcpy+0xc>
 80206fc:	4770      	bx	lr
 80206fe:	b510      	push	{r4, lr}
 8020700:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020704:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020708:	4291      	cmp	r1, r2
 802070a:	d1f9      	bne.n	8020700 <memcpy+0xe>
 802070c:	bd10      	pop	{r4, pc}
	...

08020710 <__assert_func>:
 8020710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020712:	4614      	mov	r4, r2
 8020714:	461a      	mov	r2, r3
 8020716:	4b09      	ldr	r3, [pc, #36]	@ (802073c <__assert_func+0x2c>)
 8020718:	681b      	ldr	r3, [r3, #0]
 802071a:	4605      	mov	r5, r0
 802071c:	68d8      	ldr	r0, [r3, #12]
 802071e:	b14c      	cbz	r4, 8020734 <__assert_func+0x24>
 8020720:	4b07      	ldr	r3, [pc, #28]	@ (8020740 <__assert_func+0x30>)
 8020722:	9100      	str	r1, [sp, #0]
 8020724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020728:	4906      	ldr	r1, [pc, #24]	@ (8020744 <__assert_func+0x34>)
 802072a:	462b      	mov	r3, r5
 802072c:	f000 fc88 	bl	8021040 <fiprintf>
 8020730:	f000 fd2c 	bl	802118c <abort>
 8020734:	4b04      	ldr	r3, [pc, #16]	@ (8020748 <__assert_func+0x38>)
 8020736:	461c      	mov	r4, r3
 8020738:	e7f3      	b.n	8020722 <__assert_func+0x12>
 802073a:	bf00      	nop
 802073c:	2000003c 	.word	0x2000003c
 8020740:	08024f45 	.word	0x08024f45
 8020744:	08024f52 	.word	0x08024f52
 8020748:	08024f80 	.word	0x08024f80

0802074c <_free_r>:
 802074c:	b538      	push	{r3, r4, r5, lr}
 802074e:	4605      	mov	r5, r0
 8020750:	2900      	cmp	r1, #0
 8020752:	d041      	beq.n	80207d8 <_free_r+0x8c>
 8020754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020758:	1f0c      	subs	r4, r1, #4
 802075a:	2b00      	cmp	r3, #0
 802075c:	bfb8      	it	lt
 802075e:	18e4      	addlt	r4, r4, r3
 8020760:	f000 f8e8 	bl	8020934 <__malloc_lock>
 8020764:	4a1d      	ldr	r2, [pc, #116]	@ (80207dc <_free_r+0x90>)
 8020766:	6813      	ldr	r3, [r2, #0]
 8020768:	b933      	cbnz	r3, 8020778 <_free_r+0x2c>
 802076a:	6063      	str	r3, [r4, #4]
 802076c:	6014      	str	r4, [r2, #0]
 802076e:	4628      	mov	r0, r5
 8020770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020774:	f000 b8e4 	b.w	8020940 <__malloc_unlock>
 8020778:	42a3      	cmp	r3, r4
 802077a:	d908      	bls.n	802078e <_free_r+0x42>
 802077c:	6820      	ldr	r0, [r4, #0]
 802077e:	1821      	adds	r1, r4, r0
 8020780:	428b      	cmp	r3, r1
 8020782:	bf01      	itttt	eq
 8020784:	6819      	ldreq	r1, [r3, #0]
 8020786:	685b      	ldreq	r3, [r3, #4]
 8020788:	1809      	addeq	r1, r1, r0
 802078a:	6021      	streq	r1, [r4, #0]
 802078c:	e7ed      	b.n	802076a <_free_r+0x1e>
 802078e:	461a      	mov	r2, r3
 8020790:	685b      	ldr	r3, [r3, #4]
 8020792:	b10b      	cbz	r3, 8020798 <_free_r+0x4c>
 8020794:	42a3      	cmp	r3, r4
 8020796:	d9fa      	bls.n	802078e <_free_r+0x42>
 8020798:	6811      	ldr	r1, [r2, #0]
 802079a:	1850      	adds	r0, r2, r1
 802079c:	42a0      	cmp	r0, r4
 802079e:	d10b      	bne.n	80207b8 <_free_r+0x6c>
 80207a0:	6820      	ldr	r0, [r4, #0]
 80207a2:	4401      	add	r1, r0
 80207a4:	1850      	adds	r0, r2, r1
 80207a6:	4283      	cmp	r3, r0
 80207a8:	6011      	str	r1, [r2, #0]
 80207aa:	d1e0      	bne.n	802076e <_free_r+0x22>
 80207ac:	6818      	ldr	r0, [r3, #0]
 80207ae:	685b      	ldr	r3, [r3, #4]
 80207b0:	6053      	str	r3, [r2, #4]
 80207b2:	4408      	add	r0, r1
 80207b4:	6010      	str	r0, [r2, #0]
 80207b6:	e7da      	b.n	802076e <_free_r+0x22>
 80207b8:	d902      	bls.n	80207c0 <_free_r+0x74>
 80207ba:	230c      	movs	r3, #12
 80207bc:	602b      	str	r3, [r5, #0]
 80207be:	e7d6      	b.n	802076e <_free_r+0x22>
 80207c0:	6820      	ldr	r0, [r4, #0]
 80207c2:	1821      	adds	r1, r4, r0
 80207c4:	428b      	cmp	r3, r1
 80207c6:	bf04      	itt	eq
 80207c8:	6819      	ldreq	r1, [r3, #0]
 80207ca:	685b      	ldreq	r3, [r3, #4]
 80207cc:	6063      	str	r3, [r4, #4]
 80207ce:	bf04      	itt	eq
 80207d0:	1809      	addeq	r1, r1, r0
 80207d2:	6021      	streq	r1, [r4, #0]
 80207d4:	6054      	str	r4, [r2, #4]
 80207d6:	e7ca      	b.n	802076e <_free_r+0x22>
 80207d8:	bd38      	pop	{r3, r4, r5, pc}
 80207da:	bf00      	nop
 80207dc:	200258b8 	.word	0x200258b8

080207e0 <malloc>:
 80207e0:	4b02      	ldr	r3, [pc, #8]	@ (80207ec <malloc+0xc>)
 80207e2:	4601      	mov	r1, r0
 80207e4:	6818      	ldr	r0, [r3, #0]
 80207e6:	f000 b825 	b.w	8020834 <_malloc_r>
 80207ea:	bf00      	nop
 80207ec:	2000003c 	.word	0x2000003c

080207f0 <sbrk_aligned>:
 80207f0:	b570      	push	{r4, r5, r6, lr}
 80207f2:	4e0f      	ldr	r6, [pc, #60]	@ (8020830 <sbrk_aligned+0x40>)
 80207f4:	460c      	mov	r4, r1
 80207f6:	6831      	ldr	r1, [r6, #0]
 80207f8:	4605      	mov	r5, r0
 80207fa:	b911      	cbnz	r1, 8020802 <sbrk_aligned+0x12>
 80207fc:	f000 fcb6 	bl	802116c <_sbrk_r>
 8020800:	6030      	str	r0, [r6, #0]
 8020802:	4621      	mov	r1, r4
 8020804:	4628      	mov	r0, r5
 8020806:	f000 fcb1 	bl	802116c <_sbrk_r>
 802080a:	1c43      	adds	r3, r0, #1
 802080c:	d103      	bne.n	8020816 <sbrk_aligned+0x26>
 802080e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8020812:	4620      	mov	r0, r4
 8020814:	bd70      	pop	{r4, r5, r6, pc}
 8020816:	1cc4      	adds	r4, r0, #3
 8020818:	f024 0403 	bic.w	r4, r4, #3
 802081c:	42a0      	cmp	r0, r4
 802081e:	d0f8      	beq.n	8020812 <sbrk_aligned+0x22>
 8020820:	1a21      	subs	r1, r4, r0
 8020822:	4628      	mov	r0, r5
 8020824:	f000 fca2 	bl	802116c <_sbrk_r>
 8020828:	3001      	adds	r0, #1
 802082a:	d1f2      	bne.n	8020812 <sbrk_aligned+0x22>
 802082c:	e7ef      	b.n	802080e <sbrk_aligned+0x1e>
 802082e:	bf00      	nop
 8020830:	200258b4 	.word	0x200258b4

08020834 <_malloc_r>:
 8020834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020838:	1ccd      	adds	r5, r1, #3
 802083a:	f025 0503 	bic.w	r5, r5, #3
 802083e:	3508      	adds	r5, #8
 8020840:	2d0c      	cmp	r5, #12
 8020842:	bf38      	it	cc
 8020844:	250c      	movcc	r5, #12
 8020846:	2d00      	cmp	r5, #0
 8020848:	4606      	mov	r6, r0
 802084a:	db01      	blt.n	8020850 <_malloc_r+0x1c>
 802084c:	42a9      	cmp	r1, r5
 802084e:	d904      	bls.n	802085a <_malloc_r+0x26>
 8020850:	230c      	movs	r3, #12
 8020852:	6033      	str	r3, [r6, #0]
 8020854:	2000      	movs	r0, #0
 8020856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802085a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020930 <_malloc_r+0xfc>
 802085e:	f000 f869 	bl	8020934 <__malloc_lock>
 8020862:	f8d8 3000 	ldr.w	r3, [r8]
 8020866:	461c      	mov	r4, r3
 8020868:	bb44      	cbnz	r4, 80208bc <_malloc_r+0x88>
 802086a:	4629      	mov	r1, r5
 802086c:	4630      	mov	r0, r6
 802086e:	f7ff ffbf 	bl	80207f0 <sbrk_aligned>
 8020872:	1c43      	adds	r3, r0, #1
 8020874:	4604      	mov	r4, r0
 8020876:	d158      	bne.n	802092a <_malloc_r+0xf6>
 8020878:	f8d8 4000 	ldr.w	r4, [r8]
 802087c:	4627      	mov	r7, r4
 802087e:	2f00      	cmp	r7, #0
 8020880:	d143      	bne.n	802090a <_malloc_r+0xd6>
 8020882:	2c00      	cmp	r4, #0
 8020884:	d04b      	beq.n	802091e <_malloc_r+0xea>
 8020886:	6823      	ldr	r3, [r4, #0]
 8020888:	4639      	mov	r1, r7
 802088a:	4630      	mov	r0, r6
 802088c:	eb04 0903 	add.w	r9, r4, r3
 8020890:	f000 fc6c 	bl	802116c <_sbrk_r>
 8020894:	4581      	cmp	r9, r0
 8020896:	d142      	bne.n	802091e <_malloc_r+0xea>
 8020898:	6821      	ldr	r1, [r4, #0]
 802089a:	1a6d      	subs	r5, r5, r1
 802089c:	4629      	mov	r1, r5
 802089e:	4630      	mov	r0, r6
 80208a0:	f7ff ffa6 	bl	80207f0 <sbrk_aligned>
 80208a4:	3001      	adds	r0, #1
 80208a6:	d03a      	beq.n	802091e <_malloc_r+0xea>
 80208a8:	6823      	ldr	r3, [r4, #0]
 80208aa:	442b      	add	r3, r5
 80208ac:	6023      	str	r3, [r4, #0]
 80208ae:	f8d8 3000 	ldr.w	r3, [r8]
 80208b2:	685a      	ldr	r2, [r3, #4]
 80208b4:	bb62      	cbnz	r2, 8020910 <_malloc_r+0xdc>
 80208b6:	f8c8 7000 	str.w	r7, [r8]
 80208ba:	e00f      	b.n	80208dc <_malloc_r+0xa8>
 80208bc:	6822      	ldr	r2, [r4, #0]
 80208be:	1b52      	subs	r2, r2, r5
 80208c0:	d420      	bmi.n	8020904 <_malloc_r+0xd0>
 80208c2:	2a0b      	cmp	r2, #11
 80208c4:	d917      	bls.n	80208f6 <_malloc_r+0xc2>
 80208c6:	1961      	adds	r1, r4, r5
 80208c8:	42a3      	cmp	r3, r4
 80208ca:	6025      	str	r5, [r4, #0]
 80208cc:	bf18      	it	ne
 80208ce:	6059      	strne	r1, [r3, #4]
 80208d0:	6863      	ldr	r3, [r4, #4]
 80208d2:	bf08      	it	eq
 80208d4:	f8c8 1000 	streq.w	r1, [r8]
 80208d8:	5162      	str	r2, [r4, r5]
 80208da:	604b      	str	r3, [r1, #4]
 80208dc:	4630      	mov	r0, r6
 80208de:	f000 f82f 	bl	8020940 <__malloc_unlock>
 80208e2:	f104 000b 	add.w	r0, r4, #11
 80208e6:	1d23      	adds	r3, r4, #4
 80208e8:	f020 0007 	bic.w	r0, r0, #7
 80208ec:	1ac2      	subs	r2, r0, r3
 80208ee:	bf1c      	itt	ne
 80208f0:	1a1b      	subne	r3, r3, r0
 80208f2:	50a3      	strne	r3, [r4, r2]
 80208f4:	e7af      	b.n	8020856 <_malloc_r+0x22>
 80208f6:	6862      	ldr	r2, [r4, #4]
 80208f8:	42a3      	cmp	r3, r4
 80208fa:	bf0c      	ite	eq
 80208fc:	f8c8 2000 	streq.w	r2, [r8]
 8020900:	605a      	strne	r2, [r3, #4]
 8020902:	e7eb      	b.n	80208dc <_malloc_r+0xa8>
 8020904:	4623      	mov	r3, r4
 8020906:	6864      	ldr	r4, [r4, #4]
 8020908:	e7ae      	b.n	8020868 <_malloc_r+0x34>
 802090a:	463c      	mov	r4, r7
 802090c:	687f      	ldr	r7, [r7, #4]
 802090e:	e7b6      	b.n	802087e <_malloc_r+0x4a>
 8020910:	461a      	mov	r2, r3
 8020912:	685b      	ldr	r3, [r3, #4]
 8020914:	42a3      	cmp	r3, r4
 8020916:	d1fb      	bne.n	8020910 <_malloc_r+0xdc>
 8020918:	2300      	movs	r3, #0
 802091a:	6053      	str	r3, [r2, #4]
 802091c:	e7de      	b.n	80208dc <_malloc_r+0xa8>
 802091e:	230c      	movs	r3, #12
 8020920:	6033      	str	r3, [r6, #0]
 8020922:	4630      	mov	r0, r6
 8020924:	f000 f80c 	bl	8020940 <__malloc_unlock>
 8020928:	e794      	b.n	8020854 <_malloc_r+0x20>
 802092a:	6005      	str	r5, [r0, #0]
 802092c:	e7d6      	b.n	80208dc <_malloc_r+0xa8>
 802092e:	bf00      	nop
 8020930:	200258b8 	.word	0x200258b8

08020934 <__malloc_lock>:
 8020934:	4801      	ldr	r0, [pc, #4]	@ (802093c <__malloc_lock+0x8>)
 8020936:	f7ff beda 	b.w	80206ee <__retarget_lock_acquire_recursive>
 802093a:	bf00      	nop
 802093c:	200258b0 	.word	0x200258b0

08020940 <__malloc_unlock>:
 8020940:	4801      	ldr	r0, [pc, #4]	@ (8020948 <__malloc_unlock+0x8>)
 8020942:	f7ff bed5 	b.w	80206f0 <__retarget_lock_release_recursive>
 8020946:	bf00      	nop
 8020948:	200258b0 	.word	0x200258b0

0802094c <__sfputc_r>:
 802094c:	6893      	ldr	r3, [r2, #8]
 802094e:	3b01      	subs	r3, #1
 8020950:	2b00      	cmp	r3, #0
 8020952:	b410      	push	{r4}
 8020954:	6093      	str	r3, [r2, #8]
 8020956:	da08      	bge.n	802096a <__sfputc_r+0x1e>
 8020958:	6994      	ldr	r4, [r2, #24]
 802095a:	42a3      	cmp	r3, r4
 802095c:	db01      	blt.n	8020962 <__sfputc_r+0x16>
 802095e:	290a      	cmp	r1, #10
 8020960:	d103      	bne.n	802096a <__sfputc_r+0x1e>
 8020962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020966:	f7ff bd4c 	b.w	8020402 <__swbuf_r>
 802096a:	6813      	ldr	r3, [r2, #0]
 802096c:	1c58      	adds	r0, r3, #1
 802096e:	6010      	str	r0, [r2, #0]
 8020970:	7019      	strb	r1, [r3, #0]
 8020972:	4608      	mov	r0, r1
 8020974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020978:	4770      	bx	lr

0802097a <__sfputs_r>:
 802097a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802097c:	4606      	mov	r6, r0
 802097e:	460f      	mov	r7, r1
 8020980:	4614      	mov	r4, r2
 8020982:	18d5      	adds	r5, r2, r3
 8020984:	42ac      	cmp	r4, r5
 8020986:	d101      	bne.n	802098c <__sfputs_r+0x12>
 8020988:	2000      	movs	r0, #0
 802098a:	e007      	b.n	802099c <__sfputs_r+0x22>
 802098c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020990:	463a      	mov	r2, r7
 8020992:	4630      	mov	r0, r6
 8020994:	f7ff ffda 	bl	802094c <__sfputc_r>
 8020998:	1c43      	adds	r3, r0, #1
 802099a:	d1f3      	bne.n	8020984 <__sfputs_r+0xa>
 802099c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080209a0 <_vfiprintf_r>:
 80209a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80209a4:	460d      	mov	r5, r1
 80209a6:	b09d      	sub	sp, #116	@ 0x74
 80209a8:	4614      	mov	r4, r2
 80209aa:	4698      	mov	r8, r3
 80209ac:	4606      	mov	r6, r0
 80209ae:	b118      	cbz	r0, 80209b8 <_vfiprintf_r+0x18>
 80209b0:	6a03      	ldr	r3, [r0, #32]
 80209b2:	b90b      	cbnz	r3, 80209b8 <_vfiprintf_r+0x18>
 80209b4:	f7ff fc3c 	bl	8020230 <__sinit>
 80209b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209ba:	07d9      	lsls	r1, r3, #31
 80209bc:	d405      	bmi.n	80209ca <_vfiprintf_r+0x2a>
 80209be:	89ab      	ldrh	r3, [r5, #12]
 80209c0:	059a      	lsls	r2, r3, #22
 80209c2:	d402      	bmi.n	80209ca <_vfiprintf_r+0x2a>
 80209c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80209c6:	f7ff fe92 	bl	80206ee <__retarget_lock_acquire_recursive>
 80209ca:	89ab      	ldrh	r3, [r5, #12]
 80209cc:	071b      	lsls	r3, r3, #28
 80209ce:	d501      	bpl.n	80209d4 <_vfiprintf_r+0x34>
 80209d0:	692b      	ldr	r3, [r5, #16]
 80209d2:	b99b      	cbnz	r3, 80209fc <_vfiprintf_r+0x5c>
 80209d4:	4629      	mov	r1, r5
 80209d6:	4630      	mov	r0, r6
 80209d8:	f7ff fd52 	bl	8020480 <__swsetup_r>
 80209dc:	b170      	cbz	r0, 80209fc <_vfiprintf_r+0x5c>
 80209de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209e0:	07dc      	lsls	r4, r3, #31
 80209e2:	d504      	bpl.n	80209ee <_vfiprintf_r+0x4e>
 80209e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80209e8:	b01d      	add	sp, #116	@ 0x74
 80209ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80209ee:	89ab      	ldrh	r3, [r5, #12]
 80209f0:	0598      	lsls	r0, r3, #22
 80209f2:	d4f7      	bmi.n	80209e4 <_vfiprintf_r+0x44>
 80209f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80209f6:	f7ff fe7b 	bl	80206f0 <__retarget_lock_release_recursive>
 80209fa:	e7f3      	b.n	80209e4 <_vfiprintf_r+0x44>
 80209fc:	2300      	movs	r3, #0
 80209fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8020a00:	2320      	movs	r3, #32
 8020a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8020a0a:	2330      	movs	r3, #48	@ 0x30
 8020a0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020bbc <_vfiprintf_r+0x21c>
 8020a10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020a14:	f04f 0901 	mov.w	r9, #1
 8020a18:	4623      	mov	r3, r4
 8020a1a:	469a      	mov	sl, r3
 8020a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020a20:	b10a      	cbz	r2, 8020a26 <_vfiprintf_r+0x86>
 8020a22:	2a25      	cmp	r2, #37	@ 0x25
 8020a24:	d1f9      	bne.n	8020a1a <_vfiprintf_r+0x7a>
 8020a26:	ebba 0b04 	subs.w	fp, sl, r4
 8020a2a:	d00b      	beq.n	8020a44 <_vfiprintf_r+0xa4>
 8020a2c:	465b      	mov	r3, fp
 8020a2e:	4622      	mov	r2, r4
 8020a30:	4629      	mov	r1, r5
 8020a32:	4630      	mov	r0, r6
 8020a34:	f7ff ffa1 	bl	802097a <__sfputs_r>
 8020a38:	3001      	adds	r0, #1
 8020a3a:	f000 80a7 	beq.w	8020b8c <_vfiprintf_r+0x1ec>
 8020a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020a40:	445a      	add	r2, fp
 8020a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8020a44:	f89a 3000 	ldrb.w	r3, [sl]
 8020a48:	2b00      	cmp	r3, #0
 8020a4a:	f000 809f 	beq.w	8020b8c <_vfiprintf_r+0x1ec>
 8020a4e:	2300      	movs	r3, #0
 8020a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8020a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020a58:	f10a 0a01 	add.w	sl, sl, #1
 8020a5c:	9304      	str	r3, [sp, #16]
 8020a5e:	9307      	str	r3, [sp, #28]
 8020a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8020a66:	4654      	mov	r4, sl
 8020a68:	2205      	movs	r2, #5
 8020a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020a6e:	4853      	ldr	r0, [pc, #332]	@ (8020bbc <_vfiprintf_r+0x21c>)
 8020a70:	f7df fbce 	bl	8000210 <memchr>
 8020a74:	9a04      	ldr	r2, [sp, #16]
 8020a76:	b9d8      	cbnz	r0, 8020ab0 <_vfiprintf_r+0x110>
 8020a78:	06d1      	lsls	r1, r2, #27
 8020a7a:	bf44      	itt	mi
 8020a7c:	2320      	movmi	r3, #32
 8020a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020a82:	0713      	lsls	r3, r2, #28
 8020a84:	bf44      	itt	mi
 8020a86:	232b      	movmi	r3, #43	@ 0x2b
 8020a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8020a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8020a92:	d015      	beq.n	8020ac0 <_vfiprintf_r+0x120>
 8020a94:	9a07      	ldr	r2, [sp, #28]
 8020a96:	4654      	mov	r4, sl
 8020a98:	2000      	movs	r0, #0
 8020a9a:	f04f 0c0a 	mov.w	ip, #10
 8020a9e:	4621      	mov	r1, r4
 8020aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020aa4:	3b30      	subs	r3, #48	@ 0x30
 8020aa6:	2b09      	cmp	r3, #9
 8020aa8:	d94b      	bls.n	8020b42 <_vfiprintf_r+0x1a2>
 8020aaa:	b1b0      	cbz	r0, 8020ada <_vfiprintf_r+0x13a>
 8020aac:	9207      	str	r2, [sp, #28]
 8020aae:	e014      	b.n	8020ada <_vfiprintf_r+0x13a>
 8020ab0:	eba0 0308 	sub.w	r3, r0, r8
 8020ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8020ab8:	4313      	orrs	r3, r2
 8020aba:	9304      	str	r3, [sp, #16]
 8020abc:	46a2      	mov	sl, r4
 8020abe:	e7d2      	b.n	8020a66 <_vfiprintf_r+0xc6>
 8020ac0:	9b03      	ldr	r3, [sp, #12]
 8020ac2:	1d19      	adds	r1, r3, #4
 8020ac4:	681b      	ldr	r3, [r3, #0]
 8020ac6:	9103      	str	r1, [sp, #12]
 8020ac8:	2b00      	cmp	r3, #0
 8020aca:	bfbb      	ittet	lt
 8020acc:	425b      	neglt	r3, r3
 8020ace:	f042 0202 	orrlt.w	r2, r2, #2
 8020ad2:	9307      	strge	r3, [sp, #28]
 8020ad4:	9307      	strlt	r3, [sp, #28]
 8020ad6:	bfb8      	it	lt
 8020ad8:	9204      	strlt	r2, [sp, #16]
 8020ada:	7823      	ldrb	r3, [r4, #0]
 8020adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8020ade:	d10a      	bne.n	8020af6 <_vfiprintf_r+0x156>
 8020ae0:	7863      	ldrb	r3, [r4, #1]
 8020ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8020ae4:	d132      	bne.n	8020b4c <_vfiprintf_r+0x1ac>
 8020ae6:	9b03      	ldr	r3, [sp, #12]
 8020ae8:	1d1a      	adds	r2, r3, #4
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	9203      	str	r2, [sp, #12]
 8020aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020af2:	3402      	adds	r4, #2
 8020af4:	9305      	str	r3, [sp, #20]
 8020af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020bcc <_vfiprintf_r+0x22c>
 8020afa:	7821      	ldrb	r1, [r4, #0]
 8020afc:	2203      	movs	r2, #3
 8020afe:	4650      	mov	r0, sl
 8020b00:	f7df fb86 	bl	8000210 <memchr>
 8020b04:	b138      	cbz	r0, 8020b16 <_vfiprintf_r+0x176>
 8020b06:	9b04      	ldr	r3, [sp, #16]
 8020b08:	eba0 000a 	sub.w	r0, r0, sl
 8020b0c:	2240      	movs	r2, #64	@ 0x40
 8020b0e:	4082      	lsls	r2, r0
 8020b10:	4313      	orrs	r3, r2
 8020b12:	3401      	adds	r4, #1
 8020b14:	9304      	str	r3, [sp, #16]
 8020b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020b1a:	4829      	ldr	r0, [pc, #164]	@ (8020bc0 <_vfiprintf_r+0x220>)
 8020b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020b20:	2206      	movs	r2, #6
 8020b22:	f7df fb75 	bl	8000210 <memchr>
 8020b26:	2800      	cmp	r0, #0
 8020b28:	d03f      	beq.n	8020baa <_vfiprintf_r+0x20a>
 8020b2a:	4b26      	ldr	r3, [pc, #152]	@ (8020bc4 <_vfiprintf_r+0x224>)
 8020b2c:	bb1b      	cbnz	r3, 8020b76 <_vfiprintf_r+0x1d6>
 8020b2e:	9b03      	ldr	r3, [sp, #12]
 8020b30:	3307      	adds	r3, #7
 8020b32:	f023 0307 	bic.w	r3, r3, #7
 8020b36:	3308      	adds	r3, #8
 8020b38:	9303      	str	r3, [sp, #12]
 8020b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020b3c:	443b      	add	r3, r7
 8020b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b40:	e76a      	b.n	8020a18 <_vfiprintf_r+0x78>
 8020b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8020b46:	460c      	mov	r4, r1
 8020b48:	2001      	movs	r0, #1
 8020b4a:	e7a8      	b.n	8020a9e <_vfiprintf_r+0xfe>
 8020b4c:	2300      	movs	r3, #0
 8020b4e:	3401      	adds	r4, #1
 8020b50:	9305      	str	r3, [sp, #20]
 8020b52:	4619      	mov	r1, r3
 8020b54:	f04f 0c0a 	mov.w	ip, #10
 8020b58:	4620      	mov	r0, r4
 8020b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020b5e:	3a30      	subs	r2, #48	@ 0x30
 8020b60:	2a09      	cmp	r2, #9
 8020b62:	d903      	bls.n	8020b6c <_vfiprintf_r+0x1cc>
 8020b64:	2b00      	cmp	r3, #0
 8020b66:	d0c6      	beq.n	8020af6 <_vfiprintf_r+0x156>
 8020b68:	9105      	str	r1, [sp, #20]
 8020b6a:	e7c4      	b.n	8020af6 <_vfiprintf_r+0x156>
 8020b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8020b70:	4604      	mov	r4, r0
 8020b72:	2301      	movs	r3, #1
 8020b74:	e7f0      	b.n	8020b58 <_vfiprintf_r+0x1b8>
 8020b76:	ab03      	add	r3, sp, #12
 8020b78:	9300      	str	r3, [sp, #0]
 8020b7a:	462a      	mov	r2, r5
 8020b7c:	4b12      	ldr	r3, [pc, #72]	@ (8020bc8 <_vfiprintf_r+0x228>)
 8020b7e:	a904      	add	r1, sp, #16
 8020b80:	4630      	mov	r0, r6
 8020b82:	f3af 8000 	nop.w
 8020b86:	4607      	mov	r7, r0
 8020b88:	1c78      	adds	r0, r7, #1
 8020b8a:	d1d6      	bne.n	8020b3a <_vfiprintf_r+0x19a>
 8020b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020b8e:	07d9      	lsls	r1, r3, #31
 8020b90:	d405      	bmi.n	8020b9e <_vfiprintf_r+0x1fe>
 8020b92:	89ab      	ldrh	r3, [r5, #12]
 8020b94:	059a      	lsls	r2, r3, #22
 8020b96:	d402      	bmi.n	8020b9e <_vfiprintf_r+0x1fe>
 8020b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020b9a:	f7ff fda9 	bl	80206f0 <__retarget_lock_release_recursive>
 8020b9e:	89ab      	ldrh	r3, [r5, #12]
 8020ba0:	065b      	lsls	r3, r3, #25
 8020ba2:	f53f af1f 	bmi.w	80209e4 <_vfiprintf_r+0x44>
 8020ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020ba8:	e71e      	b.n	80209e8 <_vfiprintf_r+0x48>
 8020baa:	ab03      	add	r3, sp, #12
 8020bac:	9300      	str	r3, [sp, #0]
 8020bae:	462a      	mov	r2, r5
 8020bb0:	4b05      	ldr	r3, [pc, #20]	@ (8020bc8 <_vfiprintf_r+0x228>)
 8020bb2:	a904      	add	r1, sp, #16
 8020bb4:	4630      	mov	r0, r6
 8020bb6:	f000 f879 	bl	8020cac <_printf_i>
 8020bba:	e7e4      	b.n	8020b86 <_vfiprintf_r+0x1e6>
 8020bbc:	08024f81 	.word	0x08024f81
 8020bc0:	08024f8b 	.word	0x08024f8b
 8020bc4:	00000000 	.word	0x00000000
 8020bc8:	0802097b 	.word	0x0802097b
 8020bcc:	08024f87 	.word	0x08024f87

08020bd0 <_printf_common>:
 8020bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020bd4:	4616      	mov	r6, r2
 8020bd6:	4698      	mov	r8, r3
 8020bd8:	688a      	ldr	r2, [r1, #8]
 8020bda:	690b      	ldr	r3, [r1, #16]
 8020bdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8020be0:	4293      	cmp	r3, r2
 8020be2:	bfb8      	it	lt
 8020be4:	4613      	movlt	r3, r2
 8020be6:	6033      	str	r3, [r6, #0]
 8020be8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8020bec:	4607      	mov	r7, r0
 8020bee:	460c      	mov	r4, r1
 8020bf0:	b10a      	cbz	r2, 8020bf6 <_printf_common+0x26>
 8020bf2:	3301      	adds	r3, #1
 8020bf4:	6033      	str	r3, [r6, #0]
 8020bf6:	6823      	ldr	r3, [r4, #0]
 8020bf8:	0699      	lsls	r1, r3, #26
 8020bfa:	bf42      	ittt	mi
 8020bfc:	6833      	ldrmi	r3, [r6, #0]
 8020bfe:	3302      	addmi	r3, #2
 8020c00:	6033      	strmi	r3, [r6, #0]
 8020c02:	6825      	ldr	r5, [r4, #0]
 8020c04:	f015 0506 	ands.w	r5, r5, #6
 8020c08:	d106      	bne.n	8020c18 <_printf_common+0x48>
 8020c0a:	f104 0a19 	add.w	sl, r4, #25
 8020c0e:	68e3      	ldr	r3, [r4, #12]
 8020c10:	6832      	ldr	r2, [r6, #0]
 8020c12:	1a9b      	subs	r3, r3, r2
 8020c14:	42ab      	cmp	r3, r5
 8020c16:	dc26      	bgt.n	8020c66 <_printf_common+0x96>
 8020c18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8020c1c:	6822      	ldr	r2, [r4, #0]
 8020c1e:	3b00      	subs	r3, #0
 8020c20:	bf18      	it	ne
 8020c22:	2301      	movne	r3, #1
 8020c24:	0692      	lsls	r2, r2, #26
 8020c26:	d42b      	bmi.n	8020c80 <_printf_common+0xb0>
 8020c28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020c2c:	4641      	mov	r1, r8
 8020c2e:	4638      	mov	r0, r7
 8020c30:	47c8      	blx	r9
 8020c32:	3001      	adds	r0, #1
 8020c34:	d01e      	beq.n	8020c74 <_printf_common+0xa4>
 8020c36:	6823      	ldr	r3, [r4, #0]
 8020c38:	6922      	ldr	r2, [r4, #16]
 8020c3a:	f003 0306 	and.w	r3, r3, #6
 8020c3e:	2b04      	cmp	r3, #4
 8020c40:	bf02      	ittt	eq
 8020c42:	68e5      	ldreq	r5, [r4, #12]
 8020c44:	6833      	ldreq	r3, [r6, #0]
 8020c46:	1aed      	subeq	r5, r5, r3
 8020c48:	68a3      	ldr	r3, [r4, #8]
 8020c4a:	bf0c      	ite	eq
 8020c4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8020c50:	2500      	movne	r5, #0
 8020c52:	4293      	cmp	r3, r2
 8020c54:	bfc4      	itt	gt
 8020c56:	1a9b      	subgt	r3, r3, r2
 8020c58:	18ed      	addgt	r5, r5, r3
 8020c5a:	2600      	movs	r6, #0
 8020c5c:	341a      	adds	r4, #26
 8020c5e:	42b5      	cmp	r5, r6
 8020c60:	d11a      	bne.n	8020c98 <_printf_common+0xc8>
 8020c62:	2000      	movs	r0, #0
 8020c64:	e008      	b.n	8020c78 <_printf_common+0xa8>
 8020c66:	2301      	movs	r3, #1
 8020c68:	4652      	mov	r2, sl
 8020c6a:	4641      	mov	r1, r8
 8020c6c:	4638      	mov	r0, r7
 8020c6e:	47c8      	blx	r9
 8020c70:	3001      	adds	r0, #1
 8020c72:	d103      	bne.n	8020c7c <_printf_common+0xac>
 8020c74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020c78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c7c:	3501      	adds	r5, #1
 8020c7e:	e7c6      	b.n	8020c0e <_printf_common+0x3e>
 8020c80:	18e1      	adds	r1, r4, r3
 8020c82:	1c5a      	adds	r2, r3, #1
 8020c84:	2030      	movs	r0, #48	@ 0x30
 8020c86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020c8a:	4422      	add	r2, r4
 8020c8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8020c90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020c94:	3302      	adds	r3, #2
 8020c96:	e7c7      	b.n	8020c28 <_printf_common+0x58>
 8020c98:	2301      	movs	r3, #1
 8020c9a:	4622      	mov	r2, r4
 8020c9c:	4641      	mov	r1, r8
 8020c9e:	4638      	mov	r0, r7
 8020ca0:	47c8      	blx	r9
 8020ca2:	3001      	adds	r0, #1
 8020ca4:	d0e6      	beq.n	8020c74 <_printf_common+0xa4>
 8020ca6:	3601      	adds	r6, #1
 8020ca8:	e7d9      	b.n	8020c5e <_printf_common+0x8e>
	...

08020cac <_printf_i>:
 8020cac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020cb0:	7e0f      	ldrb	r7, [r1, #24]
 8020cb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020cb4:	2f78      	cmp	r7, #120	@ 0x78
 8020cb6:	4691      	mov	r9, r2
 8020cb8:	4680      	mov	r8, r0
 8020cba:	460c      	mov	r4, r1
 8020cbc:	469a      	mov	sl, r3
 8020cbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8020cc2:	d807      	bhi.n	8020cd4 <_printf_i+0x28>
 8020cc4:	2f62      	cmp	r7, #98	@ 0x62
 8020cc6:	d80a      	bhi.n	8020cde <_printf_i+0x32>
 8020cc8:	2f00      	cmp	r7, #0
 8020cca:	f000 80d1 	beq.w	8020e70 <_printf_i+0x1c4>
 8020cce:	2f58      	cmp	r7, #88	@ 0x58
 8020cd0:	f000 80b8 	beq.w	8020e44 <_printf_i+0x198>
 8020cd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020cd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8020cdc:	e03a      	b.n	8020d54 <_printf_i+0xa8>
 8020cde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8020ce2:	2b15      	cmp	r3, #21
 8020ce4:	d8f6      	bhi.n	8020cd4 <_printf_i+0x28>
 8020ce6:	a101      	add	r1, pc, #4	@ (adr r1, 8020cec <_printf_i+0x40>)
 8020ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8020cec:	08020d45 	.word	0x08020d45
 8020cf0:	08020d59 	.word	0x08020d59
 8020cf4:	08020cd5 	.word	0x08020cd5
 8020cf8:	08020cd5 	.word	0x08020cd5
 8020cfc:	08020cd5 	.word	0x08020cd5
 8020d00:	08020cd5 	.word	0x08020cd5
 8020d04:	08020d59 	.word	0x08020d59
 8020d08:	08020cd5 	.word	0x08020cd5
 8020d0c:	08020cd5 	.word	0x08020cd5
 8020d10:	08020cd5 	.word	0x08020cd5
 8020d14:	08020cd5 	.word	0x08020cd5
 8020d18:	08020e57 	.word	0x08020e57
 8020d1c:	08020d83 	.word	0x08020d83
 8020d20:	08020e11 	.word	0x08020e11
 8020d24:	08020cd5 	.word	0x08020cd5
 8020d28:	08020cd5 	.word	0x08020cd5
 8020d2c:	08020e79 	.word	0x08020e79
 8020d30:	08020cd5 	.word	0x08020cd5
 8020d34:	08020d83 	.word	0x08020d83
 8020d38:	08020cd5 	.word	0x08020cd5
 8020d3c:	08020cd5 	.word	0x08020cd5
 8020d40:	08020e19 	.word	0x08020e19
 8020d44:	6833      	ldr	r3, [r6, #0]
 8020d46:	1d1a      	adds	r2, r3, #4
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	6032      	str	r2, [r6, #0]
 8020d4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8020d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020d54:	2301      	movs	r3, #1
 8020d56:	e09c      	b.n	8020e92 <_printf_i+0x1e6>
 8020d58:	6833      	ldr	r3, [r6, #0]
 8020d5a:	6820      	ldr	r0, [r4, #0]
 8020d5c:	1d19      	adds	r1, r3, #4
 8020d5e:	6031      	str	r1, [r6, #0]
 8020d60:	0606      	lsls	r6, r0, #24
 8020d62:	d501      	bpl.n	8020d68 <_printf_i+0xbc>
 8020d64:	681d      	ldr	r5, [r3, #0]
 8020d66:	e003      	b.n	8020d70 <_printf_i+0xc4>
 8020d68:	0645      	lsls	r5, r0, #25
 8020d6a:	d5fb      	bpl.n	8020d64 <_printf_i+0xb8>
 8020d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8020d70:	2d00      	cmp	r5, #0
 8020d72:	da03      	bge.n	8020d7c <_printf_i+0xd0>
 8020d74:	232d      	movs	r3, #45	@ 0x2d
 8020d76:	426d      	negs	r5, r5
 8020d78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020d7c:	4858      	ldr	r0, [pc, #352]	@ (8020ee0 <_printf_i+0x234>)
 8020d7e:	230a      	movs	r3, #10
 8020d80:	e011      	b.n	8020da6 <_printf_i+0xfa>
 8020d82:	6821      	ldr	r1, [r4, #0]
 8020d84:	6833      	ldr	r3, [r6, #0]
 8020d86:	0608      	lsls	r0, r1, #24
 8020d88:	f853 5b04 	ldr.w	r5, [r3], #4
 8020d8c:	d402      	bmi.n	8020d94 <_printf_i+0xe8>
 8020d8e:	0649      	lsls	r1, r1, #25
 8020d90:	bf48      	it	mi
 8020d92:	b2ad      	uxthmi	r5, r5
 8020d94:	2f6f      	cmp	r7, #111	@ 0x6f
 8020d96:	4852      	ldr	r0, [pc, #328]	@ (8020ee0 <_printf_i+0x234>)
 8020d98:	6033      	str	r3, [r6, #0]
 8020d9a:	bf14      	ite	ne
 8020d9c:	230a      	movne	r3, #10
 8020d9e:	2308      	moveq	r3, #8
 8020da0:	2100      	movs	r1, #0
 8020da2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020da6:	6866      	ldr	r6, [r4, #4]
 8020da8:	60a6      	str	r6, [r4, #8]
 8020daa:	2e00      	cmp	r6, #0
 8020dac:	db05      	blt.n	8020dba <_printf_i+0x10e>
 8020dae:	6821      	ldr	r1, [r4, #0]
 8020db0:	432e      	orrs	r6, r5
 8020db2:	f021 0104 	bic.w	r1, r1, #4
 8020db6:	6021      	str	r1, [r4, #0]
 8020db8:	d04b      	beq.n	8020e52 <_printf_i+0x1a6>
 8020dba:	4616      	mov	r6, r2
 8020dbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8020dc0:	fb03 5711 	mls	r7, r3, r1, r5
 8020dc4:	5dc7      	ldrb	r7, [r0, r7]
 8020dc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8020dca:	462f      	mov	r7, r5
 8020dcc:	42bb      	cmp	r3, r7
 8020dce:	460d      	mov	r5, r1
 8020dd0:	d9f4      	bls.n	8020dbc <_printf_i+0x110>
 8020dd2:	2b08      	cmp	r3, #8
 8020dd4:	d10b      	bne.n	8020dee <_printf_i+0x142>
 8020dd6:	6823      	ldr	r3, [r4, #0]
 8020dd8:	07df      	lsls	r7, r3, #31
 8020dda:	d508      	bpl.n	8020dee <_printf_i+0x142>
 8020ddc:	6923      	ldr	r3, [r4, #16]
 8020dde:	6861      	ldr	r1, [r4, #4]
 8020de0:	4299      	cmp	r1, r3
 8020de2:	bfde      	ittt	le
 8020de4:	2330      	movle	r3, #48	@ 0x30
 8020de6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8020dea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8020dee:	1b92      	subs	r2, r2, r6
 8020df0:	6122      	str	r2, [r4, #16]
 8020df2:	f8cd a000 	str.w	sl, [sp]
 8020df6:	464b      	mov	r3, r9
 8020df8:	aa03      	add	r2, sp, #12
 8020dfa:	4621      	mov	r1, r4
 8020dfc:	4640      	mov	r0, r8
 8020dfe:	f7ff fee7 	bl	8020bd0 <_printf_common>
 8020e02:	3001      	adds	r0, #1
 8020e04:	d14a      	bne.n	8020e9c <_printf_i+0x1f0>
 8020e06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020e0a:	b004      	add	sp, #16
 8020e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e10:	6823      	ldr	r3, [r4, #0]
 8020e12:	f043 0320 	orr.w	r3, r3, #32
 8020e16:	6023      	str	r3, [r4, #0]
 8020e18:	4832      	ldr	r0, [pc, #200]	@ (8020ee4 <_printf_i+0x238>)
 8020e1a:	2778      	movs	r7, #120	@ 0x78
 8020e1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8020e20:	6823      	ldr	r3, [r4, #0]
 8020e22:	6831      	ldr	r1, [r6, #0]
 8020e24:	061f      	lsls	r7, r3, #24
 8020e26:	f851 5b04 	ldr.w	r5, [r1], #4
 8020e2a:	d402      	bmi.n	8020e32 <_printf_i+0x186>
 8020e2c:	065f      	lsls	r7, r3, #25
 8020e2e:	bf48      	it	mi
 8020e30:	b2ad      	uxthmi	r5, r5
 8020e32:	6031      	str	r1, [r6, #0]
 8020e34:	07d9      	lsls	r1, r3, #31
 8020e36:	bf44      	itt	mi
 8020e38:	f043 0320 	orrmi.w	r3, r3, #32
 8020e3c:	6023      	strmi	r3, [r4, #0]
 8020e3e:	b11d      	cbz	r5, 8020e48 <_printf_i+0x19c>
 8020e40:	2310      	movs	r3, #16
 8020e42:	e7ad      	b.n	8020da0 <_printf_i+0xf4>
 8020e44:	4826      	ldr	r0, [pc, #152]	@ (8020ee0 <_printf_i+0x234>)
 8020e46:	e7e9      	b.n	8020e1c <_printf_i+0x170>
 8020e48:	6823      	ldr	r3, [r4, #0]
 8020e4a:	f023 0320 	bic.w	r3, r3, #32
 8020e4e:	6023      	str	r3, [r4, #0]
 8020e50:	e7f6      	b.n	8020e40 <_printf_i+0x194>
 8020e52:	4616      	mov	r6, r2
 8020e54:	e7bd      	b.n	8020dd2 <_printf_i+0x126>
 8020e56:	6833      	ldr	r3, [r6, #0]
 8020e58:	6825      	ldr	r5, [r4, #0]
 8020e5a:	6961      	ldr	r1, [r4, #20]
 8020e5c:	1d18      	adds	r0, r3, #4
 8020e5e:	6030      	str	r0, [r6, #0]
 8020e60:	062e      	lsls	r6, r5, #24
 8020e62:	681b      	ldr	r3, [r3, #0]
 8020e64:	d501      	bpl.n	8020e6a <_printf_i+0x1be>
 8020e66:	6019      	str	r1, [r3, #0]
 8020e68:	e002      	b.n	8020e70 <_printf_i+0x1c4>
 8020e6a:	0668      	lsls	r0, r5, #25
 8020e6c:	d5fb      	bpl.n	8020e66 <_printf_i+0x1ba>
 8020e6e:	8019      	strh	r1, [r3, #0]
 8020e70:	2300      	movs	r3, #0
 8020e72:	6123      	str	r3, [r4, #16]
 8020e74:	4616      	mov	r6, r2
 8020e76:	e7bc      	b.n	8020df2 <_printf_i+0x146>
 8020e78:	6833      	ldr	r3, [r6, #0]
 8020e7a:	1d1a      	adds	r2, r3, #4
 8020e7c:	6032      	str	r2, [r6, #0]
 8020e7e:	681e      	ldr	r6, [r3, #0]
 8020e80:	6862      	ldr	r2, [r4, #4]
 8020e82:	2100      	movs	r1, #0
 8020e84:	4630      	mov	r0, r6
 8020e86:	f7df f9c3 	bl	8000210 <memchr>
 8020e8a:	b108      	cbz	r0, 8020e90 <_printf_i+0x1e4>
 8020e8c:	1b80      	subs	r0, r0, r6
 8020e8e:	6060      	str	r0, [r4, #4]
 8020e90:	6863      	ldr	r3, [r4, #4]
 8020e92:	6123      	str	r3, [r4, #16]
 8020e94:	2300      	movs	r3, #0
 8020e96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020e9a:	e7aa      	b.n	8020df2 <_printf_i+0x146>
 8020e9c:	6923      	ldr	r3, [r4, #16]
 8020e9e:	4632      	mov	r2, r6
 8020ea0:	4649      	mov	r1, r9
 8020ea2:	4640      	mov	r0, r8
 8020ea4:	47d0      	blx	sl
 8020ea6:	3001      	adds	r0, #1
 8020ea8:	d0ad      	beq.n	8020e06 <_printf_i+0x15a>
 8020eaa:	6823      	ldr	r3, [r4, #0]
 8020eac:	079b      	lsls	r3, r3, #30
 8020eae:	d413      	bmi.n	8020ed8 <_printf_i+0x22c>
 8020eb0:	68e0      	ldr	r0, [r4, #12]
 8020eb2:	9b03      	ldr	r3, [sp, #12]
 8020eb4:	4298      	cmp	r0, r3
 8020eb6:	bfb8      	it	lt
 8020eb8:	4618      	movlt	r0, r3
 8020eba:	e7a6      	b.n	8020e0a <_printf_i+0x15e>
 8020ebc:	2301      	movs	r3, #1
 8020ebe:	4632      	mov	r2, r6
 8020ec0:	4649      	mov	r1, r9
 8020ec2:	4640      	mov	r0, r8
 8020ec4:	47d0      	blx	sl
 8020ec6:	3001      	adds	r0, #1
 8020ec8:	d09d      	beq.n	8020e06 <_printf_i+0x15a>
 8020eca:	3501      	adds	r5, #1
 8020ecc:	68e3      	ldr	r3, [r4, #12]
 8020ece:	9903      	ldr	r1, [sp, #12]
 8020ed0:	1a5b      	subs	r3, r3, r1
 8020ed2:	42ab      	cmp	r3, r5
 8020ed4:	dcf2      	bgt.n	8020ebc <_printf_i+0x210>
 8020ed6:	e7eb      	b.n	8020eb0 <_printf_i+0x204>
 8020ed8:	2500      	movs	r5, #0
 8020eda:	f104 0619 	add.w	r6, r4, #25
 8020ede:	e7f5      	b.n	8020ecc <_printf_i+0x220>
 8020ee0:	08024f92 	.word	0x08024f92
 8020ee4:	08024fa3 	.word	0x08024fa3

08020ee8 <__sflush_r>:
 8020ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ef0:	0716      	lsls	r6, r2, #28
 8020ef2:	4605      	mov	r5, r0
 8020ef4:	460c      	mov	r4, r1
 8020ef6:	d454      	bmi.n	8020fa2 <__sflush_r+0xba>
 8020ef8:	684b      	ldr	r3, [r1, #4]
 8020efa:	2b00      	cmp	r3, #0
 8020efc:	dc02      	bgt.n	8020f04 <__sflush_r+0x1c>
 8020efe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020f00:	2b00      	cmp	r3, #0
 8020f02:	dd48      	ble.n	8020f96 <__sflush_r+0xae>
 8020f04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020f06:	2e00      	cmp	r6, #0
 8020f08:	d045      	beq.n	8020f96 <__sflush_r+0xae>
 8020f0a:	2300      	movs	r3, #0
 8020f0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020f10:	682f      	ldr	r7, [r5, #0]
 8020f12:	6a21      	ldr	r1, [r4, #32]
 8020f14:	602b      	str	r3, [r5, #0]
 8020f16:	d030      	beq.n	8020f7a <__sflush_r+0x92>
 8020f18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020f1a:	89a3      	ldrh	r3, [r4, #12]
 8020f1c:	0759      	lsls	r1, r3, #29
 8020f1e:	d505      	bpl.n	8020f2c <__sflush_r+0x44>
 8020f20:	6863      	ldr	r3, [r4, #4]
 8020f22:	1ad2      	subs	r2, r2, r3
 8020f24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020f26:	b10b      	cbz	r3, 8020f2c <__sflush_r+0x44>
 8020f28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020f2a:	1ad2      	subs	r2, r2, r3
 8020f2c:	2300      	movs	r3, #0
 8020f2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020f30:	6a21      	ldr	r1, [r4, #32]
 8020f32:	4628      	mov	r0, r5
 8020f34:	47b0      	blx	r6
 8020f36:	1c43      	adds	r3, r0, #1
 8020f38:	89a3      	ldrh	r3, [r4, #12]
 8020f3a:	d106      	bne.n	8020f4a <__sflush_r+0x62>
 8020f3c:	6829      	ldr	r1, [r5, #0]
 8020f3e:	291d      	cmp	r1, #29
 8020f40:	d82b      	bhi.n	8020f9a <__sflush_r+0xb2>
 8020f42:	4a2a      	ldr	r2, [pc, #168]	@ (8020fec <__sflush_r+0x104>)
 8020f44:	40ca      	lsrs	r2, r1
 8020f46:	07d6      	lsls	r6, r2, #31
 8020f48:	d527      	bpl.n	8020f9a <__sflush_r+0xb2>
 8020f4a:	2200      	movs	r2, #0
 8020f4c:	6062      	str	r2, [r4, #4]
 8020f4e:	04d9      	lsls	r1, r3, #19
 8020f50:	6922      	ldr	r2, [r4, #16]
 8020f52:	6022      	str	r2, [r4, #0]
 8020f54:	d504      	bpl.n	8020f60 <__sflush_r+0x78>
 8020f56:	1c42      	adds	r2, r0, #1
 8020f58:	d101      	bne.n	8020f5e <__sflush_r+0x76>
 8020f5a:	682b      	ldr	r3, [r5, #0]
 8020f5c:	b903      	cbnz	r3, 8020f60 <__sflush_r+0x78>
 8020f5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8020f60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020f62:	602f      	str	r7, [r5, #0]
 8020f64:	b1b9      	cbz	r1, 8020f96 <__sflush_r+0xae>
 8020f66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020f6a:	4299      	cmp	r1, r3
 8020f6c:	d002      	beq.n	8020f74 <__sflush_r+0x8c>
 8020f6e:	4628      	mov	r0, r5
 8020f70:	f7ff fbec 	bl	802074c <_free_r>
 8020f74:	2300      	movs	r3, #0
 8020f76:	6363      	str	r3, [r4, #52]	@ 0x34
 8020f78:	e00d      	b.n	8020f96 <__sflush_r+0xae>
 8020f7a:	2301      	movs	r3, #1
 8020f7c:	4628      	mov	r0, r5
 8020f7e:	47b0      	blx	r6
 8020f80:	4602      	mov	r2, r0
 8020f82:	1c50      	adds	r0, r2, #1
 8020f84:	d1c9      	bne.n	8020f1a <__sflush_r+0x32>
 8020f86:	682b      	ldr	r3, [r5, #0]
 8020f88:	2b00      	cmp	r3, #0
 8020f8a:	d0c6      	beq.n	8020f1a <__sflush_r+0x32>
 8020f8c:	2b1d      	cmp	r3, #29
 8020f8e:	d001      	beq.n	8020f94 <__sflush_r+0xac>
 8020f90:	2b16      	cmp	r3, #22
 8020f92:	d11e      	bne.n	8020fd2 <__sflush_r+0xea>
 8020f94:	602f      	str	r7, [r5, #0]
 8020f96:	2000      	movs	r0, #0
 8020f98:	e022      	b.n	8020fe0 <__sflush_r+0xf8>
 8020f9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020f9e:	b21b      	sxth	r3, r3
 8020fa0:	e01b      	b.n	8020fda <__sflush_r+0xf2>
 8020fa2:	690f      	ldr	r7, [r1, #16]
 8020fa4:	2f00      	cmp	r7, #0
 8020fa6:	d0f6      	beq.n	8020f96 <__sflush_r+0xae>
 8020fa8:	0793      	lsls	r3, r2, #30
 8020faa:	680e      	ldr	r6, [r1, #0]
 8020fac:	bf08      	it	eq
 8020fae:	694b      	ldreq	r3, [r1, #20]
 8020fb0:	600f      	str	r7, [r1, #0]
 8020fb2:	bf18      	it	ne
 8020fb4:	2300      	movne	r3, #0
 8020fb6:	eba6 0807 	sub.w	r8, r6, r7
 8020fba:	608b      	str	r3, [r1, #8]
 8020fbc:	f1b8 0f00 	cmp.w	r8, #0
 8020fc0:	dde9      	ble.n	8020f96 <__sflush_r+0xae>
 8020fc2:	6a21      	ldr	r1, [r4, #32]
 8020fc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020fc6:	4643      	mov	r3, r8
 8020fc8:	463a      	mov	r2, r7
 8020fca:	4628      	mov	r0, r5
 8020fcc:	47b0      	blx	r6
 8020fce:	2800      	cmp	r0, #0
 8020fd0:	dc08      	bgt.n	8020fe4 <__sflush_r+0xfc>
 8020fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020fd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020fda:	81a3      	strh	r3, [r4, #12]
 8020fdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8020fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020fe4:	4407      	add	r7, r0
 8020fe6:	eba8 0800 	sub.w	r8, r8, r0
 8020fea:	e7e7      	b.n	8020fbc <__sflush_r+0xd4>
 8020fec:	20400001 	.word	0x20400001

08020ff0 <_fflush_r>:
 8020ff0:	b538      	push	{r3, r4, r5, lr}
 8020ff2:	690b      	ldr	r3, [r1, #16]
 8020ff4:	4605      	mov	r5, r0
 8020ff6:	460c      	mov	r4, r1
 8020ff8:	b913      	cbnz	r3, 8021000 <_fflush_r+0x10>
 8020ffa:	2500      	movs	r5, #0
 8020ffc:	4628      	mov	r0, r5
 8020ffe:	bd38      	pop	{r3, r4, r5, pc}
 8021000:	b118      	cbz	r0, 802100a <_fflush_r+0x1a>
 8021002:	6a03      	ldr	r3, [r0, #32]
 8021004:	b90b      	cbnz	r3, 802100a <_fflush_r+0x1a>
 8021006:	f7ff f913 	bl	8020230 <__sinit>
 802100a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802100e:	2b00      	cmp	r3, #0
 8021010:	d0f3      	beq.n	8020ffa <_fflush_r+0xa>
 8021012:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021014:	07d0      	lsls	r0, r2, #31
 8021016:	d404      	bmi.n	8021022 <_fflush_r+0x32>
 8021018:	0599      	lsls	r1, r3, #22
 802101a:	d402      	bmi.n	8021022 <_fflush_r+0x32>
 802101c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802101e:	f7ff fb66 	bl	80206ee <__retarget_lock_acquire_recursive>
 8021022:	4628      	mov	r0, r5
 8021024:	4621      	mov	r1, r4
 8021026:	f7ff ff5f 	bl	8020ee8 <__sflush_r>
 802102a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802102c:	07da      	lsls	r2, r3, #31
 802102e:	4605      	mov	r5, r0
 8021030:	d4e4      	bmi.n	8020ffc <_fflush_r+0xc>
 8021032:	89a3      	ldrh	r3, [r4, #12]
 8021034:	059b      	lsls	r3, r3, #22
 8021036:	d4e1      	bmi.n	8020ffc <_fflush_r+0xc>
 8021038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802103a:	f7ff fb59 	bl	80206f0 <__retarget_lock_release_recursive>
 802103e:	e7dd      	b.n	8020ffc <_fflush_r+0xc>

08021040 <fiprintf>:
 8021040:	b40e      	push	{r1, r2, r3}
 8021042:	b503      	push	{r0, r1, lr}
 8021044:	4601      	mov	r1, r0
 8021046:	ab03      	add	r3, sp, #12
 8021048:	4805      	ldr	r0, [pc, #20]	@ (8021060 <fiprintf+0x20>)
 802104a:	f853 2b04 	ldr.w	r2, [r3], #4
 802104e:	6800      	ldr	r0, [r0, #0]
 8021050:	9301      	str	r3, [sp, #4]
 8021052:	f7ff fca5 	bl	80209a0 <_vfiprintf_r>
 8021056:	b002      	add	sp, #8
 8021058:	f85d eb04 	ldr.w	lr, [sp], #4
 802105c:	b003      	add	sp, #12
 802105e:	4770      	bx	lr
 8021060:	2000003c 	.word	0x2000003c

08021064 <__swhatbuf_r>:
 8021064:	b570      	push	{r4, r5, r6, lr}
 8021066:	460c      	mov	r4, r1
 8021068:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802106c:	2900      	cmp	r1, #0
 802106e:	b096      	sub	sp, #88	@ 0x58
 8021070:	4615      	mov	r5, r2
 8021072:	461e      	mov	r6, r3
 8021074:	da0d      	bge.n	8021092 <__swhatbuf_r+0x2e>
 8021076:	89a3      	ldrh	r3, [r4, #12]
 8021078:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802107c:	f04f 0100 	mov.w	r1, #0
 8021080:	bf14      	ite	ne
 8021082:	2340      	movne	r3, #64	@ 0x40
 8021084:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021088:	2000      	movs	r0, #0
 802108a:	6031      	str	r1, [r6, #0]
 802108c:	602b      	str	r3, [r5, #0]
 802108e:	b016      	add	sp, #88	@ 0x58
 8021090:	bd70      	pop	{r4, r5, r6, pc}
 8021092:	466a      	mov	r2, sp
 8021094:	f000 f848 	bl	8021128 <_fstat_r>
 8021098:	2800      	cmp	r0, #0
 802109a:	dbec      	blt.n	8021076 <__swhatbuf_r+0x12>
 802109c:	9901      	ldr	r1, [sp, #4]
 802109e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80210a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80210a6:	4259      	negs	r1, r3
 80210a8:	4159      	adcs	r1, r3
 80210aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80210ae:	e7eb      	b.n	8021088 <__swhatbuf_r+0x24>

080210b0 <__smakebuf_r>:
 80210b0:	898b      	ldrh	r3, [r1, #12]
 80210b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80210b4:	079d      	lsls	r5, r3, #30
 80210b6:	4606      	mov	r6, r0
 80210b8:	460c      	mov	r4, r1
 80210ba:	d507      	bpl.n	80210cc <__smakebuf_r+0x1c>
 80210bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80210c0:	6023      	str	r3, [r4, #0]
 80210c2:	6123      	str	r3, [r4, #16]
 80210c4:	2301      	movs	r3, #1
 80210c6:	6163      	str	r3, [r4, #20]
 80210c8:	b003      	add	sp, #12
 80210ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210cc:	ab01      	add	r3, sp, #4
 80210ce:	466a      	mov	r2, sp
 80210d0:	f7ff ffc8 	bl	8021064 <__swhatbuf_r>
 80210d4:	9f00      	ldr	r7, [sp, #0]
 80210d6:	4605      	mov	r5, r0
 80210d8:	4639      	mov	r1, r7
 80210da:	4630      	mov	r0, r6
 80210dc:	f7ff fbaa 	bl	8020834 <_malloc_r>
 80210e0:	b948      	cbnz	r0, 80210f6 <__smakebuf_r+0x46>
 80210e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80210e6:	059a      	lsls	r2, r3, #22
 80210e8:	d4ee      	bmi.n	80210c8 <__smakebuf_r+0x18>
 80210ea:	f023 0303 	bic.w	r3, r3, #3
 80210ee:	f043 0302 	orr.w	r3, r3, #2
 80210f2:	81a3      	strh	r3, [r4, #12]
 80210f4:	e7e2      	b.n	80210bc <__smakebuf_r+0xc>
 80210f6:	89a3      	ldrh	r3, [r4, #12]
 80210f8:	6020      	str	r0, [r4, #0]
 80210fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80210fe:	81a3      	strh	r3, [r4, #12]
 8021100:	9b01      	ldr	r3, [sp, #4]
 8021102:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021106:	b15b      	cbz	r3, 8021120 <__smakebuf_r+0x70>
 8021108:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802110c:	4630      	mov	r0, r6
 802110e:	f000 f81d 	bl	802114c <_isatty_r>
 8021112:	b128      	cbz	r0, 8021120 <__smakebuf_r+0x70>
 8021114:	89a3      	ldrh	r3, [r4, #12]
 8021116:	f023 0303 	bic.w	r3, r3, #3
 802111a:	f043 0301 	orr.w	r3, r3, #1
 802111e:	81a3      	strh	r3, [r4, #12]
 8021120:	89a3      	ldrh	r3, [r4, #12]
 8021122:	431d      	orrs	r5, r3
 8021124:	81a5      	strh	r5, [r4, #12]
 8021126:	e7cf      	b.n	80210c8 <__smakebuf_r+0x18>

08021128 <_fstat_r>:
 8021128:	b538      	push	{r3, r4, r5, lr}
 802112a:	4d07      	ldr	r5, [pc, #28]	@ (8021148 <_fstat_r+0x20>)
 802112c:	2300      	movs	r3, #0
 802112e:	4604      	mov	r4, r0
 8021130:	4608      	mov	r0, r1
 8021132:	4611      	mov	r1, r2
 8021134:	602b      	str	r3, [r5, #0]
 8021136:	f7e0 fc4f 	bl	80019d8 <_fstat>
 802113a:	1c43      	adds	r3, r0, #1
 802113c:	d102      	bne.n	8021144 <_fstat_r+0x1c>
 802113e:	682b      	ldr	r3, [r5, #0]
 8021140:	b103      	cbz	r3, 8021144 <_fstat_r+0x1c>
 8021142:	6023      	str	r3, [r4, #0]
 8021144:	bd38      	pop	{r3, r4, r5, pc}
 8021146:	bf00      	nop
 8021148:	200258ac 	.word	0x200258ac

0802114c <_isatty_r>:
 802114c:	b538      	push	{r3, r4, r5, lr}
 802114e:	4d06      	ldr	r5, [pc, #24]	@ (8021168 <_isatty_r+0x1c>)
 8021150:	2300      	movs	r3, #0
 8021152:	4604      	mov	r4, r0
 8021154:	4608      	mov	r0, r1
 8021156:	602b      	str	r3, [r5, #0]
 8021158:	f7e0 fc4e 	bl	80019f8 <_isatty>
 802115c:	1c43      	adds	r3, r0, #1
 802115e:	d102      	bne.n	8021166 <_isatty_r+0x1a>
 8021160:	682b      	ldr	r3, [r5, #0]
 8021162:	b103      	cbz	r3, 8021166 <_isatty_r+0x1a>
 8021164:	6023      	str	r3, [r4, #0]
 8021166:	bd38      	pop	{r3, r4, r5, pc}
 8021168:	200258ac 	.word	0x200258ac

0802116c <_sbrk_r>:
 802116c:	b538      	push	{r3, r4, r5, lr}
 802116e:	4d06      	ldr	r5, [pc, #24]	@ (8021188 <_sbrk_r+0x1c>)
 8021170:	2300      	movs	r3, #0
 8021172:	4604      	mov	r4, r0
 8021174:	4608      	mov	r0, r1
 8021176:	602b      	str	r3, [r5, #0]
 8021178:	f7e0 fc56 	bl	8001a28 <_sbrk>
 802117c:	1c43      	adds	r3, r0, #1
 802117e:	d102      	bne.n	8021186 <_sbrk_r+0x1a>
 8021180:	682b      	ldr	r3, [r5, #0]
 8021182:	b103      	cbz	r3, 8021186 <_sbrk_r+0x1a>
 8021184:	6023      	str	r3, [r4, #0]
 8021186:	bd38      	pop	{r3, r4, r5, pc}
 8021188:	200258ac 	.word	0x200258ac

0802118c <abort>:
 802118c:	b508      	push	{r3, lr}
 802118e:	2006      	movs	r0, #6
 8021190:	f000 f82c 	bl	80211ec <raise>
 8021194:	2001      	movs	r0, #1
 8021196:	f7e0 fbeb 	bl	8001970 <_exit>

0802119a <_raise_r>:
 802119a:	291f      	cmp	r1, #31
 802119c:	b538      	push	{r3, r4, r5, lr}
 802119e:	4605      	mov	r5, r0
 80211a0:	460c      	mov	r4, r1
 80211a2:	d904      	bls.n	80211ae <_raise_r+0x14>
 80211a4:	2316      	movs	r3, #22
 80211a6:	6003      	str	r3, [r0, #0]
 80211a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80211ac:	bd38      	pop	{r3, r4, r5, pc}
 80211ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80211b0:	b112      	cbz	r2, 80211b8 <_raise_r+0x1e>
 80211b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80211b6:	b94b      	cbnz	r3, 80211cc <_raise_r+0x32>
 80211b8:	4628      	mov	r0, r5
 80211ba:	f000 f831 	bl	8021220 <_getpid_r>
 80211be:	4622      	mov	r2, r4
 80211c0:	4601      	mov	r1, r0
 80211c2:	4628      	mov	r0, r5
 80211c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80211c8:	f000 b818 	b.w	80211fc <_kill_r>
 80211cc:	2b01      	cmp	r3, #1
 80211ce:	d00a      	beq.n	80211e6 <_raise_r+0x4c>
 80211d0:	1c59      	adds	r1, r3, #1
 80211d2:	d103      	bne.n	80211dc <_raise_r+0x42>
 80211d4:	2316      	movs	r3, #22
 80211d6:	6003      	str	r3, [r0, #0]
 80211d8:	2001      	movs	r0, #1
 80211da:	e7e7      	b.n	80211ac <_raise_r+0x12>
 80211dc:	2100      	movs	r1, #0
 80211de:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80211e2:	4620      	mov	r0, r4
 80211e4:	4798      	blx	r3
 80211e6:	2000      	movs	r0, #0
 80211e8:	e7e0      	b.n	80211ac <_raise_r+0x12>
	...

080211ec <raise>:
 80211ec:	4b02      	ldr	r3, [pc, #8]	@ (80211f8 <raise+0xc>)
 80211ee:	4601      	mov	r1, r0
 80211f0:	6818      	ldr	r0, [r3, #0]
 80211f2:	f7ff bfd2 	b.w	802119a <_raise_r>
 80211f6:	bf00      	nop
 80211f8:	2000003c 	.word	0x2000003c

080211fc <_kill_r>:
 80211fc:	b538      	push	{r3, r4, r5, lr}
 80211fe:	4d07      	ldr	r5, [pc, #28]	@ (802121c <_kill_r+0x20>)
 8021200:	2300      	movs	r3, #0
 8021202:	4604      	mov	r4, r0
 8021204:	4608      	mov	r0, r1
 8021206:	4611      	mov	r1, r2
 8021208:	602b      	str	r3, [r5, #0]
 802120a:	f7e0 fb9f 	bl	800194c <_kill>
 802120e:	1c43      	adds	r3, r0, #1
 8021210:	d102      	bne.n	8021218 <_kill_r+0x1c>
 8021212:	682b      	ldr	r3, [r5, #0]
 8021214:	b103      	cbz	r3, 8021218 <_kill_r+0x1c>
 8021216:	6023      	str	r3, [r4, #0]
 8021218:	bd38      	pop	{r3, r4, r5, pc}
 802121a:	bf00      	nop
 802121c:	200258ac 	.word	0x200258ac

08021220 <_getpid_r>:
 8021220:	f7e0 bb8c 	b.w	800193c <_getpid>

08021224 <_init>:
 8021224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021226:	bf00      	nop
 8021228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802122a:	bc08      	pop	{r3}
 802122c:	469e      	mov	lr, r3
 802122e:	4770      	bx	lr

08021230 <_fini>:
 8021230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021232:	bf00      	nop
 8021234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021236:	bc08      	pop	{r3}
 8021238:	469e      	mov	lr, r3
 802123a:	4770      	bx	lr
