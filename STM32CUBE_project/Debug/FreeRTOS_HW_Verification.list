
FreeRTOS_HW_Verification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021d1c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fc0  08021eec  08021eec  00022eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026eac  08026eac  00028210  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08026eac  08026eac  00027eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026eb4  08026eb4  00028210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026eb4  08026eb4  00027eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026eb8  08026eb8  00027eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d0  20000000  08026ebc  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000d0  08026f8c  000280d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000170  0802702c  00028170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002d758  20000210  080270cc  00028210  2**2
                  ALLOC
 12 ._user_heap_stack 00005000  2002d968  080270cc  00028968  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00028210  2**0
                  CONTENTS, READONLY
 14 .debug_info   00045c07  00000000  00000000  00028240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000afb7  00000000  00000000  0006de47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000030b0  00000000  00000000  00078e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000262f  00000000  00000000  0007beb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f73c  00000000  00000000  0007e4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004ffa1  00000000  00000000  000bdc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0012397d  00000000  00000000  0010dbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00231539  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000cea0  00000000  00000000  0023157c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000081  00000000  00000000  0023e41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08021ed4 	.word	0x08021ed4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08021ed4 	.word	0x08021ed4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ee:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f0:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_ADC1_Init+0x9c>)
 80005f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000674 <MX_ADC1_Init+0x98>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000602:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000616:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000618:	2200      	movs	r2, #0
 800061a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_ADC1_Init+0x98>)
 800061e:	4a17      	ldr	r2, [pc, #92]	@ (800067c <MX_ADC1_Init+0xa0>)
 8000620:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000622:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_ADC1_Init+0x98>)
 800062a:	2201      	movs	r2, #1
 800062c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_ADC1_Init+0x98>)
 8000638:	2201      	movs	r2, #1
 800063a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800063c:	480d      	ldr	r0, [pc, #52]	@ (8000674 <MX_ADC1_Init+0x98>)
 800063e:	f001 ff63 	bl	8002508 <HAL_ADC_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000648:	f000 fe72 	bl	8001330 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800064c:	2300      	movs	r3, #0
 800064e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000650:	2301      	movs	r3, #1
 8000652:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	@ (8000674 <MX_ADC1_Init+0x98>)
 800065e:	f002 f903 	bl	8002868 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000668:	f000 fe62 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000022c 	.word	0x2000022c
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a2c      	ldr	r2, [pc, #176]	@ (8000750 <HAL_ADC_MspInit+0xd0>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d152      	bne.n	8000748 <HAL_ADC_MspInit+0xc8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80006ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80006ae:	4b29      	ldr	r3, [pc, #164]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ba:	4b26      	ldr	r3, [pc, #152]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a25      	ldr	r2, [pc, #148]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b23      	ldr	r3, [pc, #140]	@ (8000754 <HAL_ADC_MspInit+0xd4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d2:	2301      	movs	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4619      	mov	r1, r3
 80006e4:	481c      	ldr	r0, [pc, #112]	@ (8000758 <HAL_ADC_MspInit+0xd8>)
 80006e6:	f004 fd1b 	bl	8005120 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <HAL_ADC_MspInit+0xe0>)
 80006ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006fc:	4b17      	ldr	r3, [pc, #92]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000702:	4b16      	ldr	r3, [pc, #88]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000704:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000708:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800070c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000710:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000714:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000718:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800071a:	4b10      	ldr	r3, [pc, #64]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000720:	4b0e      	ldr	r3, [pc, #56]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 800072e:	f002 fe5d 	bl	80033ec <HAL_DMA_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 8000738:	f000 fdfa 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000740:	639a      	str	r2, [r3, #56]	@ 0x38
 8000742:	4a06      	ldr	r2, [pc, #24]	@ (800075c <HAL_ADC_MspInit+0xdc>)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000748:	bf00      	nop
 800074a:	3728      	adds	r7, #40	@ 0x28
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40012000 	.word	0x40012000
 8000754:	40023800 	.word	0x40023800
 8000758:	40020000 	.word	0x40020000
 800075c:	20000274 	.word	0x20000274
 8000760:	40026470 	.word	0x40026470

08000764 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800076a:	4a0e      	ldr	r2, [pc, #56]	@ (80007a4 <MX_CRC_Init+0x40>)
 800076c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000770:	2200      	movs	r2, #0
 8000772:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000776:	2200      	movs	r2, #0
 8000778:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_CRC_Init+0x3c>)
 8000788:	2201      	movs	r2, #1
 800078a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_CRC_Init+0x3c>)
 800078e:	f002 fc23 	bl	8002fd8 <HAL_CRC_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000798:	f000 fdca 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	200002d4 	.word	0x200002d4
 80007a4:	40023000 	.word	0x40023000

080007a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <HAL_CRC_MspInit+0x38>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d10b      	bne.n	80007d2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80007ba:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	4a09      	ldr	r2, [pc, #36]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <HAL_CRC_MspInit+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023000 	.word	0x40023000
 80007e4:	40023800 	.word	0x40023800

080007e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ee:	4b3e      	ldr	r3, [pc, #248]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a3d      	ldr	r2, [pc, #244]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b3b      	ldr	r3, [pc, #236]	@ (80008e8 <MX_DMA_Init+0x100>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000806:	4b38      	ldr	r3, [pc, #224]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a37      	ldr	r2, [pc, #220]	@ (80008e8 <MX_DMA_Init+0x100>)
 800080c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b35      	ldr	r3, [pc, #212]	@ (80008e8 <MX_DMA_Init+0x100>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2105      	movs	r1, #5
 8000822:	200b      	movs	r0, #11
 8000824:	f002 fbae 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000828:	200b      	movs	r0, #11
 800082a:	f002 fbc7 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2105      	movs	r1, #5
 8000832:	200c      	movs	r0, #12
 8000834:	f002 fba6 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000838:	200c      	movs	r0, #12
 800083a:	f002 fbbf 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2105      	movs	r1, #5
 8000842:	200d      	movs	r0, #13
 8000844:	f002 fb9e 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000848:	200d      	movs	r0, #13
 800084a:	f002 fbb7 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2105      	movs	r1, #5
 8000852:	200e      	movs	r0, #14
 8000854:	f002 fb96 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000858:	200e      	movs	r0, #14
 800085a:	f002 fbaf 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2105      	movs	r1, #5
 8000862:	2010      	movs	r0, #16
 8000864:	f002 fb8e 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000868:	2010      	movs	r0, #16
 800086a:	f002 fba7 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2105      	movs	r1, #5
 8000872:	2011      	movs	r0, #17
 8000874:	f002 fb86 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000878:	2011      	movs	r0, #17
 800087a:	f002 fb9f 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2105      	movs	r1, #5
 8000882:	202f      	movs	r0, #47	@ 0x2f
 8000884:	f002 fb7e 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000888:	202f      	movs	r0, #47	@ 0x2f
 800088a:	f002 fb97 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2038      	movs	r0, #56	@ 0x38
 8000894:	f002 fb76 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000898:	2038      	movs	r0, #56	@ 0x38
 800089a:	f002 fb8f 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2105      	movs	r1, #5
 80008a2:	2039      	movs	r0, #57	@ 0x39
 80008a4:	f002 fb6e 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008a8:	2039      	movs	r0, #57	@ 0x39
 80008aa:	f002 fb87 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2105      	movs	r1, #5
 80008b2:	203a      	movs	r0, #58	@ 0x3a
 80008b4:	f002 fb66 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008b8:	203a      	movs	r0, #58	@ 0x3a
 80008ba:	f002 fb7f 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2105      	movs	r1, #5
 80008c2:	203b      	movs	r0, #59	@ 0x3b
 80008c4:	f002 fb5e 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c8:	203b      	movs	r0, #59	@ 0x3b
 80008ca:	f002 fb77 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2105      	movs	r1, #5
 80008d2:	203c      	movs	r0, #60	@ 0x3c
 80008d4:	f002 fb56 	bl	8002f84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80008d8:	203c      	movs	r0, #60	@ 0x3c
 80008da:	f002 fb6f 	bl	8002fbc <HAL_NVIC_EnableIRQ>

}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <vApplicationStackOverflowHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	printf("stack overflow from task '%s'\n", pcTaskName);
 80008f6:	6839      	ldr	r1, [r7, #0]
 80008f8:	4803      	ldr	r0, [pc, #12]	@ (8000908 <vApplicationStackOverflowHook+0x1c>)
 80008fa:	f020 faeb 	bl	8020ed4 <iprintf>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	08021fc8 	.word	0x08021fc8

0800090c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
	...

0800091c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  printf("Starting FreeRTOS...\n");
 8000920:	4849      	ldr	r0, [pc, #292]	@ (8000a48 <MX_FREERTOS_Init+0x12c>)
 8000922:	f020 fb47 	bl	8020fb4 <puts>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of inMsgQueue */
  inMsgQueueHandle = osMessageQueueNew (16, sizeof(InMsg_t), &inMsgQueue_attributes);
 8000926:	4a49      	ldr	r2, [pc, #292]	@ (8000a4c <MX_FREERTOS_Init+0x130>)
 8000928:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800092c:	2010      	movs	r0, #16
 800092e:	f00c fd41 	bl	800d3b4 <osMessageQueueNew>
 8000932:	4603      	mov	r3, r0
 8000934:	4a46      	ldr	r2, [pc, #280]	@ (8000a50 <MX_FREERTOS_Init+0x134>)
 8000936:	6013      	str	r3, [r2, #0]

  /* creation of outMsgQueue */
  outMsgQueueHandle = osMessageQueueNew (16, sizeof(OutMsg_t), &outMsgQueue_attributes);
 8000938:	4a46      	ldr	r2, [pc, #280]	@ (8000a54 <MX_FREERTOS_Init+0x138>)
 800093a:	2110      	movs	r1, #16
 800093c:	2010      	movs	r0, #16
 800093e:	f00c fd39 	bl	800d3b4 <osMessageQueueNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a44      	ldr	r2, [pc, #272]	@ (8000a58 <MX_FREERTOS_Init+0x13c>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of uartQueue */
  uartQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &uartQueue_attributes);
 8000948:	4a44      	ldr	r2, [pc, #272]	@ (8000a5c <MX_FREERTOS_Init+0x140>)
 800094a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800094e:	2008      	movs	r0, #8
 8000950:	f00c fd30 	bl	800d3b4 <osMessageQueueNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a42      	ldr	r2, [pc, #264]	@ (8000a60 <MX_FREERTOS_Init+0x144>)
 8000958:	6013      	str	r3, [r2, #0]

  /* creation of i2cQueue */
  i2cQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &i2cQueue_attributes);
 800095a:	4a42      	ldr	r2, [pc, #264]	@ (8000a64 <MX_FREERTOS_Init+0x148>)
 800095c:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000960:	2008      	movs	r0, #8
 8000962:	f00c fd27 	bl	800d3b4 <osMessageQueueNew>
 8000966:	4603      	mov	r3, r0
 8000968:	4a3f      	ldr	r2, [pc, #252]	@ (8000a68 <MX_FREERTOS_Init+0x14c>)
 800096a:	6013      	str	r3, [r2, #0]

  /* creation of spiQueue */
  spiQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &spiQueue_attributes);
 800096c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a6c <MX_FREERTOS_Init+0x150>)
 800096e:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000972:	2008      	movs	r0, #8
 8000974:	f00c fd1e 	bl	800d3b4 <osMessageQueueNew>
 8000978:	4603      	mov	r3, r0
 800097a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a70 <MX_FREERTOS_Init+0x154>)
 800097c:	6013      	str	r3, [r2, #0]

  /* creation of adcQueue */
  adcQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &adcQueue_attributes);
 800097e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a74 <MX_FREERTOS_Init+0x158>)
 8000980:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000984:	2008      	movs	r0, #8
 8000986:	f00c fd15 	bl	800d3b4 <osMessageQueueNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a3a      	ldr	r2, [pc, #232]	@ (8000a78 <MX_FREERTOS_Init+0x15c>)
 800098e:	6013      	str	r3, [r2, #0]

  /* creation of timQueue */
  timQueueHandle = osMessageQueueNew (8, sizeof(TestData_t), &timQueue_attributes);
 8000990:	4a3a      	ldr	r2, [pc, #232]	@ (8000a7c <MX_FREERTOS_Init+0x160>)
 8000992:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000996:	2008      	movs	r0, #8
 8000998:	f00c fd0c 	bl	800d3b4 <osMessageQueueNew>
 800099c:	4603      	mov	r3, r0
 800099e:	4a38      	ldr	r2, [pc, #224]	@ (8000a80 <MX_FREERTOS_Init+0x164>)
 80009a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80009a2:	4a38      	ldr	r2, [pc, #224]	@ (8000a84 <MX_FREERTOS_Init+0x168>)
 80009a4:	2100      	movs	r1, #0
 80009a6:	4838      	ldr	r0, [pc, #224]	@ (8000a88 <MX_FREERTOS_Init+0x16c>)
 80009a8:	f00c f950 	bl	800cc4c <osThreadNew>
 80009ac:	4603      	mov	r3, r0
 80009ae:	4a37      	ldr	r2, [pc, #220]	@ (8000a8c <MX_FREERTOS_Init+0x170>)
 80009b0:	6013      	str	r3, [r2, #0]

  /* creation of UDPListenerTask */
  UDPListenerTaskHandle = osThreadNew(StartTaskUdpListener, NULL, &UDPListenerTask_attributes);
 80009b2:	4a37      	ldr	r2, [pc, #220]	@ (8000a90 <MX_FREERTOS_Init+0x174>)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4837      	ldr	r0, [pc, #220]	@ (8000a94 <MX_FREERTOS_Init+0x178>)
 80009b8:	f00c f948 	bl	800cc4c <osThreadNew>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a36      	ldr	r2, [pc, #216]	@ (8000a98 <MX_FREERTOS_Init+0x17c>)
 80009c0:	6013      	str	r3, [r2, #0]

  /* creation of DispatcherTask */
  DispatcherTaskHandle = osThreadNew(StartTaskDispatcher, NULL, &DispatcherTask_attributes);
 80009c2:	4a36      	ldr	r2, [pc, #216]	@ (8000a9c <MX_FREERTOS_Init+0x180>)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4836      	ldr	r0, [pc, #216]	@ (8000aa0 <MX_FREERTOS_Init+0x184>)
 80009c8:	f00c f940 	bl	800cc4c <osThreadNew>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4a35      	ldr	r2, [pc, #212]	@ (8000aa4 <MX_FREERTOS_Init+0x188>)
 80009d0:	6013      	str	r3, [r2, #0]

  /* creation of uartTestTask */
  uartTestTaskHandle = osThreadNew(StartTaskUartTest, NULL, &uartTestTask_attributes);
 80009d2:	4a35      	ldr	r2, [pc, #212]	@ (8000aa8 <MX_FREERTOS_Init+0x18c>)
 80009d4:	2100      	movs	r1, #0
 80009d6:	4835      	ldr	r0, [pc, #212]	@ (8000aac <MX_FREERTOS_Init+0x190>)
 80009d8:	f00c f938 	bl	800cc4c <osThreadNew>
 80009dc:	4603      	mov	r3, r0
 80009de:	4a34      	ldr	r2, [pc, #208]	@ (8000ab0 <MX_FREERTOS_Init+0x194>)
 80009e0:	6013      	str	r3, [r2, #0]

  /* creation of i2cTestTask */
  i2cTestTaskHandle = osThreadNew(StartTaskI2cTest, NULL, &i2cTestTask_attributes);
 80009e2:	4a34      	ldr	r2, [pc, #208]	@ (8000ab4 <MX_FREERTOS_Init+0x198>)
 80009e4:	2100      	movs	r1, #0
 80009e6:	4834      	ldr	r0, [pc, #208]	@ (8000ab8 <MX_FREERTOS_Init+0x19c>)
 80009e8:	f00c f930 	bl	800cc4c <osThreadNew>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a33      	ldr	r2, [pc, #204]	@ (8000abc <MX_FREERTOS_Init+0x1a0>)
 80009f0:	6013      	str	r3, [r2, #0]

  /* creation of spiTestTask */
  spiTestTaskHandle = osThreadNew(StartTaskSpiTest, NULL, &spiTestTask_attributes);
 80009f2:	4a33      	ldr	r2, [pc, #204]	@ (8000ac0 <MX_FREERTOS_Init+0x1a4>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	4833      	ldr	r0, [pc, #204]	@ (8000ac4 <MX_FREERTOS_Init+0x1a8>)
 80009f8:	f00c f928 	bl	800cc4c <osThreadNew>
 80009fc:	4603      	mov	r3, r0
 80009fe:	4a32      	ldr	r2, [pc, #200]	@ (8000ac8 <MX_FREERTOS_Init+0x1ac>)
 8000a00:	6013      	str	r3, [r2, #0]

  /* creation of adcTestTask */
  adcTestTaskHandle = osThreadNew(StartTaskAdcTest, NULL, &adcTestTask_attributes);
 8000a02:	4a32      	ldr	r2, [pc, #200]	@ (8000acc <MX_FREERTOS_Init+0x1b0>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4832      	ldr	r0, [pc, #200]	@ (8000ad0 <MX_FREERTOS_Init+0x1b4>)
 8000a08:	f00c f920 	bl	800cc4c <osThreadNew>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a31      	ldr	r2, [pc, #196]	@ (8000ad4 <MX_FREERTOS_Init+0x1b8>)
 8000a10:	6013      	str	r3, [r2, #0]

  /* creation of timTestTask */
  timTestTaskHandle = osThreadNew(StartTaskTimTest, NULL, &timTestTask_attributes);
 8000a12:	4a31      	ldr	r2, [pc, #196]	@ (8000ad8 <MX_FREERTOS_Init+0x1bc>)
 8000a14:	2100      	movs	r1, #0
 8000a16:	4831      	ldr	r0, [pc, #196]	@ (8000adc <MX_FREERTOS_Init+0x1c0>)
 8000a18:	f00c f918 	bl	800cc4c <osThreadNew>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a30      	ldr	r2, [pc, #192]	@ (8000ae0 <MX_FREERTOS_Init+0x1c4>)
 8000a20:	6013      	str	r3, [r2, #0]

  /* creation of UDPResponderTas */
  UDPResponderTasHandle = osThreadNew(StartResponseTask, NULL, &UDPResponderTas_attributes);
 8000a22:	4a30      	ldr	r2, [pc, #192]	@ (8000ae4 <MX_FREERTOS_Init+0x1c8>)
 8000a24:	2100      	movs	r1, #0
 8000a26:	4830      	ldr	r0, [pc, #192]	@ (8000ae8 <MX_FREERTOS_Init+0x1cc>)
 8000a28:	f00c f910 	bl	800cc4c <osThreadNew>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000aec <MX_FREERTOS_Init+0x1d0>)
 8000a30:	6013      	str	r3, [r2, #0]

  /* creation of loggerTask */
  loggerTaskHandle = osThreadNew(StartLoggerTask, NULL, &loggerTask_attributes);
 8000a32:	4a2f      	ldr	r2, [pc, #188]	@ (8000af0 <MX_FREERTOS_Init+0x1d4>)
 8000a34:	2100      	movs	r1, #0
 8000a36:	482f      	ldr	r0, [pc, #188]	@ (8000af4 <MX_FREERTOS_Init+0x1d8>)
 8000a38:	f00c f908 	bl	800cc4c <osThreadNew>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4a2e      	ldr	r2, [pc, #184]	@ (8000af8 <MX_FREERTOS_Init+0x1dc>)
 8000a40:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	08021fe8 	.word	0x08021fe8
 8000a4c:	08026b64 	.word	0x08026b64
 8000a50:	20000320 	.word	0x20000320
 8000a54:	08026b7c 	.word	0x08026b7c
 8000a58:	20000324 	.word	0x20000324
 8000a5c:	08026b94 	.word	0x08026b94
 8000a60:	20000328 	.word	0x20000328
 8000a64:	08026bac 	.word	0x08026bac
 8000a68:	2000032c 	.word	0x2000032c
 8000a6c:	08026bc4 	.word	0x08026bc4
 8000a70:	20000330 	.word	0x20000330
 8000a74:	08026bdc 	.word	0x08026bdc
 8000a78:	20000334 	.word	0x20000334
 8000a7c:	08026bf4 	.word	0x08026bf4
 8000a80:	20000338 	.word	0x20000338
 8000a84:	080269fc 	.word	0x080269fc
 8000a88:	08000afd 	.word	0x08000afd
 8000a8c:	200002f8 	.word	0x200002f8
 8000a90:	08026a20 	.word	0x08026a20
 8000a94:	08000b11 	.word	0x08000b11
 8000a98:	200002fc 	.word	0x200002fc
 8000a9c:	08026a44 	.word	0x08026a44
 8000aa0:	08000b31 	.word	0x08000b31
 8000aa4:	20000300 	.word	0x20000300
 8000aa8:	08026a68 	.word	0x08026a68
 8000aac:	08000b45 	.word	0x08000b45
 8000ab0:	20000304 	.word	0x20000304
 8000ab4:	08026a8c 	.word	0x08026a8c
 8000ab8:	08000b59 	.word	0x08000b59
 8000abc:	20000308 	.word	0x20000308
 8000ac0:	08026ab0 	.word	0x08026ab0
 8000ac4:	08000b6d 	.word	0x08000b6d
 8000ac8:	2000030c 	.word	0x2000030c
 8000acc:	08026ad4 	.word	0x08026ad4
 8000ad0:	08000b81 	.word	0x08000b81
 8000ad4:	20000310 	.word	0x20000310
 8000ad8:	08026af8 	.word	0x08026af8
 8000adc:	08000b95 	.word	0x08000b95
 8000ae0:	20000314 	.word	0x20000314
 8000ae4:	08026b1c 	.word	0x08026b1c
 8000ae8:	08000ba9 	.word	0x08000ba9
 8000aec:	20000318 	.word	0x20000318
 8000af0:	08026b40 	.word	0x08026b40
 8000af4:	08000bbd 	.word	0x08000bbd
 8000af8:	2000031c 	.word	0x2000031c

08000afc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b04:	f00b f9b0 	bl	800be68 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  //osEventFlagsSet(initDoneEventHandle, 0x01);
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b08:	2001      	movs	r0, #1
 8000b0a:	f00c f94d 	bl	800cda8 <osDelay>
 8000b0e:	e7fb      	b.n	8000b08 <StartDefaultTask+0xc>

08000b10 <StartTaskUdpListener>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUdpListener */
void StartTaskUdpListener(void *argument)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUdpListener */
  //osEventFlagsWait(initDoneEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
  printf("Starting UDP Listener...\n");
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <StartTaskUdpListener+0x1c>)
 8000b1a:	f020 fa4b 	bl	8020fb4 <puts>
  UDP_Listen(); // loops here
 8000b1e:	f01f fa57 	bl	801ffd0 <UDP_Listen>
  /* USER CODE END StartTaskUdpListener */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	08022000 	.word	0x08022000

08000b30 <StartTaskDispatcher>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskDispatcher */
void StartTaskDispatcher(void *argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskDispatcher */
  TestDispatcher(); // loops here
 8000b38:	f01f f914 	bl	801fd64 <TestDispatcher>
  /* USER CODE END StartTaskDispatcher */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <StartTaskUartTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskUartTest */
void StartTaskUartTest(void *argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskUartTest */
  UartTestTask(); // loops here
 8000b4c:	f01f ff64 	bl	8020a18 <UartTestTask>
  /* USER CODE END StartTaskUartTest */
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <StartTaskI2cTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskI2cTest */
void StartTaskI2cTest(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskI2cTest */
	I2cTestTask(); // loops here
 8000b60:	f01f fb8e 	bl	8020280 <I2cTestTask>
  /* USER CODE END StartTaskI2cTest */
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <StartTaskSpiTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSpiTest */
void StartTaskSpiTest(void *argument)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSpiTest */
  SpiTestTask(); // loops here
 8000b74:	f01f fd0e 	bl	8020594 <SpiTestTask>
  /* USER CODE END StartTaskSpiTest */
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <StartTaskAdcTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskAdcTest */
void StartTaskAdcTest(void *argument)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskAdcTest */
  AdcTestTask(); // loops here
 8000b88:	f01f f82a 	bl	801fbe0 <AdcTestTask>
  /* USER CODE END StartTaskAdcTest */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <StartTaskTimTest>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskTimTest */
void StartTaskTimTest(void *argument)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskTimTest */
  TimTestTask(); // loops here
 8000b9c:	f01f fe6c 	bl	8020878 <TimTestTask>
  /* USER CODE END StartTaskTimTest */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <StartResponseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartResponseTask */
void StartResponseTask(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartResponseTask */
  UDP_Response(); // Loops here
 8000bb0:	f01f fb02 	bl	80201b8 <UDP_Response>
  /* USER CODE END StartResponseTask */
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <StartLoggerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLoggerTask */
void StartLoggerTask(void *argument)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLoggerTask */
  /* Infinite loop */
  for(;;)
  {

	printf("stats---------------------------------\n");
 8000bc4:	4830      	ldr	r0, [pc, #192]	@ (8000c88 <StartLoggerTask+0xcc>)
 8000bc6:	f020 f9f5 	bl	8020fb4 <puts>
	printf("Free Heap: %lu\n", xPortGetFreeHeapSize());
 8000bca:	f010 f817 	bl	8010bfc <xPortGetFreeHeapSize>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	482e      	ldr	r0, [pc, #184]	@ (8000c8c <StartLoggerTask+0xd0>)
 8000bd4:	f020 f97e 	bl	8020ed4 <iprintf>
	printf("Minimum Ever Free Heap: %lu\n", xPortGetMinimumEverFreeHeapSize());
 8000bd8:	f010 f81c 	bl	8010c14 <xPortGetMinimumEverFreeHeapSize>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	4619      	mov	r1, r3
 8000be0:	482b      	ldr	r0, [pc, #172]	@ (8000c90 <StartLoggerTask+0xd4>)
 8000be2:	f020 f977 	bl	8020ed4 <iprintf>
	printf("inMsg Q size: %lu\n", osMessageQueueGetCount(inMsgQueueHandle));
 8000be6:	4b2b      	ldr	r3, [pc, #172]	@ (8000c94 <StartLoggerTask+0xd8>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00c fd4e 	bl	800d68c <osMessageQueueGetCount>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4828      	ldr	r0, [pc, #160]	@ (8000c98 <StartLoggerTask+0xdc>)
 8000bf6:	f020 f96d 	bl	8020ed4 <iprintf>
	printf("outMsg Q size: %lu\n", osMessageQueueGetCount(outMsgQueueHandle));
 8000bfa:	4b28      	ldr	r3, [pc, #160]	@ (8000c9c <StartLoggerTask+0xe0>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f00c fd44 	bl	800d68c <osMessageQueueGetCount>
 8000c04:	4603      	mov	r3, r0
 8000c06:	4619      	mov	r1, r3
 8000c08:	4825      	ldr	r0, [pc, #148]	@ (8000ca0 <StartLoggerTask+0xe4>)
 8000c0a:	f020 f963 	bl	8020ed4 <iprintf>
	printf("uart Q size: %lu\n", osMessageQueueGetCount(uartQueueHandle));
 8000c0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ca4 <StartLoggerTask+0xe8>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f00c fd3a 	bl	800d68c <osMessageQueueGetCount>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4822      	ldr	r0, [pc, #136]	@ (8000ca8 <StartLoggerTask+0xec>)
 8000c1e:	f020 f959 	bl	8020ed4 <iprintf>
	printf("i2c Q size: %lu\n", osMessageQueueGetCount(i2cQueueHandle));
 8000c22:	4b22      	ldr	r3, [pc, #136]	@ (8000cac <StartLoggerTask+0xf0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4618      	mov	r0, r3
 8000c28:	f00c fd30 	bl	800d68c <osMessageQueueGetCount>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	481f      	ldr	r0, [pc, #124]	@ (8000cb0 <StartLoggerTask+0xf4>)
 8000c32:	f020 f94f 	bl	8020ed4 <iprintf>
	printf("spi Q size: %lu\n", osMessageQueueGetCount(spiQueueHandle));
 8000c36:	4b1f      	ldr	r3, [pc, #124]	@ (8000cb4 <StartLoggerTask+0xf8>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f00c fd26 	bl	800d68c <osMessageQueueGetCount>
 8000c40:	4603      	mov	r3, r0
 8000c42:	4619      	mov	r1, r3
 8000c44:	481c      	ldr	r0, [pc, #112]	@ (8000cb8 <StartLoggerTask+0xfc>)
 8000c46:	f020 f945 	bl	8020ed4 <iprintf>
	printf("adc Q size: %lu\n", osMessageQueueGetCount(adcQueueHandle));
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <StartLoggerTask+0x100>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f00c fd1c 	bl	800d68c <osMessageQueueGetCount>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4619      	mov	r1, r3
 8000c58:	4819      	ldr	r0, [pc, #100]	@ (8000cc0 <StartLoggerTask+0x104>)
 8000c5a:	f020 f93b 	bl	8020ed4 <iprintf>
	printf("timer Q size: %lu\n", osMessageQueueGetCount(timQueueHandle));
 8000c5e:	4b19      	ldr	r3, [pc, #100]	@ (8000cc4 <StartLoggerTask+0x108>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f00c fd12 	bl	800d68c <osMessageQueueGetCount>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4816      	ldr	r0, [pc, #88]	@ (8000cc8 <StartLoggerTask+0x10c>)
 8000c6e:	f020 f931 	bl	8020ed4 <iprintf>
	printf("--------------------------------------\n");
 8000c72:	4816      	ldr	r0, [pc, #88]	@ (8000ccc <StartLoggerTask+0x110>)
 8000c74:	f020 f99e 	bl	8020fb4 <puts>

	stats_display();
 8000c78:	f014 fce2 	bl	8015640 <stats_display>
	osDelay(30000);
 8000c7c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8000c80:	f00c f892 	bl	800cda8 <osDelay>
	printf("stats---------------------------------\n");
 8000c84:	bf00      	nop
 8000c86:	e79d      	b.n	8000bc4 <StartLoggerTask+0x8>
 8000c88:	0802201c 	.word	0x0802201c
 8000c8c:	08022044 	.word	0x08022044
 8000c90:	08022054 	.word	0x08022054
 8000c94:	20000320 	.word	0x20000320
 8000c98:	08022074 	.word	0x08022074
 8000c9c:	20000324 	.word	0x20000324
 8000ca0:	08022088 	.word	0x08022088
 8000ca4:	20000328 	.word	0x20000328
 8000ca8:	0802209c 	.word	0x0802209c
 8000cac:	2000032c 	.word	0x2000032c
 8000cb0:	080220b0 	.word	0x080220b0
 8000cb4:	20000330 	.word	0x20000330
 8000cb8:	080220c4 	.word	0x080220c4
 8000cbc:	20000334 	.word	0x20000334
 8000cc0:	080220d8 	.word	0x080220d8
 8000cc4:	20000338 	.word	0x20000338
 8000cc8:	080220ec 	.word	0x080220ec
 8000ccc:	08022100 	.word	0x08022100

08000cd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b087      	sub	sp, #28
 8000cd4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	4b27      	ldr	r3, [pc, #156]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a26      	ldr	r2, [pc, #152]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000cdc:	f043 0310 	orr.w	r3, r3, #16
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b24      	ldr	r3, [pc, #144]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	f003 0310 	and.w	r3, r3, #16
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b21      	ldr	r3, [pc, #132]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a20      	ldr	r2, [pc, #128]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	4b1b      	ldr	r3, [pc, #108]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d0c:	f043 0301 	orr.w	r3, r3, #1
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b18      	ldr	r3, [pc, #96]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b15      	ldr	r3, [pc, #84]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b12      	ldr	r3, [pc, #72]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b0c      	ldr	r3, [pc, #48]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a08      	ldr	r2, [pc, #32]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <MX_GPIO_Init+0xa4>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d62:	603b      	str	r3, [r7, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]

}
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800

08000d78 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c2_rx;
DMA_HandleTypeDef hdma_i2c2_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000df0 <MX_I2C1_Init+0x78>)
 8000d80:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000d84:	4a1b      	ldr	r2, [pc, #108]	@ (8000df4 <MX_I2C1_Init+0x7c>)
 8000d86:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d8e:	4b17      	ldr	r3, [pc, #92]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d94:	4b15      	ldr	r3, [pc, #84]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d9a:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da0:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000da6:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db2:	480e      	ldr	r0, [pc, #56]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000db4:	f004 fb60 	bl	8005478 <HAL_I2C_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dbe:	f000 fab7 	bl	8001330 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4809      	ldr	r0, [pc, #36]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000dc6:	f006 fd03 	bl	80077d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000dd0:	f000 faae 	bl	8001330 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4805      	ldr	r0, [pc, #20]	@ (8000dec <MX_I2C1_Init+0x74>)
 8000dd8:	f006 fd45 	bl	8007866 <HAL_I2CEx_ConfigDigitalFilter>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000de2:	f000 faa5 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000033c 	.word	0x2000033c
 8000df0:	40005400 	.word	0x40005400
 8000df4:	20404768 	.word	0x20404768

08000df8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8000e70 <MX_I2C2_Init+0x78>)
 8000e00:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000e02:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e04:	4a1b      	ldr	r2, [pc, #108]	@ (8000e74 <MX_I2C2_Init+0x7c>)
 8000e06:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 20;
 8000e08:	4b18      	ldr	r3, [pc, #96]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e0a:	2214      	movs	r2, #20
 8000e0c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e0e:	4b17      	ldr	r3, [pc, #92]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e14:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e1a:	4b14      	ldr	r3, [pc, #80]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e20:	4b12      	ldr	r3, [pc, #72]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e26:	4b11      	ldr	r3, [pc, #68]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e32:	480e      	ldr	r0, [pc, #56]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e34:	f004 fb20 	bl	8005478 <HAL_I2C_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e3e:	f000 fa77 	bl	8001330 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e42:	2100      	movs	r1, #0
 8000e44:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e46:	f006 fcc3 	bl	80077d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e50:	f000 fa6e 	bl	8001330 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	4805      	ldr	r0, [pc, #20]	@ (8000e6c <MX_I2C2_Init+0x74>)
 8000e58:	f006 fd05 	bl	8007866 <HAL_I2CEx_ConfigDigitalFilter>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e62:	f000 fa65 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000390 	.word	0x20000390
 8000e70:	40005800 	.word	0x40005800
 8000e74:	20404768 	.word	0x20404768

08000e78 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0ac      	sub	sp, #176	@ 0xb0
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0318 	add.w	r3, r7, #24
 8000e94:	2284      	movs	r2, #132	@ 0x84
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f020 f97b 	bl	8021194 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a57      	ldr	r2, [pc, #348]	@ (8001000 <HAL_I2C_MspInit+0x188>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	f040 80b9 	bne.w	800101c <HAL_I2C_MspInit+0x1a4>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000eaa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000eae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f007 fa2d 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000ec4:	f000 fa34 	bl	8001330 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b4e      	ldr	r3, [pc, #312]	@ (8001004 <HAL_I2C_MspInit+0x18c>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ecc:	4a4d      	ldr	r2, [pc, #308]	@ (8001004 <HAL_I2C_MspInit+0x18c>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8001004 <HAL_I2C_MspInit+0x18c>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	617b      	str	r3, [r7, #20]
 8000ede:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ee0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ee4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000efa:	2304      	movs	r3, #4
 8000efc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f00:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f04:	4619      	mov	r1, r3
 8000f06:	4840      	ldr	r0, [pc, #256]	@ (8001008 <HAL_I2C_MspInit+0x190>)
 8000f08:	f004 f90a 	bl	8005120 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f0c:	4b3d      	ldr	r3, [pc, #244]	@ (8001004 <HAL_I2C_MspInit+0x18c>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	4a3c      	ldr	r2, [pc, #240]	@ (8001004 <HAL_I2C_MspInit+0x18c>)
 8000f12:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f18:	4b3a      	ldr	r3, [pc, #232]	@ (8001004 <HAL_I2C_MspInit+0x18c>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000f24:	4b39      	ldr	r3, [pc, #228]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f26:	4a3a      	ldr	r2, [pc, #232]	@ (8001010 <HAL_I2C_MspInit+0x198>)
 8000f28:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000f2a:	4b38      	ldr	r3, [pc, #224]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f30:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f32:	4b36      	ldr	r3, [pc, #216]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f38:	4b34      	ldr	r3, [pc, #208]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f3e:	4b33      	ldr	r3, [pc, #204]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f44:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f46:	4b31      	ldr	r3, [pc, #196]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f4c:	4b2f      	ldr	r3, [pc, #188]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f52:	4b2e      	ldr	r3, [pc, #184]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f58:	4b2c      	ldr	r3, [pc, #176]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f5e:	4b2b      	ldr	r3, [pc, #172]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f64:	4829      	ldr	r0, [pc, #164]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f66:	f002 fa41 	bl	80033ec <HAL_DMA_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000f70:	f000 f9de 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a25      	ldr	r2, [pc, #148]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f7a:	4a24      	ldr	r2, [pc, #144]	@ (800100c <HAL_I2C_MspInit+0x194>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000f82:	4a25      	ldr	r2, [pc, #148]	@ (8001018 <HAL_I2C_MspInit+0x1a0>)
 8000f84:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000f88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8000f8c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000f90:	2240      	movs	r2, #64	@ 0x40
 8000f92:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000f9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fa0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000fc0:	4814      	ldr	r0, [pc, #80]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000fc2:	f002 fa13 	bl	80033ec <HAL_DMA_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8000fcc:	f000 f9b0 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	4a10      	ldr	r2, [pc, #64]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000fd4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001014 <HAL_I2C_MspInit+0x19c>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2105      	movs	r1, #5
 8000fe0:	201f      	movs	r0, #31
 8000fe2:	f001 ffcf 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fe6:	201f      	movs	r0, #31
 8000fe8:	f001 ffe8 	bl	8002fbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2105      	movs	r1, #5
 8000ff0:	2020      	movs	r0, #32
 8000ff2:	f001 ffc7 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ff6:	2020      	movs	r0, #32
 8000ff8:	f001 ffe0 	bl	8002fbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ffc:	e0be      	b.n	800117c <HAL_I2C_MspInit+0x304>
 8000ffe:	bf00      	nop
 8001000:	40005400 	.word	0x40005400
 8001004:	40023800 	.word	0x40023800
 8001008:	40020400 	.word	0x40020400
 800100c:	200003e4 	.word	0x200003e4
 8001010:	40026088 	.word	0x40026088
 8001014:	20000444 	.word	0x20000444
 8001018:	400260a0 	.word	0x400260a0
  else if(i2cHandle->Instance==I2C2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a58      	ldr	r2, [pc, #352]	@ (8001184 <HAL_I2C_MspInit+0x30c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	f040 80aa 	bne.w	800117c <HAL_I2C_MspInit+0x304>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800102c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800102e:	2300      	movs	r3, #0
 8001030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001034:	f107 0318 	add.w	r3, r7, #24
 8001038:	4618      	mov	r0, r3
 800103a:	f007 f96d 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <HAL_I2C_MspInit+0x1d0>
      Error_Handler();
 8001044:	f000 f974 	bl	8001330 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	4b4f      	ldr	r3, [pc, #316]	@ (8001188 <HAL_I2C_MspInit+0x310>)
 800104a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104c:	4a4e      	ldr	r2, [pc, #312]	@ (8001188 <HAL_I2C_MspInit+0x310>)
 800104e:	f043 0302 	orr.w	r3, r3, #2
 8001052:	6313      	str	r3, [r2, #48]	@ 0x30
 8001054:	4b4c      	ldr	r3, [pc, #304]	@ (8001188 <HAL_I2C_MspInit+0x310>)
 8001056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001060:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001068:	2312      	movs	r3, #18
 800106a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800106e:	2301      	movs	r3, #1
 8001070:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2303      	movs	r3, #3
 8001076:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800107a:	2304      	movs	r3, #4
 800107c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001084:	4619      	mov	r1, r3
 8001086:	4841      	ldr	r0, [pc, #260]	@ (800118c <HAL_I2C_MspInit+0x314>)
 8001088:	f004 f84a 	bl	8005120 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800108c:	4b3e      	ldr	r3, [pc, #248]	@ (8001188 <HAL_I2C_MspInit+0x310>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	4a3d      	ldr	r2, [pc, #244]	@ (8001188 <HAL_I2C_MspInit+0x310>)
 8001092:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001096:	6413      	str	r3, [r2, #64]	@ 0x40
 8001098:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <HAL_I2C_MspInit+0x310>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800109c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c2_rx.Instance = DMA1_Stream3;
 80010a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001194 <HAL_I2C_MspInit+0x31c>)
 80010a8:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80010aa:	4b39      	ldr	r3, [pc, #228]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010ac:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80010b0:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b2:	4b37      	ldr	r3, [pc, #220]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010b8:	4b35      	ldr	r3, [pc, #212]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010be:	4b34      	ldr	r3, [pc, #208]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010c4:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010c6:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010cc:	4b30      	ldr	r3, [pc, #192]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80010d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010da:	2200      	movs	r2, #0
 80010dc:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010de:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 80010e4:	482a      	ldr	r0, [pc, #168]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010e6:	f002 f981 	bl	80033ec <HAL_DMA_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <HAL_I2C_MspInit+0x27c>
      Error_Handler();
 80010f0:	f000 f91e 	bl	8001330 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c2_rx);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a26      	ldr	r2, [pc, #152]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80010fa:	4a25      	ldr	r2, [pc, #148]	@ (8001190 <HAL_I2C_MspInit+0x318>)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001100:	4b25      	ldr	r3, [pc, #148]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001102:	4a26      	ldr	r2, [pc, #152]	@ (800119c <HAL_I2C_MspInit+0x324>)
 8001104:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8001106:	4b24      	ldr	r3, [pc, #144]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001108:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800110c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800110e:	4b22      	ldr	r3, [pc, #136]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001110:	2240      	movs	r2, #64	@ 0x40
 8001112:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001114:	4b20      	ldr	r3, [pc, #128]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 800111c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001120:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001122:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001124:	2200      	movs	r2, #0
 8001126:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001128:	4b1b      	ldr	r3, [pc, #108]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 800112a:	2200      	movs	r2, #0
 800112c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 800112e:	4b1a      	ldr	r3, [pc, #104]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001130:	2200      	movs	r2, #0
 8001132:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001134:	4b18      	ldr	r3, [pc, #96]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001136:	2200      	movs	r2, #0
 8001138:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800113a:	4b17      	ldr	r3, [pc, #92]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 800113c:	2200      	movs	r2, #0
 800113e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001140:	4815      	ldr	r0, [pc, #84]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001142:	f002 f953 	bl	80033ec <HAL_DMA_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_I2C_MspInit+0x2d8>
      Error_Handler();
 800114c:	f000 f8f0 	bl	8001330 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c2_tx);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a11      	ldr	r2, [pc, #68]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001154:	639a      	str	r2, [r3, #56]	@ 0x38
 8001156:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <HAL_I2C_MspInit+0x320>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2105      	movs	r1, #5
 8001160:	2021      	movs	r0, #33	@ 0x21
 8001162:	f001 ff0f 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001166:	2021      	movs	r0, #33	@ 0x21
 8001168:	f001 ff28 	bl	8002fbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2105      	movs	r1, #5
 8001170:	2022      	movs	r0, #34	@ 0x22
 8001172:	f001 ff07 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001176:	2022      	movs	r0, #34	@ 0x22
 8001178:	f001 ff20 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 800117c:	bf00      	nop
 800117e:	37b0      	adds	r7, #176	@ 0xb0
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005800 	.word	0x40005800
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400
 8001190:	200004a4 	.word	0x200004a4
 8001194:	40026058 	.word	0x40026058
 8001198:	20000504 	.word	0x20000504
 800119c:	400260b8 	.word	0x400260b8

080011a0 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <_write+0x3c>)
 80011ae:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) ptr, len, 0xFFFF);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <_write+0x40>)
 80011bc:	f009 fb00 	bl	800a7c0 <HAL_UART_Transmit>
	HAL_UART_Transmit(UART_DEBUG, (uint8_t*) cr, 1, 0xFFFF);
 80011c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c4:	2201      	movs	r2, #1
 80011c6:	6979      	ldr	r1, [r7, #20]
 80011c8:	4805      	ldr	r0, [pc, #20]	@ (80011e0 <_write+0x40>)
 80011ca:	f009 faf9 	bl	800a7c0 <HAL_UART_Transmit>
	return len + 1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	08022128 	.word	0x08022128
 80011e0:	20000a04 	.word	0x20000a04

080011e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e8:	f001 f93d 	bl	8002466 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ec:	f000 f822 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f0:	f7ff fd6e 	bl	8000cd0 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f4:	f7ff faf8 	bl	80007e8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80011f8:	f000 fe4c 	bl	8001e94 <MX_USART3_UART_Init>
  MX_CRC_Init();
 80011fc:	f7ff fab2 	bl	8000764 <MX_CRC_Init>
  MX_UART4_Init();
 8001200:	f000 fde8 	bl	8001dd4 <MX_UART4_Init>
  MX_UART5_Init();
 8001204:	f000 fe16 	bl	8001e34 <MX_UART5_Init>
  MX_I2C1_Init();
 8001208:	f7ff fdb6 	bl	8000d78 <MX_I2C1_Init>
  MX_I2C2_Init();
 800120c:	f7ff fdf4 	bl	8000df8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001210:	f000 f894 	bl	800133c <MX_SPI1_Init>
  MX_SPI4_Init();
 8001214:	f000 f8d0 	bl	80013b8 <MX_SPI4_Init>
  MX_ADC1_Init();
 8001218:	f7ff f9e0 	bl	80005dc <MX_ADC1_Init>
  MX_TIM6_Init();
 800121c:	f000 fd38 	bl	8001c90 <MX_TIM6_Init>
  MX_TIM2_Init();
 8001220:	f000 fce8 	bl	8001bf4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001224:	f00b fc80 	bl	800cb28 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001228:	f7ff fb78 	bl	800091c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800122c:	f00b fcb0 	bl	800cb90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <main+0x4c>

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	@ 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	@ 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f01f ffa6 	bl	8021194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	4b2a      	ldr	r3, [pc, #168]	@ (8001304 <SystemClock_Config+0xd0>)
 800125a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125c:	4a29      	ldr	r2, [pc, #164]	@ (8001304 <SystemClock_Config+0xd0>)
 800125e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001262:	6413      	str	r3, [r2, #64]	@ 0x40
 8001264:	4b27      	ldr	r3, [pc, #156]	@ (8001304 <SystemClock_Config+0xd0>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001270:	4b25      	ldr	r3, [pc, #148]	@ (8001308 <SystemClock_Config+0xd4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a24      	ldr	r2, [pc, #144]	@ (8001308 <SystemClock_Config+0xd4>)
 8001276:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800127a:	6013      	str	r3, [r2, #0]
 800127c:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <SystemClock_Config+0xd4>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001288:	2302      	movs	r3, #2
 800128a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001290:	2310      	movs	r3, #16
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001294:	2302      	movs	r3, #2
 8001296:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001298:	2300      	movs	r3, #0
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800129c:	2308      	movs	r3, #8
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80012a0:	23d8      	movs	r3, #216	@ 0xd8
 80012a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a4:	2302      	movs	r3, #2
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a8:	2302      	movs	r3, #2
 80012aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ac:	f107 0320 	add.w	r3, r7, #32
 80012b0:	4618      	mov	r0, r3
 80012b2:	f006 fb75 	bl	80079a0 <HAL_RCC_OscConfig>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012bc:	f000 f838 	bl	8001330 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012c0:	f006 fb1e 	bl	8007900 <HAL_PWREx_EnableOverDrive>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012ca:	f000 f831 	bl	8001330 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ce:	230f      	movs	r3, #15
 80012d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d2:	2302      	movs	r3, #2
 80012d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d6:	2300      	movs	r3, #0
 80012d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012da:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80012e6:	f107 030c 	add.w	r3, r7, #12
 80012ea:	2107      	movs	r1, #7
 80012ec:	4618      	mov	r0, r3
 80012ee:	f006 fdfb 	bl	8007ee8 <HAL_RCC_ClockConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80012f8:	f000 f81a 	bl	8001330 <Error_Handler>
  }
}
 80012fc:	bf00      	nop
 80012fe:	3750      	adds	r7, #80	@ 0x50
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40007000 	.word	0x40007000

0800130c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a04      	ldr	r2, [pc, #16]	@ (800132c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800131e:	f001 f8af 	bl	8002480 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40001400 	.word	0x40001400

08001330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001334:	b672      	cpsid	i
}
 8001336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001338:	bf00      	nop
 800133a:	e7fd      	b.n	8001338 <Error_Handler+0x8>

0800133c <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001340:	4b1b      	ldr	r3, [pc, #108]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001342:	4a1c      	ldr	r2, [pc, #112]	@ (80013b4 <MX_SPI1_Init+0x78>)
 8001344:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001346:	4b1a      	ldr	r3, [pc, #104]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001348:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800134c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001354:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001356:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800135a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_SPI1_Init+0x74>)
 800135e:	2200      	movs	r2, #0
 8001360:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001364:	2200      	movs	r2, #0
 8001366:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_SPI1_Init+0x74>)
 800136a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800136e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001372:	2218      	movs	r2, #24
 8001374:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_SPI1_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_SPI1_Init+0x74>)
 800138a:	2207      	movs	r2, #7
 800138c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_SPI1_Init+0x74>)
 8001396:	2208      	movs	r2, #8
 8001398:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_SPI1_Init+0x74>)
 800139c:	f007 fbac 	bl	8008af8 <HAL_SPI_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f7ff ffc3 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000564 	.word	0x20000564
 80013b4:	40013000 	.word	0x40013000

080013b8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80013bc:	4b18      	ldr	r3, [pc, #96]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013be:	4a19      	ldr	r2, [pc, #100]	@ (8001424 <MX_SPI4_Init+0x6c>)
 80013c0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80013c2:	4b17      	ldr	r3, [pc, #92]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80013c8:	4b15      	ldr	r3, [pc, #84]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ce:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013d0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80013d4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013dc:	4b10      	ldr	r3, [pc, #64]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013de:	2200      	movs	r2, #0
 80013e0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_INPUT;
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 7;
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <MX_SPI4_Init+0x68>)
 80013fc:	2207      	movs	r2, #7
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001400:	4b07      	ldr	r3, [pc, #28]	@ (8001420 <MX_SPI4_Init+0x68>)
 8001402:	2200      	movs	r2, #0
 8001404:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001406:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <MX_SPI4_Init+0x68>)
 8001408:	2200      	movs	r2, #0
 800140a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800140c:	4804      	ldr	r0, [pc, #16]	@ (8001420 <MX_SPI4_Init+0x68>)
 800140e:	f007 fb73 	bl	8008af8 <HAL_SPI_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_SPI4_Init+0x64>
  {
    Error_Handler();
 8001418:	f7ff ff8a 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200005c8 	.word	0x200005c8
 8001424:	40013400 	.word	0x40013400

08001428 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	@ 0x30
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001430:	f107 031c 	add.w	r3, r7, #28
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
 8001438:	605a      	str	r2, [r3, #4]
 800143a:	609a      	str	r2, [r3, #8]
 800143c:	60da      	str	r2, [r3, #12]
 800143e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4aa1      	ldr	r2, [pc, #644]	@ (80016cc <HAL_SPI_MspInit+0x2a4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	f040 80a9 	bne.w	800159e <HAL_SPI_MspInit+0x176>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800144c:	4ba0      	ldr	r3, [pc, #640]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 800144e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001450:	4a9f      	ldr	r2, [pc, #636]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 8001452:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001456:	6453      	str	r3, [r2, #68]	@ 0x44
 8001458:	4b9d      	ldr	r3, [pc, #628]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 800145a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001460:	61bb      	str	r3, [r7, #24]
 8001462:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001464:	4b9a      	ldr	r3, [pc, #616]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	4a99      	ldr	r2, [pc, #612]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001470:	4b97      	ldr	r3, [pc, #604]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 8001472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001474:	f003 0301 	and.w	r3, r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b94      	ldr	r3, [pc, #592]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 800147e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001480:	4a93      	ldr	r2, [pc, #588]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6313      	str	r3, [r2, #48]	@ 0x30
 8001488:	4b91      	ldr	r3, [pc, #580]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 800148a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148c:	f003 0302 	and.w	r3, r3, #2
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001494:	2370      	movs	r3, #112	@ 0x70
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014a4:	2305      	movs	r3, #5
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4889      	ldr	r0, [pc, #548]	@ (80016d4 <HAL_SPI_MspInit+0x2ac>)
 80014b0:	f003 fe36 	bl	8005120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80014b4:	2320      	movs	r3, #32
 80014b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b8:	2302      	movs	r3, #2
 80014ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c0:	2303      	movs	r3, #3
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014c4:	2305      	movs	r3, #5
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4882      	ldr	r0, [pc, #520]	@ (80016d8 <HAL_SPI_MspInit+0x2b0>)
 80014d0:	f003 fe26 	bl	8005120 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80014d4:	4b81      	ldr	r3, [pc, #516]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 80014d6:	4a82      	ldr	r2, [pc, #520]	@ (80016e0 <HAL_SPI_MspInit+0x2b8>)
 80014d8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80014da:	4b80      	ldr	r3, [pc, #512]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 80014dc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80014e0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014e2:	4b7e      	ldr	r3, [pc, #504]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014e8:	4b7c      	ldr	r3, [pc, #496]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014ee:	4b7b      	ldr	r3, [pc, #492]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 80014f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014f6:	4b79      	ldr	r3, [pc, #484]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014fc:	4b77      	ldr	r3, [pc, #476]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001502:	4b76      	ldr	r3, [pc, #472]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 8001504:	2200      	movs	r2, #0
 8001506:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001508:	4b74      	ldr	r3, [pc, #464]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 800150a:	2200      	movs	r2, #0
 800150c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800150e:	4b73      	ldr	r3, [pc, #460]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 8001510:	2200      	movs	r2, #0
 8001512:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001514:	4871      	ldr	r0, [pc, #452]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 8001516:	f001 ff69 	bl	80033ec <HAL_DMA_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_SPI_MspInit+0xfc>
    {
      Error_Handler();
 8001520:	f7ff ff06 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a6d      	ldr	r2, [pc, #436]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 8001528:	659a      	str	r2, [r3, #88]	@ 0x58
 800152a:	4a6c      	ldr	r2, [pc, #432]	@ (80016dc <HAL_SPI_MspInit+0x2b4>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001530:	4b6c      	ldr	r3, [pc, #432]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001532:	4a6d      	ldr	r2, [pc, #436]	@ (80016e8 <HAL_SPI_MspInit+0x2c0>)
 8001534:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001536:	4b6b      	ldr	r3, [pc, #428]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001538:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800153c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800153e:	4b69      	ldr	r3, [pc, #420]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001540:	2240      	movs	r2, #64	@ 0x40
 8001542:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001544:	4b67      	ldr	r3, [pc, #412]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800154a:	4b66      	ldr	r3, [pc, #408]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 800154c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001550:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001552:	4b64      	ldr	r3, [pc, #400]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001558:	4b62      	ldr	r3, [pc, #392]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 800155a:	2200      	movs	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800155e:	4b61      	ldr	r3, [pc, #388]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001560:	2200      	movs	r2, #0
 8001562:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001564:	4b5f      	ldr	r3, [pc, #380]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001566:	2200      	movs	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156a:	4b5e      	ldr	r3, [pc, #376]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 800156c:	2200      	movs	r2, #0
 800156e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001570:	485c      	ldr	r0, [pc, #368]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001572:	f001 ff3b 	bl	80033ec <HAL_DMA_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <HAL_SPI_MspInit+0x158>
    {
      Error_Handler();
 800157c:	f7ff fed8 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a58      	ldr	r2, [pc, #352]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001584:	655a      	str	r2, [r3, #84]	@ 0x54
 8001586:	4a57      	ldr	r2, [pc, #348]	@ (80016e4 <HAL_SPI_MspInit+0x2bc>)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800158c:	2200      	movs	r2, #0
 800158e:	2105      	movs	r1, #5
 8001590:	2023      	movs	r0, #35	@ 0x23
 8001592:	f001 fcf7 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001596:	2023      	movs	r0, #35	@ 0x23
 8001598:	f001 fd10 	bl	8002fbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 800159c:	e091      	b.n	80016c2 <HAL_SPI_MspInit+0x29a>
  else if(spiHandle->Instance==SPI4)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a52      	ldr	r2, [pc, #328]	@ (80016ec <HAL_SPI_MspInit+0x2c4>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	f040 808c 	bne.w	80016c2 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI4_CLK_ENABLE();
 80015aa:	4b49      	ldr	r3, [pc, #292]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ae:	4a48      	ldr	r2, [pc, #288]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 80015b0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015b6:	4b46      	ldr	r3, [pc, #280]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015c2:	4b43      	ldr	r3, [pc, #268]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a42      	ldr	r2, [pc, #264]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 80015c8:	f043 0310 	orr.w	r3, r3, #16
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b40      	ldr	r3, [pc, #256]	@ (80016d0 <HAL_SPI_MspInit+0x2a8>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80015da:	2374      	movs	r3, #116	@ 0x74
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80015ea:	2305      	movs	r3, #5
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	483e      	ldr	r0, [pc, #248]	@ (80016f0 <HAL_SPI_MspInit+0x2c8>)
 80015f6:	f003 fd93 	bl	8005120 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 80015fa:	4b3e      	ldr	r3, [pc, #248]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 80015fc:	4a3e      	ldr	r2, [pc, #248]	@ (80016f8 <HAL_SPI_MspInit+0x2d0>)
 80015fe:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001600:	4b3c      	ldr	r3, [pc, #240]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 8001602:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001606:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001608:	4b3a      	ldr	r3, [pc, #232]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160e:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001614:	4b37      	ldr	r3, [pc, #220]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 8001616:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800161a:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161c:	4b35      	ldr	r3, [pc, #212]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001622:	4b34      	ldr	r3, [pc, #208]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 8001624:	2200      	movs	r2, #0
 8001626:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001628:	4b32      	ldr	r3, [pc, #200]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800162e:	4b31      	ldr	r3, [pc, #196]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 8001630:	2200      	movs	r2, #0
 8001632:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001634:	4b2f      	ldr	r3, [pc, #188]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 8001636:	2200      	movs	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 800163a:	482e      	ldr	r0, [pc, #184]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 800163c:	f001 fed6 	bl	80033ec <HAL_DMA_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_SPI_MspInit+0x222>
      Error_Handler();
 8001646:	f7ff fe73 	bl	8001330 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a29      	ldr	r2, [pc, #164]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 800164e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001650:	4a28      	ldr	r2, [pc, #160]	@ (80016f4 <HAL_SPI_MspInit+0x2cc>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8001656:	4b29      	ldr	r3, [pc, #164]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 8001658:	4a29      	ldr	r2, [pc, #164]	@ (8001700 <HAL_SPI_MspInit+0x2d8>)
 800165a:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 800165c:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 800165e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001662:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001664:	4b25      	ldr	r3, [pc, #148]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 8001666:	2240      	movs	r2, #64	@ 0x40
 8001668:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166a:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	4b22      	ldr	r3, [pc, #136]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 8001672:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001676:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001678:	4b20      	ldr	r3, [pc, #128]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800167e:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001684:	4b1d      	ldr	r3, [pc, #116]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001690:	4b1a      	ldr	r3, [pc, #104]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001696:	4819      	ldr	r0, [pc, #100]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 8001698:	f001 fea8 	bl	80033ec <HAL_DMA_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 80016a2:	f7ff fe45 	bl	8001330 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a14      	ldr	r2, [pc, #80]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 80016aa:	655a      	str	r2, [r3, #84]	@ 0x54
 80016ac:	4a13      	ldr	r2, [pc, #76]	@ (80016fc <HAL_SPI_MspInit+0x2d4>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2105      	movs	r1, #5
 80016b6:	2054      	movs	r0, #84	@ 0x54
 80016b8:	f001 fc64 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80016bc:	2054      	movs	r0, #84	@ 0x54
 80016be:	f001 fc7d 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	@ 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40013000 	.word	0x40013000
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	2000062c 	.word	0x2000062c
 80016e0:	40026440 	.word	0x40026440
 80016e4:	2000068c 	.word	0x2000068c
 80016e8:	40026458 	.word	0x40026458
 80016ec:	40013400 	.word	0x40013400
 80016f0:	40021000 	.word	0x40021000
 80016f4:	200006ec 	.word	0x200006ec
 80016f8:	40026410 	.word	0x40026410
 80016fc:	2000074c 	.word	0x2000074c
 8001700:	40026428 	.word	0x40026428

08001704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b11      	ldr	r3, [pc, #68]	@ (8001750 <HAL_MspInit+0x4c>)
 800170c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170e:	4a10      	ldr	r2, [pc, #64]	@ (8001750 <HAL_MspInit+0x4c>)
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	@ 0x40
 8001716:	4b0e      	ldr	r3, [pc, #56]	@ (8001750 <HAL_MspInit+0x4c>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171e:	607b      	str	r3, [r7, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	4b0b      	ldr	r3, [pc, #44]	@ (8001750 <HAL_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <HAL_MspInit+0x4c>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b08      	ldr	r3, [pc, #32]	@ (8001750 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	210f      	movs	r1, #15
 800173e:	f06f 0001 	mvn.w	r0, #1
 8001742:	f001 fc1f 	bl	8002f84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800

08001754 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	@ 0x38
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800175c:	2300      	movs	r3, #0
 800175e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001764:	4b33      	ldr	r3, [pc, #204]	@ (8001834 <HAL_InitTick+0xe0>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	4a32      	ldr	r2, [pc, #200]	@ (8001834 <HAL_InitTick+0xe0>)
 800176a:	f043 0320 	orr.w	r3, r3, #32
 800176e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001770:	4b30      	ldr	r3, [pc, #192]	@ (8001834 <HAL_InitTick+0xe0>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800177c:	f107 0210 	add.w	r2, r7, #16
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f006 fd94 	bl	80082b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800178c:	6a3b      	ldr	r3, [r7, #32]
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001792:	2b00      	cmp	r3, #0
 8001794:	d103      	bne.n	800179e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001796:	f006 fd65 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 800179a:	6378      	str	r0, [r7, #52]	@ 0x34
 800179c:	e004      	b.n	80017a8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800179e:	f006 fd61 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 80017a2:	4603      	mov	r3, r0
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017aa:	4a23      	ldr	r2, [pc, #140]	@ (8001838 <HAL_InitTick+0xe4>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	0c9b      	lsrs	r3, r3, #18
 80017b2:	3b01      	subs	r3, #1
 80017b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80017b6:	4b21      	ldr	r3, [pc, #132]	@ (800183c <HAL_InitTick+0xe8>)
 80017b8:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <HAL_InitTick+0xec>)
 80017ba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <HAL_InitTick+0xe8>)
 80017be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017c2:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80017c4:	4a1d      	ldr	r2, [pc, #116]	@ (800183c <HAL_InitTick+0xe8>)
 80017c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c8:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	@ (800183c <HAL_InitTick+0xe8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	@ (800183c <HAL_InitTick+0xe8>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d6:	4b19      	ldr	r3, [pc, #100]	@ (800183c <HAL_InitTick+0xe8>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80017dc:	4817      	ldr	r0, [pc, #92]	@ (800183c <HAL_InitTick+0xe8>)
 80017de:	f008 fa53 	bl	8009c88 <HAL_TIM_Base_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d11b      	bne.n	8001828 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80017f0:	4812      	ldr	r0, [pc, #72]	@ (800183c <HAL_InitTick+0xe8>)
 80017f2:	f008 fb39 	bl	8009e68 <HAL_TIM_Base_Start_IT>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001800:	2b00      	cmp	r3, #0
 8001802:	d111      	bne.n	8001828 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001804:	2037      	movs	r0, #55	@ 0x37
 8001806:	f001 fbd9 	bl	8002fbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d808      	bhi.n	8001822 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	2037      	movs	r0, #55	@ 0x37
 8001816:	f001 fbb5 	bl	8002f84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <HAL_InitTick+0xf0>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	e002      	b.n	8001828 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001828:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800182c:	4618      	mov	r0, r3
 800182e:	3738      	adds	r7, #56	@ 0x38
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	431bde83 	.word	0x431bde83
 800183c:	200007ac 	.word	0x200007ac
 8001840:	40001400 	.word	0x40001400
 8001844:	20000004 	.word	0x20000004

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <NMI_Handler+0x4>

08001850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001854:	bf00      	nop
 8001856:	e7fd      	b.n	8001854 <HardFault_Handler+0x4>

08001858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800185c:	bf00      	nop
 800185e:	e7fd      	b.n	800185c <MemManage_Handler+0x4>

08001860 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <BusFault_Handler+0x4>

08001868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <UsageFault_Handler+0x4>

08001870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
	...

08001880 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <DMA1_Stream0_IRQHandler+0x10>)
 8001886:	f001 ff51 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000aec 	.word	0x20000aec

08001894 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim6_up);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <DMA1_Stream1_IRQHandler+0x10>)
 800189a:	f001 ff47 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000894 	.word	0x20000894

080018a8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <DMA1_Stream2_IRQHandler+0x10>)
 80018ae:	f001 ff3d 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000a8c 	.word	0x20000a8c

080018bc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <DMA1_Stream3_IRQHandler+0x10>)
 80018c2:	f001 ff33 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200004a4 	.word	0x200004a4

080018d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <DMA1_Stream5_IRQHandler+0x10>)
 80018d6:	f001 ff29 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200003e4 	.word	0x200003e4

080018e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <DMA1_Stream6_IRQHandler+0x10>)
 80018ea:	f001 ff1f 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000444 	.word	0x20000444

080018f8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <I2C1_EV_IRQHandler+0x10>)
 80018fe:	f004 f9fd 	bl	8005cfc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000033c 	.word	0x2000033c

0800190c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <I2C1_ER_IRQHandler+0x10>)
 8001912:	f004 fa0d 	bl	8005d30 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	2000033c 	.word	0x2000033c

08001920 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001924:	4802      	ldr	r0, [pc, #8]	@ (8001930 <I2C2_EV_IRQHandler+0x10>)
 8001926:	f004 f9e9 	bl	8005cfc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	20000390 	.word	0x20000390

08001934 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001938:	4802      	ldr	r0, [pc, #8]	@ (8001944 <I2C2_ER_IRQHandler+0x10>)
 800193a:	f004 f9f9 	bl	8005d30 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	20000390 	.word	0x20000390

08001948 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800194c:	4802      	ldr	r0, [pc, #8]	@ (8001958 <SPI1_IRQHandler+0x10>)
 800194e:	f007 fd13 	bl	8009378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000564 	.word	0x20000564

0800195c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001960:	4802      	ldr	r0, [pc, #8]	@ (800196c <USART3_IRQHandler+0x10>)
 8001962:	f009 f859 	bl	800aa18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000a04 	.word	0x20000a04

08001970 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8001974:	4802      	ldr	r0, [pc, #8]	@ (8001980 <DMA1_Stream7_IRQHandler+0x10>)
 8001976:	f001 fed9 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000504 	.word	0x20000504

08001984 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001988:	4802      	ldr	r0, [pc, #8]	@ (8001994 <UART4_IRQHandler+0x10>)
 800198a:	f009 f845 	bl	800aa18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	200008f4 	.word	0x200008f4

08001998 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800199c:	4802      	ldr	r0, [pc, #8]	@ (80019a8 <UART5_IRQHandler+0x10>)
 800199e:	f009 f83b 	bl	800aa18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000097c 	.word	0x2000097c

080019ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <TIM6_DAC_IRQHandler+0x10>)
 80019b2:	f008 fad1 	bl	8009f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000848 	.word	0x20000848

080019c0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80019c4:	4802      	ldr	r0, [pc, #8]	@ (80019d0 <TIM7_IRQHandler+0x10>)
 80019c6:	f008 fac7 	bl	8009f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200007ac 	.word	0x200007ac

080019d4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80019d8:	4802      	ldr	r0, [pc, #8]	@ (80019e4 <DMA2_Stream0_IRQHandler+0x10>)
 80019da:	f001 fea7 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200006ec 	.word	0x200006ec

080019e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80019ec:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <DMA2_Stream1_IRQHandler+0x10>)
 80019ee:	f001 fe9d 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000074c 	.word	0x2000074c

080019fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001a00:	4802      	ldr	r0, [pc, #8]	@ (8001a0c <DMA2_Stream2_IRQHandler+0x10>)
 8001a02:	f001 fe93 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000062c 	.word	0x2000062c

08001a10 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001a14:	4802      	ldr	r0, [pc, #8]	@ (8001a20 <DMA2_Stream3_IRQHandler+0x10>)
 8001a16:	f001 fe89 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000068c 	.word	0x2000068c

08001a24 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a28:	4802      	ldr	r0, [pc, #8]	@ (8001a34 <DMA2_Stream4_IRQHandler+0x10>)
 8001a2a:	f001 fe7f 	bl	800372c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000274 	.word	0x20000274

08001a38 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a3c:	4802      	ldr	r0, [pc, #8]	@ (8001a48 <ETH_IRQHandler+0x10>)
 8001a3e:	f002 fc87 	bl	8004350 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	2000cfe4 	.word	0x2000cfe4

08001a4c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001a50:	4802      	ldr	r0, [pc, #8]	@ (8001a5c <ETH_WKUP_IRQHandler+0x10>)
 8001a52:	f002 fc7d 	bl	8004350 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000cfe4 	.word	0x2000cfe4

08001a60 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <SPI4_IRQHandler+0x10>)
 8001a66:	f007 fc87 	bl	8009378 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200005c8 	.word	0x200005c8

08001a74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return 1;
 8001a78:	2301      	movs	r3, #1
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <_kill>:

int _kill(int pid, int sig)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a8e:	4b05      	ldr	r3, [pc, #20]	@ (8001aa4 <_kill+0x20>)
 8001a90:	2216      	movs	r2, #22
 8001a92:	601a      	str	r2, [r3, #0]
  return -1;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	2002d958 	.word	0x2002d958

08001aa8 <_exit>:

void _exit (int status)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffe5 	bl	8001a84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aba:	bf00      	nop
 8001abc:	e7fd      	b.n	8001aba <_exit+0x12>

08001abe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b086      	sub	sp, #24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	e00a      	b.n	8001ae6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ad0:	f3af 8000 	nop.w
 8001ad4:	4601      	mov	r1, r0
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	b2ca      	uxtb	r2, r1
 8001ade:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	dbf0      	blt.n	8001ad0 <_read+0x12>
  }

  return len;
 8001aee:	687b      	ldr	r3, [r7, #4]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b20:	605a      	str	r2, [r3, #4]
  return 0;
 8001b22:	2300      	movs	r3, #0
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_isatty>:

int _isatty(int file)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b38:	2301      	movs	r3, #1
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	60b9      	str	r1, [r7, #8]
 8001b50:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3714      	adds	r7, #20
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b68:	4a14      	ldr	r2, [pc, #80]	@ (8001bbc <_sbrk+0x5c>)
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <_sbrk+0x60>)
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <_sbrk+0x64>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d102      	bne.n	8001b82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	@ (8001bc4 <_sbrk+0x64>)
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <_sbrk+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d205      	bcs.n	8001b9c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001b90:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <_sbrk+0x6c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b9a:	e009      	b.n	8001bb0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	4a06      	ldr	r2, [pc, #24]	@ (8001bc4 <_sbrk+0x64>)
 8001bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bae:	68fb      	ldr	r3, [r7, #12]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	371c      	adds	r7, #28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	20050000 	.word	0x20050000
 8001bc0:	00002000 	.word	0x00002000
 8001bc4:	200007f8 	.word	0x200007f8
 8001bc8:	2002d968 	.word	0x2002d968
 8001bcc:	2002d958 	.word	0x2002d958

08001bd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	@ (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
DMA_HandleTypeDef hdma_tim6_up;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c12:	4b1e      	ldr	r3, [pc, #120]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c14:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c18:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c20:	4b1a      	ldr	r3, [pc, #104]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c26:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c2c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b15      	ldr	r3, [pc, #84]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c3a:	4814      	ldr	r0, [pc, #80]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c3c:	f008 f824 	bl	8009c88 <HAL_TIM_Base_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001c46:	f7ff fb73 	bl	8001330 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	4619      	mov	r1, r3
 8001c56:	480d      	ldr	r0, [pc, #52]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c58:	f008 fa86 	bl	800a168 <HAL_TIM_ConfigClockSource>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001c62:	f7ff fb65 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c66:	2300      	movs	r3, #0
 8001c68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	4619      	mov	r1, r3
 8001c72:	4806      	ldr	r0, [pc, #24]	@ (8001c8c <MX_TIM2_Init+0x98>)
 8001c74:	f008 fcaa 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001c7e:	f7ff fb57 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	200007fc 	.word	0x200007fc

08001c90 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001ca0:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <MX_TIM6_Init+0x64>)
 8001ca2:	4a15      	ldr	r2, [pc, #84]	@ (8001cf8 <MX_TIM6_Init+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 540-1;
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <MX_TIM6_Init+0x64>)
 8001ca8:	f240 221b 	movw	r2, #539	@ 0x21b
 8001cac:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <MX_TIM6_Init+0x64>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100-1;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <MX_TIM6_Init+0x64>)
 8001cb6:	2263      	movs	r2, #99	@ 0x63
 8001cb8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <MX_TIM6_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001cc0:	480c      	ldr	r0, [pc, #48]	@ (8001cf4 <MX_TIM6_Init+0x64>)
 8001cc2:	f007 ffe1 	bl	8009c88 <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ccc:	f7ff fb30 	bl	8001330 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <MX_TIM6_Init+0x64>)
 8001cde:	f008 fc75 	bl	800a5cc <HAL_TIMEx_MasterConfigSynchronization>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ce8:	f7ff fb22 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000848 	.word	0x20000848
 8001cf8:	40001000 	.word	0x40001000

08001cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d0c:	d10c      	bne.n	8001d28 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xc8>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d12:	4a2c      	ldr	r2, [pc, #176]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xc8>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xc8>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001d26:	e049      	b.n	8001dbc <HAL_TIM_Base_MspInit+0xc0>
  else if(tim_baseHandle->Instance==TIM6)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a26      	ldr	r2, [pc, #152]	@ (8001dc8 <HAL_TIM_Base_MspInit+0xcc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d144      	bne.n	8001dbc <HAL_TIM_Base_MspInit+0xc0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d32:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xc8>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a23      	ldr	r2, [pc, #140]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xc8>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <HAL_TIM_Base_MspInit+0xc8>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    hdma_tim6_up.Instance = DMA1_Stream1;
 8001d4a:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d4c:	4a20      	ldr	r2, [pc, #128]	@ (8001dd0 <HAL_TIM_Base_MspInit+0xd4>)
 8001d4e:	601a      	str	r2, [r3, #0]
    hdma_tim6_up.Init.Channel = DMA_CHANNEL_7;
 8001d50:	4b1e      	ldr	r3, [pc, #120]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d52:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8001d56:	605a      	str	r2, [r3, #4]
    hdma_tim6_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d58:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
    hdma_tim6_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
    hdma_tim6_up.Init.MemInc = DMA_MINC_ENABLE;
 8001d64:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d6a:	611a      	str	r2, [r3, #16]
    hdma_tim6_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d6c:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d72:	615a      	str	r2, [r3, #20]
    hdma_tim6_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d76:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d7a:	619a      	str	r2, [r3, #24]
    hdma_tim6_up.Init.Mode = DMA_NORMAL;
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	61da      	str	r2, [r3, #28]
    hdma_tim6_up.Init.Priority = DMA_PRIORITY_HIGH;
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d88:	621a      	str	r2, [r3, #32]
    hdma_tim6_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim6_up) != HAL_OK)
 8001d90:	480e      	ldr	r0, [pc, #56]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001d92:	f001 fb2b 	bl	80033ec <HAL_DMA_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_TIM_Base_MspInit+0xa4>
      Error_Handler();
 8001d9c:	f7ff fac8 	bl	8001330 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_UPDATE],hdma_tim6_up);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001da4:	621a      	str	r2, [r3, #32]
 8001da6:	4a09      	ldr	r2, [pc, #36]	@ (8001dcc <HAL_TIM_Base_MspInit+0xd0>)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2105      	movs	r1, #5
 8001db0:	2036      	movs	r0, #54	@ 0x36
 8001db2:	f001 f8e7 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001db6:	2036      	movs	r0, #54	@ 0x36
 8001db8:	f001 f900 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 8001dbc:	bf00      	nop
 8001dbe:	3710      	adds	r7, #16
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40001000 	.word	0x40001000
 8001dcc:	20000894 	.word	0x20000894
 8001dd0:	40026028 	.word	0x40026028

08001dd4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_uart4_rx;
DMA_HandleTypeDef hdma_uart5_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001dd8:	4b14      	ldr	r3, [pc, #80]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001dda:	4a15      	ldr	r2, [pc, #84]	@ (8001e30 <MX_UART4_Init+0x5c>)
 8001ddc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001dde:	4b13      	ldr	r3, [pc, #76]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001de0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001de4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001dec:	4b0f      	ldr	r3, [pc, #60]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001df8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e04:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e16:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <MX_UART4_Init+0x58>)
 8001e18:	f008 fc84 	bl	800a724 <HAL_UART_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001e22:	f7ff fa85 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e26:	bf00      	nop
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	200008f4 	.word	0x200008f4
 8001e30:	40004c00 	.word	0x40004c00

08001e34 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e38:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e3a:	4a15      	ldr	r2, [pc, #84]	@ (8001e90 <MX_UART5_Init+0x5c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <MX_UART5_Init+0x58>)
 8001e78:	f008 fc54 	bl	800a724 <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001e82:	f7ff fa55 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000097c 	.word	0x2000097c
 8001e90:	40005000 	.word	0x40005000

08001e94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e98:	4b14      	ldr	r3, [pc, #80]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001e9a:	4a15      	ldr	r2, [pc, #84]	@ (8001ef0 <MX_USART3_UART_Init+0x5c>)
 8001e9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e9e:	4b13      	ldr	r3, [pc, #76]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001ea0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ea4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea6:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001eac:	4b0f      	ldr	r3, [pc, #60]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001eba:	220c      	movs	r2, #12
 8001ebc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	@ (8001eec <MX_USART3_UART_Init+0x58>)
 8001ed8:	f008 fc24 	bl	800a724 <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001ee2:	f7ff fa25 	bl	8001330 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000a04 	.word	0x20000a04
 8001ef0:	40004800 	.word	0x40004800

08001ef4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b0b0      	sub	sp, #192	@ 0xc0
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f0c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f10:	2284      	movs	r2, #132	@ 0x84
 8001f12:	2100      	movs	r1, #0
 8001f14:	4618      	mov	r0, r3
 8001f16:	f01f f93d 	bl	8021194 <memset>
  if(uartHandle->Instance==UART4)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4ab0      	ldr	r2, [pc, #704]	@ (80021e0 <HAL_UART_MspInit+0x2ec>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d173      	bne.n	800200c <HAL_UART_MspInit+0x118>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f28:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f32:	4618      	mov	r0, r3
 8001f34:	f006 f9f0 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001f3e:	f7ff f9f7 	bl	8001330 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f42:	4ba8      	ldr	r3, [pc, #672]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	4aa7      	ldr	r2, [pc, #668]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8001f48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4e:	4ba5      	ldr	r3, [pc, #660]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8001f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f5a:	4ba2      	ldr	r3, [pc, #648]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5e:	4aa1      	ldr	r2, [pc, #644]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f66:	4b9f      	ldr	r3, [pc, #636]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f86:	2303      	movs	r3, #3
 8001f88:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f8c:	2308      	movs	r3, #8
 8001f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f92:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f96:	4619      	mov	r1, r3
 8001f98:	4893      	ldr	r0, [pc, #588]	@ (80021e8 <HAL_UART_MspInit+0x2f4>)
 8001f9a:	f003 f8c1 	bl	8005120 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001f9e:	4b93      	ldr	r3, [pc, #588]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fa0:	4a93      	ldr	r2, [pc, #588]	@ (80021f0 <HAL_UART_MspInit+0x2fc>)
 8001fa2:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001fa4:	4b91      	ldr	r3, [pc, #580]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fa6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001faa:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fac:	4b8f      	ldr	r3, [pc, #572]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fb2:	4b8e      	ldr	r3, [pc, #568]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fb8:	4b8c      	ldr	r3, [pc, #560]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fbe:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc0:	4b8a      	ldr	r3, [pc, #552]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fc6:	4b89      	ldr	r3, [pc, #548]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8001fcc:	4b87      	ldr	r3, [pc, #540]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fd2:	4b86      	ldr	r3, [pc, #536]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fd8:	4b84      	ldr	r3, [pc, #528]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001fde:	4883      	ldr	r0, [pc, #524]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001fe0:	f001 fa04 	bl	80033ec <HAL_DMA_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001fea:	f7ff f9a1 	bl	8001330 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a7e      	ldr	r2, [pc, #504]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001ff2:	675a      	str	r2, [r3, #116]	@ 0x74
 8001ff4:	4a7d      	ldr	r2, [pc, #500]	@ (80021ec <HAL_UART_MspInit+0x2f8>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2105      	movs	r1, #5
 8001ffe:	2034      	movs	r0, #52	@ 0x34
 8002000:	f000 ffc0 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002004:	2034      	movs	r0, #52	@ 0x34
 8002006:	f000 ffd9 	bl	8002fbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800200a:	e0e4      	b.n	80021d6 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==UART5)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a78      	ldr	r2, [pc, #480]	@ (80021f4 <HAL_UART_MspInit+0x300>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f040 8095 	bne.w	8002142 <HAL_UART_MspInit+0x24e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8002018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800201c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800201e:	2300      	movs	r3, #0
 8002020:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002026:	4618      	mov	r0, r3
 8002028:	f006 f976 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d001      	beq.n	8002036 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8002032:	f7ff f97d 	bl	8001330 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002036:	4b6b      	ldr	r3, [pc, #428]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	4a6a      	ldr	r2, [pc, #424]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 800203c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002040:	6413      	str	r3, [r2, #64]	@ 0x40
 8002042:	4b68      	ldr	r3, [pc, #416]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800204e:	4b65      	ldr	r3, [pc, #404]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a64      	ldr	r2, [pc, #400]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b62      	ldr	r3, [pc, #392]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	61bb      	str	r3, [r7, #24]
 8002064:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002066:	4b5f      	ldr	r3, [pc, #380]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a5e      	ldr	r2, [pc, #376]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b5c      	ldr	r3, [pc, #368]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0308 	and.w	r3, r3, #8
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800207e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002092:	2303      	movs	r3, #3
 8002094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002098:	2308      	movs	r3, #8
 800209a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020a2:	4619      	mov	r1, r3
 80020a4:	4850      	ldr	r0, [pc, #320]	@ (80021e8 <HAL_UART_MspInit+0x2f4>)
 80020a6:	f003 f83b 	bl	8005120 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020aa:	2304      	movs	r3, #4
 80020ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020bc:	2303      	movs	r3, #3
 80020be:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80020c2:	2308      	movs	r3, #8
 80020c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80020cc:	4619      	mov	r1, r3
 80020ce:	484a      	ldr	r0, [pc, #296]	@ (80021f8 <HAL_UART_MspInit+0x304>)
 80020d0:	f003 f826 	bl	8005120 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80020d4:	4b49      	ldr	r3, [pc, #292]	@ (80021fc <HAL_UART_MspInit+0x308>)
 80020d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002200 <HAL_UART_MspInit+0x30c>)
 80020d8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80020da:	4b48      	ldr	r3, [pc, #288]	@ (80021fc <HAL_UART_MspInit+0x308>)
 80020dc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020e0:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020e2:	4b46      	ldr	r3, [pc, #280]	@ (80021fc <HAL_UART_MspInit+0x308>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020e8:	4b44      	ldr	r3, [pc, #272]	@ (80021fc <HAL_UART_MspInit+0x308>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ee:	4b43      	ldr	r3, [pc, #268]	@ (80021fc <HAL_UART_MspInit+0x308>)
 80020f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020f4:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020f6:	4b41      	ldr	r3, [pc, #260]	@ (80021fc <HAL_UART_MspInit+0x308>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020fc:	4b3f      	ldr	r3, [pc, #252]	@ (80021fc <HAL_UART_MspInit+0x308>)
 80020fe:	2200      	movs	r2, #0
 8002100:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002102:	4b3e      	ldr	r3, [pc, #248]	@ (80021fc <HAL_UART_MspInit+0x308>)
 8002104:	2200      	movs	r2, #0
 8002106:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002108:	4b3c      	ldr	r3, [pc, #240]	@ (80021fc <HAL_UART_MspInit+0x308>)
 800210a:	2200      	movs	r2, #0
 800210c:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800210e:	4b3b      	ldr	r3, [pc, #236]	@ (80021fc <HAL_UART_MspInit+0x308>)
 8002110:	2200      	movs	r2, #0
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002114:	4839      	ldr	r0, [pc, #228]	@ (80021fc <HAL_UART_MspInit+0x308>)
 8002116:	f001 f969 	bl	80033ec <HAL_DMA_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <HAL_UART_MspInit+0x230>
      Error_Handler();
 8002120:	f7ff f906 	bl	8001330 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a35      	ldr	r2, [pc, #212]	@ (80021fc <HAL_UART_MspInit+0x308>)
 8002128:	675a      	str	r2, [r3, #116]	@ 0x74
 800212a:	4a34      	ldr	r2, [pc, #208]	@ (80021fc <HAL_UART_MspInit+0x308>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	2105      	movs	r1, #5
 8002134:	2035      	movs	r0, #53	@ 0x35
 8002136:	f000 ff25 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800213a:	2035      	movs	r0, #53	@ 0x35
 800213c:	f000 ff3e 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 8002140:	e049      	b.n	80021d6 <HAL_UART_MspInit+0x2e2>
  else if(uartHandle->Instance==USART3)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <HAL_UART_MspInit+0x310>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d144      	bne.n	80021d6 <HAL_UART_MspInit+0x2e2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800214c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002152:	2300      	movs	r3, #0
 8002154:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002156:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800215a:	4618      	mov	r0, r3
 800215c:	f006 f8dc 	bl	8008318 <HAL_RCCEx_PeriphCLKConfig>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_UART_MspInit+0x276>
      Error_Handler();
 8002166:	f7ff f8e3 	bl	8001330 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	4a1d      	ldr	r2, [pc, #116]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002174:	6413      	str	r3, [r2, #64]	@ 0x40
 8002176:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002182:	4b18      	ldr	r3, [pc, #96]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a17      	ldr	r2, [pc, #92]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <HAL_UART_MspInit+0x2f0>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800219a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800219e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ae:	2303      	movs	r3, #3
 80021b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021b4:	2307      	movs	r3, #7
 80021b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ba:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80021be:	4619      	mov	r1, r3
 80021c0:	480d      	ldr	r0, [pc, #52]	@ (80021f8 <HAL_UART_MspInit+0x304>)
 80021c2:	f002 ffad 	bl	8005120 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2105      	movs	r1, #5
 80021ca:	2027      	movs	r0, #39	@ 0x27
 80021cc:	f000 feda 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021d0:	2027      	movs	r0, #39	@ 0x27
 80021d2:	f000 fef3 	bl	8002fbc <HAL_NVIC_EnableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	37c0      	adds	r7, #192	@ 0xc0
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40004c00 	.word	0x40004c00
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020800 	.word	0x40020800
 80021ec:	20000a8c 	.word	0x20000a8c
 80021f0:	40026040 	.word	0x40026040
 80021f4:	40005000 	.word	0x40005000
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	20000aec 	.word	0x20000aec
 8002200:	40026010 	.word	0x40026010
 8002204:	40004800 	.word	0x40004800

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002240 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800220c:	f7ff fce0 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002210:	480c      	ldr	r0, [pc, #48]	@ (8002244 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002212:	490d      	ldr	r1, [pc, #52]	@ (8002248 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002214:	4a0d      	ldr	r2, [pc, #52]	@ (800224c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002218:	e002      	b.n	8002220 <LoopCopyDataInit>

0800221a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800221a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800221c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800221e:	3304      	adds	r3, #4

08002220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002224:	d3f9      	bcc.n	800221a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002226:	4a0a      	ldr	r2, [pc, #40]	@ (8002250 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002228:	4c0a      	ldr	r4, [pc, #40]	@ (8002254 <LoopFillZerobss+0x22>)
  movs r3, #0
 800222a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800222c:	e001      	b.n	8002232 <LoopFillZerobss>

0800222e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800222e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002230:	3204      	adds	r2, #4

08002232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002234:	d3fb      	bcc.n	800222e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002236:	f01f f859 	bl	80212ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7fe ffd3 	bl	80011e4 <main>
  bx  lr    
 800223e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002240:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002248:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 800224c:	08026ebc 	.word	0x08026ebc
  ldr r2, =_sbss
 8002250:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002254:	2002d968 	.word	0x2002d968

08002258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC_IRQHandler>

0800225a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00b      	beq.n	8002282 <LAN8742_RegisterBusIO+0x28>
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <LAN8742_RegisterBusIO+0x28>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <LAN8742_RegisterBusIO+0x28>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002286:	e014      	b.n	80022b2 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68da      	ldr	r2, [r3, #12]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80022be:	b580      	push	{r7, lr}
 80022c0:	b086      	sub	sp, #24
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80022c6:	2300      	movs	r3, #0
 80022c8:	60fb      	str	r3, [r7, #12]
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d139      	bne.n	800234e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2220      	movs	r2, #32
 80022ec:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e01c      	b.n	800232e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f107 020c 	add.w	r2, r7, #12
 80022fc:	2112      	movs	r1, #18
 80022fe:	6978      	ldr	r0, [r7, #20]
 8002300:	4798      	blx	r3
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	da03      	bge.n	8002310 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002308:	f06f 0304 	mvn.w	r3, #4
 800230c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800230e:	e00b      	b.n	8002328 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	d105      	bne.n	8002328 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
         break;
 8002326:	e005      	b.n	8002334 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	3301      	adds	r3, #1
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b1f      	cmp	r3, #31
 8002332:	d9df      	bls.n	80022f4 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b1f      	cmp	r3, #31
 800233a:	d902      	bls.n	8002342 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800233c:	f06f 0302 	mvn.w	r3, #2
 8002340:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d102      	bne.n	800234e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800234e:	693b      	ldr	r3, [r7, #16]
 }
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6810      	ldr	r0, [r2, #0]
 800236c:	f107 020c 	add.w	r2, r7, #12
 8002370:	2101      	movs	r1, #1
 8002372:	4798      	blx	r3
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	da02      	bge.n	8002380 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800237a:	f06f 0304 	mvn.w	r3, #4
 800237e:	e06e      	b.n	800245e <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6810      	ldr	r0, [r2, #0]
 8002388:	f107 020c 	add.w	r2, r7, #12
 800238c:	2101      	movs	r1, #1
 800238e:	4798      	blx	r3
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	da02      	bge.n	800239c <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002396:	f06f 0304 	mvn.w	r3, #4
 800239a:	e060      	b.n	800245e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0304 	and.w	r3, r3, #4
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e059      	b.n	800245e <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6810      	ldr	r0, [r2, #0]
 80023b2:	f107 020c 	add.w	r2, r7, #12
 80023b6:	2100      	movs	r1, #0
 80023b8:	4798      	blx	r3
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	da02      	bge.n	80023c6 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80023c0:	f06f 0304 	mvn.w	r3, #4
 80023c4:	e04b      	b.n	800245e <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d11b      	bne.n	8002408 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d006      	beq.n	80023e8 <LAN8742_GetLinkState+0x90>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80023e4:	2302      	movs	r3, #2
 80023e6:	e03a      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e033      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002400:	2304      	movs	r3, #4
 8002402:	e02c      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002404:	2305      	movs	r3, #5
 8002406:	e02a      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6810      	ldr	r0, [r2, #0]
 8002410:	f107 020c 	add.w	r2, r7, #12
 8002414:	211f      	movs	r1, #31
 8002416:	4798      	blx	r3
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	da02      	bge.n	8002424 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800241e:	f06f 0304 	mvn.w	r3, #4
 8002422:	e01c      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800242e:	2306      	movs	r3, #6
 8002430:	e015      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f003 031c 	and.w	r3, r3, #28
 8002438:	2b18      	cmp	r3, #24
 800243a:	d101      	bne.n	8002440 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800243c:	2302      	movs	r3, #2
 800243e:	e00e      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 031c 	and.w	r3, r3, #28
 8002446:	2b08      	cmp	r3, #8
 8002448:	d101      	bne.n	800244e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800244a:	2303      	movs	r3, #3
 800244c:	e007      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 031c 	and.w	r3, r3, #28
 8002454:	2b14      	cmp	r3, #20
 8002456:	d101      	bne.n	800245c <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002458:	2304      	movs	r3, #4
 800245a:	e000      	b.n	800245e <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800245c:	2305      	movs	r3, #5
    }
  }
}
 800245e:	4618      	mov	r0, r3
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246a:	2003      	movs	r0, #3
 800246c:	f000 fd7f 	bl	8002f6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002470:	200f      	movs	r0, #15
 8002472:	f7ff f96f 	bl	8001754 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002476:	f7ff f945 	bl	8001704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
}
 800247c:	4618      	mov	r0, r3
 800247e:	bd80      	pop	{r7, pc}

08002480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_IncTick+0x20>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_IncTick+0x24>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <HAL_IncTick+0x24>)
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000b4c 	.word	0x20000b4c

080024a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b03      	ldr	r3, [pc, #12]	@ (80024bc <HAL_GetTick+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000b4c 	.word	0x20000b4c

080024c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff ffee 	bl	80024a8 <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d8:	d005      	beq.n	80024e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_Delay+0x44>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024e6:	bf00      	nop
 80024e8:	f7ff ffde 	bl	80024a8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d8f7      	bhi.n	80024e8 <HAL_Delay+0x28>
  {
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000008 	.word	0x20000008

08002508 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e031      	b.n	8002582 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d109      	bne.n	800253a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe f8aa 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d116      	bne.n	8002574 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800254a:	4b10      	ldr	r3, [pc, #64]	@ (800258c <HAL_ADC_Init+0x84>)
 800254c:	4013      	ands	r3, r2
 800254e:	f043 0202 	orr.w	r2, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fae0 	bl	8002b1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	f043 0201 	orr.w	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	641a      	str	r2, [r3, #64]	@ 0x40
 8002572:	e001      	b.n	8002578 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	ffffeefd 	.word	0xffffeefd

08002590 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t counter = 0;
 80025a0:	2300      	movs	r3, #0
 80025a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Start_DMA+0x22>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0d6      	b.n	8002760 <HAL_ADC_Start_DMA+0x1d0>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d018      	beq.n	80025fa <HAL_ADC_Start_DMA+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80025d8:	4b63      	ldr	r3, [pc, #396]	@ (8002768 <HAL_ADC_Start_DMA+0x1d8>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a63      	ldr	r2, [pc, #396]	@ (800276c <HAL_ADC_Start_DMA+0x1dc>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	0c9a      	lsrs	r2, r3, #18
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80025ec:	e002      	b.n	80025f4 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	3b01      	subs	r3, #1
 80025f2:	613b      	str	r3, [r7, #16]
    while(counter != 0)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d1f9      	bne.n	80025ee <HAL_ADC_Start_DMA+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b01      	cmp	r3, #1
 8002606:	f040 809e 	bne.w	8002746 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800260e:	4b58      	ldr	r3, [pc, #352]	@ (8002770 <HAL_ADC_Start_DMA+0x1e0>)
 8002610:	4013      	ands	r3, r2
 8002612:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002624:	2b00      	cmp	r3, #0
 8002626:	d007      	beq.n	8002638 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800262c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002630:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002644:	d106      	bne.n	8002654 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264a:	f023 0206 	bic.w	r2, r3, #6
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	645a      	str	r2, [r3, #68]	@ 0x44
 8002652:	e002      	b.n	800265a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002666:	4a43      	ldr	r2, [pc, #268]	@ (8002774 <HAL_ADC_Start_DMA+0x1e4>)
 8002668:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800266e:	4a42      	ldr	r2, [pc, #264]	@ (8002778 <HAL_ADC_Start_DMA+0x1e8>)
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002676:	4a41      	ldr	r2, [pc, #260]	@ (800277c <HAL_ADC_Start_DMA+0x1ec>)
 8002678:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002682:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002692:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	334c      	adds	r3, #76	@ 0x4c
 80026ae:	4619      	mov	r1, r3
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f000 ff48 	bl	8003548 <HAL_DMA_Start_IT>
 80026b8:	4603      	mov	r3, r0
 80026ba:	75fb      	strb	r3, [r7, #23]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80026bc:	4b30      	ldr	r3, [pc, #192]	@ (8002780 <HAL_ADC_Start_DMA+0x1f0>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 031f 	and.w	r3, r3, #31
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10f      	bne.n	80026e8 <HAL_ADC_Start_DMA+0x158>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d143      	bne.n	800275e <HAL_ADC_Start_DMA+0x1ce>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	e03a      	b.n	800275e <HAL_ADC_Start_DMA+0x1ce>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a25      	ldr	r2, [pc, #148]	@ (8002784 <HAL_ADC_Start_DMA+0x1f4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d10e      	bne.n	8002710 <HAL_ADC_Start_DMA+0x180>
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d107      	bne.n	8002710 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800270e:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <HAL_ADC_Start_DMA+0x1f0>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0310 	and.w	r3, r3, #16
 8002718:	2b00      	cmp	r3, #0
 800271a:	d120      	bne.n	800275e <HAL_ADC_Start_DMA+0x1ce>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a19      	ldr	r2, [pc, #100]	@ (8002788 <HAL_ADC_Start_DMA+0x1f8>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d11b      	bne.n	800275e <HAL_ADC_Start_DMA+0x1ce>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d114      	bne.n	800275e <HAL_ADC_Start_DMA+0x1ce>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	e00b      	b.n	800275e <HAL_ADC_Start_DMA+0x1ce>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f043 0210 	orr.w	r2, r3, #16
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f043 0201 	orr.w	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return status;
 800275e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000000 	.word	0x20000000
 800276c:	431bde83 	.word	0x431bde83
 8002770:	fffff8fe 	.word	0xfffff8fe
 8002774:	08002d11 	.word	0x08002d11
 8002778:	08002dcb 	.word	0x08002dcb
 800277c:	08002de7 	.word	0x08002de7
 8002780:	40012300 	.word	0x40012300
 8002784:	40012000 	.word	0x40012000
 8002788:	40012200 	.word	0x40012200

0800278c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002794:	2300      	movs	r3, #0
 8002796:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_ADC_Stop_DMA+0x1a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e046      	b.n	8002834 <HAL_ADC_Stop_DMA+0xa8>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d12e      	bne.n	800282a <HAL_ADC_Stop_DMA+0x9e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027da:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d10f      	bne.n	800280a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 ff0a 	bl	8003608 <HAL_DMA_Abort>
 80027f4:	4603      	mov	r3, r0
 80027f6:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80027f8:	7bfb      	ldrb	r3, [r7, #15]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d005      	beq.n	800280a <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8002818:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800281e:	4b07      	ldr	r3, [pc, #28]	@ (800283c <HAL_ADC_Stop_DMA+0xb0>)
 8002820:	4013      	ands	r3, r2
 8002822:	f043 0201 	orr.w	r2, r3, #1
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002832:	7bfb      	ldrb	r3, [r7, #15]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	ffffeefe 	.word	0xffffeefe

08002840 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002872:	2300      	movs	r3, #0
 8002874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x1c>
 8002880:	2302      	movs	r3, #2
 8002882:	e13a      	b.n	8002afa <HAL_ADC_ConfigChannel+0x292>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b09      	cmp	r3, #9
 8002892:	d93a      	bls.n	800290a <HAL_ADC_ConfigChannel+0xa2>
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800289c:	d035      	beq.n	800290a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68d9      	ldr	r1, [r3, #12]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	461a      	mov	r2, r3
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	3b1e      	subs	r3, #30
 80028b4:	2207      	movs	r2, #7
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	43da      	mvns	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	400a      	ands	r2, r1
 80028c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a8f      	ldr	r2, [pc, #572]	@ (8002b08 <HAL_ADC_ConfigChannel+0x2a0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d10a      	bne.n	80028e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68d9      	ldr	r1, [r3, #12]
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	061a      	lsls	r2, r3, #24
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028e2:	e039      	b.n	8002958 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68d9      	ldr	r1, [r3, #12]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	4618      	mov	r0, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4403      	add	r3, r0
 80028fc:	3b1e      	subs	r3, #30
 80028fe:	409a      	lsls	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002908:	e026      	b.n	8002958 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6919      	ldr	r1, [r3, #16]
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b29b      	uxth	r3, r3
 8002916:	461a      	mov	r2, r3
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	2207      	movs	r2, #7
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43da      	mvns	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	400a      	ands	r2, r1
 8002930:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6919      	ldr	r1, [r3, #16]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	4603      	mov	r3, r0
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4403      	add	r3, r0
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	409a      	lsls	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b06      	cmp	r3, #6
 800295e:	d824      	bhi.n	80029aa <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	3b05      	subs	r3, #5
 8002972:	221f      	movs	r2, #31
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43da      	mvns	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	400a      	ands	r2, r1
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	4618      	mov	r0, r3
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b05      	subs	r3, #5
 800299c:	fa00 f203 	lsl.w	r2, r0, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80029a8:	e04c      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d824      	bhi.n	80029fc <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	3b23      	subs	r3, #35	@ 0x23
 80029c4:	221f      	movs	r2, #31
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	400a      	ands	r2, r1
 80029d2:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	4618      	mov	r0, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	4613      	mov	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	4413      	add	r3, r2
 80029ec:	3b23      	subs	r3, #35	@ 0x23
 80029ee:	fa00 f203 	lsl.w	r2, r0, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80029fa:	e023      	b.n	8002a44 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3b41      	subs	r3, #65	@ 0x41
 8002a0e:	221f      	movs	r2, #31
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43da      	mvns	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	3b41      	subs	r3, #65	@ 0x41
 8002a38:	fa00 f203 	lsl.w	r2, r0, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a30      	ldr	r2, [pc, #192]	@ (8002b0c <HAL_ADC_ConfigChannel+0x2a4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10a      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1fc>
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a56:	d105      	bne.n	8002a64 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002a58:	4b2d      	ldr	r3, [pc, #180]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a5e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002a62:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <HAL_ADC_ConfigChannel+0x2a4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d10f      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x226>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b12      	cmp	r3, #18
 8002a74:	d10b      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002a76:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4a25      	ldr	r2, [pc, #148]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a80:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002a88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a1e      	ldr	r2, [pc, #120]	@ (8002b0c <HAL_ADC_ConfigChannel+0x2a4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d12b      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x288>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002b08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d003      	beq.n	8002aaa <HAL_ADC_ConfigChannel+0x242>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b11      	cmp	r3, #17
 8002aa8:	d122      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4a18      	ldr	r2, [pc, #96]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ab0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002ab4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002ab6:	4b16      	ldr	r3, [pc, #88]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	4a15      	ldr	r2, [pc, #84]	@ (8002b10 <HAL_ADC_ConfigChannel+0x2a8>)
 8002abc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002ac0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	@ (8002b08 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d111      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002acc:	4b11      	ldr	r3, [pc, #68]	@ (8002b14 <HAL_ADC_ConfigChannel+0x2ac>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a11      	ldr	r2, [pc, #68]	@ (8002b18 <HAL_ADC_ConfigChannel+0x2b0>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9a      	lsrs	r2, r3, #18
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002ae2:	e002      	b.n	8002aea <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	10000012 	.word	0x10000012
 8002b0c:	40012000 	.word	0x40012000
 8002b10:	40012300 	.word	0x40012300
 8002b14:	20000000 	.word	0x20000000
 8002b18:	431bde83 	.word	0x431bde83

08002b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002b24:	4b78      	ldr	r3, [pc, #480]	@ (8002d08 <ADC_Init+0x1ec>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a77      	ldr	r2, [pc, #476]	@ (8002d08 <ADC_Init+0x1ec>)
 8002b2a:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8002b2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002b30:	4b75      	ldr	r3, [pc, #468]	@ (8002d08 <ADC_Init+0x1ec>)
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4973      	ldr	r1, [pc, #460]	@ (8002d08 <ADC_Init+0x1ec>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	021a      	lsls	r2, r3, #8
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6899      	ldr	r1, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	4a58      	ldr	r2, [pc, #352]	@ (8002d0c <ADC_Init+0x1f0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d022      	beq.n	8002bf6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6899      	ldr	r1, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	e00f      	b.n	8002c16 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002c14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0202 	bic.w	r2, r2, #2
 8002c24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6899      	ldr	r1, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	005a      	lsls	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	430a      	orrs	r2, r1
 8002c38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d01b      	beq.n	8002c7c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002c62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	6859      	ldr	r1, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	035a      	lsls	r2, r3, #13
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	e007      	b.n	8002c8c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	051a      	lsls	r2, r3, #20
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689a      	ldr	r2, [r3, #8]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	6899      	ldr	r1, [r3, #8]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002cce:	025a      	lsls	r2, r3, #9
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6899      	ldr	r1, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	029a      	lsls	r2, r3, #10
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	40012300 	.word	0x40012300
 8002d0c:	0f000001 	.word	0x0f000001

08002d10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d22:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d13c      	bne.n	8002da4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d12b      	bne.n	8002d9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d127      	bne.n	8002d9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d52:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d119      	bne.n	8002d9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0220 	bic.w	r2, r2, #32
 8002d76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f01c ffc9 	bl	801fd34 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002da2:	e00e      	b.n	8002dc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fd4f 	bl	8002854 <HAL_ADC_ErrorCallback>
}
 8002db6:	e004      	b.n	8002dc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
}
 8002dc2:	bf00      	nop
 8002dc4:	3710      	adds	r7, #16
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f7ff fd31 	bl	8002840 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b084      	sub	sp, #16
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002df2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2240      	movs	r2, #64	@ 0x40
 8002df8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dfe:	f043 0204 	orr.w	r2, r3, #4
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f7ff fd24 	bl	8002854 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e0c:	bf00      	nop
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e24:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x40>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <__NVIC_SetPriorityGrouping+0x44>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x40>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00
 8002e58:	05fa0000 	.word	0x05fa0000

08002e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <__NVIC_GetPriorityGrouping+0x18>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	0a1b      	lsrs	r3, r3, #8
 8002e66:	f003 0307 	and.w	r3, r3, #7
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	db0b      	blt.n	8002ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	f003 021f 	and.w	r2, r3, #31
 8002e90:	4907      	ldr	r1, [pc, #28]	@ (8002eb0 <__NVIC_EnableIRQ+0x38>)
 8002e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e96:	095b      	lsrs	r3, r3, #5
 8002e98:	2001      	movs	r0, #1
 8002e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e100 	.word	0xe000e100

08002eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	db0a      	blt.n	8002ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	b2da      	uxtb	r2, r3
 8002ecc:	490c      	ldr	r1, [pc, #48]	@ (8002f00 <__NVIC_SetPriority+0x4c>)
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	0112      	lsls	r2, r2, #4
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002edc:	e00a      	b.n	8002ef4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	4908      	ldr	r1, [pc, #32]	@ (8002f04 <__NVIC_SetPriority+0x50>)
 8002ee4:	79fb      	ldrb	r3, [r7, #7]
 8002ee6:	f003 030f 	and.w	r3, r3, #15
 8002eea:	3b04      	subs	r3, #4
 8002eec:	0112      	lsls	r2, r2, #4
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	761a      	strb	r2, [r3, #24]
}
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000e100 	.word	0xe000e100
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	@ 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0307 	and.w	r3, r3, #7
 8002f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	f1c3 0307 	rsb	r3, r3, #7
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	bf28      	it	cs
 8002f26:	2304      	movcs	r3, #4
 8002f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	2b06      	cmp	r3, #6
 8002f30:	d902      	bls.n	8002f38 <NVIC_EncodePriority+0x30>
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3b03      	subs	r3, #3
 8002f36:	e000      	b.n	8002f3a <NVIC_EncodePriority+0x32>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	43da      	mvns	r2, r3
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	43d9      	mvns	r1, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	4313      	orrs	r3, r2
         );
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3724      	adds	r7, #36	@ 0x24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff ff4c 	bl	8002e14 <__NVIC_SetPriorityGrouping>
}
 8002f7c:	bf00      	nop
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
 8002f90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f96:	f7ff ff61 	bl	8002e5c <__NVIC_GetPriorityGrouping>
 8002f9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	6978      	ldr	r0, [r7, #20]
 8002fa2:	f7ff ffb1 	bl	8002f08 <NVIC_EncodePriority>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff80 	bl	8002eb4 <__NVIC_SetPriority>
}
 8002fb4:	bf00      	nop
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7ff ff54 	bl	8002e78 <__NVIC_EnableIRQ>
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e054      	b.n	8003094 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7f5b      	ldrb	r3, [r3, #29]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7fd fbd4 	bl	80007a8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2202      	movs	r2, #2
 8003004:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	791b      	ldrb	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10c      	bne.n	8003028 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a22      	ldr	r2, [pc, #136]	@ (800309c <HAL_CRC_Init+0xc4>)
 8003014:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0218 	bic.w	r2, r2, #24
 8003024:	609a      	str	r2, [r3, #8]
 8003026:	e00c      	b.n	8003042 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	461a      	mov	r2, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f94c 	bl	80032d0 <HAL_CRCEx_Polynomial_Set>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e028      	b.n	8003094 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	795b      	ldrb	r3, [r3, #5]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d105      	bne.n	8003056 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003052:	611a      	str	r2, [r3, #16]
 8003054:	e004      	b.n	8003060 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6912      	ldr	r2, [r2, #16]
 800305e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	699a      	ldr	r2, [r3, #24]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	04c11db7 	.word	0x04c11db7

080030a0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80030ac:	2300      	movs	r3, #0
 80030ae:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2202      	movs	r2, #2
 80030b4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0201 	orr.w	r2, r2, #1
 80030c4:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d006      	beq.n	80030dc <HAL_CRC_Calculate+0x3c>
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d829      	bhi.n	8003126 <HAL_CRC_Calculate+0x86>
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d019      	beq.n	800310a <HAL_CRC_Calculate+0x6a>
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d01e      	beq.n	8003118 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80030da:	e024      	b.n	8003126 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e00a      	b.n	80030f8 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	441a      	add	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6812      	ldr	r2, [r2, #0]
 80030f0:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	3301      	adds	r3, #1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d3f0      	bcc.n	80030e2 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	613b      	str	r3, [r7, #16]
      break;
 8003108:	e00e      	b.n	8003128 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	f000 f812 	bl	8003138 <CRC_Handle_8>
 8003114:	6138      	str	r0, [r7, #16]
      break;
 8003116:	e007      	b.n	8003128 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f89d 	bl	800325c <CRC_Handle_16>
 8003122:	6138      	str	r0, [r7, #16]
      break;
 8003124:	e000      	b.n	8003128 <HAL_CRC_Calculate+0x88>
      break;
 8003126:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2201      	movs	r2, #1
 800312c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 800312e:	693b      	ldr	r3, [r7, #16]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3718      	adds	r7, #24
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}

08003138 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8003138:	b480      	push	{r7}
 800313a:	b089      	sub	sp, #36	@ 0x24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8003144:	2300      	movs	r3, #0
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	e023      	b.n	8003192 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	4413      	add	r3, r2
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	3301      	adds	r3, #1
 800315c:	68b9      	ldr	r1, [r7, #8]
 800315e:	440b      	add	r3, r1
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003164:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	440b      	add	r3, r1
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8003174:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	3303      	adds	r3, #3
 800317c:	68b9      	ldr	r1, [r7, #8]
 800317e:	440b      	add	r3, r1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8003188:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800318a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	3301      	adds	r3, #1
 8003190:	61fb      	str	r3, [r7, #28]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	69fa      	ldr	r2, [r7, #28]
 8003198:	429a      	cmp	r2, r3
 800319a:	d3d6      	bcc.n	800314a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d051      	beq.n	800324a <CRC_Handle_8+0x112>
  {
    if ((BufferLength % 4U) == 1U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d108      	bne.n	80031c2 <CRC_Handle_8+0x8a>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4413      	add	r3, r2
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	7013      	strb	r3, [r2, #0]
 80031c0:	e043      	b.n	800324a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 2U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d118      	bne.n	80031fe <CRC_Handle_8+0xc6>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	4413      	add	r3, r2
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	b21b      	sxth	r3, r3
 80031d8:	021b      	lsls	r3, r3, #8
 80031da:	b21a      	sxth	r2, r3
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	3301      	adds	r3, #1
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	440b      	add	r3, r1
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	b21b      	sxth	r3, r3
 80031ea:	4313      	orrs	r3, r2
 80031ec:	b21b      	sxth	r3, r3
 80031ee:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	8b7a      	ldrh	r2, [r7, #26]
 80031fa:	801a      	strh	r2, [r3, #0]
 80031fc:	e025      	b.n	800324a <CRC_Handle_8+0x112>
    }
    else if ((BufferLength % 4U) == 3U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f003 0303 	and.w	r3, r3, #3
 8003204:	2b03      	cmp	r3, #3
 8003206:	d120      	bne.n	800324a <CRC_Handle_8+0x112>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	4413      	add	r3, r2
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	b21b      	sxth	r3, r3
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	b21a      	sxth	r2, r3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	3301      	adds	r3, #1
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	440b      	add	r3, r1
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b21b      	sxth	r3, r3
 8003226:	4313      	orrs	r3, r2
 8003228:	b21b      	sxth	r3, r3
 800322a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	8b7a      	ldrh	r2, [r7, #26]
 8003236:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	7013      	strb	r3, [r2, #0]
      /* Nothing to do */
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3724      	adds	r7, #36	@ 0x24
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	e013      	b.n	8003296 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	68ba      	ldr	r2, [r7, #8]
 8003274:	4413      	add	r3, r2
 8003276:	881b      	ldrh	r3, [r3, #0]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	440b      	add	r3, r1
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	4619      	mov	r1, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3301      	adds	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	697a      	ldr	r2, [r7, #20]
 800329c:	429a      	cmp	r2, r3
 800329e:	d3e6      	bcc.n	800326e <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	4413      	add	r3, r2
 80032b8:	881a      	ldrh	r2, [r3, #0]
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	371c      	adds	r7, #28
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032e0:	231f      	movs	r3, #31
 80032e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d102      	bne.n	80032f4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	75fb      	strb	r3, [r7, #23]
 80032f2:	e063      	b.n	80033bc <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032f4:	bf00      	nop
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1e5a      	subs	r2, r3, #1
 80032fa:	613a      	str	r2, [r7, #16]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d009      	beq.n	8003314 <HAL_CRCEx_Polynomial_Set+0x44>
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	f003 031f 	and.w	r3, r3, #31
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2b18      	cmp	r3, #24
 8003318:	d846      	bhi.n	80033a8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800331a:	a201      	add	r2, pc, #4	@ (adr r2, 8003320 <HAL_CRCEx_Polynomial_Set+0x50>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	080033af 	.word	0x080033af
 8003324:	080033a9 	.word	0x080033a9
 8003328:	080033a9 	.word	0x080033a9
 800332c:	080033a9 	.word	0x080033a9
 8003330:	080033a9 	.word	0x080033a9
 8003334:	080033a9 	.word	0x080033a9
 8003338:	080033a9 	.word	0x080033a9
 800333c:	080033a9 	.word	0x080033a9
 8003340:	0800339d 	.word	0x0800339d
 8003344:	080033a9 	.word	0x080033a9
 8003348:	080033a9 	.word	0x080033a9
 800334c:	080033a9 	.word	0x080033a9
 8003350:	080033a9 	.word	0x080033a9
 8003354:	080033a9 	.word	0x080033a9
 8003358:	080033a9 	.word	0x080033a9
 800335c:	080033a9 	.word	0x080033a9
 8003360:	08003391 	.word	0x08003391
 8003364:	080033a9 	.word	0x080033a9
 8003368:	080033a9 	.word	0x080033a9
 800336c:	080033a9 	.word	0x080033a9
 8003370:	080033a9 	.word	0x080033a9
 8003374:	080033a9 	.word	0x080033a9
 8003378:	080033a9 	.word	0x080033a9
 800337c:	080033a9 	.word	0x080033a9
 8003380:	08003385 	.word	0x08003385
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	2b06      	cmp	r3, #6
 8003388:	d913      	bls.n	80033b2 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800338e:	e010      	b.n	80033b2 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b07      	cmp	r3, #7
 8003394:	d90f      	bls.n	80033b6 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800339a:	e00c      	b.n	80033b6 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	2b0f      	cmp	r3, #15
 80033a0:	d90b      	bls.n	80033ba <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80033a6:	e008      	b.n	80033ba <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	75fb      	strb	r3, [r7, #23]
        break;
 80033ac:	e006      	b.n	80033bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033ae:	bf00      	nop
 80033b0:	e004      	b.n	80033bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033b2:	bf00      	nop
 80033b4:	e002      	b.n	80033bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033b6:	bf00      	nop
 80033b8:	e000      	b.n	80033bc <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80033ba:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80033bc:	7dfb      	ldrb	r3, [r7, #23]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10d      	bne.n	80033de <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f023 0118 	bic.w	r1, r3, #24
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033de:	7dfb      	ldrb	r3, [r7, #23]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	371c      	adds	r7, #28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033f4:	2300      	movs	r3, #0
 80033f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033f8:	f7ff f856 	bl	80024a8 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e099      	b.n	800353c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f022 0201 	bic.w	r2, r2, #1
 8003426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003428:	e00f      	b.n	800344a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800342a:	f7ff f83d 	bl	80024a8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b05      	cmp	r3, #5
 8003436:	d908      	bls.n	800344a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2220      	movs	r2, #32
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2203      	movs	r2, #3
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e078      	b.n	800353c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1e8      	bne.n	800342a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003460:	697a      	ldr	r2, [r7, #20]
 8003462:	4b38      	ldr	r3, [pc, #224]	@ (8003544 <HAL_DMA_Init+0x158>)
 8003464:	4013      	ands	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d107      	bne.n	80034b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ac:	4313      	orrs	r3, r2
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f023 0307 	bic.w	r3, r3, #7
 80034ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d117      	bne.n	800350e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00e      	beq.n	800350e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fb23 	bl	8003b3c <DMA_CheckFifoParam>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2240      	movs	r2, #64	@ 0x40
 8003500:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800350a:	2301      	movs	r3, #1
 800350c:	e016      	b.n	800353c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 fada 	bl	8003ad0 <DMA_CalcBaseAndBitshift>
 800351c:	4603      	mov	r3, r0
 800351e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003524:	223f      	movs	r2, #63	@ 0x3f
 8003526:	409a      	lsls	r2, r3
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	f010803f 	.word	0xf010803f

08003548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
 8003554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800355e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003566:	2b01      	cmp	r3, #1
 8003568:	d101      	bne.n	800356e <HAL_DMA_Start_IT+0x26>
 800356a:	2302      	movs	r3, #2
 800356c:	e048      	b.n	8003600 <HAL_DMA_Start_IT+0xb8>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d137      	bne.n	80035f2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2202      	movs	r2, #2
 8003586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 fa6c 	bl	8003a74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a0:	223f      	movs	r2, #63	@ 0x3f
 80035a2:	409a      	lsls	r2, r3
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0216 	orr.w	r2, r2, #22
 80035b6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035c6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d007      	beq.n	80035e0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0208 	orr.w	r2, r2, #8
 80035de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e005      	b.n	80035fe <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035fa:	2302      	movs	r3, #2
 80035fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3718      	adds	r7, #24
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003614:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003616:	f7fe ff47 	bl	80024a8 <HAL_GetTick>
 800361a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d008      	beq.n	800363a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2280      	movs	r2, #128	@ 0x80
 800362c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e052      	b.n	80036e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 0216 	bic.w	r2, r2, #22
 8003648:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	695a      	ldr	r2, [r3, #20]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003658:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d103      	bne.n	800366a <HAL_DMA_Abort+0x62>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003666:	2b00      	cmp	r3, #0
 8003668:	d007      	beq.n	800367a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f022 0208 	bic.w	r2, r2, #8
 8003678:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0201 	bic.w	r2, r2, #1
 8003688:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800368a:	e013      	b.n	80036b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800368c:	f7fe ff0c 	bl	80024a8 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b05      	cmp	r3, #5
 8003698:	d90c      	bls.n	80036b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2203      	movs	r2, #3
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e015      	b.n	80036e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e4      	bne.n	800368c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c6:	223f      	movs	r2, #63	@ 0x3f
 80036c8:	409a      	lsls	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d004      	beq.n	8003706 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2280      	movs	r2, #128	@ 0x80
 8003700:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e00c      	b.n	8003720 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2205      	movs	r2, #5
 800370a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0201 	bic.w	r2, r2, #1
 800371c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003738:	4b8e      	ldr	r3, [pc, #568]	@ (8003974 <HAL_DMA_IRQHandler+0x248>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a8e      	ldr	r2, [pc, #568]	@ (8003978 <HAL_DMA_IRQHandler+0x24c>)
 800373e:	fba2 2303 	umull	r2, r3, r2, r3
 8003742:	0a9b      	lsrs	r3, r3, #10
 8003744:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003756:	2208      	movs	r2, #8
 8003758:	409a      	lsls	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01a      	beq.n	8003798 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f022 0204 	bic.w	r2, r2, #4
 800377e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003784:	2208      	movs	r2, #8
 8003786:	409a      	lsls	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	f043 0201 	orr.w	r2, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	2201      	movs	r2, #1
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	4013      	ands	r3, r2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d012      	beq.n	80037ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ba:	2201      	movs	r2, #1
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c6:	f043 0202 	orr.w	r2, r3, #2
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037d2:	2204      	movs	r2, #4
 80037d4:	409a      	lsls	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d012      	beq.n	8003804 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0302 	and.w	r3, r3, #2
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d00b      	beq.n	8003804 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f0:	2204      	movs	r2, #4
 80037f2:	409a      	lsls	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037fc:	f043 0204 	orr.w	r2, r3, #4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003808:	2210      	movs	r2, #16
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d043      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d03c      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003826:	2210      	movs	r2, #16
 8003828:	409a      	lsls	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003838:	2b00      	cmp	r3, #0
 800383a:	d018      	beq.n	800386e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d108      	bne.n	800385c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384e:	2b00      	cmp	r3, #0
 8003850:	d024      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e01f      	b.n	800389c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e016      	b.n	800389c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d107      	bne.n	800388c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0208 	bic.w	r2, r2, #8
 800388a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a0:	2220      	movs	r2, #32
 80038a2:	409a      	lsls	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4013      	ands	r3, r2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 808f 	beq.w	80039cc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0310 	and.w	r3, r3, #16
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 8087 	beq.w	80039cc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c2:	2220      	movs	r2, #32
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b05      	cmp	r3, #5
 80038d4:	d136      	bne.n	8003944 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0216 	bic.w	r2, r2, #22
 80038e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_DMA_IRQHandler+0x1da>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800391a:	223f      	movs	r2, #63	@ 0x3f
 800391c:	409a      	lsls	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d07e      	beq.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
        }
        return;
 8003942:	e079      	b.n	8003a38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01d      	beq.n	800398e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10d      	bne.n	800397c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003964:	2b00      	cmp	r3, #0
 8003966:	d031      	beq.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	4798      	blx	r3
 8003970:	e02c      	b.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000
 8003978:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d023      	beq.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
 800398c:	e01e      	b.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f022 0210 	bic.w	r2, r2, #16
 80039aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d032      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d022      	beq.n	8003a26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2205      	movs	r2, #5
 80039e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0201 	bic.w	r2, r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3301      	adds	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	697a      	ldr	r2, [r7, #20]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d307      	bcc.n	8003a14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f2      	bne.n	80039f8 <HAL_DMA_IRQHandler+0x2cc>
 8003a12:	e000      	b.n	8003a16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
 8003a36:	e000      	b.n	8003a3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003a38:	bf00      	nop
    }
  }
}
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a4e:	b2db      	uxtb	r3, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003a90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b40      	cmp	r3, #64	@ 0x40
 8003aa0:	d108      	bne.n	8003ab4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ab2:	e007      	b.n	8003ac4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68ba      	ldr	r2, [r7, #8]
 8003aba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	60da      	str	r2, [r3, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	3b10      	subs	r3, #16
 8003ae0:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <DMA_CalcBaseAndBitshift+0x60>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	091b      	lsrs	r3, r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aea:	4a12      	ldr	r2, [pc, #72]	@ (8003b34 <DMA_CalcBaseAndBitshift+0x64>)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d908      	bls.n	8003b10 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b0c      	ldr	r3, [pc, #48]	@ (8003b38 <DMA_CalcBaseAndBitshift+0x68>)
 8003b06:	4013      	ands	r3, r2
 8003b08:	1d1a      	adds	r2, r3, #4
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b0e:	e006      	b.n	8003b1e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	4b08      	ldr	r3, [pc, #32]	@ (8003b38 <DMA_CalcBaseAndBitshift+0x68>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	aaaaaaab 	.word	0xaaaaaaab
 8003b34:	08026c24 	.word	0x08026c24
 8003b38:	fffffc00 	.word	0xfffffc00

08003b3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d11f      	bne.n	8003b96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d856      	bhi.n	8003c0a <DMA_CheckFifoParam+0xce>
 8003b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <DMA_CheckFifoParam+0x28>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003b75 	.word	0x08003b75
 8003b68:	08003b87 	.word	0x08003b87
 8003b6c:	08003b75 	.word	0x08003b75
 8003b70:	08003c0b 	.word	0x08003c0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d046      	beq.n	8003c0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b84:	e043      	b.n	8003c0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003b8e:	d140      	bne.n	8003c12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e03d      	b.n	8003c12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b9e:	d121      	bne.n	8003be4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d837      	bhi.n	8003c16 <DMA_CheckFifoParam+0xda>
 8003ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <DMA_CheckFifoParam+0x70>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bbd 	.word	0x08003bbd
 8003bb0:	08003bc3 	.word	0x08003bc3
 8003bb4:	08003bbd 	.word	0x08003bbd
 8003bb8:	08003bd5 	.word	0x08003bd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc0:	e030      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d025      	beq.n	8003c1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd2:	e022      	b.n	8003c1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bdc:	d11f      	bne.n	8003c1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003be2:	e01c      	b.n	8003c1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d903      	bls.n	8003bf2 <DMA_CheckFifoParam+0xb6>
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2b03      	cmp	r3, #3
 8003bee:	d003      	beq.n	8003bf8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bf0:	e018      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf6:	e015      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00e      	beq.n	8003c22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e00b      	b.n	8003c22 <DMA_CheckFifoParam+0xe6>
      break;
 8003c0a:	bf00      	nop
 8003c0c:	e00a      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c0e:	bf00      	nop
 8003c10:	e008      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c12:	bf00      	nop
 8003c14:	e006      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c16:	bf00      	nop
 8003c18:	e004      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c1a:	bf00      	nop
 8003c1c:	e002      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c1e:	bf00      	nop
 8003c20:	e000      	b.n	8003c24 <DMA_CheckFifoParam+0xe8>
      break;
 8003c22:	bf00      	nop
    }
  } 
  
  return status; 
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop

08003c34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e086      	b.n	8003d54 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f008 fd3d 	bl	800c6d8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d5c <HAL_ETH_Init+0x128>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	4a3e      	ldr	r2, [pc, #248]	@ (8003d5c <HAL_ETH_Init+0x128>)
 8003c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d5c <HAL_ETH_Init+0x128>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003c76:	4b3a      	ldr	r3, [pc, #232]	@ (8003d60 <HAL_ETH_Init+0x12c>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4a39      	ldr	r2, [pc, #228]	@ (8003d60 <HAL_ETH_Init+0x12c>)
 8003c7c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003c80:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003c82:	4b37      	ldr	r3, [pc, #220]	@ (8003d60 <HAL_ETH_Init+0x12c>)
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4935      	ldr	r1, [pc, #212]	@ (8003d60 <HAL_ETH_Init+0x12c>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8003c90:	4b33      	ldr	r3, [pc, #204]	@ (8003d60 <HAL_ETH_Init+0x12c>)
 8003c92:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003caa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003cac:	f7fe fbfc 	bl	80024a8 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cb2:	e011      	b.n	8003cd8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003cb4:	f7fe fbf8 	bl	80024a8 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003cc2:	d909      	bls.n	8003cd8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	22e0      	movs	r2, #224	@ 0xe0
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e03d      	b.n	8003d54 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e4      	bne.n	8003cb4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 ff5c 	bl	8004ba8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f001 f807 	bl	8004d04 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f001 f85d 	bl	8004db6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	461a      	mov	r2, r3
 8003d02:	2100      	movs	r1, #0
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 ffc5 	bl	8004c94 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003d18:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	4b0f      	ldr	r3, [pc, #60]	@ (8003d64 <HAL_ETH_Init+0x130>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003d3e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40013800 	.word	0x40013800
 8003d64:	00020060 	.word	0x00020060

08003d68 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d76:	2b10      	cmp	r3, #16
 8003d78:	d15f      	bne.n	8003e3a <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2220      	movs	r2, #32
 8003d7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9f6 	bl	8004180 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f7fe fb8f 	bl	80024c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003dbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dc0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6812      	ldr	r2, [r2, #0]
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003dd8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 fd80 	bl	80048e0 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0208 	orr.w	r2, r2, #8
 8003dee:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f7fe fb61 	bl	80024c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0204 	orr.w	r2, r2, #4
 8003e14:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <HAL_ETH_Start_IT+0xdc>)
 8003e26:	430b      	orrs	r3, r1
 8003e28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e2c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2240      	movs	r2, #64	@ 0x40
 8003e32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
  }
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	0001a0c1 	.word	0x0001a0c1

08003e48 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e56:	2b40      	cmp	r3, #64	@ 0x40
 8003e58:	d16e      	bne.n	8003f38 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e6a:	69d9      	ldr	r1, [r3, #28]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b34      	ldr	r3, [pc, #208]	@ (8003f44 <HAL_ETH_Stop_IT+0xfc>)
 8003e72:	400b      	ands	r3, r1
 8003e74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e78:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003e90:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6812      	ldr	r2, [r2, #0]
 8003ea0:	f023 0302 	bic.w	r3, r3, #2
 8003ea4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003ea8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0204 	bic.w	r2, r2, #4
 8003eb8:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	f7fe fafc 	bl	80024c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fd05 	bl	80048e0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f022 0208 	bic.w	r2, r2, #8
 8003ee4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003eee:	2001      	movs	r0, #1
 8003ef0:	f7fe fae6 	bl	80024c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e00e      	b.n	8003f20 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	3212      	adds	r2, #18
 8003f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d9ed      	bls.n	8003f02 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2210      	movs	r2, #16
 8003f30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	e000      	b.n	8003f3a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
  }
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3718      	adds	r7, #24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	fffe5f3e 	.word	0xfffe5f3e

08003f48 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d109      	bne.n	8003f6c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f5e:	f043 0201 	orr.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e045      	b.n	8003ff8 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d13f      	bne.n	8003ff6 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	6839      	ldr	r1, [r7, #0]
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 ff86 	bl	8004e94 <ETH_Prepare_Tx_Descriptors>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d009      	beq.n	8003fa2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f94:	f043 0202 	orr.w	r2, r3, #2
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e02a      	b.n	8003ff8 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fa2:	f3bf 8f4f 	dsb	sy
}
 8003fa6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb6:	2b03      	cmp	r3, #3
 8003fb8:	d904      	bls.n	8003fc4 <HAL_ETH_Transmit_IT+0x7c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	1f1a      	subs	r2, r3, #4
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fde:	461a      	mov	r2, r3
 8003fe0:	2304      	movs	r3, #4
 8003fe2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003fec:	461a      	mov	r2, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d109      	bne.n	800402c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800401e:	f043 0201 	orr.w	r2, r3, #1
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0a4      	b.n	8004176 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004032:	2b40      	cmp	r3, #64	@ 0x40
 8004034:	d001      	beq.n	800403a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e09d      	b.n	8004176 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69fa      	ldr	r2, [r7, #28]
 8004044:	3212      	adds	r2, #18
 8004046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800404a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004050:	f1c3 0304 	rsb	r3, r3, #4
 8004054:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004056:	e066      	b.n	8004126 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d007      	beq.n	8004074 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	699a      	ldr	r2, [r3, #24]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800407c:	2b00      	cmp	r3, #0
 800407e:	d103      	bne.n	8004088 <HAL_ETH_ReadData+0x88>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d03c      	beq.n	8004102 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2200      	movs	r2, #0
 8004098:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	0c1b      	lsrs	r3, r3, #16
 80040a6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80040aa:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80040c0:	2301      	movs	r3, #1
 80040c2:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80040dc:	461a      	mov	r2, r3
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f008 fccd 	bl	800ca80 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ea:	1c5a      	adds	r2, r3, #1
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	441a      	add	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	2200      	movs	r2, #0
 8004100:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	3301      	adds	r3, #1
 8004106:	61fb      	str	r3, [r7, #28]
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d902      	bls.n	8004114 <HAL_ETH_ReadData+0x114>
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3b04      	subs	r3, #4
 8004112:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69fa      	ldr	r2, [r7, #28]
 8004118:	3212      	adds	r2, #18
 800411a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	3301      	adds	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800412a:	2b00      	cmp	r3, #0
 800412c:	db06      	blt.n	800413c <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	429a      	cmp	r2, r3
 8004134:	d202      	bcs.n	800413c <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d08d      	beq.n	8004058 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800414c:	2b00      	cmp	r3, #0
 800414e:	d002      	beq.n	8004156 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f815 	bl	8004180 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800415c:	7cfb      	ldrb	r3, [r7, #19]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d108      	bne.n	8004174 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004174:	2301      	movs	r3, #1
}
 8004176:	4618      	mov	r0, r3
 8004178:	3720      	adds	r7, #32
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b088      	sub	sp, #32
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800418c:	2301      	movs	r3, #1
 800418e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004194:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69fa      	ldr	r2, [r7, #28]
 800419a:	3212      	adds	r2, #18
 800419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80041a8:	e042      	b.n	8004230 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d112      	bne.n	80041d8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80041b2:	f107 0308 	add.w	r3, r7, #8
 80041b6:	4618      	mov	r0, r3
 80041b8:	f008 fc32 	bl	800ca20 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d102      	bne.n	80041c8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80041c2:	2300      	movs	r3, #0
 80041c4:	74fb      	strb	r3, [r7, #19]
 80041c6:	e007      	b.n	80041d8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	461a      	mov	r2, r3
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	461a      	mov	r2, r3
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d028      	beq.n	8004230 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d106      	bne.n	80041f4 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695a      	ldr	r2, [r3, #20]
 80041ea:	4b26      	ldr	r3, [pc, #152]	@ (8004284 <ETH_UpdateDescriptor+0x104>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	6053      	str	r3, [r2, #4]
 80041f2:	e005      	b.n	8004200 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	3301      	adds	r3, #1
 8004210:	61fb      	str	r3, [r7, #28]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	2b03      	cmp	r3, #3
 8004216:	d902      	bls.n	800421e <ETH_UpdateDescriptor+0x9e>
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3b04      	subs	r3, #4
 800421c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	69fa      	ldr	r2, [r7, #28]
 8004222:	3212      	adds	r2, #18
 8004224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004228:	617b      	str	r3, [r7, #20]
      desccount--;
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	3b01      	subs	r3, #1
 800422e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <ETH_UpdateDescriptor+0xbc>
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1b6      	bne.n	80041aa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	429a      	cmp	r2, r3
 8004244:	d01a      	beq.n	800427c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	3303      	adds	r3, #3
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004250:	f3bf 8f5f 	dmb	sy
}
 8004254:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6919      	ldr	r1, [r3, #16]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	00db      	lsls	r3, r3, #3
 8004264:	18ca      	adds	r2, r1, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800426e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	69fa      	ldr	r2, [r7, #28]
 8004274:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800427c:	bf00      	nop
 800427e:	3720      	adds	r7, #32
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	80004000 	.word	0x80004000

08004288 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3318      	adds	r3, #24
 8004294:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80042a6:	e047      	b.n	8004338 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80042a8:	2301      	movs	r3, #1
 80042aa:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	3304      	adds	r3, #4
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	3301      	adds	r3, #1
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	2b03      	cmp	r3, #3
 80042cc:	d902      	bls.n	80042d4 <HAL_ETH_ReleaseTxPacket+0x4c>
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	3b04      	subs	r3, #4
 80042d2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80042d8:	7bbb      	ldrb	r3, [r7, #14]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d02c      	beq.n	8004338 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68d9      	ldr	r1, [r3, #12]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4613      	mov	r3, r2
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	4413      	add	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	440b      	add	r3, r1
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db1f      	blt.n	8004334 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	3304      	adds	r3, #4
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4618      	mov	r0, r3
 8004302:	f008 fbff 	bl	800cb04 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004306:	68ba      	ldr	r2, [r7, #8]
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	3304      	adds	r3, #4
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	2200      	movs	r2, #0
 8004312:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	3301      	adds	r3, #1
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d902      	bls.n	8004326 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3b04      	subs	r3, #4
 8004324:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004332:	e001      	b.n	8004338 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_ETH_ReleaseTxPacket+0xbc>
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1b1      	bne.n	80042a8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004378:	4b4b      	ldr	r3, [pc, #300]	@ (80044a8 <HAL_ETH_IRQHandler+0x158>)
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <HAL_ETH_IRQHandler+0x56>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800439a:	461a      	mov	r2, r3
 800439c:	4b43      	ldr	r3, [pc, #268]	@ (80044ac <HAL_ETH_IRQHandler+0x15c>)
 800439e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f007 fed9 	bl	800c158 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00f      	beq.n	80043d0 <HAL_ETH_IRQHandler+0x80>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043c2:	461a      	mov	r2, r3
 80043c4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80043c8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f007 fed4 	bl	800c178 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d042      	beq.n	8004460 <HAL_ETH_IRQHandler+0x110>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d03d      	beq.n	8004460 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ea:	f043 0208 	orr.w	r2, r3, #8
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01a      	beq.n	8004434 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	4b29      	ldr	r3, [pc, #164]	@ (80044b0 <HAL_ETH_IRQHandler+0x160>)
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6812      	ldr	r2, [r2, #0]
 8004420:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8004424:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004428:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	22e0      	movs	r2, #224	@ 0xe0
 800442e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004432:	e012      	b.n	800445a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800443c:	695a      	ldr	r2, [r3, #20]
 800443e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004442:	4013      	ands	r3, r2
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004452:	461a      	mov	r2, r3
 8004454:	f248 6380 	movw	r3, #34432	@ 0x8680
 8004458:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f007 fe9c 	bl	800c198 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00e      	beq.n	8004488 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f81a 	bl	80044b4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004492:	4b05      	ldr	r3, [pc, #20]	@ (80044a8 <HAL_ETH_IRQHandler+0x158>)
 8004494:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004498:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f814 	bl	80044c8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80044a0:	bf00      	nop
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40013c00 	.word	0x40013c00
 80044ac:	00010040 	.word	0x00010040
 80044b0:	007e2000 	.word	0x007e2000

080044b4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f003 031c 	and.w	r3, r3, #28
 80044f8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	02db      	lsls	r3, r3, #11
 80044fe:	b29b      	uxth	r3, r3
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	019b      	lsls	r3, r3, #6
 800450a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f023 0302 	bic.w	r3, r3, #2
 800451a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800452c:	f7fd ffbc 	bl	80024a8 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004532:	e00d      	b.n	8004550 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004534:	f7fd ffb8 	bl	80024a8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004542:	d301      	bcc.n	8004548 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e010      	b.n	800456a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1ec      	bne.n	8004534 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	b29b      	uxth	r3, r3
 8004562:	461a      	mov	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60f8      	str	r0, [r7, #12]
 800457a:	60b9      	str	r1, [r7, #8]
 800457c:	607a      	str	r2, [r7, #4]
 800457e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f003 031c 	and.w	r3, r3, #28
 800458e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	02db      	lsls	r3, r3, #11
 8004594:	b29b      	uxth	r3, r3
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	019b      	lsls	r3, r3, #6
 80045a0:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f043 0302 	orr.w	r3, r3, #2
 80045b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045cc:	f7fd ff6c 	bl	80024a8 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045d2:	e00d      	b.n	80045f0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80045d4:	f7fd ff68 	bl	80024a8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e2:	d301      	bcc.n	80045e8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e009      	b.n	80045fc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ec      	bne.n	80045d4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e0e6      	b.n	80047e6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0310 	and.w	r3, r3, #16
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf14      	ite	ne
 8004626:	2301      	movne	r3, #1
 8004628:	2300      	moveq	r3, #0
 800462a:	b2db      	uxtb	r3, r3
 800462c:	461a      	mov	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800464c:	2b00      	cmp	r3, #0
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf14      	ite	ne
 800466c:	2301      	movne	r3, #1
 800466e:	2300      	moveq	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004682:	2b00      	cmp	r3, #0
 8004684:	bf0c      	ite	eq
 8004686:	2301      	moveq	r3, #1
 8004688:	2300      	movne	r3, #0
 800468a:	b2db      	uxtb	r3, r3
 800468c:	461a      	mov	r2, r3
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800469c:	2b00      	cmp	r3, #0
 800469e:	bf14      	ite	ne
 80046a0:	2301      	movne	r3, #1
 80046a2:	2300      	moveq	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf0c      	ite	eq
 80046d6:	2301      	moveq	r3, #1
 80046d8:	2300      	movne	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf0c      	ite	eq
 80046f0:	2301      	moveq	r3, #1
 80046f2:	2300      	movne	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	461a      	mov	r2, r3
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800472e:	2b00      	cmp	r3, #0
 8004730:	bf14      	ite	ne
 8004732:	2301      	movne	r3, #1
 8004734:	2300      	moveq	r3, #0
 8004736:	b2db      	uxtb	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	bf14      	ite	ne
 800474c:	2301      	movne	r3, #1
 800474e:	2300      	moveq	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	0c1b      	lsrs	r3, r3, #16
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	bf14      	ite	ne
 80047ba:	2301      	movne	r3, #1
 80047bc:	2300      	moveq	r3, #0
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	461a      	mov	r2, r3
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	bf14      	ite	ne
 80047d6:	2301      	movne	r3, #1
 80047d8:	2300      	moveq	r3, #0
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e00b      	b.n	800481e <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800480c:	2b10      	cmp	r3, #16
 800480e:	d105      	bne.n	800481c <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f88a 	bl	800492c <ETH_SetMACConfig>

    return HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e000      	b.n	800481e <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
  }
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f023 031c 	bic.w	r3, r3, #28
 800483e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004840:	f003 fd04 	bl	800824c <HAL_RCC_GetHCLKFreq>
 8004844:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	4a14      	ldr	r2, [pc, #80]	@ (800489c <HAL_ETH_SetMDIOClockRange+0x74>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d804      	bhi.n	8004858 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	60fb      	str	r3, [r7, #12]
 8004856:	e019      	b.n	800488c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	4a11      	ldr	r2, [pc, #68]	@ (80048a0 <HAL_ETH_SetMDIOClockRange+0x78>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d204      	bcs.n	800486a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f043 030c 	orr.w	r3, r3, #12
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e010      	b.n	800488c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4a0d      	ldr	r2, [pc, #52]	@ (80048a4 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d90c      	bls.n	800488c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	4a0c      	ldr	r2, [pc, #48]	@ (80048a8 <HAL_ETH_SetMDIOClockRange+0x80>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d804      	bhi.n	8004884 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f043 0304 	orr.w	r3, r3, #4
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	e003      	b.n	800488c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f043 0310 	orr.w	r3, r3, #16
 800488a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	611a      	str	r2, [r3, #16]
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	02160ebf 	.word	0x02160ebf
 80048a0:	03938700 	.word	0x03938700
 80048a4:	05f5e0ff 	.word	0x05f5e0ff
 80048a8:	08f0d17f 	.word	0x08f0d17f

080048ac <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b083      	sub	sp, #12
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004902:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004910:	2001      	movs	r0, #1
 8004912:	f7fd fdd5 	bl	80024c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004920:	6193      	str	r3, [r2, #24]
}
 8004922:	bf00      	nop
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4b53      	ldr	r3, [pc, #332]	@ (8004a90 <ETH_SetMACConfig+0x164>)
 8004942:	4013      	ands	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	7b9b      	ldrb	r3, [r3, #14]
 800494a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	7c12      	ldrb	r2, [r2, #16]
 8004950:	2a00      	cmp	r2, #0
 8004952:	d102      	bne.n	800495a <ETH_SetMACConfig+0x2e>
 8004954:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8004958:	e000      	b.n	800495c <ETH_SetMACConfig+0x30>
 800495a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800495c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	7c52      	ldrb	r2, [r2, #17]
 8004962:	2a00      	cmp	r2, #0
 8004964:	d102      	bne.n	800496c <ETH_SetMACConfig+0x40>
 8004966:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800496a:	e000      	b.n	800496e <ETH_SetMACConfig+0x42>
 800496c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800496e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8004974:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	7fdb      	ldrb	r3, [r3, #31]
 800497a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800497c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8004982:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	7f92      	ldrb	r2, [r2, #30]
 8004988:	2a00      	cmp	r2, #0
 800498a:	d102      	bne.n	8004992 <ETH_SetMACConfig+0x66>
 800498c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004990:	e000      	b.n	8004994 <ETH_SetMACConfig+0x68>
 8004992:	2200      	movs	r2, #0
                        macconf->Speed |
 8004994:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	7f1b      	ldrb	r3, [r3, #28]
 800499a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800499c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80049a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	791b      	ldrb	r3, [r3, #4]
 80049a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80049aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80049b2:	2a00      	cmp	r2, #0
 80049b4:	d102      	bne.n	80049bc <ETH_SetMACConfig+0x90>
 80049b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049ba:	e000      	b.n	80049be <ETH_SetMACConfig+0x92>
 80049bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80049be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	7bdb      	ldrb	r3, [r3, #15]
 80049c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80049c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80049cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80049d6:	4313      	orrs	r3, r2
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80049ee:	2001      	movs	r0, #1
 80049f0:	f7fd fd66 	bl	80024c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a12:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	d101      	bne.n	8004a22 <ETH_SetMACConfig+0xf6>
 8004a1e:	2280      	movs	r2, #128	@ 0x80
 8004a20:	e000      	b.n	8004a24 <ETH_SetMACConfig+0xf8>
 8004a22:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a24:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004a2a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a2c:	683a      	ldr	r2, [r7, #0]
 8004a2e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8004a32:	2a01      	cmp	r2, #1
 8004a34:	d101      	bne.n	8004a3a <ETH_SetMACConfig+0x10e>
 8004a36:	2208      	movs	r2, #8
 8004a38:	e000      	b.n	8004a3c <ETH_SetMACConfig+0x110>
 8004a3a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004a3c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004a44:	2a01      	cmp	r2, #1
 8004a46:	d101      	bne.n	8004a4c <ETH_SetMACConfig+0x120>
 8004a48:	2204      	movs	r2, #4
 8004a4a:	e000      	b.n	8004a4e <ETH_SetMACConfig+0x122>
 8004a4c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004a4e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004a56:	2a01      	cmp	r2, #1
 8004a58:	d101      	bne.n	8004a5e <ETH_SetMACConfig+0x132>
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	e000      	b.n	8004a60 <ETH_SetMACConfig+0x134>
 8004a5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004a60:	4313      	orrs	r3, r2
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a78:	2001      	movs	r0, #1
 8004a7a:	f7fd fd21 	bl	80024c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	619a      	str	r2, [r3, #24]
}
 8004a86:	bf00      	nop
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	fd20810f 	.word	0xfd20810f

08004a94 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4b3d      	ldr	r3, [pc, #244]	@ (8004ba4 <ETH_SetDMAConfig+0x110>)
 8004aae:	4013      	ands	r3, r2
 8004ab0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	7b1b      	ldrb	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <ETH_SetDMAConfig+0x2c>
 8004aba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004abe:	e000      	b.n	8004ac2 <ETH_SetDMAConfig+0x2e>
 8004ac0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	7b5b      	ldrb	r3, [r3, #13]
 8004ac6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004ac8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004aca:	683a      	ldr	r2, [r7, #0]
 8004acc:	7f52      	ldrb	r2, [r2, #29]
 8004ace:	2a00      	cmp	r2, #0
 8004ad0:	d102      	bne.n	8004ad8 <ETH_SetDMAConfig+0x44>
 8004ad2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ad6:	e000      	b.n	8004ada <ETH_SetDMAConfig+0x46>
 8004ad8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8004ada:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	7b9b      	ldrb	r3, [r3, #14]
 8004ae0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8004ae2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8004ae8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	7f1b      	ldrb	r3, [r3, #28]
 8004aee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8004af0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	7f9b      	ldrb	r3, [r3, #30]
 8004af6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004af8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8004afe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004b06:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b18:	461a      	mov	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b2a:	2001      	movs	r0, #1
 8004b2c:	f7fd fcc8 	bl	80024c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	791b      	ldrb	r3, [r3, #4]
 8004b42:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b48:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8004b4e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004b54:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004b5c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8004b5e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b64:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004b66:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004b6c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	6812      	ldr	r2, [r2, #0]
 8004b72:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004b76:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004b7a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b88:	2001      	movs	r0, #1
 8004b8a:	f7fd fc99 	bl	80024c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6013      	str	r3, [r2, #0]
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	f8de3f23 	.word	0xf8de3f23

08004ba8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b0a6      	sub	sp, #152	@ 0x98
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8004bde:	2300      	movs	r3, #0
 8004be0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8004be4:	2300      	movs	r3, #0
 8004be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004bea:	2300      	movs	r3, #0
 8004bec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c10:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004c14:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004c16:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c22:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fe7f 	bl	800492c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8004c32:	2301      	movs	r3, #1
 8004c34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004c40:	2300      	movs	r3, #0
 8004c42:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004c50:	2300      	movs	r3, #0
 8004c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c5e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004c62:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c64:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c68:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c6a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c6e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c7e:	f107 0308 	add.w	r3, r7, #8
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ff05 	bl	8004a94 <ETH_SetDMAConfig>
}
 8004c8a:	bf00      	nop
 8004c8c:	3798      	adds	r7, #152	@ 0x98
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3305      	adds	r3, #5
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	3204      	adds	r2, #4
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	4b11      	ldr	r3, [pc, #68]	@ (8004cfc <ETH_MACAddressConfig+0x68>)
 8004cb6:	4413      	add	r3, r2
 8004cb8:	461a      	mov	r2, r3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3303      	adds	r3, #3
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	061a      	lsls	r2, r3, #24
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3302      	adds	r3, #2
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	041b      	lsls	r3, r3, #16
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	7812      	ldrb	r2, [r2, #0]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8004ce2:	68ba      	ldr	r2, [r7, #8]
 8004ce4:	4b06      	ldr	r3, [pc, #24]	@ (8004d00 <ETH_MACAddressConfig+0x6c>)
 8004ce6:	4413      	add	r3, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	6013      	str	r3, [r2, #0]
}
 8004cee:	bf00      	nop
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40028040 	.word	0x40028040
 8004d00:	40028044 	.word	0x40028044

08004d04 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b085      	sub	sp, #20
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	e03e      	b.n	8004d90 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	68d9      	ldr	r1, [r3, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	440b      	add	r3, r1
 8004d22:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2200      	movs	r2, #0
 8004d34:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	3206      	adds	r2, #6
 8004d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d80c      	bhi.n	8004d74 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68d9      	ldr	r1, [r3, #12]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	440b      	add	r3, r1
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	60da      	str	r2, [r3, #12]
 8004d72:	e004      	b.n	8004d7e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	461a      	mov	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b03      	cmp	r3, #3
 8004d94:	d9bd      	bls.n	8004d12 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004da8:	611a      	str	r2, [r3, #16]
}
 8004daa:	bf00      	nop
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004db6:	b480      	push	{r7}
 8004db8:	b085      	sub	sp, #20
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	e048      	b.n	8004e56 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6919      	ldr	r1, [r3, #16]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	00db      	lsls	r3, r3, #3
 8004dd2:	440b      	add	r3, r1
 8004dd4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	2200      	movs	r2, #0
 8004de0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2200      	movs	r2, #0
 8004de6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2200      	movs	r2, #0
 8004df2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2200      	movs	r2, #0
 8004df8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004e00:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004e1a:	68b9      	ldr	r1, [r7, #8]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	3212      	adds	r2, #18
 8004e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d80c      	bhi.n	8004e46 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6919      	ldr	r1, [r3, #16]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	1c5a      	adds	r2, r3, #1
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	440b      	add	r3, r1
 8004e3e:	461a      	mov	r2, r3
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	60da      	str	r2, [r3, #12]
 8004e44:	e004      	b.n	8004e50 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d9b3      	bls.n	8004dc4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e86:	60da      	str	r2, [r3, #12]
}
 8004e88:	bf00      	nop
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b091      	sub	sp, #68	@ 0x44
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3318      	adds	r3, #24
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebe:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ed6:	d007      	beq.n	8004ee8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004ed8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004edc:	3304      	adds	r3, #4
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004ee8:	2302      	movs	r3, #2
 8004eea:	e111      	b.n	8005110 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8004eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eee:	3301      	adds	r3, #1
 8004ef0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efa:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	4b86      	ldr	r3, [pc, #536]	@ (800511c <ETH_Prepare_Tx_Descriptors+0x288>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f06:	6852      	ldr	r2, [r2, #4]
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d008      	beq.n	8004f2c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	431a      	orrs	r2, r3
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f48:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d005      	beq.n	8004f62 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f6c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004f6e:	e082      	b.n	8005076 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f7a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	e005      	b.n	8004f9c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa4:	2b03      	cmp	r3, #3
 8004fa6:	d902      	bls.n	8004fae <ETH_Prepare_Tx_Descriptors+0x11a>
 8004fa8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004faa:	3b04      	subs	r3, #4
 8004fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fb6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fc4:	d007      	beq.n	8004fd6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fca:	3304      	adds	r3, #4
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d029      	beq.n	800502a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8004fd6:	6a3b      	ldr	r3, [r7, #32]
 8004fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fe2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fe8:	e019      	b.n	800501e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8004fea:	f3bf 8f5f 	dmb	sy
}
 8004fee:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ffe:	3301      	adds	r3, #1
 8005000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005004:	2b03      	cmp	r3, #3
 8005006:	d902      	bls.n	800500e <ETH_Prepare_Tx_Descriptors+0x17a>
 8005008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800500a:	3b04      	subs	r3, #4
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800500e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005010:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005016:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501a:	3301      	adds	r3, #1
 800501c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800501e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005022:	429a      	cmp	r2, r3
 8005024:	d3e1      	bcc.n	8004fea <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8005026:	2302      	movs	r3, #2
 8005028:	e072      	b.n	8005110 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800502a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005034:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005038:	3301      	adds	r3, #1
 800503a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800503c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	461a      	mov	r2, r3
 8005048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800504c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	4b32      	ldr	r3, [pc, #200]	@ (800511c <ETH_Prepare_Tx_Descriptors+0x288>)
 8005052:	4013      	ands	r3, r2
 8005054:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005056:	6852      	ldr	r2, [r2, #4]
 8005058:	431a      	orrs	r2, r3
 800505a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800505e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005060:	3301      	adds	r3, #1
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005064:	f3bf 8f5f 	dmb	sy
}
 8005068:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800506a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005074:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	f47f af78 	bne.w	8004f70 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d006      	beq.n	8005094 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e005      	b.n	80050a0 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800509c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80050a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050aa:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	6a3a      	ldr	r2, [r7, #32]
 80050b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050b4:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80050b6:	f3bf 8f5f 	dmb	sy
}
 80050ba:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80050bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80050c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d0:	3304      	adds	r3, #4
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050dc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050de:	f3ef 8310 	mrs	r3, PRIMASK
 80050e2:	613b      	str	r3, [r7, #16]
  return(result);
 80050e4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80050e6:	61fb      	str	r3, [r7, #28]
 80050e8:	2301      	movs	r3, #1
 80050ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	f383 8810 	msr	PRIMASK, r3
}
 80050f2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	4413      	add	r3, r2
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005100:	629a      	str	r2, [r3, #40]	@ 0x28
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f383 8810 	msr	PRIMASK, r3
}
 800510c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3744      	adds	r7, #68	@ 0x44
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	ffffe000 	.word	0xffffe000

08005120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005120:	b480      	push	{r7}
 8005122:	b089      	sub	sp, #36	@ 0x24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800512a:	2300      	movs	r3, #0
 800512c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800512e:	2300      	movs	r3, #0
 8005130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005132:	2300      	movs	r3, #0
 8005134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005136:	2300      	movs	r3, #0
 8005138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800513a:	2300      	movs	r3, #0
 800513c:	61fb      	str	r3, [r7, #28]
 800513e:	e175      	b.n	800542c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005140:	2201      	movs	r2, #1
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	fa02 f303 	lsl.w	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	4013      	ands	r3, r2
 8005152:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	429a      	cmp	r2, r3
 800515a:	f040 8164 	bne.w	8005426 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d005      	beq.n	8005176 <HAL_GPIO_Init+0x56>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f003 0303 	and.w	r3, r3, #3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d130      	bne.n	80051d8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	005b      	lsls	r3, r3, #1
 8005180:	2203      	movs	r2, #3
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	43db      	mvns	r3, r3
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	4013      	ands	r3, r2
 800518c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68da      	ldr	r2, [r3, #12]
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	005b      	lsls	r3, r3, #1
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4313      	orrs	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051ac:	2201      	movs	r2, #1
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	fa02 f303 	lsl.w	r3, r2, r3
 80051b4:	43db      	mvns	r3, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	4013      	ands	r3, r2
 80051ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	091b      	lsrs	r3, r3, #4
 80051c2:	f003 0201 	and.w	r2, r3, #1
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	fa02 f303 	lsl.w	r3, r2, r3
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	f003 0303 	and.w	r3, r3, #3
 80051e0:	2b03      	cmp	r3, #3
 80051e2:	d017      	beq.n	8005214 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	005b      	lsls	r3, r3, #1
 80051ee:	2203      	movs	r2, #3
 80051f0:	fa02 f303 	lsl.w	r3, r2, r3
 80051f4:	43db      	mvns	r3, r3
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	fa02 f303 	lsl.w	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	4313      	orrs	r3, r2
 800520c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d123      	bne.n	8005268 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	08da      	lsrs	r2, r3, #3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3208      	adds	r2, #8
 8005228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800522c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	220f      	movs	r2, #15
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	43db      	mvns	r3, r3
 800523e:	69ba      	ldr	r2, [r7, #24]
 8005240:	4013      	ands	r3, r2
 8005242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	69ba      	ldr	r2, [r7, #24]
 8005256:	4313      	orrs	r3, r2
 8005258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	08da      	lsrs	r2, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3208      	adds	r2, #8
 8005262:	69b9      	ldr	r1, [r7, #24]
 8005264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	2203      	movs	r2, #3
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	f003 0203 	and.w	r2, r3, #3
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80be 	beq.w	8005426 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052aa:	4b66      	ldr	r3, [pc, #408]	@ (8005444 <HAL_GPIO_Init+0x324>)
 80052ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ae:	4a65      	ldr	r2, [pc, #404]	@ (8005444 <HAL_GPIO_Init+0x324>)
 80052b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80052b6:	4b63      	ldr	r3, [pc, #396]	@ (8005444 <HAL_GPIO_Init+0x324>)
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80052be:	60fb      	str	r3, [r7, #12]
 80052c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80052c2:	4a61      	ldr	r2, [pc, #388]	@ (8005448 <HAL_GPIO_Init+0x328>)
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	089b      	lsrs	r3, r3, #2
 80052c8:	3302      	adds	r3, #2
 80052ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	220f      	movs	r2, #15
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	43db      	mvns	r3, r3
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	4013      	ands	r3, r2
 80052e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a58      	ldr	r2, [pc, #352]	@ (800544c <HAL_GPIO_Init+0x32c>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d037      	beq.n	800535e <HAL_GPIO_Init+0x23e>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a57      	ldr	r2, [pc, #348]	@ (8005450 <HAL_GPIO_Init+0x330>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d031      	beq.n	800535a <HAL_GPIO_Init+0x23a>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a56      	ldr	r2, [pc, #344]	@ (8005454 <HAL_GPIO_Init+0x334>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02b      	beq.n	8005356 <HAL_GPIO_Init+0x236>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a55      	ldr	r2, [pc, #340]	@ (8005458 <HAL_GPIO_Init+0x338>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d025      	beq.n	8005352 <HAL_GPIO_Init+0x232>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a54      	ldr	r2, [pc, #336]	@ (800545c <HAL_GPIO_Init+0x33c>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d01f      	beq.n	800534e <HAL_GPIO_Init+0x22e>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a53      	ldr	r2, [pc, #332]	@ (8005460 <HAL_GPIO_Init+0x340>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d019      	beq.n	800534a <HAL_GPIO_Init+0x22a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a52      	ldr	r2, [pc, #328]	@ (8005464 <HAL_GPIO_Init+0x344>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d013      	beq.n	8005346 <HAL_GPIO_Init+0x226>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a51      	ldr	r2, [pc, #324]	@ (8005468 <HAL_GPIO_Init+0x348>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00d      	beq.n	8005342 <HAL_GPIO_Init+0x222>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a50      	ldr	r2, [pc, #320]	@ (800546c <HAL_GPIO_Init+0x34c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <HAL_GPIO_Init+0x21e>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a4f      	ldr	r2, [pc, #316]	@ (8005470 <HAL_GPIO_Init+0x350>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d101      	bne.n	800533a <HAL_GPIO_Init+0x21a>
 8005336:	2309      	movs	r3, #9
 8005338:	e012      	b.n	8005360 <HAL_GPIO_Init+0x240>
 800533a:	230a      	movs	r3, #10
 800533c:	e010      	b.n	8005360 <HAL_GPIO_Init+0x240>
 800533e:	2308      	movs	r3, #8
 8005340:	e00e      	b.n	8005360 <HAL_GPIO_Init+0x240>
 8005342:	2307      	movs	r3, #7
 8005344:	e00c      	b.n	8005360 <HAL_GPIO_Init+0x240>
 8005346:	2306      	movs	r3, #6
 8005348:	e00a      	b.n	8005360 <HAL_GPIO_Init+0x240>
 800534a:	2305      	movs	r3, #5
 800534c:	e008      	b.n	8005360 <HAL_GPIO_Init+0x240>
 800534e:	2304      	movs	r3, #4
 8005350:	e006      	b.n	8005360 <HAL_GPIO_Init+0x240>
 8005352:	2303      	movs	r3, #3
 8005354:	e004      	b.n	8005360 <HAL_GPIO_Init+0x240>
 8005356:	2302      	movs	r3, #2
 8005358:	e002      	b.n	8005360 <HAL_GPIO_Init+0x240>
 800535a:	2301      	movs	r3, #1
 800535c:	e000      	b.n	8005360 <HAL_GPIO_Init+0x240>
 800535e:	2300      	movs	r3, #0
 8005360:	69fa      	ldr	r2, [r7, #28]
 8005362:	f002 0203 	and.w	r2, r2, #3
 8005366:	0092      	lsls	r2, r2, #2
 8005368:	4093      	lsls	r3, r2
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	4313      	orrs	r3, r2
 800536e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005370:	4935      	ldr	r1, [pc, #212]	@ (8005448 <HAL_GPIO_Init+0x328>)
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	089b      	lsrs	r3, r3, #2
 8005376:	3302      	adds	r3, #2
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800537e:	4b3d      	ldr	r3, [pc, #244]	@ (8005474 <HAL_GPIO_Init+0x354>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	43db      	mvns	r3, r3
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	4013      	ands	r3, r2
 800538c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4313      	orrs	r3, r2
 80053a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80053a2:	4a34      	ldr	r2, [pc, #208]	@ (8005474 <HAL_GPIO_Init+0x354>)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80053a8:	4b32      	ldr	r3, [pc, #200]	@ (8005474 <HAL_GPIO_Init+0x354>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	43db      	mvns	r3, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	4013      	ands	r3, r2
 80053b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d003      	beq.n	80053cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80053cc:	4a29      	ldr	r2, [pc, #164]	@ (8005474 <HAL_GPIO_Init+0x354>)
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80053d2:	4b28      	ldr	r3, [pc, #160]	@ (8005474 <HAL_GPIO_Init+0x354>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	43db      	mvns	r3, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4013      	ands	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053f6:	4a1f      	ldr	r2, [pc, #124]	@ (8005474 <HAL_GPIO_Init+0x354>)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053fc:	4b1d      	ldr	r3, [pc, #116]	@ (8005474 <HAL_GPIO_Init+0x354>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	43db      	mvns	r3, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4013      	ands	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005420:	4a14      	ldr	r2, [pc, #80]	@ (8005474 <HAL_GPIO_Init+0x354>)
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3301      	adds	r3, #1
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b0f      	cmp	r3, #15
 8005430:	f67f ae86 	bls.w	8005140 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	3724      	adds	r7, #36	@ 0x24
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40023800 	.word	0x40023800
 8005448:	40013800 	.word	0x40013800
 800544c:	40020000 	.word	0x40020000
 8005450:	40020400 	.word	0x40020400
 8005454:	40020800 	.word	0x40020800
 8005458:	40020c00 	.word	0x40020c00
 800545c:	40021000 	.word	0x40021000
 8005460:	40021400 	.word	0x40021400
 8005464:	40021800 	.word	0x40021800
 8005468:	40021c00 	.word	0x40021c00
 800546c:	40022000 	.word	0x40022000
 8005470:	40022400 	.word	0x40022400
 8005474:	40013c00 	.word	0x40013c00

08005478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e08b      	b.n	80055a2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d106      	bne.n	80054a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7fb fcea 	bl	8000e78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2224      	movs	r2, #36	@ 0x24
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0201 	bic.w	r2, r2, #1
 80054ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d107      	bne.n	80054f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054ee:	609a      	str	r2, [r3, #8]
 80054f0:	e006      	b.n	8005500 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80054fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	2b02      	cmp	r3, #2
 8005506:	d108      	bne.n	800551a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005516:	605a      	str	r2, [r3, #4]
 8005518:	e007      	b.n	800552a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	6859      	ldr	r1, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	4b1d      	ldr	r3, [pc, #116]	@ (80055ac <HAL_I2C_Init+0x134>)
 8005536:	430b      	orrs	r3, r1
 8005538:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68da      	ldr	r2, [r3, #12]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005548:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691a      	ldr	r2, [r3, #16]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	430a      	orrs	r2, r1
 8005562:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	69d9      	ldr	r1, [r3, #28]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a1a      	ldr	r2, [r3, #32]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2200      	movs	r2, #0
 8005588:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2220      	movs	r2, #32
 800558e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	02008000 	.word	0x02008000

080055b0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08a      	sub	sp, #40	@ 0x28
 80055b4:	af02      	add	r7, sp, #8
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	461a      	mov	r2, r3
 80055bc:	460b      	mov	r3, r1
 80055be:	817b      	strh	r3, [r7, #10]
 80055c0:	4613      	mov	r3, r2
 80055c2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	f040 80ef 	bne.w	80057b4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699b      	ldr	r3, [r3, #24]
 80055dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80055e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e4:	d101      	bne.n	80055ea <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 80055e6:	2302      	movs	r3, #2
 80055e8:	e0e5      	b.n	80057b6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_I2C_Master_Transmit_DMA+0x48>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e0de      	b.n	80057b6 <HAL_I2C_Master_Transmit_DMA+0x206>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2221      	movs	r2, #33	@ 0x21
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2210      	movs	r2, #16
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	893a      	ldrh	r2, [r7, #8]
 8005620:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	4a66      	ldr	r2, [pc, #408]	@ (80057c0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 8005626:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	4a66      	ldr	r2, [pc, #408]	@ (80057c4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800562c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	2bff      	cmp	r3, #255	@ 0xff
 8005636:	d906      	bls.n	8005646 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	22ff      	movs	r2, #255	@ 0xff
 800563c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800563e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005642:	61fb      	str	r3, [r7, #28]
 8005644:	e007      	b.n	8005656 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005650:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005654:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01a      	beq.n	8005694 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	781a      	ldrb	r2, [r3, #0]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800566e:	1c5a      	adds	r2, r3, #1
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	625a      	str	r2, [r3, #36]	@ 0x24

      sizetoxfer = hi2c->XferSize;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005678:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferSize > 0U)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005698:	2b00      	cmp	r3, #0
 800569a:	d074      	beq.n	8005786 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d022      	beq.n	80056ea <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	4a47      	ldr	r2, [pc, #284]	@ (80057c8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80056aa:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b0:	4a46      	ldr	r2, [pc, #280]	@ (80057cc <HAL_I2C_Master_Transmit_DMA+0x21c>)
 80056b2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056b8:	2200      	movs	r2, #0
 80056ba:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056c0:	2200      	movs	r2, #0
 80056c2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056cc:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80056d4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 80056da:	f7fd ff35 	bl	8003548 <HAL_DMA_Start_IT>
 80056de:	4603      	mov	r3, r0
 80056e0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80056e2:	7dfb      	ldrb	r3, [r7, #23]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d13a      	bne.n	800575e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 80056e8:	e013      	b.n	8005712 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2220      	movs	r2, #32
 80056ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2200      	movs	r2, #0
 80056f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056fe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2200      	movs	r2, #0
 800570a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e051      	b.n	80057b6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005716:	b2db      	uxtb	r3, r3
 8005718:	3301      	adds	r3, #1
 800571a:	b2da      	uxtb	r2, r3
 800571c:	8979      	ldrh	r1, [r7, #10]
 800571e:	4b2c      	ldr	r3, [pc, #176]	@ (80057d0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f001 ff3f 	bl	80075a8 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	b29a      	uxth	r2, r3
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005744:	2110      	movs	r1, #16
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f001 ff60 	bl	800760c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e028      	b.n	80057b0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f043 0210 	orr.w	r2, r3, #16
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e017      	b.n	80057b6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4a12      	ldr	r2, [pc, #72]	@ (80057d4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800578a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	b2da      	uxtb	r2, r3
 8005790:	8979      	ldrh	r1, [r7, #10]
 8005792:	4b0f      	ldr	r3, [pc, #60]	@ (80057d0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f001 ff04 	bl	80075a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80057a8:	2101      	movs	r1, #1
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f001 ff2e 	bl	800760c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
 80057b2:	e000      	b.n	80057b6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 80057b4:	2302      	movs	r3, #2
  }
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3720      	adds	r7, #32
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	ffff0000 	.word	0xffff0000
 80057c4:	080062ff 	.word	0x080062ff
 80057c8:	0800732b 	.word	0x0800732b
 80057cc:	080074f9 	.word	0x080074f9
 80057d0:	80002000 	.word	0x80002000
 80057d4:	08005e73 	.word	0x08005e73

080057d8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	607a      	str	r2, [r7, #4]
 80057e2:	461a      	mov	r2, r3
 80057e4:	460b      	mov	r3, r1
 80057e6:	817b      	strh	r3, [r7, #10]
 80057e8:	4613      	mov	r3, r2
 80057ea:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	f040 80cd 	bne.w	8005994 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005804:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005808:	d101      	bne.n	800580e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800580a:	2302      	movs	r3, #2
 800580c:	e0c3      	b.n	8005996 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005814:	2b01      	cmp	r3, #1
 8005816:	d101      	bne.n	800581c <HAL_I2C_Master_Receive_DMA+0x44>
 8005818:	2302      	movs	r3, #2
 800581a:	e0bc      	b.n	8005996 <HAL_I2C_Master_Receive_DMA+0x1be>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2222      	movs	r2, #34	@ 0x22
 8005828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2210      	movs	r2, #16
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	893a      	ldrh	r2, [r7, #8]
 8005844:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a55      	ldr	r2, [pc, #340]	@ (80059a0 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800584a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	4a55      	ldr	r2, [pc, #340]	@ (80059a4 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8005850:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005856:	b29b      	uxth	r3, r3
 8005858:	2bff      	cmp	r3, #255	@ 0xff
 800585a:	d906      	bls.n	800586a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005862:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	e007      	b.n	800587a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005874:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005878:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800587e:	2b00      	cmp	r3, #0
 8005880:	d070      	beq.n	8005964 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d020      	beq.n	80058cc <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800588e:	4a46      	ldr	r2, [pc, #280]	@ (80059a8 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8005890:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005896:	4a45      	ldr	r2, [pc, #276]	@ (80059ac <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8005898:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589e:	2200      	movs	r2, #0
 80058a0:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a6:	2200      	movs	r2, #0
 80058a8:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3324      	adds	r3, #36	@ 0x24
 80058b4:	4619      	mov	r1, r3
 80058b6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80058bc:	f7fd fe44 	bl	8003548 <HAL_DMA_Start_IT>
 80058c0:	4603      	mov	r3, r0
 80058c2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80058c4:	7cfb      	ldrb	r3, [r7, #19]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d138      	bne.n	800593c <HAL_I2C_Master_Receive_DMA+0x164>
 80058ca:	e013      	b.n	80058f4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e050      	b.n	8005996 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	8979      	ldrh	r1, [r7, #10]
 80058fc:	4b2c      	ldr	r3, [pc, #176]	@ (80059b0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f001 fe50 	bl	80075a8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590c:	b29a      	uxth	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	b29a      	uxth	r2, r3
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8005922:	2110      	movs	r1, #16
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f001 fe71 	bl	800760c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	e029      	b.n	8005990 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005950:	f043 0210 	orr.w	r2, r3, #16
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e018      	b.n	8005996 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a13      	ldr	r2, [pc, #76]	@ (80059b4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8005968:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800596e:	b2da      	uxtb	r2, r3
 8005970:	8979      	ldrh	r1, [r7, #10]
 8005972:	4b0f      	ldr	r3, [pc, #60]	@ (80059b0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8005974:	9300      	str	r3, [sp, #0]
 8005976:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f001 fe14 	bl	80075a8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005988:	2102      	movs	r1, #2
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f001 fe3e 	bl	800760c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	e000      	b.n	8005996 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8005994:	2302      	movs	r3, #2
  }
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	ffff0000 	.word	0xffff0000
 80059a4:	080062ff 	.word	0x080062ff
 80059a8:	08007401 	.word	0x08007401
 80059ac:	080074f9 	.word	0x080074f9
 80059b0:	80002400 	.word	0x80002400
 80059b4:	08005e73 	.word	0x08005e73

080059b8 <HAL_I2C_Slave_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	4613      	mov	r3, r2
 80059c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	f040 80d1 	bne.w	8005b76 <HAL_I2C_Slave_Transmit_DMA+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <HAL_I2C_Slave_Transmit_DMA+0x28>
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d105      	bne.n	80059ec <HAL_I2C_Slave_Transmit_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0c5      	b.n	8005b78 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_I2C_Slave_Transmit_DMA+0x42>
 80059f6:	2302      	movs	r3, #2
 80059f8:	e0be      	b.n	8005b78 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2201      	movs	r2, #1
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2221      	movs	r2, #33	@ 0x21
 8005a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	68ba      	ldr	r2, [r7, #8]
 8005a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	88fa      	ldrh	r2, [r7, #6]
 8005a22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	4a53      	ldr	r2, [pc, #332]	@ (8005b80 <HAL_I2C_Slave_Transmit_DMA+0x1c8>)
 8005a32:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	4a53      	ldr	r2, [pc, #332]	@ (8005b84 <HAL_I2C_Slave_Transmit_DMA+0x1cc>)
 8005a38:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1b      	ldr	r3, [r3, #32]
 8005a3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a42:	d117      	bne.n	8005a74 <HAL_I2C_Slave_Transmit_DMA+0xbc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	781a      	ldrb	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29a      	uxth	r2, r3
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	851a      	strh	r2, [r3, #40]	@ 0x28
    }

    if (hi2c->XferCount != 0U)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d068      	beq.n	8005b50 <HAL_I2C_Slave_Transmit_DMA+0x198>
    {
      if (hi2c->hdmatx != NULL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d022      	beq.n	8005acc <HAL_I2C_Slave_Transmit_DMA+0x114>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMASlaveTransmitCplt;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b88 <HAL_I2C_Slave_Transmit_DMA+0x1d0>)
 8005a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a92:	4a3e      	ldr	r2, [pc, #248]	@ (8005b8c <HAL_I2C_Slave_Transmit_DMA+0x1d4>)
 8005a94:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005aae:	4619      	mov	r1, r3
                                         (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3328      	adds	r3, #40	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005ab6:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx,
 8005abc:	f7fd fd44 	bl	8003548 <HAL_DMA_Start_IT>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005ac4:	7dfb      	ldrb	r3, [r7, #23]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d12e      	bne.n	8005b28 <HAL_I2C_Slave_Transmit_DMA+0x170>
 8005aca:	e013      	b.n	8005af4 <HAL_I2C_Slave_Transmit_DMA+0x13c>
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2228      	movs	r2, #40	@ 0x28
 8005ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e041      	b.n	8005b78 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      {
        /* Enable Address Acknowledge */
        hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b02:	605a      	str	r2, [r3, #4]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR, STOP, NACK, ADDR interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b0c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f001 fd7b 	bl	800760c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005b24:	601a      	str	r2, [r3, #0]
 8005b26:	e024      	b.n	8005b72 <HAL_I2C_Slave_Transmit_DMA+0x1ba>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2228      	movs	r2, #40	@ 0x28
 8005b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3c:	f043 0210 	orr.w	r2, r3, #16
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e013      	b.n	8005b78 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
      }
    }
    else
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b5e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f001 fd4d 	bl	800760c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	e000      	b.n	8005b78 <HAL_I2C_Slave_Transmit_DMA+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005b76:	2302      	movs	r3, #2
  }
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	ffff0000 	.word	0xffff0000
 8005b84:	080067a1 	.word	0x080067a1
 8005b88:	080073c1 	.word	0x080073c1
 8005b8c:	080074f9 	.word	0x080074f9

08005b90 <HAL_I2C_Slave_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_DMA(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	f040 809b 	bne.w	8005ce2 <HAL_I2C_Slave_Receive_DMA+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_I2C_Slave_Receive_DMA+0x28>
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_I2C_Slave_Receive_DMA+0x34>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e08f      	b.n	8005ce4 <HAL_I2C_Slave_Receive_DMA+0x154>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_I2C_Slave_Receive_DMA+0x42>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e088      	b.n	8005ce4 <HAL_I2C_Slave_Receive_DMA+0x154>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2222      	movs	r2, #34	@ 0x22
 8005bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	4a38      	ldr	r2, [pc, #224]	@ (8005cec <HAL_I2C_Slave_Receive_DMA+0x15c>)
 8005c0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_DMA;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4a38      	ldr	r2, [pc, #224]	@ (8005cf0 <HAL_I2C_Slave_Receive_DMA+0x160>)
 8005c10:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->hdmarx != NULL)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d020      	beq.n	8005c5c <HAL_I2C_Slave_Receive_DMA+0xcc>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMASlaveReceiveCplt;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1e:	4a35      	ldr	r2, [pc, #212]	@ (8005cf4 <HAL_I2C_Slave_Receive_DMA+0x164>)
 8005c20:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c26:	4a34      	ldr	r2, [pc, #208]	@ (8005cf8 <HAL_I2C_Slave_Receive_DMA+0x168>)
 8005c28:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2e:	2200      	movs	r2, #0
 8005c30:	641a      	str	r2, [r3, #64]	@ 0x40
      hi2c->hdmarx->XferAbortCallback = NULL;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c36:	2200      	movs	r2, #0
 8005c38:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the DMA stream */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3324      	adds	r3, #36	@ 0x24
 8005c44:	4619      	mov	r1, r3
 8005c46:	68ba      	ldr	r2, [r7, #8]
                                       hi2c->XferSize);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8005c4c:	f7fd fc7c 	bl	8003548 <HAL_DMA_Start_IT>
 8005c50:	4603      	mov	r3, r0
 8005c52:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 8005c54:	7dfb      	ldrb	r3, [r7, #23]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d12f      	bne.n	8005cba <HAL_I2C_Slave_Receive_DMA+0x12a>
 8005c5a:	e013      	b.n	8005c84 <HAL_I2C_Slave_Receive_DMA+0xf4>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2228      	movs	r2, #40	@ 0x28
 8005c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	e02f      	b.n	8005ce4 <HAL_I2C_Slave_Receive_DMA+0x154>
    {
      /* Enable Address Acknowledge */
      hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	685a      	ldr	r2, [r3, #4]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c92:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR, STOP, NACK, ADDR interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005c9c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005ca0:	68f8      	ldr	r0, [r7, #12]
 8005ca2:	f001 fcb3 	bl	800760c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005cb4:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	e014      	b.n	8005ce4 <HAL_I2C_Slave_Receive_DMA+0x154>
      hi2c->State     = HAL_I2C_STATE_LISTEN;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2228      	movs	r2, #40	@ 0x28
 8005cbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	f043 0210 	orr.w	r2, r3, #16
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	645a      	str	r2, [r3, #68]	@ 0x44
      __HAL_UNLOCK(hi2c);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e000      	b.n	8005ce4 <HAL_I2C_Slave_Receive_DMA+0x154>
  }
  else
  {
    return HAL_BUSY;
 8005ce2:	2302      	movs	r3, #2
  }
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3718      	adds	r7, #24
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	ffff0000 	.word	0xffff0000
 8005cf0:	080067a1 	.word	0x080067a1
 8005cf4:	080074b3 	.word	0x080074b3
 8005cf8:	080074f9 	.word	0x080074f9

08005cfc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	4798      	blx	r3
  }
}
 8005d28:	bf00      	nop
 8005d2a:	3710      	adds	r7, #16
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	0a1b      	lsrs	r3, r3, #8
 8005d4c:	f003 0301 	and.w	r3, r3, #1
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d010      	beq.n	8005d76 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	09db      	lsrs	r3, r3, #7
 8005d58:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00a      	beq.n	8005d76 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d64:	f043 0201 	orr.w	r2, r3, #1
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d74:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	0a9b      	lsrs	r3, r3, #10
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d010      	beq.n	8005da4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	09db      	lsrs	r3, r3, #7
 8005d86:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d92:	f043 0208 	orr.w	r2, r3, #8
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005da2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	0a5b      	lsrs	r3, r3, #9
 8005da8:	f003 0301 	and.w	r3, r3, #1
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d010      	beq.n	8005dd2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	09db      	lsrs	r3, r3, #7
 8005db4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc0:	f043 0202 	orr.w	r2, r3, #2
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005dd0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f003 030b 	and.w	r3, r3, #11
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005de2:	68f9      	ldr	r1, [r7, #12]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f001 f965 	bl	80070b4 <I2C_ITError>
  }
}
 8005dea:	bf00      	nop
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b083      	sub	sp, #12
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	70fb      	strb	r3, [r7, #3]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e02:	bf00      	nop
 8005e04:	370c      	adds	r7, #12
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b083      	sub	sp, #12
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005e16:	bf00      	nop
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b088      	sub	sp, #32
 8005e76:	af02      	add	r7, sp, #8
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d101      	bne.n	8005e90 <I2C_Master_ISR_IT+0x1e>
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	e12e      	b.n	80060ee <I2C_Master_ISR_IT+0x27c>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	f003 0301 	and.w	r3, r3, #1
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d013      	beq.n	8005ecc <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00d      	beq.n	8005ecc <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2210      	movs	r2, #16
 8005eb6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebc:	f043 0204 	orr.w	r2, r3, #4
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005ec4:	68f8      	ldr	r0, [r7, #12]
 8005ec6:	f001 fa0c 	bl	80072e2 <I2C_Flush_TXDR>
 8005eca:	e0fb      	b.n	80060c4 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	f003 0301 	and.w	r3, r3, #1
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d023      	beq.n	8005f20 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	089b      	lsrs	r3, r3, #2
 8005edc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01d      	beq.n	8005f20 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f023 0304 	bic.w	r3, r3, #4
 8005eea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005f1e:	e0d1      	b.n	80060c4 <I2C_Master_ISR_IT+0x252>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d12a      	bne.n	8005f82 <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	085b      	lsrs	r3, r3, #1
 8005f30:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d024      	beq.n	8005f82 <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	085b      	lsrs	r3, r3, #1
 8005f3c:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01e      	beq.n	8005f82 <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80ba 	beq.w	80060c4 <I2C_Master_ISR_IT+0x252>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	781a      	ldrb	r2, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f76:	b29b      	uxth	r3, r3
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8005f80:	e0a0      	b.n	80060c4 <I2C_Master_ISR_IT+0x252>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	09db      	lsrs	r3, r3, #7
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d06b      	beq.n	8006066 <I2C_Master_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	099b      	lsrs	r3, r3, #6
 8005f92:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d065      	beq.n	8006066 <I2C_Master_ISR_IT+0x1f4>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d04e      	beq.n	8006042 <I2C_Master_ISR_IT+0x1d0>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d14a      	bne.n	8006042 <I2C_Master_ISR_IT+0x1d0>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fb8:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2bff      	cmp	r3, #255	@ 0xff
 8005fc2:	d91c      	bls.n	8005ffe <I2C_Master_ISR_IT+0x18c>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	0c1b      	lsrs	r3, r3, #16
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d103      	bne.n	8005fe0 <I2C_Master_ISR_IT+0x16e>
        {
          hi2c->XferSize = 1U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005fde:	e002      	b.n	8005fe6 <I2C_Master_ISR_IT+0x174>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	@ 0xff
 8005fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005fea:	b2da      	uxtb	r2, r3
 8005fec:	8a79      	ldrh	r1, [r7, #18]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	f001 fad6 	bl	80075a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ffc:	e032      	b.n	8006064 <I2C_Master_ISR_IT+0x1f2>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006010:	d00b      	beq.n	800602a <I2C_Master_ISR_IT+0x1b8>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006016:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800601c:	8a79      	ldrh	r1, [r7, #18]
 800601e:	2000      	movs	r0, #0
 8006020:	9000      	str	r0, [sp, #0]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f001 fac0 	bl	80075a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006028:	e01c      	b.n	8006064 <I2C_Master_ISR_IT+0x1f2>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800602e:	b2da      	uxtb	r2, r3
 8006030:	8a79      	ldrh	r1, [r7, #18]
 8006032:	2300      	movs	r3, #0
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f001 fab4 	bl	80075a8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006040:	e010      	b.n	8006064 <I2C_Master_ISR_IT+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800604c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006050:	d003      	beq.n	800605a <I2C_Master_ISR_IT+0x1e8>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f000 fd09 	bl	8006a6a <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006058:	e034      	b.n	80060c4 <I2C_Master_ISR_IT+0x252>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800605a:	2140      	movs	r1, #64	@ 0x40
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f001 f829 	bl	80070b4 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006062:	e02f      	b.n	80060c4 <I2C_Master_ISR_IT+0x252>
 8006064:	e02e      	b.n	80060c4 <I2C_Master_ISR_IT+0x252>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	099b      	lsrs	r3, r3, #6
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d028      	beq.n	80060c4 <I2C_Master_ISR_IT+0x252>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	099b      	lsrs	r3, r3, #6
 8006076:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800607a:	2b00      	cmp	r3, #0
 800607c:	d022      	beq.n	80060c4 <I2C_Master_ISR_IT+0x252>
  {
    if (hi2c->XferCount == 0U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006082:	b29b      	uxth	r3, r3
 8006084:	2b00      	cmp	r3, #0
 8006086:	d119      	bne.n	80060bc <I2C_Master_ISR_IT+0x24a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006092:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006096:	d015      	beq.n	80060c4 <I2C_Master_ISR_IT+0x252>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80060a0:	d108      	bne.n	80060b4 <I2C_Master_ISR_IT+0x242>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	e007      	b.n	80060c4 <I2C_Master_ISR_IT+0x252>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fcd8 	bl	8006a6a <I2C_ITMasterSeqCplt>
 80060ba:	e003      	b.n	80060c4 <I2C_Master_ISR_IT+0x252>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80060bc:	2140      	movs	r1, #64	@ 0x40
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	f000 fff8 	bl	80070b4 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	095b      	lsrs	r3, r3, #5
 80060c8:	f003 0301 	and.w	r3, r3, #1
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d009      	beq.n	80060e4 <I2C_Master_ISR_IT+0x272>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <I2C_Master_ISR_IT+0x272>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80060dc:	6979      	ldr	r1, [r7, #20]
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 fd5e 	bl	8006ba0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006106:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <I2C_Slave_ISR_IT+0x24>
 8006116:	2302      	movs	r3, #2
 8006118:	e0ed      	b.n	80062f6 <I2C_Slave_ISR_IT+0x200>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	095b      	lsrs	r3, r3, #5
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00a      	beq.n	8006144 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	095b      	lsrs	r3, r3, #5
 8006132:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006136:	2b00      	cmp	r3, #0
 8006138:	d004      	beq.n	8006144 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800613a:	6939      	ldr	r1, [r7, #16]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 fdf9 	bl	8006d34 <I2C_ITSlaveCplt>
 8006142:	e0d3      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	091b      	lsrs	r3, r3, #4
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d04d      	beq.n	80061ec <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	091b      	lsrs	r3, r3, #4
 8006154:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006158:	2b00      	cmp	r3, #0
 800615a:	d047      	beq.n	80061ec <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d128      	bne.n	80061b8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b28      	cmp	r3, #40	@ 0x28
 8006170:	d108      	bne.n	8006184 <I2C_Slave_ISR_IT+0x8e>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006178:	d104      	bne.n	8006184 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800617a:	6939      	ldr	r1, [r7, #16]
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 ff43 	bl	8007008 <I2C_ITListenCplt>
 8006182:	e032      	b.n	80061ea <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b29      	cmp	r3, #41	@ 0x29
 800618e:	d10e      	bne.n	80061ae <I2C_Slave_ISR_IT+0xb8>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006196:	d00a      	beq.n	80061ae <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2210      	movs	r2, #16
 800619e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f001 f89e 	bl	80072e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 fc9c 	bl	8006ae4 <I2C_ITSlaveSeqCplt>
 80061ac:	e01d      	b.n	80061ea <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2210      	movs	r2, #16
 80061b4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80061b6:	e096      	b.n	80062e6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2210      	movs	r2, #16
 80061be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061c4:	f043 0204 	orr.w	r2, r3, #4
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <I2C_Slave_ISR_IT+0xe6>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061d8:	f040 8085 	bne.w	80062e6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e0:	4619      	mov	r1, r3
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 ff66 	bl	80070b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80061e8:	e07d      	b.n	80062e6 <I2C_Slave_ISR_IT+0x1f0>
 80061ea:	e07c      	b.n	80062e6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	089b      	lsrs	r3, r3, #2
 80061f0:	f003 0301 	and.w	r3, r3, #1
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d030      	beq.n	800625a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	089b      	lsrs	r3, r3, #2
 80061fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006200:	2b00      	cmp	r3, #0
 8006202:	d02a      	beq.n	800625a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d018      	beq.n	8006240 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	b2d2      	uxtb	r2, r2
 800621a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800622a:	3b01      	subs	r3, #1
 800622c:	b29a      	uxth	r2, r3
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29a      	uxth	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	d14f      	bne.n	80062ea <I2C_Slave_ISR_IT+0x1f4>
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006250:	d04b      	beq.n	80062ea <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fc46 	bl	8006ae4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006258:	e047      	b.n	80062ea <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	08db      	lsrs	r3, r3, #3
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	08db      	lsrs	r3, r3, #3
 800626a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006272:	6939      	ldr	r1, [r7, #16]
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f000 fb74 	bl	8006962 <I2C_ITAddrCplt>
 800627a:	e037      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	085b      	lsrs	r3, r3, #1
 8006280:	f003 0301 	and.w	r3, r3, #1
 8006284:	2b00      	cmp	r3, #0
 8006286:	d031      	beq.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	085b      	lsrs	r3, r3, #1
 800628c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006290:	2b00      	cmp	r3, #0
 8006292:	d02b      	beq.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d018      	beq.n	80062d0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a2:	781a      	ldrb	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80062ce:	e00d      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80062d6:	d002      	beq.n	80062de <I2C_Slave_ISR_IT+0x1e8>
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 fc00 	bl	8006ae4 <I2C_ITSlaveSeqCplt>
 80062e4:	e002      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80062e6:	bf00      	nop
 80062e8:	e000      	b.n	80062ec <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80062ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b088      	sub	sp, #32
 8006302:	af02      	add	r7, sp, #8
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <I2C_Master_ISR_DMA+0x1a>
 8006314:	2302      	movs	r3, #2
 8006316:	e0f0      	b.n	80064fa <I2C_Master_ISR_DMA+0x1fc>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	091b      	lsrs	r3, r3, #4
 8006324:	f003 0301 	and.w	r3, r3, #1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d017      	beq.n	800635c <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006334:	2b00      	cmp	r3, #0
 8006336:	d011      	beq.n	800635c <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2210      	movs	r2, #16
 800633e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006344:	f043 0204 	orr.w	r2, r3, #4
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800634c:	2120      	movs	r1, #32
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f001 f95c 	bl	800760c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006354:	68f8      	ldr	r0, [r7, #12]
 8006356:	f000 ffc4 	bl	80072e2 <I2C_Flush_TXDR>
 800635a:	e0c9      	b.n	80064f0 <I2C_Master_ISR_DMA+0x1f2>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	09db      	lsrs	r3, r3, #7
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 8081 	beq.w	800646c <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	099b      	lsrs	r3, r3, #6
 800636e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006372:	2b00      	cmp	r3, #0
 8006374:	d07a      	beq.n	800646c <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006384:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d05c      	beq.n	800644a <I2C_Master_ISR_DMA+0x14c>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	b29b      	uxth	r3, r3
 8006398:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800639c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	2bff      	cmp	r3, #255	@ 0xff
 80063a6:	d914      	bls.n	80063d2 <I2C_Master_ISR_DMA+0xd4>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	0c1b      	lsrs	r3, r3, #16
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	f003 0301 	and.w	r3, r3, #1
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d103      	bne.n	80063c4 <I2C_Master_ISR_DMA+0xc6>
        {
          hi2c->XferSize = 1U;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	851a      	strh	r2, [r3, #40]	@ 0x28
 80063c2:	e002      	b.n	80063ca <I2C_Master_ISR_DMA+0xcc>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	22ff      	movs	r2, #255	@ 0xff
 80063c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 80063ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e010      	b.n	80063f4 <I2C_Master_ISR_DMA+0xf6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80063e4:	d003      	beq.n	80063ee <I2C_Master_ISR_DMA+0xf0>
        {
          xfermode = hi2c->XferOptions;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	e002      	b.n	80063f4 <I2C_Master_ISR_DMA+0xf6>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80063ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063f2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	8a79      	ldrh	r1, [r7, #18]
 80063fc:	2300      	movs	r3, #0
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f001 f8d0 	bl	80075a8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b22      	cmp	r3, #34	@ 0x22
 8006424:	d108      	bne.n	8006438 <I2C_Master_ISR_DMA+0x13a>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006434:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006436:	e05b      	b.n	80064f0 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006446:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006448:	e052      	b.n	80064f0 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006454:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006458:	d003      	beq.n	8006462 <I2C_Master_ISR_DMA+0x164>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 fb05 	bl	8006a6a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8006460:	e046      	b.n	80064f0 <I2C_Master_ISR_DMA+0x1f2>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006462:	2140      	movs	r1, #64	@ 0x40
 8006464:	68f8      	ldr	r0, [r7, #12]
 8006466:	f000 fe25 	bl	80070b4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800646a:	e041      	b.n	80064f0 <I2C_Master_ISR_DMA+0x1f2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	099b      	lsrs	r3, r3, #6
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d029      	beq.n	80064cc <I2C_Master_ISR_DMA+0x1ce>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	099b      	lsrs	r3, r3, #6
 800647c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006480:	2b00      	cmp	r3, #0
 8006482:	d023      	beq.n	80064cc <I2C_Master_ISR_DMA+0x1ce>
  {
    if (hi2c->XferCount == 0U)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006488:	b29b      	uxth	r3, r3
 800648a:	2b00      	cmp	r3, #0
 800648c:	d119      	bne.n	80064c2 <I2C_Master_ISR_DMA+0x1c4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006498:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800649c:	d027      	beq.n	80064ee <I2C_Master_ISR_DMA+0x1f0>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064a6:	d108      	bne.n	80064ba <I2C_Master_ISR_DMA+0x1bc>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064b6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80064b8:	e019      	b.n	80064ee <I2C_Master_ISR_DMA+0x1f0>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 fad5 	bl	8006a6a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80064c0:	e015      	b.n	80064ee <I2C_Master_ISR_DMA+0x1f0>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80064c2:	2140      	movs	r1, #64	@ 0x40
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 fdf5 	bl	80070b4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80064ca:	e010      	b.n	80064ee <I2C_Master_ISR_DMA+0x1f0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <I2C_Master_ISR_DMA+0x1f2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	095b      	lsrs	r3, r3, #5
 80064dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <I2C_Master_ISR_DMA+0x1f2>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	68f8      	ldr	r0, [r7, #12]
 80064e8:	f000 fb5a 	bl	8006ba0 <I2C_ITMasterCplt>
 80064ec:	e000      	b.n	80064f0 <I2C_Master_ISR_DMA+0x1f2>
    if (hi2c->XferCount == 0U)
 80064ee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3718      	adds	r7, #24
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af02      	add	r7, sp, #8
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8006510:	4b94      	ldr	r3, [pc, #592]	@ (8006764 <I2C_Mem_ISR_DMA+0x260>)
 8006512:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <I2C_Mem_ISR_DMA+0x1e>
 800651e:	2302      	movs	r3, #2
 8006520:	e139      	b.n	8006796 <I2C_Mem_ISR_DMA+0x292>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2201      	movs	r2, #1
 8006526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	091b      	lsrs	r3, r3, #4
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	091b      	lsrs	r3, r3, #4
 800653a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800653e:	2b00      	cmp	r3, #0
 8006540:	d011      	beq.n	8006566 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2210      	movs	r2, #16
 8006548:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800654e:	f043 0204 	orr.w	r2, r3, #4
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006556:	2120      	movs	r1, #32
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f001 f857 	bl	800760c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 febf 	bl	80072e2 <I2C_Flush_TXDR>
 8006564:	e112      	b.n	800678c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	085b      	lsrs	r3, r3, #1
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00f      	beq.n	8006592 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800657a:	2b00      	cmp	r3, #0
 800657c:	d009      	beq.n	8006592 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006586:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800658e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006590:	e0fc      	b.n	800678c <I2C_Mem_ISR_DMA+0x288>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	09db      	lsrs	r3, r3, #7
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d06e      	beq.n	800667c <I2C_Mem_ISR_DMA+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	099b      	lsrs	r3, r3, #6
 80065a2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d068      	beq.n	800667c <I2C_Mem_ISR_DMA+0x178>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80065aa:	2101      	movs	r1, #1
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f001 f8b1 	bl	8007714 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80065b2:	2110      	movs	r1, #16
 80065b4:	68f8      	ldr	r0, [r7, #12]
 80065b6:	f001 f829 	bl	800760c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065be:	b29b      	uxth	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d056      	beq.n	8006672 <I2C_Mem_ISR_DMA+0x16e>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2bff      	cmp	r3, #255	@ 0xff
 80065cc:	d91e      	bls.n	800660c <I2C_Mem_ISR_DMA+0x108>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	0c1b      	lsrs	r3, r3, #16
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d103      	bne.n	80065ea <I2C_Mem_ISR_DMA+0xe6>
        {
          hi2c->XferSize = 1U;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2201      	movs	r2, #1
 80065e6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80065e8:	e002      	b.n	80065f0 <I2C_Mem_ISR_DMA+0xec>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	22ff      	movs	r2, #255	@ 0xff
 80065ee:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065f4:	b299      	uxth	r1, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	2300      	movs	r3, #0
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f000 ffcf 	bl	80075a8 <I2C_TransferConfig>
 800660a:	e011      	b.n	8006630 <I2C_Mem_ISR_DMA+0x12c>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661a:	b299      	uxth	r1, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006620:	b2da      	uxtb	r2, r3
 8006622:	2300      	movs	r3, #0
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 ffbc 	bl	80075a8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006634:	b29a      	uxth	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	b29a      	uxth	r2, r3
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b22      	cmp	r3, #34	@ 0x22
 800664c:	d108      	bne.n	8006660 <I2C_Mem_ISR_DMA+0x15c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800665c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800665e:	e095      	b.n	800678c <I2C_Mem_ISR_DMA+0x288>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800666e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006670:	e08c      	b.n	800678c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006672:	2140      	movs	r1, #64	@ 0x40
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fd1d 	bl	80070b4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800667a:	e087      	b.n	800678c <I2C_Mem_ISR_DMA+0x288>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	099b      	lsrs	r3, r3, #6
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b00      	cmp	r3, #0
 8006686:	d071      	beq.n	800676c <I2C_Mem_ISR_DMA+0x268>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	099b      	lsrs	r3, r3, #6
 800668c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006690:	2b00      	cmp	r3, #0
 8006692:	d06b      	beq.n	800676c <I2C_Mem_ISR_DMA+0x268>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006694:	2101      	movs	r1, #1
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f001 f83c 	bl	8007714 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800669c:	2110      	movs	r1, #16
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 ffb4 	bl	800760c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b22      	cmp	r3, #34	@ 0x22
 80066ae:	d101      	bne.n	80066b4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      direction = I2C_GENERATE_START_READ;
 80066b0:	4b2d      	ldr	r3, [pc, #180]	@ (8006768 <I2C_Mem_ISR_DMA+0x264>)
 80066b2:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	2bff      	cmp	r3, #255	@ 0xff
 80066bc:	d91e      	bls.n	80066fc <I2C_Mem_ISR_DMA+0x1f8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	0c1b      	lsrs	r3, r3, #16
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d103      	bne.n	80066da <I2C_Mem_ISR_DMA+0x1d6>
      {
        hi2c->XferSize = 1U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80066d8:	e002      	b.n	80066e0 <I2C_Mem_ISR_DMA+0x1dc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	22ff      	movs	r2, #255	@ 0xff
 80066de:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066e4:	b299      	uxth	r1, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066ea:	b2da      	uxtb	r2, r3
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	9300      	str	r3, [sp, #0]
 80066f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f000 ff57 	bl	80075a8 <I2C_TransferConfig>
 80066fa:	e011      	b.n	8006720 <I2C_Mem_ISR_DMA+0x21c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006700:	b29a      	uxth	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670a:	b299      	uxth	r1, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006710:	b2da      	uxtb	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	9300      	str	r3, [sp, #0]
 8006716:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 ff44 	bl	80075a8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800672a:	1ad3      	subs	r3, r2, r3
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b22      	cmp	r3, #34	@ 0x22
 800673c:	d108      	bne.n	8006750 <I2C_Mem_ISR_DMA+0x24c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800674c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800674e:	e01d      	b.n	800678c <I2C_Mem_ISR_DMA+0x288>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800675e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006760:	e014      	b.n	800678c <I2C_Mem_ISR_DMA+0x288>
 8006762:	bf00      	nop
 8006764:	80002000 	.word	0x80002000
 8006768:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	f003 0301 	and.w	r3, r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	d009      	beq.n	800678c <I2C_Mem_ISR_DMA+0x288>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <I2C_Mem_ISR_DMA+0x288>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fa0a 	bl	8006ba0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3718      	adds	r7, #24
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop

080067a0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d101      	bne.n	80067c4 <I2C_Slave_ISR_DMA+0x24>
 80067c0:	2302      	movs	r3, #2
 80067c2:	e0ca      	b.n	800695a <I2C_Slave_ISR_DMA+0x1ba>
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2201      	movs	r2, #1
 80067c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	095b      	lsrs	r3, r3, #5
 80067d0:	f003 0301 	and.w	r3, r3, #1
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00a      	beq.n	80067ee <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d004      	beq.n	80067ee <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 faa4 	bl	8006d34 <I2C_ITSlaveCplt>
 80067ec:	e0b0      	b.n	8006950 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	f003 0301 	and.w	r3, r3, #1
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 809a 	beq.w	8006930 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	091b      	lsrs	r3, r3, #4
 8006800:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006804:	2b00      	cmp	r3, #0
 8006806:	f000 8093 	beq.w	8006930 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0b9b      	lsrs	r3, r3, #14
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d105      	bne.n	8006822 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	0bdb      	lsrs	r3, r3, #15
 800681a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800681e:	2b00      	cmp	r3, #0
 8006820:	d07f      	beq.n	8006922 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	0bdb      	lsrs	r3, r3, #15
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d007      	beq.n	8006846 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8006842:	2301      	movs	r3, #1
 8006844:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00d      	beq.n	800686a <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	0b9b      	lsrs	r3, r3, #14
 8006852:	f003 0301 	and.w	r3, r3, #1
 8006856:	2b00      	cmp	r3, #0
 8006858:	d007      	beq.n	800686a <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8006866:	2301      	movs	r3, #1
 8006868:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	2b01      	cmp	r3, #1
 800686e:	d128      	bne.n	80068c2 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006876:	b2db      	uxtb	r3, r3
 8006878:	2b28      	cmp	r3, #40	@ 0x28
 800687a:	d108      	bne.n	800688e <I2C_Slave_ISR_DMA+0xee>
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006882:	d104      	bne.n	800688e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f000 fbbe 	bl	8007008 <I2C_ITListenCplt>
 800688c:	e048      	b.n	8006920 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b29      	cmp	r3, #41	@ 0x29
 8006898:	d10e      	bne.n	80068b8 <I2C_Slave_ISR_DMA+0x118>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068a0:	d00a      	beq.n	80068b8 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2210      	movs	r2, #16
 80068a8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fd19 	bl	80072e2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 f917 	bl	8006ae4 <I2C_ITSlaveSeqCplt>
 80068b6:	e033      	b.n	8006920 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2210      	movs	r2, #16
 80068be:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80068c0:	e034      	b.n	800692c <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2210      	movs	r2, #16
 80068c8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068ce:	f043 0204 	orr.w	r2, r3, #4
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068dc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <I2C_Slave_ISR_DMA+0x14c>
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80068ea:	d11f      	bne.n	800692c <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	2b21      	cmp	r3, #33	@ 0x21
 80068f0:	d002      	beq.n	80068f8 <I2C_Slave_ISR_DMA+0x158>
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	2b29      	cmp	r3, #41	@ 0x29
 80068f6:	d103      	bne.n	8006900 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2221      	movs	r2, #33	@ 0x21
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80068fe:	e008      	b.n	8006912 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	2b22      	cmp	r3, #34	@ 0x22
 8006904:	d002      	beq.n	800690c <I2C_Slave_ISR_DMA+0x16c>
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b2a      	cmp	r3, #42	@ 0x2a
 800690a:	d102      	bne.n	8006912 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2222      	movs	r2, #34	@ 0x22
 8006910:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006916:	4619      	mov	r1, r3
 8006918:	68f8      	ldr	r0, [r7, #12]
 800691a:	f000 fbcb 	bl	80070b4 <I2C_ITError>
      if (treatdmanack == 1U)
 800691e:	e005      	b.n	800692c <I2C_Slave_ISR_DMA+0x18c>
 8006920:	e004      	b.n	800692c <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2210      	movs	r2, #16
 8006928:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800692a:	e011      	b.n	8006950 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 800692c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800692e:	e00f      	b.n	8006950 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	08db      	lsrs	r3, r3, #3
 8006934:	f003 0301 	and.w	r3, r3, #1
 8006938:	2b00      	cmp	r3, #0
 800693a:	d009      	beq.n	8006950 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	08db      	lsrs	r3, r3, #3
 8006940:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006944:	2b00      	cmp	r3, #0
 8006946:	d003      	beq.n	8006950 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	68f8      	ldr	r0, [r7, #12]
 800694c:	f000 f809 	bl	8006962 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3720      	adds	r7, #32
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006972:	b2db      	uxtb	r3, r3
 8006974:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006978:	2b28      	cmp	r3, #40	@ 0x28
 800697a:	d16a      	bne.n	8006a52 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	0c1b      	lsrs	r3, r3, #16
 8006984:	b2db      	uxtb	r3, r3
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	0c1b      	lsrs	r3, r3, #16
 8006994:	b29b      	uxth	r3, r3
 8006996:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800699a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689b      	ldr	r3, [r3, #8]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80069b6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	2b02      	cmp	r3, #2
 80069be:	d138      	bne.n	8006a32 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80069c0:	897b      	ldrh	r3, [r7, #10]
 80069c2:	09db      	lsrs	r3, r3, #7
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	89bb      	ldrh	r3, [r7, #12]
 80069c8:	4053      	eors	r3, r2
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	f003 0306 	and.w	r3, r3, #6
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d11c      	bne.n	8006a0e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80069d4:	897b      	ldrh	r3, [r7, #10]
 80069d6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d13b      	bne.n	8006a62 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2208      	movs	r2, #8
 80069f6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a00:	89ba      	ldrh	r2, [r7, #12]
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
 8006a04:	4619      	mov	r1, r3
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff f9f3 	bl	8005df2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006a0c:	e029      	b.n	8006a62 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006a0e:	893b      	ldrh	r3, [r7, #8]
 8006a10:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a12:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 fe7c 	bl	8007714 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a24:	89ba      	ldrh	r2, [r7, #12]
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff f9e1 	bl	8005df2 <HAL_I2C_AddrCallback>
}
 8006a30:	e017      	b.n	8006a62 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006a32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fe6c 	bl	8007714 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006a44:	89ba      	ldrh	r2, [r7, #12]
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff f9d1 	bl	8005df2 <HAL_I2C_AddrCallback>
}
 8006a50:	e007      	b.n	8006a62 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2208      	movs	r2, #8
 8006a58:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b082      	sub	sp, #8
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b21      	cmp	r3, #33	@ 0x21
 8006a84:	d115      	bne.n	8006ab2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2211      	movs	r2, #17
 8006a92:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 fe39 	bl	8007714 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f019 fd1a 	bl	80204e4 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006ab0:	e014      	b.n	8006adc <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2212      	movs	r2, #18
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ac6:	2102      	movs	r1, #2
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fe23 	bl	8007714 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f019 fd1a 	bl	8020510 <HAL_I2C_MasterRxCpltCallback>
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	0b9b      	lsrs	r3, r3, #14
 8006b00:	f003 0301 	and.w	r3, r3, #1
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d008      	beq.n	8006b1a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b16:	601a      	str	r2, [r3, #0]
 8006b18:	e00d      	b.n	8006b36 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	0bdb      	lsrs	r3, r3, #15
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d007      	beq.n	8006b36 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b29      	cmp	r3, #41	@ 0x29
 8006b40:	d112      	bne.n	8006b68 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2228      	movs	r2, #40	@ 0x28
 8006b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2221      	movs	r2, #33	@ 0x21
 8006b4e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b50:	2101      	movs	r1, #1
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fdde 	bl	8007714 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f019 fceb 	bl	802053c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b66:	e017      	b.n	8006b98 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b72:	d111      	bne.n	8006b98 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2228      	movs	r2, #40	@ 0x28
 8006b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2222      	movs	r2, #34	@ 0x22
 8006b80:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006b82:	2102      	movs	r1, #2
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fdc5 	bl	8007714 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f019 fce8 	bl	8020568 <HAL_I2C_SlaveRxCpltCallback>
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b21      	cmp	r3, #33	@ 0x21
 8006bc0:	d107      	bne.n	8006bd2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fda5 	bl	8007714 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2211      	movs	r2, #17
 8006bce:	631a      	str	r2, [r3, #48]	@ 0x30
 8006bd0:	e00c      	b.n	8006bec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	2b22      	cmp	r3, #34	@ 0x22
 8006bdc:	d106      	bne.n	8006bec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006bde:	2102      	movs	r1, #2
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fd97 	bl	8007714 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2212      	movs	r2, #18
 8006bea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6859      	ldr	r1, [r3, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8006d2c <I2C_ITMasterCplt+0x18c>)
 8006bf8:	400b      	ands	r3, r1
 8006bfa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a4a      	ldr	r2, [pc, #296]	@ (8006d30 <I2C_ITMasterCplt+0x190>)
 8006c06:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	091b      	lsrs	r3, r3, #4
 8006c0c:	f003 0301 	and.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d009      	beq.n	8006c28 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2210      	movs	r2, #16
 8006c1a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c20:	f043 0204 	orr.w	r2, r3, #4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b60      	cmp	r3, #96	@ 0x60
 8006c32:	d10b      	bne.n	8006c4c <I2C_ITMasterCplt+0xac>
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	089b      	lsrs	r3, r3, #2
 8006c38:	f003 0301 	and.w	r3, r3, #1
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 fb48 	bl	80072e2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c56:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	2b60      	cmp	r3, #96	@ 0x60
 8006c62:	d002      	beq.n	8006c6a <I2C_ITMasterCplt+0xca>
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d006      	beq.n	8006c78 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c6e:	4619      	mov	r1, r3
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fa1f 	bl	80070b4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c76:	e054      	b.n	8006d22 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b21      	cmp	r3, #33	@ 0x21
 8006c82:	d124      	bne.n	8006cce <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b40      	cmp	r3, #64	@ 0x40
 8006c9c:	d10b      	bne.n	8006cb6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f7ff f8b7 	bl	8005e22 <HAL_I2C_MemTxCpltCallback>
}
 8006cb4:	e035      	b.n	8006d22 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f019 fc0c 	bl	80204e4 <HAL_I2C_MasterTxCpltCallback>
}
 8006ccc:	e029      	b.n	8006d22 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b22      	cmp	r3, #34	@ 0x22
 8006cd8:	d123      	bne.n	8006d22 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b40      	cmp	r3, #64	@ 0x40
 8006cf2:	d10b      	bne.n	8006d0c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7ff f896 	bl	8005e36 <HAL_I2C_MemRxCpltCallback>
}
 8006d0a:	e00a      	b.n	8006d22 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f019 fbf7 	bl	8020510 <HAL_I2C_MasterRxCpltCallback>
}
 8006d22:	bf00      	nop
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	fe00e800 	.word	0xfe00e800
 8006d30:	ffff0000 	.word	0xffff0000

08006d34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4e:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d56:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d60:	7afb      	ldrb	r3, [r7, #11]
 8006d62:	2b21      	cmp	r3, #33	@ 0x21
 8006d64:	d002      	beq.n	8006d6c <I2C_ITSlaveCplt+0x38>
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	2b29      	cmp	r3, #41	@ 0x29
 8006d6a:	d108      	bne.n	8006d7e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006d6c:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 fccf 	bl	8007714 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2221      	movs	r2, #33	@ 0x21
 8006d7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d7c:	e019      	b.n	8006db2 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d7e:	7afb      	ldrb	r3, [r7, #11]
 8006d80:	2b22      	cmp	r3, #34	@ 0x22
 8006d82:	d002      	beq.n	8006d8a <I2C_ITSlaveCplt+0x56>
 8006d84:	7afb      	ldrb	r3, [r7, #11]
 8006d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d88:	d108      	bne.n	8006d9c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d8a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f000 fcc0 	bl	8007714 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2222      	movs	r2, #34	@ 0x22
 8006d98:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d9a:	e00a      	b.n	8006db2 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	2b28      	cmp	r3, #40	@ 0x28
 8006da0:	d107      	bne.n	8006db2 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8006da2:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 fcb4 	bl	8007714 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dc0:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6859      	ldr	r1, [r3, #4]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8007000 <I2C_ITSlaveCplt+0x2cc>)
 8006dce:	400b      	ands	r3, r1
 8006dd0:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fa85 	bl	80072e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	0b9b      	lsrs	r3, r3, #14
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d013      	beq.n	8006e0c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006df2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d020      	beq.n	8006e3e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	b29a      	uxth	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006e0a:	e018      	b.n	8006e3e <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	0bdb      	lsrs	r3, r3, #15
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d012      	beq.n	8006e3e <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e26:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d006      	beq.n	8006e3e <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	089b      	lsrs	r3, r3, #2
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d020      	beq.n	8006e8c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f023 0304 	bic.w	r3, r3, #4
 8006e50:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	b2d2      	uxtb	r2, r2
 8006e5e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00c      	beq.n	8006e8c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e76:	3b01      	subs	r3, #1
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9a:	f043 0204 	orr.w	r2, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	091b      	lsrs	r3, r3, #4
 8006ea6:	f003 0301 	and.w	r3, r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d04a      	beq.n	8006f44 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	091b      	lsrs	r3, r3, #4
 8006eb2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d044      	beq.n	8006f44 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d128      	bne.n	8006f16 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b28      	cmp	r3, #40	@ 0x28
 8006ece:	d108      	bne.n	8006ee2 <I2C_ITSlaveCplt+0x1ae>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006ed6:	d104      	bne.n	8006ee2 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ed8:	6979      	ldr	r1, [r7, #20]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f894 	bl	8007008 <I2C_ITListenCplt>
 8006ee0:	e030      	b.n	8006f44 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b29      	cmp	r3, #41	@ 0x29
 8006eec:	d10e      	bne.n	8006f0c <I2C_ITSlaveCplt+0x1d8>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006ef4:	d00a      	beq.n	8006f0c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2210      	movs	r2, #16
 8006efc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9ef 	bl	80072e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7ff fded 	bl	8006ae4 <I2C_ITSlaveSeqCplt>
 8006f0a:	e01b      	b.n	8006f44 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2210      	movs	r2, #16
 8006f12:	61da      	str	r2, [r3, #28]
 8006f14:	e016      	b.n	8006f44 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f22:	f043 0204 	orr.w	r2, r3, #4
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <I2C_ITSlaveCplt+0x204>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006f36:	d105      	bne.n	8006f44 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f8b8 	bl	80070b4 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d010      	beq.n	8006f7c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f8a7 	bl	80070b4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b28      	cmp	r3, #40	@ 0x28
 8006f70:	d141      	bne.n	8006ff6 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006f72:	6979      	ldr	r1, [r7, #20]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f847 	bl	8007008 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f7a:	e03c      	b.n	8006ff6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006f84:	d014      	beq.n	8006fb0 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f7ff fdac 	bl	8006ae4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a1d      	ldr	r2, [pc, #116]	@ (8007004 <I2C_ITSlaveCplt+0x2d0>)
 8006f90:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f7fe ff30 	bl	8005e0e <HAL_I2C_ListenCpltCallback>
}
 8006fae:	e022      	b.n	8006ff6 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	2b22      	cmp	r3, #34	@ 0x22
 8006fba:	d10e      	bne.n	8006fda <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f019 fac8 	bl	8020568 <HAL_I2C_SlaveRxCpltCallback>
}
 8006fd8:	e00d      	b.n	8006ff6 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2220      	movs	r2, #32
 8006fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f019 faa3 	bl	802053c <HAL_I2C_SlaveTxCpltCallback>
}
 8006ff6:	bf00      	nop
 8006ff8:	3718      	adds	r7, #24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	fe00e800 	.word	0xfe00e800
 8007004:	ffff0000 	.word	0xffff0000

08007008 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a26      	ldr	r2, [pc, #152]	@ (80070b0 <I2C_ITListenCplt+0xa8>)
 8007016:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	089b      	lsrs	r3, r3, #2
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b00      	cmp	r3, #0
 800703e:	d022      	beq.n	8007086 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800705c:	2b00      	cmp	r3, #0
 800705e:	d012      	beq.n	8007086 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007064:	3b01      	subs	r3, #1
 8007066:	b29a      	uxth	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007070:	b29b      	uxth	r3, r3
 8007072:	3b01      	subs	r3, #1
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800707e:	f043 0204 	orr.w	r2, r3, #4
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007086:	f248 0103 	movw	r1, #32771	@ 0x8003
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 fb42 	bl	8007714 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2210      	movs	r2, #16
 8007096:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f7fe feb4 	bl	8005e0e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80070a6:	bf00      	nop
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
 80070ae:	bf00      	nop
 80070b0:	ffff0000 	.word	0xffff0000

080070b4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b084      	sub	sp, #16
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c4:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a6d      	ldr	r2, [pc, #436]	@ (8007288 <I2C_ITError+0x1d4>)
 80070d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b28      	cmp	r3, #40	@ 0x28
 80070ea:	d005      	beq.n	80070f8 <I2C_ITError+0x44>
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	2b29      	cmp	r3, #41	@ 0x29
 80070f0:	d002      	beq.n	80070f8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f6:	d10b      	bne.n	8007110 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80070f8:	2103      	movs	r1, #3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fb0a 	bl	8007714 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2228      	movs	r2, #40	@ 0x28
 8007104:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a60      	ldr	r2, [pc, #384]	@ (800728c <I2C_ITError+0x1d8>)
 800710c:	635a      	str	r2, [r3, #52]	@ 0x34
 800710e:	e030      	b.n	8007172 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007110:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fafd 	bl	8007714 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f8e1 	bl	80072e2 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007126:	b2db      	uxtb	r3, r3
 8007128:	2b60      	cmp	r3, #96	@ 0x60
 800712a:	d01f      	beq.n	800716c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	f003 0320 	and.w	r3, r3, #32
 800713e:	2b20      	cmp	r3, #32
 8007140:	d114      	bne.n	800716c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f003 0310 	and.w	r3, r3, #16
 800714c:	2b10      	cmp	r3, #16
 800714e:	d109      	bne.n	8007164 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2210      	movs	r2, #16
 8007156:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800715c:	f043 0204 	orr.w	r2, r3, #4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	2220      	movs	r2, #32
 800716a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007176:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800717c:	2b00      	cmp	r3, #0
 800717e:	d039      	beq.n	80071f4 <I2C_ITError+0x140>
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	2b11      	cmp	r3, #17
 8007184:	d002      	beq.n	800718c <I2C_ITError+0xd8>
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2b21      	cmp	r3, #33	@ 0x21
 800718a:	d133      	bne.n	80071f4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007196:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800719a:	d107      	bne.n	80071ac <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b0:	4618      	mov	r0, r3
 80071b2:	f7fc fc45 	bl	8003a40 <HAL_DMA_GetState>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d017      	beq.n	80071ec <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071c0:	4a33      	ldr	r2, [pc, #204]	@ (8007290 <I2C_ITError+0x1dc>)
 80071c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fc fa89 	bl	80036e8 <HAL_DMA_Abort_IT>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d04d      	beq.n	8007278 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80071e6:	4610      	mov	r0, r2
 80071e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071ea:	e045      	b.n	8007278 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f851 	bl	8007294 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80071f2:	e041      	b.n	8007278 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d039      	beq.n	8007270 <I2C_ITError+0x1bc>
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2b12      	cmp	r3, #18
 8007200:	d002      	beq.n	8007208 <I2C_ITError+0x154>
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2b22      	cmp	r3, #34	@ 0x22
 8007206:	d133      	bne.n	8007270 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007212:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007216:	d107      	bne.n	8007228 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007226:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800722c:	4618      	mov	r0, r3
 800722e:	f7fc fc07 	bl	8003a40 <HAL_DMA_GetState>
 8007232:	4603      	mov	r3, r0
 8007234:	2b01      	cmp	r3, #1
 8007236:	d017      	beq.n	8007268 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800723c:	4a14      	ldr	r2, [pc, #80]	@ (8007290 <I2C_ITError+0x1dc>)
 800723e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800724c:	4618      	mov	r0, r3
 800724e:	f7fc fa4b 	bl	80036e8 <HAL_DMA_Abort_IT>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d011      	beq.n	800727c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800725c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007262:	4610      	mov	r0, r2
 8007264:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007266:	e009      	b.n	800727c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f813 	bl	8007294 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800726e:	e005      	b.n	800727c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f80f 	bl	8007294 <I2C_TreatErrorCallback>
  }
}
 8007276:	e002      	b.n	800727e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007278:	bf00      	nop
 800727a:	e000      	b.n	800727e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800727c:	bf00      	nop
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	ffff0000 	.word	0xffff0000
 800728c:	080060f7 	.word	0x080060f7
 8007290:	0800756d 	.word	0x0800756d

08007294 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2b60      	cmp	r3, #96	@ 0x60
 80072a6:	d10e      	bne.n	80072c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2220      	movs	r2, #32
 80072ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7fe fdcd 	bl	8005e5e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80072c4:	e009      	b.n	80072da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	f7fe fdb8 	bl	8005e4a <HAL_I2C_ErrorCallback>
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	f003 0302 	and.w	r3, r3, #2
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d103      	bne.n	8007300 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2200      	movs	r2, #0
 80072fe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	699b      	ldr	r3, [r3, #24]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b01      	cmp	r3, #1
 800730c:	d007      	beq.n	800731e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0201 	orr.w	r2, r2, #1
 800731c:	619a      	str	r2, [r3, #24]
  }
}
 800731e:	bf00      	nop
 8007320:	370c      	adds	r7, #12
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007336:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007346:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800734c:	b29b      	uxth	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d104      	bne.n	800735c <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007352:	2120      	movs	r1, #32
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 f959 	bl	800760c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800735a:	e02d      	b.n	80073b8 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736e:	b29b      	uxth	r3, r3
 8007370:	2bff      	cmp	r3, #255	@ 0xff
 8007372:	d903      	bls.n	800737c <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	22ff      	movs	r2, #255	@ 0xff
 8007378:	851a      	strh	r2, [r3, #40]	@ 0x28
 800737a:	e004      	b.n	8007386 <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007380:	b29a      	uxth	r2, r3
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738e:	4619      	mov	r1, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3328      	adds	r3, #40	@ 0x28
 8007396:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800739c:	f7fc f8d4 	bl	8003548 <HAL_DMA_Start_IT>
 80073a0:	4603      	mov	r3, r0
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80073a6:	2110      	movs	r1, #16
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f7ff fe83 	bl	80070b4 <I2C_ITError>
}
 80073ae:	e003      	b.n	80073b8 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80073b0:	2140      	movs	r1, #64	@ 0x40
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 f92a 	bl	800760c <I2C_Enable_IRQ>
}
 80073b8:	bf00      	nop
 80073ba:	3710      	adds	r7, #16
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <I2C_DMASlaveTransmitCplt>:
  * @brief  DMA I2C slave transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	60bb      	str	r3, [r7, #8]

  if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073da:	d002      	beq.n	80073e2 <I2C_DMASlaveTransmitCplt+0x22>
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <I2C_DMASlaveTransmitCplt+0x38>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80073f0:	601a      	str	r2, [r3, #0]

    /* Last Byte is Transmitted */
    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff fb76 	bl	8006ae4 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740c:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800741c:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007422:	b29b      	uxth	r3, r3
 8007424:	2b00      	cmp	r3, #0
 8007426:	d104      	bne.n	8007432 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007428:	2120      	movs	r1, #32
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 f8ee 	bl	800760c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007430:	e03b      	b.n	80074aa <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800743a:	441a      	add	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2bff      	cmp	r3, #255	@ 0xff
 8007448:	d911      	bls.n	800746e <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	0c1b      	lsrs	r3, r3, #16
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b01      	cmp	r3, #1
 800745c:	d103      	bne.n	8007466 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2201      	movs	r2, #1
 8007462:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007464:	e008      	b.n	8007478 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	22ff      	movs	r2, #255	@ 0xff
 800746a:	851a      	strh	r2, [r3, #40]	@ 0x28
 800746c:	e004      	b.n	8007478 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007472:	b29a      	uxth	r2, r3
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3324      	adds	r3, #36	@ 0x24
 8007482:	4619      	mov	r1, r3
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007488:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800748e:	f7fc f85b 	bl	8003548 <HAL_DMA_Start_IT>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8007498:	2110      	movs	r1, #16
 800749a:	68f8      	ldr	r0, [r7, #12]
 800749c:	f7ff fe0a 	bl	80070b4 <I2C_ITError>
}
 80074a0:	e003      	b.n	80074aa <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 80074a2:	2140      	movs	r1, #64	@ 0x40
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f000 f8b1 	bl	800760c <I2C_Enable_IRQ>
}
 80074aa:	bf00      	nop
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <I2C_DMASlaveReceiveCplt>:
  * @brief  DMA I2C slave receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMASlaveReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpoptions = hi2c->XferOptions;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c4:	60bb      	str	r3, [r7, #8]

  if ((I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U) && \
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10e      	bne.n	80074f0 <I2C_DMASlaveReceiveCplt+0x3e>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80074d8:	d00a      	beq.n	80074f0 <I2C_DMASlaveReceiveCplt+0x3e>
      (tmpoptions != I2C_NO_OPTION_FRAME))
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074e8:	601a      	str	r2, [r3, #0]

    /* Call I2C Slave Sequential complete process */
    I2C_ITSlaveSeqCplt(hi2c);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff fafa 	bl	8006ae4 <I2C_ITSlaveSeqCplt>
  {
    /* No specific action, Master fully manage the generation of STOP condition */
    /* Mean that this generation can arrive at any time, at the end or during DMA process */
    /* So STOP condition should be manage through Interrupt treatment */
  }
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8007500:	2300      	movs	r3, #0
 8007502:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007508:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800751e:	2301      	movs	r3, #1
 8007520:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d007      	beq.n	800753a <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8007536:	2301      	movs	r3, #1
 8007538:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fc fa8e 	bl	8003a5c <HAL_DMA_GetError>
 8007540:	4603      	mov	r3, r0
 8007542:	2b02      	cmp	r3, #2
 8007544:	d00e      	beq.n	8007564 <I2C_DMAError+0x6c>
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00b      	beq.n	8007564 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800755a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800755c:	2110      	movs	r1, #16
 800755e:	68b8      	ldr	r0, [r7, #8]
 8007560:	f7ff fda8 	bl	80070b4 <I2C_ITError>
  }
}
 8007564:	bf00      	nop
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007578:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800757e:	2b00      	cmp	r3, #0
 8007580:	d003      	beq.n	800758a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	2200      	movs	r2, #0
 8007588:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007596:	2200      	movs	r2, #0
 8007598:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff fe7a 	bl	8007294 <I2C_TreatErrorCallback>
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	460b      	mov	r3, r1
 80075b4:	817b      	strh	r3, [r7, #10]
 80075b6:	4613      	mov	r3, r2
 80075b8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ba:	897b      	ldrh	r3, [r7, #10]
 80075bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075c0:	7a7b      	ldrb	r3, [r7, #9]
 80075c2:	041b      	lsls	r3, r3, #16
 80075c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075c8:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075d6:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	0d5b      	lsrs	r3, r3, #21
 80075e2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80075e6:	4b08      	ldr	r3, [pc, #32]	@ (8007608 <I2C_TransferConfig+0x60>)
 80075e8:	430b      	orrs	r3, r1
 80075ea:	43db      	mvns	r3, r3
 80075ec:	ea02 0103 	and.w	r1, r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	430a      	orrs	r2, r1
 80075f8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	03ff63ff 	.word	0x03ff63ff

0800760c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007620:	4a39      	ldr	r2, [pc, #228]	@ (8007708 <I2C_Enable_IRQ+0xfc>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d032      	beq.n	800768c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800762a:	4a38      	ldr	r2, [pc, #224]	@ (800770c <I2C_Enable_IRQ+0x100>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d02d      	beq.n	800768c <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007634:	4a36      	ldr	r2, [pc, #216]	@ (8007710 <I2C_Enable_IRQ+0x104>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d028      	beq.n	800768c <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800763a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800763e:	2b00      	cmp	r3, #0
 8007640:	da03      	bge.n	800764a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007648:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800764a:	887b      	ldrh	r3, [r7, #2]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800765a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800765c:	887b      	ldrh	r3, [r7, #2]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d003      	beq.n	800766e <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800766c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800766e:	887b      	ldrh	r3, [r7, #2]
 8007670:	2b10      	cmp	r3, #16
 8007672:	d103      	bne.n	800767c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800767a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800767c:	887b      	ldrh	r3, [r7, #2]
 800767e:	2b20      	cmp	r3, #32
 8007680:	d133      	bne.n	80076ea <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f043 0320 	orr.w	r3, r3, #32
 8007688:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800768a:	e02e      	b.n	80076ea <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800768c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007690:	2b00      	cmp	r3, #0
 8007692:	da03      	bge.n	800769c <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800769a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800769c:	887b      	ldrh	r3, [r7, #2]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80076ac:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80076ae:	887b      	ldrh	r3, [r7, #2]
 80076b0:	f003 0302 	and.w	r3, r3, #2
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80076be:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80076c0:	887b      	ldrh	r3, [r7, #2]
 80076c2:	2b10      	cmp	r3, #16
 80076c4:	d103      	bne.n	80076ce <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80076cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80076ce:	887b      	ldrh	r3, [r7, #2]
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d103      	bne.n	80076dc <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80076da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80076dc:	887b      	ldrh	r3, [r7, #2]
 80076de:	2b40      	cmp	r3, #64	@ 0x40
 80076e0:	d103      	bne.n	80076ea <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e8:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	6819      	ldr	r1, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	430a      	orrs	r2, r1
 80076f8:	601a      	str	r2, [r3, #0]
}
 80076fa:	bf00      	nop
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
 8007706:	bf00      	nop
 8007708:	080062ff 	.word	0x080062ff
 800770c:	080067a1 	.word	0x080067a1
 8007710:	08006505 	.word	0x08006505

08007714 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007724:	887b      	ldrh	r3, [r7, #2]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00f      	beq.n	800774e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007734:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800773c:	b2db      	uxtb	r3, r3
 800773e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007742:	2b28      	cmp	r3, #40	@ 0x28
 8007744:	d003      	beq.n	800774e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800774c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800774e:	887b      	ldrh	r3, [r7, #2]
 8007750:	f003 0302 	and.w	r3, r3, #2
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00f      	beq.n	8007778 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800775e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007766:	b2db      	uxtb	r3, r3
 8007768:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800776c:	2b28      	cmp	r3, #40	@ 0x28
 800776e:	d003      	beq.n	8007778 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8007776:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8007778:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800777c:	2b00      	cmp	r3, #0
 800777e:	da03      	bge.n	8007788 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007786:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007788:	887b      	ldrh	r3, [r7, #2]
 800778a:	2b10      	cmp	r3, #16
 800778c:	d103      	bne.n	8007796 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8007794:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8007796:	887b      	ldrh	r3, [r7, #2]
 8007798:	2b20      	cmp	r3, #32
 800779a:	d103      	bne.n	80077a4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	f043 0320 	orr.w	r3, r3, #32
 80077a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80077a4:	887b      	ldrh	r3, [r7, #2]
 80077a6:	2b40      	cmp	r3, #64	@ 0x40
 80077a8:	d103      	bne.n	80077b2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077b0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	6819      	ldr	r1, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	43da      	mvns	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	400a      	ands	r2, r1
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d138      	bne.n	8007858 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d101      	bne.n	80077f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80077f0:	2302      	movs	r3, #2
 80077f2:	e032      	b.n	800785a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2201      	movs	r2, #1
 80077f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2224      	movs	r2, #36	@ 0x24
 8007800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f022 0201 	bic.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007822:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6819      	ldr	r1, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	430a      	orrs	r2, r1
 8007832:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	f042 0201 	orr.w	r2, r2, #1
 8007842:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2220      	movs	r2, #32
 8007848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007854:	2300      	movs	r3, #0
 8007856:	e000      	b.n	800785a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007858:	2302      	movs	r3, #2
  }
}
 800785a:	4618      	mov	r0, r3
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b20      	cmp	r3, #32
 800787a:	d139      	bne.n	80078f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007886:	2302      	movs	r3, #2
 8007888:	e033      	b.n	80078f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2224      	movs	r2, #36	@ 0x24
 8007896:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0201 	bic.w	r2, r2, #1
 80078a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80078b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	021b      	lsls	r3, r3, #8
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0201 	orr.w	r2, r2, #1
 80078da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	e000      	b.n	80078f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80078f0:	2302      	movs	r3, #2
  }
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3714      	adds	r7, #20
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
	...

08007900 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007906:	2300      	movs	r3, #0
 8007908:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800790a:	4b23      	ldr	r3, [pc, #140]	@ (8007998 <HAL_PWREx_EnableOverDrive+0x98>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790e:	4a22      	ldr	r2, [pc, #136]	@ (8007998 <HAL_PWREx_EnableOverDrive+0x98>)
 8007910:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007914:	6413      	str	r3, [r2, #64]	@ 0x40
 8007916:	4b20      	ldr	r3, [pc, #128]	@ (8007998 <HAL_PWREx_EnableOverDrive+0x98>)
 8007918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007922:	4b1e      	ldr	r3, [pc, #120]	@ (800799c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a1d      	ldr	r2, [pc, #116]	@ (800799c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800792c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800792e:	f7fa fdbb 	bl	80024a8 <HAL_GetTick>
 8007932:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007934:	e009      	b.n	800794a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007936:	f7fa fdb7 	bl	80024a8 <HAL_GetTick>
 800793a:	4602      	mov	r2, r0
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	1ad3      	subs	r3, r2, r3
 8007940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007944:	d901      	bls.n	800794a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007946:	2303      	movs	r3, #3
 8007948:	e022      	b.n	8007990 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800794a:	4b14      	ldr	r3, [pc, #80]	@ (800799c <HAL_PWREx_EnableOverDrive+0x9c>)
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007956:	d1ee      	bne.n	8007936 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007958:	4b10      	ldr	r3, [pc, #64]	@ (800799c <HAL_PWREx_EnableOverDrive+0x9c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a0f      	ldr	r2, [pc, #60]	@ (800799c <HAL_PWREx_EnableOverDrive+0x9c>)
 800795e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007962:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007964:	f7fa fda0 	bl	80024a8 <HAL_GetTick>
 8007968:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800796a:	e009      	b.n	8007980 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800796c:	f7fa fd9c 	bl	80024a8 <HAL_GetTick>
 8007970:	4602      	mov	r2, r0
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800797a:	d901      	bls.n	8007980 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800797c:	2303      	movs	r3, #3
 800797e:	e007      	b.n	8007990 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007980:	4b06      	ldr	r3, [pc, #24]	@ (800799c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007988:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800798c:	d1ee      	bne.n	800796c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	40023800 	.word	0x40023800
 800799c:	40007000 	.word	0x40007000

080079a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80079a8:	2300      	movs	r3, #0
 80079aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d101      	bne.n	80079b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e291      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0301 	and.w	r3, r3, #1
 80079be:	2b00      	cmp	r3, #0
 80079c0:	f000 8087 	beq.w	8007ad2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079c4:	4b96      	ldr	r3, [pc, #600]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 030c 	and.w	r3, r3, #12
 80079cc:	2b04      	cmp	r3, #4
 80079ce:	d00c      	beq.n	80079ea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079d0:	4b93      	ldr	r3, [pc, #588]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 030c 	and.w	r3, r3, #12
 80079d8:	2b08      	cmp	r3, #8
 80079da:	d112      	bne.n	8007a02 <HAL_RCC_OscConfig+0x62>
 80079dc:	4b90      	ldr	r3, [pc, #576]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80079e8:	d10b      	bne.n	8007a02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d06c      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x130>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d168      	bne.n	8007ad0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e26b      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a0a:	d106      	bne.n	8007a1a <HAL_RCC_OscConfig+0x7a>
 8007a0c:	4b84      	ldr	r3, [pc, #528]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a83      	ldr	r2, [pc, #524]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a16:	6013      	str	r3, [r2, #0]
 8007a18:	e02e      	b.n	8007a78 <HAL_RCC_OscConfig+0xd8>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10c      	bne.n	8007a3c <HAL_RCC_OscConfig+0x9c>
 8007a22:	4b7f      	ldr	r3, [pc, #508]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a7e      	ldr	r2, [pc, #504]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	4b7c      	ldr	r3, [pc, #496]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a7b      	ldr	r2, [pc, #492]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	e01d      	b.n	8007a78 <HAL_RCC_OscConfig+0xd8>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a44:	d10c      	bne.n	8007a60 <HAL_RCC_OscConfig+0xc0>
 8007a46:	4b76      	ldr	r3, [pc, #472]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a75      	ldr	r2, [pc, #468]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a50:	6013      	str	r3, [r2, #0]
 8007a52:	4b73      	ldr	r3, [pc, #460]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a72      	ldr	r2, [pc, #456]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	e00b      	b.n	8007a78 <HAL_RCC_OscConfig+0xd8>
 8007a60:	4b6f      	ldr	r3, [pc, #444]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a6e      	ldr	r2, [pc, #440]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a6a:	6013      	str	r3, [r2, #0]
 8007a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a6b      	ldr	r2, [pc, #428]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d013      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a80:	f7fa fd12 	bl	80024a8 <HAL_GetTick>
 8007a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a86:	e008      	b.n	8007a9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a88:	f7fa fd0e 	bl	80024a8 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b64      	cmp	r3, #100	@ 0x64
 8007a94:	d901      	bls.n	8007a9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e21f      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a9a:	4b61      	ldr	r3, [pc, #388]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d0f0      	beq.n	8007a88 <HAL_RCC_OscConfig+0xe8>
 8007aa6:	e014      	b.n	8007ad2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa8:	f7fa fcfe 	bl	80024a8 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ab0:	f7fa fcfa 	bl	80024a8 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b64      	cmp	r3, #100	@ 0x64
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e20b      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ac2:	4b57      	ldr	r3, [pc, #348]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f0      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x110>
 8007ace:	e000      	b.n	8007ad2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d069      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007ade:	4b50      	ldr	r3, [pc, #320]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f003 030c 	and.w	r3, r3, #12
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d00b      	beq.n	8007b02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007aea:	4b4d      	ldr	r3, [pc, #308]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 030c 	and.w	r3, r3, #12
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d11c      	bne.n	8007b30 <HAL_RCC_OscConfig+0x190>
 8007af6:	4b4a      	ldr	r3, [pc, #296]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d116      	bne.n	8007b30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b02:	4b47      	ldr	r3, [pc, #284]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d005      	beq.n	8007b1a <HAL_RCC_OscConfig+0x17a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d001      	beq.n	8007b1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e1df      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b1a:	4b41      	ldr	r3, [pc, #260]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	00db      	lsls	r3, r3, #3
 8007b28:	493d      	ldr	r1, [pc, #244]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b2e:	e040      	b.n	8007bb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d023      	beq.n	8007b80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b38:	4b39      	ldr	r3, [pc, #228]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a38      	ldr	r2, [pc, #224]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b44:	f7fa fcb0 	bl	80024a8 <HAL_GetTick>
 8007b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b4c:	f7fa fcac 	bl	80024a8 <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e1bd      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b5e:	4b30      	ldr	r3, [pc, #192]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f0      	beq.n	8007b4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	4929      	ldr	r1, [pc, #164]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	600b      	str	r3, [r1, #0]
 8007b7e:	e018      	b.n	8007bb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b80:	4b27      	ldr	r3, [pc, #156]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a26      	ldr	r2, [pc, #152]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007b86:	f023 0301 	bic.w	r3, r3, #1
 8007b8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8c:	f7fa fc8c 	bl	80024a8 <HAL_GetTick>
 8007b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b92:	e008      	b.n	8007ba6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b94:	f7fa fc88 	bl	80024a8 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e199      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1f0      	bne.n	8007b94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d038      	beq.n	8007c30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d019      	beq.n	8007bfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bc6:	4b16      	ldr	r3, [pc, #88]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007bc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bca:	4a15      	ldr	r2, [pc, #84]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007bcc:	f043 0301 	orr.w	r3, r3, #1
 8007bd0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd2:	f7fa fc69 	bl	80024a8 <HAL_GetTick>
 8007bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bd8:	e008      	b.n	8007bec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bda:	f7fa fc65 	bl	80024a8 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d901      	bls.n	8007bec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e176      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bec:	4b0c      	ldr	r3, [pc, #48]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007bee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf0:	f003 0302 	and.w	r3, r3, #2
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d0f0      	beq.n	8007bda <HAL_RCC_OscConfig+0x23a>
 8007bf8:	e01a      	b.n	8007c30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bfa:	4b09      	ldr	r3, [pc, #36]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bfe:	4a08      	ldr	r2, [pc, #32]	@ (8007c20 <HAL_RCC_OscConfig+0x280>)
 8007c00:	f023 0301 	bic.w	r3, r3, #1
 8007c04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c06:	f7fa fc4f 	bl	80024a8 <HAL_GetTick>
 8007c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c0c:	e00a      	b.n	8007c24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c0e:	f7fa fc4b 	bl	80024a8 <HAL_GetTick>
 8007c12:	4602      	mov	r2, r0
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	1ad3      	subs	r3, r2, r3
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d903      	bls.n	8007c24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007c1c:	2303      	movs	r3, #3
 8007c1e:	e15c      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
 8007c20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c24:	4b91      	ldr	r3, [pc, #580]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c28:	f003 0302 	and.w	r3, r3, #2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1ee      	bne.n	8007c0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 80a4 	beq.w	8007d86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c3e:	4b8b      	ldr	r3, [pc, #556]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007c40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10d      	bne.n	8007c66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c4a:	4b88      	ldr	r3, [pc, #544]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4e:	4a87      	ldr	r2, [pc, #540]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c56:	4b85      	ldr	r3, [pc, #532]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c5e:	60bb      	str	r3, [r7, #8]
 8007c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c62:	2301      	movs	r3, #1
 8007c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c66:	4b82      	ldr	r3, [pc, #520]	@ (8007e70 <HAL_RCC_OscConfig+0x4d0>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d118      	bne.n	8007ca4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c72:	4b7f      	ldr	r3, [pc, #508]	@ (8007e70 <HAL_RCC_OscConfig+0x4d0>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a7e      	ldr	r2, [pc, #504]	@ (8007e70 <HAL_RCC_OscConfig+0x4d0>)
 8007c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c7e:	f7fa fc13 	bl	80024a8 <HAL_GetTick>
 8007c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c84:	e008      	b.n	8007c98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c86:	f7fa fc0f 	bl	80024a8 <HAL_GetTick>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	2b64      	cmp	r3, #100	@ 0x64
 8007c92:	d901      	bls.n	8007c98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c94:	2303      	movs	r3, #3
 8007c96:	e120      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c98:	4b75      	ldr	r3, [pc, #468]	@ (8007e70 <HAL_RCC_OscConfig+0x4d0>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d0f0      	beq.n	8007c86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d106      	bne.n	8007cba <HAL_RCC_OscConfig+0x31a>
 8007cac:	4b6f      	ldr	r3, [pc, #444]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cb0:	4a6e      	ldr	r2, [pc, #440]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cb2:	f043 0301 	orr.w	r3, r3, #1
 8007cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cb8:	e02d      	b.n	8007d16 <HAL_RCC_OscConfig+0x376>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10c      	bne.n	8007cdc <HAL_RCC_OscConfig+0x33c>
 8007cc2:	4b6a      	ldr	r3, [pc, #424]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cc6:	4a69      	ldr	r2, [pc, #420]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cc8:	f023 0301 	bic.w	r3, r3, #1
 8007ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cce:	4b67      	ldr	r3, [pc, #412]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd2:	4a66      	ldr	r2, [pc, #408]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cd4:	f023 0304 	bic.w	r3, r3, #4
 8007cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cda:	e01c      	b.n	8007d16 <HAL_RCC_OscConfig+0x376>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b05      	cmp	r3, #5
 8007ce2:	d10c      	bne.n	8007cfe <HAL_RCC_OscConfig+0x35e>
 8007ce4:	4b61      	ldr	r3, [pc, #388]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ce8:	4a60      	ldr	r2, [pc, #384]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cea:	f043 0304 	orr.w	r3, r3, #4
 8007cee:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cf0:	4b5e      	ldr	r3, [pc, #376]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cfc:	e00b      	b.n	8007d16 <HAL_RCC_OscConfig+0x376>
 8007cfe:	4b5b      	ldr	r3, [pc, #364]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d02:	4a5a      	ldr	r2, [pc, #360]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d04:	f023 0301 	bic.w	r3, r3, #1
 8007d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d0a:	4b58      	ldr	r3, [pc, #352]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d0e:	4a57      	ldr	r2, [pc, #348]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d10:	f023 0304 	bic.w	r3, r3, #4
 8007d14:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d015      	beq.n	8007d4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d1e:	f7fa fbc3 	bl	80024a8 <HAL_GetTick>
 8007d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d24:	e00a      	b.n	8007d3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d26:	f7fa fbbf 	bl	80024a8 <HAL_GetTick>
 8007d2a:	4602      	mov	r2, r0
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	1ad3      	subs	r3, r2, r3
 8007d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d901      	bls.n	8007d3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e0ce      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d3c:	4b4b      	ldr	r3, [pc, #300]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d40:	f003 0302 	and.w	r3, r3, #2
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0ee      	beq.n	8007d26 <HAL_RCC_OscConfig+0x386>
 8007d48:	e014      	b.n	8007d74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d4a:	f7fa fbad 	bl	80024a8 <HAL_GetTick>
 8007d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d50:	e00a      	b.n	8007d68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d52:	f7fa fba9 	bl	80024a8 <HAL_GetTick>
 8007d56:	4602      	mov	r2, r0
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e0b8      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d68:	4b40      	ldr	r3, [pc, #256]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6c:	f003 0302 	and.w	r3, r3, #2
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1ee      	bne.n	8007d52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d105      	bne.n	8007d86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d7e:	4a3b      	ldr	r2, [pc, #236]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d84:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80a4 	beq.w	8007ed8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d90:	4b36      	ldr	r3, [pc, #216]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f003 030c 	and.w	r3, r3, #12
 8007d98:	2b08      	cmp	r3, #8
 8007d9a:	d06b      	beq.n	8007e74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	2b02      	cmp	r3, #2
 8007da2:	d149      	bne.n	8007e38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007da4:	4b31      	ldr	r3, [pc, #196]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a30      	ldr	r2, [pc, #192]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007db0:	f7fa fb7a 	bl	80024a8 <HAL_GetTick>
 8007db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007db6:	e008      	b.n	8007dca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007db8:	f7fa fb76 	bl	80024a8 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d901      	bls.n	8007dca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e087      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dca:	4b28      	ldr	r3, [pc, #160]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1f0      	bne.n	8007db8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	69da      	ldr	r2, [r3, #28]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a1b      	ldr	r3, [r3, #32]
 8007dde:	431a      	orrs	r2, r3
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de4:	019b      	lsls	r3, r3, #6
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dec:	085b      	lsrs	r3, r3, #1
 8007dee:	3b01      	subs	r3, #1
 8007df0:	041b      	lsls	r3, r3, #16
 8007df2:	431a      	orrs	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df8:	061b      	lsls	r3, r3, #24
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007dfe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e04:	4b19      	ldr	r3, [pc, #100]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a18      	ldr	r2, [pc, #96]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007e0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e10:	f7fa fb4a 	bl	80024a8 <HAL_GetTick>
 8007e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e16:	e008      	b.n	8007e2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e18:	f7fa fb46 	bl	80024a8 <HAL_GetTick>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	1ad3      	subs	r3, r2, r3
 8007e22:	2b02      	cmp	r3, #2
 8007e24:	d901      	bls.n	8007e2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e057      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e2a:	4b10      	ldr	r3, [pc, #64]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0f0      	beq.n	8007e18 <HAL_RCC_OscConfig+0x478>
 8007e36:	e04f      	b.n	8007ed8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e38:	4b0c      	ldr	r3, [pc, #48]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007e3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e44:	f7fa fb30 	bl	80024a8 <HAL_GetTick>
 8007e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e4a:	e008      	b.n	8007e5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e4c:	f7fa fb2c 	bl	80024a8 <HAL_GetTick>
 8007e50:	4602      	mov	r2, r0
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d901      	bls.n	8007e5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e03d      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e5e:	4b03      	ldr	r3, [pc, #12]	@ (8007e6c <HAL_RCC_OscConfig+0x4cc>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d1f0      	bne.n	8007e4c <HAL_RCC_OscConfig+0x4ac>
 8007e6a:	e035      	b.n	8007ed8 <HAL_RCC_OscConfig+0x538>
 8007e6c:	40023800 	.word	0x40023800
 8007e70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e74:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee4 <HAL_RCC_OscConfig+0x544>)
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d028      	beq.n	8007ed4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d121      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d11a      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e9e:	68fa      	ldr	r2, [r7, #12]
 8007ea0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	687a      	ldr	r2, [r7, #4]
 8007ea8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007eaa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d111      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eba:	085b      	lsrs	r3, r3, #1
 8007ebc:	3b01      	subs	r3, #1
 8007ebe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d107      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ece:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d001      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	e000      	b.n	8007eda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3718      	adds	r7, #24
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	40023800 	.word	0x40023800

08007ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e0d0      	b.n	80080a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f00:	4b6a      	ldr	r3, [pc, #424]	@ (80080ac <HAL_RCC_ClockConfig+0x1c4>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 030f 	and.w	r3, r3, #15
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d910      	bls.n	8007f30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f0e:	4b67      	ldr	r3, [pc, #412]	@ (80080ac <HAL_RCC_ClockConfig+0x1c4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f023 020f 	bic.w	r2, r3, #15
 8007f16:	4965      	ldr	r1, [pc, #404]	@ (80080ac <HAL_RCC_ClockConfig+0x1c4>)
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f1e:	4b63      	ldr	r3, [pc, #396]	@ (80080ac <HAL_RCC_ClockConfig+0x1c4>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f003 030f 	and.w	r3, r3, #15
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d001      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e0b8      	b.n	80080a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0302 	and.w	r3, r3, #2
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d020      	beq.n	8007f7e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 0304 	and.w	r3, r3, #4
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f48:	4b59      	ldr	r3, [pc, #356]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	4a58      	ldr	r2, [pc, #352]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007f52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0308 	and.w	r3, r3, #8
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f60:	4b53      	ldr	r3, [pc, #332]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	4a52      	ldr	r2, [pc, #328]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007f6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f6c:	4b50      	ldr	r3, [pc, #320]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	494d      	ldr	r1, [pc, #308]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d040      	beq.n	800800c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d107      	bne.n	8007fa2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f92:	4b47      	ldr	r3, [pc, #284]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d115      	bne.n	8007fca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e07f      	b.n	80080a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	d107      	bne.n	8007fba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007faa:	4b41      	ldr	r3, [pc, #260]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d109      	bne.n	8007fca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	e073      	b.n	80080a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fba:	4b3d      	ldr	r3, [pc, #244]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0302 	and.w	r3, r3, #2
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e06b      	b.n	80080a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fca:	4b39      	ldr	r3, [pc, #228]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f023 0203 	bic.w	r2, r3, #3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	4936      	ldr	r1, [pc, #216]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007fd8:	4313      	orrs	r3, r2
 8007fda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fdc:	f7fa fa64 	bl	80024a8 <HAL_GetTick>
 8007fe0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fe2:	e00a      	b.n	8007ffa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fe4:	f7fa fa60 	bl	80024a8 <HAL_GetTick>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e053      	b.n	80080a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	f003 020c 	and.w	r2, r3, #12
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	429a      	cmp	r2, r3
 800800a:	d1eb      	bne.n	8007fe4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800800c:	4b27      	ldr	r3, [pc, #156]	@ (80080ac <HAL_RCC_ClockConfig+0x1c4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	683a      	ldr	r2, [r7, #0]
 8008016:	429a      	cmp	r2, r3
 8008018:	d210      	bcs.n	800803c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800801a:	4b24      	ldr	r3, [pc, #144]	@ (80080ac <HAL_RCC_ClockConfig+0x1c4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f023 020f 	bic.w	r2, r3, #15
 8008022:	4922      	ldr	r1, [pc, #136]	@ (80080ac <HAL_RCC_ClockConfig+0x1c4>)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	4313      	orrs	r3, r2
 8008028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800802a:	4b20      	ldr	r3, [pc, #128]	@ (80080ac <HAL_RCC_ClockConfig+0x1c4>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 030f 	and.w	r3, r3, #15
 8008032:	683a      	ldr	r2, [r7, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d001      	beq.n	800803c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e032      	b.n	80080a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d008      	beq.n	800805a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008048:	4b19      	ldr	r3, [pc, #100]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	4916      	ldr	r1, [pc, #88]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008056:	4313      	orrs	r3, r2
 8008058:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f003 0308 	and.w	r3, r3, #8
 8008062:	2b00      	cmp	r3, #0
 8008064:	d009      	beq.n	800807a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008066:	4b12      	ldr	r3, [pc, #72]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	691b      	ldr	r3, [r3, #16]
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	490e      	ldr	r1, [pc, #56]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008076:	4313      	orrs	r3, r2
 8008078:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800807a:	f000 f821 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 800807e:	4602      	mov	r2, r0
 8008080:	4b0b      	ldr	r3, [pc, #44]	@ (80080b0 <HAL_RCC_ClockConfig+0x1c8>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	091b      	lsrs	r3, r3, #4
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	490a      	ldr	r1, [pc, #40]	@ (80080b4 <HAL_RCC_ClockConfig+0x1cc>)
 800808c:	5ccb      	ldrb	r3, [r1, r3]
 800808e:	fa22 f303 	lsr.w	r3, r2, r3
 8008092:	4a09      	ldr	r2, [pc, #36]	@ (80080b8 <HAL_RCC_ClockConfig+0x1d0>)
 8008094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008096:	4b09      	ldr	r3, [pc, #36]	@ (80080bc <HAL_RCC_ClockConfig+0x1d4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4618      	mov	r0, r3
 800809c:	f7f9 fb5a 	bl	8001754 <HAL_InitTick>

  return HAL_OK;
 80080a0:	2300      	movs	r3, #0
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40023c00 	.word	0x40023c00
 80080b0:	40023800 	.word	0x40023800
 80080b4:	08026c0c 	.word	0x08026c0c
 80080b8:	20000000 	.word	0x20000000
 80080bc:	20000004 	.word	0x20000004

080080c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080c4:	b090      	sub	sp, #64	@ 0x40
 80080c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80080c8:	2300      	movs	r3, #0
 80080ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80080cc:	2300      	movs	r3, #0
 80080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80080d0:	2300      	movs	r3, #0
 80080d2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080d8:	4b59      	ldr	r3, [pc, #356]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f003 030c 	and.w	r3, r3, #12
 80080e0:	2b08      	cmp	r3, #8
 80080e2:	d00d      	beq.n	8008100 <HAL_RCC_GetSysClockFreq+0x40>
 80080e4:	2b08      	cmp	r3, #8
 80080e6:	f200 80a1 	bhi.w	800822c <HAL_RCC_GetSysClockFreq+0x16c>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <HAL_RCC_GetSysClockFreq+0x34>
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	d003      	beq.n	80080fa <HAL_RCC_GetSysClockFreq+0x3a>
 80080f2:	e09b      	b.n	800822c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080f4:	4b53      	ldr	r3, [pc, #332]	@ (8008244 <HAL_RCC_GetSysClockFreq+0x184>)
 80080f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080f8:	e09b      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080fa:	4b53      	ldr	r3, [pc, #332]	@ (8008248 <HAL_RCC_GetSysClockFreq+0x188>)
 80080fc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80080fe:	e098      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008100:	4b4f      	ldr	r3, [pc, #316]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008108:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800810a:	4b4d      	ldr	r3, [pc, #308]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008112:	2b00      	cmp	r3, #0
 8008114:	d028      	beq.n	8008168 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008116:	4b4a      	ldr	r3, [pc, #296]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	099b      	lsrs	r3, r3, #6
 800811c:	2200      	movs	r2, #0
 800811e:	623b      	str	r3, [r7, #32]
 8008120:	627a      	str	r2, [r7, #36]	@ 0x24
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008128:	2100      	movs	r1, #0
 800812a:	4b47      	ldr	r3, [pc, #284]	@ (8008248 <HAL_RCC_GetSysClockFreq+0x188>)
 800812c:	fb03 f201 	mul.w	r2, r3, r1
 8008130:	2300      	movs	r3, #0
 8008132:	fb00 f303 	mul.w	r3, r0, r3
 8008136:	4413      	add	r3, r2
 8008138:	4a43      	ldr	r2, [pc, #268]	@ (8008248 <HAL_RCC_GetSysClockFreq+0x188>)
 800813a:	fba0 1202 	umull	r1, r2, r0, r2
 800813e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008140:	460a      	mov	r2, r1
 8008142:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008146:	4413      	add	r3, r2
 8008148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800814a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814c:	2200      	movs	r2, #0
 800814e:	61bb      	str	r3, [r7, #24]
 8008150:	61fa      	str	r2, [r7, #28]
 8008152:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008156:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800815a:	f7f8 f8a9 	bl	80002b0 <__aeabi_uldivmod>
 800815e:	4602      	mov	r2, r0
 8008160:	460b      	mov	r3, r1
 8008162:	4613      	mov	r3, r2
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008166:	e053      	b.n	8008210 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008168:	4b35      	ldr	r3, [pc, #212]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 800816a:	685b      	ldr	r3, [r3, #4]
 800816c:	099b      	lsrs	r3, r3, #6
 800816e:	2200      	movs	r2, #0
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	617a      	str	r2, [r7, #20]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800817a:	f04f 0b00 	mov.w	fp, #0
 800817e:	4652      	mov	r2, sl
 8008180:	465b      	mov	r3, fp
 8008182:	f04f 0000 	mov.w	r0, #0
 8008186:	f04f 0100 	mov.w	r1, #0
 800818a:	0159      	lsls	r1, r3, #5
 800818c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008190:	0150      	lsls	r0, r2, #5
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	ebb2 080a 	subs.w	r8, r2, sl
 800819a:	eb63 090b 	sbc.w	r9, r3, fp
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	f04f 0300 	mov.w	r3, #0
 80081a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80081aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80081ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80081b2:	ebb2 0408 	subs.w	r4, r2, r8
 80081b6:	eb63 0509 	sbc.w	r5, r3, r9
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	00eb      	lsls	r3, r5, #3
 80081c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80081c8:	00e2      	lsls	r2, r4, #3
 80081ca:	4614      	mov	r4, r2
 80081cc:	461d      	mov	r5, r3
 80081ce:	eb14 030a 	adds.w	r3, r4, sl
 80081d2:	603b      	str	r3, [r7, #0]
 80081d4:	eb45 030b 	adc.w	r3, r5, fp
 80081d8:	607b      	str	r3, [r7, #4]
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80081e6:	4629      	mov	r1, r5
 80081e8:	028b      	lsls	r3, r1, #10
 80081ea:	4621      	mov	r1, r4
 80081ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80081f0:	4621      	mov	r1, r4
 80081f2:	028a      	lsls	r2, r1, #10
 80081f4:	4610      	mov	r0, r2
 80081f6:	4619      	mov	r1, r3
 80081f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081fa:	2200      	movs	r2, #0
 80081fc:	60bb      	str	r3, [r7, #8]
 80081fe:	60fa      	str	r2, [r7, #12]
 8008200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008204:	f7f8 f854 	bl	80002b0 <__aeabi_uldivmod>
 8008208:	4602      	mov	r2, r0
 800820a:	460b      	mov	r3, r1
 800820c:	4613      	mov	r3, r2
 800820e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <HAL_RCC_GetSysClockFreq+0x180>)
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	0c1b      	lsrs	r3, r3, #16
 8008216:	f003 0303 	and.w	r3, r3, #3
 800821a:	3301      	adds	r3, #1
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008220:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008224:	fbb2 f3f3 	udiv	r3, r2, r3
 8008228:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800822a:	e002      	b.n	8008232 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_RCC_GetSysClockFreq+0x184>)
 800822e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008230:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008234:	4618      	mov	r0, r3
 8008236:	3740      	adds	r7, #64	@ 0x40
 8008238:	46bd      	mov	sp, r7
 800823a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800823e:	bf00      	nop
 8008240:	40023800 	.word	0x40023800
 8008244:	00f42400 	.word	0x00f42400
 8008248:	017d7840 	.word	0x017d7840

0800824c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008250:	4b03      	ldr	r3, [pc, #12]	@ (8008260 <HAL_RCC_GetHCLKFreq+0x14>)
 8008252:	681b      	ldr	r3, [r3, #0]
}
 8008254:	4618      	mov	r0, r3
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	20000000 	.word	0x20000000

08008264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008268:	f7ff fff0 	bl	800824c <HAL_RCC_GetHCLKFreq>
 800826c:	4602      	mov	r2, r0
 800826e:	4b05      	ldr	r3, [pc, #20]	@ (8008284 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	0a9b      	lsrs	r3, r3, #10
 8008274:	f003 0307 	and.w	r3, r3, #7
 8008278:	4903      	ldr	r1, [pc, #12]	@ (8008288 <HAL_RCC_GetPCLK1Freq+0x24>)
 800827a:	5ccb      	ldrb	r3, [r1, r3]
 800827c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008280:	4618      	mov	r0, r3
 8008282:	bd80      	pop	{r7, pc}
 8008284:	40023800 	.word	0x40023800
 8008288:	08026c1c 	.word	0x08026c1c

0800828c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008290:	f7ff ffdc 	bl	800824c <HAL_RCC_GetHCLKFreq>
 8008294:	4602      	mov	r2, r0
 8008296:	4b05      	ldr	r3, [pc, #20]	@ (80082ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	0b5b      	lsrs	r3, r3, #13
 800829c:	f003 0307 	and.w	r3, r3, #7
 80082a0:	4903      	ldr	r1, [pc, #12]	@ (80082b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082a2:	5ccb      	ldrb	r3, [r1, r3]
 80082a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	40023800 	.word	0x40023800
 80082b0:	08026c1c 	.word	0x08026c1c

080082b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	220f      	movs	r2, #15
 80082c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80082c4:	4b12      	ldr	r3, [pc, #72]	@ (8008310 <HAL_RCC_GetClockConfig+0x5c>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 0203 	and.w	r2, r3, #3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80082d0:	4b0f      	ldr	r3, [pc, #60]	@ (8008310 <HAL_RCC_GetClockConfig+0x5c>)
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80082dc:	4b0c      	ldr	r3, [pc, #48]	@ (8008310 <HAL_RCC_GetClockConfig+0x5c>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80082e8:	4b09      	ldr	r3, [pc, #36]	@ (8008310 <HAL_RCC_GetClockConfig+0x5c>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	08db      	lsrs	r3, r3, #3
 80082ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80082f6:	4b07      	ldr	r3, [pc, #28]	@ (8008314 <HAL_RCC_GetClockConfig+0x60>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 020f 	and.w	r2, r3, #15
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	601a      	str	r2, [r3, #0]
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40023800 	.word	0x40023800
 8008314:	40023c00 	.word	0x40023c00

08008318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b088      	sub	sp, #32
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008324:	2300      	movs	r3, #0
 8008326:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008330:	2300      	movs	r3, #0
 8008332:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d012      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008340:	4b69      	ldr	r3, [pc, #420]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	4a68      	ldr	r2, [pc, #416]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008346:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800834a:	6093      	str	r3, [r2, #8]
 800834c:	4b66      	ldr	r3, [pc, #408]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008354:	4964      	ldr	r1, [pc, #400]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008356:	4313      	orrs	r3, r2
 8008358:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835e:	2b00      	cmp	r3, #0
 8008360:	d101      	bne.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008362:	2301      	movs	r3, #1
 8008364:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d017      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008372:	4b5d      	ldr	r3, [pc, #372]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008374:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008378:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008380:	4959      	ldr	r1, [pc, #356]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008382:	4313      	orrs	r3, r2
 8008384:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800838c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008390:	d101      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008392:	2301      	movs	r3, #1
 8008394:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d101      	bne.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d017      	beq.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80083ae:	4b4e      	ldr	r3, [pc, #312]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083b4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083bc:	494a      	ldr	r1, [pc, #296]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083cc:	d101      	bne.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80083ce:	2301      	movs	r3, #1
 80083d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d101      	bne.n	80083de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80083da:	2301      	movs	r3, #1
 80083dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80083ea:	2301      	movs	r3, #1
 80083ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f003 0320 	and.w	r3, r3, #32
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	f000 808b 	beq.w	8008512 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083fc:	4b3a      	ldr	r3, [pc, #232]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008400:	4a39      	ldr	r2, [pc, #228]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008406:	6413      	str	r3, [r2, #64]	@ 0x40
 8008408:	4b37      	ldr	r3, [pc, #220]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800840a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800840c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008410:	60bb      	str	r3, [r7, #8]
 8008412:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008414:	4b35      	ldr	r3, [pc, #212]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a34      	ldr	r2, [pc, #208]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800841a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800841e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008420:	f7fa f842 	bl	80024a8 <HAL_GetTick>
 8008424:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008426:	e008      	b.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008428:	f7fa f83e 	bl	80024a8 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b64      	cmp	r3, #100	@ 0x64
 8008434:	d901      	bls.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e357      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800843a:	4b2c      	ldr	r3, [pc, #176]	@ (80084ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008442:	2b00      	cmp	r3, #0
 8008444:	d0f0      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008446:	4b28      	ldr	r3, [pc, #160]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800844a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800844e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d035      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800845a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	429a      	cmp	r2, r3
 8008462:	d02e      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008464:	4b20      	ldr	r3, [pc, #128]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008468:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800846c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800846e:	4b1e      	ldr	r3, [pc, #120]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008472:	4a1d      	ldr	r2, [pc, #116]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008474:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008478:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800847a:	4b1b      	ldr	r3, [pc, #108]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800847c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800847e:	4a1a      	ldr	r2, [pc, #104]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008484:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008486:	4a18      	ldr	r2, [pc, #96]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800848c:	4b16      	ldr	r3, [pc, #88]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	2b01      	cmp	r3, #1
 8008496:	d114      	bne.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008498:	f7fa f806 	bl	80024a8 <HAL_GetTick>
 800849c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800849e:	e00a      	b.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80084a0:	f7fa f802 	bl	80024a8 <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e319      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084b6:	4b0c      	ldr	r3, [pc, #48]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0ee      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084ce:	d111      	bne.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80084d0:	4b05      	ldr	r3, [pc, #20]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80084dc:	4b04      	ldr	r3, [pc, #16]	@ (80084f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80084de:	400b      	ands	r3, r1
 80084e0:	4901      	ldr	r1, [pc, #4]	@ (80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	608b      	str	r3, [r1, #8]
 80084e6:	e00b      	b.n	8008500 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80084e8:	40023800 	.word	0x40023800
 80084ec:	40007000 	.word	0x40007000
 80084f0:	0ffffcff 	.word	0x0ffffcff
 80084f4:	4baa      	ldr	r3, [pc, #680]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084f6:	689b      	ldr	r3, [r3, #8]
 80084f8:	4aa9      	ldr	r2, [pc, #676]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80084fa:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80084fe:	6093      	str	r3, [r2, #8]
 8008500:	4ba7      	ldr	r3, [pc, #668]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008502:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800850c:	49a4      	ldr	r1, [pc, #656]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800850e:	4313      	orrs	r3, r2
 8008510:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0310 	and.w	r3, r3, #16
 800851a:	2b00      	cmp	r3, #0
 800851c:	d010      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800851e:	4ba0      	ldr	r3, [pc, #640]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008520:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008524:	4a9e      	ldr	r2, [pc, #632]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800852a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800852e:	4b9c      	ldr	r3, [pc, #624]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008530:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008538:	4999      	ldr	r1, [pc, #612]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800853a:	4313      	orrs	r3, r2
 800853c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800854c:	4b94      	ldr	r3, [pc, #592]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008552:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800855a:	4991      	ldr	r1, [pc, #580]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800855c:	4313      	orrs	r3, r2
 800855e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800856e:	4b8c      	ldr	r3, [pc, #560]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008574:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800857c:	4988      	ldr	r1, [pc, #544]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857e:	4313      	orrs	r3, r2
 8008580:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008590:	4b83      	ldr	r3, [pc, #524]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008596:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800859e:	4980      	ldr	r1, [pc, #512]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085b2:	4b7b      	ldr	r3, [pc, #492]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085b8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085c0:	4977      	ldr	r1, [pc, #476]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c2:	4313      	orrs	r3, r2
 80085c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00a      	beq.n	80085ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80085d4:	4b72      	ldr	r3, [pc, #456]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085da:	f023 0203 	bic.w	r2, r3, #3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e2:	496f      	ldr	r1, [pc, #444]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00a      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085f6:	4b6a      	ldr	r3, [pc, #424]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085fc:	f023 020c 	bic.w	r2, r3, #12
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008604:	4966      	ldr	r1, [pc, #408]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008606:	4313      	orrs	r3, r2
 8008608:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00a      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008618:	4b61      	ldr	r3, [pc, #388]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008626:	495e      	ldr	r1, [pc, #376]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008628:	4313      	orrs	r3, r2
 800862a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00a      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800863a:	4b59      	ldr	r3, [pc, #356]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008640:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008648:	4955      	ldr	r1, [pc, #340]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800864a:	4313      	orrs	r3, r2
 800864c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00a      	beq.n	8008672 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800865c:	4b50      	ldr	r3, [pc, #320]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008662:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800866a:	494d      	ldr	r1, [pc, #308]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800866c:	4313      	orrs	r3, r2
 800866e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800867e:	4b48      	ldr	r3, [pc, #288]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008684:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800868c:	4944      	ldr	r1, [pc, #272]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868e:	4313      	orrs	r3, r2
 8008690:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80086a0:	4b3f      	ldr	r3, [pc, #252]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ae:	493c      	ldr	r1, [pc, #240]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b0:	4313      	orrs	r3, r2
 80086b2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80086c2:	4b37      	ldr	r3, [pc, #220]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80086d0:	4933      	ldr	r1, [pc, #204]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00a      	beq.n	80086fa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80086e4:	4b2e      	ldr	r3, [pc, #184]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086ea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80086f2:	492b      	ldr	r1, [pc, #172]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f4:	4313      	orrs	r3, r2
 80086f6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d011      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008706:	4b26      	ldr	r3, [pc, #152]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008708:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800870c:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008714:	4922      	ldr	r1, [pc, #136]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008716:	4313      	orrs	r3, r2
 8008718:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008720:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008724:	d101      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008726:	2301      	movs	r3, #1
 8008728:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008736:	2301      	movs	r3, #1
 8008738:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008746:	4b16      	ldr	r3, [pc, #88]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800874c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008754:	4912      	ldr	r1, [pc, #72]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008756:	4313      	orrs	r3, r2
 8008758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00b      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008768:	4b0d      	ldr	r3, [pc, #52]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008778:	4909      	ldr	r1, [pc, #36]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800877a:	4313      	orrs	r3, r2
 800877c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d006      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800878e:	2b00      	cmp	r3, #0
 8008790:	f000 80d9 	beq.w	8008946 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008794:	4b02      	ldr	r3, [pc, #8]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a01      	ldr	r2, [pc, #4]	@ (80087a0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800879a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800879e:	e001      	b.n	80087a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80087a0:	40023800 	.word	0x40023800
 80087a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087a6:	f7f9 fe7f 	bl	80024a8 <HAL_GetTick>
 80087aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087ac:	e008      	b.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80087ae:	f7f9 fe7b 	bl	80024a8 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	1ad3      	subs	r3, r2, r3
 80087b8:	2b64      	cmp	r3, #100	@ 0x64
 80087ba:	d901      	bls.n	80087c0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e194      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80087c0:	4b6c      	ldr	r3, [pc, #432]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d1f0      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f003 0301 	and.w	r3, r3, #1
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d021      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d11d      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087e0:	4b64      	ldr	r3, [pc, #400]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087e6:	0c1b      	lsrs	r3, r3, #16
 80087e8:	f003 0303 	and.w	r3, r3, #3
 80087ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80087ee:	4b61      	ldr	r3, [pc, #388]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80087f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80087f4:	0e1b      	lsrs	r3, r3, #24
 80087f6:	f003 030f 	and.w	r3, r3, #15
 80087fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	019a      	lsls	r2, r3, #6
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	041b      	lsls	r3, r3, #16
 8008806:	431a      	orrs	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	061b      	lsls	r3, r3, #24
 800880c:	431a      	orrs	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	071b      	lsls	r3, r3, #28
 8008814:	4957      	ldr	r1, [pc, #348]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800882c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008830:	d00a      	beq.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800883a:	2b00      	cmp	r3, #0
 800883c:	d02e      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008842:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008846:	d129      	bne.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008848:	4b4a      	ldr	r3, [pc, #296]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800884a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800884e:	0c1b      	lsrs	r3, r3, #16
 8008850:	f003 0303 	and.w	r3, r3, #3
 8008854:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008856:	4b47      	ldr	r3, [pc, #284]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008858:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800885c:	0f1b      	lsrs	r3, r3, #28
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	019a      	lsls	r2, r3, #6
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	041b      	lsls	r3, r3, #16
 800886e:	431a      	orrs	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	061b      	lsls	r3, r3, #24
 8008876:	431a      	orrs	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	071b      	lsls	r3, r3, #28
 800887c:	493d      	ldr	r1, [pc, #244]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800887e:	4313      	orrs	r3, r2
 8008880:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008884:	4b3b      	ldr	r3, [pc, #236]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008886:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800888a:	f023 021f 	bic.w	r2, r3, #31
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008892:	3b01      	subs	r3, #1
 8008894:	4937      	ldr	r1, [pc, #220]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008896:	4313      	orrs	r3, r2
 8008898:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d01d      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088a8:	4b32      	ldr	r3, [pc, #200]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088ae:	0e1b      	lsrs	r3, r3, #24
 80088b0:	f003 030f 	and.w	r3, r3, #15
 80088b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088bc:	0f1b      	lsrs	r3, r3, #28
 80088be:	f003 0307 	and.w	r3, r3, #7
 80088c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	019a      	lsls	r2, r3, #6
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	041b      	lsls	r3, r3, #16
 80088d0:	431a      	orrs	r2, r3
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	061b      	lsls	r3, r3, #24
 80088d6:	431a      	orrs	r2, r3
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	071b      	lsls	r3, r3, #28
 80088dc:	4925      	ldr	r1, [pc, #148]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088de:	4313      	orrs	r3, r2
 80088e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d011      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	019a      	lsls	r2, r3, #6
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	691b      	ldr	r3, [r3, #16]
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	431a      	orrs	r2, r3
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	061b      	lsls	r3, r3, #24
 8008904:	431a      	orrs	r2, r3
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	071b      	lsls	r3, r3, #28
 800890c:	4919      	ldr	r1, [pc, #100]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800890e:	4313      	orrs	r3, r2
 8008910:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008914:	4b17      	ldr	r3, [pc, #92]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4a16      	ldr	r2, [pc, #88]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800891a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800891e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008920:	f7f9 fdc2 	bl	80024a8 <HAL_GetTick>
 8008924:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008926:	e008      	b.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008928:	f7f9 fdbe 	bl	80024a8 <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	2b64      	cmp	r3, #100	@ 0x64
 8008934:	d901      	bls.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e0d7      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800893a:	4b0e      	ldr	r3, [pc, #56]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d0f0      	beq.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	2b01      	cmp	r3, #1
 800894a:	f040 80cd 	bne.w	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800894e:	4b09      	ldr	r3, [pc, #36]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4a08      	ldr	r2, [pc, #32]	@ (8008974 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008954:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800895a:	f7f9 fda5 	bl	80024a8 <HAL_GetTick>
 800895e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008960:	e00a      	b.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008962:	f7f9 fda1 	bl	80024a8 <HAL_GetTick>
 8008966:	4602      	mov	r2, r0
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	1ad3      	subs	r3, r2, r3
 800896c:	2b64      	cmp	r3, #100	@ 0x64
 800896e:	d903      	bls.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e0ba      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008974:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008978:	4b5e      	ldr	r3, [pc, #376]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008980:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008984:	d0ed      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800898e:	2b00      	cmp	r3, #0
 8008990:	d003      	beq.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008996:	2b00      	cmp	r3, #0
 8008998:	d009      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d02e      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d12a      	bne.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80089ae:	4b51      	ldr	r3, [pc, #324]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089b4:	0c1b      	lsrs	r3, r3, #16
 80089b6:	f003 0303 	and.w	r3, r3, #3
 80089ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089bc:	4b4d      	ldr	r3, [pc, #308]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c2:	0f1b      	lsrs	r3, r3, #28
 80089c4:	f003 0307 	and.w	r3, r3, #7
 80089c8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	695b      	ldr	r3, [r3, #20]
 80089ce:	019a      	lsls	r2, r3, #6
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	041b      	lsls	r3, r3, #16
 80089d4:	431a      	orrs	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	699b      	ldr	r3, [r3, #24]
 80089da:	061b      	lsls	r3, r3, #24
 80089dc:	431a      	orrs	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	071b      	lsls	r3, r3, #28
 80089e2:	4944      	ldr	r1, [pc, #272]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089e4:	4313      	orrs	r3, r2
 80089e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80089ea:	4b42      	ldr	r3, [pc, #264]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089f0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f8:	3b01      	subs	r3, #1
 80089fa:	021b      	lsls	r3, r3, #8
 80089fc:	493d      	ldr	r1, [pc, #244]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089fe:	4313      	orrs	r3, r2
 8008a00:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d022      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a18:	d11d      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a1a:	4b36      	ldr	r3, [pc, #216]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a20:	0e1b      	lsrs	r3, r3, #24
 8008a22:	f003 030f 	and.w	r3, r3, #15
 8008a26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a28:	4b32      	ldr	r3, [pc, #200]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a2e:	0f1b      	lsrs	r3, r3, #28
 8008a30:	f003 0307 	and.w	r3, r3, #7
 8008a34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	019a      	lsls	r2, r3, #6
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a1b      	ldr	r3, [r3, #32]
 8008a40:	041b      	lsls	r3, r3, #16
 8008a42:	431a      	orrs	r2, r3
 8008a44:	693b      	ldr	r3, [r7, #16]
 8008a46:	061b      	lsls	r3, r3, #24
 8008a48:	431a      	orrs	r2, r3
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	071b      	lsls	r3, r3, #28
 8008a4e:	4929      	ldr	r1, [pc, #164]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a50:	4313      	orrs	r3, r2
 8008a52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f003 0308 	and.w	r3, r3, #8
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d028      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a62:	4b24      	ldr	r3, [pc, #144]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a68:	0e1b      	lsrs	r3, r3, #24
 8008a6a:	f003 030f 	and.w	r3, r3, #15
 8008a6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a70:	4b20      	ldr	r3, [pc, #128]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a76:	0c1b      	lsrs	r3, r3, #16
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	019a      	lsls	r2, r3, #6
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	431a      	orrs	r2, r3
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	061b      	lsls	r3, r3, #24
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	69db      	ldr	r3, [r3, #28]
 8008a94:	071b      	lsls	r3, r3, #28
 8008a96:	4917      	ldr	r1, [pc, #92]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a9e:	4b15      	ldr	r3, [pc, #84]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008aa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aac:	4911      	ldr	r1, [pc, #68]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4a0e      	ldr	r2, [pc, #56]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008abe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ac0:	f7f9 fcf2 	bl	80024a8 <HAL_GetTick>
 8008ac4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ac6:	e008      	b.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ac8:	f7f9 fcee 	bl	80024a8 <HAL_GetTick>
 8008acc:	4602      	mov	r2, r0
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	2b64      	cmp	r3, #100	@ 0x64
 8008ad4:	d901      	bls.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008ad6:	2303      	movs	r3, #3
 8008ad8:	e007      	b.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ada:	4b06      	ldr	r3, [pc, #24]	@ (8008af4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008ae2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ae6:	d1ef      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	40023800 	.word	0x40023800

08008af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e09d      	b.n	8008c46 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d108      	bne.n	8008b24 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008b1a:	d009      	beq.n	8008b30 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	61da      	str	r2, [r3, #28]
 8008b22:	e005      	b.n	8008b30 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d106      	bne.n	8008b50 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f7f8 fc6c 	bl	8001428 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008b66:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68db      	ldr	r3, [r3, #12]
 8008b6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b70:	d902      	bls.n	8008b78 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008b72:	2300      	movs	r3, #0
 8008b74:	60fb      	str	r3, [r7, #12]
 8008b76:	e002      	b.n	8008b7e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008b78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b7c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008b86:	d007      	beq.n	8008b98 <HAL_SPI_Init+0xa0>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008b90:	d002      	beq.n	8008b98 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008ba8:	431a      	orrs	r2, r3
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	f003 0302 	and.w	r3, r3, #2
 8008bb2:	431a      	orrs	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	699b      	ldr	r3, [r3, #24]
 8008bc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	69db      	ldr	r3, [r3, #28]
 8008bcc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bd0:	431a      	orrs	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
 8008bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bda:	ea42 0103 	orr.w	r1, r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	430a      	orrs	r2, r1
 8008bec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	0c1b      	lsrs	r3, r3, #16
 8008bf4:	f003 0204 	and.w	r2, r3, #4
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	f003 0310 	and.w	r3, r3, #16
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008c14:	ea42 0103 	orr.w	r1, r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	69da      	ldr	r2, [r3, #28]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008c34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008c44:	2300      	movs	r3, #0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer  (u8 or u16 data elements)
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008c64:	b2db      	uxtb	r3, r3
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d001      	beq.n	8008c6e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008c6a:	2302      	movs	r3, #2
 8008c6c:	e0d4      	b.n	8008e18 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d002      	beq.n	8008c7a <HAL_SPI_Transmit_DMA+0x2a>
 8008c74:	88fb      	ldrh	r3, [r7, #6]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e0cc      	b.n	8008e18 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d101      	bne.n	8008c8c <HAL_SPI_Transmit_DMA+0x3c>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	e0c5      	b.n	8008e18 <HAL_SPI_Transmit_DMA+0x1c8>
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2201      	movs	r2, #1
 8008c90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2203      	movs	r2, #3
 8008c98:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	68ba      	ldr	r2, [r7, #8]
 8008ca6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	88fa      	ldrh	r2, [r7, #6]
 8008cac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	88fa      	ldrh	r2, [r7, #6]
 8008cb2:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008cde:	d10f      	bne.n	8008d00 <HAL_SPI_Transmit_DMA+0xb0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d04:	4a46      	ldr	r2, [pc, #280]	@ (8008e20 <HAL_SPI_Transmit_DMA+0x1d0>)
 8008d06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d0c:	4a45      	ldr	r2, [pc, #276]	@ (8008e24 <HAL_SPI_Transmit_DMA+0x1d4>)
 8008d0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d14:	4a44      	ldr	r2, [pc, #272]	@ (8008e28 <HAL_SPI_Transmit_DMA+0x1d8>)
 8008d16:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	685a      	ldr	r2, [r3, #4]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d2e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008d38:	d82d      	bhi.n	8008d96 <HAL_SPI_Transmit_DMA+0x146>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d44:	d127      	bne.n	8008d96 <HAL_SPI_Transmit_DMA+0x146>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d10f      	bne.n	8008d74 <HAL_SPI_Transmit_DMA+0x124>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008d62:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	085b      	lsrs	r3, r3, #1
 8008d6c:	b29a      	uxth	r2, r3
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008d72:	e010      	b.n	8008d96 <HAL_SPI_Transmit_DMA+0x146>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	685a      	ldr	r2, [r3, #4]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008d82:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	085b      	lsrs	r3, r3, #1
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	3301      	adds	r3, #1
 8008d90:	b29a      	uxth	r2, r3
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d9e:	4619      	mov	r1, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	330c      	adds	r3, #12
 8008da6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008dac:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008dae:	f7fa fbcb 	bl	8003548 <HAL_DMA_Start_IT>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <HAL_SPI_Transmit_DMA+0x180>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008dbc:	f043 0210 	orr.w	r2, r3, #16
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e023      	b.n	8008e18 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dda:	2b40      	cmp	r3, #64	@ 0x40
 8008ddc:	d007      	beq.n	8008dee <HAL_SPI_Transmit_DMA+0x19e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008dec:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f042 0220 	orr.w	r2, r2, #32
 8008e04:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	685a      	ldr	r2, [r3, #4]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0202 	orr.w	r2, r2, #2
 8008e14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	080097c1 	.word	0x080097c1
 8008e24:	080095dd 	.word	0x080095dd
 8008e28:	08009815 	.word	0x08009815

08008e2c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data elements (u8 or u16) to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	80fb      	strh	r3, [r7, #6]
  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d001      	beq.n	8008e4a <HAL_SPI_Receive_DMA+0x1e>
  {
    return HAL_BUSY;
 8008e46:	2302      	movs	r3, #2
 8008e48:	e105      	b.n	8009056 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d002      	beq.n	8008e56 <HAL_SPI_Receive_DMA+0x2a>
 8008e50:	88fb      	ldrh	r3, [r7, #6]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d101      	bne.n	8008e5a <HAL_SPI_Receive_DMA+0x2e>
  {
    return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e0fd      	b.n	8009056 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d110      	bne.n	8008e84 <HAL_SPI_Receive_DMA+0x58>
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e6a:	d10b      	bne.n	8008e84 <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2204      	movs	r2, #4
 8008e70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8008e74:	88fb      	ldrh	r3, [r7, #6]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 f8f6 	bl	800906c <HAL_SPI_TransmitReceive_DMA>
 8008e80:	4603      	mov	r3, r0
 8008e82:	e0e8      	b.n	8009056 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d101      	bne.n	8008e92 <HAL_SPI_Receive_DMA+0x66>
 8008e8e:	2302      	movs	r3, #2
 8008e90:	e0e1      	b.n	8009056 <HAL_SPI_Receive_DMA+0x22a>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2201      	movs	r2, #1
 8008e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	88fa      	ldrh	r2, [r7, #6]
 8008eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	88fa      	ldrh	r2, [r7, #6]
 8008eba:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->TxXferSize  = 0U;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008ede:	d10f      	bne.n	8008f00 <HAL_SPI_Receive_DMA+0xd4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008eee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008efe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	685a      	ldr	r2, [r3, #4]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f0e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008f18:	d908      	bls.n	8008f2c <HAL_SPI_Receive_DMA+0x100>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f28:	605a      	str	r2, [r3, #4]
 8008f2a:	e042      	b.n	8008fb2 <HAL_SPI_Receive_DMA+0x186>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685a      	ldr	r2, [r3, #4]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008f3a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f46:	d134      	bne.n	8008fb2 <HAL_SPI_Receive_DMA+0x186>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f56:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f5e:	b29b      	uxth	r3, r3
 8008f60:	f003 0301 	and.w	r3, r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d111      	bne.n	8008f8c <HAL_SPI_Receive_DMA+0x160>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	685a      	ldr	r2, [r3, #4]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f76:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	085b      	lsrs	r3, r3, #1
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8008f8a:	e012      	b.n	8008fb2 <HAL_SPI_Receive_DMA+0x186>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	685a      	ldr	r2, [r3, #4]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008f9a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	085b      	lsrs	r3, r3, #1
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	3301      	adds	r3, #1
 8008faa:	b29a      	uxth	r2, r3
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fb6:	4a2a      	ldr	r2, [pc, #168]	@ (8009060 <HAL_SPI_Receive_DMA+0x234>)
 8008fb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fbe:	4a29      	ldr	r2, [pc, #164]	@ (8009064 <HAL_SPI_Receive_DMA+0x238>)
 8008fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fc6:	4a28      	ldr	r2, [pc, #160]	@ (8009068 <HAL_SPI_Receive_DMA+0x23c>)
 8008fc8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fce:	2200      	movs	r2, #0
 8008fd0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	330c      	adds	r3, #12
 8008fdc:	4619      	mov	r1, r3
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe2:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8008fea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8008fec:	f7fa faac 	bl	8003548 <HAL_DMA_Start_IT>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00b      	beq.n	800900e <HAL_SPI_Receive_DMA+0x1e2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ffa:	f043 0210 	orr.w	r2, r3, #16
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e023      	b.n	8009056 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009018:	2b40      	cmp	r3, #64	@ 0x40
 800901a:	d007      	beq.n	800902c <HAL_SPI_Receive_DMA+0x200>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800902a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f042 0220 	orr.w	r2, r2, #32
 8009042:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f042 0201 	orr.w	r2, r2, #1
 8009052:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	080097dd 	.word	0x080097dd
 8009064:	08009685 	.word	0x08009685
 8009068:	08009815 	.word	0x08009815

0800906c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data elements (u8 or u16) to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
 8009078:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009080:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009088:	7dfb      	ldrb	r3, [r7, #23]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d00c      	beq.n	80090a8 <HAL_SPI_TransmitReceive_DMA+0x3c>
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009094:	d106      	bne.n	80090a4 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d102      	bne.n	80090a4 <HAL_SPI_TransmitReceive_DMA+0x38>
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	2b04      	cmp	r3, #4
 80090a2:	d001      	beq.n	80090a8 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80090a4:	2302      	movs	r3, #2
 80090a6:	e158      	b.n	800935a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <HAL_SPI_TransmitReceive_DMA+0x4e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <HAL_SPI_TransmitReceive_DMA+0x4e>
 80090b4:	887b      	ldrh	r3, [r7, #2]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e14d      	b.n	800935a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_SPI_TransmitReceive_DMA+0x60>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e146      	b.n	800935a <HAL_SPI_TransmitReceive_DMA+0x2ee>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	2b04      	cmp	r3, #4
 80090de:	d003      	beq.n	80090e8 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2205      	movs	r2, #5
 80090e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	887a      	ldrh	r2, [r7, #2]
 80090f8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	887a      	ldrh	r2, [r7, #2]
 80090fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	887a      	ldrh	r2, [r7, #2]
 800910a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	887a      	ldrh	r2, [r7, #2]
 8009112:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2200      	movs	r2, #0
 800911a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8009130:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800913a:	d908      	bls.n	800914e <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800914a:	605a      	str	r2, [r3, #4]
 800914c:	e06f      	b.n	800922e <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800915c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009168:	d126      	bne.n	80091b8 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 800916e:	f003 0301 	and.w	r3, r3, #1
 8009172:	2b00      	cmp	r3, #0
 8009174:	d10f      	bne.n	8009196 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685a      	ldr	r2, [r3, #4]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009184:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800918a:	b29b      	uxth	r3, r3
 800918c:	085b      	lsrs	r3, r3, #1
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009194:	e010      	b.n	80091b8 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80091a4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	085b      	lsrs	r3, r3, #1
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3301      	adds	r3, #1
 80091b2:	b29a      	uxth	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091c2:	d134      	bne.n	800922e <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80091d2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091da:	b29b      	uxth	r3, r3
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d111      	bne.n	8009208 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685a      	ldr	r2, [r3, #4]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80091f2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	085b      	lsrs	r3, r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8009206:	e012      	b.n	800922e <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009216:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800921e:	b29b      	uxth	r3, r3
 8009220:	085b      	lsrs	r3, r3, #1
 8009222:	b29b      	uxth	r3, r3
 8009224:	3301      	adds	r3, #1
 8009226:	b29a      	uxth	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009234:	b2db      	uxtb	r3, r3
 8009236:	2b04      	cmp	r3, #4
 8009238:	d108      	bne.n	800924c <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800923e:	4a49      	ldr	r2, [pc, #292]	@ (8009364 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8009240:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009246:	4a48      	ldr	r2, [pc, #288]	@ (8009368 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8009248:	63da      	str	r2, [r3, #60]	@ 0x3c
 800924a:	e007      	b.n	800925c <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009250:	4a46      	ldr	r2, [pc, #280]	@ (800936c <HAL_SPI_TransmitReceive_DMA+0x300>)
 8009252:	641a      	str	r2, [r3, #64]	@ 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009258:	4a45      	ldr	r2, [pc, #276]	@ (8009370 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800925a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009260:	4a44      	ldr	r2, [pc, #272]	@ (8009374 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8009262:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009268:	2200      	movs	r2, #0
 800926a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	330c      	adds	r3, #12
 8009276:	4619      	mov	r1, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009284:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009286:	f7fa f95f 	bl	8003548 <HAL_DMA_Start_IT>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009294:	f043 0210 	orr.w	r2, r3, #16
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	e058      	b.n	800935a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f042 0201 	orr.w	r2, r2, #1
 80092b6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092bc:	2200      	movs	r2, #0
 80092be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092c4:	2200      	movs	r2, #0
 80092c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092cc:	2200      	movs	r2, #0
 80092ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d4:	2200      	movs	r2, #0
 80092d6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e0:	4619      	mov	r1, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	330c      	adds	r3, #12
 80092e8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80092ee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80092f0:	f7fa f92a 	bl	8003548 <HAL_DMA_Start_IT>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00b      	beq.n	8009312 <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092fe:	f043 0210 	orr.w	r2, r3, #16
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	e023      	b.n	800935a <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800931c:	2b40      	cmp	r3, #64	@ 0x40
 800931e:	d007      	beq.n	8009330 <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	681a      	ldr	r2, [r3, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800932e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0220 	orr.w	r2, r2, #32
 8009346:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	685a      	ldr	r2, [r3, #4]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0202 	orr.w	r2, r2, #2
 8009356:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009358:	2300      	movs	r3, #0
}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
 8009362:	bf00      	nop
 8009364:	080097dd 	.word	0x080097dd
 8009368:	08009685 	.word	0x08009685
 800936c:	080097f9 	.word	0x080097f9
 8009370:	0800972f 	.word	0x0800972f
 8009374:	08009815 	.word	0x08009815

08009378 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b088      	sub	sp, #32
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	685b      	ldr	r3, [r3, #4]
 8009386:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	099b      	lsrs	r3, r3, #6
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10f      	bne.n	80093bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	099b      	lsrs	r3, r3, #6
 80093aa:	f003 0301 	and.w	r3, r3, #1
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d004      	beq.n	80093bc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	4798      	blx	r3
    return;
 80093ba:	e0d7      	b.n	800956c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80093bc:	69bb      	ldr	r3, [r7, #24]
 80093be:	085b      	lsrs	r3, r3, #1
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <HAL_SPI_IRQHandler+0x66>
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	09db      	lsrs	r3, r3, #7
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d004      	beq.n	80093de <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	4798      	blx	r3
    return;
 80093dc:	e0c6      	b.n	800956c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80093de:	69bb      	ldr	r3, [r7, #24]
 80093e0:	095b      	lsrs	r3, r3, #5
 80093e2:	f003 0301 	and.w	r3, r3, #1
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d10c      	bne.n	8009404 <HAL_SPI_IRQHandler+0x8c>
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	099b      	lsrs	r3, r3, #6
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d106      	bne.n	8009404 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80093f6:	69bb      	ldr	r3, [r7, #24]
 80093f8:	0a1b      	lsrs	r3, r3, #8
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f000 80b4 	beq.w	800956c <HAL_SPI_IRQHandler+0x1f4>
 8009404:	69fb      	ldr	r3, [r7, #28]
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	f003 0301 	and.w	r3, r3, #1
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 80ad 	beq.w	800956c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	099b      	lsrs	r3, r3, #6
 8009416:	f003 0301 	and.w	r3, r3, #1
 800941a:	2b00      	cmp	r3, #0
 800941c:	d023      	beq.n	8009466 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b03      	cmp	r3, #3
 8009428:	d011      	beq.n	800944e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800942e:	f043 0204 	orr.w	r2, r3, #4
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	617b      	str	r3, [r7, #20]
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	e00b      	b.n	8009466 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800944e:	2300      	movs	r3, #0
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	613b      	str	r3, [r7, #16]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	693b      	ldr	r3, [r7, #16]
        return;
 8009464:	e082      	b.n	800956c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	095b      	lsrs	r3, r3, #5
 800946a:	f003 0301 	and.w	r3, r3, #1
 800946e:	2b00      	cmp	r3, #0
 8009470:	d014      	beq.n	800949c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009476:	f043 0201 	orr.w	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800947e:	2300      	movs	r3, #0
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	60fb      	str	r3, [r7, #12]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009498:	601a      	str	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800949c:	69bb      	ldr	r3, [r7, #24]
 800949e:	0a1b      	lsrs	r3, r3, #8
 80094a0:	f003 0301 	and.w	r3, r3, #1
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00c      	beq.n	80094c2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094ac:	f043 0208 	orr.w	r2, r3, #8
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094b4:	2300      	movs	r3, #0
 80094b6:	60bb      	str	r3, [r7, #8]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	60bb      	str	r3, [r7, #8]
 80094c0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d04f      	beq.n	800956a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80094d8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80094e2:	69fb      	ldr	r3, [r7, #28]
 80094e4:	f003 0302 	and.w	r3, r3, #2
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <HAL_SPI_IRQHandler+0x17e>
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d034      	beq.n	8009560 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	685a      	ldr	r2, [r3, #4]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f022 0203 	bic.w	r2, r2, #3
 8009504:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800950a:	2b00      	cmp	r3, #0
 800950c:	d011      	beq.n	8009532 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009512:	4a18      	ldr	r2, [pc, #96]	@ (8009574 <HAL_SPI_IRQHandler+0x1fc>)
 8009514:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800951a:	4618      	mov	r0, r3
 800951c:	f7fa f8e4 	bl	80036e8 <HAL_DMA_Abort_IT>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d005      	beq.n	8009532 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800952a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009536:	2b00      	cmp	r3, #0
 8009538:	d016      	beq.n	8009568 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800953e:	4a0d      	ldr	r2, [pc, #52]	@ (8009574 <HAL_SPI_IRQHandler+0x1fc>)
 8009540:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009546:	4618      	mov	r0, r3
 8009548:	f7fa f8ce 	bl	80036e8 <HAL_DMA_Abort_IT>
 800954c:	4603      	mov	r3, r0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00a      	beq.n	8009568 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009556:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 800955e:	e003      	b.n	8009568 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f831 	bl	80095c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009566:	e000      	b.n	800956a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009568:	bf00      	nop
    return;
 800956a:	bf00      	nop
  }
}
 800956c:	3720      	adds	r7, #32
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}
 8009572:	bf00      	nop
 8009574:	08009855 	.word	0x08009855

08009578 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009578:	b480      	push	{r7}
 800957a:	b083      	sub	sp, #12
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095a0:	b480      	push	{r7}
 80095a2:	b083      	sub	sp, #12
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b2:	4770      	bx	lr

080095b4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr

080095c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095ea:	f7f8 ff5d 	bl	80024a8 <HAL_GetTick>
 80095ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095fe:	d03b      	beq.n	8009678 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0220 	bic.w	r2, r2, #32
 800960e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685a      	ldr	r2, [r3, #4]
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f022 0202 	bic.w	r2, r2, #2
 800961e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	2164      	movs	r1, #100	@ 0x64
 8009624:	6978      	ldr	r0, [r7, #20]
 8009626:	f000 fac5 	bl	8009bb4 <SPI_EndRxTxTransaction>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009634:	f043 0220 	orr.w	r2, r3, #32
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009644:	2300      	movs	r3, #0
 8009646:	60fb      	str	r3, [r7, #12]
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	2200      	movs	r2, #0
 800965e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800966c:	2b00      	cmp	r3, #0
 800966e:	d003      	beq.n	8009678 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8009670:	6978      	ldr	r0, [r7, #20]
 8009672:	f7ff ffa9 	bl	80095c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009676:	e002      	b.n	800967e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8009678:	6978      	ldr	r0, [r7, #20]
 800967a:	f017 f8bd 	bl	80207f8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009690:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009692:	f7f8 ff09 	bl	80024a8 <HAL_GetTick>
 8009696:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a6:	d03c      	beq.n	8009722 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f022 0220 	bic.w	r2, r2, #32
 80096b6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	689b      	ldr	r3, [r3, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10d      	bne.n	80096dc <SPI_DMAReceiveCplt+0x58>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80096c8:	d108      	bne.n	80096dc <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685a      	ldr	r2, [r3, #4]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0203 	bic.w	r2, r2, #3
 80096d8:	605a      	str	r2, [r3, #4]
 80096da:	e007      	b.n	80096ec <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f022 0201 	bic.w	r2, r2, #1
 80096ea:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80096ec:	68ba      	ldr	r2, [r7, #8]
 80096ee:	2164      	movs	r1, #100	@ 0x64
 80096f0:	68f8      	ldr	r0, [r7, #12]
 80096f2:	f000 f9e3 	bl	8009abc <SPI_EndRxTransaction>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d002      	beq.n	8009702 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2220      	movs	r2, #32
 8009700:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	2200      	movs	r2, #0
 8009706:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2201      	movs	r2, #1
 800970e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f7ff ff54 	bl	80095c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8009720:	e002      	b.n	8009728 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f017 f888 	bl	8020838 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009728:	3710      	adds	r7, #16
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800973a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800973c:	f7f8 feb4 	bl	80024a8 <HAL_GetTick>
 8009740:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009750:	d030      	beq.n	80097b4 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685a      	ldr	r2, [r3, #4]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f022 0220 	bic.w	r2, r2, #32
 8009760:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	2164      	movs	r1, #100	@ 0x64
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 fa24 	bl	8009bb4 <SPI_EndRxTxTransaction>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d005      	beq.n	800977e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009776:	f043 0220 	orr.w	r2, r3, #32
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f022 0203 	bic.w	r2, r2, #3
 800978c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	2200      	movs	r2, #0
 8009792:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2200      	movs	r2, #0
 8009798:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2201      	movs	r2, #1
 80097a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80097ac:	68f8      	ldr	r0, [r7, #12]
 80097ae:	f7ff ff0b 	bl	80095c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80097b2:	e002      	b.n	80097ba <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80097b4:	68f8      	ldr	r0, [r7, #12]
 80097b6:	f7ff fedf 	bl	8009578 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097ba:	3710      	adds	r7, #16
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097cc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f7ff fedc 	bl	800958c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097d4:	bf00      	nop
 80097d6:	3710      	adds	r7, #16
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}

080097dc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f7ff fed8 	bl	80095a0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80097f0:	bf00      	nop
 80097f2:	3710      	adds	r7, #16
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009804:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	f7ff fed4 	bl	80095b4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800980c:	bf00      	nop
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009820:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	685a      	ldr	r2, [r3, #4]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0203 	bic.w	r2, r2, #3
 8009830:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009836:	f043 0210 	orr.w	r2, r3, #16
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009846:	68f8      	ldr	r0, [r7, #12]
 8009848:	f7ff febe 	bl	80095c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009860:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009870:	68f8      	ldr	r0, [r7, #12]
 8009872:	f7ff fea9 	bl	80095c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009876:	bf00      	nop
 8009878:	3710      	adds	r7, #16
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
	...

08009880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b088      	sub	sp, #32
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	4613      	mov	r3, r2
 800988e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009890:	f7f8 fe0a 	bl	80024a8 <HAL_GetTick>
 8009894:	4602      	mov	r2, r0
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	1a9b      	subs	r3, r3, r2
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	4413      	add	r3, r2
 800989e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80098a0:	f7f8 fe02 	bl	80024a8 <HAL_GetTick>
 80098a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80098a6:	4b39      	ldr	r3, [pc, #228]	@ (800998c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	015b      	lsls	r3, r3, #5
 80098ac:	0d1b      	lsrs	r3, r3, #20
 80098ae:	69fa      	ldr	r2, [r7, #28]
 80098b0:	fb02 f303 	mul.w	r3, r2, r3
 80098b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098b6:	e055      	b.n	8009964 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098be:	d051      	beq.n	8009964 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80098c0:	f7f8 fdf2 	bl	80024a8 <HAL_GetTick>
 80098c4:	4602      	mov	r2, r0
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	1ad3      	subs	r3, r2, r3
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d902      	bls.n	80098d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d13d      	bne.n	8009952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80098e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098ee:	d111      	bne.n	8009914 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	689b      	ldr	r3, [r3, #8]
 80098f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098f8:	d004      	beq.n	8009904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009902:	d107      	bne.n	8009914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009918:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800991c:	d10f      	bne.n	800993e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800992c:	601a      	str	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800993c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2201      	movs	r2, #1
 8009942:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800994e:	2303      	movs	r3, #3
 8009950:	e018      	b.n	8009984 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d102      	bne.n	800995e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	e002      	b.n	8009964 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	3b01      	subs	r3, #1
 8009962:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	689a      	ldr	r2, [r3, #8]
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4013      	ands	r3, r2
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	429a      	cmp	r2, r3
 8009972:	bf0c      	ite	eq
 8009974:	2301      	moveq	r3, #1
 8009976:	2300      	movne	r3, #0
 8009978:	b2db      	uxtb	r3, r3
 800997a:	461a      	mov	r2, r3
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	429a      	cmp	r2, r3
 8009980:	d19a      	bne.n	80098b8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3720      	adds	r7, #32
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000000 	.word	0x20000000

08009990 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b08a      	sub	sp, #40	@ 0x28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
 800999c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80099a2:	f7f8 fd81 	bl	80024a8 <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099aa:	1a9b      	subs	r3, r3, r2
 80099ac:	683a      	ldr	r2, [r7, #0]
 80099ae:	4413      	add	r3, r2
 80099b0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80099b2:	f7f8 fd79 	bl	80024a8 <HAL_GetTick>
 80099b6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	330c      	adds	r3, #12
 80099be:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80099c0:	4b3d      	ldr	r3, [pc, #244]	@ (8009ab8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	4613      	mov	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	4413      	add	r3, r2
 80099ca:	00da      	lsls	r2, r3, #3
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	0d1b      	lsrs	r3, r3, #20
 80099d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d2:	fb02 f303 	mul.w	r3, r2, r3
 80099d6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80099d8:	e061      	b.n	8009a9e <SPI_WaitFifoStateUntilTimeout+0x10e>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80099e0:	d107      	bne.n	80099f2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d104      	bne.n	80099f2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099f8:	d051      	beq.n	8009a9e <SPI_WaitFifoStateUntilTimeout+0x10e>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099fa:	f7f8 fd55 	bl	80024a8 <HAL_GetTick>
 80099fe:	4602      	mov	r2, r0
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d902      	bls.n	8009a10 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d13d      	bne.n	8009a8c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009a1e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	685b      	ldr	r3, [r3, #4]
 8009a24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a28:	d111      	bne.n	8009a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a32:	d004      	beq.n	8009a3e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a3c:	d107      	bne.n	8009a4e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a56:	d10f      	bne.n	8009a78 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a66:	601a      	str	r2, [r3, #0]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a76:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e011      	b.n	8009ab0 <SPI_WaitFifoStateUntilTimeout+0x120>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a8c:	69bb      	ldr	r3, [r7, #24]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <SPI_WaitFifoStateUntilTimeout+0x108>
      {
        tmp_timeout = 0U;
 8009a92:	2300      	movs	r3, #0
 8009a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a96:	e002      	b.n	8009a9e <SPI_WaitFifoStateUntilTimeout+0x10e>
      }
      else
      {
        count--;
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	689a      	ldr	r2, [r3, #8]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d195      	bne.n	80099da <SPI_WaitFifoStateUntilTimeout+0x4a>
      }
    }
  }

  return HAL_OK;
 8009aae:	2300      	movs	r3, #0
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3728      	adds	r7, #40	@ 0x28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	20000000 	.word	0x20000000

08009abc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b088      	sub	sp, #32
 8009ac0:	af02      	add	r7, sp, #8
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ad0:	d111      	bne.n	8009af6 <SPI_EndRxTransaction+0x3a>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ada:	d004      	beq.n	8009ae6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ae4:	d107      	bne.n	8009af6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009af4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009afe:	d112      	bne.n	8009b26 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	9300      	str	r3, [sp, #0]
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	2200      	movs	r2, #0
 8009b08:	2180      	movs	r1, #128	@ 0x80
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f7ff feb8 	bl	8009880 <SPI_WaitFlagStateUntilTimeout>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d021      	beq.n	8009b5a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b1a:	f043 0220 	orr.w	r2, r3, #32
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e03d      	b.n	8009ba2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in us */
    count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009b26:	4b21      	ldr	r3, [pc, #132]	@ (8009bac <SPI_EndRxTransaction+0xf0>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4a21      	ldr	r2, [pc, #132]	@ (8009bb0 <SPI_EndRxTransaction+0xf4>)
 8009b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b30:	0d5b      	lsrs	r3, r3, #21
 8009b32:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009b36:	fb02 f303 	mul.w	r3, r2, r3
 8009b3a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d00a      	beq.n	8009b58 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	3b01      	subs	r3, #1
 8009b46:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b52:	2b80      	cmp	r3, #128	@ 0x80
 8009b54:	d0f2      	beq.n	8009b3c <SPI_EndRxTransaction+0x80>
 8009b56:	e000      	b.n	8009b5a <SPI_EndRxTransaction+0x9e>
        break;
 8009b58:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b62:	d11d      	bne.n	8009ba0 <SPI_EndRxTransaction+0xe4>
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b6c:	d004      	beq.n	8009b78 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b76:	d113      	bne.n	8009ba0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	9300      	str	r3, [sp, #0]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f7ff ff03 	bl	8009990 <SPI_WaitFifoStateUntilTimeout>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d007      	beq.n	8009ba0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b94:	f043 0220 	orr.w	r2, r3, #32
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e000      	b.n	8009ba2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3718      	adds	r7, #24
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}
 8009baa:	bf00      	nop
 8009bac:	20000000 	.word	0x20000000
 8009bb0:	165e9f81 	.word	0x165e9f81

08009bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af02      	add	r7, sp, #8
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f7ff fedf 	bl	8009990 <SPI_WaitFifoStateUntilTimeout>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d007      	beq.n	8009be8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bdc:	f043 0220 	orr.w	r2, r3, #32
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e046      	b.n	8009c76 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009be8:	4b25      	ldr	r3, [pc, #148]	@ (8009c80 <SPI_EndRxTxTransaction+0xcc>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a25      	ldr	r2, [pc, #148]	@ (8009c84 <SPI_EndRxTxTransaction+0xd0>)
 8009bee:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf2:	0d5b      	lsrs	r3, r3, #21
 8009bf4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009bf8:	fb02 f303 	mul.w	r3, r2, r3
 8009bfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c06:	d112      	bne.n	8009c2e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	9300      	str	r3, [sp, #0]
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	2180      	movs	r1, #128	@ 0x80
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f7ff fe34 	bl	8009880 <SPI_WaitFlagStateUntilTimeout>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d016      	beq.n	8009c4c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c22:	f043 0220 	orr.w	r2, r3, #32
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e023      	b.n	8009c76 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00a      	beq.n	8009c4a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	3b01      	subs	r3, #1
 8009c38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c44:	2b80      	cmp	r3, #128	@ 0x80
 8009c46:	d0f2      	beq.n	8009c2e <SPI_EndRxTxTransaction+0x7a>
 8009c48:	e000      	b.n	8009c4c <SPI_EndRxTxTransaction+0x98>
        break;
 8009c4a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2200      	movs	r2, #0
 8009c54:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009c58:	68f8      	ldr	r0, [r7, #12]
 8009c5a:	f7ff fe99 	bl	8009990 <SPI_WaitFifoStateUntilTimeout>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d007      	beq.n	8009c74 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c68:	f043 0220 	orr.w	r2, r3, #32
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009c70:	2303      	movs	r3, #3
 8009c72:	e000      	b.n	8009c76 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3718      	adds	r7, #24
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000000 	.word	0x20000000
 8009c84:	165e9f81 	.word	0x165e9f81

08009c88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e049      	b.n	8009d2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7f8 f824 	bl	8001cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f000 fb40 	bl	800a34c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b085      	sub	sp, #20
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d001      	beq.n	8009d50 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e04c      	b.n	8009dea <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a26      	ldr	r2, [pc, #152]	@ (8009df8 <HAL_TIM_Base_Start+0xc0>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d022      	beq.n	8009da8 <HAL_TIM_Base_Start+0x70>
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d6a:	d01d      	beq.n	8009da8 <HAL_TIM_Base_Start+0x70>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a22      	ldr	r2, [pc, #136]	@ (8009dfc <HAL_TIM_Base_Start+0xc4>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d018      	beq.n	8009da8 <HAL_TIM_Base_Start+0x70>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	4a21      	ldr	r2, [pc, #132]	@ (8009e00 <HAL_TIM_Base_Start+0xc8>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d013      	beq.n	8009da8 <HAL_TIM_Base_Start+0x70>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a1f      	ldr	r2, [pc, #124]	@ (8009e04 <HAL_TIM_Base_Start+0xcc>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d00e      	beq.n	8009da8 <HAL_TIM_Base_Start+0x70>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a1e      	ldr	r2, [pc, #120]	@ (8009e08 <HAL_TIM_Base_Start+0xd0>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d009      	beq.n	8009da8 <HAL_TIM_Base_Start+0x70>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a1c      	ldr	r2, [pc, #112]	@ (8009e0c <HAL_TIM_Base_Start+0xd4>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d004      	beq.n	8009da8 <HAL_TIM_Base_Start+0x70>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a1b      	ldr	r2, [pc, #108]	@ (8009e10 <HAL_TIM_Base_Start+0xd8>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d115      	bne.n	8009dd4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	689a      	ldr	r2, [r3, #8]
 8009dae:	4b19      	ldr	r3, [pc, #100]	@ (8009e14 <HAL_TIM_Base_Start+0xdc>)
 8009db0:	4013      	ands	r3, r2
 8009db2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b06      	cmp	r3, #6
 8009db8:	d015      	beq.n	8009de6 <HAL_TIM_Base_Start+0xae>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dc0:	d011      	beq.n	8009de6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f042 0201 	orr.w	r2, r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dd2:	e008      	b.n	8009de6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	e000      	b.n	8009de8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	40010000 	.word	0x40010000
 8009dfc:	40000400 	.word	0x40000400
 8009e00:	40000800 	.word	0x40000800
 8009e04:	40000c00 	.word	0x40000c00
 8009e08:	40010400 	.word	0x40010400
 8009e0c:	40014000 	.word	0x40014000
 8009e10:	40001800 	.word	0x40001800
 8009e14:	00010007 	.word	0x00010007

08009e18 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6a1a      	ldr	r2, [r3, #32]
 8009e26:	4b0f      	ldr	r3, [pc, #60]	@ (8009e64 <HAL_TIM_Base_Stop+0x4c>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d10f      	bne.n	8009e4e <HAL_TIM_Base_Stop+0x36>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6a1a      	ldr	r2, [r3, #32]
 8009e34:	f240 4344 	movw	r3, #1092	@ 0x444
 8009e38:	4013      	ands	r3, r2
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d107      	bne.n	8009e4e <HAL_TIM_Base_Stop+0x36>
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0201 	bic.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2201      	movs	r2, #1
 8009e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr
 8009e64:	00111111 	.word	0x00111111

08009e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b085      	sub	sp, #20
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d001      	beq.n	8009e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e054      	b.n	8009f2a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2202      	movs	r2, #2
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	68da      	ldr	r2, [r3, #12]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f042 0201 	orr.w	r2, r2, #1
 8009e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a26      	ldr	r2, [pc, #152]	@ (8009f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d022      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x80>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eaa:	d01d      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x80>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a22      	ldr	r2, [pc, #136]	@ (8009f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d018      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x80>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a21      	ldr	r2, [pc, #132]	@ (8009f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d013      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x80>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a1f      	ldr	r2, [pc, #124]	@ (8009f44 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d00e      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x80>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a1e      	ldr	r2, [pc, #120]	@ (8009f48 <HAL_TIM_Base_Start_IT+0xe0>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d009      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x80>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a1c      	ldr	r2, [pc, #112]	@ (8009f4c <HAL_TIM_Base_Start_IT+0xe4>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d004      	beq.n	8009ee8 <HAL_TIM_Base_Start_IT+0x80>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a1b      	ldr	r2, [pc, #108]	@ (8009f50 <HAL_TIM_Base_Start_IT+0xe8>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d115      	bne.n	8009f14 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	4b19      	ldr	r3, [pc, #100]	@ (8009f54 <HAL_TIM_Base_Start_IT+0xec>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2b06      	cmp	r3, #6
 8009ef8:	d015      	beq.n	8009f26 <HAL_TIM_Base_Start_IT+0xbe>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f00:	d011      	beq.n	8009f26 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f042 0201 	orr.w	r2, r2, #1
 8009f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f12:	e008      	b.n	8009f26 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f042 0201 	orr.w	r2, r2, #1
 8009f22:	601a      	str	r2, [r3, #0]
 8009f24:	e000      	b.n	8009f28 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3714      	adds	r7, #20
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	40010000 	.word	0x40010000
 8009f3c:	40000400 	.word	0x40000400
 8009f40:	40000800 	.word	0x40000800
 8009f44:	40000c00 	.word	0x40000c00
 8009f48:	40010400 	.word	0x40010400
 8009f4c:	40014000 	.word	0x40014000
 8009f50:	40001800 	.word	0x40001800
 8009f54:	00010007 	.word	0x00010007

08009f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
 8009f66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	691b      	ldr	r3, [r3, #16]
 8009f6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d020      	beq.n	8009fbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01b      	beq.n	8009fbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f06f 0202 	mvn.w	r2, #2
 8009f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2201      	movs	r2, #1
 8009f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	f003 0303 	and.w	r3, r3, #3
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d003      	beq.n	8009faa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f9b4 	bl	800a310 <HAL_TIM_IC_CaptureCallback>
 8009fa8:	e005      	b.n	8009fb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f9a6 	bl	800a2fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f000 f9b7 	bl	800a324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	f003 0304 	and.w	r3, r3, #4
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d020      	beq.n	800a008 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f003 0304 	and.w	r3, r3, #4
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01b      	beq.n	800a008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f06f 0204 	mvn.w	r2, #4
 8009fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2202      	movs	r2, #2
 8009fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	699b      	ldr	r3, [r3, #24]
 8009fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 f98e 	bl	800a310 <HAL_TIM_IC_CaptureCallback>
 8009ff4:	e005      	b.n	800a002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f000 f980 	bl	800a2fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f991 	bl	800a324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	f003 0308 	and.w	r3, r3, #8
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d020      	beq.n	800a054 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f003 0308 	and.w	r3, r3, #8
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d01b      	beq.n	800a054 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f06f 0208 	mvn.w	r2, #8
 800a024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2204      	movs	r2, #4
 800a02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	69db      	ldr	r3, [r3, #28]
 800a032:	f003 0303 	and.w	r3, r3, #3
 800a036:	2b00      	cmp	r3, #0
 800a038:	d003      	beq.n	800a042 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f968 	bl	800a310 <HAL_TIM_IC_CaptureCallback>
 800a040:	e005      	b.n	800a04e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f000 f95a 	bl	800a2fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f000 f96b 	bl	800a324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2200      	movs	r2, #0
 800a052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	f003 0310 	and.w	r3, r3, #16
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d020      	beq.n	800a0a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f003 0310 	and.w	r3, r3, #16
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01b      	beq.n	800a0a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f06f 0210 	mvn.w	r2, #16
 800a070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2208      	movs	r2, #8
 800a076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	69db      	ldr	r3, [r3, #28]
 800a07e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 f942 	bl	800a310 <HAL_TIM_IC_CaptureCallback>
 800a08c:	e005      	b.n	800a09a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f934 	bl	800a2fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f945 	bl	800a324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00c      	beq.n	800a0c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d007      	beq.n	800a0c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f06f 0201 	mvn.w	r2, #1
 800a0bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f7f7 f924 	bl	800130c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d104      	bne.n	800a0d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d00c      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d007      	beq.n	800a0f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fb05 	bl	800a6fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00c      	beq.n	800a116 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a10e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 fafd 	bl	800a710 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00c      	beq.n	800a13a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a126:	2b00      	cmp	r3, #0
 800a128:	d007      	beq.n	800a13a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f8ff 	bl	800a338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f003 0320 	and.w	r3, r3, #32
 800a140:	2b00      	cmp	r3, #0
 800a142:	d00c      	beq.n	800a15e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f003 0320 	and.w	r3, r3, #32
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d007      	beq.n	800a15e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f06f 0220 	mvn.w	r2, #32
 800a156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a158:	6878      	ldr	r0, [r7, #4]
 800a15a:	f000 fac5 	bl	800a6e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a15e:	bf00      	nop
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d101      	bne.n	800a184 <HAL_TIM_ConfigClockSource+0x1c>
 800a180:	2302      	movs	r3, #2
 800a182:	e0b4      	b.n	800a2ee <HAL_TIM_ConfigClockSource+0x186>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	4b56      	ldr	r3, [pc, #344]	@ (800a2f8 <HAL_TIM_ConfigClockSource+0x190>)
 800a1a0:	4013      	ands	r3, r2
 800a1a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a1aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1bc:	d03e      	beq.n	800a23c <HAL_TIM_ConfigClockSource+0xd4>
 800a1be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1c2:	f200 8087 	bhi.w	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a1c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ca:	f000 8086 	beq.w	800a2da <HAL_TIM_ConfigClockSource+0x172>
 800a1ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1d2:	d87f      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a1d4:	2b70      	cmp	r3, #112	@ 0x70
 800a1d6:	d01a      	beq.n	800a20e <HAL_TIM_ConfigClockSource+0xa6>
 800a1d8:	2b70      	cmp	r3, #112	@ 0x70
 800a1da:	d87b      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a1dc:	2b60      	cmp	r3, #96	@ 0x60
 800a1de:	d050      	beq.n	800a282 <HAL_TIM_ConfigClockSource+0x11a>
 800a1e0:	2b60      	cmp	r3, #96	@ 0x60
 800a1e2:	d877      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a1e4:	2b50      	cmp	r3, #80	@ 0x50
 800a1e6:	d03c      	beq.n	800a262 <HAL_TIM_ConfigClockSource+0xfa>
 800a1e8:	2b50      	cmp	r3, #80	@ 0x50
 800a1ea:	d873      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a1ec:	2b40      	cmp	r3, #64	@ 0x40
 800a1ee:	d058      	beq.n	800a2a2 <HAL_TIM_ConfigClockSource+0x13a>
 800a1f0:	2b40      	cmp	r3, #64	@ 0x40
 800a1f2:	d86f      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a1f4:	2b30      	cmp	r3, #48	@ 0x30
 800a1f6:	d064      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a1f8:	2b30      	cmp	r3, #48	@ 0x30
 800a1fa:	d86b      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a1fc:	2b20      	cmp	r3, #32
 800a1fe:	d060      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a200:	2b20      	cmp	r3, #32
 800a202:	d867      	bhi.n	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d05c      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a208:	2b10      	cmp	r3, #16
 800a20a:	d05a      	beq.n	800a2c2 <HAL_TIM_ConfigClockSource+0x15a>
 800a20c:	e062      	b.n	800a2d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a21e:	f000 f9b5 	bl	800a58c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	609a      	str	r2, [r3, #8]
      break;
 800a23a:	e04f      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a24c:	f000 f99e 	bl	800a58c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689a      	ldr	r2, [r3, #8]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a25e:	609a      	str	r2, [r3, #8]
      break;
 800a260:	e03c      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a26e:	461a      	mov	r2, r3
 800a270:	f000 f912 	bl	800a498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2150      	movs	r1, #80	@ 0x50
 800a27a:	4618      	mov	r0, r3
 800a27c:	f000 f96b 	bl	800a556 <TIM_ITRx_SetConfig>
      break;
 800a280:	e02c      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a28e:	461a      	mov	r2, r3
 800a290:	f000 f931 	bl	800a4f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2160      	movs	r1, #96	@ 0x60
 800a29a:	4618      	mov	r0, r3
 800a29c:	f000 f95b 	bl	800a556 <TIM_ITRx_SetConfig>
      break;
 800a2a0:	e01c      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f000 f8f2 	bl	800a498 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2140      	movs	r1, #64	@ 0x40
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f000 f94b 	bl	800a556 <TIM_ITRx_SetConfig>
      break;
 800a2c0:	e00c      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	4610      	mov	r0, r2
 800a2ce:	f000 f942 	bl	800a556 <TIM_ITRx_SetConfig>
      break;
 800a2d2:	e003      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a2d8:	e000      	b.n	800a2dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a2da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3710      	adds	r7, #16
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	fffeff88 	.word	0xfffeff88

0800a2fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a32c:	bf00      	nop
 800a32e:	370c      	adds	r7, #12
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a340:	bf00      	nop
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34a:	4770      	bx	lr

0800a34c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a34c:	b480      	push	{r7}
 800a34e:	b085      	sub	sp, #20
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a43      	ldr	r2, [pc, #268]	@ (800a46c <TIM_Base_SetConfig+0x120>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d013      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a36a:	d00f      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a40      	ldr	r2, [pc, #256]	@ (800a470 <TIM_Base_SetConfig+0x124>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00b      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a3f      	ldr	r2, [pc, #252]	@ (800a474 <TIM_Base_SetConfig+0x128>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d007      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a3e      	ldr	r2, [pc, #248]	@ (800a478 <TIM_Base_SetConfig+0x12c>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d003      	beq.n	800a38c <TIM_Base_SetConfig+0x40>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a3d      	ldr	r2, [pc, #244]	@ (800a47c <TIM_Base_SetConfig+0x130>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d108      	bne.n	800a39e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	68fa      	ldr	r2, [r7, #12]
 800a39a:	4313      	orrs	r3, r2
 800a39c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	4a32      	ldr	r2, [pc, #200]	@ (800a46c <TIM_Base_SetConfig+0x120>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d02b      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ac:	d027      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	4a2f      	ldr	r2, [pc, #188]	@ (800a470 <TIM_Base_SetConfig+0x124>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d023      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	4a2e      	ldr	r2, [pc, #184]	@ (800a474 <TIM_Base_SetConfig+0x128>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d01f      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a2d      	ldr	r2, [pc, #180]	@ (800a478 <TIM_Base_SetConfig+0x12c>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d01b      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a2c      	ldr	r2, [pc, #176]	@ (800a47c <TIM_Base_SetConfig+0x130>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d017      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a2b      	ldr	r2, [pc, #172]	@ (800a480 <TIM_Base_SetConfig+0x134>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d013      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	4a2a      	ldr	r2, [pc, #168]	@ (800a484 <TIM_Base_SetConfig+0x138>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d00f      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	4a29      	ldr	r2, [pc, #164]	@ (800a488 <TIM_Base_SetConfig+0x13c>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d00b      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	4a28      	ldr	r2, [pc, #160]	@ (800a48c <TIM_Base_SetConfig+0x140>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d007      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	4a27      	ldr	r2, [pc, #156]	@ (800a490 <TIM_Base_SetConfig+0x144>)
 800a3f2:	4293      	cmp	r3, r2
 800a3f4:	d003      	beq.n	800a3fe <TIM_Base_SetConfig+0xb2>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	4a26      	ldr	r2, [pc, #152]	@ (800a494 <TIM_Base_SetConfig+0x148>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d108      	bne.n	800a410 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	695b      	ldr	r3, [r3, #20]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	689a      	ldr	r2, [r3, #8]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a0e      	ldr	r2, [pc, #56]	@ (800a46c <TIM_Base_SetConfig+0x120>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <TIM_Base_SetConfig+0xf2>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a10      	ldr	r2, [pc, #64]	@ (800a47c <TIM_Base_SetConfig+0x130>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d103      	bne.n	800a446 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	691a      	ldr	r2, [r3, #16]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f043 0204 	orr.w	r2, r3, #4
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	601a      	str	r2, [r3, #0]
}
 800a45e:	bf00      	nop
 800a460:	3714      	adds	r7, #20
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	40010000 	.word	0x40010000
 800a470:	40000400 	.word	0x40000400
 800a474:	40000800 	.word	0x40000800
 800a478:	40000c00 	.word	0x40000c00
 800a47c:	40010400 	.word	0x40010400
 800a480:	40014000 	.word	0x40014000
 800a484:	40014400 	.word	0x40014400
 800a488:	40014800 	.word	0x40014800
 800a48c:	40001800 	.word	0x40001800
 800a490:	40001c00 	.word	0x40001c00
 800a494:	40002000 	.word	0x40002000

0800a498 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a498:	b480      	push	{r7}
 800a49a:	b087      	sub	sp, #28
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a1b      	ldr	r3, [r3, #32]
 800a4ae:	f023 0201 	bic.w	r2, r3, #1
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a4c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	011b      	lsls	r3, r3, #4
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f023 030a 	bic.w	r3, r3, #10
 800a4d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4d6:	697a      	ldr	r2, [r7, #20]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	693a      	ldr	r2, [r7, #16]
 800a4e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	697a      	ldr	r2, [r7, #20]
 800a4e8:	621a      	str	r2, [r3, #32]
}
 800a4ea:	bf00      	nop
 800a4ec:	371c      	adds	r7, #28
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b087      	sub	sp, #28
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	60f8      	str	r0, [r7, #12]
 800a4fe:	60b9      	str	r1, [r7, #8]
 800a500:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	f023 0210 	bic.w	r2, r3, #16
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	699b      	ldr	r3, [r3, #24]
 800a518:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a520:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	031b      	lsls	r3, r3, #12
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4313      	orrs	r3, r2
 800a52a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a532:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	697a      	ldr	r2, [r7, #20]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	621a      	str	r2, [r3, #32]
}
 800a54a:	bf00      	nop
 800a54c:	371c      	adds	r7, #28
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a556:	b480      	push	{r7}
 800a558:	b085      	sub	sp, #20
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a56c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4313      	orrs	r3, r2
 800a574:	f043 0307 	orr.w	r3, r3, #7
 800a578:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	609a      	str	r2, [r3, #8]
}
 800a580:	bf00      	nop
 800a582:	3714      	adds	r7, #20
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b087      	sub	sp, #28
 800a590:	af00      	add	r7, sp, #0
 800a592:	60f8      	str	r0, [r7, #12]
 800a594:	60b9      	str	r1, [r7, #8]
 800a596:	607a      	str	r2, [r7, #4]
 800a598:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	021a      	lsls	r2, r3, #8
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	697a      	ldr	r2, [r7, #20]
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	609a      	str	r2, [r3, #8]
}
 800a5c0:	bf00      	nop
 800a5c2:	371c      	adds	r7, #28
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b085      	sub	sp, #20
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d101      	bne.n	800a5e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e06d      	b.n	800a6c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2202      	movs	r2, #2
 800a5f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a30      	ldr	r2, [pc, #192]	@ (800a6cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d004      	beq.n	800a618 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a2f      	ldr	r2, [pc, #188]	@ (800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d108      	bne.n	800a62a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a61e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	4313      	orrs	r3, r2
 800a628:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a630:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	68fa      	ldr	r2, [r7, #12]
 800a638:	4313      	orrs	r3, r2
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	4a20      	ldr	r2, [pc, #128]	@ (800a6cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d022      	beq.n	800a694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a656:	d01d      	beq.n	800a694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a1d      	ldr	r2, [pc, #116]	@ (800a6d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d018      	beq.n	800a694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	4a1c      	ldr	r2, [pc, #112]	@ (800a6d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d013      	beq.n	800a694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	4a1a      	ldr	r2, [pc, #104]	@ (800a6dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d00e      	beq.n	800a694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a15      	ldr	r2, [pc, #84]	@ (800a6d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d009      	beq.n	800a694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a16      	ldr	r2, [pc, #88]	@ (800a6e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d004      	beq.n	800a694 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	4a15      	ldr	r2, [pc, #84]	@ (800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a690:	4293      	cmp	r3, r2
 800a692:	d10c      	bne.n	800a6ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a69a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a6be:	2300      	movs	r3, #0
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	40010000 	.word	0x40010000
 800a6d0:	40010400 	.word	0x40010400
 800a6d4:	40000400 	.word	0x40000400
 800a6d8:	40000800 	.word	0x40000800
 800a6dc:	40000c00 	.word	0x40000c00
 800a6e0:	40014000 	.word	0x40014000
 800a6e4:	40001800 	.word	0x40001800

0800a6e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6f0:	bf00      	nop
 800a6f2:	370c      	adds	r7, #12
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a704:	bf00      	nop
 800a706:	370c      	adds	r7, #12
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e040      	b.n	800a7b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d106      	bne.n	800a74c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2200      	movs	r2, #0
 800a742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f7f7 fbd4 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2224      	movs	r2, #36	@ 0x24
 800a750:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0201 	bic.w	r2, r2, #1
 800a760:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a766:	2b00      	cmp	r3, #0
 800a768:	d002      	beq.n	800a770 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f000 fece 	bl	800b50c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fc67 	bl	800b044 <UART_SetConfig>
 800a776:	4603      	mov	r3, r0
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d101      	bne.n	800a780 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e01b      	b.n	800a7b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685a      	ldr	r2, [r3, #4]
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a78e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	689a      	ldr	r2, [r3, #8]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a79e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f042 0201 	orr.w	r2, r2, #1
 800a7ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 ff4d 	bl	800b650 <UART_CheckIdleState>
 800a7b6:	4603      	mov	r3, r0
}
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b08a      	sub	sp, #40	@ 0x28
 800a7c4:	af02      	add	r7, sp, #8
 800a7c6:	60f8      	str	r0, [r7, #12]
 800a7c8:	60b9      	str	r1, [r7, #8]
 800a7ca:	603b      	str	r3, [r7, #0]
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7d4:	2b20      	cmp	r3, #32
 800a7d6:	d177      	bne.n	800a8c8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <HAL_UART_Transmit+0x24>
 800a7de:	88fb      	ldrh	r3, [r7, #6]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d101      	bne.n	800a7e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a7e4:	2301      	movs	r3, #1
 800a7e6:	e070      	b.n	800a8ca <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2221      	movs	r2, #33	@ 0x21
 800a7f4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a7f6:	f7f7 fe57 	bl	80024a8 <HAL_GetTick>
 800a7fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	88fa      	ldrh	r2, [r7, #6]
 800a800:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	88fa      	ldrh	r2, [r7, #6]
 800a808:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	689b      	ldr	r3, [r3, #8]
 800a810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a814:	d108      	bne.n	800a828 <HAL_UART_Transmit+0x68>
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	691b      	ldr	r3, [r3, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d104      	bne.n	800a828 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	61bb      	str	r3, [r7, #24]
 800a826:	e003      	b.n	800a830 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a82c:	2300      	movs	r3, #0
 800a82e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a830:	e02f      	b.n	800a892 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	2200      	movs	r2, #0
 800a83a:	2180      	movs	r1, #128	@ 0x80
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 ff5e 	bl	800b6fe <UART_WaitOnFlagUntilTimeout>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d004      	beq.n	800a852 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2220      	movs	r2, #32
 800a84c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e03b      	b.n	800a8ca <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10b      	bne.n	800a870 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	881b      	ldrh	r3, [r3, #0]
 800a85c:	461a      	mov	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a866:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	3302      	adds	r3, #2
 800a86c:	61bb      	str	r3, [r7, #24]
 800a86e:	e007      	b.n	800a880 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	781a      	ldrb	r2, [r3, #0]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a87a:	69fb      	ldr	r3, [r7, #28]
 800a87c:	3301      	adds	r3, #1
 800a87e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a886:	b29b      	uxth	r3, r3
 800a888:	3b01      	subs	r3, #1
 800a88a:	b29a      	uxth	r2, r3
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a898:	b29b      	uxth	r3, r3
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1c9      	bne.n	800a832 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	9300      	str	r3, [sp, #0]
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	2140      	movs	r1, #64	@ 0x40
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 ff28 	bl	800b6fe <UART_WaitOnFlagUntilTimeout>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d004      	beq.n	800a8be <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2220      	movs	r2, #32
 800a8b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a8ba:	2303      	movs	r3, #3
 800a8bc:	e005      	b.n	800a8ca <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e000      	b.n	800a8ca <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800a8c8:	2302      	movs	r3, #2
  }
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3720      	adds	r7, #32
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b08b      	sub	sp, #44	@ 0x2c
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8e6:	2b20      	cmp	r3, #32
 800a8e8:	d147      	bne.n	800a97a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8ea:	68bb      	ldr	r3, [r7, #8]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d002      	beq.n	800a8f6 <HAL_UART_Transmit_IT+0x22>
 800a8f0:	88fb      	ldrh	r3, [r7, #6]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e040      	b.n	800a97c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	68ba      	ldr	r2, [r7, #8]
 800a8fe:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	88fa      	ldrh	r2, [r7, #6]
 800a904:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	88fa      	ldrh	r2, [r7, #6]
 800a90c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    huart->TxISR       = NULL;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2200      	movs	r2, #0
 800a914:	66da      	str	r2, [r3, #108]	@ 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2221      	movs	r2, #33	@ 0x21
 800a922:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	689b      	ldr	r3, [r3, #8]
 800a928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a92c:	d107      	bne.n	800a93e <HAL_UART_Transmit_IT+0x6a>
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d103      	bne.n	800a93e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4a13      	ldr	r2, [pc, #76]	@ (800a988 <HAL_UART_Transmit_IT+0xb4>)
 800a93a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800a93c:	e002      	b.n	800a944 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	4a12      	ldr	r2, [pc, #72]	@ (800a98c <HAL_UART_Transmit_IT+0xb8>)
 800a942:	66da      	str	r2, [r3, #108]	@ 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	e853 3f00 	ldrex	r3, [r3]
 800a950:	613b      	str	r3, [r7, #16]
   return(result);
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a958:	627b      	str	r3, [r7, #36]	@ 0x24
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	461a      	mov	r2, r3
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	623b      	str	r3, [r7, #32]
 800a964:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a966:	69f9      	ldr	r1, [r7, #28]
 800a968:	6a3a      	ldr	r2, [r7, #32]
 800a96a:	e841 2300 	strex	r3, r2, [r1]
 800a96e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1e6      	bne.n	800a944 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	e000      	b.n	800a97c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a97a:	2302      	movs	r3, #2
  }
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	372c      	adds	r7, #44	@ 0x2c
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	0800bd55 	.word	0x0800bd55
 800a98c:	0800bc9f 	.word	0x0800bc9f

0800a990 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08a      	sub	sp, #40	@ 0x28
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	4613      	mov	r3, r2
 800a99c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	d132      	bne.n	800aa0e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <HAL_UART_Receive_DMA+0x24>
 800a9ae:	88fb      	ldrh	r3, [r7, #6]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d101      	bne.n	800a9b8 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800a9b4:	2301      	movs	r3, #1
 800a9b6:	e02b      	b.n	800aa10 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d018      	beq.n	800a9fe <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	613b      	str	r3, [r7, #16]
   return(result);
 800a9da:	693b      	ldr	r3, [r7, #16]
 800a9dc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a9e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	623b      	str	r3, [r7, #32]
 800a9ec:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	69f9      	ldr	r1, [r7, #28]
 800a9f0:	6a3a      	ldr	r2, [r7, #32]
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e6      	bne.n	800a9cc <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800a9fe:	88fb      	ldrh	r3, [r7, #6]
 800aa00:	461a      	mov	r2, r3
 800aa02:	68b9      	ldr	r1, [r7, #8]
 800aa04:	68f8      	ldr	r0, [r7, #12]
 800aa06:	f000 fee7 	bl	800b7d8 <UART_Start_Receive_DMA>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	e000      	b.n	800aa10 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800aa0e:	2302      	movs	r3, #2
  }
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3728      	adds	r7, #40	@ 0x28
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b0ba      	sub	sp, #232	@ 0xe8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa3e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa42:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa46:	4013      	ands	r3, r2
 800aa48:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d115      	bne.n	800aa80 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa58:	f003 0320 	and.w	r3, r3, #32
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00f      	beq.n	800aa80 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa64:	f003 0320 	and.w	r3, r3, #32
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d009      	beq.n	800aa80 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f000 82b1 	beq.w	800afd8 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa7a:	6878      	ldr	r0, [r7, #4]
 800aa7c:	4798      	blx	r3
      }
      return;
 800aa7e:	e2ab      	b.n	800afd8 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	f000 8117 	beq.w	800acb8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa8e:	f003 0301 	and.w	r3, r3, #1
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d106      	bne.n	800aaa4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa9a:	4b85      	ldr	r3, [pc, #532]	@ (800acb0 <HAL_UART_IRQHandler+0x298>)
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	f000 810a 	beq.w	800acb8 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d011      	beq.n	800aad4 <HAL_UART_IRQHandler+0xbc>
 800aab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00b      	beq.n	800aad4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2201      	movs	r2, #1
 800aac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaca:	f043 0201 	orr.w	r2, r3, #1
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad8:	f003 0302 	and.w	r3, r3, #2
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d011      	beq.n	800ab04 <HAL_UART_IRQHandler+0xec>
 800aae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aae4:	f003 0301 	and.w	r3, r3, #1
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00b      	beq.n	800ab04 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aafa:	f043 0204 	orr.w	r2, r3, #4
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d011      	beq.n	800ab34 <HAL_UART_IRQHandler+0x11c>
 800ab10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab14:	f003 0301 	and.w	r3, r3, #1
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d00b      	beq.n	800ab34 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2204      	movs	r2, #4
 800ab22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab2a:	f043 0202 	orr.w	r2, r3, #2
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab38:	f003 0308 	and.w	r3, r3, #8
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d017      	beq.n	800ab70 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab44:	f003 0320 	and.w	r3, r3, #32
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d105      	bne.n	800ab58 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ab4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab50:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00b      	beq.n	800ab70 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2208      	movs	r2, #8
 800ab5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab66:	f043 0208 	orr.w	r2, r3, #8
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d012      	beq.n	800aba2 <HAL_UART_IRQHandler+0x18a>
 800ab7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab80:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00c      	beq.n	800aba2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab98:	f043 0220 	orr.w	r2, r3, #32
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 8217 	beq.w	800afdc <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800abae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abb2:	f003 0320 	and.w	r3, r3, #32
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00d      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800abba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abbe:	f003 0320 	and.w	r3, r3, #32
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d007      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800abdc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	689b      	ldr	r3, [r3, #8]
 800abe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abea:	2b40      	cmp	r3, #64	@ 0x40
 800abec:	d005      	beq.n	800abfa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abf2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d04f      	beq.n	800ac9a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 feb2 	bl	800b964 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689b      	ldr	r3, [r3, #8]
 800ac06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac0a:	2b40      	cmp	r3, #64	@ 0x40
 800ac0c:	d141      	bne.n	800ac92 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	3308      	adds	r3, #8
 800ac14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ac1c:	e853 3f00 	ldrex	r3, [r3]
 800ac20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ac24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	3308      	adds	r3, #8
 800ac36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ac52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d1d9      	bne.n	800ac0e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d013      	beq.n	800ac8a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac66:	4a13      	ldr	r2, [pc, #76]	@ (800acb4 <HAL_UART_IRQHandler+0x29c>)
 800ac68:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f8 fd3a 	bl	80036e8 <HAL_DMA_Abort_IT>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d017      	beq.n	800acaa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac88:	e00f      	b.n	800acaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f000 f9c4 	bl	800b018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac90:	e00b      	b.n	800acaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f9c0 	bl	800b018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac98:	e007      	b.n	800acaa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f9bc 	bl	800b018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2200      	movs	r2, #0
 800aca4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800aca8:	e198      	b.n	800afdc <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acaa:	bf00      	nop
    return;
 800acac:	e196      	b.n	800afdc <HAL_UART_IRQHandler+0x5c4>
 800acae:	bf00      	nop
 800acb0:	04000120 	.word	0x04000120
 800acb4:	0800bc7b 	.word	0x0800bc7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	f040 8166 	bne.w	800af8e <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800acc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acc6:	f003 0310 	and.w	r3, r3, #16
 800acca:	2b00      	cmp	r3, #0
 800accc:	f000 815f 	beq.w	800af8e <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800acd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acd4:	f003 0310 	and.w	r3, r3, #16
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 8158 	beq.w	800af8e <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	2210      	movs	r2, #16
 800ace4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acf0:	2b40      	cmp	r3, #64	@ 0x40
 800acf2:	f040 80d0 	bne.w	800ae96 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ad02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	f000 80ab 	beq.w	800ae62 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ad12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad16:	429a      	cmp	r2, r3
 800ad18:	f080 80a3 	bcs.w	800ae62 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad22:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ad2a:	69db      	ldr	r3, [r3, #28]
 800ad2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad30:	f000 8086 	beq.w	800ae40 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad40:	e853 3f00 	ldrex	r3, [r3]
 800ad44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ad48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad5e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad62:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad66:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ad6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad6e:	e841 2300 	strex	r3, r2, [r1]
 800ad72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ad76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d1da      	bne.n	800ad34 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3308      	adds	r3, #8
 800ad84:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad86:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad88:	e853 3f00 	ldrex	r3, [r3]
 800ad8c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad8e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad90:	f023 0301 	bic.w	r3, r3, #1
 800ad94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	3308      	adds	r3, #8
 800ad9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ada2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ada6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800adaa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800adae:	e841 2300 	strex	r3, r2, [r1]
 800adb2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800adb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1e1      	bne.n	800ad7e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3308      	adds	r3, #8
 800adc0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adc4:	e853 3f00 	ldrex	r3, [r3]
 800adc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800adca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adcc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800add0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	3308      	adds	r3, #8
 800adda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800adde:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ade0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ade2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ade4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ade6:	e841 2300 	strex	r3, r2, [r1]
 800adea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800adec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d1e3      	bne.n	800adba <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2220      	movs	r2, #32
 800adf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae08:	e853 3f00 	ldrex	r3, [r3]
 800ae0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ae0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae10:	f023 0310 	bic.w	r3, r3, #16
 800ae14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae22:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae24:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae2a:	e841 2300 	strex	r3, r2, [r1]
 800ae2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1e4      	bne.n	800ae00 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7f8 fbe4 	bl	8003608 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	1ad3      	subs	r3, r2, r3
 800ae56:	b29b      	uxth	r3, r3
 800ae58:	4619      	mov	r1, r3
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f8e6 	bl	800b02c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800ae60:	e0be      	b.n	800afe0 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ae68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	f040 80b7 	bne.w	800afe0 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae76:	69db      	ldr	r3, [r3, #28]
 800ae78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae7c:	f040 80b0 	bne.w	800afe0 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2202      	movs	r2, #2
 800ae84:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f000 f8cc 	bl	800b02c <HAL_UARTEx_RxEventCallback>
      return;
 800ae94:	e0a4      	b.n	800afe0 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	f000 8096 	beq.w	800afe4 <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 800aeb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	f000 8091 	beq.w	800afe4 <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeca:	e853 3f00 	ldrex	r3, [r3]
 800aece:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aed0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aed2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aed6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	461a      	mov	r2, r3
 800aee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aee4:	647b      	str	r3, [r7, #68]	@ 0x44
 800aee6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aeea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aeec:	e841 2300 	strex	r3, r2, [r1]
 800aef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aef2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d1e4      	bne.n	800aec2 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	3308      	adds	r3, #8
 800aefe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af02:	e853 3f00 	ldrex	r3, [r3]
 800af06:	623b      	str	r3, [r7, #32]
   return(result);
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	f023 0301 	bic.w	r3, r3, #1
 800af0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	3308      	adds	r3, #8
 800af18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800af1c:	633a      	str	r2, [r7, #48]	@ 0x30
 800af1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800af22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af24:	e841 2300 	strex	r3, r2, [r1]
 800af28:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800af2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e3      	bne.n	800aef8 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2220      	movs	r2, #32
 800af34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2200      	movs	r2, #0
 800af3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2200      	movs	r2, #0
 800af42:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	e853 3f00 	ldrex	r3, [r3]
 800af50:	60fb      	str	r3, [r7, #12]
   return(result);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f023 0310 	bic.w	r3, r3, #16
 800af58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	461a      	mov	r2, r3
 800af62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800af66:	61fb      	str	r3, [r7, #28]
 800af68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af6a:	69b9      	ldr	r1, [r7, #24]
 800af6c:	69fa      	ldr	r2, [r7, #28]
 800af6e:	e841 2300 	strex	r3, r2, [r1]
 800af72:	617b      	str	r3, [r7, #20]
   return(result);
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d1e4      	bne.n	800af44 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2202      	movs	r2, #2
 800af7e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af84:	4619      	mov	r1, r3
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 f850 	bl	800b02c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af8c:	e02a      	b.n	800afe4 <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800af8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00e      	beq.n	800afb8 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800af9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d008      	beq.n	800afb8 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d01c      	beq.n	800afe8 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	4798      	blx	r3
    }
    return;
 800afb6:	e017      	b.n	800afe8 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800afb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d012      	beq.n	800afea <HAL_UART_IRQHandler+0x5d2>
 800afc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00c      	beq.n	800afea <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 ff1f 	bl	800be14 <UART_EndTransmit_IT>
    return;
 800afd6:	e008      	b.n	800afea <HAL_UART_IRQHandler+0x5d2>
      return;
 800afd8:	bf00      	nop
 800afda:	e006      	b.n	800afea <HAL_UART_IRQHandler+0x5d2>
    return;
 800afdc:	bf00      	nop
 800afde:	e004      	b.n	800afea <HAL_UART_IRQHandler+0x5d2>
      return;
 800afe0:	bf00      	nop
 800afe2:	e002      	b.n	800afea <HAL_UART_IRQHandler+0x5d2>
      return;
 800afe4:	bf00      	nop
 800afe6:	e000      	b.n	800afea <HAL_UART_IRQHandler+0x5d2>
    return;
 800afe8:	bf00      	nop
  }

}
 800afea:	37e8      	adds	r7, #232	@ 0xe8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b004:	b480      	push	{r7}
 800b006:	b083      	sub	sp, #12
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b018:	b480      	push	{r7}
 800b01a:	b083      	sub	sp, #12
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b020:	bf00      	nop
 800b022:	370c      	adds	r7, #12
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr

0800b02c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b083      	sub	sp, #12
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	460b      	mov	r3, r1
 800b036:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b038:	bf00      	nop
 800b03a:	370c      	adds	r7, #12
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b088      	sub	sp, #32
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b04c:	2300      	movs	r3, #0
 800b04e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	689a      	ldr	r2, [r3, #8]
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	691b      	ldr	r3, [r3, #16]
 800b058:	431a      	orrs	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	431a      	orrs	r2, r3
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	69db      	ldr	r3, [r3, #28]
 800b064:	4313      	orrs	r3, r2
 800b066:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	4ba6      	ldr	r3, [pc, #664]	@ (800b308 <UART_SetConfig+0x2c4>)
 800b070:	4013      	ands	r3, r2
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	6812      	ldr	r2, [r2, #0]
 800b076:	6979      	ldr	r1, [r7, #20]
 800b078:	430b      	orrs	r3, r1
 800b07a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	68da      	ldr	r2, [r3, #12]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	430a      	orrs	r2, r1
 800b090:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	699b      	ldr	r3, [r3, #24]
 800b096:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	6a1b      	ldr	r3, [r3, #32]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	689b      	ldr	r3, [r3, #8]
 800b0a8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	430a      	orrs	r2, r1
 800b0b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a94      	ldr	r2, [pc, #592]	@ (800b30c <UART_SetConfig+0x2c8>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d120      	bne.n	800b102 <UART_SetConfig+0xbe>
 800b0c0:	4b93      	ldr	r3, [pc, #588]	@ (800b310 <UART_SetConfig+0x2cc>)
 800b0c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0c6:	f003 0303 	and.w	r3, r3, #3
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d816      	bhi.n	800b0fc <UART_SetConfig+0xb8>
 800b0ce:	a201      	add	r2, pc, #4	@ (adr r2, 800b0d4 <UART_SetConfig+0x90>)
 800b0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d4:	0800b0e5 	.word	0x0800b0e5
 800b0d8:	0800b0f1 	.word	0x0800b0f1
 800b0dc:	0800b0eb 	.word	0x0800b0eb
 800b0e0:	0800b0f7 	.word	0x0800b0f7
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	77fb      	strb	r3, [r7, #31]
 800b0e8:	e150      	b.n	800b38c <UART_SetConfig+0x348>
 800b0ea:	2302      	movs	r3, #2
 800b0ec:	77fb      	strb	r3, [r7, #31]
 800b0ee:	e14d      	b.n	800b38c <UART_SetConfig+0x348>
 800b0f0:	2304      	movs	r3, #4
 800b0f2:	77fb      	strb	r3, [r7, #31]
 800b0f4:	e14a      	b.n	800b38c <UART_SetConfig+0x348>
 800b0f6:	2308      	movs	r3, #8
 800b0f8:	77fb      	strb	r3, [r7, #31]
 800b0fa:	e147      	b.n	800b38c <UART_SetConfig+0x348>
 800b0fc:	2310      	movs	r3, #16
 800b0fe:	77fb      	strb	r3, [r7, #31]
 800b100:	e144      	b.n	800b38c <UART_SetConfig+0x348>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a83      	ldr	r2, [pc, #524]	@ (800b314 <UART_SetConfig+0x2d0>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d132      	bne.n	800b172 <UART_SetConfig+0x12e>
 800b10c:	4b80      	ldr	r3, [pc, #512]	@ (800b310 <UART_SetConfig+0x2cc>)
 800b10e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b112:	f003 030c 	and.w	r3, r3, #12
 800b116:	2b0c      	cmp	r3, #12
 800b118:	d828      	bhi.n	800b16c <UART_SetConfig+0x128>
 800b11a:	a201      	add	r2, pc, #4	@ (adr r2, 800b120 <UART_SetConfig+0xdc>)
 800b11c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b120:	0800b155 	.word	0x0800b155
 800b124:	0800b16d 	.word	0x0800b16d
 800b128:	0800b16d 	.word	0x0800b16d
 800b12c:	0800b16d 	.word	0x0800b16d
 800b130:	0800b161 	.word	0x0800b161
 800b134:	0800b16d 	.word	0x0800b16d
 800b138:	0800b16d 	.word	0x0800b16d
 800b13c:	0800b16d 	.word	0x0800b16d
 800b140:	0800b15b 	.word	0x0800b15b
 800b144:	0800b16d 	.word	0x0800b16d
 800b148:	0800b16d 	.word	0x0800b16d
 800b14c:	0800b16d 	.word	0x0800b16d
 800b150:	0800b167 	.word	0x0800b167
 800b154:	2300      	movs	r3, #0
 800b156:	77fb      	strb	r3, [r7, #31]
 800b158:	e118      	b.n	800b38c <UART_SetConfig+0x348>
 800b15a:	2302      	movs	r3, #2
 800b15c:	77fb      	strb	r3, [r7, #31]
 800b15e:	e115      	b.n	800b38c <UART_SetConfig+0x348>
 800b160:	2304      	movs	r3, #4
 800b162:	77fb      	strb	r3, [r7, #31]
 800b164:	e112      	b.n	800b38c <UART_SetConfig+0x348>
 800b166:	2308      	movs	r3, #8
 800b168:	77fb      	strb	r3, [r7, #31]
 800b16a:	e10f      	b.n	800b38c <UART_SetConfig+0x348>
 800b16c:	2310      	movs	r3, #16
 800b16e:	77fb      	strb	r3, [r7, #31]
 800b170:	e10c      	b.n	800b38c <UART_SetConfig+0x348>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a68      	ldr	r2, [pc, #416]	@ (800b318 <UART_SetConfig+0x2d4>)
 800b178:	4293      	cmp	r3, r2
 800b17a:	d120      	bne.n	800b1be <UART_SetConfig+0x17a>
 800b17c:	4b64      	ldr	r3, [pc, #400]	@ (800b310 <UART_SetConfig+0x2cc>)
 800b17e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b182:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b186:	2b30      	cmp	r3, #48	@ 0x30
 800b188:	d013      	beq.n	800b1b2 <UART_SetConfig+0x16e>
 800b18a:	2b30      	cmp	r3, #48	@ 0x30
 800b18c:	d814      	bhi.n	800b1b8 <UART_SetConfig+0x174>
 800b18e:	2b20      	cmp	r3, #32
 800b190:	d009      	beq.n	800b1a6 <UART_SetConfig+0x162>
 800b192:	2b20      	cmp	r3, #32
 800b194:	d810      	bhi.n	800b1b8 <UART_SetConfig+0x174>
 800b196:	2b00      	cmp	r3, #0
 800b198:	d002      	beq.n	800b1a0 <UART_SetConfig+0x15c>
 800b19a:	2b10      	cmp	r3, #16
 800b19c:	d006      	beq.n	800b1ac <UART_SetConfig+0x168>
 800b19e:	e00b      	b.n	800b1b8 <UART_SetConfig+0x174>
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	77fb      	strb	r3, [r7, #31]
 800b1a4:	e0f2      	b.n	800b38c <UART_SetConfig+0x348>
 800b1a6:	2302      	movs	r3, #2
 800b1a8:	77fb      	strb	r3, [r7, #31]
 800b1aa:	e0ef      	b.n	800b38c <UART_SetConfig+0x348>
 800b1ac:	2304      	movs	r3, #4
 800b1ae:	77fb      	strb	r3, [r7, #31]
 800b1b0:	e0ec      	b.n	800b38c <UART_SetConfig+0x348>
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	77fb      	strb	r3, [r7, #31]
 800b1b6:	e0e9      	b.n	800b38c <UART_SetConfig+0x348>
 800b1b8:	2310      	movs	r3, #16
 800b1ba:	77fb      	strb	r3, [r7, #31]
 800b1bc:	e0e6      	b.n	800b38c <UART_SetConfig+0x348>
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a56      	ldr	r2, [pc, #344]	@ (800b31c <UART_SetConfig+0x2d8>)
 800b1c4:	4293      	cmp	r3, r2
 800b1c6:	d120      	bne.n	800b20a <UART_SetConfig+0x1c6>
 800b1c8:	4b51      	ldr	r3, [pc, #324]	@ (800b310 <UART_SetConfig+0x2cc>)
 800b1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b1d2:	2bc0      	cmp	r3, #192	@ 0xc0
 800b1d4:	d013      	beq.n	800b1fe <UART_SetConfig+0x1ba>
 800b1d6:	2bc0      	cmp	r3, #192	@ 0xc0
 800b1d8:	d814      	bhi.n	800b204 <UART_SetConfig+0x1c0>
 800b1da:	2b80      	cmp	r3, #128	@ 0x80
 800b1dc:	d009      	beq.n	800b1f2 <UART_SetConfig+0x1ae>
 800b1de:	2b80      	cmp	r3, #128	@ 0x80
 800b1e0:	d810      	bhi.n	800b204 <UART_SetConfig+0x1c0>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d002      	beq.n	800b1ec <UART_SetConfig+0x1a8>
 800b1e6:	2b40      	cmp	r3, #64	@ 0x40
 800b1e8:	d006      	beq.n	800b1f8 <UART_SetConfig+0x1b4>
 800b1ea:	e00b      	b.n	800b204 <UART_SetConfig+0x1c0>
 800b1ec:	2300      	movs	r3, #0
 800b1ee:	77fb      	strb	r3, [r7, #31]
 800b1f0:	e0cc      	b.n	800b38c <UART_SetConfig+0x348>
 800b1f2:	2302      	movs	r3, #2
 800b1f4:	77fb      	strb	r3, [r7, #31]
 800b1f6:	e0c9      	b.n	800b38c <UART_SetConfig+0x348>
 800b1f8:	2304      	movs	r3, #4
 800b1fa:	77fb      	strb	r3, [r7, #31]
 800b1fc:	e0c6      	b.n	800b38c <UART_SetConfig+0x348>
 800b1fe:	2308      	movs	r3, #8
 800b200:	77fb      	strb	r3, [r7, #31]
 800b202:	e0c3      	b.n	800b38c <UART_SetConfig+0x348>
 800b204:	2310      	movs	r3, #16
 800b206:	77fb      	strb	r3, [r7, #31]
 800b208:	e0c0      	b.n	800b38c <UART_SetConfig+0x348>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a44      	ldr	r2, [pc, #272]	@ (800b320 <UART_SetConfig+0x2dc>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d125      	bne.n	800b260 <UART_SetConfig+0x21c>
 800b214:	4b3e      	ldr	r3, [pc, #248]	@ (800b310 <UART_SetConfig+0x2cc>)
 800b216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b21a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b21e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b222:	d017      	beq.n	800b254 <UART_SetConfig+0x210>
 800b224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b228:	d817      	bhi.n	800b25a <UART_SetConfig+0x216>
 800b22a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b22e:	d00b      	beq.n	800b248 <UART_SetConfig+0x204>
 800b230:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b234:	d811      	bhi.n	800b25a <UART_SetConfig+0x216>
 800b236:	2b00      	cmp	r3, #0
 800b238:	d003      	beq.n	800b242 <UART_SetConfig+0x1fe>
 800b23a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b23e:	d006      	beq.n	800b24e <UART_SetConfig+0x20a>
 800b240:	e00b      	b.n	800b25a <UART_SetConfig+0x216>
 800b242:	2300      	movs	r3, #0
 800b244:	77fb      	strb	r3, [r7, #31]
 800b246:	e0a1      	b.n	800b38c <UART_SetConfig+0x348>
 800b248:	2302      	movs	r3, #2
 800b24a:	77fb      	strb	r3, [r7, #31]
 800b24c:	e09e      	b.n	800b38c <UART_SetConfig+0x348>
 800b24e:	2304      	movs	r3, #4
 800b250:	77fb      	strb	r3, [r7, #31]
 800b252:	e09b      	b.n	800b38c <UART_SetConfig+0x348>
 800b254:	2308      	movs	r3, #8
 800b256:	77fb      	strb	r3, [r7, #31]
 800b258:	e098      	b.n	800b38c <UART_SetConfig+0x348>
 800b25a:	2310      	movs	r3, #16
 800b25c:	77fb      	strb	r3, [r7, #31]
 800b25e:	e095      	b.n	800b38c <UART_SetConfig+0x348>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a2f      	ldr	r2, [pc, #188]	@ (800b324 <UART_SetConfig+0x2e0>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d125      	bne.n	800b2b6 <UART_SetConfig+0x272>
 800b26a:	4b29      	ldr	r3, [pc, #164]	@ (800b310 <UART_SetConfig+0x2cc>)
 800b26c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b270:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b274:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b278:	d017      	beq.n	800b2aa <UART_SetConfig+0x266>
 800b27a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b27e:	d817      	bhi.n	800b2b0 <UART_SetConfig+0x26c>
 800b280:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b284:	d00b      	beq.n	800b29e <UART_SetConfig+0x25a>
 800b286:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b28a:	d811      	bhi.n	800b2b0 <UART_SetConfig+0x26c>
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d003      	beq.n	800b298 <UART_SetConfig+0x254>
 800b290:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b294:	d006      	beq.n	800b2a4 <UART_SetConfig+0x260>
 800b296:	e00b      	b.n	800b2b0 <UART_SetConfig+0x26c>
 800b298:	2301      	movs	r3, #1
 800b29a:	77fb      	strb	r3, [r7, #31]
 800b29c:	e076      	b.n	800b38c <UART_SetConfig+0x348>
 800b29e:	2302      	movs	r3, #2
 800b2a0:	77fb      	strb	r3, [r7, #31]
 800b2a2:	e073      	b.n	800b38c <UART_SetConfig+0x348>
 800b2a4:	2304      	movs	r3, #4
 800b2a6:	77fb      	strb	r3, [r7, #31]
 800b2a8:	e070      	b.n	800b38c <UART_SetConfig+0x348>
 800b2aa:	2308      	movs	r3, #8
 800b2ac:	77fb      	strb	r3, [r7, #31]
 800b2ae:	e06d      	b.n	800b38c <UART_SetConfig+0x348>
 800b2b0:	2310      	movs	r3, #16
 800b2b2:	77fb      	strb	r3, [r7, #31]
 800b2b4:	e06a      	b.n	800b38c <UART_SetConfig+0x348>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a1b      	ldr	r2, [pc, #108]	@ (800b328 <UART_SetConfig+0x2e4>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d138      	bne.n	800b332 <UART_SetConfig+0x2ee>
 800b2c0:	4b13      	ldr	r3, [pc, #76]	@ (800b310 <UART_SetConfig+0x2cc>)
 800b2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2c6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b2ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b2ce:	d017      	beq.n	800b300 <UART_SetConfig+0x2bc>
 800b2d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b2d4:	d82a      	bhi.n	800b32c <UART_SetConfig+0x2e8>
 800b2d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2da:	d00b      	beq.n	800b2f4 <UART_SetConfig+0x2b0>
 800b2dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b2e0:	d824      	bhi.n	800b32c <UART_SetConfig+0x2e8>
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d003      	beq.n	800b2ee <UART_SetConfig+0x2aa>
 800b2e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2ea:	d006      	beq.n	800b2fa <UART_SetConfig+0x2b6>
 800b2ec:	e01e      	b.n	800b32c <UART_SetConfig+0x2e8>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	77fb      	strb	r3, [r7, #31]
 800b2f2:	e04b      	b.n	800b38c <UART_SetConfig+0x348>
 800b2f4:	2302      	movs	r3, #2
 800b2f6:	77fb      	strb	r3, [r7, #31]
 800b2f8:	e048      	b.n	800b38c <UART_SetConfig+0x348>
 800b2fa:	2304      	movs	r3, #4
 800b2fc:	77fb      	strb	r3, [r7, #31]
 800b2fe:	e045      	b.n	800b38c <UART_SetConfig+0x348>
 800b300:	2308      	movs	r3, #8
 800b302:	77fb      	strb	r3, [r7, #31]
 800b304:	e042      	b.n	800b38c <UART_SetConfig+0x348>
 800b306:	bf00      	nop
 800b308:	efff69f3 	.word	0xefff69f3
 800b30c:	40011000 	.word	0x40011000
 800b310:	40023800 	.word	0x40023800
 800b314:	40004400 	.word	0x40004400
 800b318:	40004800 	.word	0x40004800
 800b31c:	40004c00 	.word	0x40004c00
 800b320:	40005000 	.word	0x40005000
 800b324:	40011400 	.word	0x40011400
 800b328:	40007800 	.word	0x40007800
 800b32c:	2310      	movs	r3, #16
 800b32e:	77fb      	strb	r3, [r7, #31]
 800b330:	e02c      	b.n	800b38c <UART_SetConfig+0x348>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a72      	ldr	r2, [pc, #456]	@ (800b500 <UART_SetConfig+0x4bc>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d125      	bne.n	800b388 <UART_SetConfig+0x344>
 800b33c:	4b71      	ldr	r3, [pc, #452]	@ (800b504 <UART_SetConfig+0x4c0>)
 800b33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b342:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b346:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b34a:	d017      	beq.n	800b37c <UART_SetConfig+0x338>
 800b34c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b350:	d817      	bhi.n	800b382 <UART_SetConfig+0x33e>
 800b352:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b356:	d00b      	beq.n	800b370 <UART_SetConfig+0x32c>
 800b358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b35c:	d811      	bhi.n	800b382 <UART_SetConfig+0x33e>
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d003      	beq.n	800b36a <UART_SetConfig+0x326>
 800b362:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b366:	d006      	beq.n	800b376 <UART_SetConfig+0x332>
 800b368:	e00b      	b.n	800b382 <UART_SetConfig+0x33e>
 800b36a:	2300      	movs	r3, #0
 800b36c:	77fb      	strb	r3, [r7, #31]
 800b36e:	e00d      	b.n	800b38c <UART_SetConfig+0x348>
 800b370:	2302      	movs	r3, #2
 800b372:	77fb      	strb	r3, [r7, #31]
 800b374:	e00a      	b.n	800b38c <UART_SetConfig+0x348>
 800b376:	2304      	movs	r3, #4
 800b378:	77fb      	strb	r3, [r7, #31]
 800b37a:	e007      	b.n	800b38c <UART_SetConfig+0x348>
 800b37c:	2308      	movs	r3, #8
 800b37e:	77fb      	strb	r3, [r7, #31]
 800b380:	e004      	b.n	800b38c <UART_SetConfig+0x348>
 800b382:	2310      	movs	r3, #16
 800b384:	77fb      	strb	r3, [r7, #31]
 800b386:	e001      	b.n	800b38c <UART_SetConfig+0x348>
 800b388:	2310      	movs	r3, #16
 800b38a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b394:	d15b      	bne.n	800b44e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b396:	7ffb      	ldrb	r3, [r7, #31]
 800b398:	2b08      	cmp	r3, #8
 800b39a:	d828      	bhi.n	800b3ee <UART_SetConfig+0x3aa>
 800b39c:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a4 <UART_SetConfig+0x360>)
 800b39e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a2:	bf00      	nop
 800b3a4:	0800b3c9 	.word	0x0800b3c9
 800b3a8:	0800b3d1 	.word	0x0800b3d1
 800b3ac:	0800b3d9 	.word	0x0800b3d9
 800b3b0:	0800b3ef 	.word	0x0800b3ef
 800b3b4:	0800b3df 	.word	0x0800b3df
 800b3b8:	0800b3ef 	.word	0x0800b3ef
 800b3bc:	0800b3ef 	.word	0x0800b3ef
 800b3c0:	0800b3ef 	.word	0x0800b3ef
 800b3c4:	0800b3e7 	.word	0x0800b3e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3c8:	f7fc ff4c 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 800b3cc:	61b8      	str	r0, [r7, #24]
        break;
 800b3ce:	e013      	b.n	800b3f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3d0:	f7fc ff5c 	bl	800828c <HAL_RCC_GetPCLK2Freq>
 800b3d4:	61b8      	str	r0, [r7, #24]
        break;
 800b3d6:	e00f      	b.n	800b3f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3d8:	4b4b      	ldr	r3, [pc, #300]	@ (800b508 <UART_SetConfig+0x4c4>)
 800b3da:	61bb      	str	r3, [r7, #24]
        break;
 800b3dc:	e00c      	b.n	800b3f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3de:	f7fc fe6f 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 800b3e2:	61b8      	str	r0, [r7, #24]
        break;
 800b3e4:	e008      	b.n	800b3f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3ea:	61bb      	str	r3, [r7, #24]
        break;
 800b3ec:	e004      	b.n	800b3f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	77bb      	strb	r3, [r7, #30]
        break;
 800b3f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d074      	beq.n	800b4e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	005a      	lsls	r2, r3, #1
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	085b      	lsrs	r3, r3, #1
 800b408:	441a      	add	r2, r3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b412:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2b0f      	cmp	r3, #15
 800b418:	d916      	bls.n	800b448 <UART_SetConfig+0x404>
 800b41a:	693b      	ldr	r3, [r7, #16]
 800b41c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b420:	d212      	bcs.n	800b448 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	b29b      	uxth	r3, r3
 800b426:	f023 030f 	bic.w	r3, r3, #15
 800b42a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	085b      	lsrs	r3, r3, #1
 800b430:	b29b      	uxth	r3, r3
 800b432:	f003 0307 	and.w	r3, r3, #7
 800b436:	b29a      	uxth	r2, r3
 800b438:	89fb      	ldrh	r3, [r7, #14]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	89fa      	ldrh	r2, [r7, #14]
 800b444:	60da      	str	r2, [r3, #12]
 800b446:	e04f      	b.n	800b4e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b448:	2301      	movs	r3, #1
 800b44a:	77bb      	strb	r3, [r7, #30]
 800b44c:	e04c      	b.n	800b4e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b44e:	7ffb      	ldrb	r3, [r7, #31]
 800b450:	2b08      	cmp	r3, #8
 800b452:	d828      	bhi.n	800b4a6 <UART_SetConfig+0x462>
 800b454:	a201      	add	r2, pc, #4	@ (adr r2, 800b45c <UART_SetConfig+0x418>)
 800b456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45a:	bf00      	nop
 800b45c:	0800b481 	.word	0x0800b481
 800b460:	0800b489 	.word	0x0800b489
 800b464:	0800b491 	.word	0x0800b491
 800b468:	0800b4a7 	.word	0x0800b4a7
 800b46c:	0800b497 	.word	0x0800b497
 800b470:	0800b4a7 	.word	0x0800b4a7
 800b474:	0800b4a7 	.word	0x0800b4a7
 800b478:	0800b4a7 	.word	0x0800b4a7
 800b47c:	0800b49f 	.word	0x0800b49f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b480:	f7fc fef0 	bl	8008264 <HAL_RCC_GetPCLK1Freq>
 800b484:	61b8      	str	r0, [r7, #24]
        break;
 800b486:	e013      	b.n	800b4b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b488:	f7fc ff00 	bl	800828c <HAL_RCC_GetPCLK2Freq>
 800b48c:	61b8      	str	r0, [r7, #24]
        break;
 800b48e:	e00f      	b.n	800b4b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b490:	4b1d      	ldr	r3, [pc, #116]	@ (800b508 <UART_SetConfig+0x4c4>)
 800b492:	61bb      	str	r3, [r7, #24]
        break;
 800b494:	e00c      	b.n	800b4b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b496:	f7fc fe13 	bl	80080c0 <HAL_RCC_GetSysClockFreq>
 800b49a:	61b8      	str	r0, [r7, #24]
        break;
 800b49c:	e008      	b.n	800b4b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b49e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b4a2:	61bb      	str	r3, [r7, #24]
        break;
 800b4a4:	e004      	b.n	800b4b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	77bb      	strb	r3, [r7, #30]
        break;
 800b4ae:	bf00      	nop
    }

    if (pclk != 0U)
 800b4b0:	69bb      	ldr	r3, [r7, #24]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d018      	beq.n	800b4e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	085a      	lsrs	r2, r3, #1
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	441a      	add	r2, r3
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4ca:	693b      	ldr	r3, [r7, #16]
 800b4cc:	2b0f      	cmp	r3, #15
 800b4ce:	d909      	bls.n	800b4e4 <UART_SetConfig+0x4a0>
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4d6:	d205      	bcs.n	800b4e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	60da      	str	r2, [r3, #12]
 800b4e2:	e001      	b.n	800b4e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b4f4:	7fbb      	ldrb	r3, [r7, #30]
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3720      	adds	r7, #32
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	40007c00 	.word	0x40007c00
 800b504:	40023800 	.word	0x40023800
 800b508:	00f42400 	.word	0x00f42400

0800b50c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b518:	f003 0308 	and.w	r3, r3, #8
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d00a      	beq.n	800b536 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	430a      	orrs	r2, r1
 800b534:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53a:	f003 0301 	and.w	r3, r3, #1
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00a      	beq.n	800b558 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	430a      	orrs	r2, r1
 800b556:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b55c:	f003 0302 	and.w	r3, r3, #2
 800b560:	2b00      	cmp	r3, #0
 800b562:	d00a      	beq.n	800b57a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	430a      	orrs	r2, r1
 800b578:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b57e:	f003 0304 	and.w	r3, r3, #4
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00a      	beq.n	800b59c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	430a      	orrs	r2, r1
 800b59a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a0:	f003 0310 	and.w	r3, r3, #16
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d00a      	beq.n	800b5be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	689b      	ldr	r3, [r3, #8]
 800b5ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	430a      	orrs	r2, r1
 800b5bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5c2:	f003 0320 	and.w	r3, r3, #32
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d00a      	beq.n	800b5e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d01a      	beq.n	800b622 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	685b      	ldr	r3, [r3, #4]
 800b5f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	430a      	orrs	r2, r1
 800b600:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b60a:	d10a      	bne.n	800b622 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	430a      	orrs	r2, r1
 800b620:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00a      	beq.n	800b644 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	430a      	orrs	r2, r1
 800b642:	605a      	str	r2, [r3, #4]
  }
}
 800b644:	bf00      	nop
 800b646:	370c      	adds	r7, #12
 800b648:	46bd      	mov	sp, r7
 800b64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64e:	4770      	bx	lr

0800b650 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b08c      	sub	sp, #48	@ 0x30
 800b654:	af02      	add	r7, sp, #8
 800b656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b660:	f7f6 ff22 	bl	80024a8 <HAL_GetTick>
 800b664:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 0308 	and.w	r3, r3, #8
 800b670:	2b08      	cmp	r3, #8
 800b672:	d12e      	bne.n	800b6d2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b674:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	2200      	movs	r2, #0
 800b67e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f83b 	bl	800b6fe <UART_WaitOnFlagUntilTimeout>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d021      	beq.n	800b6d2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	e853 3f00 	ldrex	r3, [r3]
 800b69a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b6a2:	623b      	str	r3, [r7, #32]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	6a3b      	ldr	r3, [r7, #32]
 800b6ac:	61fb      	str	r3, [r7, #28]
 800b6ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6b0:	69b9      	ldr	r1, [r7, #24]
 800b6b2:	69fa      	ldr	r2, [r7, #28]
 800b6b4:	e841 2300 	strex	r3, r2, [r1]
 800b6b8:	617b      	str	r3, [r7, #20]
   return(result);
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1e6      	bne.n	800b68e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e011      	b.n	800b6f6 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3728      	adds	r7, #40	@ 0x28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b084      	sub	sp, #16
 800b702:	af00      	add	r7, sp, #0
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	603b      	str	r3, [r7, #0]
 800b70a:	4613      	mov	r3, r2
 800b70c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b70e:	e04f      	b.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b716:	d04b      	beq.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b718:	f7f6 fec6 	bl	80024a8 <HAL_GetTick>
 800b71c:	4602      	mov	r2, r0
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	69ba      	ldr	r2, [r7, #24]
 800b724:	429a      	cmp	r2, r3
 800b726:	d302      	bcc.n	800b72e <UART_WaitOnFlagUntilTimeout+0x30>
 800b728:	69bb      	ldr	r3, [r7, #24]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b72e:	2303      	movs	r3, #3
 800b730:	e04e      	b.n	800b7d0 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0304 	and.w	r3, r3, #4
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d037      	beq.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	2b80      	cmp	r3, #128	@ 0x80
 800b744:	d034      	beq.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0xb2>
 800b746:	68bb      	ldr	r3, [r7, #8]
 800b748:	2b40      	cmp	r3, #64	@ 0x40
 800b74a:	d031      	beq.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	69db      	ldr	r3, [r3, #28]
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	2b08      	cmp	r3, #8
 800b758:	d110      	bne.n	800b77c <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2208      	movs	r2, #8
 800b760:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f000 f8fe 	bl	800b964 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2208      	movs	r2, #8
 800b76c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2200      	movs	r2, #0
 800b774:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	e029      	b.n	800b7d0 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b786:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b78a:	d111      	bne.n	800b7b0 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b794:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f8e4 	bl	800b964 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2220      	movs	r2, #32
 800b7a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e00f      	b.n	800b7d0 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	69da      	ldr	r2, [r3, #28]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	68ba      	ldr	r2, [r7, #8]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	bf0c      	ite	eq
 800b7c0:	2301      	moveq	r3, #1
 800b7c2:	2300      	movne	r3, #0
 800b7c4:	b2db      	uxtb	r3, r3
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	79fb      	ldrb	r3, [r7, #7]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d0a0      	beq.n	800b710 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3710      	adds	r7, #16
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b096      	sub	sp, #88	@ 0x58
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	60f8      	str	r0, [r7, #12]
 800b7e0:	60b9      	str	r1, [r7, #8]
 800b7e2:	4613      	mov	r3, r2
 800b7e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	68ba      	ldr	r2, [r7, #8]
 800b7ea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	88fa      	ldrh	r2, [r7, #6]
 800b7f0:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2222      	movs	r2, #34	@ 0x22
 800b800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d028      	beq.n	800b85e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b810:	4a3e      	ldr	r2, [pc, #248]	@ (800b90c <UART_Start_Receive_DMA+0x134>)
 800b812:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b818:	4a3d      	ldr	r2, [pc, #244]	@ (800b910 <UART_Start_Receive_DMA+0x138>)
 800b81a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b820:	4a3c      	ldr	r2, [pc, #240]	@ (800b914 <UART_Start_Receive_DMA+0x13c>)
 800b822:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b828:	2200      	movs	r2, #0
 800b82a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	3324      	adds	r3, #36	@ 0x24
 800b836:	4619      	mov	r1, r3
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b83c:	461a      	mov	r2, r3
 800b83e:	88fb      	ldrh	r3, [r7, #6]
 800b840:	f7f7 fe82 	bl	8003548 <HAL_DMA_Start_IT>
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d009      	beq.n	800b85e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2210      	movs	r2, #16
 800b84e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	2220      	movs	r2, #32
 800b856:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e051      	b.n	800b902 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	691b      	ldr	r3, [r3, #16]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d018      	beq.n	800b898 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b86e:	e853 3f00 	ldrex	r3, [r3]
 800b872:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b87a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	461a      	mov	r2, r3
 800b882:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b884:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b886:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b888:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b88a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b88c:	e841 2300 	strex	r3, r2, [r1]
 800b890:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b892:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1e6      	bne.n	800b866 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3308      	adds	r3, #8
 800b89e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8aa:	f043 0301 	orr.w	r3, r3, #1
 800b8ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	3308      	adds	r3, #8
 800b8b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b8b8:	637a      	str	r2, [r7, #52]	@ 0x34
 800b8ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8c0:	e841 2300 	strex	r3, r2, [r1]
 800b8c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1e5      	bne.n	800b898 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	e853 3f00 	ldrex	r3, [r3]
 800b8da:	613b      	str	r3, [r7, #16]
   return(result);
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b8ec:	623a      	str	r2, [r7, #32]
 800b8ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f0:	69f9      	ldr	r1, [r7, #28]
 800b8f2:	6a3a      	ldr	r2, [r7, #32]
 800b8f4:	e841 2300 	strex	r3, r2, [r1]
 800b8f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e5      	bne.n	800b8cc <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3758      	adds	r7, #88	@ 0x58
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}
 800b90a:	bf00      	nop
 800b90c:	0800ba2d 	.word	0x0800ba2d
 800b910:	0800bb8b 	.word	0x0800bb8b
 800b914:	0800bbfd 	.word	0x0800bbfd

0800b918 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b089      	sub	sp, #36	@ 0x24
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	60bb      	str	r3, [r7, #8]
   return(result);
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	69fb      	ldr	r3, [r7, #28]
 800b93e:	61bb      	str	r3, [r7, #24]
 800b940:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6979      	ldr	r1, [r7, #20]
 800b944:	69ba      	ldr	r2, [r7, #24]
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	613b      	str	r3, [r7, #16]
   return(result);
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e6      	bne.n	800b920 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2220      	movs	r2, #32
 800b956:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800b958:	bf00      	nop
 800b95a:	3724      	adds	r7, #36	@ 0x24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b964:	b480      	push	{r7}
 800b966:	b095      	sub	sp, #84	@ 0x54
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b974:	e853 3f00 	ldrex	r3, [r3]
 800b978:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b97a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b97c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b980:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	461a      	mov	r2, r3
 800b988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b98a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b98c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b990:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b992:	e841 2300 	strex	r3, r2, [r1]
 800b996:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1e6      	bne.n	800b96c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9a6:	6a3b      	ldr	r3, [r7, #32]
 800b9a8:	e853 3f00 	ldrex	r3, [r3]
 800b9ac:	61fb      	str	r3, [r7, #28]
   return(result);
 800b9ae:	69fb      	ldr	r3, [r7, #28]
 800b9b0:	f023 0301 	bic.w	r3, r3, #1
 800b9b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	3308      	adds	r3, #8
 800b9bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b9be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b9c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b9c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b9c6:	e841 2300 	strex	r3, r2, [r1]
 800b9ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1e5      	bne.n	800b99e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d118      	bne.n	800ba0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	e853 3f00 	ldrex	r3, [r3]
 800b9e6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	f023 0310 	bic.w	r3, r3, #16
 800b9ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	461a      	mov	r2, r3
 800b9f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9f8:	61bb      	str	r3, [r7, #24]
 800b9fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9fc:	6979      	ldr	r1, [r7, #20]
 800b9fe:	69ba      	ldr	r2, [r7, #24]
 800ba00:	e841 2300 	strex	r3, r2, [r1]
 800ba04:	613b      	str	r3, [r7, #16]
   return(result);
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1e6      	bne.n	800b9da <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2220      	movs	r2, #32
 800ba10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2200      	movs	r2, #0
 800ba18:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ba20:	bf00      	nop
 800ba22:	3754      	adds	r7, #84	@ 0x54
 800ba24:	46bd      	mov	sp, r7
 800ba26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2a:	4770      	bx	lr

0800ba2c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b09c      	sub	sp, #112	@ 0x70
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba38:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	69db      	ldr	r3, [r3, #28]
 800ba3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba42:	d071      	beq.n	800bb28 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ba44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ba4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba54:	e853 3f00 	ldrex	r3, [r3]
 800ba58:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ba5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba60:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba6a:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba6c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ba70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba72:	e841 2300 	strex	r3, r2, [r1]
 800ba76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800ba78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d1e6      	bne.n	800ba4c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	3308      	adds	r3, #8
 800ba84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba88:	e853 3f00 	ldrex	r3, [r3]
 800ba8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba90:	f023 0301 	bic.w	r3, r3, #1
 800ba94:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	3308      	adds	r3, #8
 800ba9c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ba9e:	643a      	str	r2, [r7, #64]	@ 0x40
 800baa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800baa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800baa6:	e841 2300 	strex	r3, r2, [r1]
 800baaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800baac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d1e5      	bne.n	800ba7e <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bab2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	3308      	adds	r3, #8
 800bab8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baba:	6a3b      	ldr	r3, [r7, #32]
 800babc:	e853 3f00 	ldrex	r3, [r3]
 800bac0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bac8:	663b      	str	r3, [r7, #96]	@ 0x60
 800baca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	3308      	adds	r3, #8
 800bad0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bad2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bad4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bad8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bada:	e841 2300 	strex	r3, r2, [r1]
 800bade:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1e5      	bne.n	800bab2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bae8:	2220      	movs	r2, #32
 800baea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800baf2:	2b01      	cmp	r3, #1
 800baf4:	d118      	bne.n	800bb28 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	e853 3f00 	ldrex	r3, [r3]
 800bb02:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	f023 0310 	bic.w	r3, r3, #16
 800bb0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	461a      	mov	r2, r3
 800bb12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bb14:	61bb      	str	r3, [r7, #24]
 800bb16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6979      	ldr	r1, [r7, #20]
 800bb1a:	69ba      	ldr	r2, [r7, #24]
 800bb1c:	e841 2300 	strex	r3, r2, [r1]
 800bb20:	613b      	str	r3, [r7, #16]
   return(result);
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e6      	bne.n	800baf6 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb32:	2b01      	cmp	r3, #1
 800bb34:	d122      	bne.n	800bb7c <UART_DMAReceiveCplt+0x150>
  {
    huart->RxXferCount = 0;
 800bb36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
    if (nb_remaining_rx_data < huart->RxXferSize)
 800bb48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb4e:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d204      	bcs.n	800bb60 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bb56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb58:	f8b7 205a 	ldrh.w	r2, [r7, #90]	@ 0x5a
 800bb5c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb62:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bb66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bb6c:	b29b      	uxth	r3, r3
 800bb6e:	1ad3      	subs	r3, r2, r3
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	4619      	mov	r1, r3
 800bb74:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb76:	f7ff fa59 	bl	800b02c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb7a:	e002      	b.n	800bb82 <UART_DMAReceiveCplt+0x156>
    HAL_UART_RxCpltCallback(huart);
 800bb7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bb7e:	f015 f887 	bl	8020c90 <HAL_UART_RxCpltCallback>
}
 800bb82:	bf00      	nop
 800bb84:	3770      	adds	r7, #112	@ 0x70
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}

0800bb8a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bb8a:	b580      	push	{r7, lr}
 800bb8c:	b084      	sub	sp, #16
 800bb8e:	af00      	add	r7, sp, #0
 800bb90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb96:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d123      	bne.n	800bbee <UART_DMARxHalfCplt+0x64>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bbac:	085b      	lsrs	r3, r3, #1
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	817b      	strh	r3, [r7, #10]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bbc4:	897a      	ldrh	r2, [r7, #10]
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d803      	bhi.n	800bbd2 <UART_DMARxHalfCplt+0x48>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	897a      	ldrh	r2, [r7, #10]
 800bbce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	b29b      	uxth	r3, r3
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7ff fa20 	bl	800b02c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbec:	e002      	b.n	800bbf4 <UART_DMARxHalfCplt+0x6a>
    HAL_UART_RxHalfCpltCallback(huart);
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f7ff fa08 	bl	800b004 <HAL_UART_RxHalfCpltCallback>
}
 800bbf4:	bf00      	nop
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bc0e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bc16:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc22:	2b80      	cmp	r3, #128	@ 0x80
 800bc24:	d109      	bne.n	800bc3a <UART_DMAError+0x3e>
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	2b21      	cmp	r3, #33	@ 0x21
 800bc2a:	d106      	bne.n	800bc3a <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 800bc34:	6978      	ldr	r0, [r7, #20]
 800bc36:	f7ff fe6f 	bl	800b918 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc3a:	697b      	ldr	r3, [r7, #20]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc44:	2b40      	cmp	r3, #64	@ 0x40
 800bc46:	d109      	bne.n	800bc5c <UART_DMAError+0x60>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b22      	cmp	r3, #34	@ 0x22
 800bc4c:	d106      	bne.n	800bc5c <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800bc56:	6978      	ldr	r0, [r7, #20]
 800bc58:	f7ff fe84 	bl	800b964 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bc62:	f043 0210 	orr.w	r2, r3, #16
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc6c:	6978      	ldr	r0, [r7, #20]
 800bc6e:	f7ff f9d3 	bl	800b018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc72:	bf00      	nop
 800bc74:	3718      	adds	r7, #24
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b084      	sub	sp, #16
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc90:	68f8      	ldr	r0, [r7, #12]
 800bc92:	f7ff f9c1 	bl	800b018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc96:	bf00      	nop
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}

0800bc9e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bc9e:	b480      	push	{r7}
 800bca0:	b08f      	sub	sp, #60	@ 0x3c
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bcaa:	2b21      	cmp	r3, #33	@ 0x21
 800bcac:	d14c      	bne.n	800bd48 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d132      	bne.n	800bd20 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcc0:	6a3b      	ldr	r3, [r7, #32]
 800bcc2:	e853 3f00 	ldrex	r3, [r3]
 800bcc6:	61fb      	str	r3, [r7, #28]
   return(result);
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcce:	637b      	str	r3, [r7, #52]	@ 0x34
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bcd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcda:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bcde:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce0:	e841 2300 	strex	r3, r2, [r1]
 800bce4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d1e6      	bne.n	800bcba <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	e853 3f00 	ldrex	r3, [r3]
 800bcf8:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd00:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd0a:	61bb      	str	r3, [r7, #24]
 800bd0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0e:	6979      	ldr	r1, [r7, #20]
 800bd10:	69ba      	ldr	r2, [r7, #24]
 800bd12:	e841 2300 	strex	r3, r2, [r1]
 800bd16:	613b      	str	r3, [r7, #16]
   return(result);
 800bd18:	693b      	ldr	r3, [r7, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1e6      	bne.n	800bcec <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800bd1e:	e013      	b.n	800bd48 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd24:	781a      	ldrb	r2, [r3, #0]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd30:	1c5a      	adds	r2, r3, #1
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	3b01      	subs	r3, #1
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800bd48:	bf00      	nop
 800bd4a:	373c      	adds	r7, #60	@ 0x3c
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bd54:	b480      	push	{r7}
 800bd56:	b091      	sub	sp, #68	@ 0x44
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800bd60:	2b21      	cmp	r3, #33	@ 0x21
 800bd62:	d151      	bne.n	800be08 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d132      	bne.n	800bdd6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	623b      	str	r3, [r7, #32]
   return(result);
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd84:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd8e:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd96:	e841 2300 	strex	r3, r2, [r1]
 800bd9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d1e6      	bne.n	800bd70 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	e853 3f00 	ldrex	r3, [r3]
 800bdae:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	461a      	mov	r2, r3
 800bdbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdc0:	61fb      	str	r3, [r7, #28]
 800bdc2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdc4:	69b9      	ldr	r1, [r7, #24]
 800bdc6:	69fa      	ldr	r2, [r7, #28]
 800bdc8:	e841 2300 	strex	r3, r2, [r1]
 800bdcc:	617b      	str	r3, [r7, #20]
   return(result);
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d1e6      	bne.n	800bda2 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800bdd4:	e018      	b.n	800be08 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800bddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bdde:	881b      	ldrh	r3, [r3, #0]
 800bde0:	461a      	mov	r2, r3
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdea:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf0:	1c9a      	adds	r2, r3, #2
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	64da      	str	r2, [r3, #76]	@ 0x4c
      huart->TxXferCount--;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	3b01      	subs	r3, #1
 800be00:	b29a      	uxth	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
}
 800be08:	bf00      	nop
 800be0a:	3744      	adds	r7, #68	@ 0x44
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	e853 3f00 	ldrex	r3, [r3]
 800be28:	60bb      	str	r3, [r7, #8]
   return(result);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be30:	61fb      	str	r3, [r7, #28]
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	461a      	mov	r2, r3
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	61bb      	str	r3, [r7, #24]
 800be3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3e:	6979      	ldr	r1, [r7, #20]
 800be40:	69ba      	ldr	r2, [r7, #24]
 800be42:	e841 2300 	strex	r3, r2, [r1]
 800be46:	613b      	str	r3, [r7, #16]
   return(result);
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1e6      	bne.n	800be1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2220      	movs	r2, #32
 800be52:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f7ff f8c8 	bl	800aff0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be60:	bf00      	nop
 800be62:	3720      	adds	r7, #32
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 800be6e:	4b92      	ldr	r3, [pc, #584]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800be70:	220a      	movs	r2, #10
 800be72:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 0;
 800be74:	4b90      	ldr	r3, [pc, #576]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800be76:	2200      	movs	r2, #0
 800be78:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800be7a:	4b8f      	ldr	r3, [pc, #572]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800be7c:	2201      	movs	r2, #1
 800be7e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800be80:	4b8d      	ldr	r3, [pc, #564]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800be82:	2264      	movs	r2, #100	@ 0x64
 800be84:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800be86:	4b8d      	ldr	r3, [pc, #564]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800be88:	22ff      	movs	r2, #255	@ 0xff
 800be8a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800be8c:	4b8b      	ldr	r3, [pc, #556]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800be8e:	22ff      	movs	r2, #255	@ 0xff
 800be90:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800be92:	4b8a      	ldr	r3, [pc, #552]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800be94:	22ff      	movs	r2, #255	@ 0xff
 800be96:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800be98:	4b88      	ldr	r3, [pc, #544]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 800be9e:	4b88      	ldr	r3, [pc, #544]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800bea0:	220a      	movs	r2, #10
 800bea2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 0;
 800bea4:	4b86      	ldr	r3, [pc, #536]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800bea6:	2200      	movs	r2, #0
 800bea8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800beaa:	4b85      	ldr	r3, [pc, #532]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800beac:	2201      	movs	r2, #1
 800beae:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 101;
 800beb0:	4b83      	ldr	r3, [pc, #524]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800beb2:	2265      	movs	r2, #101	@ 0x65
 800beb4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800beb6:	2100      	movs	r1, #0
 800beb8:	2000      	movs	r0, #0
 800beba:	f007 f95b 	bl	8013174 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bebe:	4b7e      	ldr	r3, [pc, #504]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	061a      	lsls	r2, r3, #24
 800bec4:	4b7c      	ldr	r3, [pc, #496]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bec6:	785b      	ldrb	r3, [r3, #1]
 800bec8:	041b      	lsls	r3, r3, #16
 800beca:	431a      	orrs	r2, r3
 800becc:	4b7a      	ldr	r3, [pc, #488]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bece:	789b      	ldrb	r3, [r3, #2]
 800bed0:	021b      	lsls	r3, r3, #8
 800bed2:	4313      	orrs	r3, r2
 800bed4:	4a78      	ldr	r2, [pc, #480]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bed6:	78d2      	ldrb	r2, [r2, #3]
 800bed8:	4313      	orrs	r3, r2
 800beda:	061a      	lsls	r2, r3, #24
 800bedc:	4b76      	ldr	r3, [pc, #472]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	0619      	lsls	r1, r3, #24
 800bee2:	4b75      	ldr	r3, [pc, #468]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bee4:	785b      	ldrb	r3, [r3, #1]
 800bee6:	041b      	lsls	r3, r3, #16
 800bee8:	4319      	orrs	r1, r3
 800beea:	4b73      	ldr	r3, [pc, #460]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800beec:	789b      	ldrb	r3, [r3, #2]
 800beee:	021b      	lsls	r3, r3, #8
 800bef0:	430b      	orrs	r3, r1
 800bef2:	4971      	ldr	r1, [pc, #452]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bef4:	78c9      	ldrb	r1, [r1, #3]
 800bef6:	430b      	orrs	r3, r1
 800bef8:	021b      	lsls	r3, r3, #8
 800befa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800befe:	431a      	orrs	r2, r3
 800bf00:	4b6d      	ldr	r3, [pc, #436]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	0619      	lsls	r1, r3, #24
 800bf06:	4b6c      	ldr	r3, [pc, #432]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bf08:	785b      	ldrb	r3, [r3, #1]
 800bf0a:	041b      	lsls	r3, r3, #16
 800bf0c:	4319      	orrs	r1, r3
 800bf0e:	4b6a      	ldr	r3, [pc, #424]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bf10:	789b      	ldrb	r3, [r3, #2]
 800bf12:	021b      	lsls	r3, r3, #8
 800bf14:	430b      	orrs	r3, r1
 800bf16:	4968      	ldr	r1, [pc, #416]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bf18:	78c9      	ldrb	r1, [r1, #3]
 800bf1a:	430b      	orrs	r3, r1
 800bf1c:	0a1b      	lsrs	r3, r3, #8
 800bf1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf22:	431a      	orrs	r2, r3
 800bf24:	4b64      	ldr	r3, [pc, #400]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	0619      	lsls	r1, r3, #24
 800bf2a:	4b63      	ldr	r3, [pc, #396]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bf2c:	785b      	ldrb	r3, [r3, #1]
 800bf2e:	041b      	lsls	r3, r3, #16
 800bf30:	4319      	orrs	r1, r3
 800bf32:	4b61      	ldr	r3, [pc, #388]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bf34:	789b      	ldrb	r3, [r3, #2]
 800bf36:	021b      	lsls	r3, r3, #8
 800bf38:	430b      	orrs	r3, r1
 800bf3a:	495f      	ldr	r1, [pc, #380]	@ (800c0b8 <MX_LWIP_Init+0x250>)
 800bf3c:	78c9      	ldrb	r1, [r1, #3]
 800bf3e:	430b      	orrs	r3, r1
 800bf40:	0e1b      	lsrs	r3, r3, #24
 800bf42:	4313      	orrs	r3, r2
 800bf44:	4a5f      	ldr	r2, [pc, #380]	@ (800c0c4 <MX_LWIP_Init+0x25c>)
 800bf46:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bf48:	4b5c      	ldr	r3, [pc, #368]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	061a      	lsls	r2, r3, #24
 800bf4e:	4b5b      	ldr	r3, [pc, #364]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf50:	785b      	ldrb	r3, [r3, #1]
 800bf52:	041b      	lsls	r3, r3, #16
 800bf54:	431a      	orrs	r2, r3
 800bf56:	4b59      	ldr	r3, [pc, #356]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf58:	789b      	ldrb	r3, [r3, #2]
 800bf5a:	021b      	lsls	r3, r3, #8
 800bf5c:	4313      	orrs	r3, r2
 800bf5e:	4a57      	ldr	r2, [pc, #348]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf60:	78d2      	ldrb	r2, [r2, #3]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	061a      	lsls	r2, r3, #24
 800bf66:	4b55      	ldr	r3, [pc, #340]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	0619      	lsls	r1, r3, #24
 800bf6c:	4b53      	ldr	r3, [pc, #332]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf6e:	785b      	ldrb	r3, [r3, #1]
 800bf70:	041b      	lsls	r3, r3, #16
 800bf72:	4319      	orrs	r1, r3
 800bf74:	4b51      	ldr	r3, [pc, #324]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf76:	789b      	ldrb	r3, [r3, #2]
 800bf78:	021b      	lsls	r3, r3, #8
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	494f      	ldr	r1, [pc, #316]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf7e:	78c9      	ldrb	r1, [r1, #3]
 800bf80:	430b      	orrs	r3, r1
 800bf82:	021b      	lsls	r3, r3, #8
 800bf84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf88:	431a      	orrs	r2, r3
 800bf8a:	4b4c      	ldr	r3, [pc, #304]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	0619      	lsls	r1, r3, #24
 800bf90:	4b4a      	ldr	r3, [pc, #296]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf92:	785b      	ldrb	r3, [r3, #1]
 800bf94:	041b      	lsls	r3, r3, #16
 800bf96:	4319      	orrs	r1, r3
 800bf98:	4b48      	ldr	r3, [pc, #288]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bf9a:	789b      	ldrb	r3, [r3, #2]
 800bf9c:	021b      	lsls	r3, r3, #8
 800bf9e:	430b      	orrs	r3, r1
 800bfa0:	4946      	ldr	r1, [pc, #280]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bfa2:	78c9      	ldrb	r1, [r1, #3]
 800bfa4:	430b      	orrs	r3, r1
 800bfa6:	0a1b      	lsrs	r3, r3, #8
 800bfa8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bfac:	431a      	orrs	r2, r3
 800bfae:	4b43      	ldr	r3, [pc, #268]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bfb0:	781b      	ldrb	r3, [r3, #0]
 800bfb2:	0619      	lsls	r1, r3, #24
 800bfb4:	4b41      	ldr	r3, [pc, #260]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bfb6:	785b      	ldrb	r3, [r3, #1]
 800bfb8:	041b      	lsls	r3, r3, #16
 800bfba:	4319      	orrs	r1, r3
 800bfbc:	4b3f      	ldr	r3, [pc, #252]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bfbe:	789b      	ldrb	r3, [r3, #2]
 800bfc0:	021b      	lsls	r3, r3, #8
 800bfc2:	430b      	orrs	r3, r1
 800bfc4:	493d      	ldr	r1, [pc, #244]	@ (800c0bc <MX_LWIP_Init+0x254>)
 800bfc6:	78c9      	ldrb	r1, [r1, #3]
 800bfc8:	430b      	orrs	r3, r1
 800bfca:	0e1b      	lsrs	r3, r3, #24
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	4a3e      	ldr	r2, [pc, #248]	@ (800c0c8 <MX_LWIP_Init+0x260>)
 800bfd0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bfd2:	4b3b      	ldr	r3, [pc, #236]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	061a      	lsls	r2, r3, #24
 800bfd8:	4b39      	ldr	r3, [pc, #228]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800bfda:	785b      	ldrb	r3, [r3, #1]
 800bfdc:	041b      	lsls	r3, r3, #16
 800bfde:	431a      	orrs	r2, r3
 800bfe0:	4b37      	ldr	r3, [pc, #220]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800bfe2:	789b      	ldrb	r3, [r3, #2]
 800bfe4:	021b      	lsls	r3, r3, #8
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	4a35      	ldr	r2, [pc, #212]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800bfea:	78d2      	ldrb	r2, [r2, #3]
 800bfec:	4313      	orrs	r3, r2
 800bfee:	061a      	lsls	r2, r3, #24
 800bff0:	4b33      	ldr	r3, [pc, #204]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	0619      	lsls	r1, r3, #24
 800bff6:	4b32      	ldr	r3, [pc, #200]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800bff8:	785b      	ldrb	r3, [r3, #1]
 800bffa:	041b      	lsls	r3, r3, #16
 800bffc:	4319      	orrs	r1, r3
 800bffe:	4b30      	ldr	r3, [pc, #192]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c000:	789b      	ldrb	r3, [r3, #2]
 800c002:	021b      	lsls	r3, r3, #8
 800c004:	430b      	orrs	r3, r1
 800c006:	492e      	ldr	r1, [pc, #184]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c008:	78c9      	ldrb	r1, [r1, #3]
 800c00a:	430b      	orrs	r3, r1
 800c00c:	021b      	lsls	r3, r3, #8
 800c00e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c012:	431a      	orrs	r2, r3
 800c014:	4b2a      	ldr	r3, [pc, #168]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	0619      	lsls	r1, r3, #24
 800c01a:	4b29      	ldr	r3, [pc, #164]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c01c:	785b      	ldrb	r3, [r3, #1]
 800c01e:	041b      	lsls	r3, r3, #16
 800c020:	4319      	orrs	r1, r3
 800c022:	4b27      	ldr	r3, [pc, #156]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c024:	789b      	ldrb	r3, [r3, #2]
 800c026:	021b      	lsls	r3, r3, #8
 800c028:	430b      	orrs	r3, r1
 800c02a:	4925      	ldr	r1, [pc, #148]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c02c:	78c9      	ldrb	r1, [r1, #3]
 800c02e:	430b      	orrs	r3, r1
 800c030:	0a1b      	lsrs	r3, r3, #8
 800c032:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c036:	431a      	orrs	r2, r3
 800c038:	4b21      	ldr	r3, [pc, #132]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	0619      	lsls	r1, r3, #24
 800c03e:	4b20      	ldr	r3, [pc, #128]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c040:	785b      	ldrb	r3, [r3, #1]
 800c042:	041b      	lsls	r3, r3, #16
 800c044:	4319      	orrs	r1, r3
 800c046:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c048:	789b      	ldrb	r3, [r3, #2]
 800c04a:	021b      	lsls	r3, r3, #8
 800c04c:	430b      	orrs	r3, r1
 800c04e:	491c      	ldr	r1, [pc, #112]	@ (800c0c0 <MX_LWIP_Init+0x258>)
 800c050:	78c9      	ldrb	r1, [r1, #3]
 800c052:	430b      	orrs	r3, r1
 800c054:	0e1b      	lsrs	r3, r3, #24
 800c056:	4313      	orrs	r3, r2
 800c058:	4a1c      	ldr	r2, [pc, #112]	@ (800c0cc <MX_LWIP_Init+0x264>)
 800c05a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800c05c:	4b1c      	ldr	r3, [pc, #112]	@ (800c0d0 <MX_LWIP_Init+0x268>)
 800c05e:	9302      	str	r3, [sp, #8]
 800c060:	4b1c      	ldr	r3, [pc, #112]	@ (800c0d4 <MX_LWIP_Init+0x26c>)
 800c062:	9301      	str	r3, [sp, #4]
 800c064:	2300      	movs	r3, #0
 800c066:	9300      	str	r3, [sp, #0]
 800c068:	4b18      	ldr	r3, [pc, #96]	@ (800c0cc <MX_LWIP_Init+0x264>)
 800c06a:	4a17      	ldr	r2, [pc, #92]	@ (800c0c8 <MX_LWIP_Init+0x260>)
 800c06c:	4915      	ldr	r1, [pc, #84]	@ (800c0c4 <MX_LWIP_Init+0x25c>)
 800c06e:	481a      	ldr	r0, [pc, #104]	@ (800c0d8 <MX_LWIP_Init+0x270>)
 800c070:	f007 ff44 	bl	8013efc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800c074:	4818      	ldr	r0, [pc, #96]	@ (800c0d8 <MX_LWIP_Init+0x270>)
 800c076:	f008 f9d5 	bl	8014424 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800c07a:	4817      	ldr	r0, [pc, #92]	@ (800c0d8 <MX_LWIP_Init+0x270>)
 800c07c:	f008 f9f6 	bl	801446c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800c080:	4916      	ldr	r1, [pc, #88]	@ (800c0dc <MX_LWIP_Init+0x274>)
 800c082:	4815      	ldr	r0, [pc, #84]	@ (800c0d8 <MX_LWIP_Init+0x270>)
 800c084:	f008 faf4 	bl	8014670 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c088:	2224      	movs	r2, #36	@ 0x24
 800c08a:	2100      	movs	r1, #0
 800c08c:	4814      	ldr	r0, [pc, #80]	@ (800c0e0 <MX_LWIP_Init+0x278>)
 800c08e:	f015 f881 	bl	8021194 <memset>
  attributes.name = "EthLink";
 800c092:	4b13      	ldr	r3, [pc, #76]	@ (800c0e0 <MX_LWIP_Init+0x278>)
 800c094:	4a13      	ldr	r2, [pc, #76]	@ (800c0e4 <MX_LWIP_Init+0x27c>)
 800c096:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c098:	4b11      	ldr	r3, [pc, #68]	@ (800c0e0 <MX_LWIP_Init+0x278>)
 800c09a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c09e:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800c0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800c0e0 <MX_LWIP_Init+0x278>)
 800c0a2:	2210      	movs	r2, #16
 800c0a4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800c0a6:	4a0e      	ldr	r2, [pc, #56]	@ (800c0e0 <MX_LWIP_Init+0x278>)
 800c0a8:	490b      	ldr	r1, [pc, #44]	@ (800c0d8 <MX_LWIP_Init+0x270>)
 800c0aa:	480f      	ldr	r0, [pc, #60]	@ (800c0e8 <MX_LWIP_Init+0x280>)
 800c0ac:	f000 fdce 	bl	800cc4c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800c0b0:	bf00      	nop
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}
 800c0b6:	bf00      	nop
 800c0b8:	20000b90 	.word	0x20000b90
 800c0bc:	20000b94 	.word	0x20000b94
 800c0c0:	20000b98 	.word	0x20000b98
 800c0c4:	20000b84 	.word	0x20000b84
 800c0c8:	20000b88 	.word	0x20000b88
 800c0cc:	20000b8c 	.word	0x20000b8c
 800c0d0:	08013085 	.word	0x08013085
 800c0d4:	0800c62d 	.word	0x0800c62d
 800c0d8:	20000b50 	.word	0x20000b50
 800c0dc:	0800c0ed 	.word	0x0800c0ed
 800c0e0:	20000b9c 	.word	0x20000b9c
 800c0e4:	0802212c 	.word	0x0802212c
 800c0e8:	0800c905 	.word	0x0800c905

0800c0ec <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b083      	sub	sp, #12
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800c0f4:	bf00      	nop
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr

0800c100 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800c100:	b480      	push	{r7}
 800c102:	b087      	sub	sp, #28
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800c112:	2320      	movs	r3, #32
 800c114:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800c116:	f3bf 8f4f 	dsb	sy
}
 800c11a:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800c11c:	e00b      	b.n	800c136 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800c11e:	4a0d      	ldr	r2, [pc, #52]	@ (800c154 <SCB_InvalidateDCache_by_Addr+0x54>)
 800c120:	693b      	ldr	r3, [r7, #16]
 800c122:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
      op_addr += (uint32_t)linesize;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	693a      	ldr	r2, [r7, #16]
 800c12a:	4413      	add	r3, r2
 800c12c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800c12e:	697a      	ldr	r2, [r7, #20]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	dcf0      	bgt.n	800c11e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800c13c:	f3bf 8f4f 	dsb	sy
}
 800c140:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c142:	f3bf 8f6f 	isb	sy
}
 800c146:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800c148:	bf00      	nop
 800c14a:	371c      	adds	r7, #28
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	e000ed00 	.word	0xe000ed00

0800c158 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b082      	sub	sp, #8
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800c160:	4b04      	ldr	r3, [pc, #16]	@ (800c174 <HAL_ETH_RxCpltCallback+0x1c>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	4618      	mov	r0, r3
 800c166:	f001 f897 	bl	800d298 <osSemaphoreRelease>
}
 800c16a:	bf00      	nop
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	2000cfdc 	.word	0x2000cfdc

0800c178 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800c180:	4b04      	ldr	r3, [pc, #16]	@ (800c194 <HAL_ETH_TxCpltCallback+0x1c>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4618      	mov	r0, r3
 800c186:	f001 f887 	bl	800d298 <osSemaphoreRelease>
}
 800c18a:	bf00      	nop
 800c18c:	3708      	adds	r7, #8
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	2000cfe0 	.word	0x2000cfe0

0800c198 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f7f8 fb90 	bl	80048c6 <HAL_ETH_GetDMAError>
 800c1a6:	4603      	mov	r3, r0
 800c1a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1ac:	2b80      	cmp	r3, #128	@ 0x80
 800c1ae:	d104      	bne.n	800c1ba <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800c1b0:	4b04      	ldr	r3, [pc, #16]	@ (800c1c4 <HAL_ETH_ErrorCallback+0x2c>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f001 f86f 	bl	800d298 <osSemaphoreRelease>
  }
}
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	2000cfdc 	.word	0x2000cfdc

0800c1c8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b0aa      	sub	sp, #168	@ 0xa8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 800c1e2:	f107 0310 	add.w	r3, r7, #16
 800c1e6:	2264      	movs	r2, #100	@ 0x64
 800c1e8:	2100      	movs	r1, #0
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f014 ffd2 	bl	8021194 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800c1f0:	4b89      	ldr	r3, [pc, #548]	@ (800c418 <low_level_init+0x250>)
 800c1f2:	4a8a      	ldr	r2, [pc, #552]	@ (800c41c <low_level_init+0x254>)
 800c1f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800c1fa:	2380      	movs	r3, #128	@ 0x80
 800c1fc:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800c1fe:	23e1      	movs	r3, #225	@ 0xe1
 800c200:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800c202:	2300      	movs	r3, #0
 800c204:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800c206:	2300      	movs	r3, #0
 800c208:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800c20a:	2300      	movs	r3, #0
 800c20c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800c20e:	4a82      	ldr	r2, [pc, #520]	@ (800c418 <low_level_init+0x250>)
 800c210:	f107 0308 	add.w	r3, r7, #8
 800c214:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800c216:	4b80      	ldr	r3, [pc, #512]	@ (800c418 <low_level_init+0x250>)
 800c218:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800c21c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800c21e:	4b7e      	ldr	r3, [pc, #504]	@ (800c418 <low_level_init+0x250>)
 800c220:	4a7f      	ldr	r2, [pc, #508]	@ (800c420 <low_level_init+0x258>)
 800c222:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800c224:	4b7c      	ldr	r3, [pc, #496]	@ (800c418 <low_level_init+0x250>)
 800c226:	4a7f      	ldr	r2, [pc, #508]	@ (800c424 <low_level_init+0x25c>)
 800c228:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800c22a:	4b7b      	ldr	r3, [pc, #492]	@ (800c418 <low_level_init+0x250>)
 800c22c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800c230:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800c232:	4879      	ldr	r0, [pc, #484]	@ (800c418 <low_level_init+0x250>)
 800c234:	f7f7 fcfe 	bl	8003c34 <HAL_ETH_Init>
 800c238:	4603      	mov	r3, r0
 800c23a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800c23e:	2238      	movs	r2, #56	@ 0x38
 800c240:	2100      	movs	r1, #0
 800c242:	4879      	ldr	r0, [pc, #484]	@ (800c428 <low_level_init+0x260>)
 800c244:	f014 ffa6 	bl	8021194 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800c248:	4b77      	ldr	r3, [pc, #476]	@ (800c428 <low_level_init+0x260>)
 800c24a:	2221      	movs	r2, #33	@ 0x21
 800c24c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800c24e:	4b76      	ldr	r3, [pc, #472]	@ (800c428 <low_level_init+0x260>)
 800c250:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800c254:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800c256:	4b74      	ldr	r3, [pc, #464]	@ (800c428 <low_level_init+0x260>)
 800c258:	2200      	movs	r2, #0
 800c25a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800c25c:	4873      	ldr	r0, [pc, #460]	@ (800c42c <low_level_init+0x264>)
 800c25e:	f007 fcc9 	bl	8013bf4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2206      	movs	r2, #6
 800c266:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c26a:	4b6b      	ldr	r3, [pc, #428]	@ (800c418 <low_level_init+0x250>)
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	781a      	ldrb	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c276:	4b68      	ldr	r3, [pc, #416]	@ (800c418 <low_level_init+0x250>)
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	785a      	ldrb	r2, [r3, #1]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c282:	4b65      	ldr	r3, [pc, #404]	@ (800c418 <low_level_init+0x250>)
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	789a      	ldrb	r2, [r3, #2]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c28e:	4b62      	ldr	r3, [pc, #392]	@ (800c418 <low_level_init+0x250>)
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	78da      	ldrb	r2, [r3, #3]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c29a:	4b5f      	ldr	r3, [pc, #380]	@ (800c418 <low_level_init+0x250>)
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	791a      	ldrb	r2, [r3, #4]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c2a6:	4b5c      	ldr	r3, [pc, #368]	@ (800c418 <low_level_init+0x250>)
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	795a      	ldrb	r2, [r3, #5]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800c2b8:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c2c0:	f043 030a 	orr.w	r3, r3, #10
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	2100      	movs	r1, #0
 800c2d0:	2001      	movs	r0, #1
 800c2d2:	f000 fedf 	bl	800d094 <osSemaphoreNew>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	4a55      	ldr	r2, [pc, #340]	@ (800c430 <low_level_init+0x268>)
 800c2da:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 800c2dc:	2200      	movs	r2, #0
 800c2de:	2100      	movs	r1, #0
 800c2e0:	2001      	movs	r0, #1
 800c2e2:	f000 fed7 	bl	800d094 <osSemaphoreNew>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	4a52      	ldr	r2, [pc, #328]	@ (800c434 <low_level_init+0x26c>)
 800c2ea:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800c2ec:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c2f0:	2224      	movs	r2, #36	@ 0x24
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f014 ff4d 	bl	8021194 <memset>
  attributes.name = "EthIf";
 800c2fa:	4b4f      	ldr	r3, [pc, #316]	@ (800c438 <low_level_init+0x270>)
 800c2fc:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800c2fe:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800c302:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 800c306:	2330      	movs	r3, #48	@ 0x30
 800c308:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 800c30c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800c310:	461a      	mov	r2, r3
 800c312:	6879      	ldr	r1, [r7, #4]
 800c314:	4849      	ldr	r0, [pc, #292]	@ (800c43c <low_level_init+0x274>)
 800c316:	f000 fc99 	bl	800cc4c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800c31a:	4949      	ldr	r1, [pc, #292]	@ (800c440 <low_level_init+0x278>)
 800c31c:	4849      	ldr	r0, [pc, #292]	@ (800c444 <low_level_init+0x27c>)
 800c31e:	f7f5 ff9c 	bl	800225a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800c322:	4848      	ldr	r0, [pc, #288]	@ (800c444 <low_level_init+0x27c>)
 800c324:	f7f5 ffcb 	bl	80022be <LAN8742_Init>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d006      	beq.n	800c33c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f008 f96e 	bl	8014610 <netif_set_link_down>
    netif_set_down(netif);
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f008 f905 	bl	8014544 <netif_set_down>
 800c33a:	e06a      	b.n	800c412 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800c33c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800c340:	2b00      	cmp	r3, #0
 800c342:	d164      	bne.n	800c40e <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c344:	483f      	ldr	r0, [pc, #252]	@ (800c444 <low_level_init+0x27c>)
 800c346:	f7f6 f807 	bl	8002358 <LAN8742_GetLinkState>
 800c34a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800c34e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c352:	2b01      	cmp	r3, #1
 800c354:	dc06      	bgt.n	800c364 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f008 f95a 	bl	8014610 <netif_set_link_down>
      netif_set_down(netif);
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f008 f8f1 	bl	8014544 <netif_set_down>
 800c362:	e056      	b.n	800c412 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 800c364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c368:	3b02      	subs	r3, #2
 800c36a:	2b03      	cmp	r3, #3
 800c36c:	d82a      	bhi.n	800c3c4 <low_level_init+0x1fc>
 800c36e:	a201      	add	r2, pc, #4	@ (adr r2, 800c374 <low_level_init+0x1ac>)
 800c370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c374:	0800c385 	.word	0x0800c385
 800c378:	0800c397 	.word	0x0800c397
 800c37c:	0800c3a7 	.word	0x0800c3a7
 800c380:	0800c3b7 	.word	0x0800c3b7
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c384:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c388:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c38c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c390:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c394:	e01f      	b.n	800c3d6 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c396:	2300      	movs	r3, #0
 800c398:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c39c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c3a4:	e017      	b.n	800c3d6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800c3a6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c3b4:	e00f      	b.n	800c3d6 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800c3bc:	2300      	movs	r3, #0
 800c3be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c3c2:	e008      	b.n	800c3d6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800c3c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c3c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800c3cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c3d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 800c3d4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c3d6:	f107 0310 	add.w	r3, r7, #16
 800c3da:	4619      	mov	r1, r3
 800c3dc:	480e      	ldr	r0, [pc, #56]	@ (800c418 <low_level_init+0x250>)
 800c3de:	f7f8 f911 	bl	8004604 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800c3e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c3e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 800c3e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c3ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c3ee:	f107 0310 	add.w	r3, r7, #16
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	4808      	ldr	r0, [pc, #32]	@ (800c418 <low_level_init+0x250>)
 800c3f6:	f7f8 f9fc 	bl	80047f2 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800c3fa:	4807      	ldr	r0, [pc, #28]	@ (800c418 <low_level_init+0x250>)
 800c3fc:	f7f7 fcb4 	bl	8003d68 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f008 f833 	bl	801446c <netif_set_up>
    netif_set_link_up(netif);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f008 f8ce 	bl	80145a8 <netif_set_link_up>
 800c40c:	e001      	b.n	800c412 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800c40e:	f7f4 ff8f 	bl	8001330 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 800c412:	37a8      	adds	r7, #168	@ 0xa8
 800c414:	46bd      	mov	sp, r7
 800c416:	bd80      	pop	{r7, pc}
 800c418:	2000cfe4 	.word	0x2000cfe4
 800c41c:	40028000 	.word	0x40028000
 800c420:	20000170 	.word	0x20000170
 800c424:	200000d0 	.word	0x200000d0
 800c428:	2000d094 	.word	0x2000d094
 800c42c:	08026c2c 	.word	0x08026c2c
 800c430:	2000cfdc 	.word	0x2000cfdc
 800c434:	2000cfe0 	.word	0x2000cfe0
 800c438:	0802214c 	.word	0x0802214c
 800c43c:	0800c5d9 	.word	0x0800c5d9
 800c440:	2000000c 	.word	0x2000000c
 800c444:	2000d0cc 	.word	0x2000d0cc

0800c448 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b092      	sub	sp, #72	@ 0x48
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800c452:	2300      	movs	r3, #0
 800c454:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800c456:	2300      	movs	r3, #0
 800c458:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800c45a:	2300      	movs	r3, #0
 800c45c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800c460:	f107 030c 	add.w	r3, r7, #12
 800c464:	2230      	movs	r2, #48	@ 0x30
 800c466:	2100      	movs	r1, #0
 800c468:	4618      	mov	r0, r3
 800c46a:	f014 fe93 	bl	8021194 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800c46e:	f107 030c 	add.w	r3, r7, #12
 800c472:	2230      	movs	r2, #48	@ 0x30
 800c474:	2100      	movs	r1, #0
 800c476:	4618      	mov	r0, r3
 800c478:	f014 fe8c 	bl	8021194 <memset>

  for(q = p; q != NULL; q = q->next)
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c480:	e045      	b.n	800c50e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800c482:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c484:	2b03      	cmp	r3, #3
 800c486:	d902      	bls.n	800c48e <low_level_output+0x46>
      return ERR_IF;
 800c488:	f06f 030b 	mvn.w	r3, #11
 800c48c:	e07f      	b.n	800c58e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800c48e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c490:	6859      	ldr	r1, [r3, #4]
 800c492:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c494:	4613      	mov	r3, r2
 800c496:	005b      	lsls	r3, r3, #1
 800c498:	4413      	add	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	3348      	adds	r3, #72	@ 0x48
 800c49e:	443b      	add	r3, r7
 800c4a0:	3b3c      	subs	r3, #60	@ 0x3c
 800c4a2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800c4a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4a6:	895b      	ldrh	r3, [r3, #10]
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	005b      	lsls	r3, r3, #1
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	3348      	adds	r3, #72	@ 0x48
 800c4b6:	443b      	add	r3, r7
 800c4b8:	3b38      	subs	r3, #56	@ 0x38
 800c4ba:	6019      	str	r1, [r3, #0]

    if(i>0)
 800c4bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d011      	beq.n	800c4e6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800c4c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4c4:	1e5a      	subs	r2, r3, #1
 800c4c6:	f107 000c 	add.w	r0, r7, #12
 800c4ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	440b      	add	r3, r1
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	18c1      	adds	r1, r0, r3
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	4413      	add	r3, r2
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	3348      	adds	r3, #72	@ 0x48
 800c4e0:	443b      	add	r3, r7
 800c4e2:	3b34      	subs	r3, #52	@ 0x34
 800c4e4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800c4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d109      	bne.n	800c502 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800c4ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c4f0:	4613      	mov	r3, r2
 800c4f2:	005b      	lsls	r3, r3, #1
 800c4f4:	4413      	add	r3, r2
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	3348      	adds	r3, #72	@ 0x48
 800c4fa:	443b      	add	r3, r7
 800c4fc:	3b34      	subs	r3, #52	@ 0x34
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]
    }

    i++;
 800c502:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c504:	3301      	adds	r3, #1
 800c506:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800c508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1b6      	bne.n	800c482 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	891b      	ldrh	r3, [r3, #8]
 800c518:	461a      	mov	r2, r3
 800c51a:	4b1f      	ldr	r3, [pc, #124]	@ (800c598 <low_level_output+0x150>)
 800c51c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800c51e:	4a1e      	ldr	r2, [pc, #120]	@ (800c598 <low_level_output+0x150>)
 800c520:	f107 030c 	add.w	r3, r7, #12
 800c524:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800c526:	4a1c      	ldr	r2, [pc, #112]	@ (800c598 <low_level_output+0x150>)
 800c528:	683b      	ldr	r3, [r7, #0]
 800c52a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800c52c:	6838      	ldr	r0, [r7, #0]
 800c52e:	f008 fd57 	bl	8014fe0 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800c532:	4919      	ldr	r1, [pc, #100]	@ (800c598 <low_level_output+0x150>)
 800c534:	4819      	ldr	r0, [pc, #100]	@ (800c59c <low_level_output+0x154>)
 800c536:	f7f7 fd07 	bl	8003f48 <HAL_ETH_Transmit_IT>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d103      	bne.n	800c548 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c546:	e01b      	b.n	800c580 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 800c548:	4814      	ldr	r0, [pc, #80]	@ (800c59c <low_level_output+0x154>)
 800c54a:	f7f8 f9af 	bl	80048ac <HAL_ETH_GetError>
 800c54e:	4603      	mov	r3, r0
 800c550:	f003 0302 	and.w	r3, r3, #2
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00d      	beq.n	800c574 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(  TxPktSemaphore, ETHIF_TX_TIMEOUT);
 800c558:	4b11      	ldr	r3, [pc, #68]	@ (800c5a0 <low_level_output+0x158>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800c560:	4618      	mov	r0, r3
 800c562:	f000 fe33 	bl	800d1cc <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 800c566:	480d      	ldr	r0, [pc, #52]	@ (800c59c <low_level_output+0x154>)
 800c568:	f7f7 fe8e 	bl	8004288 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800c56c:	23fe      	movs	r3, #254	@ 0xfe
 800c56e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800c572:	e005      	b.n	800c580 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 800c574:	6838      	ldr	r0, [r7, #0]
 800c576:	f008 fc75 	bl	8014e64 <pbuf_free>
        errval =  ERR_IF;
 800c57a:	23f4      	movs	r3, #244	@ 0xf4
 800c57c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800c580:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800c584:	f113 0f02 	cmn.w	r3, #2
 800c588:	d0d3      	beq.n	800c532 <low_level_output+0xea>

  return errval;
 800c58a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3748      	adds	r7, #72	@ 0x48
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	2000d094 	.word	0x2000d094
 800c59c:	2000cfe4 	.word	0x2000cfe4
 800c5a0:	2000cfe0 	.word	0x2000cfe0

0800c5a4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800c5b0:	4b07      	ldr	r3, [pc, #28]	@ (800c5d0 <low_level_input+0x2c>)
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d105      	bne.n	800c5c4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800c5b8:	f107 030c 	add.w	r3, r7, #12
 800c5bc:	4619      	mov	r1, r3
 800c5be:	4805      	ldr	r0, [pc, #20]	@ (800c5d4 <low_level_input+0x30>)
 800c5c0:	f7f7 fd1e 	bl	8004000 <HAL_ETH_ReadData>
  }

  return p;
 800c5c4:	68fb      	ldr	r3, [r7, #12]
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	3710      	adds	r7, #16
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	bf00      	nop
 800c5d0:	2000cfd8 	.word	0x2000cfd8
 800c5d4:	2000cfe4 	.word	0x2000cfe4

0800c5d8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c5e8:	4b0f      	ldr	r3, [pc, #60]	@ (800c628 <ethernetif_input+0x50>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 fdeb 	bl	800d1cc <osSemaphoreAcquire>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d1f5      	bne.n	800c5e8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800c5fc:	68b8      	ldr	r0, [r7, #8]
 800c5fe:	f7ff ffd1 	bl	800c5a4 <low_level_input>
 800c602:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	68b9      	ldr	r1, [r7, #8]
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	4798      	blx	r3
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f008 fc22 	bl	8014e64 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d1ea      	bne.n	800c5fc <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c626:	e7df      	b.n	800c5e8 <ethernetif_input+0x10>
 800c628:	2000cfdc 	.word	0x2000cfdc

0800c62c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d106      	bne.n	800c648 <ethernetif_init+0x1c>
 800c63a:	4b0e      	ldr	r3, [pc, #56]	@ (800c674 <ethernetif_init+0x48>)
 800c63c:	f240 220d 	movw	r2, #525	@ 0x20d
 800c640:	490d      	ldr	r1, [pc, #52]	@ (800c678 <ethernetif_init+0x4c>)
 800c642:	480e      	ldr	r0, [pc, #56]	@ (800c67c <ethernetif_init+0x50>)
 800c644:	f014 fc46 	bl	8020ed4 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	2273      	movs	r2, #115	@ 0x73
 800c64c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2274      	movs	r2, #116	@ 0x74
 800c654:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a09      	ldr	r2, [pc, #36]	@ (800c680 <ethernetif_init+0x54>)
 800c65c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4a08      	ldr	r2, [pc, #32]	@ (800c684 <ethernetif_init+0x58>)
 800c662:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f7ff fdaf 	bl	800c1c8 <low_level_init>

  return ERR_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3708      	adds	r7, #8
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	08022154 	.word	0x08022154
 800c678:	08022170 	.word	0x08022170
 800c67c:	08022180 	.word	0x08022180
 800c680:	0801d6f5 	.word	0x0801d6f5
 800c684:	0800c449 	.word	0x0800c449

0800c688 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b084      	sub	sp, #16
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800c694:	68f9      	ldr	r1, [r7, #12]
 800c696:	4809      	ldr	r0, [pc, #36]	@ (800c6bc <pbuf_free_custom+0x34>)
 800c698:	f007 fbda 	bl	8013e50 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800c69c:	4b08      	ldr	r3, [pc, #32]	@ (800c6c0 <pbuf_free_custom+0x38>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d107      	bne.n	800c6b4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800c6a4:	4b06      	ldr	r3, [pc, #24]	@ (800c6c0 <pbuf_free_custom+0x38>)
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800c6aa:	4b06      	ldr	r3, [pc, #24]	@ (800c6c4 <pbuf_free_custom+0x3c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f000 fdf2 	bl	800d298 <osSemaphoreRelease>
  }
}
 800c6b4:	bf00      	nop
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	08026c2c 	.word	0x08026c2c
 800c6c0:	2000cfd8 	.word	0x2000cfd8
 800c6c4:	2000cfdc 	.word	0x2000cfdc

0800c6c8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c6cc:	f7f5 feec 	bl	80024a8 <HAL_GetTick>
 800c6d0:	4603      	mov	r3, r0
}
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	bd80      	pop	{r7, pc}
	...

0800c6d8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08e      	sub	sp, #56	@ 0x38
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c6e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	605a      	str	r2, [r3, #4]
 800c6ea:	609a      	str	r2, [r3, #8]
 800c6ec:	60da      	str	r2, [r3, #12]
 800c6ee:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4a56      	ldr	r2, [pc, #344]	@ (800c850 <HAL_ETH_MspInit+0x178>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	f040 80a6 	bne.w	800c848 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800c6fc:	4b55      	ldr	r3, [pc, #340]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c6fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c700:	4a54      	ldr	r2, [pc, #336]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c702:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800c706:	6313      	str	r3, [r2, #48]	@ 0x30
 800c708:	4b52      	ldr	r3, [pc, #328]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c70a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c70c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c710:	623b      	str	r3, [r7, #32]
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	4b4f      	ldr	r3, [pc, #316]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c718:	4a4e      	ldr	r2, [pc, #312]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c71a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c71e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c720:	4b4c      	ldr	r3, [pc, #304]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c724:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c728:	61fb      	str	r3, [r7, #28]
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	4b49      	ldr	r3, [pc, #292]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c72e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c730:	4a48      	ldr	r2, [pc, #288]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c732:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c736:	6313      	str	r3, [r2, #48]	@ 0x30
 800c738:	4b46      	ldr	r3, [pc, #280]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c73a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c73c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c740:	61bb      	str	r3, [r7, #24]
 800c742:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c744:	4b43      	ldr	r3, [pc, #268]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c748:	4a42      	ldr	r2, [pc, #264]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c74a:	f043 0304 	orr.w	r3, r3, #4
 800c74e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c750:	4b40      	ldr	r3, [pc, #256]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c754:	f003 0304 	and.w	r3, r3, #4
 800c758:	617b      	str	r3, [r7, #20]
 800c75a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c75c:	4b3d      	ldr	r3, [pc, #244]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c760:	4a3c      	ldr	r2, [pc, #240]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c762:	f043 0301 	orr.w	r3, r3, #1
 800c766:	6313      	str	r3, [r2, #48]	@ 0x30
 800c768:	4b3a      	ldr	r3, [pc, #232]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c76a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c76c:	f003 0301 	and.w	r3, r3, #1
 800c770:	613b      	str	r3, [r7, #16]
 800c772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c774:	4b37      	ldr	r3, [pc, #220]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c776:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c778:	4a36      	ldr	r2, [pc, #216]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c77a:	f043 0302 	orr.w	r3, r3, #2
 800c77e:	6313      	str	r3, [r2, #48]	@ 0x30
 800c780:	4b34      	ldr	r3, [pc, #208]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c784:	f003 0302 	and.w	r3, r3, #2
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800c78c:	4b31      	ldr	r3, [pc, #196]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c78e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c790:	4a30      	ldr	r2, [pc, #192]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c796:	6313      	str	r3, [r2, #48]	@ 0x30
 800c798:	4b2e      	ldr	r3, [pc, #184]	@ (800c854 <HAL_ETH_MspInit+0x17c>)
 800c79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c79c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7a0:	60bb      	str	r3, [r7, #8]
 800c7a2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800c7a4:	2332      	movs	r3, #50	@ 0x32
 800c7a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7a8:	2302      	movs	r3, #2
 800c7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ac:	2300      	movs	r3, #0
 800c7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c7b4:	230b      	movs	r3, #11
 800c7b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c7b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7bc:	4619      	mov	r1, r3
 800c7be:	4826      	ldr	r0, [pc, #152]	@ (800c858 <HAL_ETH_MspInit+0x180>)
 800c7c0:	f7f8 fcae 	bl	8005120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800c7c4:	2386      	movs	r3, #134	@ 0x86
 800c7c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c7d4:	230b      	movs	r3, #11
 800c7d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7dc:	4619      	mov	r1, r3
 800c7de:	481f      	ldr	r0, [pc, #124]	@ (800c85c <HAL_ETH_MspInit+0x184>)
 800c7e0:	f7f8 fc9e 	bl	8005120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800c7e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c7e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c7ea:	2302      	movs	r3, #2
 800c7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c7f6:	230b      	movs	r3, #11
 800c7f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c7fe:	4619      	mov	r1, r3
 800c800:	4817      	ldr	r0, [pc, #92]	@ (800c860 <HAL_ETH_MspInit+0x188>)
 800c802:	f7f8 fc8d 	bl	8005120 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800c806:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800c80a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c80c:	2302      	movs	r3, #2
 800c80e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c810:	2300      	movs	r3, #0
 800c812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c814:	2303      	movs	r3, #3
 800c816:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800c818:	230b      	movs	r3, #11
 800c81a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800c81c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c820:	4619      	mov	r1, r3
 800c822:	4810      	ldr	r0, [pc, #64]	@ (800c864 <HAL_ETH_MspInit+0x18c>)
 800c824:	f7f8 fc7c 	bl	8005120 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800c828:	2200      	movs	r2, #0
 800c82a:	2105      	movs	r1, #5
 800c82c:	203d      	movs	r0, #61	@ 0x3d
 800c82e:	f7f6 fba9 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800c832:	203d      	movs	r0, #61	@ 0x3d
 800c834:	f7f6 fbc2 	bl	8002fbc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800c838:	2200      	movs	r2, #0
 800c83a:	2105      	movs	r1, #5
 800c83c:	203e      	movs	r0, #62	@ 0x3e
 800c83e:	f7f6 fba1 	bl	8002f84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800c842:	203e      	movs	r0, #62	@ 0x3e
 800c844:	f7f6 fbba 	bl	8002fbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800c848:	bf00      	nop
 800c84a:	3738      	adds	r7, #56	@ 0x38
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}
 800c850:	40028000 	.word	0x40028000
 800c854:	40023800 	.word	0x40023800
 800c858:	40020800 	.word	0x40020800
 800c85c:	40020000 	.word	0x40020000
 800c860:	40020400 	.word	0x40020400
 800c864:	40021800 	.word	0x40021800

0800c868 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800c86c:	4802      	ldr	r0, [pc, #8]	@ (800c878 <ETH_PHY_IO_Init+0x10>)
 800c86e:	f7f7 ffdb 	bl	8004828 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	bd80      	pop	{r7, pc}
 800c878:	2000cfe4 	.word	0x2000cfe4

0800c87c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800c87c:	b480      	push	{r7}
 800c87e:	af00      	add	r7, sp, #0
  return 0;
 800c880:	2300      	movs	r3, #0
}
 800c882:	4618      	mov	r0, r3
 800c884:	46bd      	mov	sp, r7
 800c886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88a:	4770      	bx	lr

0800c88c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	68f9      	ldr	r1, [r7, #12]
 800c89e:	4807      	ldr	r0, [pc, #28]	@ (800c8bc <ETH_PHY_IO_ReadReg+0x30>)
 800c8a0:	f7f7 fe1c 	bl	80044dc <HAL_ETH_ReadPHYRegister>
 800c8a4:	4603      	mov	r3, r0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d002      	beq.n	800c8b0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800c8aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8ae:	e000      	b.n	800c8b2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3710      	adds	r7, #16
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	2000cfe4 	.word	0x2000cfe4

0800c8c0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	68ba      	ldr	r2, [r7, #8]
 800c8d0:	68f9      	ldr	r1, [r7, #12]
 800c8d2:	4807      	ldr	r0, [pc, #28]	@ (800c8f0 <ETH_PHY_IO_WriteReg+0x30>)
 800c8d4:	f7f7 fe4d 	bl	8004572 <HAL_ETH_WritePHYRegister>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d002      	beq.n	800c8e4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c8de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c8e2:	e000      	b.n	800c8e6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	2000cfe4 	.word	0x2000cfe4

0800c8f4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c8f8:	f7f5 fdd6 	bl	80024a8 <HAL_GetTick>
 800c8fc:	4603      	mov	r3, r0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	bd80      	pop	{r7, pc}
	...

0800c904 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b0a0      	sub	sp, #128	@ 0x80
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800c90c:	f107 0308 	add.w	r3, r7, #8
 800c910:	2264      	movs	r2, #100	@ 0x64
 800c912:	2100      	movs	r1, #0
 800c914:	4618      	mov	r0, r3
 800c916:	f014 fc3d 	bl	8021194 <memset>
  int32_t PHYLinkState = 0;
 800c91a:	2300      	movs	r3, #0
 800c91c:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800c91e:	2300      	movs	r3, #0
 800c920:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c922:	2300      	movs	r3, #0
 800c924:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c926:	2300      	movs	r3, #0
 800c928:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c92e:	483a      	ldr	r0, [pc, #232]	@ (800ca18 <ethernet_link_thread+0x114>)
 800c930:	f7f5 fd12 	bl	8002358 <LAN8742_GetLinkState>
 800c934:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c936:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c938:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c93c:	089b      	lsrs	r3, r3, #2
 800c93e:	f003 0301 	and.w	r3, r3, #1
 800c942:	b2db      	uxtb	r3, r3
 800c944:	2b00      	cmp	r3, #0
 800c946:	d00c      	beq.n	800c962 <ethernet_link_thread+0x5e>
 800c948:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	dc09      	bgt.n	800c962 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800c94e:	4833      	ldr	r0, [pc, #204]	@ (800ca1c <ethernet_link_thread+0x118>)
 800c950:	f7f7 fa7a 	bl	8003e48 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c954:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c956:	f007 fdf5 	bl	8014544 <netif_set_down>
    netif_set_link_down(netif);
 800c95a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c95c:	f007 fe58 	bl	8014610 <netif_set_link_down>
 800c960:	e055      	b.n	800ca0e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c964:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800c968:	f003 0304 	and.w	r3, r3, #4
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d14e      	bne.n	800ca0e <ethernet_link_thread+0x10a>
 800c970:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c972:	2b01      	cmp	r3, #1
 800c974:	dd4b      	ble.n	800ca0e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800c976:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c978:	3b02      	subs	r3, #2
 800c97a:	2b03      	cmp	r3, #3
 800c97c:	d82a      	bhi.n	800c9d4 <ethernet_link_thread+0xd0>
 800c97e:	a201      	add	r2, pc, #4	@ (adr r2, 800c984 <ethernet_link_thread+0x80>)
 800c980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c984:	0800c995 	.word	0x0800c995
 800c988:	0800c9a7 	.word	0x0800c9a7
 800c98c:	0800c9b7 	.word	0x0800c9b7
 800c990:	0800c9c7 	.word	0x0800c9c7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c994:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c998:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c99a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c99e:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c9a4:	e017      	b.n	800c9d6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 800c9aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c9ae:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c9b4:	e00f      	b.n	800c9d6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c9b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c9ba:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c9bc:	2300      	movs	r3, #0
 800c9be:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c9c4:	e007      	b.n	800c9d6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800c9d2:	e000      	b.n	800c9d6 <ethernet_link_thread+0xd2>
    default:
      break;
 800c9d4:	bf00      	nop
    }

    if(linkchanged)
 800c9d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d018      	beq.n	800ca0e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c9dc:	f107 0308 	add.w	r3, r7, #8
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	480e      	ldr	r0, [pc, #56]	@ (800ca1c <ethernet_link_thread+0x118>)
 800c9e4:	f7f7 fe0e 	bl	8004604 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c9e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c9ea:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c9ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c9ee:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c9f0:	f107 0308 	add.w	r3, r7, #8
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	4809      	ldr	r0, [pc, #36]	@ (800ca1c <ethernet_link_thread+0x118>)
 800c9f8:	f7f7 fefb 	bl	80047f2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800c9fc:	4807      	ldr	r0, [pc, #28]	@ (800ca1c <ethernet_link_thread+0x118>)
 800c9fe:	f7f7 f9b3 	bl	8003d68 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800ca02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca04:	f007 fd32 	bl	801446c <netif_set_up>
      netif_set_link_up(netif);
 800ca08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800ca0a:	f007 fdcd 	bl	80145a8 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800ca0e:	2064      	movs	r0, #100	@ 0x64
 800ca10:	f000 f9ca 	bl	800cda8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800ca14:	e78b      	b.n	800c92e <ethernet_link_thread+0x2a>
 800ca16:	bf00      	nop
 800ca18:	2000d0cc 	.word	0x2000d0cc
 800ca1c:	2000cfe4 	.word	0x2000cfe4

0800ca20 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b086      	sub	sp, #24
 800ca24:	af02      	add	r7, sp, #8
 800ca26:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800ca28:	4812      	ldr	r0, [pc, #72]	@ (800ca74 <HAL_ETH_RxAllocateCallback+0x54>)
 800ca2a:	f007 f997 	bl	8013d5c <memp_malloc_pool>
 800ca2e:	60f8      	str	r0, [r7, #12]
  if (p)
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d014      	beq.n	800ca60 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f103 0220 	add.w	r2, r3, #32
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	4a0d      	ldr	r2, [pc, #52]	@ (800ca78 <HAL_ETH_RxAllocateCallback+0x58>)
 800ca44:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800ca4e:	9201      	str	r2, [sp, #4]
 800ca50:	9300      	str	r3, [sp, #0]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2241      	movs	r2, #65	@ 0x41
 800ca56:	2100      	movs	r1, #0
 800ca58:	2000      	movs	r0, #0
 800ca5a:	f008 f821 	bl	8014aa0 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800ca5e:	e005      	b.n	800ca6c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800ca60:	4b06      	ldr	r3, [pc, #24]	@ (800ca7c <HAL_ETH_RxAllocateCallback+0x5c>)
 800ca62:	2201      	movs	r2, #1
 800ca64:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	601a      	str	r2, [r3, #0]
}
 800ca6c:	bf00      	nop
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	08026c2c 	.word	0x08026c2c
 800ca78:	0800c689 	.word	0x0800c689
 800ca7c:	2000cfd8 	.word	0x2000cfd8

0800ca80 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b088      	sub	sp, #32
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
 800ca8c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ca96:	2300      	movs	r3, #0
 800ca98:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3b20      	subs	r3, #32
 800ca9e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	2200      	movs	r2, #0
 800caa4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	2200      	movs	r2, #0
 800caaa:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800caac:	69fb      	ldr	r3, [r7, #28]
 800caae:	887a      	ldrh	r2, [r7, #2]
 800cab0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d103      	bne.n	800cac2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800caba:	69bb      	ldr	r3, [r7, #24]
 800cabc:	69fa      	ldr	r2, [r7, #28]
 800cabe:	601a      	str	r2, [r3, #0]
 800cac0:	e003      	b.n	800caca <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	69fa      	ldr	r2, [r7, #28]
 800cac8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	69fa      	ldr	r2, [r7, #28]
 800cace:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800cad0:	69bb      	ldr	r3, [r7, #24]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	61fb      	str	r3, [r7, #28]
 800cad6:	e009      	b.n	800caec <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800cad8:	69fb      	ldr	r3, [r7, #28]
 800cada:	891a      	ldrh	r2, [r3, #8]
 800cadc:	887b      	ldrh	r3, [r7, #2]
 800cade:	4413      	add	r3, r2
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	69fb      	ldr	r3, [r7, #28]
 800cae4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800cae6:	69fb      	ldr	r3, [r7, #28]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	61fb      	str	r3, [r7, #28]
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1f2      	bne.n	800cad8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800caf2:	887b      	ldrh	r3, [r7, #2]
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff fb02 	bl	800c100 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800cafc:	bf00      	nop
 800cafe:	3720      	adds	r7, #32
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b082      	sub	sp, #8
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f008 f9a9 	bl	8014e64 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800cb12:	bf00      	nop
 800cb14:	3708      	adds	r7, #8
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800cb1a:	b480      	push	{r7}
 800cb1c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800cb1e:	bf00      	nop
 800cb20:	46bd      	mov	sp, r7
 800cb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb26:	4770      	bx	lr

0800cb28 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb2e:	f3ef 8305 	mrs	r3, IPSR
 800cb32:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10f      	bne.n	800cb5a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cb3a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb3e:	607b      	str	r3, [r7, #4]
  return(result);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d105      	bne.n	800cb52 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cb46:	f3ef 8311 	mrs	r3, BASEPRI
 800cb4a:	603b      	str	r3, [r7, #0]
  return(result);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d007      	beq.n	800cb62 <osKernelInitialize+0x3a>
 800cb52:	4b0e      	ldr	r3, [pc, #56]	@ (800cb8c <osKernelInitialize+0x64>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b02      	cmp	r3, #2
 800cb58:	d103      	bne.n	800cb62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800cb5a:	f06f 0305 	mvn.w	r3, #5
 800cb5e:	60fb      	str	r3, [r7, #12]
 800cb60:	e00c      	b.n	800cb7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800cb62:	4b0a      	ldr	r3, [pc, #40]	@ (800cb8c <osKernelInitialize+0x64>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d105      	bne.n	800cb76 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800cb6a:	4b08      	ldr	r3, [pc, #32]	@ (800cb8c <osKernelInitialize+0x64>)
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	60fb      	str	r3, [r7, #12]
 800cb74:	e002      	b.n	800cb7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800cb76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cb7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3714      	adds	r7, #20
 800cb82:	46bd      	mov	sp, r7
 800cb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb88:	4770      	bx	lr
 800cb8a:	bf00      	nop
 800cb8c:	2000d0ec 	.word	0x2000d0ec

0800cb90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b084      	sub	sp, #16
 800cb94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cb96:	f3ef 8305 	mrs	r3, IPSR
 800cb9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800cb9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10f      	bne.n	800cbc2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cba2:	f3ef 8310 	mrs	r3, PRIMASK
 800cba6:	607b      	str	r3, [r7, #4]
  return(result);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d105      	bne.n	800cbba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cbae:	f3ef 8311 	mrs	r3, BASEPRI
 800cbb2:	603b      	str	r3, [r7, #0]
  return(result);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d007      	beq.n	800cbca <osKernelStart+0x3a>
 800cbba:	4b0f      	ldr	r3, [pc, #60]	@ (800cbf8 <osKernelStart+0x68>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	d103      	bne.n	800cbca <osKernelStart+0x3a>
    stat = osErrorISR;
 800cbc2:	f06f 0305 	mvn.w	r3, #5
 800cbc6:	60fb      	str	r3, [r7, #12]
 800cbc8:	e010      	b.n	800cbec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800cbca:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf8 <osKernelStart+0x68>)
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d109      	bne.n	800cbe6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800cbd2:	f7ff ffa2 	bl	800cb1a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800cbd6:	4b08      	ldr	r3, [pc, #32]	@ (800cbf8 <osKernelStart+0x68>)
 800cbd8:	2202      	movs	r2, #2
 800cbda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cbdc:	f002 fa8c 	bl	800f0f8 <vTaskStartScheduler>
      stat = osOK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	60fb      	str	r3, [r7, #12]
 800cbe4:	e002      	b.n	800cbec <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cbe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800cbec:	68fb      	ldr	r3, [r7, #12]
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3710      	adds	r7, #16
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	bd80      	pop	{r7, pc}
 800cbf6:	bf00      	nop
 800cbf8:	2000d0ec 	.word	0x2000d0ec

0800cbfc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc02:	f3ef 8305 	mrs	r3, IPSR
 800cc06:	60bb      	str	r3, [r7, #8]
  return(result);
 800cc08:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d10f      	bne.n	800cc2e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc12:	607b      	str	r3, [r7, #4]
  return(result);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d105      	bne.n	800cc26 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc1a:	f3ef 8311 	mrs	r3, BASEPRI
 800cc1e:	603b      	str	r3, [r7, #0]
  return(result);
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d007      	beq.n	800cc36 <osKernelGetTickCount+0x3a>
 800cc26:	4b08      	ldr	r3, [pc, #32]	@ (800cc48 <osKernelGetTickCount+0x4c>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	2b02      	cmp	r3, #2
 800cc2c:	d103      	bne.n	800cc36 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800cc2e:	f002 fb95 	bl	800f35c <xTaskGetTickCountFromISR>
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	e002      	b.n	800cc3c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800cc36:	f002 fb81 	bl	800f33c <xTaskGetTickCount>
 800cc3a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800cc3c:	68fb      	ldr	r3, [r7, #12]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3710      	adds	r7, #16
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}
 800cc46:	bf00      	nop
 800cc48:	2000d0ec 	.word	0x2000d0ec

0800cc4c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b090      	sub	sp, #64	@ 0x40
 800cc50:	af04      	add	r7, sp, #16
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cc58:	2300      	movs	r3, #0
 800cc5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc5c:	f3ef 8305 	mrs	r3, IPSR
 800cc60:	61fb      	str	r3, [r7, #28]
  return(result);
 800cc62:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	f040 8090 	bne.w	800cd8a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc6a:	f3ef 8310 	mrs	r3, PRIMASK
 800cc6e:	61bb      	str	r3, [r7, #24]
  return(result);
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d105      	bne.n	800cc82 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cc76:	f3ef 8311 	mrs	r3, BASEPRI
 800cc7a:	617b      	str	r3, [r7, #20]
  return(result);
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d003      	beq.n	800cc8a <osThreadNew+0x3e>
 800cc82:	4b44      	ldr	r3, [pc, #272]	@ (800cd94 <osThreadNew+0x148>)
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d07f      	beq.n	800cd8a <osThreadNew+0x13e>
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d07c      	beq.n	800cd8a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800cc90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cc94:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cc96:	2318      	movs	r3, #24
 800cc98:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800cc9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cca2:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d045      	beq.n	800cd36 <osThreadNew+0xea>
      if (attr->name != NULL) {
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d002      	beq.n	800ccb8 <osThreadNew+0x6c>
        name = attr->name;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d002      	beq.n	800ccc6 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	699b      	ldr	r3, [r3, #24]
 800ccc4:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d008      	beq.n	800ccde <osThreadNew+0x92>
 800cccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccce:	2b38      	cmp	r3, #56	@ 0x38
 800ccd0:	d805      	bhi.n	800ccde <osThreadNew+0x92>
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	685b      	ldr	r3, [r3, #4]
 800ccd6:	f003 0301 	and.w	r3, r3, #1
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d001      	beq.n	800cce2 <osThreadNew+0x96>
        return (NULL);
 800ccde:	2300      	movs	r3, #0
 800cce0:	e054      	b.n	800cd8c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	695b      	ldr	r3, [r3, #20]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d003      	beq.n	800ccf2 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	695b      	ldr	r3, [r3, #20]
 800ccee:	089b      	lsrs	r3, r3, #2
 800ccf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00e      	beq.n	800cd18 <osThreadNew+0xcc>
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	68db      	ldr	r3, [r3, #12]
 800ccfe:	2ba7      	cmp	r3, #167	@ 0xa7
 800cd00:	d90a      	bls.n	800cd18 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d006      	beq.n	800cd18 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	695b      	ldr	r3, [r3, #20]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <osThreadNew+0xcc>
        mem = 1;
 800cd12:	2301      	movs	r3, #1
 800cd14:	623b      	str	r3, [r7, #32]
 800cd16:	e010      	b.n	800cd3a <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d10c      	bne.n	800cd3a <osThreadNew+0xee>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	68db      	ldr	r3, [r3, #12]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d108      	bne.n	800cd3a <osThreadNew+0xee>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	691b      	ldr	r3, [r3, #16]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d104      	bne.n	800cd3a <osThreadNew+0xee>
          mem = 0;
 800cd30:	2300      	movs	r3, #0
 800cd32:	623b      	str	r3, [r7, #32]
 800cd34:	e001      	b.n	800cd3a <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800cd36:	2300      	movs	r3, #0
 800cd38:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cd3a:	6a3b      	ldr	r3, [r7, #32]
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d110      	bne.n	800cd62 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cd48:	9202      	str	r2, [sp, #8]
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd4e:	9300      	str	r3, [sp, #0]
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cd54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f001 ff5a 	bl	800ec10 <xTaskCreateStatic>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	613b      	str	r3, [r7, #16]
 800cd60:	e013      	b.n	800cd8a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800cd62:	6a3b      	ldr	r3, [r7, #32]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d110      	bne.n	800cd8a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800cd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	f107 0310 	add.w	r3, r7, #16
 800cd70:	9301      	str	r3, [sp, #4]
 800cd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd74:	9300      	str	r3, [sp, #0]
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f001 ffae 	bl	800ecdc <xTaskCreate>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d001      	beq.n	800cd8a <osThreadNew+0x13e>
          hTask = NULL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800cd8a:	693b      	ldr	r3, [r7, #16]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3730      	adds	r7, #48	@ 0x30
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}
 800cd94:	2000d0ec 	.word	0x2000d0ec

0800cd98 <osThreadExit>:
  }

  return (stat);
}

__NO_RETURN void osThreadExit (void) {
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800cd9c:	2000      	movs	r0, #0
 800cd9e:	f002 f8fd 	bl	800ef9c <vTaskDelete>
#endif
  for (;;);
 800cda2:	bf00      	nop
 800cda4:	e7fd      	b.n	800cda2 <osThreadExit+0xa>
	...

0800cda8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b086      	sub	sp, #24
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cdb0:	f3ef 8305 	mrs	r3, IPSR
 800cdb4:	613b      	str	r3, [r7, #16]
  return(result);
 800cdb6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d10f      	bne.n	800cddc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cdbc:	f3ef 8310 	mrs	r3, PRIMASK
 800cdc0:	60fb      	str	r3, [r7, #12]
  return(result);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d105      	bne.n	800cdd4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cdc8:	f3ef 8311 	mrs	r3, BASEPRI
 800cdcc:	60bb      	str	r3, [r7, #8]
  return(result);
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d007      	beq.n	800cde4 <osDelay+0x3c>
 800cdd4:	4b0a      	ldr	r3, [pc, #40]	@ (800ce00 <osDelay+0x58>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b02      	cmp	r3, #2
 800cdda:	d103      	bne.n	800cde4 <osDelay+0x3c>
    stat = osErrorISR;
 800cddc:	f06f 0305 	mvn.w	r3, #5
 800cde0:	617b      	str	r3, [r7, #20]
 800cde2:	e007      	b.n	800cdf4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d002      	beq.n	800cdf4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f002 f94a 	bl	800f088 <vTaskDelay>
    }
  }

  return (stat);
 800cdf4:	697b      	ldr	r3, [r7, #20]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3718      	adds	r7, #24
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	2000d0ec 	.word	0x2000d0ec

0800ce04 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b08a      	sub	sp, #40	@ 0x28
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce10:	f3ef 8305 	mrs	r3, IPSR
 800ce14:	613b      	str	r3, [r7, #16]
  return(result);
 800ce16:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	f040 8085 	bne.w	800cf28 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce1e:	f3ef 8310 	mrs	r3, PRIMASK
 800ce22:	60fb      	str	r3, [r7, #12]
  return(result);
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d105      	bne.n	800ce36 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce2a:	f3ef 8311 	mrs	r3, BASEPRI
 800ce2e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d003      	beq.n	800ce3e <osMutexNew+0x3a>
 800ce36:	4b3f      	ldr	r3, [pc, #252]	@ (800cf34 <osMutexNew+0x130>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2b02      	cmp	r3, #2
 800ce3c:	d074      	beq.n	800cf28 <osMutexNew+0x124>
    if (attr != NULL) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d003      	beq.n	800ce4c <osMutexNew+0x48>
      type = attr->attr_bits;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	623b      	str	r3, [r7, #32]
 800ce4a:	e001      	b.n	800ce50 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ce50:	6a3b      	ldr	r3, [r7, #32]
 800ce52:	f003 0301 	and.w	r3, r3, #1
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d002      	beq.n	800ce60 <osMutexNew+0x5c>
      rmtx = 1U;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	61fb      	str	r3, [r7, #28]
 800ce5e:	e001      	b.n	800ce64 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ce64:	6a3b      	ldr	r3, [r7, #32]
 800ce66:	f003 0308 	and.w	r3, r3, #8
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d15c      	bne.n	800cf28 <osMutexNew+0x124>
      mem = -1;
 800ce6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce72:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d015      	beq.n	800cea6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	689b      	ldr	r3, [r3, #8]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d006      	beq.n	800ce90 <osMutexNew+0x8c>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	68db      	ldr	r3, [r3, #12]
 800ce86:	2b4f      	cmp	r3, #79	@ 0x4f
 800ce88:	d902      	bls.n	800ce90 <osMutexNew+0x8c>
          mem = 1;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	61bb      	str	r3, [r7, #24]
 800ce8e:	e00c      	b.n	800ceaa <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	689b      	ldr	r3, [r3, #8]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d108      	bne.n	800ceaa <osMutexNew+0xa6>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d104      	bne.n	800ceaa <osMutexNew+0xa6>
            mem = 0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	61bb      	str	r3, [r7, #24]
 800cea4:	e001      	b.n	800ceaa <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800cea6:	2300      	movs	r3, #0
 800cea8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800ceaa:	69bb      	ldr	r3, [r7, #24]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d112      	bne.n	800ced6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d007      	beq.n	800cec6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	4619      	mov	r1, r3
 800cebc:	2004      	movs	r0, #4
 800cebe:	f000 fec0 	bl	800dc42 <xQueueCreateMutexStatic>
 800cec2:	6278      	str	r0, [r7, #36]	@ 0x24
 800cec4:	e016      	b.n	800cef4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	689b      	ldr	r3, [r3, #8]
 800ceca:	4619      	mov	r1, r3
 800cecc:	2001      	movs	r0, #1
 800cece:	f000 feb8 	bl	800dc42 <xQueueCreateMutexStatic>
 800ced2:	6278      	str	r0, [r7, #36]	@ 0x24
 800ced4:	e00e      	b.n	800cef4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10b      	bne.n	800cef4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d004      	beq.n	800ceec <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800cee2:	2004      	movs	r0, #4
 800cee4:	f000 fe95 	bl	800dc12 <xQueueCreateMutex>
 800cee8:	6278      	str	r0, [r7, #36]	@ 0x24
 800ceea:	e003      	b.n	800cef4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800ceec:	2001      	movs	r0, #1
 800ceee:	f000 fe90 	bl	800dc12 <xQueueCreateMutex>
 800cef2:	6278      	str	r0, [r7, #36]	@ 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800cef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00c      	beq.n	800cf14 <osMutexNew+0x110>
        if (attr != NULL) {
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d003      	beq.n	800cf08 <osMutexNew+0x104>
          name = attr->name;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	617b      	str	r3, [r7, #20]
 800cf06:	e001      	b.n	800cf0c <osMutexNew+0x108>
        } else {
          name = NULL;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800cf0c:	6979      	ldr	r1, [r7, #20]
 800cf0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cf10:	f001 fdf6 	bl	800eb00 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800cf14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d006      	beq.n	800cf28 <osMutexNew+0x124>
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d003      	beq.n	800cf28 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800cf20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf22:	f043 0301 	orr.w	r3, r3, #1
 800cf26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800cf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3728      	adds	r7, #40	@ 0x28
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	2000d0ec 	.word	0x2000d0ec

0800cf38 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f023 0301 	bic.w	r3, r3, #1
 800cf48:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f003 0301 	and.w	r3, r3, #1
 800cf50:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf56:	f3ef 8305 	mrs	r3, IPSR
 800cf5a:	613b      	str	r3, [r7, #16]
  return(result);
 800cf5c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d10f      	bne.n	800cf82 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf62:	f3ef 8310 	mrs	r3, PRIMASK
 800cf66:	60fb      	str	r3, [r7, #12]
  return(result);
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d105      	bne.n	800cf7a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf6e:	f3ef 8311 	mrs	r3, BASEPRI
 800cf72:	60bb      	str	r3, [r7, #8]
  return(result);
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d007      	beq.n	800cf8a <osMutexAcquire+0x52>
 800cf7a:	4b1d      	ldr	r3, [pc, #116]	@ (800cff0 <osMutexAcquire+0xb8>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	2b02      	cmp	r3, #2
 800cf80:	d103      	bne.n	800cf8a <osMutexAcquire+0x52>
    stat = osErrorISR;
 800cf82:	f06f 0305 	mvn.w	r3, #5
 800cf86:	61fb      	str	r3, [r7, #28]
 800cf88:	e02c      	b.n	800cfe4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d103      	bne.n	800cf98 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800cf90:	f06f 0303 	mvn.w	r3, #3
 800cf94:	61fb      	str	r3, [r7, #28]
 800cf96:	e025      	b.n	800cfe4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d011      	beq.n	800cfc2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800cf9e:	6839      	ldr	r1, [r7, #0]
 800cfa0:	69b8      	ldr	r0, [r7, #24]
 800cfa2:	f000 fea0 	bl	800dce6 <xQueueTakeMutexRecursive>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d01b      	beq.n	800cfe4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d003      	beq.n	800cfba <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800cfb2:	f06f 0301 	mvn.w	r3, #1
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	e014      	b.n	800cfe4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cfba:	f06f 0302 	mvn.w	r3, #2
 800cfbe:	61fb      	str	r3, [r7, #28]
 800cfc0:	e010      	b.n	800cfe4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	69b8      	ldr	r0, [r7, #24]
 800cfc6:	f001 fa6b 	bl	800e4a0 <xQueueSemaphoreTake>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b01      	cmp	r3, #1
 800cfce:	d009      	beq.n	800cfe4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800cfd6:	f06f 0301 	mvn.w	r3, #1
 800cfda:	61fb      	str	r3, [r7, #28]
 800cfdc:	e002      	b.n	800cfe4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800cfde:	f06f 0302 	mvn.w	r3, #2
 800cfe2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cfe4:	69fb      	ldr	r3, [r7, #28]
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3720      	adds	r7, #32
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	2000d0ec 	.word	0x2000d0ec

0800cff4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b088      	sub	sp, #32
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	f023 0301 	bic.w	r3, r3, #1
 800d002:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f003 0301 	and.w	r3, r3, #1
 800d00a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d010:	f3ef 8305 	mrs	r3, IPSR
 800d014:	613b      	str	r3, [r7, #16]
  return(result);
 800d016:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10f      	bne.n	800d03c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d01c:	f3ef 8310 	mrs	r3, PRIMASK
 800d020:	60fb      	str	r3, [r7, #12]
  return(result);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d105      	bne.n	800d034 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d028:	f3ef 8311 	mrs	r3, BASEPRI
 800d02c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d007      	beq.n	800d044 <osMutexRelease+0x50>
 800d034:	4b16      	ldr	r3, [pc, #88]	@ (800d090 <osMutexRelease+0x9c>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d103      	bne.n	800d044 <osMutexRelease+0x50>
    stat = osErrorISR;
 800d03c:	f06f 0305 	mvn.w	r3, #5
 800d040:	61fb      	str	r3, [r7, #28]
 800d042:	e01f      	b.n	800d084 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800d044:	69bb      	ldr	r3, [r7, #24]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d103      	bne.n	800d052 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800d04a:	f06f 0303 	mvn.w	r3, #3
 800d04e:	61fb      	str	r3, [r7, #28]
 800d050:	e018      	b.n	800d084 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800d052:	697b      	ldr	r3, [r7, #20]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d009      	beq.n	800d06c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d058:	69b8      	ldr	r0, [r7, #24]
 800d05a:	f000 fe0d 	bl	800dc78 <xQueueGiveMutexRecursive>
 800d05e:	4603      	mov	r3, r0
 800d060:	2b01      	cmp	r3, #1
 800d062:	d00f      	beq.n	800d084 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d064:	f06f 0302 	mvn.w	r3, #2
 800d068:	61fb      	str	r3, [r7, #28]
 800d06a:	e00b      	b.n	800d084 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d06c:	2300      	movs	r3, #0
 800d06e:	2200      	movs	r2, #0
 800d070:	2100      	movs	r1, #0
 800d072:	69b8      	ldr	r0, [r7, #24]
 800d074:	f000 fee6 	bl	800de44 <xQueueGenericSend>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b01      	cmp	r3, #1
 800d07c:	d002      	beq.n	800d084 <osMutexRelease+0x90>
        stat = osErrorResource;
 800d07e:	f06f 0302 	mvn.w	r3, #2
 800d082:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800d084:	69fb      	ldr	r3, [r7, #28]
}
 800d086:	4618      	mov	r0, r3
 800d088:	3720      	adds	r7, #32
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	2000d0ec 	.word	0x2000d0ec

0800d094 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d094:	b580      	push	{r7, lr}
 800d096:	b08c      	sub	sp, #48	@ 0x30
 800d098:	af02      	add	r7, sp, #8
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0a4:	f3ef 8305 	mrs	r3, IPSR
 800d0a8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d0aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	f040 8086 	bne.w	800d1be <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800d0b6:	617b      	str	r3, [r7, #20]
  return(result);
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d105      	bne.n	800d0ca <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d0be:	f3ef 8311 	mrs	r3, BASEPRI
 800d0c2:	613b      	str	r3, [r7, #16]
  return(result);
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d003      	beq.n	800d0d2 <osSemaphoreNew+0x3e>
 800d0ca:	4b3f      	ldr	r3, [pc, #252]	@ (800d1c8 <osSemaphoreNew+0x134>)
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d075      	beq.n	800d1be <osSemaphoreNew+0x12a>
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d072      	beq.n	800d1be <osSemaphoreNew+0x12a>
 800d0d8:	68ba      	ldr	r2, [r7, #8]
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d86e      	bhi.n	800d1be <osSemaphoreNew+0x12a>
    mem = -1;
 800d0e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d0e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d015      	beq.n	800d118 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d006      	beq.n	800d102 <osSemaphoreNew+0x6e>
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	2b4f      	cmp	r3, #79	@ 0x4f
 800d0fa:	d902      	bls.n	800d102 <osSemaphoreNew+0x6e>
        mem = 1;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	623b      	str	r3, [r7, #32]
 800d100:	e00c      	b.n	800d11c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	689b      	ldr	r3, [r3, #8]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d108      	bne.n	800d11c <osSemaphoreNew+0x88>
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d104      	bne.n	800d11c <osSemaphoreNew+0x88>
          mem = 0;
 800d112:	2300      	movs	r3, #0
 800d114:	623b      	str	r3, [r7, #32]
 800d116:	e001      	b.n	800d11c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d118:	2300      	movs	r3, #0
 800d11a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d11c:	6a3b      	ldr	r3, [r7, #32]
 800d11e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d122:	d04c      	beq.n	800d1be <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d128      	bne.n	800d17c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d12a:	6a3b      	ldr	r3, [r7, #32]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d10a      	bne.n	800d146 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	689b      	ldr	r3, [r3, #8]
 800d134:	2203      	movs	r2, #3
 800d136:	9200      	str	r2, [sp, #0]
 800d138:	2200      	movs	r2, #0
 800d13a:	2100      	movs	r1, #0
 800d13c:	2001      	movs	r0, #1
 800d13e:	f000 fc61 	bl	800da04 <xQueueGenericCreateStatic>
 800d142:	6278      	str	r0, [r7, #36]	@ 0x24
 800d144:	e005      	b.n	800d152 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800d146:	2203      	movs	r2, #3
 800d148:	2100      	movs	r1, #0
 800d14a:	2001      	movs	r0, #1
 800d14c:	f000 fce1 	bl	800db12 <xQueueGenericCreate>
 800d150:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800d152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d154:	2b00      	cmp	r3, #0
 800d156:	d022      	beq.n	800d19e <osSemaphoreNew+0x10a>
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d01f      	beq.n	800d19e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d15e:	2300      	movs	r3, #0
 800d160:	2200      	movs	r2, #0
 800d162:	2100      	movs	r1, #0
 800d164:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d166:	f000 fe6d 	bl	800de44 <xQueueGenericSend>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d016      	beq.n	800d19e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800d170:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d172:	f001 fb77 	bl	800e864 <vQueueDelete>
            hSemaphore = NULL;
 800d176:	2300      	movs	r3, #0
 800d178:	627b      	str	r3, [r7, #36]	@ 0x24
 800d17a:	e010      	b.n	800d19e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800d17c:	6a3b      	ldr	r3, [r7, #32]
 800d17e:	2b01      	cmp	r3, #1
 800d180:	d108      	bne.n	800d194 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	689b      	ldr	r3, [r3, #8]
 800d186:	461a      	mov	r2, r3
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f000 fde4 	bl	800dd58 <xQueueCreateCountingSemaphoreStatic>
 800d190:	6278      	str	r0, [r7, #36]	@ 0x24
 800d192:	e004      	b.n	800d19e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800d194:	68b9      	ldr	r1, [r7, #8]
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f000 fe1b 	bl	800ddd2 <xQueueCreateCountingSemaphore>
 800d19c:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800d19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d00c      	beq.n	800d1be <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d003      	beq.n	800d1b2 <osSemaphoreNew+0x11e>
          name = attr->name;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	61fb      	str	r3, [r7, #28]
 800d1b0:	e001      	b.n	800d1b6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800d1b6:	69f9      	ldr	r1, [r7, #28]
 800d1b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d1ba:	f001 fca1 	bl	800eb00 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800d1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	3728      	adds	r7, #40	@ 0x28
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}
 800d1c8:	2000d0ec 	.word	0x2000d0ec

0800d1cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b088      	sub	sp, #32
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d103      	bne.n	800d1ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800d1e4:	f06f 0303 	mvn.w	r3, #3
 800d1e8:	61fb      	str	r3, [r7, #28]
 800d1ea:	e04b      	b.n	800d284 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d1ec:	f3ef 8305 	mrs	r3, IPSR
 800d1f0:	617b      	str	r3, [r7, #20]
  return(result);
 800d1f2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d10f      	bne.n	800d218 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d1f8:	f3ef 8310 	mrs	r3, PRIMASK
 800d1fc:	613b      	str	r3, [r7, #16]
  return(result);
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d105      	bne.n	800d210 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d204:	f3ef 8311 	mrs	r3, BASEPRI
 800d208:	60fb      	str	r3, [r7, #12]
  return(result);
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d026      	beq.n	800d25e <osSemaphoreAcquire+0x92>
 800d210:	4b1f      	ldr	r3, [pc, #124]	@ (800d290 <osSemaphoreAcquire+0xc4>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d122      	bne.n	800d25e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d003      	beq.n	800d226 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800d21e:	f06f 0303 	mvn.w	r3, #3
 800d222:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d224:	e02d      	b.n	800d282 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800d226:	2300      	movs	r3, #0
 800d228:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800d22a:	f107 0308 	add.w	r3, r7, #8
 800d22e:	461a      	mov	r2, r3
 800d230:	2100      	movs	r1, #0
 800d232:	69b8      	ldr	r0, [r7, #24]
 800d234:	f001 fa4c 	bl	800e6d0 <xQueueReceiveFromISR>
 800d238:	4603      	mov	r3, r0
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d003      	beq.n	800d246 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800d23e:	f06f 0302 	mvn.w	r3, #2
 800d242:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800d244:	e01d      	b.n	800d282 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d01a      	beq.n	800d282 <osSemaphoreAcquire+0xb6>
 800d24c:	4b11      	ldr	r3, [pc, #68]	@ (800d294 <osSemaphoreAcquire+0xc8>)
 800d24e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800d25c:	e011      	b.n	800d282 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800d25e:	6839      	ldr	r1, [r7, #0]
 800d260:	69b8      	ldr	r0, [r7, #24]
 800d262:	f001 f91d 	bl	800e4a0 <xQueueSemaphoreTake>
 800d266:	4603      	mov	r3, r0
 800d268:	2b01      	cmp	r3, #1
 800d26a:	d00b      	beq.n	800d284 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d003      	beq.n	800d27a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800d272:	f06f 0301 	mvn.w	r3, #1
 800d276:	61fb      	str	r3, [r7, #28]
 800d278:	e004      	b.n	800d284 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800d27a:	f06f 0302 	mvn.w	r3, #2
 800d27e:	61fb      	str	r3, [r7, #28]
 800d280:	e000      	b.n	800d284 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800d282:	bf00      	nop
      }
    }
  }

  return (stat);
 800d284:	69fb      	ldr	r3, [r7, #28]
}
 800d286:	4618      	mov	r0, r3
 800d288:	3720      	adds	r7, #32
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	2000d0ec 	.word	0x2000d0ec
 800d294:	e000ed04 	.word	0xe000ed04

0800d298 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800d298:	b580      	push	{r7, lr}
 800d29a:	b088      	sub	sp, #32
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800d2a8:	69bb      	ldr	r3, [r7, #24]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d103      	bne.n	800d2b6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800d2ae:	f06f 0303 	mvn.w	r3, #3
 800d2b2:	61fb      	str	r3, [r7, #28]
 800d2b4:	e03e      	b.n	800d334 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2b6:	f3ef 8305 	mrs	r3, IPSR
 800d2ba:	617b      	str	r3, [r7, #20]
  return(result);
 800d2bc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d10f      	bne.n	800d2e2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d2c2:	f3ef 8310 	mrs	r3, PRIMASK
 800d2c6:	613b      	str	r3, [r7, #16]
  return(result);
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d105      	bne.n	800d2da <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d2ce:	f3ef 8311 	mrs	r3, BASEPRI
 800d2d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d01e      	beq.n	800d318 <osSemaphoreRelease+0x80>
 800d2da:	4b19      	ldr	r3, [pc, #100]	@ (800d340 <osSemaphoreRelease+0xa8>)
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	d11a      	bne.n	800d318 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2e6:	f107 0308 	add.w	r3, r7, #8
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	69b8      	ldr	r0, [r7, #24]
 800d2ee:	f000 ff56 	bl	800e19e <xQueueGiveFromISR>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d003      	beq.n	800d300 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800d2f8:	f06f 0302 	mvn.w	r3, #2
 800d2fc:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d2fe:	e018      	b.n	800d332 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d015      	beq.n	800d332 <osSemaphoreRelease+0x9a>
 800d306:	4b0f      	ldr	r3, [pc, #60]	@ (800d344 <osSemaphoreRelease+0xac>)
 800d308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d30c:	601a      	str	r2, [r3, #0]
 800d30e:	f3bf 8f4f 	dsb	sy
 800d312:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d316:	e00c      	b.n	800d332 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800d318:	2300      	movs	r3, #0
 800d31a:	2200      	movs	r2, #0
 800d31c:	2100      	movs	r1, #0
 800d31e:	69b8      	ldr	r0, [r7, #24]
 800d320:	f000 fd90 	bl	800de44 <xQueueGenericSend>
 800d324:	4603      	mov	r3, r0
 800d326:	2b01      	cmp	r3, #1
 800d328:	d004      	beq.n	800d334 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800d32a:	f06f 0302 	mvn.w	r3, #2
 800d32e:	61fb      	str	r3, [r7, #28]
 800d330:	e000      	b.n	800d334 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800d332:	bf00      	nop
    }
  }

  return (stat);
 800d334:	69fb      	ldr	r3, [r7, #28]
}
 800d336:	4618      	mov	r0, r3
 800d338:	3720      	adds	r7, #32
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	2000d0ec 	.word	0x2000d0ec
 800d344:	e000ed04 	.word	0xe000ed04

0800d348 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d354:	f3ef 8305 	mrs	r3, IPSR
 800d358:	617b      	str	r3, [r7, #20]
  return(result);
 800d35a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d10f      	bne.n	800d380 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d360:	f3ef 8310 	mrs	r3, PRIMASK
 800d364:	613b      	str	r3, [r7, #16]
  return(result);
 800d366:	693b      	ldr	r3, [r7, #16]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d105      	bne.n	800d378 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d36c:	f3ef 8311 	mrs	r3, BASEPRI
 800d370:	60fb      	str	r3, [r7, #12]
  return(result);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d007      	beq.n	800d388 <osSemaphoreDelete+0x40>
 800d378:	4b0d      	ldr	r3, [pc, #52]	@ (800d3b0 <osSemaphoreDelete+0x68>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d103      	bne.n	800d388 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800d380:	f06f 0305 	mvn.w	r3, #5
 800d384:	61fb      	str	r3, [r7, #28]
 800d386:	e00e      	b.n	800d3a6 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d103      	bne.n	800d396 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800d38e:	f06f 0303 	mvn.w	r3, #3
 800d392:	61fb      	str	r3, [r7, #28]
 800d394:	e007      	b.n	800d3a6 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800d396:	69b8      	ldr	r0, [r7, #24]
 800d398:	f001 fbdc 	bl	800eb54 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800d3a0:	69b8      	ldr	r0, [r7, #24]
 800d3a2:	f001 fa5f 	bl	800e864 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d3a6:	69fb      	ldr	r3, [r7, #28]
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3720      	adds	r7, #32
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	2000d0ec 	.word	0x2000d0ec

0800d3b4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b08c      	sub	sp, #48	@ 0x30
 800d3b8:	af02      	add	r7, sp, #8
 800d3ba:	60f8      	str	r0, [r7, #12]
 800d3bc:	60b9      	str	r1, [r7, #8]
 800d3be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d3c4:	f3ef 8305 	mrs	r3, IPSR
 800d3c8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d3ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d16f      	bne.n	800d4b0 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d3d0:	f3ef 8310 	mrs	r3, PRIMASK
 800d3d4:	617b      	str	r3, [r7, #20]
  return(result);
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d105      	bne.n	800d3e8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d3dc:	f3ef 8311 	mrs	r3, BASEPRI
 800d3e0:	613b      	str	r3, [r7, #16]
  return(result);
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d003      	beq.n	800d3f0 <osMessageQueueNew+0x3c>
 800d3e8:	4b34      	ldr	r3, [pc, #208]	@ (800d4bc <osMessageQueueNew+0x108>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d05f      	beq.n	800d4b0 <osMessageQueueNew+0xfc>
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d05c      	beq.n	800d4b0 <osMessageQueueNew+0xfc>
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d059      	beq.n	800d4b0 <osMessageQueueNew+0xfc>
    mem = -1;
 800d3fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d400:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d029      	beq.n	800d45c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	689b      	ldr	r3, [r3, #8]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d012      	beq.n	800d436 <osMessageQueueNew+0x82>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	68db      	ldr	r3, [r3, #12]
 800d414:	2b4f      	cmp	r3, #79	@ 0x4f
 800d416:	d90e      	bls.n	800d436 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d00a      	beq.n	800d436 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	695a      	ldr	r2, [r3, #20]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	68b9      	ldr	r1, [r7, #8]
 800d428:	fb01 f303 	mul.w	r3, r1, r3
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d302      	bcc.n	800d436 <osMessageQueueNew+0x82>
        mem = 1;
 800d430:	2301      	movs	r3, #1
 800d432:	623b      	str	r3, [r7, #32]
 800d434:	e014      	b.n	800d460 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	689b      	ldr	r3, [r3, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d110      	bne.n	800d460 <osMessageQueueNew+0xac>
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	68db      	ldr	r3, [r3, #12]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d10c      	bne.n	800d460 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d108      	bne.n	800d460 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	695b      	ldr	r3, [r3, #20]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d104      	bne.n	800d460 <osMessageQueueNew+0xac>
          mem = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	623b      	str	r3, [r7, #32]
 800d45a:	e001      	b.n	800d460 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800d45c:	2300      	movs	r3, #0
 800d45e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d460:	6a3b      	ldr	r3, [r7, #32]
 800d462:	2b01      	cmp	r3, #1
 800d464:	d10b      	bne.n	800d47e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	691a      	ldr	r2, [r3, #16]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	2100      	movs	r1, #0
 800d470:	9100      	str	r1, [sp, #0]
 800d472:	68b9      	ldr	r1, [r7, #8]
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f000 fac5 	bl	800da04 <xQueueGenericCreateStatic>
 800d47a:	6278      	str	r0, [r7, #36]	@ 0x24
 800d47c:	e008      	b.n	800d490 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800d47e:	6a3b      	ldr	r3, [r7, #32]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d105      	bne.n	800d490 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800d484:	2200      	movs	r2, #0
 800d486:	68b9      	ldr	r1, [r7, #8]
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f000 fb42 	bl	800db12 <xQueueGenericCreate>
 800d48e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800d490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d492:	2b00      	cmp	r3, #0
 800d494:	d00c      	beq.n	800d4b0 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <osMessageQueueNew+0xf0>
        name = attr->name;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	61fb      	str	r3, [r7, #28]
 800d4a2:	e001      	b.n	800d4a8 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800d4a8:	69f9      	ldr	r1, [r7, #28]
 800d4aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d4ac:	f001 fb28 	bl	800eb00 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3728      	adds	r7, #40	@ 0x28
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	2000d0ec 	.word	0x2000d0ec

0800d4c0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b08a      	sub	sp, #40	@ 0x28
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	603b      	str	r3, [r7, #0]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d4d8:	f3ef 8305 	mrs	r3, IPSR
 800d4dc:	61fb      	str	r3, [r7, #28]
  return(result);
 800d4de:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d10f      	bne.n	800d504 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d4e4:	f3ef 8310 	mrs	r3, PRIMASK
 800d4e8:	61bb      	str	r3, [r7, #24]
  return(result);
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d105      	bne.n	800d4fc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d4f0:	f3ef 8311 	mrs	r3, BASEPRI
 800d4f4:	617b      	str	r3, [r7, #20]
  return(result);
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d02c      	beq.n	800d556 <osMessageQueuePut+0x96>
 800d4fc:	4b28      	ldr	r3, [pc, #160]	@ (800d5a0 <osMessageQueuePut+0xe0>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	2b02      	cmp	r3, #2
 800d502:	d128      	bne.n	800d556 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d504:	6a3b      	ldr	r3, [r7, #32]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d005      	beq.n	800d516 <osMessageQueuePut+0x56>
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d002      	beq.n	800d516 <osMessageQueuePut+0x56>
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d003      	beq.n	800d51e <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800d516:	f06f 0303 	mvn.w	r3, #3
 800d51a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d51c:	e039      	b.n	800d592 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800d51e:	2300      	movs	r3, #0
 800d520:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800d522:	f107 0210 	add.w	r2, r7, #16
 800d526:	2300      	movs	r3, #0
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	6a38      	ldr	r0, [r7, #32]
 800d52c:	f000 fd94 	bl	800e058 <xQueueGenericSendFromISR>
 800d530:	4603      	mov	r3, r0
 800d532:	2b01      	cmp	r3, #1
 800d534:	d003      	beq.n	800d53e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800d536:	f06f 0302 	mvn.w	r3, #2
 800d53a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d53c:	e029      	b.n	800d592 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d026      	beq.n	800d592 <osMessageQueuePut+0xd2>
 800d544:	4b17      	ldr	r3, [pc, #92]	@ (800d5a4 <osMessageQueuePut+0xe4>)
 800d546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	f3bf 8f4f 	dsb	sy
 800d550:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d554:	e01d      	b.n	800d592 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d556:	6a3b      	ldr	r3, [r7, #32]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d002      	beq.n	800d562 <osMessageQueuePut+0xa2>
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d103      	bne.n	800d56a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800d562:	f06f 0303 	mvn.w	r3, #3
 800d566:	627b      	str	r3, [r7, #36]	@ 0x24
 800d568:	e014      	b.n	800d594 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d56a:	2300      	movs	r3, #0
 800d56c:	683a      	ldr	r2, [r7, #0]
 800d56e:	68b9      	ldr	r1, [r7, #8]
 800d570:	6a38      	ldr	r0, [r7, #32]
 800d572:	f000 fc67 	bl	800de44 <xQueueGenericSend>
 800d576:	4603      	mov	r3, r0
 800d578:	2b01      	cmp	r3, #1
 800d57a:	d00b      	beq.n	800d594 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d003      	beq.n	800d58a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800d582:	f06f 0301 	mvn.w	r3, #1
 800d586:	627b      	str	r3, [r7, #36]	@ 0x24
 800d588:	e004      	b.n	800d594 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800d58a:	f06f 0302 	mvn.w	r3, #2
 800d58e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d590:	e000      	b.n	800d594 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d592:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d596:	4618      	mov	r0, r3
 800d598:	3728      	adds	r7, #40	@ 0x28
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	2000d0ec 	.word	0x2000d0ec
 800d5a4:	e000ed04 	.word	0xe000ed04

0800d5a8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b08a      	sub	sp, #40	@ 0x28
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	60f8      	str	r0, [r7, #12]
 800d5b0:	60b9      	str	r1, [r7, #8]
 800d5b2:	607a      	str	r2, [r7, #4]
 800d5b4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d5be:	f3ef 8305 	mrs	r3, IPSR
 800d5c2:	61fb      	str	r3, [r7, #28]
  return(result);
 800d5c4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d10f      	bne.n	800d5ea <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5ca:	f3ef 8310 	mrs	r3, PRIMASK
 800d5ce:	61bb      	str	r3, [r7, #24]
  return(result);
 800d5d0:	69bb      	ldr	r3, [r7, #24]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d105      	bne.n	800d5e2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d5d6:	f3ef 8311 	mrs	r3, BASEPRI
 800d5da:	617b      	str	r3, [r7, #20]
  return(result);
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d02c      	beq.n	800d63c <osMessageQueueGet+0x94>
 800d5e2:	4b28      	ldr	r3, [pc, #160]	@ (800d684 <osMessageQueueGet+0xdc>)
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b02      	cmp	r3, #2
 800d5e8:	d128      	bne.n	800d63c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d5ea:	6a3b      	ldr	r3, [r7, #32]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d005      	beq.n	800d5fc <osMessageQueueGet+0x54>
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d002      	beq.n	800d5fc <osMessageQueueGet+0x54>
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d003      	beq.n	800d604 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800d5fc:	f06f 0303 	mvn.w	r3, #3
 800d600:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d602:	e038      	b.n	800d676 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800d608:	f107 0310 	add.w	r3, r7, #16
 800d60c:	461a      	mov	r2, r3
 800d60e:	68b9      	ldr	r1, [r7, #8]
 800d610:	6a38      	ldr	r0, [r7, #32]
 800d612:	f001 f85d 	bl	800e6d0 <xQueueReceiveFromISR>
 800d616:	4603      	mov	r3, r0
 800d618:	2b01      	cmp	r3, #1
 800d61a:	d003      	beq.n	800d624 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800d61c:	f06f 0302 	mvn.w	r3, #2
 800d620:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d622:	e028      	b.n	800d676 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d025      	beq.n	800d676 <osMessageQueueGet+0xce>
 800d62a:	4b17      	ldr	r3, [pc, #92]	@ (800d688 <osMessageQueueGet+0xe0>)
 800d62c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d63a:	e01c      	b.n	800d676 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d002      	beq.n	800d648 <osMessageQueueGet+0xa0>
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d103      	bne.n	800d650 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800d648:	f06f 0303 	mvn.w	r3, #3
 800d64c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d64e:	e013      	b.n	800d678 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800d650:	683a      	ldr	r2, [r7, #0]
 800d652:	68b9      	ldr	r1, [r7, #8]
 800d654:	6a38      	ldr	r0, [r7, #32]
 800d656:	f000 fe3b 	bl	800e2d0 <xQueueReceive>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d00b      	beq.n	800d678 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800d660:	683b      	ldr	r3, [r7, #0]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d003      	beq.n	800d66e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800d666:	f06f 0301 	mvn.w	r3, #1
 800d66a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d66c:	e004      	b.n	800d678 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800d66e:	f06f 0302 	mvn.w	r3, #2
 800d672:	627b      	str	r3, [r7, #36]	@ 0x24
 800d674:	e000      	b.n	800d678 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800d676:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800d678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3728      	adds	r7, #40	@ 0x28
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	2000d0ec 	.word	0x2000d0ec
 800d688:	e000ed04 	.word	0xe000ed04

0800d68c <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b088      	sub	sp, #32
 800d690:	af00      	add	r7, sp, #0
 800d692:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d102      	bne.n	800d6a4 <osMessageQueueGetCount+0x18>
    count = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	61fb      	str	r3, [r7, #28]
 800d6a2:	e01e      	b.n	800d6e2 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6a4:	f3ef 8305 	mrs	r3, IPSR
 800d6a8:	617b      	str	r3, [r7, #20]
  return(result);
 800d6aa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10f      	bne.n	800d6d0 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6b0:	f3ef 8310 	mrs	r3, PRIMASK
 800d6b4:	613b      	str	r3, [r7, #16]
  return(result);
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d105      	bne.n	800d6c8 <osMessageQueueGetCount+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d6bc:	f3ef 8311 	mrs	r3, BASEPRI
 800d6c0:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d008      	beq.n	800d6da <osMessageQueueGetCount+0x4e>
 800d6c8:	4b08      	ldr	r3, [pc, #32]	@ (800d6ec <osMessageQueueGetCount+0x60>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d104      	bne.n	800d6da <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 800d6d0:	69b8      	ldr	r0, [r7, #24]
 800d6d2:	f001 f8a6 	bl	800e822 <uxQueueMessagesWaitingFromISR>
 800d6d6:	61f8      	str	r0, [r7, #28]
 800d6d8:	e003      	b.n	800d6e2 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 800d6da:	69b8      	ldr	r0, [r7, #24]
 800d6dc:	f001 f880 	bl	800e7e0 <uxQueueMessagesWaiting>
 800d6e0:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 800d6e2:	69fb      	ldr	r3, [r7, #28]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3720      	adds	r7, #32
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	2000d0ec 	.word	0x2000d0ec

0800d6f0 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b088      	sub	sp, #32
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6fc:	f3ef 8305 	mrs	r3, IPSR
 800d700:	617b      	str	r3, [r7, #20]
  return(result);
 800d702:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800d704:	2b00      	cmp	r3, #0
 800d706:	d10f      	bne.n	800d728 <osMessageQueueDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d708:	f3ef 8310 	mrs	r3, PRIMASK
 800d70c:	613b      	str	r3, [r7, #16]
  return(result);
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d105      	bne.n	800d720 <osMessageQueueDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d714:	f3ef 8311 	mrs	r3, BASEPRI
 800d718:	60fb      	str	r3, [r7, #12]
  return(result);
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d007      	beq.n	800d730 <osMessageQueueDelete+0x40>
 800d720:	4b0d      	ldr	r3, [pc, #52]	@ (800d758 <osMessageQueueDelete+0x68>)
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	2b02      	cmp	r3, #2
 800d726:	d103      	bne.n	800d730 <osMessageQueueDelete+0x40>
    stat = osErrorISR;
 800d728:	f06f 0305 	mvn.w	r3, #5
 800d72c:	61fb      	str	r3, [r7, #28]
 800d72e:	e00e      	b.n	800d74e <osMessageQueueDelete+0x5e>
  }
  else if (hQueue == NULL) {
 800d730:	69bb      	ldr	r3, [r7, #24]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d103      	bne.n	800d73e <osMessageQueueDelete+0x4e>
    stat = osErrorParameter;
 800d736:	f06f 0303 	mvn.w	r3, #3
 800d73a:	61fb      	str	r3, [r7, #28]
 800d73c:	e007      	b.n	800d74e <osMessageQueueDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800d73e:	69b8      	ldr	r0, [r7, #24]
 800d740:	f001 fa08 	bl	800eb54 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800d744:	2300      	movs	r3, #0
 800d746:	61fb      	str	r3, [r7, #28]
    vQueueDelete (hQueue);
 800d748:	69b8      	ldr	r0, [r7, #24]
 800d74a:	f001 f88b 	bl	800e864 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800d74e:	69fb      	ldr	r3, [r7, #28]
}
 800d750:	4618      	mov	r0, r3
 800d752:	3720      	adds	r7, #32
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	2000d0ec 	.word	0x2000d0ec

0800d75c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d75c:	b480      	push	{r7}
 800d75e:	b085      	sub	sp, #20
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	4a07      	ldr	r2, [pc, #28]	@ (800d788 <vApplicationGetIdleTaskMemory+0x2c>)
 800d76c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	4a06      	ldr	r2, [pc, #24]	@ (800d78c <vApplicationGetIdleTaskMemory+0x30>)
 800d772:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d77a:	601a      	str	r2, [r3, #0]
}
 800d77c:	bf00      	nop
 800d77e:	3714      	adds	r7, #20
 800d780:	46bd      	mov	sp, r7
 800d782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d786:	4770      	bx	lr
 800d788:	2000d0f0 	.word	0x2000d0f0
 800d78c:	2000d198 	.word	0x2000d198

0800d790 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d790:	b480      	push	{r7}
 800d792:	b085      	sub	sp, #20
 800d794:	af00      	add	r7, sp, #0
 800d796:	60f8      	str	r0, [r7, #12]
 800d798:	60b9      	str	r1, [r7, #8]
 800d79a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	4a07      	ldr	r2, [pc, #28]	@ (800d7bc <vApplicationGetTimerTaskMemory+0x2c>)
 800d7a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	4a06      	ldr	r2, [pc, #24]	@ (800d7c0 <vApplicationGetTimerTaskMemory+0x30>)
 800d7a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d7ae:	601a      	str	r2, [r3, #0]
}
 800d7b0:	bf00      	nop
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr
 800d7bc:	2000d998 	.word	0x2000d998
 800d7c0:	2000da40 	.word	0x2000da40

0800d7c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d7c4:	b480      	push	{r7}
 800d7c6:	b083      	sub	sp, #12
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f103 0208 	add.w	r2, r3, #8
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f103 0208 	add.w	r2, r3, #8
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	f103 0208 	add.w	r2, r3, #8
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2200      	movs	r2, #0
 800d810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d812:	bf00      	nop
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d81e:	b480      	push	{r7}
 800d820:	b085      	sub	sp, #20
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	68fa      	ldr	r2, [r7, #12]
 800d832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	689a      	ldr	r2, [r3, #8]
 800d838:	683b      	ldr	r3, [r7, #0]
 800d83a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	689b      	ldr	r3, [r3, #8]
 800d840:	683a      	ldr	r2, [r7, #0]
 800d842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	687a      	ldr	r2, [r7, #4]
 800d84e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	1c5a      	adds	r2, r3, #1
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	601a      	str	r2, [r3, #0]
}
 800d85a:	bf00      	nop
 800d85c:	3714      	adds	r7, #20
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr

0800d866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d866:	b480      	push	{r7}
 800d868:	b085      	sub	sp, #20
 800d86a:	af00      	add	r7, sp, #0
 800d86c:	6078      	str	r0, [r7, #4]
 800d86e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d876:	68bb      	ldr	r3, [r7, #8]
 800d878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d87c:	d103      	bne.n	800d886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	691b      	ldr	r3, [r3, #16]
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	e00c      	b.n	800d8a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	3308      	adds	r3, #8
 800d88a:	60fb      	str	r3, [r7, #12]
 800d88c:	e002      	b.n	800d894 <vListInsert+0x2e>
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	60fb      	str	r3, [r7, #12]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	68ba      	ldr	r2, [r7, #8]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d2f6      	bcs.n	800d88e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	685a      	ldr	r2, [r3, #4]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	683a      	ldr	r2, [r7, #0]
 800d8ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	1c5a      	adds	r2, r3, #1
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	601a      	str	r2, [r3, #0]
}
 800d8cc:	bf00      	nop
 800d8ce:	3714      	adds	r7, #20
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b085      	sub	sp, #20
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	691b      	ldr	r3, [r3, #16]
 800d8e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	6892      	ldr	r2, [r2, #8]
 800d8ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	6852      	ldr	r2, [r2, #4]
 800d8f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	429a      	cmp	r2, r3
 800d902:	d103      	bne.n	800d90c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	689a      	ldr	r2, [r3, #8]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2200      	movs	r2, #0
 800d910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	1e5a      	subs	r2, r3, #1
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	b084      	sub	sp, #16
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d10d      	bne.n	800d95c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d944:	b672      	cpsid	i
 800d946:	f383 8811 	msr	BASEPRI, r3
 800d94a:	f3bf 8f6f 	isb	sy
 800d94e:	f3bf 8f4f 	dsb	sy
 800d952:	b662      	cpsie	i
 800d954:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d956:	bf00      	nop
 800d958:	bf00      	nop
 800d95a:	e7fd      	b.n	800d958 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800d95c:	f002 feee 	bl	801073c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681a      	ldr	r2, [r3, #0]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d968:	68f9      	ldr	r1, [r7, #12]
 800d96a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d96c:	fb01 f303 	mul.w	r3, r1, r3
 800d970:	441a      	add	r2, r3
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681a      	ldr	r2, [r3, #0]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d98c:	3b01      	subs	r3, #1
 800d98e:	68f9      	ldr	r1, [r7, #12]
 800d990:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d992:	fb01 f303 	mul.w	r3, r1, r3
 800d996:	441a      	add	r2, r3
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	22ff      	movs	r2, #255	@ 0xff
 800d9a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	22ff      	movs	r2, #255	@ 0xff
 800d9a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d114      	bne.n	800d9dc <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d01a      	beq.n	800d9f0 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	3310      	adds	r3, #16
 800d9be:	4618      	mov	r0, r3
 800d9c0:	f001 fe7c 	bl	800f6bc <xTaskRemoveFromEventList>
 800d9c4:	4603      	mov	r3, r0
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d012      	beq.n	800d9f0 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d9ca:	4b0d      	ldr	r3, [pc, #52]	@ (800da00 <xQueueGenericReset+0xd4>)
 800d9cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9d0:	601a      	str	r2, [r3, #0]
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	e009      	b.n	800d9f0 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	3310      	adds	r3, #16
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7ff feef 	bl	800d7c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	3324      	adds	r3, #36	@ 0x24
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7ff feea 	bl	800d7c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d9f0:	f002 feda 	bl	80107a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d9f4:	2301      	movs	r3, #1
}
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	e000ed04 	.word	0xe000ed04

0800da04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800da04:	b580      	push	{r7, lr}
 800da06:	b08e      	sub	sp, #56	@ 0x38
 800da08:	af02      	add	r7, sp, #8
 800da0a:	60f8      	str	r0, [r7, #12]
 800da0c:	60b9      	str	r1, [r7, #8]
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d10d      	bne.n	800da34 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800da18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1c:	b672      	cpsid	i
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	b662      	cpsie	i
 800da2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800da2e:	bf00      	nop
 800da30:	bf00      	nop
 800da32:	e7fd      	b.n	800da30 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10d      	bne.n	800da56 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da3e:	b672      	cpsid	i
 800da40:	f383 8811 	msr	BASEPRI, r3
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	f3bf 8f4f 	dsb	sy
 800da4c:	b662      	cpsie	i
 800da4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800da50:	bf00      	nop
 800da52:	bf00      	nop
 800da54:	e7fd      	b.n	800da52 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d002      	beq.n	800da62 <xQueueGenericCreateStatic+0x5e>
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d001      	beq.n	800da66 <xQueueGenericCreateStatic+0x62>
 800da62:	2301      	movs	r3, #1
 800da64:	e000      	b.n	800da68 <xQueueGenericCreateStatic+0x64>
 800da66:	2300      	movs	r3, #0
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d10d      	bne.n	800da88 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800da6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da70:	b672      	cpsid	i
 800da72:	f383 8811 	msr	BASEPRI, r3
 800da76:	f3bf 8f6f 	isb	sy
 800da7a:	f3bf 8f4f 	dsb	sy
 800da7e:	b662      	cpsie	i
 800da80:	623b      	str	r3, [r7, #32]
}
 800da82:	bf00      	nop
 800da84:	bf00      	nop
 800da86:	e7fd      	b.n	800da84 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d102      	bne.n	800da94 <xQueueGenericCreateStatic+0x90>
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d101      	bne.n	800da98 <xQueueGenericCreateStatic+0x94>
 800da94:	2301      	movs	r3, #1
 800da96:	e000      	b.n	800da9a <xQueueGenericCreateStatic+0x96>
 800da98:	2300      	movs	r3, #0
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d10d      	bne.n	800daba <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800da9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daa2:	b672      	cpsid	i
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	b662      	cpsie	i
 800dab2:	61fb      	str	r3, [r7, #28]
}
 800dab4:	bf00      	nop
 800dab6:	bf00      	nop
 800dab8:	e7fd      	b.n	800dab6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800daba:	2350      	movs	r3, #80	@ 0x50
 800dabc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b50      	cmp	r3, #80	@ 0x50
 800dac2:	d00d      	beq.n	800dae0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800dac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dac8:	b672      	cpsid	i
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	b662      	cpsie	i
 800dad8:	61bb      	str	r3, [r7, #24]
}
 800dada:	bf00      	nop
 800dadc:	bf00      	nop
 800dade:	e7fd      	b.n	800dadc <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800dae0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800dae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d00d      	beq.n	800db08 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800daec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800daf4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800daf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	4613      	mov	r3, r2
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	68b9      	ldr	r1, [r7, #8]
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f000 f848 	bl	800db98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3730      	adds	r7, #48	@ 0x30
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800db12:	b580      	push	{r7, lr}
 800db14:	b08a      	sub	sp, #40	@ 0x28
 800db16:	af02      	add	r7, sp, #8
 800db18:	60f8      	str	r0, [r7, #12]
 800db1a:	60b9      	str	r1, [r7, #8]
 800db1c:	4613      	mov	r3, r2
 800db1e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d10d      	bne.n	800db42 <xQueueGenericCreate+0x30>
	__asm volatile
 800db26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db2a:	b672      	cpsid	i
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	b662      	cpsie	i
 800db3a:	613b      	str	r3, [r7, #16]
}
 800db3c:	bf00      	nop
 800db3e:	bf00      	nop
 800db40:	e7fd      	b.n	800db3e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d102      	bne.n	800db4e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800db48:	2300      	movs	r3, #0
 800db4a:	61fb      	str	r3, [r7, #28]
 800db4c:	e004      	b.n	800db58 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	fb02 f303 	mul.w	r3, r2, r3
 800db56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800db58:	69fb      	ldr	r3, [r7, #28]
 800db5a:	3350      	adds	r3, #80	@ 0x50
 800db5c:	4618      	mov	r0, r3
 800db5e:	f002 ff1b 	bl	8010998 <pvPortMalloc>
 800db62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800db64:	69bb      	ldr	r3, [r7, #24]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d011      	beq.n	800db8e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800db6a:	69bb      	ldr	r3, [r7, #24]
 800db6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	3350      	adds	r3, #80	@ 0x50
 800db72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800db7c:	79fa      	ldrb	r2, [r7, #7]
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	4613      	mov	r3, r2
 800db84:	697a      	ldr	r2, [r7, #20]
 800db86:	68b9      	ldr	r1, [r7, #8]
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f000 f805 	bl	800db98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800db8e:	69bb      	ldr	r3, [r7, #24]
	}
 800db90:	4618      	mov	r0, r3
 800db92:	3720      	adds	r7, #32
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	60f8      	str	r0, [r7, #12]
 800dba0:	60b9      	str	r1, [r7, #8]
 800dba2:	607a      	str	r2, [r7, #4]
 800dba4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d103      	bne.n	800dbb4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800dbac:	69bb      	ldr	r3, [r7, #24]
 800dbae:	69ba      	ldr	r2, [r7, #24]
 800dbb0:	601a      	str	r2, [r3, #0]
 800dbb2:	e002      	b.n	800dbba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800dbb4:	69bb      	ldr	r3, [r7, #24]
 800dbb6:	687a      	ldr	r2, [r7, #4]
 800dbb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800dbba:	69bb      	ldr	r3, [r7, #24]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	68ba      	ldr	r2, [r7, #8]
 800dbc4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800dbc6:	2101      	movs	r1, #1
 800dbc8:	69b8      	ldr	r0, [r7, #24]
 800dbca:	f7ff feaf 	bl	800d92c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800dbce:	69bb      	ldr	r3, [r7, #24]
 800dbd0:	78fa      	ldrb	r2, [r7, #3]
 800dbd2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800dbd6:	bf00      	nop
 800dbd8:	3710      	adds	r7, #16
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800dbde:	b580      	push	{r7, lr}
 800dbe0:	b082      	sub	sp, #8
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00e      	beq.n	800dc0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800dbfe:	2300      	movs	r3, #0
 800dc00:	2200      	movs	r2, #0
 800dc02:	2100      	movs	r1, #0
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 f91d 	bl	800de44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800dc0a:	bf00      	nop
 800dc0c:	3708      	adds	r7, #8
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b086      	sub	sp, #24
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	4603      	mov	r3, r0
 800dc1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	2300      	movs	r3, #0
 800dc22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800dc24:	79fb      	ldrb	r3, [r7, #7]
 800dc26:	461a      	mov	r2, r3
 800dc28:	6939      	ldr	r1, [r7, #16]
 800dc2a:	6978      	ldr	r0, [r7, #20]
 800dc2c:	f7ff ff71 	bl	800db12 <xQueueGenericCreate>
 800dc30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f7ff ffd3 	bl	800dbde <prvInitialiseMutex>

		return xNewQueue;
 800dc38:	68fb      	ldr	r3, [r7, #12]
	}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3718      	adds	r7, #24
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b088      	sub	sp, #32
 800dc46:	af02      	add	r7, sp, #8
 800dc48:	4603      	mov	r3, r0
 800dc4a:	6039      	str	r1, [r7, #0]
 800dc4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	617b      	str	r3, [r7, #20]
 800dc52:	2300      	movs	r3, #0
 800dc54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800dc56:	79fb      	ldrb	r3, [r7, #7]
 800dc58:	9300      	str	r3, [sp, #0]
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	6939      	ldr	r1, [r7, #16]
 800dc60:	6978      	ldr	r0, [r7, #20]
 800dc62:	f7ff fecf 	bl	800da04 <xQueueGenericCreateStatic>
 800dc66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800dc68:	68f8      	ldr	r0, [r7, #12]
 800dc6a:	f7ff ffb8 	bl	800dbde <prvInitialiseMutex>

		return xNewQueue;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3718      	adds	r7, #24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}

0800dc78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800dc78:	b590      	push	{r4, r7, lr}
 800dc7a:	b087      	sub	sp, #28
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10d      	bne.n	800dca6 <xQueueGiveMutexRecursive+0x2e>
	__asm volatile
 800dc8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc8e:	b672      	cpsid	i
 800dc90:	f383 8811 	msr	BASEPRI, r3
 800dc94:	f3bf 8f6f 	isb	sy
 800dc98:	f3bf 8f4f 	dsb	sy
 800dc9c:	b662      	cpsie	i
 800dc9e:	60fb      	str	r3, [r7, #12]
}
 800dca0:	bf00      	nop
 800dca2:	bf00      	nop
 800dca4:	e7fd      	b.n	800dca2 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	689c      	ldr	r4, [r3, #8]
 800dcaa:	f001 fed5 	bl	800fa58 <xTaskGetCurrentTaskHandle>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	429c      	cmp	r4, r3
 800dcb2:	d111      	bne.n	800dcd8 <xQueueGiveMutexRecursive+0x60>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	1e5a      	subs	r2, r3, #1
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800dcbe:	693b      	ldr	r3, [r7, #16]
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d105      	bne.n	800dcd2 <xQueueGiveMutexRecursive+0x5a>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	2200      	movs	r2, #0
 800dcca:	2100      	movs	r1, #0
 800dccc:	6938      	ldr	r0, [r7, #16]
 800dcce:	f000 f8b9 	bl	800de44 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	617b      	str	r3, [r7, #20]
 800dcd6:	e001      	b.n	800dcdc <xQueueGiveMutexRecursive+0x64>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800dcdc:	697b      	ldr	r3, [r7, #20]
	}
 800dcde:	4618      	mov	r0, r3
 800dce0:	371c      	adds	r7, #28
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd90      	pop	{r4, r7, pc}

0800dce6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800dce6:	b590      	push	{r4, r7, lr}
 800dce8:	b087      	sub	sp, #28
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10d      	bne.n	800dd16 <xQueueTakeMutexRecursive+0x30>
	__asm volatile
 800dcfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcfe:	b672      	cpsid	i
 800dd00:	f383 8811 	msr	BASEPRI, r3
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	f3bf 8f4f 	dsb	sy
 800dd0c:	b662      	cpsie	i
 800dd0e:	60fb      	str	r3, [r7, #12]
}
 800dd10:	bf00      	nop
 800dd12:	bf00      	nop
 800dd14:	e7fd      	b.n	800dd12 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	689c      	ldr	r4, [r3, #8]
 800dd1a:	f001 fe9d 	bl	800fa58 <xTaskGetCurrentTaskHandle>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	429c      	cmp	r4, r3
 800dd22:	d107      	bne.n	800dd34 <xQueueTakeMutexRecursive+0x4e>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dd24:	693b      	ldr	r3, [r7, #16]
 800dd26:	68db      	ldr	r3, [r3, #12]
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800dd2e:	2301      	movs	r3, #1
 800dd30:	617b      	str	r3, [r7, #20]
 800dd32:	e00c      	b.n	800dd4e <xQueueTakeMutexRecursive+0x68>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800dd34:	6839      	ldr	r1, [r7, #0]
 800dd36:	6938      	ldr	r0, [r7, #16]
 800dd38:	f000 fbb2 	bl	800e4a0 <xQueueSemaphoreTake>
 800dd3c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d004      	beq.n	800dd4e <xQueueTakeMutexRecursive+0x68>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800dd4e:	697b      	ldr	r3, [r7, #20]
	}
 800dd50:	4618      	mov	r0, r3
 800dd52:	371c      	adds	r7, #28
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd90      	pop	{r4, r7, pc}

0800dd58 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08a      	sub	sp, #40	@ 0x28
 800dd5c:	af02      	add	r7, sp, #8
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d10d      	bne.n	800dd86 <xQueueCreateCountingSemaphoreStatic+0x2e>
	__asm volatile
 800dd6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd6e:	b672      	cpsid	i
 800dd70:	f383 8811 	msr	BASEPRI, r3
 800dd74:	f3bf 8f6f 	isb	sy
 800dd78:	f3bf 8f4f 	dsb	sy
 800dd7c:	b662      	cpsie	i
 800dd7e:	61bb      	str	r3, [r7, #24]
}
 800dd80:	bf00      	nop
 800dd82:	bf00      	nop
 800dd84:	e7fd      	b.n	800dd82 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d90d      	bls.n	800ddaa <xQueueCreateCountingSemaphoreStatic+0x52>
	__asm volatile
 800dd8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd92:	b672      	cpsid	i
 800dd94:	f383 8811 	msr	BASEPRI, r3
 800dd98:	f3bf 8f6f 	isb	sy
 800dd9c:	f3bf 8f4f 	dsb	sy
 800dda0:	b662      	cpsie	i
 800dda2:	617b      	str	r3, [r7, #20]
}
 800dda4:	bf00      	nop
 800dda6:	bf00      	nop
 800dda8:	e7fd      	b.n	800dda6 <xQueueCreateCountingSemaphoreStatic+0x4e>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ddaa:	2302      	movs	r3, #2
 800ddac:	9300      	str	r3, [sp, #0]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	2100      	movs	r1, #0
 800ddb4:	68f8      	ldr	r0, [r7, #12]
 800ddb6:	f7ff fe25 	bl	800da04 <xQueueGenericCreateStatic>
 800ddba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d002      	beq.n	800ddc8 <xQueueCreateCountingSemaphoreStatic+0x70>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ddc8:	69fb      	ldr	r3, [r7, #28]
	}
 800ddca:	4618      	mov	r0, r3
 800ddcc:	3720      	adds	r7, #32
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}

0800ddd2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ddd2:	b580      	push	{r7, lr}
 800ddd4:	b086      	sub	sp, #24
 800ddd6:	af00      	add	r7, sp, #0
 800ddd8:	6078      	str	r0, [r7, #4]
 800ddda:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10d      	bne.n	800ddfe <xQueueCreateCountingSemaphore+0x2c>
	__asm volatile
 800dde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dde6:	b672      	cpsid	i
 800dde8:	f383 8811 	msr	BASEPRI, r3
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f3bf 8f4f 	dsb	sy
 800ddf4:	b662      	cpsie	i
 800ddf6:	613b      	str	r3, [r7, #16]
}
 800ddf8:	bf00      	nop
 800ddfa:	bf00      	nop
 800ddfc:	e7fd      	b.n	800ddfa <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	429a      	cmp	r2, r3
 800de04:	d90d      	bls.n	800de22 <xQueueCreateCountingSemaphore+0x50>
	__asm volatile
 800de06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de0a:	b672      	cpsid	i
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	b662      	cpsie	i
 800de1a:	60fb      	str	r3, [r7, #12]
}
 800de1c:	bf00      	nop
 800de1e:	bf00      	nop
 800de20:	e7fd      	b.n	800de1e <xQueueCreateCountingSemaphore+0x4c>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800de22:	2202      	movs	r2, #2
 800de24:	2100      	movs	r1, #0
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff fe73 	bl	800db12 <xQueueGenericCreate>
 800de2c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <xQueueCreateCountingSemaphore+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800de34:	697b      	ldr	r3, [r7, #20]
 800de36:	683a      	ldr	r2, [r7, #0]
 800de38:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800de3a:	697b      	ldr	r3, [r7, #20]
	}
 800de3c:	4618      	mov	r0, r3
 800de3e:	3718      	adds	r7, #24
 800de40:	46bd      	mov	sp, r7
 800de42:	bd80      	pop	{r7, pc}

0800de44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b08e      	sub	sp, #56	@ 0x38
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
 800de50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800de52:	2300      	movs	r3, #0
 800de54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800de5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d10d      	bne.n	800de7c <xQueueGenericSend+0x38>
	__asm volatile
 800de60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de64:	b672      	cpsid	i
 800de66:	f383 8811 	msr	BASEPRI, r3
 800de6a:	f3bf 8f6f 	isb	sy
 800de6e:	f3bf 8f4f 	dsb	sy
 800de72:	b662      	cpsie	i
 800de74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800de76:	bf00      	nop
 800de78:	bf00      	nop
 800de7a:	e7fd      	b.n	800de78 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d103      	bne.n	800de8a <xQueueGenericSend+0x46>
 800de82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de86:	2b00      	cmp	r3, #0
 800de88:	d101      	bne.n	800de8e <xQueueGenericSend+0x4a>
 800de8a:	2301      	movs	r3, #1
 800de8c:	e000      	b.n	800de90 <xQueueGenericSend+0x4c>
 800de8e:	2300      	movs	r3, #0
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10d      	bne.n	800deb0 <xQueueGenericSend+0x6c>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de98:	b672      	cpsid	i
 800de9a:	f383 8811 	msr	BASEPRI, r3
 800de9e:	f3bf 8f6f 	isb	sy
 800dea2:	f3bf 8f4f 	dsb	sy
 800dea6:	b662      	cpsie	i
 800dea8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	e7fd      	b.n	800deac <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d103      	bne.n	800debe <xQueueGenericSend+0x7a>
 800deb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800deb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800deba:	2b01      	cmp	r3, #1
 800debc:	d101      	bne.n	800dec2 <xQueueGenericSend+0x7e>
 800debe:	2301      	movs	r3, #1
 800dec0:	e000      	b.n	800dec4 <xQueueGenericSend+0x80>
 800dec2:	2300      	movs	r3, #0
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d10d      	bne.n	800dee4 <xQueueGenericSend+0xa0>
	__asm volatile
 800dec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800decc:	b672      	cpsid	i
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	b662      	cpsie	i
 800dedc:	623b      	str	r3, [r7, #32]
}
 800dede:	bf00      	nop
 800dee0:	bf00      	nop
 800dee2:	e7fd      	b.n	800dee0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dee4:	f001 fdc8 	bl	800fa78 <xTaskGetSchedulerState>
 800dee8:	4603      	mov	r3, r0
 800deea:	2b00      	cmp	r3, #0
 800deec:	d102      	bne.n	800def4 <xQueueGenericSend+0xb0>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <xQueueGenericSend+0xb4>
 800def4:	2301      	movs	r3, #1
 800def6:	e000      	b.n	800defa <xQueueGenericSend+0xb6>
 800def8:	2300      	movs	r3, #0
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10d      	bne.n	800df1a <xQueueGenericSend+0xd6>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df02:	b672      	cpsid	i
 800df04:	f383 8811 	msr	BASEPRI, r3
 800df08:	f3bf 8f6f 	isb	sy
 800df0c:	f3bf 8f4f 	dsb	sy
 800df10:	b662      	cpsie	i
 800df12:	61fb      	str	r3, [r7, #28]
}
 800df14:	bf00      	nop
 800df16:	bf00      	nop
 800df18:	e7fd      	b.n	800df16 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800df1a:	f002 fc0f 	bl	801073c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800df1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800df26:	429a      	cmp	r2, r3
 800df28:	d302      	bcc.n	800df30 <xQueueGenericSend+0xec>
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	2b02      	cmp	r3, #2
 800df2e:	d129      	bne.n	800df84 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	68b9      	ldr	r1, [r7, #8]
 800df34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df36:	f000 fcd3 	bl	800e8e0 <prvCopyDataToQueue>
 800df3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800df3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	d010      	beq.n	800df66 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800df44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df46:	3324      	adds	r3, #36	@ 0x24
 800df48:	4618      	mov	r0, r3
 800df4a:	f001 fbb7 	bl	800f6bc <xTaskRemoveFromEventList>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d013      	beq.n	800df7c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800df54:	4b3f      	ldr	r3, [pc, #252]	@ (800e054 <xQueueGenericSend+0x210>)
 800df56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df5a:	601a      	str	r2, [r3, #0]
 800df5c:	f3bf 8f4f 	dsb	sy
 800df60:	f3bf 8f6f 	isb	sy
 800df64:	e00a      	b.n	800df7c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800df66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d007      	beq.n	800df7c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800df6c:	4b39      	ldr	r3, [pc, #228]	@ (800e054 <xQueueGenericSend+0x210>)
 800df6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df72:	601a      	str	r2, [r3, #0]
 800df74:	f3bf 8f4f 	dsb	sy
 800df78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800df7c:	f002 fc14 	bl	80107a8 <vPortExitCritical>
				return pdPASS;
 800df80:	2301      	movs	r3, #1
 800df82:	e063      	b.n	800e04c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d103      	bne.n	800df92 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800df8a:	f002 fc0d 	bl	80107a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800df8e:	2300      	movs	r3, #0
 800df90:	e05c      	b.n	800e04c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800df92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df94:	2b00      	cmp	r3, #0
 800df96:	d106      	bne.n	800dfa6 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800df98:	f107 0314 	add.w	r3, r7, #20
 800df9c:	4618      	mov	r0, r3
 800df9e:	f001 fbf3 	bl	800f788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dfa6:	f002 fbff 	bl	80107a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dfaa:	f001 f919 	bl	800f1e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dfae:	f002 fbc5 	bl	801073c <vPortEnterCritical>
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dfb8:	b25b      	sxtb	r3, r3
 800dfba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfbe:	d103      	bne.n	800dfc8 <xQueueGenericSend+0x184>
 800dfc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dfc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dfce:	b25b      	sxtb	r3, r3
 800dfd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfd4:	d103      	bne.n	800dfde <xQueueGenericSend+0x19a>
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dfde:	f002 fbe3 	bl	80107a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dfe2:	1d3a      	adds	r2, r7, #4
 800dfe4:	f107 0314 	add.w	r3, r7, #20
 800dfe8:	4611      	mov	r1, r2
 800dfea:	4618      	mov	r0, r3
 800dfec:	f001 fbe2 	bl	800f7b4 <xTaskCheckForTimeOut>
 800dff0:	4603      	mov	r3, r0
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d124      	bne.n	800e040 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800dff6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800dff8:	f000 fd6a 	bl	800ead0 <prvIsQueueFull>
 800dffc:	4603      	mov	r3, r0
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d018      	beq.n	800e034 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e004:	3310      	adds	r3, #16
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	4611      	mov	r1, r2
 800e00a:	4618      	mov	r0, r3
 800e00c:	f001 fb00 	bl	800f610 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e010:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e012:	f000 fcf5 	bl	800ea00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e016:	f001 f8f1 	bl	800f1fc <xTaskResumeAll>
 800e01a:	4603      	mov	r3, r0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	f47f af7c 	bne.w	800df1a <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800e022:	4b0c      	ldr	r3, [pc, #48]	@ (800e054 <xQueueGenericSend+0x210>)
 800e024:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e028:	601a      	str	r2, [r3, #0]
 800e02a:	f3bf 8f4f 	dsb	sy
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	e772      	b.n	800df1a <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e036:	f000 fce3 	bl	800ea00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e03a:	f001 f8df 	bl	800f1fc <xTaskResumeAll>
 800e03e:	e76c      	b.n	800df1a <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e040:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e042:	f000 fcdd 	bl	800ea00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e046:	f001 f8d9 	bl	800f1fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e04a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3738      	adds	r7, #56	@ 0x38
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}
 800e054:	e000ed04 	.word	0xe000ed04

0800e058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b08e      	sub	sp, #56	@ 0x38
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
 800e064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d10d      	bne.n	800e08c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800e070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e074:	b672      	cpsid	i
 800e076:	f383 8811 	msr	BASEPRI, r3
 800e07a:	f3bf 8f6f 	isb	sy
 800e07e:	f3bf 8f4f 	dsb	sy
 800e082:	b662      	cpsie	i
 800e084:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800e086:	bf00      	nop
 800e088:	bf00      	nop
 800e08a:	e7fd      	b.n	800e088 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d103      	bne.n	800e09a <xQueueGenericSendFromISR+0x42>
 800e092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <xQueueGenericSendFromISR+0x46>
 800e09a:	2301      	movs	r3, #1
 800e09c:	e000      	b.n	800e0a0 <xQueueGenericSendFromISR+0x48>
 800e09e:	2300      	movs	r3, #0
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d10d      	bne.n	800e0c0 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800e0a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0a8:	b672      	cpsid	i
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	b662      	cpsie	i
 800e0b8:	623b      	str	r3, [r7, #32]
}
 800e0ba:	bf00      	nop
 800e0bc:	bf00      	nop
 800e0be:	e7fd      	b.n	800e0bc <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d103      	bne.n	800e0ce <xQueueGenericSendFromISR+0x76>
 800e0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d101      	bne.n	800e0d2 <xQueueGenericSendFromISR+0x7a>
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e000      	b.n	800e0d4 <xQueueGenericSendFromISR+0x7c>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d10d      	bne.n	800e0f4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800e0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0dc:	b672      	cpsid	i
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
 800e0ea:	b662      	cpsie	i
 800e0ec:	61fb      	str	r3, [r7, #28]
}
 800e0ee:	bf00      	nop
 800e0f0:	bf00      	nop
 800e0f2:	e7fd      	b.n	800e0f0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e0f4:	f002 fc0a 	bl	801090c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e0f8:	f3ef 8211 	mrs	r2, BASEPRI
 800e0fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e100:	b672      	cpsid	i
 800e102:	f383 8811 	msr	BASEPRI, r3
 800e106:	f3bf 8f6f 	isb	sy
 800e10a:	f3bf 8f4f 	dsb	sy
 800e10e:	b662      	cpsie	i
 800e110:	61ba      	str	r2, [r7, #24]
 800e112:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e114:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e116:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e120:	429a      	cmp	r2, r3
 800e122:	d302      	bcc.n	800e12a <xQueueGenericSendFromISR+0xd2>
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	2b02      	cmp	r3, #2
 800e128:	d12c      	bne.n	800e184 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e130:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e134:	683a      	ldr	r2, [r7, #0]
 800e136:	68b9      	ldr	r1, [r7, #8]
 800e138:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e13a:	f000 fbd1 	bl	800e8e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e13e:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800e142:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e146:	d112      	bne.n	800e16e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d016      	beq.n	800e17e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e152:	3324      	adds	r3, #36	@ 0x24
 800e154:	4618      	mov	r0, r3
 800e156:	f001 fab1 	bl	800f6bc <xTaskRemoveFromEventList>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00e      	beq.n	800e17e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d00b      	beq.n	800e17e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2201      	movs	r2, #1
 800e16a:	601a      	str	r2, [r3, #0]
 800e16c:	e007      	b.n	800e17e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e16e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800e172:	3301      	adds	r3, #1
 800e174:	b2db      	uxtb	r3, r3
 800e176:	b25a      	sxtb	r2, r3
 800e178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e17e:	2301      	movs	r3, #1
 800e180:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800e182:	e001      	b.n	800e188 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e184:	2300      	movs	r3, #0
 800e186:	637b      	str	r3, [r7, #52]	@ 0x34
 800e188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e18a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e192:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e196:	4618      	mov	r0, r3
 800e198:	3738      	adds	r7, #56	@ 0x38
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b08e      	sub	sp, #56	@ 0x38
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	6078      	str	r0, [r7, #4]
 800e1a6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10d      	bne.n	800e1ce <xQueueGiveFromISR+0x30>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1b6:	b672      	cpsid	i
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	b662      	cpsie	i
 800e1c6:	623b      	str	r3, [r7, #32]
}
 800e1c8:	bf00      	nop
 800e1ca:	bf00      	nop
 800e1cc:	e7fd      	b.n	800e1ca <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00d      	beq.n	800e1f2 <xQueueGiveFromISR+0x54>
	__asm volatile
 800e1d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1da:	b672      	cpsid	i
 800e1dc:	f383 8811 	msr	BASEPRI, r3
 800e1e0:	f3bf 8f6f 	isb	sy
 800e1e4:	f3bf 8f4f 	dsb	sy
 800e1e8:	b662      	cpsie	i
 800e1ea:	61fb      	str	r3, [r7, #28]
}
 800e1ec:	bf00      	nop
 800e1ee:	bf00      	nop
 800e1f0:	e7fd      	b.n	800e1ee <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d103      	bne.n	800e202 <xQueueGiveFromISR+0x64>
 800e1fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1fc:	689b      	ldr	r3, [r3, #8]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d101      	bne.n	800e206 <xQueueGiveFromISR+0x68>
 800e202:	2301      	movs	r3, #1
 800e204:	e000      	b.n	800e208 <xQueueGiveFromISR+0x6a>
 800e206:	2300      	movs	r3, #0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10d      	bne.n	800e228 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e210:	b672      	cpsid	i
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	b662      	cpsie	i
 800e220:	61bb      	str	r3, [r7, #24]
}
 800e222:	bf00      	nop
 800e224:	bf00      	nop
 800e226:	e7fd      	b.n	800e224 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e228:	f002 fb70 	bl	801090c <vPortValidateInterruptPriority>
	__asm volatile
 800e22c:	f3ef 8211 	mrs	r2, BASEPRI
 800e230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e234:	b672      	cpsid	i
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	b662      	cpsie	i
 800e244:	617a      	str	r2, [r7, #20]
 800e246:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e248:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e24a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e24c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e24e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e250:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e254:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e258:	429a      	cmp	r2, r3
 800e25a:	d22b      	bcs.n	800e2b4 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e25e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e262:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e268:	1c5a      	adds	r2, r3, #1
 800e26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e26c:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e26e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e276:	d112      	bne.n	800e29e <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d016      	beq.n	800e2ae <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e282:	3324      	adds	r3, #36	@ 0x24
 800e284:	4618      	mov	r0, r3
 800e286:	f001 fa19 	bl	800f6bc <xTaskRemoveFromEventList>
 800e28a:	4603      	mov	r3, r0
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d00e      	beq.n	800e2ae <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00b      	beq.n	800e2ae <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	2201      	movs	r2, #1
 800e29a:	601a      	str	r2, [r3, #0]
 800e29c:	e007      	b.n	800e2ae <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e29e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	b25a      	sxtb	r2, r3
 800e2a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2b2:	e001      	b.n	800e2b8 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e2b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ba:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f383 8811 	msr	BASEPRI, r3
}
 800e2c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	3738      	adds	r7, #56	@ 0x38
 800e2ca:	46bd      	mov	sp, r7
 800e2cc:	bd80      	pop	{r7, pc}
	...

0800e2d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b08c      	sub	sp, #48	@ 0x30
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	60f8      	str	r0, [r7, #12]
 800e2d8:	60b9      	str	r1, [r7, #8]
 800e2da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e2e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10d      	bne.n	800e306 <xQueueReceive+0x36>
	__asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2ee:	b672      	cpsid	i
 800e2f0:	f383 8811 	msr	BASEPRI, r3
 800e2f4:	f3bf 8f6f 	isb	sy
 800e2f8:	f3bf 8f4f 	dsb	sy
 800e2fc:	b662      	cpsie	i
 800e2fe:	623b      	str	r3, [r7, #32]
}
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	e7fd      	b.n	800e302 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e306:	68bb      	ldr	r3, [r7, #8]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d103      	bne.n	800e314 <xQueueReceive+0x44>
 800e30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e310:	2b00      	cmp	r3, #0
 800e312:	d101      	bne.n	800e318 <xQueueReceive+0x48>
 800e314:	2301      	movs	r3, #1
 800e316:	e000      	b.n	800e31a <xQueueReceive+0x4a>
 800e318:	2300      	movs	r3, #0
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d10d      	bne.n	800e33a <xQueueReceive+0x6a>
	__asm volatile
 800e31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e322:	b672      	cpsid	i
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	b662      	cpsie	i
 800e332:	61fb      	str	r3, [r7, #28]
}
 800e334:	bf00      	nop
 800e336:	bf00      	nop
 800e338:	e7fd      	b.n	800e336 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e33a:	f001 fb9d 	bl	800fa78 <xTaskGetSchedulerState>
 800e33e:	4603      	mov	r3, r0
 800e340:	2b00      	cmp	r3, #0
 800e342:	d102      	bne.n	800e34a <xQueueReceive+0x7a>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d101      	bne.n	800e34e <xQueueReceive+0x7e>
 800e34a:	2301      	movs	r3, #1
 800e34c:	e000      	b.n	800e350 <xQueueReceive+0x80>
 800e34e:	2300      	movs	r3, #0
 800e350:	2b00      	cmp	r3, #0
 800e352:	d10d      	bne.n	800e370 <xQueueReceive+0xa0>
	__asm volatile
 800e354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e358:	b672      	cpsid	i
 800e35a:	f383 8811 	msr	BASEPRI, r3
 800e35e:	f3bf 8f6f 	isb	sy
 800e362:	f3bf 8f4f 	dsb	sy
 800e366:	b662      	cpsie	i
 800e368:	61bb      	str	r3, [r7, #24]
}
 800e36a:	bf00      	nop
 800e36c:	bf00      	nop
 800e36e:	e7fd      	b.n	800e36c <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e370:	f002 f9e4 	bl	801073c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e378:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e37a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d01f      	beq.n	800e3c0 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e380:	68b9      	ldr	r1, [r7, #8]
 800e382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e384:	f000 fb16 	bl	800e9b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38a:	1e5a      	subs	r2, r3, #1
 800e38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e392:	691b      	ldr	r3, [r3, #16]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d00f      	beq.n	800e3b8 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39a:	3310      	adds	r3, #16
 800e39c:	4618      	mov	r0, r3
 800e39e:	f001 f98d 	bl	800f6bc <xTaskRemoveFromEventList>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d007      	beq.n	800e3b8 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e3a8:	4b3c      	ldr	r3, [pc, #240]	@ (800e49c <xQueueReceive+0x1cc>)
 800e3aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3ae:	601a      	str	r2, [r3, #0]
 800e3b0:	f3bf 8f4f 	dsb	sy
 800e3b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e3b8:	f002 f9f6 	bl	80107a8 <vPortExitCritical>
				return pdPASS;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	e069      	b.n	800e494 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d103      	bne.n	800e3ce <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e3c6:	f002 f9ef 	bl	80107a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	e062      	b.n	800e494 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e3ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d106      	bne.n	800e3e2 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e3d4:	f107 0310 	add.w	r3, r7, #16
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f001 f9d5 	bl	800f788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e3de:	2301      	movs	r3, #1
 800e3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e3e2:	f002 f9e1 	bl	80107a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e3e6:	f000 fefb 	bl	800f1e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e3ea:	f002 f9a7 	bl	801073c <vPortEnterCritical>
 800e3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e3f4:	b25b      	sxtb	r3, r3
 800e3f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3fa:	d103      	bne.n	800e404 <xQueueReceive+0x134>
 800e3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3fe:	2200      	movs	r2, #0
 800e400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e40a:	b25b      	sxtb	r3, r3
 800e40c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e410:	d103      	bne.n	800e41a <xQueueReceive+0x14a>
 800e412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e414:	2200      	movs	r2, #0
 800e416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e41a:	f002 f9c5 	bl	80107a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e41e:	1d3a      	adds	r2, r7, #4
 800e420:	f107 0310 	add.w	r3, r7, #16
 800e424:	4611      	mov	r1, r2
 800e426:	4618      	mov	r0, r3
 800e428:	f001 f9c4 	bl	800f7b4 <xTaskCheckForTimeOut>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d123      	bne.n	800e47a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e434:	f000 fb36 	bl	800eaa4 <prvIsQueueEmpty>
 800e438:	4603      	mov	r3, r0
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d017      	beq.n	800e46e <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e440:	3324      	adds	r3, #36	@ 0x24
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	4611      	mov	r1, r2
 800e446:	4618      	mov	r0, r3
 800e448:	f001 f8e2 	bl	800f610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e44c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e44e:	f000 fad7 	bl	800ea00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e452:	f000 fed3 	bl	800f1fc <xTaskResumeAll>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d189      	bne.n	800e370 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 800e45c:	4b0f      	ldr	r3, [pc, #60]	@ (800e49c <xQueueReceive+0x1cc>)
 800e45e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e462:	601a      	str	r2, [r3, #0]
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	f3bf 8f6f 	isb	sy
 800e46c:	e780      	b.n	800e370 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800e46e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e470:	f000 fac6 	bl	800ea00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e474:	f000 fec2 	bl	800f1fc <xTaskResumeAll>
 800e478:	e77a      	b.n	800e370 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800e47a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e47c:	f000 fac0 	bl	800ea00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e480:	f000 febc 	bl	800f1fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e486:	f000 fb0d 	bl	800eaa4 <prvIsQueueEmpty>
 800e48a:	4603      	mov	r3, r0
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f43f af6f 	beq.w	800e370 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e492:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e494:	4618      	mov	r0, r3
 800e496:	3730      	adds	r7, #48	@ 0x30
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}
 800e49c:	e000ed04 	.word	0xe000ed04

0800e4a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b08e      	sub	sp, #56	@ 0x38
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e4b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10d      	bne.n	800e4d8 <xQueueSemaphoreTake+0x38>
	__asm volatile
 800e4bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4c0:	b672      	cpsid	i
 800e4c2:	f383 8811 	msr	BASEPRI, r3
 800e4c6:	f3bf 8f6f 	isb	sy
 800e4ca:	f3bf 8f4f 	dsb	sy
 800e4ce:	b662      	cpsie	i
 800e4d0:	623b      	str	r3, [r7, #32]
}
 800e4d2:	bf00      	nop
 800e4d4:	bf00      	nop
 800e4d6:	e7fd      	b.n	800e4d4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e4d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00d      	beq.n	800e4fc <xQueueSemaphoreTake+0x5c>
	__asm volatile
 800e4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4e4:	b672      	cpsid	i
 800e4e6:	f383 8811 	msr	BASEPRI, r3
 800e4ea:	f3bf 8f6f 	isb	sy
 800e4ee:	f3bf 8f4f 	dsb	sy
 800e4f2:	b662      	cpsie	i
 800e4f4:	61fb      	str	r3, [r7, #28]
}
 800e4f6:	bf00      	nop
 800e4f8:	bf00      	nop
 800e4fa:	e7fd      	b.n	800e4f8 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4fc:	f001 fabc 	bl	800fa78 <xTaskGetSchedulerState>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d102      	bne.n	800e50c <xQueueSemaphoreTake+0x6c>
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d101      	bne.n	800e510 <xQueueSemaphoreTake+0x70>
 800e50c:	2301      	movs	r3, #1
 800e50e:	e000      	b.n	800e512 <xQueueSemaphoreTake+0x72>
 800e510:	2300      	movs	r3, #0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d10d      	bne.n	800e532 <xQueueSemaphoreTake+0x92>
	__asm volatile
 800e516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e51a:	b672      	cpsid	i
 800e51c:	f383 8811 	msr	BASEPRI, r3
 800e520:	f3bf 8f6f 	isb	sy
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	b662      	cpsie	i
 800e52a:	61bb      	str	r3, [r7, #24]
}
 800e52c:	bf00      	nop
 800e52e:	bf00      	nop
 800e530:	e7fd      	b.n	800e52e <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e532:	f002 f903 	bl	801073c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e53a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e53c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d024      	beq.n	800e58c <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e544:	1e5a      	subs	r2, r3, #1
 800e546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e548:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e54a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2b00      	cmp	r3, #0
 800e550:	d104      	bne.n	800e55c <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e552:	f001 fc13 	bl	800fd7c <pvTaskIncrementMutexHeldCount>
 800e556:	4602      	mov	r2, r0
 800e558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e55c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e55e:	691b      	ldr	r3, [r3, #16]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d00f      	beq.n	800e584 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e566:	3310      	adds	r3, #16
 800e568:	4618      	mov	r0, r3
 800e56a:	f001 f8a7 	bl	800f6bc <xTaskRemoveFromEventList>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d007      	beq.n	800e584 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e574:	4b55      	ldr	r3, [pc, #340]	@ (800e6cc <xQueueSemaphoreTake+0x22c>)
 800e576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e57a:	601a      	str	r2, [r3, #0]
 800e57c:	f3bf 8f4f 	dsb	sy
 800e580:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e584:	f002 f910 	bl	80107a8 <vPortExitCritical>
				return pdPASS;
 800e588:	2301      	movs	r3, #1
 800e58a:	e09a      	b.n	800e6c2 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d114      	bne.n	800e5bc <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e594:	2b00      	cmp	r3, #0
 800e596:	d00d      	beq.n	800e5b4 <xQueueSemaphoreTake+0x114>
	__asm volatile
 800e598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e59c:	b672      	cpsid	i
 800e59e:	f383 8811 	msr	BASEPRI, r3
 800e5a2:	f3bf 8f6f 	isb	sy
 800e5a6:	f3bf 8f4f 	dsb	sy
 800e5aa:	b662      	cpsie	i
 800e5ac:	617b      	str	r3, [r7, #20]
}
 800e5ae:	bf00      	nop
 800e5b0:	bf00      	nop
 800e5b2:	e7fd      	b.n	800e5b0 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e5b4:	f002 f8f8 	bl	80107a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	e082      	b.n	800e6c2 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d106      	bne.n	800e5d0 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e5c2:	f107 030c 	add.w	r3, r7, #12
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f001 f8de 	bl	800f788 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5d0:	f002 f8ea 	bl	80107a8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5d4:	f000 fe04 	bl	800f1e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5d8:	f002 f8b0 	bl	801073c <vPortEnterCritical>
 800e5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e5e2:	b25b      	sxtb	r3, r3
 800e5e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5e8:	d103      	bne.n	800e5f2 <xQueueSemaphoreTake+0x152>
 800e5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e5f8:	b25b      	sxtb	r3, r3
 800e5fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e5fe:	d103      	bne.n	800e608 <xQueueSemaphoreTake+0x168>
 800e600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e602:	2200      	movs	r2, #0
 800e604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e608:	f002 f8ce 	bl	80107a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e60c:	463a      	mov	r2, r7
 800e60e:	f107 030c 	add.w	r3, r7, #12
 800e612:	4611      	mov	r1, r2
 800e614:	4618      	mov	r0, r3
 800e616:	f001 f8cd 	bl	800f7b4 <xTaskCheckForTimeOut>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d132      	bne.n	800e686 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e620:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e622:	f000 fa3f 	bl	800eaa4 <prvIsQueueEmpty>
 800e626:	4603      	mov	r3, r0
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d026      	beq.n	800e67a <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e62c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d109      	bne.n	800e648 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 800e634:	f002 f882 	bl	801073c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63a:	689b      	ldr	r3, [r3, #8]
 800e63c:	4618      	mov	r0, r3
 800e63e:	f001 fa39 	bl	800fab4 <xTaskPriorityInherit>
 800e642:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800e644:	f002 f8b0 	bl	80107a8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e64a:	3324      	adds	r3, #36	@ 0x24
 800e64c:	683a      	ldr	r2, [r7, #0]
 800e64e:	4611      	mov	r1, r2
 800e650:	4618      	mov	r0, r3
 800e652:	f000 ffdd 	bl	800f610 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e656:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e658:	f000 f9d2 	bl	800ea00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e65c:	f000 fdce 	bl	800f1fc <xTaskResumeAll>
 800e660:	4603      	mov	r3, r0
 800e662:	2b00      	cmp	r3, #0
 800e664:	f47f af65 	bne.w	800e532 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 800e668:	4b18      	ldr	r3, [pc, #96]	@ (800e6cc <xQueueSemaphoreTake+0x22c>)
 800e66a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e66e:	601a      	str	r2, [r3, #0]
 800e670:	f3bf 8f4f 	dsb	sy
 800e674:	f3bf 8f6f 	isb	sy
 800e678:	e75b      	b.n	800e532 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800e67a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e67c:	f000 f9c0 	bl	800ea00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e680:	f000 fdbc 	bl	800f1fc <xTaskResumeAll>
 800e684:	e755      	b.n	800e532 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800e686:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e688:	f000 f9ba 	bl	800ea00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e68c:	f000 fdb6 	bl	800f1fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e690:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e692:	f000 fa07 	bl	800eaa4 <prvIsQueueEmpty>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	f43f af4a 	beq.w	800e532 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800e69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d00d      	beq.n	800e6c0 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 800e6a4:	f002 f84a 	bl	801073c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800e6a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6aa:	f000 f901 	bl	800e8b0 <prvGetDisinheritPriorityAfterTimeout>
 800e6ae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800e6b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f001 fad8 	bl	800fc6c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800e6bc:	f002 f874 	bl	80107a8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800e6c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3738      	adds	r7, #56	@ 0x38
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	e000ed04 	.word	0xe000ed04

0800e6d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b08e      	sub	sp, #56	@ 0x38
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60f8      	str	r0, [r7, #12]
 800e6d8:	60b9      	str	r1, [r7, #8]
 800e6da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800e6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10d      	bne.n	800e702 <xQueueReceiveFromISR+0x32>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ea:	b672      	cpsid	i
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	b662      	cpsie	i
 800e6fa:	623b      	str	r3, [r7, #32]
}
 800e6fc:	bf00      	nop
 800e6fe:	bf00      	nop
 800e700:	e7fd      	b.n	800e6fe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d103      	bne.n	800e710 <xQueueReceiveFromISR+0x40>
 800e708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e70a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d101      	bne.n	800e714 <xQueueReceiveFromISR+0x44>
 800e710:	2301      	movs	r3, #1
 800e712:	e000      	b.n	800e716 <xQueueReceiveFromISR+0x46>
 800e714:	2300      	movs	r3, #0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d10d      	bne.n	800e736 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800e71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e71e:	b672      	cpsid	i
 800e720:	f383 8811 	msr	BASEPRI, r3
 800e724:	f3bf 8f6f 	isb	sy
 800e728:	f3bf 8f4f 	dsb	sy
 800e72c:	b662      	cpsie	i
 800e72e:	61fb      	str	r3, [r7, #28]
}
 800e730:	bf00      	nop
 800e732:	bf00      	nop
 800e734:	e7fd      	b.n	800e732 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e736:	f002 f8e9 	bl	801090c <vPortValidateInterruptPriority>
	__asm volatile
 800e73a:	f3ef 8211 	mrs	r2, BASEPRI
 800e73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e742:	b672      	cpsid	i
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	b662      	cpsie	i
 800e752:	61ba      	str	r2, [r7, #24]
 800e754:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800e756:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e758:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e75c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e75e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e762:	2b00      	cmp	r3, #0
 800e764:	d02f      	beq.n	800e7c6 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800e766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e768:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e76c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e770:	68b9      	ldr	r1, [r7, #8]
 800e772:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e774:	f000 f91e 	bl	800e9b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e77a:	1e5a      	subs	r2, r3, #1
 800e77c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e77e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800e780:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800e784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e788:	d112      	bne.n	800e7b0 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e78a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e78c:	691b      	ldr	r3, [r3, #16]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d016      	beq.n	800e7c0 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e794:	3310      	adds	r3, #16
 800e796:	4618      	mov	r0, r3
 800e798:	f000 ff90 	bl	800f6bc <xTaskRemoveFromEventList>
 800e79c:	4603      	mov	r3, r0
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00e      	beq.n	800e7c0 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00b      	beq.n	800e7c0 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	601a      	str	r2, [r3, #0]
 800e7ae:	e007      	b.n	800e7c0 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800e7b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	b25a      	sxtb	r2, r3
 800e7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e7bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800e7c0:	2301      	movs	r3, #1
 800e7c2:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7c4:	e001      	b.n	800e7ca <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800e7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	f383 8811 	msr	BASEPRI, r3
}
 800e7d4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e7d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3738      	adds	r7, #56	@ 0x38
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d10d      	bne.n	800e80a <uxQueueMessagesWaiting+0x2a>
	__asm volatile
 800e7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7f2:	b672      	cpsid	i
 800e7f4:	f383 8811 	msr	BASEPRI, r3
 800e7f8:	f3bf 8f6f 	isb	sy
 800e7fc:	f3bf 8f4f 	dsb	sy
 800e800:	b662      	cpsie	i
 800e802:	60bb      	str	r3, [r7, #8]
}
 800e804:	bf00      	nop
 800e806:	bf00      	nop
 800e808:	e7fd      	b.n	800e806 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800e80a:	f001 ff97 	bl	801073c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e812:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800e814:	f001 ffc8 	bl	80107a8 <vPortExitCritical>

	return uxReturn;
 800e818:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e81a:	4618      	mov	r0, r3
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}

0800e822 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800e822:	b480      	push	{r7}
 800e824:	b087      	sub	sp, #28
 800e826:	af00      	add	r7, sp, #0
 800e828:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800e82e:	697b      	ldr	r3, [r7, #20]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d10d      	bne.n	800e850 <uxQueueMessagesWaitingFromISR+0x2e>
	__asm volatile
 800e834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e838:	b672      	cpsid	i
 800e83a:	f383 8811 	msr	BASEPRI, r3
 800e83e:	f3bf 8f6f 	isb	sy
 800e842:	f3bf 8f4f 	dsb	sy
 800e846:	b662      	cpsie	i
 800e848:	60fb      	str	r3, [r7, #12]
}
 800e84a:	bf00      	nop
 800e84c:	bf00      	nop
 800e84e:	e7fd      	b.n	800e84c <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800e850:	697b      	ldr	r3, [r7, #20]
 800e852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e854:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800e856:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800e858:	4618      	mov	r0, r3
 800e85a:	371c      	adds	r7, #28
 800e85c:	46bd      	mov	sp, r7
 800e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e862:	4770      	bx	lr

0800e864 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b084      	sub	sp, #16
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d10d      	bne.n	800e892 <vQueueDelete+0x2e>
	__asm volatile
 800e876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e87a:	b672      	cpsid	i
 800e87c:	f383 8811 	msr	BASEPRI, r3
 800e880:	f3bf 8f6f 	isb	sy
 800e884:	f3bf 8f4f 	dsb	sy
 800e888:	b662      	cpsie	i
 800e88a:	60bb      	str	r3, [r7, #8]
}
 800e88c:	bf00      	nop
 800e88e:	bf00      	nop
 800e890:	e7fd      	b.n	800e88e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f000 f95e 	bl	800eb54 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d102      	bne.n	800e8a8 <vQueueDelete+0x44>
		{
			vPortFree( pxQueue );
 800e8a2:	68f8      	ldr	r0, [r7, #12]
 800e8a4:	f002 f94a 	bl	8010b3c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800e8a8:	bf00      	nop
 800e8aa:	3710      	adds	r7, #16
 800e8ac:	46bd      	mov	sp, r7
 800e8ae:	bd80      	pop	{r7, pc}

0800e8b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d006      	beq.n	800e8ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800e8ca:	60fb      	str	r3, [r7, #12]
 800e8cc:	e001      	b.n	800e8d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
	}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b086      	sub	sp, #24
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e8f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d10d      	bne.n	800e91a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d14d      	bne.n	800e9a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	689b      	ldr	r3, [r3, #8]
 800e90a:	4618      	mov	r0, r3
 800e90c:	f001 f93a 	bl	800fb84 <xTaskPriorityDisinherit>
 800e910:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	609a      	str	r2, [r3, #8]
 800e918:	e043      	b.n	800e9a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d119      	bne.n	800e954 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6858      	ldr	r0, [r3, #4]
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e928:	461a      	mov	r2, r3
 800e92a:	68b9      	ldr	r1, [r7, #8]
 800e92c:	f012 fd05 	bl	802133a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	685a      	ldr	r2, [r3, #4]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e938:	441a      	add	r2, r3
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	689b      	ldr	r3, [r3, #8]
 800e946:	429a      	cmp	r2, r3
 800e948:	d32b      	bcc.n	800e9a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	605a      	str	r2, [r3, #4]
 800e952:	e026      	b.n	800e9a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	68d8      	ldr	r0, [r3, #12]
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e95c:	461a      	mov	r2, r3
 800e95e:	68b9      	ldr	r1, [r7, #8]
 800e960:	f012 fceb 	bl	802133a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	68da      	ldr	r2, [r3, #12]
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e96c:	425b      	negs	r3, r3
 800e96e:	441a      	add	r2, r3
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	68da      	ldr	r2, [r3, #12]
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d207      	bcs.n	800e990 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	689a      	ldr	r2, [r3, #8]
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e988:	425b      	negs	r3, r3
 800e98a:	441a      	add	r2, r3
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b02      	cmp	r3, #2
 800e994:	d105      	bne.n	800e9a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e996:	693b      	ldr	r3, [r7, #16]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d002      	beq.n	800e9a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	3b01      	subs	r3, #1
 800e9a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e9a2:	693b      	ldr	r3, [r7, #16]
 800e9a4:	1c5a      	adds	r2, r3, #1
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e9aa:	697b      	ldr	r3, [r7, #20]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3718      	adds	r7, #24
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b082      	sub	sp, #8
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d018      	beq.n	800e9f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68da      	ldr	r2, [r3, #12]
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9ce:	441a      	add	r2, r3
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	68da      	ldr	r2, [r3, #12]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	689b      	ldr	r3, [r3, #8]
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d303      	bcc.n	800e9e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681a      	ldr	r2, [r3, #0]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	68d9      	ldr	r1, [r3, #12]
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	6838      	ldr	r0, [r7, #0]
 800e9f4:	f012 fca1 	bl	802133a <memcpy>
	}
}
 800e9f8:	bf00      	nop
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b084      	sub	sp, #16
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ea08:	f001 fe98 	bl	801073c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ea12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea14:	e011      	b.n	800ea3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d012      	beq.n	800ea44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	3324      	adds	r3, #36	@ 0x24
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 fe4a 	bl	800f6bc <xTaskRemoveFromEventList>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d001      	beq.n	800ea32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ea2e:	f000 ff29 	bl	800f884 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ea32:	7bfb      	ldrb	r3, [r7, #15]
 800ea34:	3b01      	subs	r3, #1
 800ea36:	b2db      	uxtb	r3, r3
 800ea38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ea3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	dce9      	bgt.n	800ea16 <prvUnlockQueue+0x16>
 800ea42:	e000      	b.n	800ea46 <prvUnlockQueue+0x46>
					break;
 800ea44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	22ff      	movs	r2, #255	@ 0xff
 800ea4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ea4e:	f001 feab 	bl	80107a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ea52:	f001 fe73 	bl	801073c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ea5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea5e:	e011      	b.n	800ea84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d012      	beq.n	800ea8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	3310      	adds	r3, #16
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f000 fe25 	bl	800f6bc <xTaskRemoveFromEventList>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ea78:	f000 ff04 	bl	800f884 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ea7c:	7bbb      	ldrb	r3, [r7, #14]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	b2db      	uxtb	r3, r3
 800ea82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ea84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	dce9      	bgt.n	800ea60 <prvUnlockQueue+0x60>
 800ea8c:	e000      	b.n	800ea90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ea8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	22ff      	movs	r2, #255	@ 0xff
 800ea94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ea98:	f001 fe86 	bl	80107a8 <vPortExitCritical>
}
 800ea9c:	bf00      	nop
 800ea9e:	3710      	adds	r7, #16
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800eaac:	f001 fe46 	bl	801073c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d102      	bne.n	800eabe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800eab8:	2301      	movs	r3, #1
 800eaba:	60fb      	str	r3, [r7, #12]
 800eabc:	e001      	b.n	800eac2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800eabe:	2300      	movs	r3, #0
 800eac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eac2:	f001 fe71 	bl	80107a8 <vPortExitCritical>

	return xReturn;
 800eac6:	68fb      	ldr	r3, [r7, #12]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b084      	sub	sp, #16
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ead8:	f001 fe30 	bl	801073c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d102      	bne.n	800eaee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800eae8:	2301      	movs	r3, #1
 800eaea:	60fb      	str	r3, [r7, #12]
 800eaec:	e001      	b.n	800eaf2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800eaf2:	f001 fe59 	bl	80107a8 <vPortExitCritical>

	return xReturn;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
}
 800eaf8:	4618      	mov	r0, r3
 800eafa:	3710      	adds	r7, #16
 800eafc:	46bd      	mov	sp, r7
 800eafe:	bd80      	pop	{r7, pc}

0800eb00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800eb00:	b480      	push	{r7}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	60fb      	str	r3, [r7, #12]
 800eb0e:	e014      	b.n	800eb3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800eb10:	4a0f      	ldr	r2, [pc, #60]	@ (800eb50 <vQueueAddToRegistry+0x50>)
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d10b      	bne.n	800eb34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800eb1c:	490c      	ldr	r1, [pc, #48]	@ (800eb50 <vQueueAddToRegistry+0x50>)
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	683a      	ldr	r2, [r7, #0]
 800eb22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800eb26:	4a0a      	ldr	r2, [pc, #40]	@ (800eb50 <vQueueAddToRegistry+0x50>)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	00db      	lsls	r3, r3, #3
 800eb2c:	4413      	add	r3, r2
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800eb32:	e006      	b.n	800eb42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	3301      	adds	r3, #1
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2b0b      	cmp	r3, #11
 800eb3e:	d9e7      	bls.n	800eb10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800eb40:	bf00      	nop
 800eb42:	bf00      	nop
 800eb44:	3714      	adds	r7, #20
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr
 800eb4e:	bf00      	nop
 800eb50:	2000ea40 	.word	0x2000ea40

0800eb54 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800eb54:	b480      	push	{r7}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	60fb      	str	r3, [r7, #12]
 800eb60:	e016      	b.n	800eb90 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800eb62:	4a10      	ldr	r2, [pc, #64]	@ (800eba4 <vQueueUnregisterQueue+0x50>)
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	00db      	lsls	r3, r3, #3
 800eb68:	4413      	add	r3, r2
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	687a      	ldr	r2, [r7, #4]
 800eb6e:	429a      	cmp	r2, r3
 800eb70:	d10b      	bne.n	800eb8a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800eb72:	4a0c      	ldr	r2, [pc, #48]	@ (800eba4 <vQueueUnregisterQueue+0x50>)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	2100      	movs	r1, #0
 800eb78:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800eb7c:	4a09      	ldr	r2, [pc, #36]	@ (800eba4 <vQueueUnregisterQueue+0x50>)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	00db      	lsls	r3, r3, #3
 800eb82:	4413      	add	r3, r2
 800eb84:	2200      	movs	r2, #0
 800eb86:	605a      	str	r2, [r3, #4]
				break;
 800eb88:	e006      	b.n	800eb98 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2b0b      	cmp	r3, #11
 800eb94:	d9e5      	bls.n	800eb62 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800eb96:	bf00      	nop
 800eb98:	bf00      	nop
 800eb9a:	3714      	adds	r7, #20
 800eb9c:	46bd      	mov	sp, r7
 800eb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba2:	4770      	bx	lr
 800eba4:	2000ea40 	.word	0x2000ea40

0800eba8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	60f8      	str	r0, [r7, #12]
 800ebb0:	60b9      	str	r1, [r7, #8]
 800ebb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ebb8:	f001 fdc0 	bl	801073c <vPortEnterCritical>
 800ebbc:	697b      	ldr	r3, [r7, #20]
 800ebbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ebc2:	b25b      	sxtb	r3, r3
 800ebc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebc8:	d103      	bne.n	800ebd2 <vQueueWaitForMessageRestricted+0x2a>
 800ebca:	697b      	ldr	r3, [r7, #20]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ebd8:	b25b      	sxtb	r3, r3
 800ebda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ebde:	d103      	bne.n	800ebe8 <vQueueWaitForMessageRestricted+0x40>
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ebe8:	f001 fdde 	bl	80107a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d106      	bne.n	800ec02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	3324      	adds	r3, #36	@ 0x24
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	68b9      	ldr	r1, [r7, #8]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f000 fd2f 	bl	800f660 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ec02:	6978      	ldr	r0, [r7, #20]
 800ec04:	f7ff fefc 	bl	800ea00 <prvUnlockQueue>
	}
 800ec08:	bf00      	nop
 800ec0a:	3718      	adds	r7, #24
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b08e      	sub	sp, #56	@ 0x38
 800ec14:	af04      	add	r7, sp, #16
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
 800ec1a:	607a      	str	r2, [r7, #4]
 800ec1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ec1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d10d      	bne.n	800ec40 <xTaskCreateStatic+0x30>
	__asm volatile
 800ec24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec28:	b672      	cpsid	i
 800ec2a:	f383 8811 	msr	BASEPRI, r3
 800ec2e:	f3bf 8f6f 	isb	sy
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	b662      	cpsie	i
 800ec38:	623b      	str	r3, [r7, #32]
}
 800ec3a:	bf00      	nop
 800ec3c:	bf00      	nop
 800ec3e:	e7fd      	b.n	800ec3c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ec40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10d      	bne.n	800ec62 <xTaskCreateStatic+0x52>
	__asm volatile
 800ec46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec4a:	b672      	cpsid	i
 800ec4c:	f383 8811 	msr	BASEPRI, r3
 800ec50:	f3bf 8f6f 	isb	sy
 800ec54:	f3bf 8f4f 	dsb	sy
 800ec58:	b662      	cpsie	i
 800ec5a:	61fb      	str	r3, [r7, #28]
}
 800ec5c:	bf00      	nop
 800ec5e:	bf00      	nop
 800ec60:	e7fd      	b.n	800ec5e <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ec62:	23a8      	movs	r3, #168	@ 0xa8
 800ec64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	2ba8      	cmp	r3, #168	@ 0xa8
 800ec6a:	d00d      	beq.n	800ec88 <xTaskCreateStatic+0x78>
	__asm volatile
 800ec6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec70:	b672      	cpsid	i
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	b662      	cpsie	i
 800ec80:	61bb      	str	r3, [r7, #24]
}
 800ec82:	bf00      	nop
 800ec84:	bf00      	nop
 800ec86:	e7fd      	b.n	800ec84 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ec88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ec8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d01e      	beq.n	800ecce <xTaskCreateStatic+0xbe>
 800ec90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d01b      	beq.n	800ecce <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ec96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ec98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ec9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ec9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800eca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eca2:	2202      	movs	r2, #2
 800eca4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800eca8:	2300      	movs	r3, #0
 800ecaa:	9303      	str	r3, [sp, #12]
 800ecac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ecae:	9302      	str	r3, [sp, #8]
 800ecb0:	f107 0314 	add.w	r3, r7, #20
 800ecb4:	9301      	str	r3, [sp, #4]
 800ecb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ecb8:	9300      	str	r3, [sp, #0]
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	687a      	ldr	r2, [r7, #4]
 800ecbe:	68b9      	ldr	r1, [r7, #8]
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f000 f851 	bl	800ed68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecc6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ecc8:	f000 f8f8 	bl	800eebc <prvAddNewTaskToReadyList>
 800eccc:	e001      	b.n	800ecd2 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 800ecce:	2300      	movs	r3, #0
 800ecd0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ecd2:	697b      	ldr	r3, [r7, #20]
	}
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3728      	adds	r7, #40	@ 0x28
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bd80      	pop	{r7, pc}

0800ecdc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08c      	sub	sp, #48	@ 0x30
 800ece0:	af04      	add	r7, sp, #16
 800ece2:	60f8      	str	r0, [r7, #12]
 800ece4:	60b9      	str	r1, [r7, #8]
 800ece6:	603b      	str	r3, [r7, #0]
 800ece8:	4613      	mov	r3, r2
 800ecea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ecec:	88fb      	ldrh	r3, [r7, #6]
 800ecee:	009b      	lsls	r3, r3, #2
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f001 fe51 	bl	8010998 <pvPortMalloc>
 800ecf6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d00e      	beq.n	800ed1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ecfe:	20a8      	movs	r0, #168	@ 0xa8
 800ed00:	f001 fe4a 	bl	8010998 <pvPortMalloc>
 800ed04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d003      	beq.n	800ed14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	697a      	ldr	r2, [r7, #20]
 800ed10:	631a      	str	r2, [r3, #48]	@ 0x30
 800ed12:	e005      	b.n	800ed20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ed14:	6978      	ldr	r0, [r7, #20]
 800ed16:	f001 ff11 	bl	8010b3c <vPortFree>
 800ed1a:	e001      	b.n	800ed20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d017      	beq.n	800ed56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ed2e:	88fa      	ldrh	r2, [r7, #6]
 800ed30:	2300      	movs	r3, #0
 800ed32:	9303      	str	r3, [sp, #12]
 800ed34:	69fb      	ldr	r3, [r7, #28]
 800ed36:	9302      	str	r3, [sp, #8]
 800ed38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed3a:	9301      	str	r3, [sp, #4]
 800ed3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	683b      	ldr	r3, [r7, #0]
 800ed42:	68b9      	ldr	r1, [r7, #8]
 800ed44:	68f8      	ldr	r0, [r7, #12]
 800ed46:	f000 f80f 	bl	800ed68 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ed4a:	69f8      	ldr	r0, [r7, #28]
 800ed4c:	f000 f8b6 	bl	800eebc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed50:	2301      	movs	r3, #1
 800ed52:	61bb      	str	r3, [r7, #24]
 800ed54:	e002      	b.n	800ed5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ed5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed5c:	69bb      	ldr	r3, [r7, #24]
	}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3720      	adds	r7, #32
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}
	...

0800ed68 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b088      	sub	sp, #32
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	607a      	str	r2, [r7, #4]
 800ed74:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ed76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed78:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	009b      	lsls	r3, r3, #2
 800ed7e:	461a      	mov	r2, r3
 800ed80:	21a5      	movs	r1, #165	@ 0xa5
 800ed82:	f012 fa07 	bl	8021194 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ed8a:	6879      	ldr	r1, [r7, #4]
 800ed8c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ed90:	440b      	add	r3, r1
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	4413      	add	r3, r2
 800ed96:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	f023 0307 	bic.w	r3, r3, #7
 800ed9e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	f003 0307 	and.w	r3, r3, #7
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d00d      	beq.n	800edc6 <prvInitialiseNewTask+0x5e>
	__asm volatile
 800edaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edae:	b672      	cpsid	i
 800edb0:	f383 8811 	msr	BASEPRI, r3
 800edb4:	f3bf 8f6f 	isb	sy
 800edb8:	f3bf 8f4f 	dsb	sy
 800edbc:	b662      	cpsie	i
 800edbe:	617b      	str	r3, [r7, #20]
}
 800edc0:	bf00      	nop
 800edc2:	bf00      	nop
 800edc4:	e7fd      	b.n	800edc2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d01f      	beq.n	800ee0c <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800edcc:	2300      	movs	r3, #0
 800edce:	61fb      	str	r3, [r7, #28]
 800edd0:	e012      	b.n	800edf8 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800edd2:	68ba      	ldr	r2, [r7, #8]
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	4413      	add	r3, r2
 800edd8:	7819      	ldrb	r1, [r3, #0]
 800edda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eddc:	69fb      	ldr	r3, [r7, #28]
 800edde:	4413      	add	r3, r2
 800ede0:	3334      	adds	r3, #52	@ 0x34
 800ede2:	460a      	mov	r2, r1
 800ede4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ede6:	68ba      	ldr	r2, [r7, #8]
 800ede8:	69fb      	ldr	r3, [r7, #28]
 800edea:	4413      	add	r3, r2
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d006      	beq.n	800ee00 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800edf2:	69fb      	ldr	r3, [r7, #28]
 800edf4:	3301      	adds	r3, #1
 800edf6:	61fb      	str	r3, [r7, #28]
 800edf8:	69fb      	ldr	r3, [r7, #28]
 800edfa:	2b0f      	cmp	r3, #15
 800edfc:	d9e9      	bls.n	800edd2 <prvInitialiseNewTask+0x6a>
 800edfe:	e000      	b.n	800ee02 <prvInitialiseNewTask+0x9a>
			{
				break;
 800ee00:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ee02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ee0a:	e003      	b.n	800ee14 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ee0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ee14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee16:	2b37      	cmp	r3, #55	@ 0x37
 800ee18:	d901      	bls.n	800ee1e <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ee1a:	2337      	movs	r3, #55	@ 0x37
 800ee1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ee1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ee24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee28:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ee2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ee30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee32:	3304      	adds	r3, #4
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fe fce5 	bl	800d804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ee3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee3c:	3318      	adds	r3, #24
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe fce0 	bl	800d804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ee44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee4c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ee54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ee58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee64:	2200      	movs	r2, #0
 800ee66:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ee6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee6c:	3354      	adds	r3, #84	@ 0x54
 800ee6e:	224c      	movs	r2, #76	@ 0x4c
 800ee70:	2100      	movs	r1, #0
 800ee72:	4618      	mov	r0, r3
 800ee74:	f012 f98e 	bl	8021194 <memset>
 800ee78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee7a:	4a0d      	ldr	r2, [pc, #52]	@ (800eeb0 <prvInitialiseNewTask+0x148>)
 800ee7c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ee7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee80:	4a0c      	ldr	r2, [pc, #48]	@ (800eeb4 <prvInitialiseNewTask+0x14c>)
 800ee82:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ee84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee86:	4a0c      	ldr	r2, [pc, #48]	@ (800eeb8 <prvInitialiseNewTask+0x150>)
 800ee88:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee8a:	683a      	ldr	r2, [r7, #0]
 800ee8c:	68f9      	ldr	r1, [r7, #12]
 800ee8e:	69b8      	ldr	r0, [r7, #24]
 800ee90:	f001 fb44 	bl	801051c <pxPortInitialiseStack>
 800ee94:	4602      	mov	r2, r0
 800ee96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d002      	beq.n	800eea6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800eea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eea2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800eea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eea6:	bf00      	nop
 800eea8:	3720      	adds	r7, #32
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	2002d81c 	.word	0x2002d81c
 800eeb4:	2002d884 	.word	0x2002d884
 800eeb8:	2002d8ec 	.word	0x2002d8ec

0800eebc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800eec4:	f001 fc3a 	bl	801073c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800eec8:	4b2d      	ldr	r3, [pc, #180]	@ (800ef80 <prvAddNewTaskToReadyList+0xc4>)
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	3301      	adds	r3, #1
 800eece:	4a2c      	ldr	r2, [pc, #176]	@ (800ef80 <prvAddNewTaskToReadyList+0xc4>)
 800eed0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800eed2:	4b2c      	ldr	r3, [pc, #176]	@ (800ef84 <prvAddNewTaskToReadyList+0xc8>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d109      	bne.n	800eeee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800eeda:	4a2a      	ldr	r2, [pc, #168]	@ (800ef84 <prvAddNewTaskToReadyList+0xc8>)
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800eee0:	4b27      	ldr	r3, [pc, #156]	@ (800ef80 <prvAddNewTaskToReadyList+0xc4>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b01      	cmp	r3, #1
 800eee6:	d110      	bne.n	800ef0a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800eee8:	f000 fcf0 	bl	800f8cc <prvInitialiseTaskLists>
 800eeec:	e00d      	b.n	800ef0a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800eeee:	4b26      	ldr	r3, [pc, #152]	@ (800ef88 <prvAddNewTaskToReadyList+0xcc>)
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d109      	bne.n	800ef0a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800eef6:	4b23      	ldr	r3, [pc, #140]	@ (800ef84 <prvAddNewTaskToReadyList+0xc8>)
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d802      	bhi.n	800ef0a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ef04:	4a1f      	ldr	r2, [pc, #124]	@ (800ef84 <prvAddNewTaskToReadyList+0xc8>)
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ef0a:	4b20      	ldr	r3, [pc, #128]	@ (800ef8c <prvAddNewTaskToReadyList+0xd0>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	3301      	adds	r3, #1
 800ef10:	4a1e      	ldr	r2, [pc, #120]	@ (800ef8c <prvAddNewTaskToReadyList+0xd0>)
 800ef12:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ef14:	4b1d      	ldr	r3, [pc, #116]	@ (800ef8c <prvAddNewTaskToReadyList+0xd0>)
 800ef16:	681a      	ldr	r2, [r3, #0]
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef20:	4b1b      	ldr	r3, [pc, #108]	@ (800ef90 <prvAddNewTaskToReadyList+0xd4>)
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d903      	bls.n	800ef30 <prvAddNewTaskToReadyList+0x74>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef2c:	4a18      	ldr	r2, [pc, #96]	@ (800ef90 <prvAddNewTaskToReadyList+0xd4>)
 800ef2e:	6013      	str	r3, [r2, #0]
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef34:	4613      	mov	r3, r2
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	4413      	add	r3, r2
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	4a15      	ldr	r2, [pc, #84]	@ (800ef94 <prvAddNewTaskToReadyList+0xd8>)
 800ef3e:	441a      	add	r2, r3
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3304      	adds	r3, #4
 800ef44:	4619      	mov	r1, r3
 800ef46:	4610      	mov	r0, r2
 800ef48:	f7fe fc69 	bl	800d81e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ef4c:	f001 fc2c 	bl	80107a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ef50:	4b0d      	ldr	r3, [pc, #52]	@ (800ef88 <prvAddNewTaskToReadyList+0xcc>)
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d00e      	beq.n	800ef76 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ef58:	4b0a      	ldr	r3, [pc, #40]	@ (800ef84 <prvAddNewTaskToReadyList+0xc8>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d207      	bcs.n	800ef76 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ef66:	4b0c      	ldr	r3, [pc, #48]	@ (800ef98 <prvAddNewTaskToReadyList+0xdc>)
 800ef68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ef6c:	601a      	str	r2, [r3, #0]
 800ef6e:	f3bf 8f4f 	dsb	sy
 800ef72:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef76:	bf00      	nop
 800ef78:	3708      	adds	r7, #8
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	2000ef74 	.word	0x2000ef74
 800ef84:	2000eaa0 	.word	0x2000eaa0
 800ef88:	2000ef80 	.word	0x2000ef80
 800ef8c:	2000ef90 	.word	0x2000ef90
 800ef90:	2000ef7c 	.word	0x2000ef7c
 800ef94:	2000eaa4 	.word	0x2000eaa4
 800ef98:	e000ed04 	.word	0xe000ed04

0800ef9c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800efa4:	f001 fbca 	bl	801073c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d102      	bne.n	800efb4 <vTaskDelete+0x18>
 800efae:	4b2e      	ldr	r3, [pc, #184]	@ (800f068 <vTaskDelete+0xcc>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	e000      	b.n	800efb6 <vTaskDelete+0x1a>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800efb8:	68fb      	ldr	r3, [r7, #12]
 800efba:	3304      	adds	r3, #4
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7fe fc8b 	bl	800d8d8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d004      	beq.n	800efd4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	3318      	adds	r3, #24
 800efce:	4618      	mov	r0, r3
 800efd0:	f7fe fc82 	bl	800d8d8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800efd4:	4b25      	ldr	r3, [pc, #148]	@ (800f06c <vTaskDelete+0xd0>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	3301      	adds	r3, #1
 800efda:	4a24      	ldr	r2, [pc, #144]	@ (800f06c <vTaskDelete+0xd0>)
 800efdc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800efde:	4b22      	ldr	r3, [pc, #136]	@ (800f068 <vTaskDelete+0xcc>)
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d10b      	bne.n	800f000 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	3304      	adds	r3, #4
 800efec:	4619      	mov	r1, r3
 800efee:	4820      	ldr	r0, [pc, #128]	@ (800f070 <vTaskDelete+0xd4>)
 800eff0:	f7fe fc15 	bl	800d81e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800eff4:	4b1f      	ldr	r3, [pc, #124]	@ (800f074 <vTaskDelete+0xd8>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	3301      	adds	r3, #1
 800effa:	4a1e      	ldr	r2, [pc, #120]	@ (800f074 <vTaskDelete+0xd8>)
 800effc:	6013      	str	r3, [r2, #0]
 800effe:	e009      	b.n	800f014 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800f000:	4b1d      	ldr	r3, [pc, #116]	@ (800f078 <vTaskDelete+0xdc>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3b01      	subs	r3, #1
 800f006:	4a1c      	ldr	r2, [pc, #112]	@ (800f078 <vTaskDelete+0xdc>)
 800f008:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800f00a:	68f8      	ldr	r0, [r7, #12]
 800f00c:	f000 fccc 	bl	800f9a8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800f010:	f000 fd02 	bl	800fa18 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800f014:	f001 fbc8 	bl	80107a8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800f018:	4b18      	ldr	r3, [pc, #96]	@ (800f07c <vTaskDelete+0xe0>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d01e      	beq.n	800f05e <vTaskDelete+0xc2>
		{
			if( pxTCB == pxCurrentTCB )
 800f020:	4b11      	ldr	r3, [pc, #68]	@ (800f068 <vTaskDelete+0xcc>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	68fa      	ldr	r2, [r7, #12]
 800f026:	429a      	cmp	r2, r3
 800f028:	d119      	bne.n	800f05e <vTaskDelete+0xc2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800f02a:	4b15      	ldr	r3, [pc, #84]	@ (800f080 <vTaskDelete+0xe4>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d00d      	beq.n	800f04e <vTaskDelete+0xb2>
	__asm volatile
 800f032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f036:	b672      	cpsid	i
 800f038:	f383 8811 	msr	BASEPRI, r3
 800f03c:	f3bf 8f6f 	isb	sy
 800f040:	f3bf 8f4f 	dsb	sy
 800f044:	b662      	cpsie	i
 800f046:	60bb      	str	r3, [r7, #8]
}
 800f048:	bf00      	nop
 800f04a:	bf00      	nop
 800f04c:	e7fd      	b.n	800f04a <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 800f04e:	4b0d      	ldr	r3, [pc, #52]	@ (800f084 <vTaskDelete+0xe8>)
 800f050:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	f3bf 8f4f 	dsb	sy
 800f05a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f05e:	bf00      	nop
 800f060:	3710      	adds	r7, #16
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}
 800f066:	bf00      	nop
 800f068:	2000eaa0 	.word	0x2000eaa0
 800f06c:	2000ef90 	.word	0x2000ef90
 800f070:	2000ef48 	.word	0x2000ef48
 800f074:	2000ef5c 	.word	0x2000ef5c
 800f078:	2000ef74 	.word	0x2000ef74
 800f07c:	2000ef80 	.word	0x2000ef80
 800f080:	2000ef9c 	.word	0x2000ef9c
 800f084:	e000ed04 	.word	0xe000ed04

0800f088 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b084      	sub	sp, #16
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f090:	2300      	movs	r3, #0
 800f092:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d01a      	beq.n	800f0d0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f09a:	4b15      	ldr	r3, [pc, #84]	@ (800f0f0 <vTaskDelay+0x68>)
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d00d      	beq.n	800f0be <vTaskDelay+0x36>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f0a6:	b672      	cpsid	i
 800f0a8:	f383 8811 	msr	BASEPRI, r3
 800f0ac:	f3bf 8f6f 	isb	sy
 800f0b0:	f3bf 8f4f 	dsb	sy
 800f0b4:	b662      	cpsie	i
 800f0b6:	60bb      	str	r3, [r7, #8]
}
 800f0b8:	bf00      	nop
 800f0ba:	bf00      	nop
 800f0bc:	e7fd      	b.n	800f0ba <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f0be:	f000 f88f 	bl	800f1e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f000 fe6d 	bl	800fda4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f0ca:	f000 f897 	bl	800f1fc <xTaskResumeAll>
 800f0ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d107      	bne.n	800f0e6 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 800f0d6:	4b07      	ldr	r3, [pc, #28]	@ (800f0f4 <vTaskDelay+0x6c>)
 800f0d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	f3bf 8f4f 	dsb	sy
 800f0e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f0e6:	bf00      	nop
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}
 800f0ee:	bf00      	nop
 800f0f0:	2000ef9c 	.word	0x2000ef9c
 800f0f4:	e000ed04 	.word	0xe000ed04

0800f0f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b08a      	sub	sp, #40	@ 0x28
 800f0fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f0fe:	2300      	movs	r3, #0
 800f100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f102:	2300      	movs	r3, #0
 800f104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f106:	463a      	mov	r2, r7
 800f108:	1d39      	adds	r1, r7, #4
 800f10a:	f107 0308 	add.w	r3, r7, #8
 800f10e:	4618      	mov	r0, r3
 800f110:	f7fe fb24 	bl	800d75c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f114:	6839      	ldr	r1, [r7, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	9202      	str	r2, [sp, #8]
 800f11c:	9301      	str	r3, [sp, #4]
 800f11e:	2300      	movs	r3, #0
 800f120:	9300      	str	r3, [sp, #0]
 800f122:	2300      	movs	r3, #0
 800f124:	460a      	mov	r2, r1
 800f126:	4926      	ldr	r1, [pc, #152]	@ (800f1c0 <vTaskStartScheduler+0xc8>)
 800f128:	4826      	ldr	r0, [pc, #152]	@ (800f1c4 <vTaskStartScheduler+0xcc>)
 800f12a:	f7ff fd71 	bl	800ec10 <xTaskCreateStatic>
 800f12e:	4603      	mov	r3, r0
 800f130:	4a25      	ldr	r2, [pc, #148]	@ (800f1c8 <vTaskStartScheduler+0xd0>)
 800f132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f134:	4b24      	ldr	r3, [pc, #144]	@ (800f1c8 <vTaskStartScheduler+0xd0>)
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d002      	beq.n	800f142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f13c:	2301      	movs	r3, #1
 800f13e:	617b      	str	r3, [r7, #20]
 800f140:	e001      	b.n	800f146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f142:	2300      	movs	r3, #0
 800f144:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d102      	bne.n	800f152 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f14c:	f000 fe7e 	bl	800fe4c <xTimerCreateTimerTask>
 800f150:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f152:	697b      	ldr	r3, [r7, #20]
 800f154:	2b01      	cmp	r3, #1
 800f156:	d11d      	bne.n	800f194 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f15c:	b672      	cpsid	i
 800f15e:	f383 8811 	msr	BASEPRI, r3
 800f162:	f3bf 8f6f 	isb	sy
 800f166:	f3bf 8f4f 	dsb	sy
 800f16a:	b662      	cpsie	i
 800f16c:	613b      	str	r3, [r7, #16]
}
 800f16e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f170:	4b16      	ldr	r3, [pc, #88]	@ (800f1cc <vTaskStartScheduler+0xd4>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	3354      	adds	r3, #84	@ 0x54
 800f176:	4a16      	ldr	r2, [pc, #88]	@ (800f1d0 <vTaskStartScheduler+0xd8>)
 800f178:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f17a:	4b16      	ldr	r3, [pc, #88]	@ (800f1d4 <vTaskStartScheduler+0xdc>)
 800f17c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f180:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f182:	4b15      	ldr	r3, [pc, #84]	@ (800f1d8 <vTaskStartScheduler+0xe0>)
 800f184:	2201      	movs	r2, #1
 800f186:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f188:	4b14      	ldr	r3, [pc, #80]	@ (800f1dc <vTaskStartScheduler+0xe4>)
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f18e:	f001 fa57 	bl	8010640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f192:	e011      	b.n	800f1b8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f19a:	d10d      	bne.n	800f1b8 <vTaskStartScheduler+0xc0>
	__asm volatile
 800f19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f1a0:	b672      	cpsid	i
 800f1a2:	f383 8811 	msr	BASEPRI, r3
 800f1a6:	f3bf 8f6f 	isb	sy
 800f1aa:	f3bf 8f4f 	dsb	sy
 800f1ae:	b662      	cpsie	i
 800f1b0:	60fb      	str	r3, [r7, #12]
}
 800f1b2:	bf00      	nop
 800f1b4:	bf00      	nop
 800f1b6:	e7fd      	b.n	800f1b4 <vTaskStartScheduler+0xbc>
}
 800f1b8:	bf00      	nop
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	080221a8 	.word	0x080221a8
 800f1c4:	0800f89d 	.word	0x0800f89d
 800f1c8:	2000ef98 	.word	0x2000ef98
 800f1cc:	2000eaa0 	.word	0x2000eaa0
 800f1d0:	20000080 	.word	0x20000080
 800f1d4:	2000ef94 	.word	0x2000ef94
 800f1d8:	2000ef80 	.word	0x2000ef80
 800f1dc:	2000ef78 	.word	0x2000ef78

0800f1e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f1e4:	4b04      	ldr	r3, [pc, #16]	@ (800f1f8 <vTaskSuspendAll+0x18>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	4a03      	ldr	r2, [pc, #12]	@ (800f1f8 <vTaskSuspendAll+0x18>)
 800f1ec:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f1ee:	bf00      	nop
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f6:	4770      	bx	lr
 800f1f8:	2000ef9c 	.word	0x2000ef9c

0800f1fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f202:	2300      	movs	r3, #0
 800f204:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f206:	2300      	movs	r3, #0
 800f208:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f20a:	4b43      	ldr	r3, [pc, #268]	@ (800f318 <xTaskResumeAll+0x11c>)
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d10d      	bne.n	800f22e <xTaskResumeAll+0x32>
	__asm volatile
 800f212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f216:	b672      	cpsid	i
 800f218:	f383 8811 	msr	BASEPRI, r3
 800f21c:	f3bf 8f6f 	isb	sy
 800f220:	f3bf 8f4f 	dsb	sy
 800f224:	b662      	cpsie	i
 800f226:	603b      	str	r3, [r7, #0]
}
 800f228:	bf00      	nop
 800f22a:	bf00      	nop
 800f22c:	e7fd      	b.n	800f22a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f22e:	f001 fa85 	bl	801073c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f232:	4b39      	ldr	r3, [pc, #228]	@ (800f318 <xTaskResumeAll+0x11c>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	3b01      	subs	r3, #1
 800f238:	4a37      	ldr	r2, [pc, #220]	@ (800f318 <xTaskResumeAll+0x11c>)
 800f23a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f23c:	4b36      	ldr	r3, [pc, #216]	@ (800f318 <xTaskResumeAll+0x11c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d162      	bne.n	800f30a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f244:	4b35      	ldr	r3, [pc, #212]	@ (800f31c <xTaskResumeAll+0x120>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d05e      	beq.n	800f30a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f24c:	e02f      	b.n	800f2ae <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f24e:	4b34      	ldr	r3, [pc, #208]	@ (800f320 <xTaskResumeAll+0x124>)
 800f250:	68db      	ldr	r3, [r3, #12]
 800f252:	68db      	ldr	r3, [r3, #12]
 800f254:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	3318      	adds	r3, #24
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7fe fb3c 	bl	800d8d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	3304      	adds	r3, #4
 800f264:	4618      	mov	r0, r3
 800f266:	f7fe fb37 	bl	800d8d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f26e:	4b2d      	ldr	r3, [pc, #180]	@ (800f324 <xTaskResumeAll+0x128>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	429a      	cmp	r2, r3
 800f274:	d903      	bls.n	800f27e <xTaskResumeAll+0x82>
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f27a:	4a2a      	ldr	r2, [pc, #168]	@ (800f324 <xTaskResumeAll+0x128>)
 800f27c:	6013      	str	r3, [r2, #0]
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f282:	4613      	mov	r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	4413      	add	r3, r2
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	4a27      	ldr	r2, [pc, #156]	@ (800f328 <xTaskResumeAll+0x12c>)
 800f28c:	441a      	add	r2, r3
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	3304      	adds	r3, #4
 800f292:	4619      	mov	r1, r3
 800f294:	4610      	mov	r0, r2
 800f296:	f7fe fac2 	bl	800d81e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f29e:	4b23      	ldr	r3, [pc, #140]	@ (800f32c <xTaskResumeAll+0x130>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d302      	bcc.n	800f2ae <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 800f2a8:	4b21      	ldr	r3, [pc, #132]	@ (800f330 <xTaskResumeAll+0x134>)
 800f2aa:	2201      	movs	r2, #1
 800f2ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f2ae:	4b1c      	ldr	r3, [pc, #112]	@ (800f320 <xTaskResumeAll+0x124>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d1cb      	bne.n	800f24e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f2bc:	f000 fbac 	bl	800fa18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f2c0:	4b1c      	ldr	r3, [pc, #112]	@ (800f334 <xTaskResumeAll+0x138>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d010      	beq.n	800f2ee <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f2cc:	f000 f858 	bl	800f380 <xTaskIncrementTick>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d002      	beq.n	800f2dc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 800f2d6:	4b16      	ldr	r3, [pc, #88]	@ (800f330 <xTaskResumeAll+0x134>)
 800f2d8:	2201      	movs	r2, #1
 800f2da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	3b01      	subs	r3, #1
 800f2e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d1f1      	bne.n	800f2cc <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 800f2e8:	4b12      	ldr	r3, [pc, #72]	@ (800f334 <xTaskResumeAll+0x138>)
 800f2ea:	2200      	movs	r2, #0
 800f2ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f2ee:	4b10      	ldr	r3, [pc, #64]	@ (800f330 <xTaskResumeAll+0x134>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d009      	beq.n	800f30a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f2fa:	4b0f      	ldr	r3, [pc, #60]	@ (800f338 <xTaskResumeAll+0x13c>)
 800f2fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f300:	601a      	str	r2, [r3, #0]
 800f302:	f3bf 8f4f 	dsb	sy
 800f306:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f30a:	f001 fa4d 	bl	80107a8 <vPortExitCritical>

	return xAlreadyYielded;
 800f30e:	68bb      	ldr	r3, [r7, #8]
}
 800f310:	4618      	mov	r0, r3
 800f312:	3710      	adds	r7, #16
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	2000ef9c 	.word	0x2000ef9c
 800f31c:	2000ef74 	.word	0x2000ef74
 800f320:	2000ef34 	.word	0x2000ef34
 800f324:	2000ef7c 	.word	0x2000ef7c
 800f328:	2000eaa4 	.word	0x2000eaa4
 800f32c:	2000eaa0 	.word	0x2000eaa0
 800f330:	2000ef88 	.word	0x2000ef88
 800f334:	2000ef84 	.word	0x2000ef84
 800f338:	e000ed04 	.word	0xe000ed04

0800f33c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f342:	4b05      	ldr	r3, [pc, #20]	@ (800f358 <xTaskGetTickCount+0x1c>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f348:	687b      	ldr	r3, [r7, #4]
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	370c      	adds	r7, #12
 800f34e:	46bd      	mov	sp, r7
 800f350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f354:	4770      	bx	lr
 800f356:	bf00      	nop
 800f358:	2000ef78 	.word	0x2000ef78

0800f35c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f362:	f001 fad3 	bl	801090c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800f366:	2300      	movs	r3, #0
 800f368:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800f36a:	4b04      	ldr	r3, [pc, #16]	@ (800f37c <xTaskGetTickCountFromISR+0x20>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f370:	683b      	ldr	r3, [r7, #0]
}
 800f372:	4618      	mov	r0, r3
 800f374:	3708      	adds	r7, #8
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
 800f37a:	bf00      	nop
 800f37c:	2000ef78 	.word	0x2000ef78

0800f380 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b086      	sub	sp, #24
 800f384:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f386:	2300      	movs	r3, #0
 800f388:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f38a:	4b50      	ldr	r3, [pc, #320]	@ (800f4cc <xTaskIncrementTick+0x14c>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f040 808c 	bne.w	800f4ac <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f394:	4b4e      	ldr	r3, [pc, #312]	@ (800f4d0 <xTaskIncrementTick+0x150>)
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	3301      	adds	r3, #1
 800f39a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f39c:	4a4c      	ldr	r2, [pc, #304]	@ (800f4d0 <xTaskIncrementTick+0x150>)
 800f39e:	693b      	ldr	r3, [r7, #16]
 800f3a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f3a2:	693b      	ldr	r3, [r7, #16]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d123      	bne.n	800f3f0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 800f3a8:	4b4a      	ldr	r3, [pc, #296]	@ (800f4d4 <xTaskIncrementTick+0x154>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d00d      	beq.n	800f3ce <xTaskIncrementTick+0x4e>
	__asm volatile
 800f3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3b6:	b672      	cpsid	i
 800f3b8:	f383 8811 	msr	BASEPRI, r3
 800f3bc:	f3bf 8f6f 	isb	sy
 800f3c0:	f3bf 8f4f 	dsb	sy
 800f3c4:	b662      	cpsie	i
 800f3c6:	603b      	str	r3, [r7, #0]
}
 800f3c8:	bf00      	nop
 800f3ca:	bf00      	nop
 800f3cc:	e7fd      	b.n	800f3ca <xTaskIncrementTick+0x4a>
 800f3ce:	4b41      	ldr	r3, [pc, #260]	@ (800f4d4 <xTaskIncrementTick+0x154>)
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	60fb      	str	r3, [r7, #12]
 800f3d4:	4b40      	ldr	r3, [pc, #256]	@ (800f4d8 <xTaskIncrementTick+0x158>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	4a3e      	ldr	r2, [pc, #248]	@ (800f4d4 <xTaskIncrementTick+0x154>)
 800f3da:	6013      	str	r3, [r2, #0]
 800f3dc:	4a3e      	ldr	r2, [pc, #248]	@ (800f4d8 <xTaskIncrementTick+0x158>)
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	6013      	str	r3, [r2, #0]
 800f3e2:	4b3e      	ldr	r3, [pc, #248]	@ (800f4dc <xTaskIncrementTick+0x15c>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	3301      	adds	r3, #1
 800f3e8:	4a3c      	ldr	r2, [pc, #240]	@ (800f4dc <xTaskIncrementTick+0x15c>)
 800f3ea:	6013      	str	r3, [r2, #0]
 800f3ec:	f000 fb14 	bl	800fa18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f3f0:	4b3b      	ldr	r3, [pc, #236]	@ (800f4e0 <xTaskIncrementTick+0x160>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	693a      	ldr	r2, [r7, #16]
 800f3f6:	429a      	cmp	r2, r3
 800f3f8:	d349      	bcc.n	800f48e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f3fa:	4b36      	ldr	r3, [pc, #216]	@ (800f4d4 <xTaskIncrementTick+0x154>)
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d104      	bne.n	800f40e <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f404:	4b36      	ldr	r3, [pc, #216]	@ (800f4e0 <xTaskIncrementTick+0x160>)
 800f406:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f40a:	601a      	str	r2, [r3, #0]
					break;
 800f40c:	e03f      	b.n	800f48e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f40e:	4b31      	ldr	r3, [pc, #196]	@ (800f4d4 <xTaskIncrementTick+0x154>)
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68db      	ldr	r3, [r3, #12]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f418:	68bb      	ldr	r3, [r7, #8]
 800f41a:	685b      	ldr	r3, [r3, #4]
 800f41c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f41e:	693a      	ldr	r2, [r7, #16]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	429a      	cmp	r2, r3
 800f424:	d203      	bcs.n	800f42e <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f426:	4a2e      	ldr	r2, [pc, #184]	@ (800f4e0 <xTaskIncrementTick+0x160>)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f42c:	e02f      	b.n	800f48e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	3304      	adds	r3, #4
 800f432:	4618      	mov	r0, r3
 800f434:	f7fe fa50 	bl	800d8d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d004      	beq.n	800f44a <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	3318      	adds	r3, #24
 800f444:	4618      	mov	r0, r3
 800f446:	f7fe fa47 	bl	800d8d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f44e:	4b25      	ldr	r3, [pc, #148]	@ (800f4e4 <xTaskIncrementTick+0x164>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	429a      	cmp	r2, r3
 800f454:	d903      	bls.n	800f45e <xTaskIncrementTick+0xde>
 800f456:	68bb      	ldr	r3, [r7, #8]
 800f458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f45a:	4a22      	ldr	r2, [pc, #136]	@ (800f4e4 <xTaskIncrementTick+0x164>)
 800f45c:	6013      	str	r3, [r2, #0]
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f462:	4613      	mov	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	4413      	add	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4a1f      	ldr	r2, [pc, #124]	@ (800f4e8 <xTaskIncrementTick+0x168>)
 800f46c:	441a      	add	r2, r3
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	3304      	adds	r3, #4
 800f472:	4619      	mov	r1, r3
 800f474:	4610      	mov	r0, r2
 800f476:	f7fe f9d2 	bl	800d81e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f47e:	4b1b      	ldr	r3, [pc, #108]	@ (800f4ec <xTaskIncrementTick+0x16c>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f484:	429a      	cmp	r2, r3
 800f486:	d3b8      	bcc.n	800f3fa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 800f488:	2301      	movs	r3, #1
 800f48a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f48c:	e7b5      	b.n	800f3fa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f48e:	4b17      	ldr	r3, [pc, #92]	@ (800f4ec <xTaskIncrementTick+0x16c>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f494:	4914      	ldr	r1, [pc, #80]	@ (800f4e8 <xTaskIncrementTick+0x168>)
 800f496:	4613      	mov	r3, r2
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4413      	add	r3, r2
 800f49c:	009b      	lsls	r3, r3, #2
 800f49e:	440b      	add	r3, r1
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d907      	bls.n	800f4b6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	617b      	str	r3, [r7, #20]
 800f4aa:	e004      	b.n	800f4b6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f4ac:	4b10      	ldr	r3, [pc, #64]	@ (800f4f0 <xTaskIncrementTick+0x170>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	4a0f      	ldr	r2, [pc, #60]	@ (800f4f0 <xTaskIncrementTick+0x170>)
 800f4b4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f4b6:	4b0f      	ldr	r3, [pc, #60]	@ (800f4f4 <xTaskIncrementTick+0x174>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d001      	beq.n	800f4c2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800f4be:	2301      	movs	r3, #1
 800f4c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f4c2:	697b      	ldr	r3, [r7, #20]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3718      	adds	r7, #24
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	2000ef9c 	.word	0x2000ef9c
 800f4d0:	2000ef78 	.word	0x2000ef78
 800f4d4:	2000ef2c 	.word	0x2000ef2c
 800f4d8:	2000ef30 	.word	0x2000ef30
 800f4dc:	2000ef8c 	.word	0x2000ef8c
 800f4e0:	2000ef94 	.word	0x2000ef94
 800f4e4:	2000ef7c 	.word	0x2000ef7c
 800f4e8:	2000eaa4 	.word	0x2000eaa4
 800f4ec:	2000eaa0 	.word	0x2000eaa0
 800f4f0:	2000ef84 	.word	0x2000ef84
 800f4f4:	2000ef88 	.word	0x2000ef88

0800f4f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b086      	sub	sp, #24
 800f4fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f4fe:	4b3e      	ldr	r3, [pc, #248]	@ (800f5f8 <vTaskSwitchContext+0x100>)
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d003      	beq.n	800f50e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f506:	4b3d      	ldr	r3, [pc, #244]	@ (800f5fc <vTaskSwitchContext+0x104>)
 800f508:	2201      	movs	r2, #1
 800f50a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f50c:	e070      	b.n	800f5f0 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800f50e:	4b3b      	ldr	r3, [pc, #236]	@ (800f5fc <vTaskSwitchContext+0x104>)
 800f510:	2200      	movs	r2, #0
 800f512:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800f514:	4b3a      	ldr	r3, [pc, #232]	@ (800f600 <vTaskSwitchContext+0x108>)
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f51a:	613b      	str	r3, [r7, #16]
 800f51c:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800f520:	60fb      	str	r3, [r7, #12]
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	429a      	cmp	r2, r3
 800f52a:	d111      	bne.n	800f550 <vTaskSwitchContext+0x58>
 800f52c:	693b      	ldr	r3, [r7, #16]
 800f52e:	3304      	adds	r3, #4
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	429a      	cmp	r2, r3
 800f536:	d10b      	bne.n	800f550 <vTaskSwitchContext+0x58>
 800f538:	693b      	ldr	r3, [r7, #16]
 800f53a:	3308      	adds	r3, #8
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68fa      	ldr	r2, [r7, #12]
 800f540:	429a      	cmp	r2, r3
 800f542:	d105      	bne.n	800f550 <vTaskSwitchContext+0x58>
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	330c      	adds	r3, #12
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d008      	beq.n	800f562 <vTaskSwitchContext+0x6a>
 800f550:	4b2b      	ldr	r3, [pc, #172]	@ (800f600 <vTaskSwitchContext+0x108>)
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	4b2a      	ldr	r3, [pc, #168]	@ (800f600 <vTaskSwitchContext+0x108>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	3334      	adds	r3, #52	@ 0x34
 800f55a:	4619      	mov	r1, r3
 800f55c:	4610      	mov	r0, r2
 800f55e:	f7f1 f9c5 	bl	80008ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f562:	4b28      	ldr	r3, [pc, #160]	@ (800f604 <vTaskSwitchContext+0x10c>)
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	617b      	str	r3, [r7, #20]
 800f568:	e013      	b.n	800f592 <vTaskSwitchContext+0x9a>
 800f56a:	697b      	ldr	r3, [r7, #20]
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d10d      	bne.n	800f58c <vTaskSwitchContext+0x94>
	__asm volatile
 800f570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f574:	b672      	cpsid	i
 800f576:	f383 8811 	msr	BASEPRI, r3
 800f57a:	f3bf 8f6f 	isb	sy
 800f57e:	f3bf 8f4f 	dsb	sy
 800f582:	b662      	cpsie	i
 800f584:	607b      	str	r3, [r7, #4]
}
 800f586:	bf00      	nop
 800f588:	bf00      	nop
 800f58a:	e7fd      	b.n	800f588 <vTaskSwitchContext+0x90>
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	3b01      	subs	r3, #1
 800f590:	617b      	str	r3, [r7, #20]
 800f592:	491d      	ldr	r1, [pc, #116]	@ (800f608 <vTaskSwitchContext+0x110>)
 800f594:	697a      	ldr	r2, [r7, #20]
 800f596:	4613      	mov	r3, r2
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	4413      	add	r3, r2
 800f59c:	009b      	lsls	r3, r3, #2
 800f59e:	440b      	add	r3, r1
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d0e1      	beq.n	800f56a <vTaskSwitchContext+0x72>
 800f5a6:	697a      	ldr	r2, [r7, #20]
 800f5a8:	4613      	mov	r3, r2
 800f5aa:	009b      	lsls	r3, r3, #2
 800f5ac:	4413      	add	r3, r2
 800f5ae:	009b      	lsls	r3, r3, #2
 800f5b0:	4a15      	ldr	r2, [pc, #84]	@ (800f608 <vTaskSwitchContext+0x110>)
 800f5b2:	4413      	add	r3, r2
 800f5b4:	60bb      	str	r3, [r7, #8]
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	685b      	ldr	r3, [r3, #4]
 800f5ba:	685a      	ldr	r2, [r3, #4]
 800f5bc:	68bb      	ldr	r3, [r7, #8]
 800f5be:	605a      	str	r2, [r3, #4]
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	685a      	ldr	r2, [r3, #4]
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	3308      	adds	r3, #8
 800f5c8:	429a      	cmp	r2, r3
 800f5ca:	d104      	bne.n	800f5d6 <vTaskSwitchContext+0xde>
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	685a      	ldr	r2, [r3, #4]
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	605a      	str	r2, [r3, #4]
 800f5d6:	68bb      	ldr	r3, [r7, #8]
 800f5d8:	685b      	ldr	r3, [r3, #4]
 800f5da:	68db      	ldr	r3, [r3, #12]
 800f5dc:	4a08      	ldr	r2, [pc, #32]	@ (800f600 <vTaskSwitchContext+0x108>)
 800f5de:	6013      	str	r3, [r2, #0]
 800f5e0:	4a08      	ldr	r2, [pc, #32]	@ (800f604 <vTaskSwitchContext+0x10c>)
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f5e6:	4b06      	ldr	r3, [pc, #24]	@ (800f600 <vTaskSwitchContext+0x108>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	3354      	adds	r3, #84	@ 0x54
 800f5ec:	4a07      	ldr	r2, [pc, #28]	@ (800f60c <vTaskSwitchContext+0x114>)
 800f5ee:	6013      	str	r3, [r2, #0]
}
 800f5f0:	bf00      	nop
 800f5f2:	3718      	adds	r7, #24
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	2000ef9c 	.word	0x2000ef9c
 800f5fc:	2000ef88 	.word	0x2000ef88
 800f600:	2000eaa0 	.word	0x2000eaa0
 800f604:	2000ef7c 	.word	0x2000ef7c
 800f608:	2000eaa4 	.word	0x2000eaa4
 800f60c:	20000080 	.word	0x20000080

0800f610 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b084      	sub	sp, #16
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d10d      	bne.n	800f63c <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800f620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f624:	b672      	cpsid	i
 800f626:	f383 8811 	msr	BASEPRI, r3
 800f62a:	f3bf 8f6f 	isb	sy
 800f62e:	f3bf 8f4f 	dsb	sy
 800f632:	b662      	cpsie	i
 800f634:	60fb      	str	r3, [r7, #12]
}
 800f636:	bf00      	nop
 800f638:	bf00      	nop
 800f63a:	e7fd      	b.n	800f638 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f63c:	4b07      	ldr	r3, [pc, #28]	@ (800f65c <vTaskPlaceOnEventList+0x4c>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	3318      	adds	r3, #24
 800f642:	4619      	mov	r1, r3
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7fe f90e 	bl	800d866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f64a:	2101      	movs	r1, #1
 800f64c:	6838      	ldr	r0, [r7, #0]
 800f64e:	f000 fba9 	bl	800fda4 <prvAddCurrentTaskToDelayedList>
}
 800f652:	bf00      	nop
 800f654:	3710      	adds	r7, #16
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	2000eaa0 	.word	0x2000eaa0

0800f660 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f660:	b580      	push	{r7, lr}
 800f662:	b086      	sub	sp, #24
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d10d      	bne.n	800f68e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800f672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f676:	b672      	cpsid	i
 800f678:	f383 8811 	msr	BASEPRI, r3
 800f67c:	f3bf 8f6f 	isb	sy
 800f680:	f3bf 8f4f 	dsb	sy
 800f684:	b662      	cpsie	i
 800f686:	617b      	str	r3, [r7, #20]
}
 800f688:	bf00      	nop
 800f68a:	bf00      	nop
 800f68c:	e7fd      	b.n	800f68a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f68e:	4b0a      	ldr	r3, [pc, #40]	@ (800f6b8 <vTaskPlaceOnEventListRestricted+0x58>)
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	3318      	adds	r3, #24
 800f694:	4619      	mov	r1, r3
 800f696:	68f8      	ldr	r0, [r7, #12]
 800f698:	f7fe f8c1 	bl	800d81e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d002      	beq.n	800f6a8 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800f6a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f6a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f6a8:	6879      	ldr	r1, [r7, #4]
 800f6aa:	68b8      	ldr	r0, [r7, #8]
 800f6ac:	f000 fb7a 	bl	800fda4 <prvAddCurrentTaskToDelayedList>
	}
 800f6b0:	bf00      	nop
 800f6b2:	3718      	adds	r7, #24
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}
 800f6b8:	2000eaa0 	.word	0x2000eaa0

0800f6bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b086      	sub	sp, #24
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	68db      	ldr	r3, [r3, #12]
 800f6c8:	68db      	ldr	r3, [r3, #12]
 800f6ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d10d      	bne.n	800f6ee <xTaskRemoveFromEventList+0x32>
	__asm volatile
 800f6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d6:	b672      	cpsid	i
 800f6d8:	f383 8811 	msr	BASEPRI, r3
 800f6dc:	f3bf 8f6f 	isb	sy
 800f6e0:	f3bf 8f4f 	dsb	sy
 800f6e4:	b662      	cpsie	i
 800f6e6:	60fb      	str	r3, [r7, #12]
}
 800f6e8:	bf00      	nop
 800f6ea:	bf00      	nop
 800f6ec:	e7fd      	b.n	800f6ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	3318      	adds	r3, #24
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f7fe f8f0 	bl	800d8d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800f770 <xTaskRemoveFromEventList+0xb4>)
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d11d      	bne.n	800f73c <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	3304      	adds	r3, #4
 800f704:	4618      	mov	r0, r3
 800f706:	f7fe f8e7 	bl	800d8d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f70a:	693b      	ldr	r3, [r7, #16]
 800f70c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f70e:	4b19      	ldr	r3, [pc, #100]	@ (800f774 <xTaskRemoveFromEventList+0xb8>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	429a      	cmp	r2, r3
 800f714:	d903      	bls.n	800f71e <xTaskRemoveFromEventList+0x62>
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f71a:	4a16      	ldr	r2, [pc, #88]	@ (800f774 <xTaskRemoveFromEventList+0xb8>)
 800f71c:	6013      	str	r3, [r2, #0]
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f722:	4613      	mov	r3, r2
 800f724:	009b      	lsls	r3, r3, #2
 800f726:	4413      	add	r3, r2
 800f728:	009b      	lsls	r3, r3, #2
 800f72a:	4a13      	ldr	r2, [pc, #76]	@ (800f778 <xTaskRemoveFromEventList+0xbc>)
 800f72c:	441a      	add	r2, r3
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	3304      	adds	r3, #4
 800f732:	4619      	mov	r1, r3
 800f734:	4610      	mov	r0, r2
 800f736:	f7fe f872 	bl	800d81e <vListInsertEnd>
 800f73a:	e005      	b.n	800f748 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	3318      	adds	r3, #24
 800f740:	4619      	mov	r1, r3
 800f742:	480e      	ldr	r0, [pc, #56]	@ (800f77c <xTaskRemoveFromEventList+0xc0>)
 800f744:	f7fe f86b 	bl	800d81e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f748:	693b      	ldr	r3, [r7, #16]
 800f74a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f74c:	4b0c      	ldr	r3, [pc, #48]	@ (800f780 <xTaskRemoveFromEventList+0xc4>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f752:	429a      	cmp	r2, r3
 800f754:	d905      	bls.n	800f762 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f756:	2301      	movs	r3, #1
 800f758:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f75a:	4b0a      	ldr	r3, [pc, #40]	@ (800f784 <xTaskRemoveFromEventList+0xc8>)
 800f75c:	2201      	movs	r2, #1
 800f75e:	601a      	str	r2, [r3, #0]
 800f760:	e001      	b.n	800f766 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800f762:	2300      	movs	r3, #0
 800f764:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f766:	697b      	ldr	r3, [r7, #20]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3718      	adds	r7, #24
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	2000ef9c 	.word	0x2000ef9c
 800f774:	2000ef7c 	.word	0x2000ef7c
 800f778:	2000eaa4 	.word	0x2000eaa4
 800f77c:	2000ef34 	.word	0x2000ef34
 800f780:	2000eaa0 	.word	0x2000eaa0
 800f784:	2000ef88 	.word	0x2000ef88

0800f788 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f788:	b480      	push	{r7}
 800f78a:	b083      	sub	sp, #12
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f790:	4b06      	ldr	r3, [pc, #24]	@ (800f7ac <vTaskInternalSetTimeOutState+0x24>)
 800f792:	681a      	ldr	r2, [r3, #0]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f798:	4b05      	ldr	r3, [pc, #20]	@ (800f7b0 <vTaskInternalSetTimeOutState+0x28>)
 800f79a:	681a      	ldr	r2, [r3, #0]
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	605a      	str	r2, [r3, #4]
}
 800f7a0:	bf00      	nop
 800f7a2:	370c      	adds	r7, #12
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7aa:	4770      	bx	lr
 800f7ac:	2000ef8c 	.word	0x2000ef8c
 800f7b0:	2000ef78 	.word	0x2000ef78

0800f7b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f7b4:	b580      	push	{r7, lr}
 800f7b6:	b088      	sub	sp, #32
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	6078      	str	r0, [r7, #4]
 800f7bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d10d      	bne.n	800f7e0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 800f7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7c8:	b672      	cpsid	i
 800f7ca:	f383 8811 	msr	BASEPRI, r3
 800f7ce:	f3bf 8f6f 	isb	sy
 800f7d2:	f3bf 8f4f 	dsb	sy
 800f7d6:	b662      	cpsie	i
 800f7d8:	613b      	str	r3, [r7, #16]
}
 800f7da:	bf00      	nop
 800f7dc:	bf00      	nop
 800f7de:	e7fd      	b.n	800f7dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d10d      	bne.n	800f802 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800f7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7ea:	b672      	cpsid	i
 800f7ec:	f383 8811 	msr	BASEPRI, r3
 800f7f0:	f3bf 8f6f 	isb	sy
 800f7f4:	f3bf 8f4f 	dsb	sy
 800f7f8:	b662      	cpsie	i
 800f7fa:	60fb      	str	r3, [r7, #12]
}
 800f7fc:	bf00      	nop
 800f7fe:	bf00      	nop
 800f800:	e7fd      	b.n	800f7fe <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 800f802:	f000 ff9b 	bl	801073c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f806:	4b1d      	ldr	r3, [pc, #116]	@ (800f87c <xTaskCheckForTimeOut+0xc8>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	685b      	ldr	r3, [r3, #4]
 800f810:	69ba      	ldr	r2, [r7, #24]
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f816:	683b      	ldr	r3, [r7, #0]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f81e:	d102      	bne.n	800f826 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f820:	2300      	movs	r3, #0
 800f822:	61fb      	str	r3, [r7, #28]
 800f824:	e023      	b.n	800f86e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681a      	ldr	r2, [r3, #0]
 800f82a:	4b15      	ldr	r3, [pc, #84]	@ (800f880 <xTaskCheckForTimeOut+0xcc>)
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	429a      	cmp	r2, r3
 800f830:	d007      	beq.n	800f842 <xTaskCheckForTimeOut+0x8e>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	685b      	ldr	r3, [r3, #4]
 800f836:	69ba      	ldr	r2, [r7, #24]
 800f838:	429a      	cmp	r2, r3
 800f83a:	d302      	bcc.n	800f842 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f83c:	2301      	movs	r3, #1
 800f83e:	61fb      	str	r3, [r7, #28]
 800f840:	e015      	b.n	800f86e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	697a      	ldr	r2, [r7, #20]
 800f848:	429a      	cmp	r2, r3
 800f84a:	d20b      	bcs.n	800f864 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f84c:	683b      	ldr	r3, [r7, #0]
 800f84e:	681a      	ldr	r2, [r3, #0]
 800f850:	697b      	ldr	r3, [r7, #20]
 800f852:	1ad2      	subs	r2, r2, r3
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f7ff ff95 	bl	800f788 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f85e:	2300      	movs	r3, #0
 800f860:	61fb      	str	r3, [r7, #28]
 800f862:	e004      	b.n	800f86e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f86a:	2301      	movs	r3, #1
 800f86c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f86e:	f000 ff9b 	bl	80107a8 <vPortExitCritical>

	return xReturn;
 800f872:	69fb      	ldr	r3, [r7, #28]
}
 800f874:	4618      	mov	r0, r3
 800f876:	3720      	adds	r7, #32
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	2000ef78 	.word	0x2000ef78
 800f880:	2000ef8c 	.word	0x2000ef8c

0800f884 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f884:	b480      	push	{r7}
 800f886:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f888:	4b03      	ldr	r3, [pc, #12]	@ (800f898 <vTaskMissedYield+0x14>)
 800f88a:	2201      	movs	r2, #1
 800f88c:	601a      	str	r2, [r3, #0]
}
 800f88e:	bf00      	nop
 800f890:	46bd      	mov	sp, r7
 800f892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f896:	4770      	bx	lr
 800f898:	2000ef88 	.word	0x2000ef88

0800f89c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b082      	sub	sp, #8
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f8a4:	f000 f852 	bl	800f94c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f8a8:	4b06      	ldr	r3, [pc, #24]	@ (800f8c4 <prvIdleTask+0x28>)
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	2b01      	cmp	r3, #1
 800f8ae:	d9f9      	bls.n	800f8a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f8b0:	4b05      	ldr	r3, [pc, #20]	@ (800f8c8 <prvIdleTask+0x2c>)
 800f8b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f8b6:	601a      	str	r2, [r3, #0]
 800f8b8:	f3bf 8f4f 	dsb	sy
 800f8bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f8c0:	e7f0      	b.n	800f8a4 <prvIdleTask+0x8>
 800f8c2:	bf00      	nop
 800f8c4:	2000eaa4 	.word	0x2000eaa4
 800f8c8:	e000ed04 	.word	0xe000ed04

0800f8cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8d2:	2300      	movs	r3, #0
 800f8d4:	607b      	str	r3, [r7, #4]
 800f8d6:	e00c      	b.n	800f8f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	4613      	mov	r3, r2
 800f8dc:	009b      	lsls	r3, r3, #2
 800f8de:	4413      	add	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4a12      	ldr	r2, [pc, #72]	@ (800f92c <prvInitialiseTaskLists+0x60>)
 800f8e4:	4413      	add	r3, r2
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fd ff6c 	bl	800d7c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	607b      	str	r3, [r7, #4]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	2b37      	cmp	r3, #55	@ 0x37
 800f8f6:	d9ef      	bls.n	800f8d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f8f8:	480d      	ldr	r0, [pc, #52]	@ (800f930 <prvInitialiseTaskLists+0x64>)
 800f8fa:	f7fd ff63 	bl	800d7c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f8fe:	480d      	ldr	r0, [pc, #52]	@ (800f934 <prvInitialiseTaskLists+0x68>)
 800f900:	f7fd ff60 	bl	800d7c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f904:	480c      	ldr	r0, [pc, #48]	@ (800f938 <prvInitialiseTaskLists+0x6c>)
 800f906:	f7fd ff5d 	bl	800d7c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f90a:	480c      	ldr	r0, [pc, #48]	@ (800f93c <prvInitialiseTaskLists+0x70>)
 800f90c:	f7fd ff5a 	bl	800d7c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f910:	480b      	ldr	r0, [pc, #44]	@ (800f940 <prvInitialiseTaskLists+0x74>)
 800f912:	f7fd ff57 	bl	800d7c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f916:	4b0b      	ldr	r3, [pc, #44]	@ (800f944 <prvInitialiseTaskLists+0x78>)
 800f918:	4a05      	ldr	r2, [pc, #20]	@ (800f930 <prvInitialiseTaskLists+0x64>)
 800f91a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f91c:	4b0a      	ldr	r3, [pc, #40]	@ (800f948 <prvInitialiseTaskLists+0x7c>)
 800f91e:	4a05      	ldr	r2, [pc, #20]	@ (800f934 <prvInitialiseTaskLists+0x68>)
 800f920:	601a      	str	r2, [r3, #0]
}
 800f922:	bf00      	nop
 800f924:	3708      	adds	r7, #8
 800f926:	46bd      	mov	sp, r7
 800f928:	bd80      	pop	{r7, pc}
 800f92a:	bf00      	nop
 800f92c:	2000eaa4 	.word	0x2000eaa4
 800f930:	2000ef04 	.word	0x2000ef04
 800f934:	2000ef18 	.word	0x2000ef18
 800f938:	2000ef34 	.word	0x2000ef34
 800f93c:	2000ef48 	.word	0x2000ef48
 800f940:	2000ef60 	.word	0x2000ef60
 800f944:	2000ef2c 	.word	0x2000ef2c
 800f948:	2000ef30 	.word	0x2000ef30

0800f94c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b082      	sub	sp, #8
 800f950:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f952:	e019      	b.n	800f988 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f954:	f000 fef2 	bl	801073c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f958:	4b10      	ldr	r3, [pc, #64]	@ (800f99c <prvCheckTasksWaitingTermination+0x50>)
 800f95a:	68db      	ldr	r3, [r3, #12]
 800f95c:	68db      	ldr	r3, [r3, #12]
 800f95e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	3304      	adds	r3, #4
 800f964:	4618      	mov	r0, r3
 800f966:	f7fd ffb7 	bl	800d8d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f96a:	4b0d      	ldr	r3, [pc, #52]	@ (800f9a0 <prvCheckTasksWaitingTermination+0x54>)
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	3b01      	subs	r3, #1
 800f970:	4a0b      	ldr	r2, [pc, #44]	@ (800f9a0 <prvCheckTasksWaitingTermination+0x54>)
 800f972:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f974:	4b0b      	ldr	r3, [pc, #44]	@ (800f9a4 <prvCheckTasksWaitingTermination+0x58>)
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	3b01      	subs	r3, #1
 800f97a:	4a0a      	ldr	r2, [pc, #40]	@ (800f9a4 <prvCheckTasksWaitingTermination+0x58>)
 800f97c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f97e:	f000 ff13 	bl	80107a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f000 f810 	bl	800f9a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f988:	4b06      	ldr	r3, [pc, #24]	@ (800f9a4 <prvCheckTasksWaitingTermination+0x58>)
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d1e1      	bne.n	800f954 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f990:	bf00      	nop
 800f992:	bf00      	nop
 800f994:	3708      	adds	r7, #8
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}
 800f99a:	bf00      	nop
 800f99c:	2000ef48 	.word	0x2000ef48
 800f9a0:	2000ef74 	.word	0x2000ef74
 800f9a4:	2000ef5c 	.word	0x2000ef5c

0800f9a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b084      	sub	sp, #16
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	3354      	adds	r3, #84	@ 0x54
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f011 fc05 	bl	80211c4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d108      	bne.n	800f9d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f001 f8b7 	bl	8010b3c <vPortFree>
				vPortFree( pxTCB );
 800f9ce:	6878      	ldr	r0, [r7, #4]
 800f9d0:	f001 f8b4 	bl	8010b3c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f9d4:	e01b      	b.n	800fa0e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	d103      	bne.n	800f9e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800f9e0:	6878      	ldr	r0, [r7, #4]
 800f9e2:	f001 f8ab 	bl	8010b3c <vPortFree>
	}
 800f9e6:	e012      	b.n	800fa0e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800f9ee:	2b02      	cmp	r3, #2
 800f9f0:	d00d      	beq.n	800fa0e <prvDeleteTCB+0x66>
	__asm volatile
 800f9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9f6:	b672      	cpsid	i
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	b662      	cpsie	i
 800fa06:	60fb      	str	r3, [r7, #12]
}
 800fa08:	bf00      	nop
 800fa0a:	bf00      	nop
 800fa0c:	e7fd      	b.n	800fa0a <prvDeleteTCB+0x62>
	}
 800fa0e:	bf00      	nop
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
	...

0800fa18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b083      	sub	sp, #12
 800fa1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fa1e:	4b0c      	ldr	r3, [pc, #48]	@ (800fa50 <prvResetNextTaskUnblockTime+0x38>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d104      	bne.n	800fa32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fa28:	4b0a      	ldr	r3, [pc, #40]	@ (800fa54 <prvResetNextTaskUnblockTime+0x3c>)
 800fa2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fa2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fa30:	e008      	b.n	800fa44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa32:	4b07      	ldr	r3, [pc, #28]	@ (800fa50 <prvResetNextTaskUnblockTime+0x38>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	68db      	ldr	r3, [r3, #12]
 800fa3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	685b      	ldr	r3, [r3, #4]
 800fa40:	4a04      	ldr	r2, [pc, #16]	@ (800fa54 <prvResetNextTaskUnblockTime+0x3c>)
 800fa42:	6013      	str	r3, [r2, #0]
}
 800fa44:	bf00      	nop
 800fa46:	370c      	adds	r7, #12
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4e:	4770      	bx	lr
 800fa50:	2000ef2c 	.word	0x2000ef2c
 800fa54:	2000ef94 	.word	0x2000ef94

0800fa58 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800fa5e:	4b05      	ldr	r3, [pc, #20]	@ (800fa74 <xTaskGetCurrentTaskHandle+0x1c>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	607b      	str	r3, [r7, #4]

		return xReturn;
 800fa64:	687b      	ldr	r3, [r7, #4]
	}
 800fa66:	4618      	mov	r0, r3
 800fa68:	370c      	adds	r7, #12
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	2000eaa0 	.word	0x2000eaa0

0800fa78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fa78:	b480      	push	{r7}
 800fa7a:	b083      	sub	sp, #12
 800fa7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fa7e:	4b0b      	ldr	r3, [pc, #44]	@ (800faac <xTaskGetSchedulerState+0x34>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d102      	bne.n	800fa8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fa86:	2301      	movs	r3, #1
 800fa88:	607b      	str	r3, [r7, #4]
 800fa8a:	e008      	b.n	800fa9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa8c:	4b08      	ldr	r3, [pc, #32]	@ (800fab0 <xTaskGetSchedulerState+0x38>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d102      	bne.n	800fa9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fa94:	2302      	movs	r3, #2
 800fa96:	607b      	str	r3, [r7, #4]
 800fa98:	e001      	b.n	800fa9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fa9e:	687b      	ldr	r3, [r7, #4]
	}
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr
 800faac:	2000ef80 	.word	0x2000ef80
 800fab0:	2000ef9c 	.word	0x2000ef9c

0800fab4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fac0:	2300      	movs	r3, #0
 800fac2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d051      	beq.n	800fb6e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800face:	4b2a      	ldr	r3, [pc, #168]	@ (800fb78 <xTaskPriorityInherit+0xc4>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fad4:	429a      	cmp	r2, r3
 800fad6:	d241      	bcs.n	800fb5c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fad8:	68bb      	ldr	r3, [r7, #8]
 800fada:	699b      	ldr	r3, [r3, #24]
 800fadc:	2b00      	cmp	r3, #0
 800fade:	db06      	blt.n	800faee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fae0:	4b25      	ldr	r3, [pc, #148]	@ (800fb78 <xTaskPriorityInherit+0xc4>)
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fae6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	6959      	ldr	r1, [r3, #20]
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800faf6:	4613      	mov	r3, r2
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	4413      	add	r3, r2
 800fafc:	009b      	lsls	r3, r3, #2
 800fafe:	4a1f      	ldr	r2, [pc, #124]	@ (800fb7c <xTaskPriorityInherit+0xc8>)
 800fb00:	4413      	add	r3, r2
 800fb02:	4299      	cmp	r1, r3
 800fb04:	d122      	bne.n	800fb4c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb06:	68bb      	ldr	r3, [r7, #8]
 800fb08:	3304      	adds	r3, #4
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7fd fee4 	bl	800d8d8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fb10:	4b19      	ldr	r3, [pc, #100]	@ (800fb78 <xTaskPriorityInherit+0xc4>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb16:	68bb      	ldr	r3, [r7, #8]
 800fb18:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fb1a:	68bb      	ldr	r3, [r7, #8]
 800fb1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb1e:	4b18      	ldr	r3, [pc, #96]	@ (800fb80 <xTaskPriorityInherit+0xcc>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d903      	bls.n	800fb2e <xTaskPriorityInherit+0x7a>
 800fb26:	68bb      	ldr	r3, [r7, #8]
 800fb28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb2a:	4a15      	ldr	r2, [pc, #84]	@ (800fb80 <xTaskPriorityInherit+0xcc>)
 800fb2c:	6013      	str	r3, [r2, #0]
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb32:	4613      	mov	r3, r2
 800fb34:	009b      	lsls	r3, r3, #2
 800fb36:	4413      	add	r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	4a10      	ldr	r2, [pc, #64]	@ (800fb7c <xTaskPriorityInherit+0xc8>)
 800fb3c:	441a      	add	r2, r3
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	3304      	adds	r3, #4
 800fb42:	4619      	mov	r1, r3
 800fb44:	4610      	mov	r0, r2
 800fb46:	f7fd fe6a 	bl	800d81e <vListInsertEnd>
 800fb4a:	e004      	b.n	800fb56 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb78 <xTaskPriorityInherit+0xc4>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800fb56:	2301      	movs	r3, #1
 800fb58:	60fb      	str	r3, [r7, #12]
 800fb5a:	e008      	b.n	800fb6e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fb60:	4b05      	ldr	r3, [pc, #20]	@ (800fb78 <xTaskPriorityInherit+0xc4>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d201      	bcs.n	800fb6e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fb6e:	68fb      	ldr	r3, [r7, #12]
	}
 800fb70:	4618      	mov	r0, r3
 800fb72:	3710      	adds	r7, #16
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd80      	pop	{r7, pc}
 800fb78:	2000eaa0 	.word	0x2000eaa0
 800fb7c:	2000eaa4 	.word	0x2000eaa4
 800fb80:	2000ef7c 	.word	0x2000ef7c

0800fb84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800fb90:	2300      	movs	r3, #0
 800fb92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d05c      	beq.n	800fc54 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800fb9a:	4b31      	ldr	r3, [pc, #196]	@ (800fc60 <xTaskPriorityDisinherit+0xdc>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	693a      	ldr	r2, [r7, #16]
 800fba0:	429a      	cmp	r2, r3
 800fba2:	d00d      	beq.n	800fbc0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 800fba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fba8:	b672      	cpsid	i
 800fbaa:	f383 8811 	msr	BASEPRI, r3
 800fbae:	f3bf 8f6f 	isb	sy
 800fbb2:	f3bf 8f4f 	dsb	sy
 800fbb6:	b662      	cpsie	i
 800fbb8:	60fb      	str	r3, [r7, #12]
}
 800fbba:	bf00      	nop
 800fbbc:	bf00      	nop
 800fbbe:	e7fd      	b.n	800fbbc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800fbc0:	693b      	ldr	r3, [r7, #16]
 800fbc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d10d      	bne.n	800fbe4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 800fbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbcc:	b672      	cpsid	i
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
 800fbda:	b662      	cpsie	i
 800fbdc:	60bb      	str	r3, [r7, #8]
}
 800fbde:	bf00      	nop
 800fbe0:	bf00      	nop
 800fbe2:	e7fd      	b.n	800fbe0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbe8:	1e5a      	subs	r2, r3, #1
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbf2:	693b      	ldr	r3, [r7, #16]
 800fbf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fbf6:	429a      	cmp	r2, r3
 800fbf8:	d02c      	beq.n	800fc54 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800fbfa:	693b      	ldr	r3, [r7, #16]
 800fbfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d128      	bne.n	800fc54 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	3304      	adds	r3, #4
 800fc06:	4618      	mov	r0, r3
 800fc08:	f7fd fe66 	bl	800d8d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fc1c:	693b      	ldr	r3, [r7, #16]
 800fc1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc24:	4b0f      	ldr	r3, [pc, #60]	@ (800fc64 <xTaskPriorityDisinherit+0xe0>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d903      	bls.n	800fc34 <xTaskPriorityDisinherit+0xb0>
 800fc2c:	693b      	ldr	r3, [r7, #16]
 800fc2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fc30:	4a0c      	ldr	r2, [pc, #48]	@ (800fc64 <xTaskPriorityDisinherit+0xe0>)
 800fc32:	6013      	str	r3, [r2, #0]
 800fc34:	693b      	ldr	r3, [r7, #16]
 800fc36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fc38:	4613      	mov	r3, r2
 800fc3a:	009b      	lsls	r3, r3, #2
 800fc3c:	4413      	add	r3, r2
 800fc3e:	009b      	lsls	r3, r3, #2
 800fc40:	4a09      	ldr	r2, [pc, #36]	@ (800fc68 <xTaskPriorityDisinherit+0xe4>)
 800fc42:	441a      	add	r2, r3
 800fc44:	693b      	ldr	r3, [r7, #16]
 800fc46:	3304      	adds	r3, #4
 800fc48:	4619      	mov	r1, r3
 800fc4a:	4610      	mov	r0, r2
 800fc4c:	f7fd fde7 	bl	800d81e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800fc50:	2301      	movs	r3, #1
 800fc52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800fc54:	697b      	ldr	r3, [r7, #20]
	}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3718      	adds	r7, #24
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	2000eaa0 	.word	0x2000eaa0
 800fc64:	2000ef7c 	.word	0x2000ef7c
 800fc68:	2000eaa4 	.word	0x2000eaa4

0800fc6c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b088      	sub	sp, #32
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d070      	beq.n	800fd66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d10d      	bne.n	800fca8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800fc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc90:	b672      	cpsid	i
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	b662      	cpsie	i
 800fca0:	60fb      	str	r3, [r7, #12]
}
 800fca2:	bf00      	nop
 800fca4:	bf00      	nop
 800fca6:	e7fd      	b.n	800fca4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800fca8:	69bb      	ldr	r3, [r7, #24]
 800fcaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcac:	683a      	ldr	r2, [r7, #0]
 800fcae:	429a      	cmp	r2, r3
 800fcb0:	d902      	bls.n	800fcb8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	61fb      	str	r3, [r7, #28]
 800fcb6:	e002      	b.n	800fcbe <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800fcb8:	69bb      	ldr	r3, [r7, #24]
 800fcba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fcbc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800fcbe:	69bb      	ldr	r3, [r7, #24]
 800fcc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcc2:	69fa      	ldr	r2, [r7, #28]
 800fcc4:	429a      	cmp	r2, r3
 800fcc6:	d04e      	beq.n	800fd66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800fcc8:	69bb      	ldr	r3, [r7, #24]
 800fcca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d149      	bne.n	800fd66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800fcd2:	4b27      	ldr	r3, [pc, #156]	@ (800fd70 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	69ba      	ldr	r2, [r7, #24]
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d10d      	bne.n	800fcf8 <vTaskPriorityDisinheritAfterTimeout+0x8c>
	__asm volatile
 800fcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce0:	b672      	cpsid	i
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	b662      	cpsie	i
 800fcf0:	60bb      	str	r3, [r7, #8]
}
 800fcf2:	bf00      	nop
 800fcf4:	bf00      	nop
 800fcf6:	e7fd      	b.n	800fcf4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800fcf8:	69bb      	ldr	r3, [r7, #24]
 800fcfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fcfe:	69bb      	ldr	r3, [r7, #24]
 800fd00:	69fa      	ldr	r2, [r7, #28]
 800fd02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fd04:	69bb      	ldr	r3, [r7, #24]
 800fd06:	699b      	ldr	r3, [r3, #24]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	db04      	blt.n	800fd16 <vTaskPriorityDisinheritAfterTimeout+0xaa>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd0c:	69fb      	ldr	r3, [r7, #28]
 800fd0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800fd12:	69bb      	ldr	r3, [r7, #24]
 800fd14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fd16:	69bb      	ldr	r3, [r7, #24]
 800fd18:	6959      	ldr	r1, [r3, #20]
 800fd1a:	693a      	ldr	r2, [r7, #16]
 800fd1c:	4613      	mov	r3, r2
 800fd1e:	009b      	lsls	r3, r3, #2
 800fd20:	4413      	add	r3, r2
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	4a13      	ldr	r2, [pc, #76]	@ (800fd74 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fd26:	4413      	add	r3, r2
 800fd28:	4299      	cmp	r1, r3
 800fd2a:	d11c      	bne.n	800fd66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fd2c:	69bb      	ldr	r3, [r7, #24]
 800fd2e:	3304      	adds	r3, #4
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fd fdd1 	bl	800d8d8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd3a:	4b0f      	ldr	r3, [pc, #60]	@ (800fd78 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d903      	bls.n	800fd4a <vTaskPriorityDisinheritAfterTimeout+0xde>
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd46:	4a0c      	ldr	r2, [pc, #48]	@ (800fd78 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 800fd48:	6013      	str	r3, [r2, #0]
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fd4e:	4613      	mov	r3, r2
 800fd50:	009b      	lsls	r3, r3, #2
 800fd52:	4413      	add	r3, r2
 800fd54:	009b      	lsls	r3, r3, #2
 800fd56:	4a07      	ldr	r2, [pc, #28]	@ (800fd74 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800fd58:	441a      	add	r2, r3
 800fd5a:	69bb      	ldr	r3, [r7, #24]
 800fd5c:	3304      	adds	r3, #4
 800fd5e:	4619      	mov	r1, r3
 800fd60:	4610      	mov	r0, r2
 800fd62:	f7fd fd5c 	bl	800d81e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd66:	bf00      	nop
 800fd68:	3720      	adds	r7, #32
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	2000eaa0 	.word	0x2000eaa0
 800fd74:	2000eaa4 	.word	0x2000eaa4
 800fd78:	2000ef7c 	.word	0x2000ef7c

0800fd7c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fd7c:	b480      	push	{r7}
 800fd7e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fd80:	4b07      	ldr	r3, [pc, #28]	@ (800fda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d004      	beq.n	800fd92 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800fd88:	4b05      	ldr	r3, [pc, #20]	@ (800fda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800fd8e:	3201      	adds	r2, #1
 800fd90:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800fd92:	4b03      	ldr	r3, [pc, #12]	@ (800fda0 <pvTaskIncrementMutexHeldCount+0x24>)
 800fd94:	681b      	ldr	r3, [r3, #0]
	}
 800fd96:	4618      	mov	r0, r3
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr
 800fda0:	2000eaa0 	.word	0x2000eaa0

0800fda4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	6078      	str	r0, [r7, #4]
 800fdac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fdae:	4b21      	ldr	r3, [pc, #132]	@ (800fe34 <prvAddCurrentTaskToDelayedList+0x90>)
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fdb4:	4b20      	ldr	r3, [pc, #128]	@ (800fe38 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	3304      	adds	r3, #4
 800fdba:	4618      	mov	r0, r3
 800fdbc:	f7fd fd8c 	bl	800d8d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800fdc6:	d10a      	bne.n	800fdde <prvAddCurrentTaskToDelayedList+0x3a>
 800fdc8:	683b      	ldr	r3, [r7, #0]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d007      	beq.n	800fdde <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdce:	4b1a      	ldr	r3, [pc, #104]	@ (800fe38 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	3304      	adds	r3, #4
 800fdd4:	4619      	mov	r1, r3
 800fdd6:	4819      	ldr	r0, [pc, #100]	@ (800fe3c <prvAddCurrentTaskToDelayedList+0x98>)
 800fdd8:	f7fd fd21 	bl	800d81e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fddc:	e026      	b.n	800fe2c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fdde:	68fa      	ldr	r2, [r7, #12]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	4413      	add	r3, r2
 800fde4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fde6:	4b14      	ldr	r3, [pc, #80]	@ (800fe38 <prvAddCurrentTaskToDelayedList+0x94>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	68ba      	ldr	r2, [r7, #8]
 800fdec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fdee:	68ba      	ldr	r2, [r7, #8]
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d209      	bcs.n	800fe0a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fdf6:	4b12      	ldr	r3, [pc, #72]	@ (800fe40 <prvAddCurrentTaskToDelayedList+0x9c>)
 800fdf8:	681a      	ldr	r2, [r3, #0]
 800fdfa:	4b0f      	ldr	r3, [pc, #60]	@ (800fe38 <prvAddCurrentTaskToDelayedList+0x94>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	3304      	adds	r3, #4
 800fe00:	4619      	mov	r1, r3
 800fe02:	4610      	mov	r0, r2
 800fe04:	f7fd fd2f 	bl	800d866 <vListInsert>
}
 800fe08:	e010      	b.n	800fe2c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fe0a:	4b0e      	ldr	r3, [pc, #56]	@ (800fe44 <prvAddCurrentTaskToDelayedList+0xa0>)
 800fe0c:	681a      	ldr	r2, [r3, #0]
 800fe0e:	4b0a      	ldr	r3, [pc, #40]	@ (800fe38 <prvAddCurrentTaskToDelayedList+0x94>)
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	3304      	adds	r3, #4
 800fe14:	4619      	mov	r1, r3
 800fe16:	4610      	mov	r0, r2
 800fe18:	f7fd fd25 	bl	800d866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fe1c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	68ba      	ldr	r2, [r7, #8]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d202      	bcs.n	800fe2c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800fe26:	4a08      	ldr	r2, [pc, #32]	@ (800fe48 <prvAddCurrentTaskToDelayedList+0xa4>)
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	6013      	str	r3, [r2, #0]
}
 800fe2c:	bf00      	nop
 800fe2e:	3710      	adds	r7, #16
 800fe30:	46bd      	mov	sp, r7
 800fe32:	bd80      	pop	{r7, pc}
 800fe34:	2000ef78 	.word	0x2000ef78
 800fe38:	2000eaa0 	.word	0x2000eaa0
 800fe3c:	2000ef60 	.word	0x2000ef60
 800fe40:	2000ef30 	.word	0x2000ef30
 800fe44:	2000ef2c 	.word	0x2000ef2c
 800fe48:	2000ef94 	.word	0x2000ef94

0800fe4c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b08a      	sub	sp, #40	@ 0x28
 800fe50:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800fe52:	2300      	movs	r3, #0
 800fe54:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800fe56:	f000 fb21 	bl	801049c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800fe5a:	4b1e      	ldr	r3, [pc, #120]	@ (800fed4 <xTimerCreateTimerTask+0x88>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d021      	beq.n	800fea6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800fe66:	2300      	movs	r3, #0
 800fe68:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800fe6a:	1d3a      	adds	r2, r7, #4
 800fe6c:	f107 0108 	add.w	r1, r7, #8
 800fe70:	f107 030c 	add.w	r3, r7, #12
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7fd fc8b 	bl	800d790 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800fe7a:	6879      	ldr	r1, [r7, #4]
 800fe7c:	68bb      	ldr	r3, [r7, #8]
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	9202      	str	r2, [sp, #8]
 800fe82:	9301      	str	r3, [sp, #4]
 800fe84:	2302      	movs	r3, #2
 800fe86:	9300      	str	r3, [sp, #0]
 800fe88:	2300      	movs	r3, #0
 800fe8a:	460a      	mov	r2, r1
 800fe8c:	4912      	ldr	r1, [pc, #72]	@ (800fed8 <xTimerCreateTimerTask+0x8c>)
 800fe8e:	4813      	ldr	r0, [pc, #76]	@ (800fedc <xTimerCreateTimerTask+0x90>)
 800fe90:	f7fe febe 	bl	800ec10 <xTaskCreateStatic>
 800fe94:	4603      	mov	r3, r0
 800fe96:	4a12      	ldr	r2, [pc, #72]	@ (800fee0 <xTimerCreateTimerTask+0x94>)
 800fe98:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800fe9a:	4b11      	ldr	r3, [pc, #68]	@ (800fee0 <xTimerCreateTimerTask+0x94>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d001      	beq.n	800fea6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800fea2:	2301      	movs	r3, #1
 800fea4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d10d      	bne.n	800fec8 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 800feac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800feb0:	b672      	cpsid	i
 800feb2:	f383 8811 	msr	BASEPRI, r3
 800feb6:	f3bf 8f6f 	isb	sy
 800feba:	f3bf 8f4f 	dsb	sy
 800febe:	b662      	cpsie	i
 800fec0:	613b      	str	r3, [r7, #16]
}
 800fec2:	bf00      	nop
 800fec4:	bf00      	nop
 800fec6:	e7fd      	b.n	800fec4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800fec8:	697b      	ldr	r3, [r7, #20]
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3718      	adds	r7, #24
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	2000efd0 	.word	0x2000efd0
 800fed8:	080221b0 	.word	0x080221b0
 800fedc:	08010025 	.word	0x08010025
 800fee0:	2000efd4 	.word	0x2000efd4

0800fee4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b08a      	sub	sp, #40	@ 0x28
 800fee8:	af00      	add	r7, sp, #0
 800feea:	60f8      	str	r0, [r7, #12]
 800feec:	60b9      	str	r1, [r7, #8]
 800feee:	607a      	str	r2, [r7, #4]
 800fef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800fef2:	2300      	movs	r3, #0
 800fef4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d10d      	bne.n	800ff18 <xTimerGenericCommand+0x34>
	__asm volatile
 800fefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff00:	b672      	cpsid	i
 800ff02:	f383 8811 	msr	BASEPRI, r3
 800ff06:	f3bf 8f6f 	isb	sy
 800ff0a:	f3bf 8f4f 	dsb	sy
 800ff0e:	b662      	cpsie	i
 800ff10:	623b      	str	r3, [r7, #32]
}
 800ff12:	bf00      	nop
 800ff14:	bf00      	nop
 800ff16:	e7fd      	b.n	800ff14 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ff18:	4b19      	ldr	r3, [pc, #100]	@ (800ff80 <xTimerGenericCommand+0x9c>)
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d02a      	beq.n	800ff76 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	2b05      	cmp	r3, #5
 800ff30:	dc18      	bgt.n	800ff64 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ff32:	f7ff fda1 	bl	800fa78 <xTaskGetSchedulerState>
 800ff36:	4603      	mov	r3, r0
 800ff38:	2b02      	cmp	r3, #2
 800ff3a:	d109      	bne.n	800ff50 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ff3c:	4b10      	ldr	r3, [pc, #64]	@ (800ff80 <xTimerGenericCommand+0x9c>)
 800ff3e:	6818      	ldr	r0, [r3, #0]
 800ff40:	f107 0110 	add.w	r1, r7, #16
 800ff44:	2300      	movs	r3, #0
 800ff46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ff48:	f7fd ff7c 	bl	800de44 <xQueueGenericSend>
 800ff4c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ff4e:	e012      	b.n	800ff76 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ff50:	4b0b      	ldr	r3, [pc, #44]	@ (800ff80 <xTimerGenericCommand+0x9c>)
 800ff52:	6818      	ldr	r0, [r3, #0]
 800ff54:	f107 0110 	add.w	r1, r7, #16
 800ff58:	2300      	movs	r3, #0
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	f7fd ff72 	bl	800de44 <xQueueGenericSend>
 800ff60:	6278      	str	r0, [r7, #36]	@ 0x24
 800ff62:	e008      	b.n	800ff76 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ff64:	4b06      	ldr	r3, [pc, #24]	@ (800ff80 <xTimerGenericCommand+0x9c>)
 800ff66:	6818      	ldr	r0, [r3, #0]
 800ff68:	f107 0110 	add.w	r1, r7, #16
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	683a      	ldr	r2, [r7, #0]
 800ff70:	f7fe f872 	bl	800e058 <xQueueGenericSendFromISR>
 800ff74:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ff76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3728      	adds	r7, #40	@ 0x28
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	2000efd0 	.word	0x2000efd0

0800ff84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b088      	sub	sp, #32
 800ff88:	af02      	add	r7, sp, #8
 800ff8a:	6078      	str	r0, [r7, #4]
 800ff8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff8e:	4b24      	ldr	r3, [pc, #144]	@ (8010020 <prvProcessExpiredTimer+0x9c>)
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7fd fc9b 	bl	800d8d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ffa2:	697b      	ldr	r3, [r7, #20]
 800ffa4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ffa8:	f003 0304 	and.w	r3, r3, #4
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d025      	beq.n	800fffc <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	699a      	ldr	r2, [r3, #24]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	18d1      	adds	r1, r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	683a      	ldr	r2, [r7, #0]
 800ffbc:	6978      	ldr	r0, [r7, #20]
 800ffbe:	f000 f8d7 	bl	8010170 <prvInsertTimerInActiveList>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d022      	beq.n	801000e <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ffc8:	2300      	movs	r3, #0
 800ffca:	9300      	str	r3, [sp, #0]
 800ffcc:	2300      	movs	r3, #0
 800ffce:	687a      	ldr	r2, [r7, #4]
 800ffd0:	2100      	movs	r1, #0
 800ffd2:	6978      	ldr	r0, [r7, #20]
 800ffd4:	f7ff ff86 	bl	800fee4 <xTimerGenericCommand>
 800ffd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d116      	bne.n	801000e <prvProcessExpiredTimer+0x8a>
	__asm volatile
 800ffe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffe4:	b672      	cpsid	i
 800ffe6:	f383 8811 	msr	BASEPRI, r3
 800ffea:	f3bf 8f6f 	isb	sy
 800ffee:	f3bf 8f4f 	dsb	sy
 800fff2:	b662      	cpsie	i
 800fff4:	60fb      	str	r3, [r7, #12]
}
 800fff6:	bf00      	nop
 800fff8:	bf00      	nop
 800fffa:	e7fd      	b.n	800fff8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010002:	f023 0301 	bic.w	r3, r3, #1
 8010006:	b2da      	uxtb	r2, r3
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801000e:	697b      	ldr	r3, [r7, #20]
 8010010:	6a1b      	ldr	r3, [r3, #32]
 8010012:	6978      	ldr	r0, [r7, #20]
 8010014:	4798      	blx	r3
}
 8010016:	bf00      	nop
 8010018:	3718      	adds	r7, #24
 801001a:	46bd      	mov	sp, r7
 801001c:	bd80      	pop	{r7, pc}
 801001e:	bf00      	nop
 8010020:	2000efc8 	.word	0x2000efc8

08010024 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b084      	sub	sp, #16
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801002c:	f107 0308 	add.w	r3, r7, #8
 8010030:	4618      	mov	r0, r3
 8010032:	f000 f859 	bl	80100e8 <prvGetNextExpireTime>
 8010036:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	4619      	mov	r1, r3
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f000 f805 	bl	801004c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8010042:	f000 f8d7 	bl	80101f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010046:	bf00      	nop
 8010048:	e7f0      	b.n	801002c <prvTimerTask+0x8>
	...

0801004c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b084      	sub	sp, #16
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
 8010054:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8010056:	f7ff f8c3 	bl	800f1e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801005a:	f107 0308 	add.w	r3, r7, #8
 801005e:	4618      	mov	r0, r3
 8010060:	f000 f866 	bl	8010130 <prvSampleTimeNow>
 8010064:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d130      	bne.n	80100ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d10a      	bne.n	8010088 <prvProcessTimerOrBlockTask+0x3c>
 8010072:	687a      	ldr	r2, [r7, #4]
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	429a      	cmp	r2, r3
 8010078:	d806      	bhi.n	8010088 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801007a:	f7ff f8bf 	bl	800f1fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801007e:	68f9      	ldr	r1, [r7, #12]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f7ff ff7f 	bl	800ff84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8010086:	e024      	b.n	80100d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d008      	beq.n	80100a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801008e:	4b13      	ldr	r3, [pc, #76]	@ (80100dc <prvProcessTimerOrBlockTask+0x90>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d101      	bne.n	801009c <prvProcessTimerOrBlockTask+0x50>
 8010098:	2301      	movs	r3, #1
 801009a:	e000      	b.n	801009e <prvProcessTimerOrBlockTask+0x52>
 801009c:	2300      	movs	r3, #0
 801009e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80100a0:	4b0f      	ldr	r3, [pc, #60]	@ (80100e0 <prvProcessTimerOrBlockTask+0x94>)
 80100a2:	6818      	ldr	r0, [r3, #0]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	1ad3      	subs	r3, r2, r3
 80100aa:	683a      	ldr	r2, [r7, #0]
 80100ac:	4619      	mov	r1, r3
 80100ae:	f7fe fd7b 	bl	800eba8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80100b2:	f7ff f8a3 	bl	800f1fc <xTaskResumeAll>
 80100b6:	4603      	mov	r3, r0
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d10a      	bne.n	80100d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80100bc:	4b09      	ldr	r3, [pc, #36]	@ (80100e4 <prvProcessTimerOrBlockTask+0x98>)
 80100be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100c2:	601a      	str	r2, [r3, #0]
 80100c4:	f3bf 8f4f 	dsb	sy
 80100c8:	f3bf 8f6f 	isb	sy
}
 80100cc:	e001      	b.n	80100d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80100ce:	f7ff f895 	bl	800f1fc <xTaskResumeAll>
}
 80100d2:	bf00      	nop
 80100d4:	3710      	adds	r7, #16
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}
 80100da:	bf00      	nop
 80100dc:	2000efcc 	.word	0x2000efcc
 80100e0:	2000efd0 	.word	0x2000efd0
 80100e4:	e000ed04 	.word	0xe000ed04

080100e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80100e8:	b480      	push	{r7}
 80100ea:	b085      	sub	sp, #20
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80100f0:	4b0e      	ldr	r3, [pc, #56]	@ (801012c <prvGetNextExpireTime+0x44>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d101      	bne.n	80100fe <prvGetNextExpireTime+0x16>
 80100fa:	2201      	movs	r2, #1
 80100fc:	e000      	b.n	8010100 <prvGetNextExpireTime+0x18>
 80100fe:	2200      	movs	r2, #0
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d105      	bne.n	8010118 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801010c:	4b07      	ldr	r3, [pc, #28]	@ (801012c <prvGetNextExpireTime+0x44>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68db      	ldr	r3, [r3, #12]
 8010112:	681b      	ldr	r3, [r3, #0]
 8010114:	60fb      	str	r3, [r7, #12]
 8010116:	e001      	b.n	801011c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010118:	2300      	movs	r3, #0
 801011a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801011c:	68fb      	ldr	r3, [r7, #12]
}
 801011e:	4618      	mov	r0, r3
 8010120:	3714      	adds	r7, #20
 8010122:	46bd      	mov	sp, r7
 8010124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010128:	4770      	bx	lr
 801012a:	bf00      	nop
 801012c:	2000efc8 	.word	0x2000efc8

08010130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b084      	sub	sp, #16
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010138:	f7ff f900 	bl	800f33c <xTaskGetTickCount>
 801013c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801013e:	4b0b      	ldr	r3, [pc, #44]	@ (801016c <prvSampleTimeNow+0x3c>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	68fa      	ldr	r2, [r7, #12]
 8010144:	429a      	cmp	r2, r3
 8010146:	d205      	bcs.n	8010154 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010148:	f000 f940 	bl	80103cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2201      	movs	r2, #1
 8010150:	601a      	str	r2, [r3, #0]
 8010152:	e002      	b.n	801015a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	2200      	movs	r2, #0
 8010158:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801015a:	4a04      	ldr	r2, [pc, #16]	@ (801016c <prvSampleTimeNow+0x3c>)
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010160:	68fb      	ldr	r3, [r7, #12]
}
 8010162:	4618      	mov	r0, r3
 8010164:	3710      	adds	r7, #16
 8010166:	46bd      	mov	sp, r7
 8010168:	bd80      	pop	{r7, pc}
 801016a:	bf00      	nop
 801016c:	2000efd8 	.word	0x2000efd8

08010170 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b086      	sub	sp, #24
 8010174:	af00      	add	r7, sp, #0
 8010176:	60f8      	str	r0, [r7, #12]
 8010178:	60b9      	str	r1, [r7, #8]
 801017a:	607a      	str	r2, [r7, #4]
 801017c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801017e:	2300      	movs	r3, #0
 8010180:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	68ba      	ldr	r2, [r7, #8]
 8010186:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801018e:	68ba      	ldr	r2, [r7, #8]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	429a      	cmp	r2, r3
 8010194:	d812      	bhi.n	80101bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010196:	687a      	ldr	r2, [r7, #4]
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	1ad2      	subs	r2, r2, r3
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	699b      	ldr	r3, [r3, #24]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d302      	bcc.n	80101aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80101a4:	2301      	movs	r3, #1
 80101a6:	617b      	str	r3, [r7, #20]
 80101a8:	e01b      	b.n	80101e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80101aa:	4b10      	ldr	r3, [pc, #64]	@ (80101ec <prvInsertTimerInActiveList+0x7c>)
 80101ac:	681a      	ldr	r2, [r3, #0]
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	3304      	adds	r3, #4
 80101b2:	4619      	mov	r1, r3
 80101b4:	4610      	mov	r0, r2
 80101b6:	f7fd fb56 	bl	800d866 <vListInsert>
 80101ba:	e012      	b.n	80101e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80101bc:	687a      	ldr	r2, [r7, #4]
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d206      	bcs.n	80101d2 <prvInsertTimerInActiveList+0x62>
 80101c4:	68ba      	ldr	r2, [r7, #8]
 80101c6:	683b      	ldr	r3, [r7, #0]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d302      	bcc.n	80101d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80101cc:	2301      	movs	r3, #1
 80101ce:	617b      	str	r3, [r7, #20]
 80101d0:	e007      	b.n	80101e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80101d2:	4b07      	ldr	r3, [pc, #28]	@ (80101f0 <prvInsertTimerInActiveList+0x80>)
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	3304      	adds	r3, #4
 80101da:	4619      	mov	r1, r3
 80101dc:	4610      	mov	r0, r2
 80101de:	f7fd fb42 	bl	800d866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80101e2:	697b      	ldr	r3, [r7, #20]
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3718      	adds	r7, #24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	2000efcc 	.word	0x2000efcc
 80101f0:	2000efc8 	.word	0x2000efc8

080101f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80101f4:	b580      	push	{r7, lr}
 80101f6:	b08e      	sub	sp, #56	@ 0x38
 80101f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80101fa:	e0d4      	b.n	80103a6 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	da1b      	bge.n	801023a <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010202:	1d3b      	adds	r3, r7, #4
 8010204:	3304      	adds	r3, #4
 8010206:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801020a:	2b00      	cmp	r3, #0
 801020c:	d10d      	bne.n	801022a <prvProcessReceivedCommands+0x36>
	__asm volatile
 801020e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010212:	b672      	cpsid	i
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	b662      	cpsie	i
 8010222:	61fb      	str	r3, [r7, #28]
}
 8010224:	bf00      	nop
 8010226:	bf00      	nop
 8010228:	e7fd      	b.n	8010226 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801022a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010230:	6850      	ldr	r0, [r2, #4]
 8010232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010234:	6892      	ldr	r2, [r2, #8]
 8010236:	4611      	mov	r1, r2
 8010238:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	2b00      	cmp	r3, #0
 801023e:	f2c0 80b2 	blt.w	80103a6 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010248:	695b      	ldr	r3, [r3, #20]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d004      	beq.n	8010258 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801024e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010250:	3304      	adds	r3, #4
 8010252:	4618      	mov	r0, r3
 8010254:	f7fd fb40 	bl	800d8d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010258:	463b      	mov	r3, r7
 801025a:	4618      	mov	r0, r3
 801025c:	f7ff ff68 	bl	8010130 <prvSampleTimeNow>
 8010260:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2b09      	cmp	r3, #9
 8010266:	f200 809b 	bhi.w	80103a0 <prvProcessReceivedCommands+0x1ac>
 801026a:	a201      	add	r2, pc, #4	@ (adr r2, 8010270 <prvProcessReceivedCommands+0x7c>)
 801026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010270:	08010299 	.word	0x08010299
 8010274:	08010299 	.word	0x08010299
 8010278:	08010299 	.word	0x08010299
 801027c:	08010313 	.word	0x08010313
 8010280:	08010327 	.word	0x08010327
 8010284:	08010377 	.word	0x08010377
 8010288:	08010299 	.word	0x08010299
 801028c:	08010299 	.word	0x08010299
 8010290:	08010313 	.word	0x08010313
 8010294:	08010327 	.word	0x08010327
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801029a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801029e:	f043 0301 	orr.w	r3, r3, #1
 80102a2:	b2da      	uxtb	r2, r3
 80102a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ae:	699b      	ldr	r3, [r3, #24]
 80102b0:	18d1      	adds	r1, r2, r3
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102b8:	f7ff ff5a 	bl	8010170 <prvInsertTimerInActiveList>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d070      	beq.n	80103a4 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80102c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102c4:	6a1b      	ldr	r3, [r3, #32]
 80102c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80102ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80102d0:	f003 0304 	and.w	r3, r3, #4
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d065      	beq.n	80103a4 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80102d8:	68ba      	ldr	r2, [r7, #8]
 80102da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102dc:	699b      	ldr	r3, [r3, #24]
 80102de:	441a      	add	r2, r3
 80102e0:	2300      	movs	r3, #0
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	2300      	movs	r3, #0
 80102e6:	2100      	movs	r1, #0
 80102e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80102ea:	f7ff fdfb 	bl	800fee4 <xTimerGenericCommand>
 80102ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80102f0:	6a3b      	ldr	r3, [r7, #32]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d156      	bne.n	80103a4 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 80102f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102fa:	b672      	cpsid	i
 80102fc:	f383 8811 	msr	BASEPRI, r3
 8010300:	f3bf 8f6f 	isb	sy
 8010304:	f3bf 8f4f 	dsb	sy
 8010308:	b662      	cpsie	i
 801030a:	61bb      	str	r3, [r7, #24]
}
 801030c:	bf00      	nop
 801030e:	bf00      	nop
 8010310:	e7fd      	b.n	801030e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010318:	f023 0301 	bic.w	r3, r3, #1
 801031c:	b2da      	uxtb	r2, r3
 801031e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010320:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8010324:	e03f      	b.n	80103a6 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801032c:	f043 0301 	orr.w	r3, r3, #1
 8010330:	b2da      	uxtb	r2, r3
 8010332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010334:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010338:	68ba      	ldr	r2, [r7, #8]
 801033a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801033c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801033e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010340:	699b      	ldr	r3, [r3, #24]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d10d      	bne.n	8010362 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8010346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801034a:	b672      	cpsid	i
 801034c:	f383 8811 	msr	BASEPRI, r3
 8010350:	f3bf 8f6f 	isb	sy
 8010354:	f3bf 8f4f 	dsb	sy
 8010358:	b662      	cpsie	i
 801035a:	617b      	str	r3, [r7, #20]
}
 801035c:	bf00      	nop
 801035e:	bf00      	nop
 8010360:	e7fd      	b.n	801035e <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010364:	699a      	ldr	r2, [r3, #24]
 8010366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010368:	18d1      	adds	r1, r2, r3
 801036a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801036c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801036e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010370:	f7ff fefe 	bl	8010170 <prvInsertTimerInActiveList>
					break;
 8010374:	e017      	b.n	80103a6 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801037c:	f003 0302 	and.w	r3, r3, #2
 8010380:	2b00      	cmp	r3, #0
 8010382:	d103      	bne.n	801038c <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8010384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010386:	f000 fbd9 	bl	8010b3c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801038a:	e00c      	b.n	80103a6 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801038c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801038e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010392:	f023 0301 	bic.w	r3, r3, #1
 8010396:	b2da      	uxtb	r2, r3
 8010398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801039a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801039e:	e002      	b.n	80103a6 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 80103a0:	bf00      	nop
 80103a2:	e000      	b.n	80103a6 <prvProcessReceivedCommands+0x1b2>
					break;
 80103a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80103a6:	4b08      	ldr	r3, [pc, #32]	@ (80103c8 <prvProcessReceivedCommands+0x1d4>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	1d39      	adds	r1, r7, #4
 80103ac:	2200      	movs	r2, #0
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fd ff8e 	bl	800e2d0 <xQueueReceive>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	f47f af20 	bne.w	80101fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80103bc:	bf00      	nop
 80103be:	bf00      	nop
 80103c0:	3730      	adds	r7, #48	@ 0x30
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	2000efd0 	.word	0x2000efd0

080103cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b088      	sub	sp, #32
 80103d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80103d2:	e04b      	b.n	801046c <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80103d4:	4b2f      	ldr	r3, [pc, #188]	@ (8010494 <prvSwitchTimerLists+0xc8>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	68db      	ldr	r3, [r3, #12]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103de:	4b2d      	ldr	r3, [pc, #180]	@ (8010494 <prvSwitchTimerLists+0xc8>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80103e8:	68fb      	ldr	r3, [r7, #12]
 80103ea:	3304      	adds	r3, #4
 80103ec:	4618      	mov	r0, r3
 80103ee:	f7fd fa73 	bl	800d8d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	6a1b      	ldr	r3, [r3, #32]
 80103f6:	68f8      	ldr	r0, [r7, #12]
 80103f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010400:	f003 0304 	and.w	r3, r3, #4
 8010404:	2b00      	cmp	r3, #0
 8010406:	d031      	beq.n	801046c <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	699b      	ldr	r3, [r3, #24]
 801040c:	693a      	ldr	r2, [r7, #16]
 801040e:	4413      	add	r3, r2
 8010410:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010412:	68ba      	ldr	r2, [r7, #8]
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	429a      	cmp	r2, r3
 8010418:	d90e      	bls.n	8010438 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	68ba      	ldr	r2, [r7, #8]
 801041e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	68fa      	ldr	r2, [r7, #12]
 8010424:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010426:	4b1b      	ldr	r3, [pc, #108]	@ (8010494 <prvSwitchTimerLists+0xc8>)
 8010428:	681a      	ldr	r2, [r3, #0]
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	3304      	adds	r3, #4
 801042e:	4619      	mov	r1, r3
 8010430:	4610      	mov	r0, r2
 8010432:	f7fd fa18 	bl	800d866 <vListInsert>
 8010436:	e019      	b.n	801046c <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010438:	2300      	movs	r3, #0
 801043a:	9300      	str	r3, [sp, #0]
 801043c:	2300      	movs	r3, #0
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	2100      	movs	r1, #0
 8010442:	68f8      	ldr	r0, [r7, #12]
 8010444:	f7ff fd4e 	bl	800fee4 <xTimerGenericCommand>
 8010448:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d10d      	bne.n	801046c <prvSwitchTimerLists+0xa0>
	__asm volatile
 8010450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010454:	b672      	cpsid	i
 8010456:	f383 8811 	msr	BASEPRI, r3
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	f3bf 8f4f 	dsb	sy
 8010462:	b662      	cpsie	i
 8010464:	603b      	str	r3, [r7, #0]
}
 8010466:	bf00      	nop
 8010468:	bf00      	nop
 801046a:	e7fd      	b.n	8010468 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801046c:	4b09      	ldr	r3, [pc, #36]	@ (8010494 <prvSwitchTimerLists+0xc8>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1ae      	bne.n	80103d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010476:	4b07      	ldr	r3, [pc, #28]	@ (8010494 <prvSwitchTimerLists+0xc8>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801047c:	4b06      	ldr	r3, [pc, #24]	@ (8010498 <prvSwitchTimerLists+0xcc>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	4a04      	ldr	r2, [pc, #16]	@ (8010494 <prvSwitchTimerLists+0xc8>)
 8010482:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010484:	4a04      	ldr	r2, [pc, #16]	@ (8010498 <prvSwitchTimerLists+0xcc>)
 8010486:	697b      	ldr	r3, [r7, #20]
 8010488:	6013      	str	r3, [r2, #0]
}
 801048a:	bf00      	nop
 801048c:	3718      	adds	r7, #24
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	2000efc8 	.word	0x2000efc8
 8010498:	2000efcc 	.word	0x2000efcc

0801049c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b082      	sub	sp, #8
 80104a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80104a2:	f000 f94b 	bl	801073c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80104a6:	4b15      	ldr	r3, [pc, #84]	@ (80104fc <prvCheckForValidListAndQueue+0x60>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d120      	bne.n	80104f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80104ae:	4814      	ldr	r0, [pc, #80]	@ (8010500 <prvCheckForValidListAndQueue+0x64>)
 80104b0:	f7fd f988 	bl	800d7c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80104b4:	4813      	ldr	r0, [pc, #76]	@ (8010504 <prvCheckForValidListAndQueue+0x68>)
 80104b6:	f7fd f985 	bl	800d7c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80104ba:	4b13      	ldr	r3, [pc, #76]	@ (8010508 <prvCheckForValidListAndQueue+0x6c>)
 80104bc:	4a10      	ldr	r2, [pc, #64]	@ (8010500 <prvCheckForValidListAndQueue+0x64>)
 80104be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80104c0:	4b12      	ldr	r3, [pc, #72]	@ (801050c <prvCheckForValidListAndQueue+0x70>)
 80104c2:	4a10      	ldr	r2, [pc, #64]	@ (8010504 <prvCheckForValidListAndQueue+0x68>)
 80104c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80104c6:	2300      	movs	r3, #0
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	4b11      	ldr	r3, [pc, #68]	@ (8010510 <prvCheckForValidListAndQueue+0x74>)
 80104cc:	4a11      	ldr	r2, [pc, #68]	@ (8010514 <prvCheckForValidListAndQueue+0x78>)
 80104ce:	2110      	movs	r1, #16
 80104d0:	200a      	movs	r0, #10
 80104d2:	f7fd fa97 	bl	800da04 <xQueueGenericCreateStatic>
 80104d6:	4603      	mov	r3, r0
 80104d8:	4a08      	ldr	r2, [pc, #32]	@ (80104fc <prvCheckForValidListAndQueue+0x60>)
 80104da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80104dc:	4b07      	ldr	r3, [pc, #28]	@ (80104fc <prvCheckForValidListAndQueue+0x60>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d005      	beq.n	80104f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80104e4:	4b05      	ldr	r3, [pc, #20]	@ (80104fc <prvCheckForValidListAndQueue+0x60>)
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	490b      	ldr	r1, [pc, #44]	@ (8010518 <prvCheckForValidListAndQueue+0x7c>)
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7fe fb08 	bl	800eb00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80104f0:	f000 f95a 	bl	80107a8 <vPortExitCritical>
}
 80104f4:	bf00      	nop
 80104f6:	46bd      	mov	sp, r7
 80104f8:	bd80      	pop	{r7, pc}
 80104fa:	bf00      	nop
 80104fc:	2000efd0 	.word	0x2000efd0
 8010500:	2000efa0 	.word	0x2000efa0
 8010504:	2000efb4 	.word	0x2000efb4
 8010508:	2000efc8 	.word	0x2000efc8
 801050c:	2000efcc 	.word	0x2000efcc
 8010510:	2000f07c 	.word	0x2000f07c
 8010514:	2000efdc 	.word	0x2000efdc
 8010518:	080221b8 	.word	0x080221b8

0801051c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801051c:	b480      	push	{r7}
 801051e:	b085      	sub	sp, #20
 8010520:	af00      	add	r7, sp, #0
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	3b04      	subs	r3, #4
 801052c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8010534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	3b04      	subs	r3, #4
 801053a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	f023 0201 	bic.w	r2, r3, #1
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	3b04      	subs	r3, #4
 801054a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801054c:	4a0c      	ldr	r2, [pc, #48]	@ (8010580 <pxPortInitialiseStack+0x64>)
 801054e:	68fb      	ldr	r3, [r7, #12]
 8010550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	3b14      	subs	r3, #20
 8010556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010558:	687a      	ldr	r2, [r7, #4]
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3b04      	subs	r3, #4
 8010562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	f06f 0202 	mvn.w	r2, #2
 801056a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	3b20      	subs	r3, #32
 8010570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010572:	68fb      	ldr	r3, [r7, #12]
}
 8010574:	4618      	mov	r0, r3
 8010576:	3714      	adds	r7, #20
 8010578:	46bd      	mov	sp, r7
 801057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057e:	4770      	bx	lr
 8010580:	08010585 	.word	0x08010585

08010584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010584:	b480      	push	{r7}
 8010586:	b085      	sub	sp, #20
 8010588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801058a:	2300      	movs	r3, #0
 801058c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801058e:	4b15      	ldr	r3, [pc, #84]	@ (80105e4 <prvTaskExitError+0x60>)
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010596:	d00d      	beq.n	80105b4 <prvTaskExitError+0x30>
	__asm volatile
 8010598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801059c:	b672      	cpsid	i
 801059e:	f383 8811 	msr	BASEPRI, r3
 80105a2:	f3bf 8f6f 	isb	sy
 80105a6:	f3bf 8f4f 	dsb	sy
 80105aa:	b662      	cpsie	i
 80105ac:	60fb      	str	r3, [r7, #12]
}
 80105ae:	bf00      	nop
 80105b0:	bf00      	nop
 80105b2:	e7fd      	b.n	80105b0 <prvTaskExitError+0x2c>
	__asm volatile
 80105b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80105b8:	b672      	cpsid	i
 80105ba:	f383 8811 	msr	BASEPRI, r3
 80105be:	f3bf 8f6f 	isb	sy
 80105c2:	f3bf 8f4f 	dsb	sy
 80105c6:	b662      	cpsie	i
 80105c8:	60bb      	str	r3, [r7, #8]
}
 80105ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80105cc:	bf00      	nop
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d0fc      	beq.n	80105ce <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80105d4:	bf00      	nop
 80105d6:	bf00      	nop
 80105d8:	3714      	adds	r7, #20
 80105da:	46bd      	mov	sp, r7
 80105dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e0:	4770      	bx	lr
 80105e2:	bf00      	nop
 80105e4:	20000020 	.word	0x20000020
	...

080105f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80105f0:	4b07      	ldr	r3, [pc, #28]	@ (8010610 <pxCurrentTCBConst2>)
 80105f2:	6819      	ldr	r1, [r3, #0]
 80105f4:	6808      	ldr	r0, [r1, #0]
 80105f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105fa:	f380 8809 	msr	PSP, r0
 80105fe:	f3bf 8f6f 	isb	sy
 8010602:	f04f 0000 	mov.w	r0, #0
 8010606:	f380 8811 	msr	BASEPRI, r0
 801060a:	4770      	bx	lr
 801060c:	f3af 8000 	nop.w

08010610 <pxCurrentTCBConst2>:
 8010610:	2000eaa0 	.word	0x2000eaa0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010614:	bf00      	nop
 8010616:	bf00      	nop

08010618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010618:	4808      	ldr	r0, [pc, #32]	@ (801063c <prvPortStartFirstTask+0x24>)
 801061a:	6800      	ldr	r0, [r0, #0]
 801061c:	6800      	ldr	r0, [r0, #0]
 801061e:	f380 8808 	msr	MSP, r0
 8010622:	f04f 0000 	mov.w	r0, #0
 8010626:	f380 8814 	msr	CONTROL, r0
 801062a:	b662      	cpsie	i
 801062c:	b661      	cpsie	f
 801062e:	f3bf 8f4f 	dsb	sy
 8010632:	f3bf 8f6f 	isb	sy
 8010636:	df00      	svc	0
 8010638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801063a:	bf00      	nop
 801063c:	e000ed08 	.word	0xe000ed08

08010640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010646:	4b37      	ldr	r3, [pc, #220]	@ (8010724 <xPortStartScheduler+0xe4>)
 8010648:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	781b      	ldrb	r3, [r3, #0]
 801064e:	b2db      	uxtb	r3, r3
 8010650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	22ff      	movs	r2, #255	@ 0xff
 8010656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	781b      	ldrb	r3, [r3, #0]
 801065c:	b2db      	uxtb	r3, r3
 801065e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010660:	78fb      	ldrb	r3, [r7, #3]
 8010662:	b2db      	uxtb	r3, r3
 8010664:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8010668:	b2da      	uxtb	r2, r3
 801066a:	4b2f      	ldr	r3, [pc, #188]	@ (8010728 <xPortStartScheduler+0xe8>)
 801066c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801066e:	4b2f      	ldr	r3, [pc, #188]	@ (801072c <xPortStartScheduler+0xec>)
 8010670:	2207      	movs	r2, #7
 8010672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010674:	e009      	b.n	801068a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010676:	4b2d      	ldr	r3, [pc, #180]	@ (801072c <xPortStartScheduler+0xec>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	3b01      	subs	r3, #1
 801067c:	4a2b      	ldr	r2, [pc, #172]	@ (801072c <xPortStartScheduler+0xec>)
 801067e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010680:	78fb      	ldrb	r3, [r7, #3]
 8010682:	b2db      	uxtb	r3, r3
 8010684:	005b      	lsls	r3, r3, #1
 8010686:	b2db      	uxtb	r3, r3
 8010688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801068a:	78fb      	ldrb	r3, [r7, #3]
 801068c:	b2db      	uxtb	r3, r3
 801068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010692:	2b80      	cmp	r3, #128	@ 0x80
 8010694:	d0ef      	beq.n	8010676 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010696:	4b25      	ldr	r3, [pc, #148]	@ (801072c <xPortStartScheduler+0xec>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f1c3 0307 	rsb	r3, r3, #7
 801069e:	2b04      	cmp	r3, #4
 80106a0:	d00d      	beq.n	80106be <xPortStartScheduler+0x7e>
	__asm volatile
 80106a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106a6:	b672      	cpsid	i
 80106a8:	f383 8811 	msr	BASEPRI, r3
 80106ac:	f3bf 8f6f 	isb	sy
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	b662      	cpsie	i
 80106b6:	60bb      	str	r3, [r7, #8]
}
 80106b8:	bf00      	nop
 80106ba:	bf00      	nop
 80106bc:	e7fd      	b.n	80106ba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80106be:	4b1b      	ldr	r3, [pc, #108]	@ (801072c <xPortStartScheduler+0xec>)
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	021b      	lsls	r3, r3, #8
 80106c4:	4a19      	ldr	r2, [pc, #100]	@ (801072c <xPortStartScheduler+0xec>)
 80106c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80106c8:	4b18      	ldr	r3, [pc, #96]	@ (801072c <xPortStartScheduler+0xec>)
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80106d0:	4a16      	ldr	r2, [pc, #88]	@ (801072c <xPortStartScheduler+0xec>)
 80106d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	b2da      	uxtb	r2, r3
 80106d8:	68fb      	ldr	r3, [r7, #12]
 80106da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80106dc:	4b14      	ldr	r3, [pc, #80]	@ (8010730 <xPortStartScheduler+0xf0>)
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	4a13      	ldr	r2, [pc, #76]	@ (8010730 <xPortStartScheduler+0xf0>)
 80106e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80106e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80106e8:	4b11      	ldr	r3, [pc, #68]	@ (8010730 <xPortStartScheduler+0xf0>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	4a10      	ldr	r2, [pc, #64]	@ (8010730 <xPortStartScheduler+0xf0>)
 80106ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80106f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80106f4:	f000 f8dc 	bl	80108b0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80106f8:	4b0e      	ldr	r3, [pc, #56]	@ (8010734 <xPortStartScheduler+0xf4>)
 80106fa:	2200      	movs	r2, #0
 80106fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80106fe:	f000 f8fb 	bl	80108f8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010702:	4b0d      	ldr	r3, [pc, #52]	@ (8010738 <xPortStartScheduler+0xf8>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4a0c      	ldr	r2, [pc, #48]	@ (8010738 <xPortStartScheduler+0xf8>)
 8010708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801070c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801070e:	f7ff ff83 	bl	8010618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010712:	f7fe fef1 	bl	800f4f8 <vTaskSwitchContext>
	prvTaskExitError();
 8010716:	f7ff ff35 	bl	8010584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}
 8010724:	e000e400 	.word	0xe000e400
 8010728:	2000f0cc 	.word	0x2000f0cc
 801072c:	2000f0d0 	.word	0x2000f0d0
 8010730:	e000ed20 	.word	0xe000ed20
 8010734:	20000020 	.word	0x20000020
 8010738:	e000ef34 	.word	0xe000ef34

0801073c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
	__asm volatile
 8010742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010746:	b672      	cpsid	i
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	b662      	cpsie	i
 8010756:	607b      	str	r3, [r7, #4]
}
 8010758:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801075a:	4b11      	ldr	r3, [pc, #68]	@ (80107a0 <vPortEnterCritical+0x64>)
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	3301      	adds	r3, #1
 8010760:	4a0f      	ldr	r2, [pc, #60]	@ (80107a0 <vPortEnterCritical+0x64>)
 8010762:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010764:	4b0e      	ldr	r3, [pc, #56]	@ (80107a0 <vPortEnterCritical+0x64>)
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	2b01      	cmp	r3, #1
 801076a:	d112      	bne.n	8010792 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801076c:	4b0d      	ldr	r3, [pc, #52]	@ (80107a4 <vPortEnterCritical+0x68>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	b2db      	uxtb	r3, r3
 8010772:	2b00      	cmp	r3, #0
 8010774:	d00d      	beq.n	8010792 <vPortEnterCritical+0x56>
	__asm volatile
 8010776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801077a:	b672      	cpsid	i
 801077c:	f383 8811 	msr	BASEPRI, r3
 8010780:	f3bf 8f6f 	isb	sy
 8010784:	f3bf 8f4f 	dsb	sy
 8010788:	b662      	cpsie	i
 801078a:	603b      	str	r3, [r7, #0]
}
 801078c:	bf00      	nop
 801078e:	bf00      	nop
 8010790:	e7fd      	b.n	801078e <vPortEnterCritical+0x52>
	}
}
 8010792:	bf00      	nop
 8010794:	370c      	adds	r7, #12
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr
 801079e:	bf00      	nop
 80107a0:	20000020 	.word	0x20000020
 80107a4:	e000ed04 	.word	0xe000ed04

080107a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80107a8:	b480      	push	{r7}
 80107aa:	b083      	sub	sp, #12
 80107ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80107ae:	4b13      	ldr	r3, [pc, #76]	@ (80107fc <vPortExitCritical+0x54>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d10d      	bne.n	80107d2 <vPortExitCritical+0x2a>
	__asm volatile
 80107b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107ba:	b672      	cpsid	i
 80107bc:	f383 8811 	msr	BASEPRI, r3
 80107c0:	f3bf 8f6f 	isb	sy
 80107c4:	f3bf 8f4f 	dsb	sy
 80107c8:	b662      	cpsie	i
 80107ca:	607b      	str	r3, [r7, #4]
}
 80107cc:	bf00      	nop
 80107ce:	bf00      	nop
 80107d0:	e7fd      	b.n	80107ce <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80107d2:	4b0a      	ldr	r3, [pc, #40]	@ (80107fc <vPortExitCritical+0x54>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	3b01      	subs	r3, #1
 80107d8:	4a08      	ldr	r2, [pc, #32]	@ (80107fc <vPortExitCritical+0x54>)
 80107da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80107dc:	4b07      	ldr	r3, [pc, #28]	@ (80107fc <vPortExitCritical+0x54>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d105      	bne.n	80107f0 <vPortExitCritical+0x48>
 80107e4:	2300      	movs	r3, #0
 80107e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	f383 8811 	msr	BASEPRI, r3
}
 80107ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80107f0:	bf00      	nop
 80107f2:	370c      	adds	r7, #12
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr
 80107fc:	20000020 	.word	0x20000020

08010800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010800:	f3ef 8009 	mrs	r0, PSP
 8010804:	f3bf 8f6f 	isb	sy
 8010808:	4b15      	ldr	r3, [pc, #84]	@ (8010860 <pxCurrentTCBConst>)
 801080a:	681a      	ldr	r2, [r3, #0]
 801080c:	f01e 0f10 	tst.w	lr, #16
 8010810:	bf08      	it	eq
 8010812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801081a:	6010      	str	r0, [r2, #0]
 801081c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010824:	b672      	cpsid	i
 8010826:	f380 8811 	msr	BASEPRI, r0
 801082a:	f3bf 8f4f 	dsb	sy
 801082e:	f3bf 8f6f 	isb	sy
 8010832:	b662      	cpsie	i
 8010834:	f7fe fe60 	bl	800f4f8 <vTaskSwitchContext>
 8010838:	f04f 0000 	mov.w	r0, #0
 801083c:	f380 8811 	msr	BASEPRI, r0
 8010840:	bc09      	pop	{r0, r3}
 8010842:	6819      	ldr	r1, [r3, #0]
 8010844:	6808      	ldr	r0, [r1, #0]
 8010846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801084a:	f01e 0f10 	tst.w	lr, #16
 801084e:	bf08      	it	eq
 8010850:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010854:	f380 8809 	msr	PSP, r0
 8010858:	f3bf 8f6f 	isb	sy
 801085c:	4770      	bx	lr
 801085e:	bf00      	nop

08010860 <pxCurrentTCBConst>:
 8010860:	2000eaa0 	.word	0x2000eaa0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010864:	bf00      	nop
 8010866:	bf00      	nop

08010868 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
	__asm volatile
 801086e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010872:	b672      	cpsid	i
 8010874:	f383 8811 	msr	BASEPRI, r3
 8010878:	f3bf 8f6f 	isb	sy
 801087c:	f3bf 8f4f 	dsb	sy
 8010880:	b662      	cpsie	i
 8010882:	607b      	str	r3, [r7, #4]
}
 8010884:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010886:	f7fe fd7b 	bl	800f380 <xTaskIncrementTick>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d003      	beq.n	8010898 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010890:	4b06      	ldr	r3, [pc, #24]	@ (80108ac <SysTick_Handler+0x44>)
 8010892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010896:	601a      	str	r2, [r3, #0]
 8010898:	2300      	movs	r3, #0
 801089a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	f383 8811 	msr	BASEPRI, r3
}
 80108a2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80108a4:	bf00      	nop
 80108a6:	3708      	adds	r7, #8
 80108a8:	46bd      	mov	sp, r7
 80108aa:	bd80      	pop	{r7, pc}
 80108ac:	e000ed04 	.word	0xe000ed04

080108b0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80108b0:	b480      	push	{r7}
 80108b2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80108b4:	4b0b      	ldr	r3, [pc, #44]	@ (80108e4 <vPortSetupTimerInterrupt+0x34>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80108ba:	4b0b      	ldr	r3, [pc, #44]	@ (80108e8 <vPortSetupTimerInterrupt+0x38>)
 80108bc:	2200      	movs	r2, #0
 80108be:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80108c0:	4b0a      	ldr	r3, [pc, #40]	@ (80108ec <vPortSetupTimerInterrupt+0x3c>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	4a0a      	ldr	r2, [pc, #40]	@ (80108f0 <vPortSetupTimerInterrupt+0x40>)
 80108c6:	fba2 2303 	umull	r2, r3, r2, r3
 80108ca:	099b      	lsrs	r3, r3, #6
 80108cc:	4a09      	ldr	r2, [pc, #36]	@ (80108f4 <vPortSetupTimerInterrupt+0x44>)
 80108ce:	3b01      	subs	r3, #1
 80108d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80108d2:	4b04      	ldr	r3, [pc, #16]	@ (80108e4 <vPortSetupTimerInterrupt+0x34>)
 80108d4:	2207      	movs	r2, #7
 80108d6:	601a      	str	r2, [r3, #0]
}
 80108d8:	bf00      	nop
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	e000e010 	.word	0xe000e010
 80108e8:	e000e018 	.word	0xe000e018
 80108ec:	20000000 	.word	0x20000000
 80108f0:	10624dd3 	.word	0x10624dd3
 80108f4:	e000e014 	.word	0xe000e014

080108f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80108f8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8010908 <vPortEnableVFP+0x10>
 80108fc:	6801      	ldr	r1, [r0, #0]
 80108fe:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8010902:	6001      	str	r1, [r0, #0]
 8010904:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010906:	bf00      	nop
 8010908:	e000ed88 	.word	0xe000ed88

0801090c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801090c:	b480      	push	{r7}
 801090e:	b085      	sub	sp, #20
 8010910:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010912:	f3ef 8305 	mrs	r3, IPSR
 8010916:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2b0f      	cmp	r3, #15
 801091c:	d917      	bls.n	801094e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801091e:	4a1a      	ldr	r2, [pc, #104]	@ (8010988 <vPortValidateInterruptPriority+0x7c>)
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	4413      	add	r3, r2
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010928:	4b18      	ldr	r3, [pc, #96]	@ (801098c <vPortValidateInterruptPriority+0x80>)
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	7afa      	ldrb	r2, [r7, #11]
 801092e:	429a      	cmp	r2, r3
 8010930:	d20d      	bcs.n	801094e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8010932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010936:	b672      	cpsid	i
 8010938:	f383 8811 	msr	BASEPRI, r3
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	b662      	cpsie	i
 8010946:	607b      	str	r3, [r7, #4]
}
 8010948:	bf00      	nop
 801094a:	bf00      	nop
 801094c:	e7fd      	b.n	801094a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801094e:	4b10      	ldr	r3, [pc, #64]	@ (8010990 <vPortValidateInterruptPriority+0x84>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8010956:	4b0f      	ldr	r3, [pc, #60]	@ (8010994 <vPortValidateInterruptPriority+0x88>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	429a      	cmp	r2, r3
 801095c:	d90d      	bls.n	801097a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 801095e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010962:	b672      	cpsid	i
 8010964:	f383 8811 	msr	BASEPRI, r3
 8010968:	f3bf 8f6f 	isb	sy
 801096c:	f3bf 8f4f 	dsb	sy
 8010970:	b662      	cpsie	i
 8010972:	603b      	str	r3, [r7, #0]
}
 8010974:	bf00      	nop
 8010976:	bf00      	nop
 8010978:	e7fd      	b.n	8010976 <vPortValidateInterruptPriority+0x6a>
	}
 801097a:	bf00      	nop
 801097c:	3714      	adds	r7, #20
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr
 8010986:	bf00      	nop
 8010988:	e000e3f0 	.word	0xe000e3f0
 801098c:	2000f0cc 	.word	0x2000f0cc
 8010990:	e000ed0c 	.word	0xe000ed0c
 8010994:	2000f0d0 	.word	0x2000f0d0

08010998 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b08a      	sub	sp, #40	@ 0x28
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80109a0:	2300      	movs	r3, #0
 80109a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80109a4:	f7fe fc1c 	bl	800f1e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80109a8:	4b5f      	ldr	r3, [pc, #380]	@ (8010b28 <pvPortMalloc+0x190>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d101      	bne.n	80109b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80109b0:	f000 f93c 	bl	8010c2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80109b4:	4b5d      	ldr	r3, [pc, #372]	@ (8010b2c <pvPortMalloc+0x194>)
 80109b6:	681a      	ldr	r2, [r3, #0]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	4013      	ands	r3, r2
 80109bc:	2b00      	cmp	r3, #0
 80109be:	f040 8094 	bne.w	8010aea <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d020      	beq.n	8010a0a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 80109c8:	2208      	movs	r2, #8
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4413      	add	r3, r2
 80109ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f003 0307 	and.w	r3, r3, #7
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d017      	beq.n	8010a0a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f023 0307 	bic.w	r3, r3, #7
 80109e0:	3308      	adds	r3, #8
 80109e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f003 0307 	and.w	r3, r3, #7
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d00d      	beq.n	8010a0a <pvPortMalloc+0x72>
	__asm volatile
 80109ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109f2:	b672      	cpsid	i
 80109f4:	f383 8811 	msr	BASEPRI, r3
 80109f8:	f3bf 8f6f 	isb	sy
 80109fc:	f3bf 8f4f 	dsb	sy
 8010a00:	b662      	cpsie	i
 8010a02:	617b      	str	r3, [r7, #20]
}
 8010a04:	bf00      	nop
 8010a06:	bf00      	nop
 8010a08:	e7fd      	b.n	8010a06 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d06c      	beq.n	8010aea <pvPortMalloc+0x152>
 8010a10:	4b47      	ldr	r3, [pc, #284]	@ (8010b30 <pvPortMalloc+0x198>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	687a      	ldr	r2, [r7, #4]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d867      	bhi.n	8010aea <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010a1a:	4b46      	ldr	r3, [pc, #280]	@ (8010b34 <pvPortMalloc+0x19c>)
 8010a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010a1e:	4b45      	ldr	r3, [pc, #276]	@ (8010b34 <pvPortMalloc+0x19c>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a24:	e004      	b.n	8010a30 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8010a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a32:	685b      	ldr	r3, [r3, #4]
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d903      	bls.n	8010a42 <pvPortMalloc+0xaa>
 8010a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d1f1      	bne.n	8010a26 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010a42:	4b39      	ldr	r3, [pc, #228]	@ (8010b28 <pvPortMalloc+0x190>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a48:	429a      	cmp	r2, r3
 8010a4a:	d04e      	beq.n	8010aea <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a4c:	6a3b      	ldr	r3, [r7, #32]
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	2208      	movs	r2, #8
 8010a52:	4413      	add	r3, r2
 8010a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a58:	681a      	ldr	r2, [r3, #0]
 8010a5a:	6a3b      	ldr	r3, [r7, #32]
 8010a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a60:	685a      	ldr	r2, [r3, #4]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	1ad2      	subs	r2, r2, r3
 8010a66:	2308      	movs	r3, #8
 8010a68:	005b      	lsls	r3, r3, #1
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d922      	bls.n	8010ab4 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4413      	add	r3, r2
 8010a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	f003 0307 	and.w	r3, r3, #7
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d00d      	beq.n	8010a9c <pvPortMalloc+0x104>
	__asm volatile
 8010a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a84:	b672      	cpsid	i
 8010a86:	f383 8811 	msr	BASEPRI, r3
 8010a8a:	f3bf 8f6f 	isb	sy
 8010a8e:	f3bf 8f4f 	dsb	sy
 8010a92:	b662      	cpsie	i
 8010a94:	613b      	str	r3, [r7, #16]
}
 8010a96:	bf00      	nop
 8010a98:	bf00      	nop
 8010a9a:	e7fd      	b.n	8010a98 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a9e:	685a      	ldr	r2, [r3, #4]
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	1ad2      	subs	r2, r2, r3
 8010aa4:	69bb      	ldr	r3, [r7, #24]
 8010aa6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aaa:	687a      	ldr	r2, [r7, #4]
 8010aac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010aae:	69b8      	ldr	r0, [r7, #24]
 8010ab0:	f000 f91e 	bl	8010cf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8010b30 <pvPortMalloc+0x198>)
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aba:	685b      	ldr	r3, [r3, #4]
 8010abc:	1ad3      	subs	r3, r2, r3
 8010abe:	4a1c      	ldr	r2, [pc, #112]	@ (8010b30 <pvPortMalloc+0x198>)
 8010ac0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8010b30 <pvPortMalloc+0x198>)
 8010ac4:	681a      	ldr	r2, [r3, #0]
 8010ac6:	4b1c      	ldr	r3, [pc, #112]	@ (8010b38 <pvPortMalloc+0x1a0>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d203      	bcs.n	8010ad6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010ace:	4b18      	ldr	r3, [pc, #96]	@ (8010b30 <pvPortMalloc+0x198>)
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a19      	ldr	r2, [pc, #100]	@ (8010b38 <pvPortMalloc+0x1a0>)
 8010ad4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ad8:	685a      	ldr	r2, [r3, #4]
 8010ada:	4b14      	ldr	r3, [pc, #80]	@ (8010b2c <pvPortMalloc+0x194>)
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	431a      	orrs	r2, r3
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ae6:	2200      	movs	r2, #0
 8010ae8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010aea:	f7fe fb87 	bl	800f1fc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8010aee:	69fb      	ldr	r3, [r7, #28]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d101      	bne.n	8010af8 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8010af4:	f7ef ff0a 	bl	800090c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	f003 0307 	and.w	r3, r3, #7
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d00d      	beq.n	8010b1e <pvPortMalloc+0x186>
	__asm volatile
 8010b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b06:	b672      	cpsid	i
 8010b08:	f383 8811 	msr	BASEPRI, r3
 8010b0c:	f3bf 8f6f 	isb	sy
 8010b10:	f3bf 8f4f 	dsb	sy
 8010b14:	b662      	cpsie	i
 8010b16:	60fb      	str	r3, [r7, #12]
}
 8010b18:	bf00      	nop
 8010b1a:	bf00      	nop
 8010b1c:	e7fd      	b.n	8010b1a <pvPortMalloc+0x182>
	return pvReturn;
 8010b1e:	69fb      	ldr	r3, [r7, #28]
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3728      	adds	r7, #40	@ 0x28
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}
 8010b28:	200270dc 	.word	0x200270dc
 8010b2c:	200270e8 	.word	0x200270e8
 8010b30:	200270e0 	.word	0x200270e0
 8010b34:	200270d4 	.word	0x200270d4
 8010b38:	200270e4 	.word	0x200270e4

08010b3c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d04e      	beq.n	8010bec <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010b4e:	2308      	movs	r3, #8
 8010b50:	425b      	negs	r3, r3
 8010b52:	697a      	ldr	r2, [r7, #20]
 8010b54:	4413      	add	r3, r2
 8010b56:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010b58:	697b      	ldr	r3, [r7, #20]
 8010b5a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	685a      	ldr	r2, [r3, #4]
 8010b60:	4b24      	ldr	r3, [pc, #144]	@ (8010bf4 <vPortFree+0xb8>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	4013      	ands	r3, r2
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d10d      	bne.n	8010b86 <vPortFree+0x4a>
	__asm volatile
 8010b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b6e:	b672      	cpsid	i
 8010b70:	f383 8811 	msr	BASEPRI, r3
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	b662      	cpsie	i
 8010b7e:	60fb      	str	r3, [r7, #12]
}
 8010b80:	bf00      	nop
 8010b82:	bf00      	nop
 8010b84:	e7fd      	b.n	8010b82 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d00d      	beq.n	8010baa <vPortFree+0x6e>
	__asm volatile
 8010b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b92:	b672      	cpsid	i
 8010b94:	f383 8811 	msr	BASEPRI, r3
 8010b98:	f3bf 8f6f 	isb	sy
 8010b9c:	f3bf 8f4f 	dsb	sy
 8010ba0:	b662      	cpsie	i
 8010ba2:	60bb      	str	r3, [r7, #8]
}
 8010ba4:	bf00      	nop
 8010ba6:	bf00      	nop
 8010ba8:	e7fd      	b.n	8010ba6 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	685a      	ldr	r2, [r3, #4]
 8010bae:	4b11      	ldr	r3, [pc, #68]	@ (8010bf4 <vPortFree+0xb8>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	4013      	ands	r3, r2
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d019      	beq.n	8010bec <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d115      	bne.n	8010bec <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	685a      	ldr	r2, [r3, #4]
 8010bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8010bf4 <vPortFree+0xb8>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	43db      	mvns	r3, r3
 8010bca:	401a      	ands	r2, r3
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010bd0:	f7fe fb06 	bl	800f1e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010bd4:	693b      	ldr	r3, [r7, #16]
 8010bd6:	685a      	ldr	r2, [r3, #4]
 8010bd8:	4b07      	ldr	r3, [pc, #28]	@ (8010bf8 <vPortFree+0xbc>)
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	4413      	add	r3, r2
 8010bde:	4a06      	ldr	r2, [pc, #24]	@ (8010bf8 <vPortFree+0xbc>)
 8010be0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010be2:	6938      	ldr	r0, [r7, #16]
 8010be4:	f000 f884 	bl	8010cf0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010be8:	f7fe fb08 	bl	800f1fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010bec:	bf00      	nop
 8010bee:	3718      	adds	r7, #24
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}
 8010bf4:	200270e8 	.word	0x200270e8
 8010bf8:	200270e0 	.word	0x200270e0

08010bfc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010bfc:	b480      	push	{r7}
 8010bfe:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010c00:	4b03      	ldr	r3, [pc, #12]	@ (8010c10 <xPortGetFreeHeapSize+0x14>)
 8010c02:	681b      	ldr	r3, [r3, #0]
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	46bd      	mov	sp, r7
 8010c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0c:	4770      	bx	lr
 8010c0e:	bf00      	nop
 8010c10:	200270e0 	.word	0x200270e0

08010c14 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8010c14:	b480      	push	{r7}
 8010c16:	af00      	add	r7, sp, #0
	return xMinimumEverFreeBytesRemaining;
 8010c18:	4b03      	ldr	r3, [pc, #12]	@ (8010c28 <xPortGetMinimumEverFreeHeapSize+0x14>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr
 8010c26:	bf00      	nop
 8010c28:	200270e4 	.word	0x200270e4

08010c2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	b085      	sub	sp, #20
 8010c30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010c32:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
 8010c36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010c38:	4b27      	ldr	r3, [pc, #156]	@ (8010cd8 <prvHeapInit+0xac>)
 8010c3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	f003 0307 	and.w	r3, r3, #7
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d00c      	beq.n	8010c60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	3307      	adds	r3, #7
 8010c4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f023 0307 	bic.w	r3, r3, #7
 8010c52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010c54:	68ba      	ldr	r2, [r7, #8]
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	1ad3      	subs	r3, r2, r3
 8010c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8010cd8 <prvHeapInit+0xac>)
 8010c5c:	4413      	add	r3, r2
 8010c5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010c64:	4a1d      	ldr	r2, [pc, #116]	@ (8010cdc <prvHeapInit+0xb0>)
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8010cdc <prvHeapInit+0xb0>)
 8010c6c:	2200      	movs	r2, #0
 8010c6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	4413      	add	r3, r2
 8010c76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010c78:	2208      	movs	r2, #8
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	1a9b      	subs	r3, r3, r2
 8010c7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	f023 0307 	bic.w	r3, r3, #7
 8010c86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	4a15      	ldr	r2, [pc, #84]	@ (8010ce0 <prvHeapInit+0xb4>)
 8010c8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010c8e:	4b14      	ldr	r3, [pc, #80]	@ (8010ce0 <prvHeapInit+0xb4>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	2200      	movs	r2, #0
 8010c94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010c96:	4b12      	ldr	r3, [pc, #72]	@ (8010ce0 <prvHeapInit+0xb4>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010ca2:	683b      	ldr	r3, [r7, #0]
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	1ad2      	subs	r2, r2, r3
 8010ca8:	683b      	ldr	r3, [r7, #0]
 8010caa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010cac:	4b0c      	ldr	r3, [pc, #48]	@ (8010ce0 <prvHeapInit+0xb4>)
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	685b      	ldr	r3, [r3, #4]
 8010cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8010ce4 <prvHeapInit+0xb8>)
 8010cba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	685b      	ldr	r3, [r3, #4]
 8010cc0:	4a09      	ldr	r2, [pc, #36]	@ (8010ce8 <prvHeapInit+0xbc>)
 8010cc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010cc4:	4b09      	ldr	r3, [pc, #36]	@ (8010cec <prvHeapInit+0xc0>)
 8010cc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8010cca:	601a      	str	r2, [r3, #0]
}
 8010ccc:	bf00      	nop
 8010cce:	3714      	adds	r7, #20
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd6:	4770      	bx	lr
 8010cd8:	2000f0d4 	.word	0x2000f0d4
 8010cdc:	200270d4 	.word	0x200270d4
 8010ce0:	200270dc 	.word	0x200270dc
 8010ce4:	200270e4 	.word	0x200270e4
 8010ce8:	200270e0 	.word	0x200270e0
 8010cec:	200270e8 	.word	0x200270e8

08010cf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010cf0:	b480      	push	{r7}
 8010cf2:	b085      	sub	sp, #20
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010cf8:	4b28      	ldr	r3, [pc, #160]	@ (8010d9c <prvInsertBlockIntoFreeList+0xac>)
 8010cfa:	60fb      	str	r3, [r7, #12]
 8010cfc:	e002      	b.n	8010d04 <prvInsertBlockIntoFreeList+0x14>
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	60fb      	str	r3, [r7, #12]
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	687a      	ldr	r2, [r7, #4]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d8f7      	bhi.n	8010cfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	68ba      	ldr	r2, [r7, #8]
 8010d18:	4413      	add	r3, r2
 8010d1a:	687a      	ldr	r2, [r7, #4]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d108      	bne.n	8010d32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	685a      	ldr	r2, [r3, #4]
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	441a      	add	r2, r3
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	685b      	ldr	r3, [r3, #4]
 8010d3a:	68ba      	ldr	r2, [r7, #8]
 8010d3c:	441a      	add	r2, r3
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	429a      	cmp	r2, r3
 8010d44:	d118      	bne.n	8010d78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	681a      	ldr	r2, [r3, #0]
 8010d4a:	4b15      	ldr	r3, [pc, #84]	@ (8010da0 <prvInsertBlockIntoFreeList+0xb0>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	429a      	cmp	r2, r3
 8010d50:	d00d      	beq.n	8010d6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	441a      	add	r2, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	681a      	ldr	r2, [r3, #0]
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	601a      	str	r2, [r3, #0]
 8010d6c:	e008      	b.n	8010d80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8010da0 <prvInsertBlockIntoFreeList+0xb0>)
 8010d70:	681a      	ldr	r2, [r3, #0]
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	601a      	str	r2, [r3, #0]
 8010d76:	e003      	b.n	8010d80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	681a      	ldr	r2, [r3, #0]
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010d80:	68fa      	ldr	r2, [r7, #12]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	d002      	beq.n	8010d8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	687a      	ldr	r2, [r7, #4]
 8010d8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d8e:	bf00      	nop
 8010d90:	3714      	adds	r7, #20
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	200270d4 	.word	0x200270d4
 8010da0:	200270dc 	.word	0x200270dc

08010da4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 8010dae:	683b      	ldr	r3, [r7, #0]
 8010db0:	22fa      	movs	r2, #250	@ 0xfa
 8010db2:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	330c      	adds	r3, #12
 8010dba:	461a      	mov	r2, r3
 8010dbc:	6839      	ldr	r1, [r7, #0]
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f002 f9c2 	bl	8013148 <tcpip_send_msg_wait_sem>
 8010dc4:	4603      	mov	r3, r0
 8010dc6:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d103      	bne.n	8010dd8 <netconn_apimsg+0x34>
    return apimsg->err;
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010dd6:	e001      	b.n	8010ddc <netconn_apimsg+0x38>
  }
  return err;
 8010dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3710      	adds	r7, #16
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}

08010de4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b08c      	sub	sp, #48	@ 0x30
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	4603      	mov	r3, r0
 8010dec:	603a      	str	r2, [r7, #0]
 8010dee:	71fb      	strb	r3, [r7, #7]
 8010df0:	460b      	mov	r3, r1
 8010df2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010df4:	79fb      	ldrb	r3, [r7, #7]
 8010df6:	6839      	ldr	r1, [r7, #0]
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f000 ff61 	bl	8011cc0 <netconn_alloc>
 8010dfe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 8010e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d054      	beq.n	8010eb0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010e06:	79bb      	ldrb	r3, [r7, #6]
 8010e08:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e0c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010e0e:	f107 0308 	add.w	r3, r7, #8
 8010e12:	4619      	mov	r1, r3
 8010e14:	4829      	ldr	r0, [pc, #164]	@ (8010ebc <netconn_new_with_proto_and_callback+0xd8>)
 8010e16:	f7ff ffc5 	bl	8010da4 <netconn_apimsg>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 8010e20:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d043      	beq.n	8010eb0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e2a:	685b      	ldr	r3, [r3, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d005      	beq.n	8010e3c <netconn_new_with_proto_and_callback+0x58>
 8010e30:	4b23      	ldr	r3, [pc, #140]	@ (8010ec0 <netconn_new_with_proto_and_callback+0xdc>)
 8010e32:	22a3      	movs	r2, #163	@ 0xa3
 8010e34:	4923      	ldr	r1, [pc, #140]	@ (8010ec4 <netconn_new_with_proto_and_callback+0xe0>)
 8010e36:	4824      	ldr	r0, [pc, #144]	@ (8010ec8 <netconn_new_with_proto_and_callback+0xe4>)
 8010e38:	f010 f84c 	bl	8020ed4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e3e:	3310      	adds	r3, #16
 8010e40:	4618      	mov	r0, r3
 8010e42:	f00e fd59 	bl	801f8f8 <sys_mbox_valid>
 8010e46:	4603      	mov	r3, r0
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d105      	bne.n	8010e58 <netconn_new_with_proto_and_callback+0x74>
 8010e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8010ec0 <netconn_new_with_proto_and_callback+0xdc>)
 8010e4e:	22a4      	movs	r2, #164	@ 0xa4
 8010e50:	491e      	ldr	r1, [pc, #120]	@ (8010ecc <netconn_new_with_proto_and_callback+0xe8>)
 8010e52:	481d      	ldr	r0, [pc, #116]	@ (8010ec8 <netconn_new_with_proto_and_callback+0xe4>)
 8010e54:	f010 f83e 	bl	8020ed4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e5a:	3314      	adds	r3, #20
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f00e fd4b 	bl	801f8f8 <sys_mbox_valid>
 8010e62:	4603      	mov	r3, r0
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d005      	beq.n	8010e74 <netconn_new_with_proto_and_callback+0x90>
 8010e68:	4b15      	ldr	r3, [pc, #84]	@ (8010ec0 <netconn_new_with_proto_and_callback+0xdc>)
 8010e6a:	22a6      	movs	r2, #166	@ 0xa6
 8010e6c:	4918      	ldr	r1, [pc, #96]	@ (8010ed0 <netconn_new_with_proto_and_callback+0xec>)
 8010e6e:	4816      	ldr	r0, [pc, #88]	@ (8010ec8 <netconn_new_with_proto_and_callback+0xe4>)
 8010e70:	f010 f830 	bl	8020ed4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e76:	330c      	adds	r3, #12
 8010e78:	4618      	mov	r0, r3
 8010e7a:	f00e fdf7 	bl	801fa6c <sys_sem_valid>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d105      	bne.n	8010e90 <netconn_new_with_proto_and_callback+0xac>
 8010e84:	4b0e      	ldr	r3, [pc, #56]	@ (8010ec0 <netconn_new_with_proto_and_callback+0xdc>)
 8010e86:	22a9      	movs	r2, #169	@ 0xa9
 8010e88:	4912      	ldr	r1, [pc, #72]	@ (8010ed4 <netconn_new_with_proto_and_callback+0xf0>)
 8010e8a:	480f      	ldr	r0, [pc, #60]	@ (8010ec8 <netconn_new_with_proto_and_callback+0xe4>)
 8010e8c:	f010 f822 	bl	8020ed4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8010e90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e92:	330c      	adds	r3, #12
 8010e94:	4618      	mov	r0, r3
 8010e96:	f00e fdd1 	bl	801fa3c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e9c:	3310      	adds	r3, #16
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f00e fc96 	bl	801f7d0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010ea4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010ea6:	2007      	movs	r0, #7
 8010ea8:	f002 fff6 	bl	8013e98 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010eac:	2300      	movs	r3, #0
 8010eae:	e000      	b.n	8010eb2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010eb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3730      	adds	r7, #48	@ 0x30
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	08011c95 	.word	0x08011c95
 8010ec0:	080221c0 	.word	0x080221c0
 8010ec4:	080221f4 	.word	0x080221f4
 8010ec8:	08022218 	.word	0x08022218
 8010ecc:	08022240 	.word	0x08022240
 8010ed0:	08022258 	.word	0x08022258
 8010ed4:	0802227c 	.word	0x0802227c

08010ed8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b08c      	sub	sp, #48	@ 0x30
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d101      	bne.n	8010eea <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	e014      	b.n	8010f14 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010eee:	2329      	movs	r3, #41	@ 0x29
 8010ef0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010ef2:	f107 030c 	add.w	r3, r7, #12
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	4808      	ldr	r0, [pc, #32]	@ (8010f1c <netconn_prepare_delete+0x44>)
 8010efa:	f7ff ff53 	bl	8010da4 <netconn_apimsg>
 8010efe:	4603      	mov	r3, r0
 8010f00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010f04:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d002      	beq.n	8010f12 <netconn_prepare_delete+0x3a>
    return err;
 8010f0c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8010f10:	e000      	b.n	8010f14 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010f12:	2300      	movs	r3, #0
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3730      	adds	r7, #48	@ 0x30
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	08012201 	.word	0x08012201

08010f20 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
 8010f26:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d101      	bne.n	8010f32 <netconn_delete+0x12>
    return ERR_OK;
 8010f2e:	2300      	movs	r3, #0
 8010f30:	e00d      	b.n	8010f4e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	f7ff ffd0 	bl	8010ed8 <netconn_prepare_delete>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8010f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d102      	bne.n	8010f4a <netconn_delete+0x2a>
    netconn_free(conn);
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f000 ff29 	bl	8011d9c <netconn_free>
  }
  return err;
 8010f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
	...

08010f58 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b08e      	sub	sp, #56	@ 0x38
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	4613      	mov	r3, r2
 8010f64:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d109      	bne.n	8010f80 <netconn_bind+0x28>
 8010f6c:	4b11      	ldr	r3, [pc, #68]	@ (8010fb4 <netconn_bind+0x5c>)
 8010f6e:	f44f 729c 	mov.w	r2, #312	@ 0x138
 8010f72:	4911      	ldr	r1, [pc, #68]	@ (8010fb8 <netconn_bind+0x60>)
 8010f74:	4811      	ldr	r0, [pc, #68]	@ (8010fbc <netconn_bind+0x64>)
 8010f76:	f00f ffad 	bl	8020ed4 <iprintf>
 8010f7a:	f06f 030f 	mvn.w	r3, #15
 8010f7e:	e015      	b.n	8010fac <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010f80:	68bb      	ldr	r3, [r7, #8]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d101      	bne.n	8010f8a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8010f86:	4b0e      	ldr	r3, [pc, #56]	@ (8010fc0 <netconn_bind+0x68>)
 8010f88:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010f92:	88fb      	ldrh	r3, [r7, #6]
 8010f94:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8010f96:	f107 0314 	add.w	r3, r7, #20
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	4809      	ldr	r0, [pc, #36]	@ (8010fc4 <netconn_bind+0x6c>)
 8010f9e:	f7ff ff01 	bl	8010da4 <netconn_apimsg>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8010fa8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8010fac:	4618      	mov	r0, r3
 8010fae:	3738      	adds	r7, #56	@ 0x38
 8010fb0:	46bd      	mov	sp, r7
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	080221c0 	.word	0x080221c0
 8010fb8:	080222f8 	.word	0x080222f8
 8010fbc:	08022218 	.word	0x08022218
 8010fc0:	08026dbc 	.word	0x08026dbc
 8010fc4:	080123c9 	.word	0x080123c9

08010fc8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b08e      	sub	sp, #56	@ 0x38
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d109      	bne.n	8010ff0 <netconn_connect+0x28>
 8010fdc:	4b11      	ldr	r3, [pc, #68]	@ (8011024 <netconn_connect+0x5c>)
 8010fde:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 8010fe2:	4911      	ldr	r1, [pc, #68]	@ (8011028 <netconn_connect+0x60>)
 8010fe4:	4811      	ldr	r0, [pc, #68]	@ (801102c <netconn_connect+0x64>)
 8010fe6:	f00f ff75 	bl	8020ed4 <iprintf>
 8010fea:	f06f 030f 	mvn.w	r3, #15
 8010fee:	e015      	b.n	801101c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d101      	bne.n	8010ffa <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8010ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8011030 <netconn_connect+0x68>)
 8010ff8:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8011002:	88fb      	ldrh	r3, [r7, #6]
 8011004:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8011006:	f107 0314 	add.w	r3, r7, #20
 801100a:	4619      	mov	r1, r3
 801100c:	4809      	ldr	r0, [pc, #36]	@ (8011034 <netconn_connect+0x6c>)
 801100e:	f7ff fec9 	bl	8010da4 <netconn_apimsg>
 8011012:	4603      	mov	r3, r0
 8011014:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011018:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 801101c:	4618      	mov	r0, r3
 801101e:	3738      	adds	r7, #56	@ 0x38
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	080221c0 	.word	0x080221c0
 8011028:	08022334 	.word	0x08022334
 801102c:	08022218 	.word	0x08022218
 8011030:	08026dbc 	.word	0x08026dbc
 8011034:	0801255d 	.word	0x0801255d

08011038 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8011038:	b580      	push	{r7, lr}
 801103a:	b08c      	sub	sp, #48	@ 0x30
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d109      	bne.n	801105a <netconn_disconnect+0x22>
 8011046:	4b0d      	ldr	r3, [pc, #52]	@ (801107c <netconn_disconnect+0x44>)
 8011048:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 801104c:	490c      	ldr	r1, [pc, #48]	@ (8011080 <netconn_disconnect+0x48>)
 801104e:	480d      	ldr	r0, [pc, #52]	@ (8011084 <netconn_disconnect+0x4c>)
 8011050:	f00f ff40 	bl	8020ed4 <iprintf>
 8011054:	f06f 030f 	mvn.w	r3, #15
 8011058:	e00c      	b.n	8011074 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 801105e:	f107 030c 	add.w	r3, r7, #12
 8011062:	4619      	mov	r1, r3
 8011064:	4808      	ldr	r0, [pc, #32]	@ (8011088 <netconn_disconnect+0x50>)
 8011066:	f7ff fe9d 	bl	8010da4 <netconn_apimsg>
 801106a:	4603      	mov	r3, r0
 801106c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011070:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8011074:	4618      	mov	r0, r3
 8011076:	3730      	adds	r7, #48	@ 0x30
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	080221c0 	.word	0x080221c0
 8011080:	08022354 	.word	0x08022354
 8011084:	08022218 	.word	0x08022218
 8011088:	080126d9 	.word	0x080126d9

0801108c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b088      	sub	sp, #32
 8011090:	af00      	add	r7, sp, #0
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	4613      	mov	r3, r2
 8011098:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801109a:	2300      	movs	r3, #0
 801109c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d109      	bne.n	80110b8 <netconn_recv_data+0x2c>
 80110a4:	4b58      	ldr	r3, [pc, #352]	@ (8011208 <netconn_recv_data+0x17c>)
 80110a6:	f44f 7212 	mov.w	r2, #584	@ 0x248
 80110aa:	4958      	ldr	r1, [pc, #352]	@ (801120c <netconn_recv_data+0x180>)
 80110ac:	4858      	ldr	r0, [pc, #352]	@ (8011210 <netconn_recv_data+0x184>)
 80110ae:	f00f ff11 	bl	8020ed4 <iprintf>
 80110b2:	f06f 030f 	mvn.w	r3, #15
 80110b6:	e0a2      	b.n	80111fe <netconn_recv_data+0x172>
  *new_buf = NULL;
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	2200      	movs	r2, #0
 80110bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d109      	bne.n	80110d8 <netconn_recv_data+0x4c>
 80110c4:	4b50      	ldr	r3, [pc, #320]	@ (8011208 <netconn_recv_data+0x17c>)
 80110c6:	f240 224a 	movw	r2, #586	@ 0x24a
 80110ca:	4952      	ldr	r1, [pc, #328]	@ (8011214 <netconn_recv_data+0x188>)
 80110cc:	4850      	ldr	r0, [pc, #320]	@ (8011210 <netconn_recv_data+0x184>)
 80110ce:	f00f ff01 	bl	8020ed4 <iprintf>
 80110d2:	f06f 030f 	mvn.w	r3, #15
 80110d6:	e092      	b.n	80111fe <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	3310      	adds	r3, #16
 80110dc:	4618      	mov	r0, r3
 80110de:	f00e fc0b 	bl	801f8f8 <sys_mbox_valid>
 80110e2:	4603      	mov	r3, r0
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d10e      	bne.n	8011106 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80110e8:	68f8      	ldr	r0, [r7, #12]
 80110ea:	f000 fa23 	bl	8011534 <netconn_err>
 80110ee:	4603      	mov	r3, r0
 80110f0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80110f2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d002      	beq.n	8011100 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80110fa:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80110fe:	e07e      	b.n	80111fe <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011100:	f06f 030a 	mvn.w	r3, #10
 8011104:	e07b      	b.n	80111fe <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	7f1b      	ldrb	r3, [r3, #28]
 801110a:	f003 0302 	and.w	r3, r3, #2
 801110e:	2b00      	cmp	r3, #0
 8011110:	d10f      	bne.n	8011132 <netconn_recv_data+0xa6>
 8011112:	79fb      	ldrb	r3, [r7, #7]
 8011114:	f003 0304 	and.w	r3, r3, #4
 8011118:	2b00      	cmp	r3, #0
 801111a:	d10a      	bne.n	8011132 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	7f1b      	ldrb	r3, [r3, #28]
 8011120:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8011124:	2b00      	cmp	r3, #0
 8011126:	d104      	bne.n	8011132 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d023      	beq.n	801117a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	3310      	adds	r3, #16
 8011136:	f107 0218 	add.w	r2, r7, #24
 801113a:	4611      	mov	r1, r2
 801113c:	4618      	mov	r0, r3
 801113e:	f00e fbc4 	bl	801f8ca <sys_arch_mbox_tryfetch>
 8011142:	4603      	mov	r3, r0
 8011144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011148:	d11f      	bne.n	801118a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801114a:	68f8      	ldr	r0, [r7, #12]
 801114c:	f000 f9f2 	bl	8011534 <netconn_err>
 8011150:	4603      	mov	r3, r0
 8011152:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8011154:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011158:	2b00      	cmp	r3, #0
 801115a:	d002      	beq.n	8011162 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 801115c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011160:	e04d      	b.n	80111fe <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	7f1b      	ldrb	r3, [r3, #28]
 8011166:	f003 0301 	and.w	r3, r3, #1
 801116a:	2b00      	cmp	r3, #0
 801116c:	d002      	beq.n	8011174 <netconn_recv_data+0xe8>
        return ERR_CONN;
 801116e:	f06f 030a 	mvn.w	r3, #10
 8011172:	e044      	b.n	80111fe <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8011174:	f06f 0306 	mvn.w	r3, #6
 8011178:	e041      	b.n	80111fe <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	3310      	adds	r3, #16
 801117e:	f107 0118 	add.w	r1, r7, #24
 8011182:	2200      	movs	r2, #0
 8011184:	4618      	mov	r0, r3
 8011186:	f00e fb6f 	bl	801f868 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	781b      	ldrb	r3, [r3, #0]
 801118e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011192:	2b10      	cmp	r3, #16
 8011194:	d117      	bne.n	80111c6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8011196:	69bb      	ldr	r3, [r7, #24]
 8011198:	f107 0217 	add.w	r2, r7, #23
 801119c:	4611      	mov	r1, r2
 801119e:	4618      	mov	r0, r3
 80111a0:	f000 fa1a 	bl	80115d8 <lwip_netconn_is_err_msg>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d009      	beq.n	80111be <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80111aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80111ae:	f113 0f0f 	cmn.w	r3, #15
 80111b2:	d101      	bne.n	80111b8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80111b4:	2300      	movs	r3, #0
 80111b6:	e022      	b.n	80111fe <netconn_recv_data+0x172>
      }
      return err;
 80111b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80111bc:	e01f      	b.n	80111fe <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	891b      	ldrh	r3, [r3, #8]
 80111c2:	83fb      	strh	r3, [r7, #30]
 80111c4:	e00d      	b.n	80111e2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d106      	bne.n	80111da <netconn_recv_data+0x14e>
 80111cc:	4b0e      	ldr	r3, [pc, #56]	@ (8011208 <netconn_recv_data+0x17c>)
 80111ce:	f240 2291 	movw	r2, #657	@ 0x291
 80111d2:	4911      	ldr	r1, [pc, #68]	@ (8011218 <netconn_recv_data+0x18c>)
 80111d4:	480e      	ldr	r0, [pc, #56]	@ (8011210 <netconn_recv_data+0x184>)
 80111d6:	f00f fe7d 	bl	8020ed4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	891b      	ldrh	r3, [r3, #8]
 80111e0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d005      	beq.n	80111f6 <netconn_recv_data+0x16a>
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80111ee:	8bfa      	ldrh	r2, [r7, #30]
 80111f0:	2101      	movs	r1, #1
 80111f2:	68f8      	ldr	r0, [r7, #12]
 80111f4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80111f6:	69ba      	ldr	r2, [r7, #24]
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80111fc:	2300      	movs	r3, #0
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3720      	adds	r7, #32
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	080221c0 	.word	0x080221c0
 801120c:	080223d8 	.word	0x080223d8
 8011210:	08022218 	.word	0x08022218
 8011214:	080223f8 	.word	0x080223f8
 8011218:	08022414 	.word	0x08022414

0801121c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b084      	sub	sp, #16
 8011220:	af00      	add	r7, sp, #0
 8011222:	60f8      	str	r0, [r7, #12]
 8011224:	60b9      	str	r1, [r7, #8]
 8011226:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d005      	beq.n	801123a <netconn_tcp_recvd_msg+0x1e>
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011236:	2b10      	cmp	r3, #16
 8011238:	d009      	beq.n	801124e <netconn_tcp_recvd_msg+0x32>
 801123a:	4b0c      	ldr	r3, [pc, #48]	@ (801126c <netconn_tcp_recvd_msg+0x50>)
 801123c:	f240 22a7 	movw	r2, #679	@ 0x2a7
 8011240:	490b      	ldr	r1, [pc, #44]	@ (8011270 <netconn_tcp_recvd_msg+0x54>)
 8011242:	480c      	ldr	r0, [pc, #48]	@ (8011274 <netconn_tcp_recvd_msg+0x58>)
 8011244:	f00f fe46 	bl	8020ed4 <iprintf>
 8011248:	f06f 030f 	mvn.w	r3, #15
 801124c:	e00a      	b.n	8011264 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	68fa      	ldr	r2, [r7, #12]
 8011252:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	68ba      	ldr	r2, [r7, #8]
 8011258:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 801125a:	6879      	ldr	r1, [r7, #4]
 801125c:	4806      	ldr	r0, [pc, #24]	@ (8011278 <netconn_tcp_recvd_msg+0x5c>)
 801125e:	f7ff fda1 	bl	8010da4 <netconn_apimsg>
 8011262:	4603      	mov	r3, r0
}
 8011264:	4618      	mov	r0, r3
 8011266:	3710      	adds	r7, #16
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}
 801126c:	080221c0 	.word	0x080221c0
 8011270:	08022420 	.word	0x08022420
 8011274:	08022218 	.word	0x08022218
 8011278:	080127af 	.word	0x080127af

0801127c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b090      	sub	sp, #64	@ 0x40
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	4613      	mov	r3, r2
 8011288:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	3310      	adds	r3, #16
 801128e:	4618      	mov	r0, r3
 8011290:	f00e fb32 	bl	801f8f8 <sys_mbox_valid>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d102      	bne.n	80112a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 801129a:	f06f 030a 	mvn.w	r3, #10
 801129e:	e06d      	b.n	801137c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	7f1b      	ldrb	r3, [r3, #28]
 80112a4:	b25b      	sxtb	r3, r3
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	da07      	bge.n	80112ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	7f1b      	ldrb	r3, [r3, #28]
 80112ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80112b2:	b2da      	uxtb	r2, r3
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80112b8:	e039      	b.n	801132e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80112ba:	79fb      	ldrb	r3, [r7, #7]
 80112bc:	461a      	mov	r2, r3
 80112be:	68b9      	ldr	r1, [r7, #8]
 80112c0:	68f8      	ldr	r0, [r7, #12]
 80112c2:	f7ff fee3 	bl	801108c <netconn_recv_data>
 80112c6:	4603      	mov	r3, r0
 80112c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80112cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d002      	beq.n	80112da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80112d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80112d8:	e050      	b.n	801137c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80112da:	68bb      	ldr	r3, [r7, #8]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80112e0:	79fb      	ldrb	r3, [r7, #7]
 80112e2:	f003 0308 	and.w	r3, r3, #8
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d10e      	bne.n	8011308 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80112ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d002      	beq.n	80112f6 <netconn_recv_data_tcp+0x7a>
 80112f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112f2:	891b      	ldrh	r3, [r3, #8]
 80112f4:	e000      	b.n	80112f8 <netconn_recv_data_tcp+0x7c>
 80112f6:	2301      	movs	r3, #1
 80112f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80112fa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80112fc:	f107 0214 	add.w	r2, r7, #20
 8011300:	4619      	mov	r1, r3
 8011302:	68f8      	ldr	r0, [r7, #12]
 8011304:	f7ff ff8a 	bl	801121c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801130a:	2b00      	cmp	r3, #0
 801130c:	d134      	bne.n	8011378 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 801130e:	79fb      	ldrb	r3, [r7, #7]
 8011310:	f003 0310 	and.w	r3, r3, #16
 8011314:	2b00      	cmp	r3, #0
 8011316:	d009      	beq.n	801132c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	7f1b      	ldrb	r3, [r3, #28]
 801131c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8011320:	b2da      	uxtb	r2, r3
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8011326:	f06f 0306 	mvn.w	r3, #6
 801132a:	e027      	b.n	801137c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 801132c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011332:	2b00      	cmp	r3, #0
 8011334:	d005      	beq.n	8011342 <netconn_recv_data_tcp+0xc6>
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801133a:	2200      	movs	r2, #0
 801133c:	2101      	movs	r1, #1
 801133e:	68f8      	ldr	r0, [r7, #12]
 8011340:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	685b      	ldr	r3, [r3, #4]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d10f      	bne.n	801136a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	f000 f8f2 	bl	8011534 <netconn_err>
 8011350:	4603      	mov	r3, r0
 8011352:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8011356:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 801135a:	2b00      	cmp	r3, #0
 801135c:	d002      	beq.n	8011364 <netconn_recv_data_tcp+0xe8>
          return err;
 801135e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8011362:	e00b      	b.n	801137c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8011364:	f06f 030d 	mvn.w	r3, #13
 8011368:	e008      	b.n	801137c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801136a:	2101      	movs	r1, #1
 801136c:	68f8      	ldr	r0, [r7, #12]
 801136e:	f000 f8b1 	bl	80114d4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8011372:	f06f 030e 	mvn.w	r3, #14
 8011376:	e001      	b.n	801137c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011378:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 801137c:	4618      	mov	r0, r3
 801137e:	3740      	adds	r7, #64	@ 0x40
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b086      	sub	sp, #24
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
 801138c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 801138e:	2300      	movs	r3, #0
 8011390:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d109      	bne.n	80113ac <netconn_recv+0x28>
 8011398:	4b32      	ldr	r3, [pc, #200]	@ (8011464 <netconn_recv+0xe0>)
 801139a:	f240 3263 	movw	r2, #867	@ 0x363
 801139e:	4932      	ldr	r1, [pc, #200]	@ (8011468 <netconn_recv+0xe4>)
 80113a0:	4832      	ldr	r0, [pc, #200]	@ (801146c <netconn_recv+0xe8>)
 80113a2:	f00f fd97 	bl	8020ed4 <iprintf>
 80113a6:	f06f 030f 	mvn.w	r3, #15
 80113aa:	e056      	b.n	801145a <netconn_recv+0xd6>
  *new_buf = NULL;
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2200      	movs	r2, #0
 80113b0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d109      	bne.n	80113cc <netconn_recv+0x48>
 80113b8:	4b2a      	ldr	r3, [pc, #168]	@ (8011464 <netconn_recv+0xe0>)
 80113ba:	f240 3265 	movw	r2, #869	@ 0x365
 80113be:	492c      	ldr	r1, [pc, #176]	@ (8011470 <netconn_recv+0xec>)
 80113c0:	482a      	ldr	r0, [pc, #168]	@ (801146c <netconn_recv+0xe8>)
 80113c2:	f00f fd87 	bl	8020ed4 <iprintf>
 80113c6:	f06f 030f 	mvn.w	r3, #15
 80113ca:	e046      	b.n	801145a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80113d4:	2b10      	cmp	r3, #16
 80113d6:	d13a      	bne.n	801144e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80113d8:	2300      	movs	r3, #0
 80113da:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80113dc:	2006      	movs	r0, #6
 80113de:	f002 fcdf 	bl	8013da0 <memp_malloc>
 80113e2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d102      	bne.n	80113f0 <netconn_recv+0x6c>
      return ERR_MEM;
 80113ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80113ee:	e034      	b.n	801145a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80113f0:	f107 030c 	add.w	r3, r7, #12
 80113f4:	2200      	movs	r2, #0
 80113f6:	4619      	mov	r1, r3
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f7ff ff3f 	bl	801127c <netconn_recv_data_tcp>
 80113fe:	4603      	mov	r3, r0
 8011400:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011402:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d006      	beq.n	8011418 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 801140a:	6979      	ldr	r1, [r7, #20]
 801140c:	2006      	movs	r0, #6
 801140e:	f002 fd43 	bl	8013e98 <memp_free>
      return err;
 8011412:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011416:	e020      	b.n	801145a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d106      	bne.n	801142c <netconn_recv+0xa8>
 801141e:	4b11      	ldr	r3, [pc, #68]	@ (8011464 <netconn_recv+0xe0>)
 8011420:	f240 3279 	movw	r2, #889	@ 0x379
 8011424:	4913      	ldr	r1, [pc, #76]	@ (8011474 <netconn_recv+0xf0>)
 8011426:	4811      	ldr	r0, [pc, #68]	@ (801146c <netconn_recv+0xe8>)
 8011428:	f00f fd54 	bl	8020ed4 <iprintf>

    buf->p = p;
 801142c:	68fa      	ldr	r2, [r7, #12]
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011432:	68fa      	ldr	r2, [r7, #12]
 8011434:	697b      	ldr	r3, [r7, #20]
 8011436:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011438:	697b      	ldr	r3, [r7, #20]
 801143a:	2200      	movs	r2, #0
 801143c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	2200      	movs	r2, #0
 8011442:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	697a      	ldr	r2, [r7, #20]
 8011448:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801144a:	2300      	movs	r3, #0
 801144c:	e005      	b.n	801145a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 801144e:	2200      	movs	r2, #0
 8011450:	6839      	ldr	r1, [r7, #0]
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f7ff fe1a 	bl	801108c <netconn_recv_data>
 8011458:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801145a:	4618      	mov	r0, r3
 801145c:	3718      	adds	r7, #24
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	080221c0 	.word	0x080221c0
 8011468:	080223d8 	.word	0x080223d8
 801146c:	08022218 	.word	0x08022218
 8011470:	080223f8 	.word	0x080223f8
 8011474:	08022470 	.word	0x08022470

08011478 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b08c      	sub	sp, #48	@ 0x30
 801147c:	af00      	add	r7, sp, #0
 801147e:	6078      	str	r0, [r7, #4]
 8011480:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d109      	bne.n	801149c <netconn_send+0x24>
 8011488:	4b0e      	ldr	r3, [pc, #56]	@ (80114c4 <netconn_send+0x4c>)
 801148a:	f240 32b2 	movw	r2, #946	@ 0x3b2
 801148e:	490e      	ldr	r1, [pc, #56]	@ (80114c8 <netconn_send+0x50>)
 8011490:	480e      	ldr	r0, [pc, #56]	@ (80114cc <netconn_send+0x54>)
 8011492:	f00f fd1f 	bl	8020ed4 <iprintf>
 8011496:	f06f 030f 	mvn.w	r3, #15
 801149a:	e00e      	b.n	80114ba <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 80114a4:	f107 030c 	add.w	r3, r7, #12
 80114a8:	4619      	mov	r1, r3
 80114aa:	4809      	ldr	r0, [pc, #36]	@ (80114d0 <netconn_send+0x58>)
 80114ac:	f7ff fc7a 	bl	8010da4 <netconn_apimsg>
 80114b0:	4603      	mov	r3, r0
 80114b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80114b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3730      	adds	r7, #48	@ 0x30
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}
 80114c2:	bf00      	nop
 80114c4:	080221c0 	.word	0x080221c0
 80114c8:	0802247c 	.word	0x0802247c
 80114cc:	08022218 	.word	0x08022218
 80114d0:	08012715 	.word	0x08012715

080114d4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b08c      	sub	sp, #48	@ 0x30
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	460b      	mov	r3, r1
 80114de:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d109      	bne.n	80114fa <netconn_close_shutdown+0x26>
 80114e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011524 <netconn_close_shutdown+0x50>)
 80114e8:	f240 4247 	movw	r2, #1095	@ 0x447
 80114ec:	490e      	ldr	r1, [pc, #56]	@ (8011528 <netconn_close_shutdown+0x54>)
 80114ee:	480f      	ldr	r0, [pc, #60]	@ (801152c <netconn_close_shutdown+0x58>)
 80114f0:	f00f fcf0 	bl	8020ed4 <iprintf>
 80114f4:	f06f 030f 	mvn.w	r3, #15
 80114f8:	e010      	b.n	801151c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80114fe:	78fb      	ldrb	r3, [r7, #3]
 8011500:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8011502:	2329      	movs	r3, #41	@ 0x29
 8011504:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011506:	f107 030c 	add.w	r3, r7, #12
 801150a:	4619      	mov	r1, r3
 801150c:	4808      	ldr	r0, [pc, #32]	@ (8011530 <netconn_close_shutdown+0x5c>)
 801150e:	f7ff fc49 	bl	8010da4 <netconn_apimsg>
 8011512:	4603      	mov	r3, r0
 8011514:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011518:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 801151c:	4618      	mov	r0, r3
 801151e:	3730      	adds	r7, #48	@ 0x30
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	080221c0 	.word	0x080221c0
 8011528:	080224fc 	.word	0x080224fc
 801152c:	08022218 	.word	0x08022218
 8011530:	08012bb1 	.word	0x08012bb1

08011534 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d101      	bne.n	8011546 <netconn_err+0x12>
    return ERR_OK;
 8011542:	2300      	movs	r3, #0
 8011544:	e00d      	b.n	8011562 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8011546:	f00e fb2d 	bl	801fba4 <sys_arch_protect>
 801154a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	7a1b      	ldrb	r3, [r3, #8]
 8011550:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	2200      	movs	r2, #0
 8011556:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8011558:	68f8      	ldr	r0, [r7, #12]
 801155a:	f00e fb31 	bl	801fbc0 <sys_arch_unprotect>
  return err;
 801155e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}
	...

0801156c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	4603      	mov	r3, r0
 8011574:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8011576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801157a:	f113 0f0d 	cmn.w	r3, #13
 801157e:	d009      	beq.n	8011594 <lwip_netconn_err_to_msg+0x28>
 8011580:	f113 0f0d 	cmn.w	r3, #13
 8011584:	dc0c      	bgt.n	80115a0 <lwip_netconn_err_to_msg+0x34>
 8011586:	f113 0f0f 	cmn.w	r3, #15
 801158a:	d007      	beq.n	801159c <lwip_netconn_err_to_msg+0x30>
 801158c:	f113 0f0e 	cmn.w	r3, #14
 8011590:	d002      	beq.n	8011598 <lwip_netconn_err_to_msg+0x2c>
 8011592:	e005      	b.n	80115a0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8011594:	4b0a      	ldr	r3, [pc, #40]	@ (80115c0 <lwip_netconn_err_to_msg+0x54>)
 8011596:	e00e      	b.n	80115b6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8011598:	4b0a      	ldr	r3, [pc, #40]	@ (80115c4 <lwip_netconn_err_to_msg+0x58>)
 801159a:	e00c      	b.n	80115b6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801159c:	4b0a      	ldr	r3, [pc, #40]	@ (80115c8 <lwip_netconn_err_to_msg+0x5c>)
 801159e:	e00a      	b.n	80115b6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80115a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d005      	beq.n	80115b4 <lwip_netconn_err_to_msg+0x48>
 80115a8:	4b08      	ldr	r3, [pc, #32]	@ (80115cc <lwip_netconn_err_to_msg+0x60>)
 80115aa:	227d      	movs	r2, #125	@ 0x7d
 80115ac:	4908      	ldr	r1, [pc, #32]	@ (80115d0 <lwip_netconn_err_to_msg+0x64>)
 80115ae:	4809      	ldr	r0, [pc, #36]	@ (80115d4 <lwip_netconn_err_to_msg+0x68>)
 80115b0:	f00f fc90 	bl	8020ed4 <iprintf>
      return NULL;
 80115b4:	2300      	movs	r3, #0
  }
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	08026c40 	.word	0x08026c40
 80115c4:	08026c41 	.word	0x08026c41
 80115c8:	08026c42 	.word	0x08026c42
 80115cc:	08022518 	.word	0x08022518
 80115d0:	0802254c 	.word	0x0802254c
 80115d4:	0802255c 	.word	0x0802255c

080115d8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	b082      	sub	sp, #8
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
 80115e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d105      	bne.n	80115f4 <lwip_netconn_is_err_msg+0x1c>
 80115e8:	4b12      	ldr	r3, [pc, #72]	@ (8011634 <lwip_netconn_is_err_msg+0x5c>)
 80115ea:	2285      	movs	r2, #133	@ 0x85
 80115ec:	4912      	ldr	r1, [pc, #72]	@ (8011638 <lwip_netconn_is_err_msg+0x60>)
 80115ee:	4813      	ldr	r0, [pc, #76]	@ (801163c <lwip_netconn_is_err_msg+0x64>)
 80115f0:	f00f fc70 	bl	8020ed4 <iprintf>

  if (msg == &netconn_aborted) {
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	4a12      	ldr	r2, [pc, #72]	@ (8011640 <lwip_netconn_is_err_msg+0x68>)
 80115f8:	4293      	cmp	r3, r2
 80115fa:	d104      	bne.n	8011606 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80115fc:	683b      	ldr	r3, [r7, #0]
 80115fe:	22f3      	movs	r2, #243	@ 0xf3
 8011600:	701a      	strb	r2, [r3, #0]
    return 1;
 8011602:	2301      	movs	r3, #1
 8011604:	e012      	b.n	801162c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	4a0e      	ldr	r2, [pc, #56]	@ (8011644 <lwip_netconn_is_err_msg+0x6c>)
 801160a:	4293      	cmp	r3, r2
 801160c:	d104      	bne.n	8011618 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	22f2      	movs	r2, #242	@ 0xf2
 8011612:	701a      	strb	r2, [r3, #0]
    return 1;
 8011614:	2301      	movs	r3, #1
 8011616:	e009      	b.n	801162c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	4a0b      	ldr	r2, [pc, #44]	@ (8011648 <lwip_netconn_is_err_msg+0x70>)
 801161c:	4293      	cmp	r3, r2
 801161e:	d104      	bne.n	801162a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8011620:	683b      	ldr	r3, [r7, #0]
 8011622:	22f1      	movs	r2, #241	@ 0xf1
 8011624:	701a      	strb	r2, [r3, #0]
    return 1;
 8011626:	2301      	movs	r3, #1
 8011628:	e000      	b.n	801162c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801162a:	2300      	movs	r3, #0
}
 801162c:	4618      	mov	r0, r3
 801162e:	3708      	adds	r7, #8
 8011630:	46bd      	mov	sp, r7
 8011632:	bd80      	pop	{r7, pc}
 8011634:	08022518 	.word	0x08022518
 8011638:	08022584 	.word	0x08022584
 801163c:	0802255c 	.word	0x0802255c
 8011640:	08026c40 	.word	0x08026c40
 8011644:	08026c41 	.word	0x08026c41
 8011648:	08026c42 	.word	0x08026c42

0801164c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b088      	sub	sp, #32
 8011650:	af00      	add	r7, sp, #0
 8011652:	60f8      	str	r0, [r7, #12]
 8011654:	60b9      	str	r1, [r7, #8]
 8011656:	607a      	str	r2, [r7, #4]
 8011658:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801165a:	68bb      	ldr	r3, [r7, #8]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d105      	bne.n	801166c <recv_udp+0x20>
 8011660:	4b34      	ldr	r3, [pc, #208]	@ (8011734 <recv_udp+0xe8>)
 8011662:	22e5      	movs	r2, #229	@ 0xe5
 8011664:	4934      	ldr	r1, [pc, #208]	@ (8011738 <recv_udp+0xec>)
 8011666:	4835      	ldr	r0, [pc, #212]	@ (801173c <recv_udp+0xf0>)
 8011668:	f00f fc34 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d105      	bne.n	801167e <recv_udp+0x32>
 8011672:	4b30      	ldr	r3, [pc, #192]	@ (8011734 <recv_udp+0xe8>)
 8011674:	22e6      	movs	r2, #230	@ 0xe6
 8011676:	4932      	ldr	r1, [pc, #200]	@ (8011740 <recv_udp+0xf4>)
 8011678:	4830      	ldr	r0, [pc, #192]	@ (801173c <recv_udp+0xf0>)
 801167a:	f00f fc2b 	bl	8020ed4 <iprintf>
  conn = (struct netconn *)arg;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	2b00      	cmp	r3, #0
 8011686:	d103      	bne.n	8011690 <recv_udp+0x44>
    pbuf_free(p);
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f003 fbeb 	bl	8014e64 <pbuf_free>
    return;
 801168e:	e04d      	b.n	801172c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8011690:	69fb      	ldr	r3, [r7, #28]
 8011692:	685b      	ldr	r3, [r3, #4]
 8011694:	68ba      	ldr	r2, [r7, #8]
 8011696:	429a      	cmp	r2, r3
 8011698:	d005      	beq.n	80116a6 <recv_udp+0x5a>
 801169a:	4b26      	ldr	r3, [pc, #152]	@ (8011734 <recv_udp+0xe8>)
 801169c:	22ee      	movs	r2, #238	@ 0xee
 801169e:	4929      	ldr	r1, [pc, #164]	@ (8011744 <recv_udp+0xf8>)
 80116a0:	4826      	ldr	r0, [pc, #152]	@ (801173c <recv_udp+0xf0>)
 80116a2:	f00f fc17 	bl	8020ed4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	3310      	adds	r3, #16
 80116aa:	4618      	mov	r0, r3
 80116ac:	f00e f924 	bl	801f8f8 <sys_mbox_valid>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d103      	bne.n	80116be <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f003 fbd4 	bl	8014e64 <pbuf_free>
    return;
 80116bc:	e036      	b.n	801172c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80116be:	2006      	movs	r0, #6
 80116c0:	f002 fb6e 	bl	8013da0 <memp_malloc>
 80116c4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80116c6:	69bb      	ldr	r3, [r7, #24]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d103      	bne.n	80116d4 <recv_udp+0x88>
    pbuf_free(p);
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f003 fbc9 	bl	8014e64 <pbuf_free>
    return;
 80116d2:	e02b      	b.n	801172c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80116d4:	69bb      	ldr	r3, [r7, #24]
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	687a      	ldr	r2, [r7, #4]
 80116de:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d002      	beq.n	80116ec <recv_udp+0xa0>
 80116e6:	683b      	ldr	r3, [r7, #0]
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	e000      	b.n	80116ee <recv_udp+0xa2>
 80116ec:	2300      	movs	r3, #0
 80116ee:	69ba      	ldr	r2, [r7, #24]
 80116f0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80116f2:	69bb      	ldr	r3, [r7, #24]
 80116f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80116f6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	891b      	ldrh	r3, [r3, #8]
 80116fc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80116fe:	69fb      	ldr	r3, [r7, #28]
 8011700:	3310      	adds	r3, #16
 8011702:	69b9      	ldr	r1, [r7, #24]
 8011704:	4618      	mov	r0, r3
 8011706:	f00e f88b 	bl	801f820 <sys_mbox_trypost>
 801170a:	4603      	mov	r3, r0
 801170c:	2b00      	cmp	r3, #0
 801170e:	d003      	beq.n	8011718 <recv_udp+0xcc>
    netbuf_delete(buf);
 8011710:	69b8      	ldr	r0, [r7, #24]
 8011712:	f001 fb0d 	bl	8012d30 <netbuf_delete>
    return;
 8011716:	e009      	b.n	801172c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801171c:	2b00      	cmp	r3, #0
 801171e:	d005      	beq.n	801172c <recv_udp+0xe0>
 8011720:	69fb      	ldr	r3, [r7, #28]
 8011722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011724:	8afa      	ldrh	r2, [r7, #22]
 8011726:	2100      	movs	r1, #0
 8011728:	69f8      	ldr	r0, [r7, #28]
 801172a:	4798      	blx	r3
  }
}
 801172c:	3720      	adds	r7, #32
 801172e:	46bd      	mov	sp, r7
 8011730:	bd80      	pop	{r7, pc}
 8011732:	bf00      	nop
 8011734:	08022518 	.word	0x08022518
 8011738:	08022590 	.word	0x08022590
 801173c:	0802255c 	.word	0x0802255c
 8011740:	080225b4 	.word	0x080225b4
 8011744:	080225d4 	.word	0x080225d4

08011748 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b088      	sub	sp, #32
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
 8011754:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d106      	bne.n	801176a <recv_tcp+0x22>
 801175c:	4b36      	ldr	r3, [pc, #216]	@ (8011838 <recv_tcp+0xf0>)
 801175e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8011762:	4936      	ldr	r1, [pc, #216]	@ (801183c <recv_tcp+0xf4>)
 8011764:	4836      	ldr	r0, [pc, #216]	@ (8011840 <recv_tcp+0xf8>)
 8011766:	f00f fbb5 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d106      	bne.n	801177e <recv_tcp+0x36>
 8011770:	4b31      	ldr	r3, [pc, #196]	@ (8011838 <recv_tcp+0xf0>)
 8011772:	f240 122d 	movw	r2, #301	@ 0x12d
 8011776:	4933      	ldr	r1, [pc, #204]	@ (8011844 <recv_tcp+0xfc>)
 8011778:	4831      	ldr	r0, [pc, #196]	@ (8011840 <recv_tcp+0xf8>)
 801177a:	f00f fbab 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801177e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d006      	beq.n	8011794 <recv_tcp+0x4c>
 8011786:	4b2c      	ldr	r3, [pc, #176]	@ (8011838 <recv_tcp+0xf0>)
 8011788:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 801178c:	492e      	ldr	r1, [pc, #184]	@ (8011848 <recv_tcp+0x100>)
 801178e:	482c      	ldr	r0, [pc, #176]	@ (8011840 <recv_tcp+0xf8>)
 8011790:	f00f fba0 	bl	8020ed4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8011798:	697b      	ldr	r3, [r7, #20]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d102      	bne.n	80117a4 <recv_tcp+0x5c>
    return ERR_VAL;
 801179e:	f06f 0305 	mvn.w	r3, #5
 80117a2:	e045      	b.n	8011830 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	68ba      	ldr	r2, [r7, #8]
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d006      	beq.n	80117bc <recv_tcp+0x74>
 80117ae:	4b22      	ldr	r3, [pc, #136]	@ (8011838 <recv_tcp+0xf0>)
 80117b0:	f240 1235 	movw	r2, #309	@ 0x135
 80117b4:	4925      	ldr	r1, [pc, #148]	@ (801184c <recv_tcp+0x104>)
 80117b6:	4822      	ldr	r0, [pc, #136]	@ (8011840 <recv_tcp+0xf8>)
 80117b8:	f00f fb8c 	bl	8020ed4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	3310      	adds	r3, #16
 80117c0:	4618      	mov	r0, r3
 80117c2:	f00e f899 	bl	801f8f8 <sys_mbox_valid>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d10d      	bne.n	80117e8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d008      	beq.n	80117e4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	891b      	ldrh	r3, [r3, #8]
 80117d6:	4619      	mov	r1, r3
 80117d8:	68b8      	ldr	r0, [r7, #8]
 80117da:	f004 fbeb 	bl	8015fb4 <tcp_recved>
      pbuf_free(p);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f003 fb40 	bl	8014e64 <pbuf_free>
    }
    return ERR_OK;
 80117e4:	2300      	movs	r3, #0
 80117e6:	e023      	b.n	8011830 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d005      	beq.n	80117fa <recv_tcp+0xb2>
    msg = p;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	891b      	ldrh	r3, [r3, #8]
 80117f6:	83fb      	strh	r3, [r7, #30]
 80117f8:	e003      	b.n	8011802 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80117fa:	4b15      	ldr	r3, [pc, #84]	@ (8011850 <recv_tcp+0x108>)
 80117fc:	61bb      	str	r3, [r7, #24]
    len = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	3310      	adds	r3, #16
 8011806:	69b9      	ldr	r1, [r7, #24]
 8011808:	4618      	mov	r0, r3
 801180a:	f00e f809 	bl	801f820 <sys_mbox_trypost>
 801180e:	4603      	mov	r3, r0
 8011810:	2b00      	cmp	r3, #0
 8011812:	d002      	beq.n	801181a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011818:	e00a      	b.n	8011830 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801181e:	2b00      	cmp	r3, #0
 8011820:	d005      	beq.n	801182e <recv_tcp+0xe6>
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011826:	8bfa      	ldrh	r2, [r7, #30]
 8011828:	2100      	movs	r1, #0
 801182a:	6978      	ldr	r0, [r7, #20]
 801182c:	4798      	blx	r3
  }

  return ERR_OK;
 801182e:	2300      	movs	r3, #0
}
 8011830:	4618      	mov	r0, r3
 8011832:	3720      	adds	r7, #32
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	08022518 	.word	0x08022518
 801183c:	080225f4 	.word	0x080225f4
 8011840:	0802255c 	.word	0x0802255c
 8011844:	08022618 	.word	0x08022618
 8011848:	08022638 	.word	0x08022638
 801184c:	08022650 	.word	0x08022650
 8011850:	08026c42 	.word	0x08026c42

08011854 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
 801185c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d106      	bne.n	8011876 <poll_tcp+0x22>
 8011868:	4b29      	ldr	r3, [pc, #164]	@ (8011910 <poll_tcp+0xbc>)
 801186a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 801186e:	4929      	ldr	r1, [pc, #164]	@ (8011914 <poll_tcp+0xc0>)
 8011870:	4829      	ldr	r0, [pc, #164]	@ (8011918 <poll_tcp+0xc4>)
 8011872:	f00f fb2f 	bl	8020ed4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	785b      	ldrb	r3, [r3, #1]
 801187a:	2b01      	cmp	r3, #1
 801187c:	d104      	bne.n	8011888 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801187e:	2101      	movs	r1, #1
 8011880:	68f8      	ldr	r0, [r7, #12]
 8011882:	f000 ffc9 	bl	8012818 <lwip_netconn_do_writemore>
 8011886:	e016      	b.n	80118b6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	785b      	ldrb	r3, [r3, #1]
 801188c:	2b04      	cmp	r3, #4
 801188e:	d112      	bne.n	80118b6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	6a1b      	ldr	r3, [r3, #32]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d00a      	beq.n	80118ae <poll_tcp+0x5a>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	6a1b      	ldr	r3, [r3, #32]
 801189c:	7a5b      	ldrb	r3, [r3, #9]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d005      	beq.n	80118ae <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	6a1b      	ldr	r3, [r3, #32]
 80118a6:	7a5a      	ldrb	r2, [r3, #9]
 80118a8:	3a01      	subs	r2, #1
 80118aa:	b2d2      	uxtb	r2, r2
 80118ac:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80118ae:	2101      	movs	r1, #1
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f000 fb3b 	bl	8011f2c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	7f1b      	ldrb	r3, [r3, #28]
 80118ba:	f003 0310 	and.w	r3, r3, #16
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d021      	beq.n	8011906 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	685b      	ldr	r3, [r3, #4]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d01d      	beq.n	8011906 <poll_tcp+0xb2>
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80118d2:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 80118d6:	d316      	bcc.n	8011906 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	685b      	ldr	r3, [r3, #4]
 80118dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80118e0:	2b04      	cmp	r3, #4
 80118e2:	d810      	bhi.n	8011906 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	7f1b      	ldrb	r3, [r3, #28]
 80118e8:	f023 0310 	bic.w	r3, r3, #16
 80118ec:	b2da      	uxtb	r2, r3
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d005      	beq.n	8011906 <poll_tcp+0xb2>
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118fe:	2200      	movs	r2, #0
 8011900:	2102      	movs	r1, #2
 8011902:	68f8      	ldr	r0, [r7, #12]
 8011904:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011906:	2300      	movs	r3, #0
}
 8011908:	4618      	mov	r0, r3
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	08022518 	.word	0x08022518
 8011914:	08022670 	.word	0x08022670
 8011918:	0802255c 	.word	0x0802255c

0801191c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b086      	sub	sp, #24
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	4613      	mov	r3, r2
 8011928:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d106      	bne.n	8011942 <sent_tcp+0x26>
 8011934:	4b20      	ldr	r3, [pc, #128]	@ (80119b8 <sent_tcp+0x9c>)
 8011936:	f240 1293 	movw	r2, #403	@ 0x193
 801193a:	4920      	ldr	r1, [pc, #128]	@ (80119bc <sent_tcp+0xa0>)
 801193c:	4820      	ldr	r0, [pc, #128]	@ (80119c0 <sent_tcp+0xa4>)
 801193e:	f00f fac9 	bl	8020ed4 <iprintf>

  if (conn) {
 8011942:	697b      	ldr	r3, [r7, #20]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d032      	beq.n	80119ae <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8011948:	697b      	ldr	r3, [r7, #20]
 801194a:	785b      	ldrb	r3, [r3, #1]
 801194c:	2b01      	cmp	r3, #1
 801194e:	d104      	bne.n	801195a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8011950:	2101      	movs	r1, #1
 8011952:	6978      	ldr	r0, [r7, #20]
 8011954:	f000 ff60 	bl	8012818 <lwip_netconn_do_writemore>
 8011958:	e007      	b.n	801196a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	785b      	ldrb	r3, [r3, #1]
 801195e:	2b04      	cmp	r3, #4
 8011960:	d103      	bne.n	801196a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8011962:	2101      	movs	r1, #1
 8011964:	6978      	ldr	r0, [r7, #20]
 8011966:	f000 fae1 	bl	8011f2c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801196a:	697b      	ldr	r3, [r7, #20]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d01d      	beq.n	80119ae <sent_tcp+0x92>
 8011972:	697b      	ldr	r3, [r7, #20]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801197a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 801197e:	d316      	bcc.n	80119ae <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011980:	697b      	ldr	r3, [r7, #20]
 8011982:	685b      	ldr	r3, [r3, #4]
 8011984:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011988:	2b04      	cmp	r3, #4
 801198a:	d810      	bhi.n	80119ae <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	7f1b      	ldrb	r3, [r3, #28]
 8011990:	f023 0310 	bic.w	r3, r3, #16
 8011994:	b2da      	uxtb	r2, r3
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d005      	beq.n	80119ae <sent_tcp+0x92>
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119a6:	88fa      	ldrh	r2, [r7, #6]
 80119a8:	2102      	movs	r1, #2
 80119aa:	6978      	ldr	r0, [r7, #20]
 80119ac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80119ae:	2300      	movs	r3, #0
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3718      	adds	r7, #24
 80119b4:	46bd      	mov	sp, r7
 80119b6:	bd80      	pop	{r7, pc}
 80119b8:	08022518 	.word	0x08022518
 80119bc:	08022670 	.word	0x08022670
 80119c0:	0802255c 	.word	0x0802255c

080119c4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b088      	sub	sp, #32
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
 80119cc:	460b      	mov	r3, r1
 80119ce:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d106      	bne.n	80119e8 <err_tcp+0x24>
 80119da:	4b5f      	ldr	r3, [pc, #380]	@ (8011b58 <err_tcp+0x194>)
 80119dc:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80119e0:	495e      	ldr	r1, [pc, #376]	@ (8011b5c <err_tcp+0x198>)
 80119e2:	485f      	ldr	r0, [pc, #380]	@ (8011b60 <err_tcp+0x19c>)
 80119e4:	f00f fa76 	bl	8020ed4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80119e8:	f00e f8dc 	bl	801fba4 <sys_arch_protect>
 80119ec:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	2200      	movs	r2, #0
 80119f2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80119f4:	69fb      	ldr	r3, [r7, #28]
 80119f6:	78fa      	ldrb	r2, [r7, #3]
 80119f8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80119fa:	69fb      	ldr	r3, [r7, #28]
 80119fc:	7f1b      	ldrb	r3, [r3, #28]
 80119fe:	f043 0301 	orr.w	r3, r3, #1
 8011a02:	b2da      	uxtb	r2, r3
 8011a04:	69fb      	ldr	r3, [r7, #28]
 8011a06:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	785b      	ldrb	r3, [r3, #1]
 8011a0c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011a0e:	69fb      	ldr	r3, [r7, #28]
 8011a10:	2200      	movs	r2, #0
 8011a12:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011a14:	69b8      	ldr	r0, [r7, #24]
 8011a16:	f00e f8d3 	bl	801fbc0 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d005      	beq.n	8011a2e <err_tcp+0x6a>
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a26:	2200      	movs	r2, #0
 8011a28:	2104      	movs	r1, #4
 8011a2a:	69f8      	ldr	r0, [r7, #28]
 8011a2c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011a2e:	69fb      	ldr	r3, [r7, #28]
 8011a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d005      	beq.n	8011a42 <err_tcp+0x7e>
 8011a36:	69fb      	ldr	r3, [r7, #28]
 8011a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	69f8      	ldr	r0, [r7, #28]
 8011a40:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d005      	beq.n	8011a56 <err_tcp+0x92>
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a4e:	2200      	movs	r2, #0
 8011a50:	2102      	movs	r1, #2
 8011a52:	69f8      	ldr	r0, [r7, #28]
 8011a54:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011a56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7ff fd86 	bl	801156c <lwip_netconn_err_to_msg>
 8011a60:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	3310      	adds	r3, #16
 8011a66:	4618      	mov	r0, r3
 8011a68:	f00d ff46 	bl	801f8f8 <sys_mbox_valid>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d005      	beq.n	8011a7e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	3310      	adds	r3, #16
 8011a76:	6939      	ldr	r1, [r7, #16]
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f00d fed1 	bl	801f820 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011a7e:	69fb      	ldr	r3, [r7, #28]
 8011a80:	3314      	adds	r3, #20
 8011a82:	4618      	mov	r0, r3
 8011a84:	f00d ff38 	bl	801f8f8 <sys_mbox_valid>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d005      	beq.n	8011a9a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011a8e:	69fb      	ldr	r3, [r7, #28]
 8011a90:	3314      	adds	r3, #20
 8011a92:	6939      	ldr	r1, [r7, #16]
 8011a94:	4618      	mov	r0, r3
 8011a96:	f00d fec3 	bl	801f820 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011a9a:	7dfb      	ldrb	r3, [r7, #23]
 8011a9c:	2b01      	cmp	r3, #1
 8011a9e:	d005      	beq.n	8011aac <err_tcp+0xe8>
 8011aa0:	7dfb      	ldrb	r3, [r7, #23]
 8011aa2:	2b04      	cmp	r3, #4
 8011aa4:	d002      	beq.n	8011aac <err_tcp+0xe8>
 8011aa6:	7dfb      	ldrb	r3, [r7, #23]
 8011aa8:	2b03      	cmp	r3, #3
 8011aaa:	d143      	bne.n	8011b34 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	7f1b      	ldrb	r3, [r3, #28]
 8011ab0:	f003 0304 	and.w	r3, r3, #4
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	bf14      	ite	ne
 8011ab8:	2301      	movne	r3, #1
 8011aba:	2300      	moveq	r3, #0
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011ac0:	69fb      	ldr	r3, [r7, #28]
 8011ac2:	7f1b      	ldrb	r3, [r3, #28]
 8011ac4:	f023 0304 	bic.w	r3, r3, #4
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	69fb      	ldr	r3, [r7, #28]
 8011acc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d13b      	bne.n	8011b4c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011ad4:	69fb      	ldr	r3, [r7, #28]
 8011ad6:	6a1b      	ldr	r3, [r3, #32]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d106      	bne.n	8011aea <err_tcp+0x126>
 8011adc:	4b1e      	ldr	r3, [pc, #120]	@ (8011b58 <err_tcp+0x194>)
 8011ade:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8011ae2:	4920      	ldr	r1, [pc, #128]	@ (8011b64 <err_tcp+0x1a0>)
 8011ae4:	481e      	ldr	r0, [pc, #120]	@ (8011b60 <err_tcp+0x19c>)
 8011ae6:	f00f f9f5 	bl	8020ed4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011aea:	7dfb      	ldrb	r3, [r7, #23]
 8011aec:	2b04      	cmp	r3, #4
 8011aee:	d104      	bne.n	8011afa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	6a1b      	ldr	r3, [r3, #32]
 8011af4:	2200      	movs	r2, #0
 8011af6:	711a      	strb	r2, [r3, #4]
 8011af8:	e003      	b.n	8011b02 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011afa:	69fb      	ldr	r3, [r7, #28]
 8011afc:	6a1b      	ldr	r3, [r3, #32]
 8011afe:	78fa      	ldrb	r2, [r7, #3]
 8011b00:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	6a1b      	ldr	r3, [r3, #32]
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	330c      	adds	r3, #12
 8011b0a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011b0c:	68b8      	ldr	r0, [r7, #8]
 8011b0e:	f00d ffad 	bl	801fa6c <sys_sem_valid>
 8011b12:	4603      	mov	r3, r0
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d106      	bne.n	8011b26 <err_tcp+0x162>
 8011b18:	4b0f      	ldr	r3, [pc, #60]	@ (8011b58 <err_tcp+0x194>)
 8011b1a:	f240 12ef 	movw	r2, #495	@ 0x1ef
 8011b1e:	4912      	ldr	r1, [pc, #72]	@ (8011b68 <err_tcp+0x1a4>)
 8011b20:	480f      	ldr	r0, [pc, #60]	@ (8011b60 <err_tcp+0x19c>)
 8011b22:	f00f f9d7 	bl	8020ed4 <iprintf>
      conn->current_msg = NULL;
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	2200      	movs	r2, #0
 8011b2a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011b2c:	68b8      	ldr	r0, [r7, #8]
 8011b2e:	f00d ff78 	bl	801fa22 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011b32:	e00b      	b.n	8011b4c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011b34:	69fb      	ldr	r3, [r7, #28]
 8011b36:	6a1b      	ldr	r3, [r3, #32]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d008      	beq.n	8011b4e <err_tcp+0x18a>
 8011b3c:	4b06      	ldr	r3, [pc, #24]	@ (8011b58 <err_tcp+0x194>)
 8011b3e:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8011b42:	490a      	ldr	r1, [pc, #40]	@ (8011b6c <err_tcp+0x1a8>)
 8011b44:	4806      	ldr	r0, [pc, #24]	@ (8011b60 <err_tcp+0x19c>)
 8011b46:	f00f f9c5 	bl	8020ed4 <iprintf>
  }
}
 8011b4a:	e000      	b.n	8011b4e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011b4c:	bf00      	nop
}
 8011b4e:	bf00      	nop
 8011b50:	3720      	adds	r7, #32
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	08022518 	.word	0x08022518
 8011b5c:	08022670 	.word	0x08022670
 8011b60:	0802255c 	.word	0x0802255c
 8011b64:	08022680 	.word	0x08022680
 8011b68:	0802269c 	.word	0x0802269c
 8011b6c:	080226b8 	.word	0x080226b8

08011b70 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b084      	sub	sp, #16
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	685b      	ldr	r3, [r3, #4]
 8011b7c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011b7e:	6879      	ldr	r1, [r7, #4]
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	f005 fa21 	bl	8016fc8 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011b86:	490a      	ldr	r1, [pc, #40]	@ (8011bb0 <setup_tcp+0x40>)
 8011b88:	68f8      	ldr	r0, [r7, #12]
 8011b8a:	f005 fa2f 	bl	8016fec <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011b8e:	4909      	ldr	r1, [pc, #36]	@ (8011bb4 <setup_tcp+0x44>)
 8011b90:	68f8      	ldr	r0, [r7, #12]
 8011b92:	f005 fa4d 	bl	8017030 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011b96:	2202      	movs	r2, #2
 8011b98:	4907      	ldr	r1, [pc, #28]	@ (8011bb8 <setup_tcp+0x48>)
 8011b9a:	68f8      	ldr	r0, [r7, #12]
 8011b9c:	f005 faa4 	bl	80170e8 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011ba0:	4906      	ldr	r1, [pc, #24]	@ (8011bbc <setup_tcp+0x4c>)
 8011ba2:	68f8      	ldr	r0, [r7, #12]
 8011ba4:	f005 fa66 	bl	8017074 <tcp_err>
}
 8011ba8:	bf00      	nop
 8011baa:	3710      	adds	r7, #16
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	08011749 	.word	0x08011749
 8011bb4:	0801191d 	.word	0x0801191d
 8011bb8:	08011855 	.word	0x08011855
 8011bbc:	080119c5 	.word	0x080119c5

08011bc0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011bc0:	b590      	push	{r4, r7, lr}
 8011bc2:	b085      	sub	sp, #20
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011bc8:	2300      	movs	r3, #0
 8011bca:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d006      	beq.n	8011be4 <pcb_new+0x24>
 8011bd6:	4b2b      	ldr	r3, [pc, #172]	@ (8011c84 <pcb_new+0xc4>)
 8011bd8:	f240 2265 	movw	r2, #613	@ 0x265
 8011bdc:	492a      	ldr	r1, [pc, #168]	@ (8011c88 <pcb_new+0xc8>)
 8011bde:	482b      	ldr	r0, [pc, #172]	@ (8011c8c <pcb_new+0xcc>)
 8011be0:	f00f f978 	bl	8020ed4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	781b      	ldrb	r3, [r3, #0]
 8011bea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011bee:	2b10      	cmp	r3, #16
 8011bf0:	d022      	beq.n	8011c38 <pcb_new+0x78>
 8011bf2:	2b20      	cmp	r3, #32
 8011bf4:	d133      	bne.n	8011c5e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	681c      	ldr	r4, [r3, #0]
 8011bfa:	7bfb      	ldrb	r3, [r7, #15]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f00b f864 	bl	801ccca <udp_new_ip_type>
 8011c02:	4603      	mov	r3, r0
 8011c04:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	685b      	ldr	r3, [r3, #4]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d02a      	beq.n	8011c66 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	781b      	ldrb	r3, [r3, #0]
 8011c16:	2b22      	cmp	r3, #34	@ 0x22
 8011c18:	d104      	bne.n	8011c24 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	685b      	ldr	r3, [r3, #4]
 8011c20:	2201      	movs	r2, #1
 8011c22:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	6858      	ldr	r0, [r3, #4]
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	461a      	mov	r2, r3
 8011c30:	4917      	ldr	r1, [pc, #92]	@ (8011c90 <pcb_new+0xd0>)
 8011c32:	f00a ffd1 	bl	801cbd8 <udp_recv>
      }
      break;
 8011c36:	e016      	b.n	8011c66 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681c      	ldr	r4, [r3, #0]
 8011c3c:	7bfb      	ldrb	r3, [r7, #15]
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f005 f9b4 	bl	8016fac <tcp_new_ip_type>
 8011c44:	4603      	mov	r3, r0
 8011c46:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	685b      	ldr	r3, [r3, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d00b      	beq.n	8011c6a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	4618      	mov	r0, r3
 8011c58:	f7ff ff8a 	bl	8011b70 <setup_tcp>
      }
      break;
 8011c5c:	e005      	b.n	8011c6a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	22fa      	movs	r2, #250	@ 0xfa
 8011c62:	711a      	strb	r2, [r3, #4]
      return;
 8011c64:	e00a      	b.n	8011c7c <pcb_new+0xbc>
      break;
 8011c66:	bf00      	nop
 8011c68:	e000      	b.n	8011c6c <pcb_new+0xac>
      break;
 8011c6a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d102      	bne.n	8011c7c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	22ff      	movs	r2, #255	@ 0xff
 8011c7a:	711a      	strb	r2, [r3, #4]
  }
}
 8011c7c:	3714      	adds	r7, #20
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd90      	pop	{r4, r7, pc}
 8011c82:	bf00      	nop
 8011c84:	08022518 	.word	0x08022518
 8011c88:	080226fc 	.word	0x080226fc
 8011c8c:	0802255c 	.word	0x0802255c
 8011c90:	0801164d 	.word	0x0801164d

08011c94 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d102      	bne.n	8011cb6 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f7ff ff85 	bl	8011bc0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011cb6:	bf00      	nop
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}
	...

08011cc0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	6039      	str	r1, [r7, #0]
 8011cca:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011cd0:	2007      	movs	r0, #7
 8011cd2:	f002 f865 	bl	8013da0 <memp_malloc>
 8011cd6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d101      	bne.n	8011ce2 <netconn_alloc+0x22>
    return NULL;
 8011cde:	2300      	movs	r3, #0
 8011ce0:	e052      	b.n	8011d88 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	2200      	movs	r2, #0
 8011ce6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	79fa      	ldrb	r2, [r7, #7]
 8011cec:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011cf4:	79fb      	ldrb	r3, [r7, #7]
 8011cf6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011cfa:	2b10      	cmp	r3, #16
 8011cfc:	d004      	beq.n	8011d08 <netconn_alloc+0x48>
 8011cfe:	2b20      	cmp	r3, #32
 8011d00:	d105      	bne.n	8011d0e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011d02:	2306      	movs	r3, #6
 8011d04:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011d06:	e00a      	b.n	8011d1e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011d08:	2306      	movs	r3, #6
 8011d0a:	617b      	str	r3, [r7, #20]
      break;
 8011d0c:	e007      	b.n	8011d1e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011d0e:	4b20      	ldr	r3, [pc, #128]	@ (8011d90 <netconn_alloc+0xd0>)
 8011d10:	f240 22e5 	movw	r2, #741	@ 0x2e5
 8011d14:	491f      	ldr	r1, [pc, #124]	@ (8011d94 <netconn_alloc+0xd4>)
 8011d16:	4820      	ldr	r0, [pc, #128]	@ (8011d98 <netconn_alloc+0xd8>)
 8011d18:	f00f f8dc 	bl	8020ed4 <iprintf>
      goto free_and_return;
 8011d1c:	e02f      	b.n	8011d7e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	3310      	adds	r3, #16
 8011d22:	6979      	ldr	r1, [r7, #20]
 8011d24:	4618      	mov	r0, r3
 8011d26:	f00d fd21 	bl	801f76c <sys_mbox_new>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d125      	bne.n	8011d7c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	330c      	adds	r3, #12
 8011d34:	2100      	movs	r1, #0
 8011d36:	4618      	mov	r0, r3
 8011d38:	f00d fdfc 	bl	801f934 <sys_sem_new>
 8011d3c:	4603      	mov	r3, r0
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d005      	beq.n	8011d4e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	3310      	adds	r3, #16
 8011d46:	4618      	mov	r0, r3
 8011d48:	f00d fd42 	bl	801f7d0 <sys_mbox_free>
    goto free_and_return;
 8011d4c:	e017      	b.n	8011d7e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	3314      	adds	r3, #20
 8011d52:	4618      	mov	r0, r3
 8011d54:	f00d fde1 	bl	801f91a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2200      	movs	r2, #0
 8011d5c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011d64:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	683a      	ldr	r2, [r7, #0]
 8011d6a:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011d6c:	68fb      	ldr	r3, [r7, #12]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	7cfa      	ldrb	r2, [r7, #19]
 8011d76:	771a      	strb	r2, [r3, #28]
  return conn;
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	e005      	b.n	8011d88 <netconn_alloc+0xc8>
    goto free_and_return;
 8011d7c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011d7e:	68f9      	ldr	r1, [r7, #12]
 8011d80:	2007      	movs	r0, #7
 8011d82:	f002 f889 	bl	8013e98 <memp_free>
  return NULL;
 8011d86:	2300      	movs	r3, #0
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3718      	adds	r7, #24
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	08022518 	.word	0x08022518
 8011d94:	0802271c 	.word	0x0802271c
 8011d98:	0802255c 	.word	0x0802255c

08011d9c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b082      	sub	sp, #8
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d006      	beq.n	8011dba <netconn_free+0x1e>
 8011dac:	4b1b      	ldr	r3, [pc, #108]	@ (8011e1c <netconn_free+0x80>)
 8011dae:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8011db2:	491b      	ldr	r1, [pc, #108]	@ (8011e20 <netconn_free+0x84>)
 8011db4:	481b      	ldr	r0, [pc, #108]	@ (8011e24 <netconn_free+0x88>)
 8011db6:	f00f f88d 	bl	8020ed4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	3310      	adds	r3, #16
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f00d fd9a 	bl	801f8f8 <sys_mbox_valid>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d006      	beq.n	8011dd8 <netconn_free+0x3c>
 8011dca:	4b14      	ldr	r3, [pc, #80]	@ (8011e1c <netconn_free+0x80>)
 8011dcc:	f240 3223 	movw	r2, #803	@ 0x323
 8011dd0:	4915      	ldr	r1, [pc, #84]	@ (8011e28 <netconn_free+0x8c>)
 8011dd2:	4814      	ldr	r0, [pc, #80]	@ (8011e24 <netconn_free+0x88>)
 8011dd4:	f00f f87e 	bl	8020ed4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	3314      	adds	r3, #20
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f00d fd8b 	bl	801f8f8 <sys_mbox_valid>
 8011de2:	4603      	mov	r3, r0
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d006      	beq.n	8011df6 <netconn_free+0x5a>
 8011de8:	4b0c      	ldr	r3, [pc, #48]	@ (8011e1c <netconn_free+0x80>)
 8011dea:	f240 3226 	movw	r2, #806	@ 0x326
 8011dee:	490f      	ldr	r1, [pc, #60]	@ (8011e2c <netconn_free+0x90>)
 8011df0:	480c      	ldr	r0, [pc, #48]	@ (8011e24 <netconn_free+0x88>)
 8011df2:	f00f f86f 	bl	8020ed4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	330c      	adds	r3, #12
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	f00d fe1e 	bl	801fa3c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	330c      	adds	r3, #12
 8011e04:	4618      	mov	r0, r3
 8011e06:	f00d fe42 	bl	801fa8e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011e0a:	6879      	ldr	r1, [r7, #4]
 8011e0c:	2007      	movs	r0, #7
 8011e0e:	f002 f843 	bl	8013e98 <memp_free>
}
 8011e12:	bf00      	nop
 8011e14:	3708      	adds	r7, #8
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bd80      	pop	{r7, pc}
 8011e1a:	bf00      	nop
 8011e1c:	08022518 	.word	0x08022518
 8011e20:	08022744 	.word	0x08022744
 8011e24:	0802255c 	.word	0x0802255c
 8011e28:	08022774 	.word	0x08022774
 8011e2c:	080227b0 	.word	0x080227b0

08011e30 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011e30:	b580      	push	{r7, lr}
 8011e32:	b086      	sub	sp, #24
 8011e34:	af00      	add	r7, sp, #0
 8011e36:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	3310      	adds	r3, #16
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f00d fd5b 	bl	801f8f8 <sys_mbox_valid>
 8011e42:	4603      	mov	r3, r0
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d02f      	beq.n	8011ea8 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011e48:	e018      	b.n	8011e7c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	781b      	ldrb	r3, [r3, #0]
 8011e4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011e52:	2b10      	cmp	r3, #16
 8011e54:	d10e      	bne.n	8011e74 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	f107 020f 	add.w	r2, r7, #15
 8011e5c:	4611      	mov	r1, r2
 8011e5e:	4618      	mov	r0, r3
 8011e60:	f7ff fbba 	bl	80115d8 <lwip_netconn_is_err_msg>
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d108      	bne.n	8011e7c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	f002 fff9 	bl	8014e64 <pbuf_free>
 8011e72:	e003      	b.n	8011e7c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	4618      	mov	r0, r3
 8011e78:	f000 ff5a 	bl	8012d30 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	3310      	adds	r3, #16
 8011e80:	f107 0210 	add.w	r2, r7, #16
 8011e84:	4611      	mov	r1, r2
 8011e86:	4618      	mov	r0, r3
 8011e88:	f00d fd1f 	bl	801f8ca <sys_arch_mbox_tryfetch>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011e92:	d1da      	bne.n	8011e4a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	3310      	adds	r3, #16
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f00d fc99 	bl	801f7d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	3310      	adds	r3, #16
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f00d fd39 	bl	801f91a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	3314      	adds	r3, #20
 8011eac:	4618      	mov	r0, r3
 8011eae:	f00d fd23 	bl	801f8f8 <sys_mbox_valid>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d034      	beq.n	8011f22 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011eb8:	e01d      	b.n	8011ef6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	f107 020e 	add.w	r2, r7, #14
 8011ec0:	4611      	mov	r1, r2
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7ff fb88 	bl	80115d8 <lwip_netconn_is_err_msg>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d113      	bne.n	8011ef6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011ece:	693b      	ldr	r3, [r7, #16]
 8011ed0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011ed2:	6978      	ldr	r0, [r7, #20]
 8011ed4:	f7ff ffac 	bl	8011e30 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	685b      	ldr	r3, [r3, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d007      	beq.n	8011ef0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	f003 ff67 	bl	8015db8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	2200      	movs	r2, #0
 8011eee:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011ef0:	6978      	ldr	r0, [r7, #20]
 8011ef2:	f7ff ff53 	bl	8011d9c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	3314      	adds	r3, #20
 8011efa:	f107 0210 	add.w	r2, r7, #16
 8011efe:	4611      	mov	r1, r2
 8011f00:	4618      	mov	r0, r3
 8011f02:	f00d fce2 	bl	801f8ca <sys_arch_mbox_tryfetch>
 8011f06:	4603      	mov	r3, r0
 8011f08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011f0c:	d1d5      	bne.n	8011eba <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	3314      	adds	r3, #20
 8011f12:	4618      	mov	r0, r3
 8011f14:	f00d fc5c 	bl	801f7d0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011f18:	687b      	ldr	r3, [r7, #4]
 8011f1a:	3314      	adds	r3, #20
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	f00d fcfc 	bl	801f91a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011f22:	bf00      	nop
 8011f24:	3718      	adds	r7, #24
 8011f26:	46bd      	mov	sp, r7
 8011f28:	bd80      	pop	{r7, pc}
	...

08011f2c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011f2c:	b580      	push	{r7, lr}
 8011f2e:	b086      	sub	sp, #24
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d106      	bne.n	8011f50 <lwip_netconn_do_close_internal+0x24>
 8011f42:	4b87      	ldr	r3, [pc, #540]	@ (8012160 <lwip_netconn_do_close_internal+0x234>)
 8011f44:	f240 32a2 	movw	r2, #930	@ 0x3a2
 8011f48:	4986      	ldr	r1, [pc, #536]	@ (8012164 <lwip_netconn_do_close_internal+0x238>)
 8011f4a:	4887      	ldr	r0, [pc, #540]	@ (8012168 <lwip_netconn_do_close_internal+0x23c>)
 8011f4c:	f00e ffc2 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	781b      	ldrb	r3, [r3, #0]
 8011f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011f58:	2b10      	cmp	r3, #16
 8011f5a:	d006      	beq.n	8011f6a <lwip_netconn_do_close_internal+0x3e>
 8011f5c:	4b80      	ldr	r3, [pc, #512]	@ (8012160 <lwip_netconn_do_close_internal+0x234>)
 8011f5e:	f240 32a3 	movw	r2, #931	@ 0x3a3
 8011f62:	4982      	ldr	r1, [pc, #520]	@ (801216c <lwip_netconn_do_close_internal+0x240>)
 8011f64:	4880      	ldr	r0, [pc, #512]	@ (8012168 <lwip_netconn_do_close_internal+0x23c>)
 8011f66:	f00e ffb5 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	785b      	ldrb	r3, [r3, #1]
 8011f6e:	2b04      	cmp	r3, #4
 8011f70:	d006      	beq.n	8011f80 <lwip_netconn_do_close_internal+0x54>
 8011f72:	4b7b      	ldr	r3, [pc, #492]	@ (8012160 <lwip_netconn_do_close_internal+0x234>)
 8011f74:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8011f78:	497d      	ldr	r1, [pc, #500]	@ (8012170 <lwip_netconn_do_close_internal+0x244>)
 8011f7a:	487b      	ldr	r0, [pc, #492]	@ (8012168 <lwip_netconn_do_close_internal+0x23c>)
 8011f7c:	f00e ffaa 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d106      	bne.n	8011f96 <lwip_netconn_do_close_internal+0x6a>
 8011f88:	4b75      	ldr	r3, [pc, #468]	@ (8012160 <lwip_netconn_do_close_internal+0x234>)
 8011f8a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8011f8e:	4979      	ldr	r1, [pc, #484]	@ (8012174 <lwip_netconn_do_close_internal+0x248>)
 8011f90:	4875      	ldr	r0, [pc, #468]	@ (8012168 <lwip_netconn_do_close_internal+0x23c>)
 8011f92:	f00e ff9f 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	6a1b      	ldr	r3, [r3, #32]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d106      	bne.n	8011fac <lwip_netconn_do_close_internal+0x80>
 8011f9e:	4b70      	ldr	r3, [pc, #448]	@ (8012160 <lwip_netconn_do_close_internal+0x234>)
 8011fa0:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011fa4:	4974      	ldr	r1, [pc, #464]	@ (8012178 <lwip_netconn_do_close_internal+0x24c>)
 8011fa6:	4870      	ldr	r0, [pc, #448]	@ (8012168 <lwip_netconn_do_close_internal+0x23c>)
 8011fa8:	f00e ff94 	bl	8020ed4 <iprintf>

  tpcb = conn->pcb.tcp;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	685b      	ldr	r3, [r3, #4]
 8011fb0:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	6a1b      	ldr	r3, [r3, #32]
 8011fb6:	7a1b      	ldrb	r3, [r3, #8]
 8011fb8:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011fba:	7bfb      	ldrb	r3, [r7, #15]
 8011fbc:	f003 0301 	and.w	r3, r3, #1
 8011fc0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8011fc2:	7bfb      	ldrb	r3, [r7, #15]
 8011fc4:	f003 0302 	and.w	r3, r3, #2
 8011fc8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8011fca:	7bfb      	ldrb	r3, [r7, #15]
 8011fcc:	2b03      	cmp	r3, #3
 8011fce:	d102      	bne.n	8011fd6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8011fd0:	2301      	movs	r3, #1
 8011fd2:	75bb      	strb	r3, [r7, #22]
 8011fd4:	e01f      	b.n	8012016 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8011fd6:	7bbb      	ldrb	r3, [r7, #14]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d00e      	beq.n	8011ffa <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8011fdc:	693b      	ldr	r3, [r7, #16]
 8011fde:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8011fe0:	2b05      	cmp	r3, #5
 8011fe2:	d007      	beq.n	8011ff4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8011fe8:	2b06      	cmp	r3, #6
 8011fea:	d003      	beq.n	8011ff4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8011ff0:	2b08      	cmp	r3, #8
 8011ff2:	d102      	bne.n	8011ffa <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	75bb      	strb	r3, [r7, #22]
 8011ff8:	e00d      	b.n	8012016 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8011ffa:	7b7b      	ldrb	r3, [r7, #13]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d008      	beq.n	8012012 <lwip_netconn_do_close_internal+0xe6>
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	8b5b      	ldrh	r3, [r3, #26]
 8012004:	f003 0310 	and.w	r3, r3, #16
 8012008:	2b00      	cmp	r3, #0
 801200a:	d002      	beq.n	8012012 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 801200c:	2301      	movs	r3, #1
 801200e:	75bb      	strb	r3, [r7, #22]
 8012010:	e001      	b.n	8012016 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8012012:	2300      	movs	r3, #0
 8012014:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012016:	7dbb      	ldrb	r3, [r7, #22]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d003      	beq.n	8012024 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 801201c:	2100      	movs	r1, #0
 801201e:	6938      	ldr	r0, [r7, #16]
 8012020:	f004 ffd2 	bl	8016fc8 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	7d1b      	ldrb	r3, [r3, #20]
 8012028:	2b01      	cmp	r3, #1
 801202a:	d104      	bne.n	8012036 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 801202c:	2100      	movs	r1, #0
 801202e:	6938      	ldr	r0, [r7, #16]
 8012030:	f005 f842 	bl	80170b8 <tcp_accept>
 8012034:	e01d      	b.n	8012072 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012036:	7bbb      	ldrb	r3, [r7, #14]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d007      	beq.n	801204c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 801203c:	2100      	movs	r1, #0
 801203e:	6938      	ldr	r0, [r7, #16]
 8012040:	f004 ffd4 	bl	8016fec <tcp_recv>
      tcp_accept(tpcb, NULL);
 8012044:	2100      	movs	r1, #0
 8012046:	6938      	ldr	r0, [r7, #16]
 8012048:	f005 f836 	bl	80170b8 <tcp_accept>
    }
    if (shut_tx) {
 801204c:	7b7b      	ldrb	r3, [r7, #13]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d003      	beq.n	801205a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8012052:	2100      	movs	r1, #0
 8012054:	6938      	ldr	r0, [r7, #16]
 8012056:	f004 ffeb 	bl	8017030 <tcp_sent>
    }
    if (shut_close) {
 801205a:	7dbb      	ldrb	r3, [r7, #22]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d008      	beq.n	8012072 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8012060:	2200      	movs	r2, #0
 8012062:	2100      	movs	r1, #0
 8012064:	6938      	ldr	r0, [r7, #16]
 8012066:	f005 f83f 	bl	80170e8 <tcp_poll>
      tcp_err(tpcb, NULL);
 801206a:	2100      	movs	r1, #0
 801206c:	6938      	ldr	r0, [r7, #16]
 801206e:	f005 f801 	bl	8017074 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8012072:	7dbb      	ldrb	r3, [r7, #22]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d005      	beq.n	8012084 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8012078:	6938      	ldr	r0, [r7, #16]
 801207a:	f003 fd57 	bl	8015b2c <tcp_close>
 801207e:	4603      	mov	r3, r0
 8012080:	75fb      	strb	r3, [r7, #23]
 8012082:	e007      	b.n	8012094 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8012084:	7bbb      	ldrb	r3, [r7, #14]
 8012086:	7b7a      	ldrb	r2, [r7, #13]
 8012088:	4619      	mov	r1, r3
 801208a:	6938      	ldr	r0, [r7, #16]
 801208c:	f003 fd7a 	bl	8015b84 <tcp_shutdown>
 8012090:	4603      	mov	r3, r0
 8012092:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8012094:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d102      	bne.n	80120a2 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 801209c:	2301      	movs	r3, #1
 801209e:	757b      	strb	r3, [r7, #21]
 80120a0:	e016      	b.n	80120d0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80120a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80120aa:	d10f      	bne.n	80120cc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	6a1b      	ldr	r3, [r3, #32]
 80120b0:	7a5b      	ldrb	r3, [r3, #9]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d10c      	bne.n	80120d0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80120b6:	2301      	movs	r3, #1
 80120b8:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80120ba:	7dbb      	ldrb	r3, [r7, #22]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d007      	beq.n	80120d0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80120c0:	6938      	ldr	r0, [r7, #16]
 80120c2:	f003 fe79 	bl	8015db8 <tcp_abort>
          err = ERR_OK;
 80120c6:	2300      	movs	r3, #0
 80120c8:	75fb      	strb	r3, [r7, #23]
 80120ca:	e001      	b.n	80120d0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80120cc:	2301      	movs	r3, #1
 80120ce:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80120d0:	7d7b      	ldrb	r3, [r7, #21]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d052      	beq.n	801217c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6a1b      	ldr	r3, [r3, #32]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	330c      	adds	r3, #12
 80120de:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	6a1b      	ldr	r3, [r3, #32]
 80120e4:	7dfa      	ldrb	r2, [r7, #23]
 80120e6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	2200      	movs	r2, #0
 80120ec:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2200      	movs	r2, #0
 80120f2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 80120f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d129      	bne.n	8012150 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 80120fc:	7dbb      	ldrb	r3, [r7, #22]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d00c      	beq.n	801211c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	2200      	movs	r2, #0
 8012106:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801210c:	2b00      	cmp	r3, #0
 801210e:	d005      	beq.n	801211c <lwip_netconn_do_close_internal+0x1f0>
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012114:	2200      	movs	r2, #0
 8012116:	2104      	movs	r1, #4
 8012118:	6878      	ldr	r0, [r7, #4]
 801211a:	4798      	blx	r3
      }
      if (shut_rx) {
 801211c:	7bbb      	ldrb	r3, [r7, #14]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d009      	beq.n	8012136 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012126:	2b00      	cmp	r3, #0
 8012128:	d005      	beq.n	8012136 <lwip_netconn_do_close_internal+0x20a>
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801212e:	2200      	movs	r2, #0
 8012130:	2100      	movs	r1, #0
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	4798      	blx	r3
      }
      if (shut_tx) {
 8012136:	7b7b      	ldrb	r3, [r7, #13]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d009      	beq.n	8012150 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012140:	2b00      	cmp	r3, #0
 8012142:	d005      	beq.n	8012150 <lwip_netconn_do_close_internal+0x224>
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012148:	2200      	movs	r2, #0
 801214a:	2102      	movs	r1, #2
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012150:	78fb      	ldrb	r3, [r7, #3]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d002      	beq.n	801215c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8012156:	68b8      	ldr	r0, [r7, #8]
 8012158:	f00d fc63 	bl	801fa22 <sys_sem_signal>
    }
    return ERR_OK;
 801215c:	2300      	movs	r3, #0
 801215e:	e03c      	b.n	80121da <lwip_netconn_do_close_internal+0x2ae>
 8012160:	08022518 	.word	0x08022518
 8012164:	080227ec 	.word	0x080227ec
 8012168:	0802255c 	.word	0x0802255c
 801216c:	080227fc 	.word	0x080227fc
 8012170:	0802281c 	.word	0x0802281c
 8012174:	08022840 	.word	0x08022840
 8012178:	08022680 	.word	0x08022680
  }
  if (!close_finished) {
 801217c:	7d7b      	ldrb	r3, [r7, #21]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d11e      	bne.n	80121c0 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8012182:	693b      	ldr	r3, [r7, #16]
 8012184:	7d1b      	ldrb	r3, [r3, #20]
 8012186:	2b01      	cmp	r3, #1
 8012188:	d106      	bne.n	8012198 <lwip_netconn_do_close_internal+0x26c>
 801218a:	4b16      	ldr	r3, [pc, #88]	@ (80121e4 <lwip_netconn_do_close_internal+0x2b8>)
 801218c:	f240 4241 	movw	r2, #1089	@ 0x441
 8012190:	4915      	ldr	r1, [pc, #84]	@ (80121e8 <lwip_netconn_do_close_internal+0x2bc>)
 8012192:	4816      	ldr	r0, [pc, #88]	@ (80121ec <lwip_netconn_do_close_internal+0x2c0>)
 8012194:	f00e fe9e 	bl	8020ed4 <iprintf>
    if (shut_tx) {
 8012198:	7b7b      	ldrb	r3, [r7, #13]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d003      	beq.n	80121a6 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801219e:	4914      	ldr	r1, [pc, #80]	@ (80121f0 <lwip_netconn_do_close_internal+0x2c4>)
 80121a0:	6938      	ldr	r0, [r7, #16]
 80121a2:	f004 ff45 	bl	8017030 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80121a6:	2201      	movs	r2, #1
 80121a8:	4912      	ldr	r1, [pc, #72]	@ (80121f4 <lwip_netconn_do_close_internal+0x2c8>)
 80121aa:	6938      	ldr	r0, [r7, #16]
 80121ac:	f004 ff9c 	bl	80170e8 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80121b0:	4911      	ldr	r1, [pc, #68]	@ (80121f8 <lwip_netconn_do_close_internal+0x2cc>)
 80121b2:	6938      	ldr	r0, [r7, #16]
 80121b4:	f004 ff5e 	bl	8017074 <tcp_err>
    tcp_arg(tpcb, conn);
 80121b8:	6879      	ldr	r1, [r7, #4]
 80121ba:	6938      	ldr	r0, [r7, #16]
 80121bc:	f004 ff04 	bl	8016fc8 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80121c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d106      	bne.n	80121d6 <lwip_netconn_do_close_internal+0x2aa>
 80121c8:	4b06      	ldr	r3, [pc, #24]	@ (80121e4 <lwip_netconn_do_close_internal+0x2b8>)
 80121ca:	f240 424d 	movw	r2, #1101	@ 0x44d
 80121ce:	490b      	ldr	r1, [pc, #44]	@ (80121fc <lwip_netconn_do_close_internal+0x2d0>)
 80121d0:	4806      	ldr	r0, [pc, #24]	@ (80121ec <lwip_netconn_do_close_internal+0x2c0>)
 80121d2:	f00e fe7f 	bl	8020ed4 <iprintf>
  return err;
 80121d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121da:	4618      	mov	r0, r3
 80121dc:	3718      	adds	r7, #24
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	08022518 	.word	0x08022518
 80121e8:	08022854 	.word	0x08022854
 80121ec:	0802255c 	.word	0x0802255c
 80121f0:	0801191d 	.word	0x0801191d
 80121f4:	08011855 	.word	0x08011855
 80121f8:	080119c5 	.word	0x080119c5
 80121fc:	08022878 	.word	0x08022878

08012200 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b084      	sub	sp, #16
 8012204:	af00      	add	r7, sp, #0
 8012206:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	785b      	ldrb	r3, [r3, #1]
 8012212:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012214:	7afb      	ldrb	r3, [r7, #11]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00d      	beq.n	8012236 <lwip_netconn_do_delconn+0x36>
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012224:	2b10      	cmp	r3, #16
 8012226:	d006      	beq.n	8012236 <lwip_netconn_do_delconn+0x36>
 8012228:	4b60      	ldr	r3, [pc, #384]	@ (80123ac <lwip_netconn_do_delconn+0x1ac>)
 801222a:	f240 425e 	movw	r2, #1118	@ 0x45e
 801222e:	4960      	ldr	r1, [pc, #384]	@ (80123b0 <lwip_netconn_do_delconn+0x1b0>)
 8012230:	4860      	ldr	r0, [pc, #384]	@ (80123b4 <lwip_netconn_do_delconn+0x1b4>)
 8012232:	f00e fe4f 	bl	8020ed4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8012236:	7afb      	ldrb	r3, [r7, #11]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d005      	beq.n	8012248 <lwip_netconn_do_delconn+0x48>
 801223c:	7afb      	ldrb	r3, [r7, #11]
 801223e:	2b02      	cmp	r3, #2
 8012240:	d002      	beq.n	8012248 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8012242:	7afb      	ldrb	r3, [r7, #11]
 8012244:	2b03      	cmp	r3, #3
 8012246:	d109      	bne.n	801225c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8012248:	7afb      	ldrb	r3, [r7, #11]
 801224a:	2b03      	cmp	r3, #3
 801224c:	d10a      	bne.n	8012264 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	7f1b      	ldrb	r3, [r3, #28]
 8012254:	f003 0304 	and.w	r3, r3, #4
 8012258:	2b00      	cmp	r3, #0
 801225a:	d103      	bne.n	8012264 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	22fb      	movs	r2, #251	@ 0xfb
 8012260:	711a      	strb	r2, [r3, #4]
 8012262:	e097      	b.n	8012394 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8012264:	7afb      	ldrb	r3, [r7, #11]
 8012266:	2b03      	cmp	r3, #3
 8012268:	d10d      	bne.n	8012286 <lwip_netconn_do_delconn+0x86>
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	7f1b      	ldrb	r3, [r3, #28]
 8012270:	f003 0304 	and.w	r3, r3, #4
 8012274:	2b00      	cmp	r3, #0
 8012276:	d106      	bne.n	8012286 <lwip_netconn_do_delconn+0x86>
 8012278:	4b4c      	ldr	r3, [pc, #304]	@ (80123ac <lwip_netconn_do_delconn+0x1ac>)
 801227a:	f240 427a 	movw	r2, #1146	@ 0x47a
 801227e:	494e      	ldr	r1, [pc, #312]	@ (80123b8 <lwip_netconn_do_delconn+0x1b8>)
 8012280:	484c      	ldr	r0, [pc, #304]	@ (80123b4 <lwip_netconn_do_delconn+0x1b4>)
 8012282:	f00e fe27 	bl	8020ed4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	2200      	movs	r2, #0
 801228a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	4618      	mov	r0, r3
 8012292:	f7ff fdcd 	bl	8011e30 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d05f      	beq.n	8012360 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80122aa:	2b10      	cmp	r3, #16
 80122ac:	d00d      	beq.n	80122ca <lwip_netconn_do_delconn+0xca>
 80122ae:	2b20      	cmp	r3, #32
 80122b0:	d151      	bne.n	8012356 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	685b      	ldr	r3, [r3, #4]
 80122b8:	2200      	movs	r2, #0
 80122ba:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	685b      	ldr	r3, [r3, #4]
 80122c2:	4618      	mov	r0, r3
 80122c4:	f00a fca8 	bl	801cc18 <udp_remove>
          break;
 80122c8:	e046      	b.n	8012358 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	6a1b      	ldr	r3, [r3, #32]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d006      	beq.n	80122e2 <lwip_netconn_do_delconn+0xe2>
 80122d4:	4b35      	ldr	r3, [pc, #212]	@ (80123ac <lwip_netconn_do_delconn+0x1ac>)
 80122d6:	f240 4294 	movw	r2, #1172	@ 0x494
 80122da:	4938      	ldr	r1, [pc, #224]	@ (80123bc <lwip_netconn_do_delconn+0x1bc>)
 80122dc:	4835      	ldr	r0, [pc, #212]	@ (80123b4 <lwip_netconn_do_delconn+0x1b4>)
 80122de:	f00e fdf9 	bl	8020ed4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	2204      	movs	r2, #4
 80122e8:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	2203      	movs	r2, #3
 80122ee:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	68fa      	ldr	r2, [r7, #12]
 80122f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	2100      	movs	r1, #0
 80122fe:	4618      	mov	r0, r3
 8012300:	f7ff fe14 	bl	8011f2c <lwip_netconn_do_close_internal>
 8012304:	4603      	mov	r3, r0
 8012306:	2b00      	cmp	r3, #0
 8012308:	d04b      	beq.n	80123a2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	785b      	ldrb	r3, [r3, #1]
 8012310:	2b04      	cmp	r3, #4
 8012312:	d006      	beq.n	8012322 <lwip_netconn_do_delconn+0x122>
 8012314:	4b25      	ldr	r3, [pc, #148]	@ (80123ac <lwip_netconn_do_delconn+0x1ac>)
 8012316:	f240 429a 	movw	r2, #1178	@ 0x49a
 801231a:	4929      	ldr	r1, [pc, #164]	@ (80123c0 <lwip_netconn_do_delconn+0x1c0>)
 801231c:	4825      	ldr	r0, [pc, #148]	@ (80123b4 <lwip_netconn_do_delconn+0x1b4>)
 801231e:	f00e fdd9 	bl	8020ed4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8012322:	4828      	ldr	r0, [pc, #160]	@ (80123c4 <lwip_netconn_do_delconn+0x1c4>)
 8012324:	f00d fc11 	bl	801fb4a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	330c      	adds	r3, #12
 801232e:	2100      	movs	r1, #0
 8012330:	4618      	mov	r0, r3
 8012332:	f00d fb45 	bl	801f9c0 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8012336:	4823      	ldr	r0, [pc, #140]	@ (80123c4 <lwip_netconn_do_delconn+0x1c4>)
 8012338:	f00d fbf8 	bl	801fb2c <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	785b      	ldrb	r3, [r3, #1]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d02d      	beq.n	80123a2 <lwip_netconn_do_delconn+0x1a2>
 8012346:	4b19      	ldr	r3, [pc, #100]	@ (80123ac <lwip_netconn_do_delconn+0x1ac>)
 8012348:	f240 429e 	movw	r2, #1182	@ 0x49e
 801234c:	491c      	ldr	r1, [pc, #112]	@ (80123c0 <lwip_netconn_do_delconn+0x1c0>)
 801234e:	4819      	ldr	r0, [pc, #100]	@ (80123b4 <lwip_netconn_do_delconn+0x1b4>)
 8012350:	f00e fdc0 	bl	8020ed4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8012354:	e025      	b.n	80123a2 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8012356:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	2200      	movs	r2, #0
 801235e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012366:	2b00      	cmp	r3, #0
 8012368:	d007      	beq.n	801237a <lwip_netconn_do_delconn+0x17a>
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	6810      	ldr	r0, [r2, #0]
 8012374:	2200      	movs	r2, #0
 8012376:	2100      	movs	r1, #0
 8012378:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012380:	2b00      	cmp	r3, #0
 8012382:	d007      	beq.n	8012394 <lwip_netconn_do_delconn+0x194>
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801238a:	68fa      	ldr	r2, [r7, #12]
 801238c:	6810      	ldr	r0, [r2, #0]
 801238e:	2200      	movs	r2, #0
 8012390:	2102      	movs	r1, #2
 8012392:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	330c      	adds	r3, #12
 801239a:	4618      	mov	r0, r3
 801239c:	f00d fb66 	bl	801fa6c <sys_sem_valid>
 80123a0:	e000      	b.n	80123a4 <lwip_netconn_do_delconn+0x1a4>
          return;
 80123a2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80123a4:	3710      	adds	r7, #16
 80123a6:	46bd      	mov	sp, r7
 80123a8:	bd80      	pop	{r7, pc}
 80123aa:	bf00      	nop
 80123ac:	08022518 	.word	0x08022518
 80123b0:	08022888 	.word	0x08022888
 80123b4:	0802255c 	.word	0x0802255c
 80123b8:	0802289c 	.word	0x0802289c
 80123bc:	080228bc 	.word	0x080228bc
 80123c0:	080228d8 	.word	0x080228d8
 80123c4:	200270f8 	.word	0x200270f8

080123c8 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d025      	beq.n	801242a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	781b      	ldrb	r3, [r3, #0]
 80123e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80123e8:	2b10      	cmp	r3, #16
 80123ea:	d00e      	beq.n	801240a <lwip_netconn_do_bind+0x42>
 80123ec:	2b20      	cmp	r3, #32
 80123ee:	d119      	bne.n	8012424 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80123f0:	68bb      	ldr	r3, [r7, #8]
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	6858      	ldr	r0, [r3, #4]
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	6899      	ldr	r1, [r3, #8]
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	899b      	ldrh	r3, [r3, #12]
 80123fe:	461a      	mov	r2, r3
 8012400:	f00a fa40 	bl	801c884 <udp_bind>
 8012404:	4603      	mov	r3, r0
 8012406:	73fb      	strb	r3, [r7, #15]
        break;
 8012408:	e011      	b.n	801242e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801240a:	68bb      	ldr	r3, [r7, #8]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	6858      	ldr	r0, [r3, #4]
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	6899      	ldr	r1, [r3, #8]
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	899b      	ldrh	r3, [r3, #12]
 8012418:	461a      	mov	r2, r3
 801241a:	f003 fcd9 	bl	8015dd0 <tcp_bind>
 801241e:	4603      	mov	r3, r0
 8012420:	73fb      	strb	r3, [r7, #15]
        break;
 8012422:	e004      	b.n	801242e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012424:	23fa      	movs	r3, #250	@ 0xfa
 8012426:	73fb      	strb	r3, [r7, #15]
        break;
 8012428:	e001      	b.n	801242e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801242a:	23fa      	movs	r3, #250	@ 0xfa
 801242c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	7bfa      	ldrb	r2, [r7, #15]
 8012432:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012434:	bf00      	nop
 8012436:	3710      	adds	r7, #16
 8012438:	46bd      	mov	sp, r7
 801243a:	bd80      	pop	{r7, pc}

0801243c <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b088      	sub	sp, #32
 8012440:	af00      	add	r7, sp, #0
 8012442:	60f8      	str	r0, [r7, #12]
 8012444:	60b9      	str	r1, [r7, #8]
 8012446:	4613      	mov	r3, r2
 8012448:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 801244a:	2300      	movs	r3, #0
 801244c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 8012452:	69bb      	ldr	r3, [r7, #24]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d102      	bne.n	801245e <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8012458:	f06f 0305 	mvn.w	r3, #5
 801245c:	e070      	b.n	8012540 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 801245e:	69bb      	ldr	r3, [r7, #24]
 8012460:	785b      	ldrb	r3, [r3, #1]
 8012462:	2b03      	cmp	r3, #3
 8012464:	d006      	beq.n	8012474 <lwip_netconn_do_connected+0x38>
 8012466:	4b38      	ldr	r3, [pc, #224]	@ (8012548 <lwip_netconn_do_connected+0x10c>)
 8012468:	f240 5223 	movw	r2, #1315	@ 0x523
 801246c:	4937      	ldr	r1, [pc, #220]	@ (801254c <lwip_netconn_do_connected+0x110>)
 801246e:	4838      	ldr	r0, [pc, #224]	@ (8012550 <lwip_netconn_do_connected+0x114>)
 8012470:	f00e fd30 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8012474:	69bb      	ldr	r3, [r7, #24]
 8012476:	6a1b      	ldr	r3, [r3, #32]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d10c      	bne.n	8012496 <lwip_netconn_do_connected+0x5a>
 801247c:	69bb      	ldr	r3, [r7, #24]
 801247e:	7f1b      	ldrb	r3, [r3, #28]
 8012480:	f003 0304 	and.w	r3, r3, #4
 8012484:	2b00      	cmp	r3, #0
 8012486:	d106      	bne.n	8012496 <lwip_netconn_do_connected+0x5a>
 8012488:	4b2f      	ldr	r3, [pc, #188]	@ (8012548 <lwip_netconn_do_connected+0x10c>)
 801248a:	f240 5224 	movw	r2, #1316	@ 0x524
 801248e:	4931      	ldr	r1, [pc, #196]	@ (8012554 <lwip_netconn_do_connected+0x118>)
 8012490:	482f      	ldr	r0, [pc, #188]	@ (8012550 <lwip_netconn_do_connected+0x114>)
 8012492:	f00e fd1f 	bl	8020ed4 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8012496:	69bb      	ldr	r3, [r7, #24]
 8012498:	6a1b      	ldr	r3, [r3, #32]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d008      	beq.n	80124b0 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801249e:	69bb      	ldr	r3, [r7, #24]
 80124a0:	6a1b      	ldr	r3, [r3, #32]
 80124a2:	79fa      	ldrb	r2, [r7, #7]
 80124a4:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80124a6:	69bb      	ldr	r3, [r7, #24]
 80124a8:	6a1b      	ldr	r3, [r3, #32]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	330c      	adds	r3, #12
 80124ae:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80124b0:	69bb      	ldr	r3, [r7, #24]
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80124b8:	2b10      	cmp	r3, #16
 80124ba:	d106      	bne.n	80124ca <lwip_netconn_do_connected+0x8e>
 80124bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d102      	bne.n	80124ca <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 80124c4:	69b8      	ldr	r0, [r7, #24]
 80124c6:	f7ff fb53 	bl	8011b70 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80124ca:	69bb      	ldr	r3, [r7, #24]
 80124cc:	7f1b      	ldrb	r3, [r3, #28]
 80124ce:	f003 0304 	and.w	r3, r3, #4
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	bf0c      	ite	eq
 80124d6:	2301      	moveq	r3, #1
 80124d8:	2300      	movne	r3, #0
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	7f1b      	ldrb	r3, [r3, #28]
 80124e2:	f023 0304 	bic.w	r3, r3, #4
 80124e6:	b2da      	uxtb	r2, r3
 80124e8:	69bb      	ldr	r3, [r7, #24]
 80124ea:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d002      	beq.n	80124f8 <lwip_netconn_do_connected+0xbc>
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d10c      	bne.n	8012512 <lwip_netconn_do_connected+0xd6>
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d102      	bne.n	8012504 <lwip_netconn_do_connected+0xc8>
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d006      	beq.n	8012512 <lwip_netconn_do_connected+0xd6>
 8012504:	4b10      	ldr	r3, [pc, #64]	@ (8012548 <lwip_netconn_do_connected+0x10c>)
 8012506:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 801250a:	4913      	ldr	r1, [pc, #76]	@ (8012558 <lwip_netconn_do_connected+0x11c>)
 801250c:	4810      	ldr	r0, [pc, #64]	@ (8012550 <lwip_netconn_do_connected+0x114>)
 801250e:	f00e fce1 	bl	8020ed4 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8012512:	69bb      	ldr	r3, [r7, #24]
 8012514:	2200      	movs	r2, #0
 8012516:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 8012518:	69bb      	ldr	r3, [r7, #24]
 801251a:	2200      	movs	r2, #0
 801251c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801251e:	69bb      	ldr	r3, [r7, #24]
 8012520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012522:	2b00      	cmp	r3, #0
 8012524:	d005      	beq.n	8012532 <lwip_netconn_do_connected+0xf6>
 8012526:	69bb      	ldr	r3, [r7, #24]
 8012528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801252a:	2200      	movs	r2, #0
 801252c:	2102      	movs	r1, #2
 801252e:	69b8      	ldr	r0, [r7, #24]
 8012530:	4798      	blx	r3

  if (was_blocking) {
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d002      	beq.n	801253e <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8012538:	69f8      	ldr	r0, [r7, #28]
 801253a:	f00d fa72 	bl	801fa22 <sys_sem_signal>
  }
  return ERR_OK;
 801253e:	2300      	movs	r3, #0
}
 8012540:	4618      	mov	r0, r3
 8012542:	3720      	adds	r7, #32
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	08022518 	.word	0x08022518
 801254c:	080228e0 	.word	0x080228e0
 8012550:	0802255c 	.word	0x0802255c
 8012554:	08022900 	.word	0x08022900
 8012558:	08022940 	.word	0x08022940

0801255c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b086      	sub	sp, #24
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	685b      	ldr	r3, [r3, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d102      	bne.n	8012578 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8012572:	23f1      	movs	r3, #241	@ 0xf1
 8012574:	75fb      	strb	r3, [r7, #23]
 8012576:	e09b      	b.n	80126b0 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012582:	2b10      	cmp	r3, #16
 8012584:	d00f      	beq.n	80125a6 <lwip_netconn_do_connect+0x4a>
 8012586:	2b20      	cmp	r3, #32
 8012588:	f040 8087 	bne.w	801269a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	6858      	ldr	r0, [r3, #4]
 8012592:	693b      	ldr	r3, [r7, #16]
 8012594:	6899      	ldr	r1, [r3, #8]
 8012596:	693b      	ldr	r3, [r7, #16]
 8012598:	899b      	ldrh	r3, [r3, #12]
 801259a:	461a      	mov	r2, r3
 801259c:	f00a fa60 	bl	801ca60 <udp_connect>
 80125a0:	4603      	mov	r3, r0
 80125a2:	75fb      	strb	r3, [r7, #23]
        break;
 80125a4:	e084      	b.n	80126b0 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 80125a6:	693b      	ldr	r3, [r7, #16]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	785b      	ldrb	r3, [r3, #1]
 80125ac:	2b03      	cmp	r3, #3
 80125ae:	d102      	bne.n	80125b6 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 80125b0:	23f7      	movs	r3, #247	@ 0xf7
 80125b2:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 80125b4:	e07b      	b.n	80126ae <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 80125b6:	693b      	ldr	r3, [r7, #16]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	785b      	ldrb	r3, [r3, #1]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d002      	beq.n	80125c6 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 80125c0:	23f6      	movs	r3, #246	@ 0xf6
 80125c2:	75fb      	strb	r3, [r7, #23]
        break;
 80125c4:	e073      	b.n	80126ae <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7ff fad0 	bl	8011b70 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	681b      	ldr	r3, [r3, #0]
 80125d4:	6858      	ldr	r0, [r3, #4]
 80125d6:	693b      	ldr	r3, [r7, #16]
 80125d8:	6899      	ldr	r1, [r3, #8]
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	899a      	ldrh	r2, [r3, #12]
 80125de:	4b38      	ldr	r3, [pc, #224]	@ (80126c0 <lwip_netconn_do_connect+0x164>)
 80125e0:	f003 fd7e 	bl	80160e0 <tcp_connect>
 80125e4:	4603      	mov	r3, r0
 80125e6:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80125e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d15e      	bne.n	80126ae <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80125f0:	693b      	ldr	r3, [r7, #16]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	7f1b      	ldrb	r3, [r3, #28]
 80125f6:	f003 0302 	and.w	r3, r3, #2
 80125fa:	2b00      	cmp	r3, #0
 80125fc:	bf14      	ite	ne
 80125fe:	2301      	movne	r3, #1
 8012600:	2300      	moveq	r3, #0
 8012602:	b2db      	uxtb	r3, r3
 8012604:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	2203      	movs	r2, #3
 801260c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 801260e:	7bfb      	ldrb	r3, [r7, #15]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d009      	beq.n	8012628 <lwip_netconn_do_connect+0xcc>
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	7f1a      	ldrb	r2, [r3, #28]
 801261a:	693b      	ldr	r3, [r7, #16]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	f042 0204 	orr.w	r2, r2, #4
 8012622:	b2d2      	uxtb	r2, r2
 8012624:	771a      	strb	r2, [r3, #28]
 8012626:	e008      	b.n	801263a <lwip_netconn_do_connect+0xde>
 8012628:	693b      	ldr	r3, [r7, #16]
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	7f1a      	ldrb	r2, [r3, #28]
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	f022 0204 	bic.w	r2, r2, #4
 8012636:	b2d2      	uxtb	r2, r2
 8012638:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 801263a:	7bfb      	ldrb	r3, [r7, #15]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d002      	beq.n	8012646 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 8012640:	23fb      	movs	r3, #251	@ 0xfb
 8012642:	75fb      	strb	r3, [r7, #23]
        break;
 8012644:	e033      	b.n	80126ae <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8012646:	693b      	ldr	r3, [r7, #16]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	693a      	ldr	r2, [r7, #16]
 801264c:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 801264e:	693b      	ldr	r3, [r7, #16]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	785b      	ldrb	r3, [r3, #1]
 8012654:	2b03      	cmp	r3, #3
 8012656:	d006      	beq.n	8012666 <lwip_netconn_do_connect+0x10a>
 8012658:	4b1a      	ldr	r3, [pc, #104]	@ (80126c4 <lwip_netconn_do_connect+0x168>)
 801265a:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 801265e:	491a      	ldr	r1, [pc, #104]	@ (80126c8 <lwip_netconn_do_connect+0x16c>)
 8012660:	481a      	ldr	r0, [pc, #104]	@ (80126cc <lwip_netconn_do_connect+0x170>)
 8012662:	f00e fc37 	bl	8020ed4 <iprintf>
              UNLOCK_TCPIP_CORE();
 8012666:	481a      	ldr	r0, [pc, #104]	@ (80126d0 <lwip_netconn_do_connect+0x174>)
 8012668:	f00d fa6f 	bl	801fb4a <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801266c:	693b      	ldr	r3, [r7, #16]
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	330c      	adds	r3, #12
 8012672:	2100      	movs	r1, #0
 8012674:	4618      	mov	r0, r3
 8012676:	f00d f9a3 	bl	801f9c0 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 801267a:	4815      	ldr	r0, [pc, #84]	@ (80126d0 <lwip_netconn_do_connect+0x174>)
 801267c:	f00d fa56 	bl	801fb2c <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8012680:	693b      	ldr	r3, [r7, #16]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	785b      	ldrb	r3, [r3, #1]
 8012686:	2b03      	cmp	r3, #3
 8012688:	d116      	bne.n	80126b8 <lwip_netconn_do_connect+0x15c>
 801268a:	4b0e      	ldr	r3, [pc, #56]	@ (80126c4 <lwip_netconn_do_connect+0x168>)
 801268c:	f240 5274 	movw	r2, #1396	@ 0x574
 8012690:	490d      	ldr	r1, [pc, #52]	@ (80126c8 <lwip_netconn_do_connect+0x16c>)
 8012692:	480e      	ldr	r0, [pc, #56]	@ (80126cc <lwip_netconn_do_connect+0x170>)
 8012694:	f00e fc1e 	bl	8020ed4 <iprintf>
              return;
 8012698:	e00e      	b.n	80126b8 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 801269a:	4b0a      	ldr	r3, [pc, #40]	@ (80126c4 <lwip_netconn_do_connect+0x168>)
 801269c:	f240 527d 	movw	r2, #1405	@ 0x57d
 80126a0:	490c      	ldr	r1, [pc, #48]	@ (80126d4 <lwip_netconn_do_connect+0x178>)
 80126a2:	480a      	ldr	r0, [pc, #40]	@ (80126cc <lwip_netconn_do_connect+0x170>)
 80126a4:	f00e fc16 	bl	8020ed4 <iprintf>
 80126a8:	23fa      	movs	r3, #250	@ 0xfa
 80126aa:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 80126ac:	e000      	b.n	80126b0 <lwip_netconn_do_connect+0x154>
        break;
 80126ae:	bf00      	nop
    }
  }
  msg->err = err;
 80126b0:	693b      	ldr	r3, [r7, #16]
 80126b2:	7dfa      	ldrb	r2, [r7, #23]
 80126b4:	711a      	strb	r2, [r3, #4]
 80126b6:	e000      	b.n	80126ba <lwip_netconn_do_connect+0x15e>
              return;
 80126b8:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 80126ba:	3718      	adds	r7, #24
 80126bc:	46bd      	mov	sp, r7
 80126be:	bd80      	pop	{r7, pc}
 80126c0:	0801243d 	.word	0x0801243d
 80126c4:	08022518 	.word	0x08022518
 80126c8:	080228d8 	.word	0x080228d8
 80126cc:	0802255c 	.word	0x0802255c
 80126d0:	200270f8 	.word	0x200270f8
 80126d4:	08022960 	.word	0x08022960

080126d8 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 80126d8:	b580      	push	{r7, lr}
 80126da:	b084      	sub	sp, #16
 80126dc:	af00      	add	r7, sp, #0
 80126de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80126ee:	2b20      	cmp	r3, #32
 80126f0:	d109      	bne.n	8012706 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f00a fa45 	bl	801cb88 <udp_disconnect>
    msg->err = ERR_OK;
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	2200      	movs	r2, #0
 8012702:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012704:	e002      	b.n	801270c <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	22fa      	movs	r2, #250	@ 0xfa
 801270a:	711a      	strb	r2, [r3, #4]
}
 801270c:	bf00      	nop
 801270e:	3710      	adds	r7, #16
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}

08012714 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4618      	mov	r0, r3
 8012726:	f7fe ff05 	bl	8011534 <netconn_err>
 801272a:	4603      	mov	r3, r0
 801272c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012732:	2b00      	cmp	r3, #0
 8012734:	d134      	bne.n	80127a0 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d02d      	beq.n	801279c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012740:	68bb      	ldr	r3, [r7, #8]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801274a:	2b20      	cmp	r3, #32
 801274c:	d123      	bne.n	8012796 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	689b      	ldr	r3, [r3, #8]
 8012752:	689b      	ldr	r3, [r3, #8]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d10c      	bne.n	8012772 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	685a      	ldr	r2, [r3, #4]
 801275e:	68bb      	ldr	r3, [r7, #8]
 8012760:	689b      	ldr	r3, [r3, #8]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	4619      	mov	r1, r3
 8012766:	4610      	mov	r0, r2
 8012768:	f009 fe1c 	bl	801c3a4 <udp_send>
 801276c:	4603      	mov	r3, r0
 801276e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8012770:	e016      	b.n	80127a0 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8012772:	68bb      	ldr	r3, [r7, #8]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	6858      	ldr	r0, [r3, #4]
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	689b      	ldr	r3, [r3, #8]
 801277c:	6819      	ldr	r1, [r3, #0]
 801277e:	68bb      	ldr	r3, [r7, #8]
 8012780:	689b      	ldr	r3, [r3, #8]
 8012782:	f103 0208 	add.w	r2, r3, #8
 8012786:	68bb      	ldr	r3, [r7, #8]
 8012788:	689b      	ldr	r3, [r3, #8]
 801278a:	899b      	ldrh	r3, [r3, #12]
 801278c:	f009 fe3e 	bl	801c40c <udp_sendto>
 8012790:	4603      	mov	r3, r0
 8012792:	73fb      	strb	r3, [r7, #15]
          break;
 8012794:	e004      	b.n	80127a0 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012796:	23f5      	movs	r3, #245	@ 0xf5
 8012798:	73fb      	strb	r3, [r7, #15]
          break;
 801279a:	e001      	b.n	80127a0 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 801279c:	23f5      	movs	r3, #245	@ 0xf5
 801279e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	7bfa      	ldrb	r2, [r7, #15]
 80127a4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80127a6:	bf00      	nop
 80127a8:	3710      	adds	r7, #16
 80127aa:	46bd      	mov	sp, r7
 80127ac:	bd80      	pop	{r7, pc}

080127ae <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80127ae:	b580      	push	{r7, lr}
 80127b0:	b086      	sub	sp, #24
 80127b2:	af00      	add	r7, sp, #0
 80127b4:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80127ba:	693b      	ldr	r3, [r7, #16]
 80127bc:	2200      	movs	r2, #0
 80127be:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80127c0:	693b      	ldr	r3, [r7, #16]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	685b      	ldr	r3, [r3, #4]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d022      	beq.n	8012810 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80127ca:	693b      	ldr	r3, [r7, #16]
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80127d4:	2b10      	cmp	r3, #16
 80127d6:	d11b      	bne.n	8012810 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80127d8:	693b      	ldr	r3, [r7, #16]
 80127da:	689b      	ldr	r3, [r3, #8]
 80127dc:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80127e4:	d202      	bcs.n	80127ec <lwip_netconn_do_recv+0x3e>
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	b29b      	uxth	r3, r3
 80127ea:	e001      	b.n	80127f0 <lwip_netconn_do_recv+0x42>
 80127ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80127f0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80127f2:	693b      	ldr	r3, [r7, #16]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	685b      	ldr	r3, [r3, #4]
 80127f8:	89fa      	ldrh	r2, [r7, #14]
 80127fa:	4611      	mov	r1, r2
 80127fc:	4618      	mov	r0, r3
 80127fe:	f003 fbd9 	bl	8015fb4 <tcp_recved>
        remaining -= recved;
 8012802:	89fb      	ldrh	r3, [r7, #14]
 8012804:	697a      	ldr	r2, [r7, #20]
 8012806:	1ad3      	subs	r3, r2, r3
 8012808:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 801280a:	697b      	ldr	r3, [r7, #20]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d1e6      	bne.n	80127de <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012810:	bf00      	nop
 8012812:	3718      	adds	r7, #24
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}

08012818 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b088      	sub	sp, #32
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	460b      	mov	r3, r1
 8012822:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8012824:	2300      	movs	r3, #0
 8012826:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d106      	bne.n	801283c <lwip_netconn_do_writemore+0x24>
 801282e:	4b96      	ldr	r3, [pc, #600]	@ (8012a88 <lwip_netconn_do_writemore+0x270>)
 8012830:	f240 6273 	movw	r2, #1651	@ 0x673
 8012834:	4995      	ldr	r1, [pc, #596]	@ (8012a8c <lwip_netconn_do_writemore+0x274>)
 8012836:	4896      	ldr	r0, [pc, #600]	@ (8012a90 <lwip_netconn_do_writemore+0x278>)
 8012838:	f00e fb4c 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	785b      	ldrb	r3, [r3, #1]
 8012840:	2b01      	cmp	r3, #1
 8012842:	d006      	beq.n	8012852 <lwip_netconn_do_writemore+0x3a>
 8012844:	4b90      	ldr	r3, [pc, #576]	@ (8012a88 <lwip_netconn_do_writemore+0x270>)
 8012846:	f240 6274 	movw	r2, #1652	@ 0x674
 801284a:	4992      	ldr	r1, [pc, #584]	@ (8012a94 <lwip_netconn_do_writemore+0x27c>)
 801284c:	4890      	ldr	r0, [pc, #576]	@ (8012a90 <lwip_netconn_do_writemore+0x278>)
 801284e:	f00e fb41 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6a1b      	ldr	r3, [r3, #32]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d106      	bne.n	8012868 <lwip_netconn_do_writemore+0x50>
 801285a:	4b8b      	ldr	r3, [pc, #556]	@ (8012a88 <lwip_netconn_do_writemore+0x270>)
 801285c:	f240 6275 	movw	r2, #1653	@ 0x675
 8012860:	498d      	ldr	r1, [pc, #564]	@ (8012a98 <lwip_netconn_do_writemore+0x280>)
 8012862:	488b      	ldr	r0, [pc, #556]	@ (8012a90 <lwip_netconn_do_writemore+0x278>)
 8012864:	f00e fb36 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	685b      	ldr	r3, [r3, #4]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d106      	bne.n	801287e <lwip_netconn_do_writemore+0x66>
 8012870:	4b85      	ldr	r3, [pc, #532]	@ (8012a88 <lwip_netconn_do_writemore+0x270>)
 8012872:	f240 6276 	movw	r2, #1654	@ 0x676
 8012876:	4989      	ldr	r1, [pc, #548]	@ (8012a9c <lwip_netconn_do_writemore+0x284>)
 8012878:	4885      	ldr	r0, [pc, #532]	@ (8012a90 <lwip_netconn_do_writemore+0x278>)
 801287a:	f00e fb2b 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	6a1b      	ldr	r3, [r3, #32]
 8012882:	699a      	ldr	r2, [r3, #24]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6a1b      	ldr	r3, [r3, #32]
 8012888:	695b      	ldr	r3, [r3, #20]
 801288a:	429a      	cmp	r2, r3
 801288c:	d306      	bcc.n	801289c <lwip_netconn_do_writemore+0x84>
 801288e:	4b7e      	ldr	r3, [pc, #504]	@ (8012a88 <lwip_netconn_do_writemore+0x270>)
 8012890:	f240 6277 	movw	r2, #1655	@ 0x677
 8012894:	4982      	ldr	r1, [pc, #520]	@ (8012aa0 <lwip_netconn_do_writemore+0x288>)
 8012896:	487e      	ldr	r0, [pc, #504]	@ (8012a90 <lwip_netconn_do_writemore+0x278>)
 8012898:	f00e fb1c 	bl	8020ed4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6a1b      	ldr	r3, [r3, #32]
 80128a0:	899b      	ldrh	r3, [r3, #12]
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d106      	bne.n	80128b4 <lwip_netconn_do_writemore+0x9c>
 80128a6:	4b78      	ldr	r3, [pc, #480]	@ (8012a88 <lwip_netconn_do_writemore+0x270>)
 80128a8:	f240 6279 	movw	r2, #1657	@ 0x679
 80128ac:	497d      	ldr	r1, [pc, #500]	@ (8012aa4 <lwip_netconn_do_writemore+0x28c>)
 80128ae:	4878      	ldr	r0, [pc, #480]	@ (8012a90 <lwip_netconn_do_writemore+0x278>)
 80128b0:	f00e fb10 	bl	8020ed4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6a1b      	ldr	r3, [r3, #32]
 80128b8:	7f1b      	ldrb	r3, [r3, #28]
 80128ba:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	7f1b      	ldrb	r3, [r3, #28]
 80128c0:	f003 0302 	and.w	r3, r3, #2
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d104      	bne.n	80128d2 <lwip_netconn_do_writemore+0xba>
 80128c8:	7ebb      	ldrb	r3, [r7, #26]
 80128ca:	f003 0304 	and.w	r3, r3, #4
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d001      	beq.n	80128d6 <lwip_netconn_do_writemore+0xbe>
 80128d2:	2301      	movs	r3, #1
 80128d4:	e000      	b.n	80128d8 <lwip_netconn_do_writemore+0xc0>
 80128d6:	2300      	movs	r3, #0
 80128d8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	6a1b      	ldr	r3, [r3, #32]
 80128de:	689b      	ldr	r3, [r3, #8]
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6a1b      	ldr	r3, [r3, #32]
 80128e6:	691b      	ldr	r3, [r3, #16]
 80128e8:	4413      	add	r3, r2
 80128ea:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	6a1b      	ldr	r3, [r3, #32]
 80128f0:	689b      	ldr	r3, [r3, #8]
 80128f2:	685a      	ldr	r2, [r3, #4]
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	6a1b      	ldr	r3, [r3, #32]
 80128f8:	691b      	ldr	r3, [r3, #16]
 80128fa:	1ad3      	subs	r3, r2, r3
 80128fc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80128fe:	693b      	ldr	r3, [r7, #16]
 8012900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012904:	d307      	bcc.n	8012916 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012906:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801290a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801290c:	7ebb      	ldrb	r3, [r7, #26]
 801290e:	f043 0302 	orr.w	r3, r3, #2
 8012912:	76bb      	strb	r3, [r7, #26]
 8012914:	e001      	b.n	801291a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012922:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8012924:	89fa      	ldrh	r2, [r7, #14]
 8012926:	8bbb      	ldrh	r3, [r7, #28]
 8012928:	429a      	cmp	r2, r3
 801292a:	d216      	bcs.n	801295a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 801292c:	89fb      	ldrh	r3, [r7, #14]
 801292e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8012930:	7e3b      	ldrb	r3, [r7, #24]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d00d      	beq.n	8012952 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8012936:	8bbb      	ldrh	r3, [r7, #28]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d10e      	bne.n	801295a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	6a1b      	ldr	r3, [r3, #32]
 8012940:	699b      	ldr	r3, [r3, #24]
 8012942:	2b00      	cmp	r3, #0
 8012944:	d102      	bne.n	801294c <lwip_netconn_do_writemore+0x134>
 8012946:	f06f 0306 	mvn.w	r3, #6
 801294a:	e000      	b.n	801294e <lwip_netconn_do_writemore+0x136>
 801294c:	2300      	movs	r3, #0
 801294e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8012950:	e07d      	b.n	8012a4e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8012952:	7ebb      	ldrb	r3, [r7, #26]
 8012954:	f043 0302 	orr.w	r3, r3, #2
 8012958:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	6a1b      	ldr	r3, [r3, #32]
 801295e:	691a      	ldr	r2, [r3, #16]
 8012960:	8bbb      	ldrh	r3, [r7, #28]
 8012962:	441a      	add	r2, r3
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6a1b      	ldr	r3, [r3, #32]
 8012968:	689b      	ldr	r3, [r3, #8]
 801296a:	685b      	ldr	r3, [r3, #4]
 801296c:	429a      	cmp	r2, r3
 801296e:	d906      	bls.n	801297e <lwip_netconn_do_writemore+0x166>
 8012970:	4b45      	ldr	r3, [pc, #276]	@ (8012a88 <lwip_netconn_do_writemore+0x270>)
 8012972:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8012976:	494c      	ldr	r1, [pc, #304]	@ (8012aa8 <lwip_netconn_do_writemore+0x290>)
 8012978:	4845      	ldr	r0, [pc, #276]	@ (8012a90 <lwip_netconn_do_writemore+0x278>)
 801297a:	f00e faab 	bl	8020ed4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801297e:	8bbb      	ldrh	r3, [r7, #28]
 8012980:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012984:	4293      	cmp	r3, r2
 8012986:	d103      	bne.n	8012990 <lwip_netconn_do_writemore+0x178>
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801298e:	d209      	bcs.n	80129a4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012994:	8bba      	ldrh	r2, [r7, #28]
 8012996:	429a      	cmp	r2, r3
 8012998:	d10b      	bne.n	80129b2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6a1b      	ldr	r3, [r3, #32]
 801299e:	899b      	ldrh	r3, [r3, #12]
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d906      	bls.n	80129b2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80129a4:	2301      	movs	r3, #1
 80129a6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80129a8:	7ebb      	ldrb	r3, [r7, #26]
 80129aa:	f043 0302 	orr.w	r3, r3, #2
 80129ae:	76bb      	strb	r3, [r7, #26]
 80129b0:	e001      	b.n	80129b6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80129b2:	2300      	movs	r3, #0
 80129b4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6858      	ldr	r0, [r3, #4]
 80129ba:	7ebb      	ldrb	r3, [r7, #26]
 80129bc:	8bba      	ldrh	r2, [r7, #28]
 80129be:	6979      	ldr	r1, [r7, #20]
 80129c0:	f007 fac2 	bl	8019f48 <tcp_write>
 80129c4:	4603      	mov	r3, r0
 80129c6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80129c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d12c      	bne.n	8012a2a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6a1b      	ldr	r3, [r3, #32]
 80129d4:	6999      	ldr	r1, [r3, #24]
 80129d6:	8bba      	ldrh	r2, [r7, #28]
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	6a1b      	ldr	r3, [r3, #32]
 80129dc:	440a      	add	r2, r1
 80129de:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6a1b      	ldr	r3, [r3, #32]
 80129e4:	6919      	ldr	r1, [r3, #16]
 80129e6:	8bba      	ldrh	r2, [r7, #28]
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	6a1b      	ldr	r3, [r3, #32]
 80129ec:	440a      	add	r2, r1
 80129ee:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	6a1b      	ldr	r3, [r3, #32]
 80129f4:	691a      	ldr	r2, [r3, #16]
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	6a1b      	ldr	r3, [r3, #32]
 80129fa:	689b      	ldr	r3, [r3, #8]
 80129fc:	685b      	ldr	r3, [r3, #4]
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d113      	bne.n	8012a2a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	6a1b      	ldr	r3, [r3, #32]
 8012a06:	899a      	ldrh	r2, [r3, #12]
 8012a08:	3a01      	subs	r2, #1
 8012a0a:	b292      	uxth	r2, r2
 8012a0c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	6a1b      	ldr	r3, [r3, #32]
 8012a12:	899b      	ldrh	r3, [r3, #12]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d008      	beq.n	8012a2a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6a1b      	ldr	r3, [r3, #32]
 8012a1c:	689a      	ldr	r2, [r3, #8]
 8012a1e:	3208      	adds	r2, #8
 8012a20:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6a1b      	ldr	r3, [r3, #32]
 8012a26:	2200      	movs	r2, #0
 8012a28:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8012a2a:	7e7b      	ldrb	r3, [r7, #25]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d004      	beq.n	8012a3a <lwip_netconn_do_writemore+0x222>
 8012a30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	f43f af50 	beq.w	80128da <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8012a3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	d004      	beq.n	8012a4c <lwip_netconn_do_writemore+0x234>
 8012a42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012a46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012a4a:	d146      	bne.n	8012ada <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8012a4c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012a4e:	7e3b      	ldrb	r3, [r7, #24]
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d02b      	beq.n	8012aac <lwip_netconn_do_writemore+0x294>
 8012a54:	687b      	ldr	r3, [r7, #4]
 8012a56:	6a1b      	ldr	r3, [r3, #32]
 8012a58:	699a      	ldr	r2, [r3, #24]
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	6a1b      	ldr	r3, [r3, #32]
 8012a5e:	695b      	ldr	r3, [r3, #20]
 8012a60:	429a      	cmp	r2, r3
 8012a62:	d223      	bcs.n	8012aac <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d005      	beq.n	8012a78 <lwip_netconn_do_writemore+0x260>
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012a70:	2200      	movs	r2, #0
 8012a72:	2103      	movs	r1, #3
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	7f1b      	ldrb	r3, [r3, #28]
 8012a7c:	f043 0310 	orr.w	r3, r3, #16
 8012a80:	b2da      	uxtb	r2, r3
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	771a      	strb	r2, [r3, #28]
 8012a86:	e028      	b.n	8012ada <lwip_netconn_do_writemore+0x2c2>
 8012a88:	08022518 	.word	0x08022518
 8012a8c:	08022670 	.word	0x08022670
 8012a90:	0802255c 	.word	0x0802255c
 8012a94:	08022978 	.word	0x08022978
 8012a98:	08022680 	.word	0x08022680
 8012a9c:	08022998 	.word	0x08022998
 8012aa0:	080229b0 	.word	0x080229b0
 8012aa4:	080229f0 	.word	0x080229f0
 8012aa8:	08022a18 	.word	0x08022a18
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012ab4:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 8012ab8:	d305      	bcc.n	8012ac6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	685b      	ldr	r3, [r3, #4]
 8012abe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012ac2:	2b04      	cmp	r3, #4
 8012ac4:	d909      	bls.n	8012ada <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d005      	beq.n	8012ada <lwip_netconn_do_writemore+0x2c2>
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	2103      	movs	r1, #3
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012ada:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d11d      	bne.n	8012b1e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	6a1b      	ldr	r3, [r3, #32]
 8012ae6:	699a      	ldr	r2, [r3, #24]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	6a1b      	ldr	r3, [r3, #32]
 8012aec:	695b      	ldr	r3, [r3, #20]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d002      	beq.n	8012af8 <lwip_netconn_do_writemore+0x2e0>
 8012af2:	7e3b      	ldrb	r3, [r7, #24]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d001      	beq.n	8012afc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012af8:	2301      	movs	r3, #1
 8012afa:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	685b      	ldr	r3, [r3, #4]
 8012b00:	4618      	mov	r0, r3
 8012b02:	f008 f88f 	bl	801ac24 <tcp_output>
 8012b06:	4603      	mov	r3, r0
 8012b08:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012b0a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8012b0e:	f113 0f04 	cmn.w	r3, #4
 8012b12:	d12c      	bne.n	8012b6e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012b14:	7b3b      	ldrb	r3, [r7, #12]
 8012b16:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012b18:	2301      	movs	r3, #1
 8012b1a:	76fb      	strb	r3, [r7, #27]
 8012b1c:	e027      	b.n	8012b6e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8012b1e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012b22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012b26:	d120      	bne.n	8012b6a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	685b      	ldr	r3, [r3, #4]
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	f008 f879 	bl	801ac24 <tcp_output>
 8012b32:	4603      	mov	r3, r0
 8012b34:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8012b36:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8012b3a:	f113 0f04 	cmn.w	r3, #4
 8012b3e:	d104      	bne.n	8012b4a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012b40:	7b7b      	ldrb	r3, [r7, #13]
 8012b42:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012b44:	2301      	movs	r3, #1
 8012b46:	76fb      	strb	r3, [r7, #27]
 8012b48:	e011      	b.n	8012b6e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8012b4a:	7e3b      	ldrb	r3, [r7, #24]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d00e      	beq.n	8012b6e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6a1b      	ldr	r3, [r3, #32]
 8012b54:	699b      	ldr	r3, [r3, #24]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d102      	bne.n	8012b60 <lwip_netconn_do_writemore+0x348>
 8012b5a:	f06f 0306 	mvn.w	r3, #6
 8012b5e:	e000      	b.n	8012b62 <lwip_netconn_do_writemore+0x34a>
 8012b60:	2300      	movs	r3, #0
 8012b62:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012b64:	2301      	movs	r3, #1
 8012b66:	76fb      	strb	r3, [r7, #27]
 8012b68:	e001      	b.n	8012b6e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012b6e:	7efb      	ldrb	r3, [r7, #27]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d015      	beq.n	8012ba0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6a1b      	ldr	r3, [r3, #32]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	330c      	adds	r3, #12
 8012b7c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6a1b      	ldr	r3, [r3, #32]
 8012b82:	7ffa      	ldrb	r2, [r7, #31]
 8012b84:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	2200      	movs	r2, #0
 8012b8a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	2200      	movs	r2, #0
 8012b90:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012b92:	78fb      	ldrb	r3, [r7, #3]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d006      	beq.n	8012ba6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012b98:	68b8      	ldr	r0, [r7, #8]
 8012b9a:	f00c ff42 	bl	801fa22 <sys_sem_signal>
 8012b9e:	e002      	b.n	8012ba6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012ba0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012ba4:	e000      	b.n	8012ba8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3720      	adds	r7, #32
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	785b      	ldrb	r3, [r3, #1]
 8012bc2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	685b      	ldr	r3, [r3, #4]
 8012bca:	2b00      	cmp	r3, #0
 8012bcc:	d069      	beq.n	8012ca2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012bd8:	2b10      	cmp	r3, #16
 8012bda:	d162      	bne.n	8012ca2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8012be0:	2b03      	cmp	r3, #3
 8012be2:	d002      	beq.n	8012bea <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012be4:	7afb      	ldrb	r3, [r7, #11]
 8012be6:	2b02      	cmp	r3, #2
 8012be8:	d05b      	beq.n	8012ca2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012bea:	7afb      	ldrb	r3, [r7, #11]
 8012bec:	2b03      	cmp	r3, #3
 8012bee:	d103      	bne.n	8012bf8 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	22f5      	movs	r2, #245	@ 0xf5
 8012bf4:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012bf6:	e059      	b.n	8012cac <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012bf8:	7afb      	ldrb	r3, [r7, #11]
 8012bfa:	2b01      	cmp	r3, #1
 8012bfc:	d103      	bne.n	8012c06 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	22fb      	movs	r2, #251	@ 0xfb
 8012c02:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012c04:	e052      	b.n	8012cac <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	7a1b      	ldrb	r3, [r3, #8]
 8012c0a:	f003 0301 	and.w	r3, r3, #1
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d004      	beq.n	8012c1c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	4618      	mov	r0, r3
 8012c18:	f7ff f90a 	bl	8011e30 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	6a1b      	ldr	r3, [r3, #32]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d006      	beq.n	8012c34 <lwip_netconn_do_close+0x84>
 8012c26:	4b23      	ldr	r3, [pc, #140]	@ (8012cb4 <lwip_netconn_do_close+0x104>)
 8012c28:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 8012c2c:	4922      	ldr	r1, [pc, #136]	@ (8012cb8 <lwip_netconn_do_close+0x108>)
 8012c2e:	4823      	ldr	r0, [pc, #140]	@ (8012cbc <lwip_netconn_do_close+0x10c>)
 8012c30:	f00e f950 	bl	8020ed4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	2204      	movs	r2, #4
 8012c3a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	68fa      	ldr	r2, [r7, #12]
 8012c42:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	2100      	movs	r1, #0
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	f7ff f96e 	bl	8011f2c <lwip_netconn_do_close_internal>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d029      	beq.n	8012caa <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	785b      	ldrb	r3, [r3, #1]
 8012c5c:	2b04      	cmp	r3, #4
 8012c5e:	d006      	beq.n	8012c6e <lwip_netconn_do_close+0xbe>
 8012c60:	4b14      	ldr	r3, [pc, #80]	@ (8012cb4 <lwip_netconn_do_close+0x104>)
 8012c62:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 8012c66:	4916      	ldr	r1, [pc, #88]	@ (8012cc0 <lwip_netconn_do_close+0x110>)
 8012c68:	4814      	ldr	r0, [pc, #80]	@ (8012cbc <lwip_netconn_do_close+0x10c>)
 8012c6a:	f00e f933 	bl	8020ed4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8012c6e:	4815      	ldr	r0, [pc, #84]	@ (8012cc4 <lwip_netconn_do_close+0x114>)
 8012c70:	f00c ff6b 	bl	801fb4a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	330c      	adds	r3, #12
 8012c7a:	2100      	movs	r1, #0
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f00c fe9f 	bl	801f9c0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8012c82:	4810      	ldr	r0, [pc, #64]	@ (8012cc4 <lwip_netconn_do_close+0x114>)
 8012c84:	f00c ff52 	bl	801fb2c <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	785b      	ldrb	r3, [r3, #1]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d00b      	beq.n	8012caa <lwip_netconn_do_close+0xfa>
 8012c92:	4b08      	ldr	r3, [pc, #32]	@ (8012cb4 <lwip_netconn_do_close+0x104>)
 8012c94:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 8012c98:	4909      	ldr	r1, [pc, #36]	@ (8012cc0 <lwip_netconn_do_close+0x110>)
 8012c9a:	4808      	ldr	r0, [pc, #32]	@ (8012cbc <lwip_netconn_do_close+0x10c>)
 8012c9c:	f00e f91a 	bl	8020ed4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012ca0:	e003      	b.n	8012caa <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	22f5      	movs	r2, #245	@ 0xf5
 8012ca6:	711a      	strb	r2, [r3, #4]
 8012ca8:	e000      	b.n	8012cac <lwip_netconn_do_close+0xfc>
      return;
 8012caa:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012cac:	3710      	adds	r7, #16
 8012cae:	46bd      	mov	sp, r7
 8012cb0:	bd80      	pop	{r7, pc}
 8012cb2:	bf00      	nop
 8012cb4:	08022518 	.word	0x08022518
 8012cb8:	080228bc 	.word	0x080228bc
 8012cbc:	0802255c 	.word	0x0802255c
 8012cc0:	080228d8 	.word	0x080228d8
 8012cc4:	200270f8 	.word	0x200270f8

08012cc8 <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 8012cc8:	b480      	push	{r7}
 8012cca:	b083      	sub	sp, #12
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	4603      	mov	r3, r0
 8012cd0:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 8012cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	dc04      	bgt.n	8012ce4 <lwip_strerr+0x1c>
 8012cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cde:	f113 0f10 	cmn.w	r3, #16
 8012ce2:	da01      	bge.n	8012ce8 <lwip_strerr+0x20>
    return "Unknown error.";
 8012ce4:	4b06      	ldr	r3, [pc, #24]	@ (8012d00 <lwip_strerr+0x38>)
 8012ce6:	e005      	b.n	8012cf4 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 8012ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cec:	425b      	negs	r3, r3
 8012cee:	4a05      	ldr	r2, [pc, #20]	@ (8012d04 <lwip_strerr+0x3c>)
 8012cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	370c      	adds	r7, #12
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cfe:	4770      	bx	lr
 8012d00:	08022bac 	.word	0x08022bac
 8012d04:	20000024 	.word	0x20000024

08012d08 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012d08:	b580      	push	{r7, lr}
 8012d0a:	b082      	sub	sp, #8
 8012d0c:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012d0e:	2006      	movs	r0, #6
 8012d10:	f001 f846 	bl	8013da0 <memp_malloc>
 8012d14:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d004      	beq.n	8012d26 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012d1c:	2210      	movs	r2, #16
 8012d1e:	2100      	movs	r1, #0
 8012d20:	6878      	ldr	r0, [r7, #4]
 8012d22:	f00e fa37 	bl	8021194 <memset>
  }
  return buf;
 8012d26:	687b      	ldr	r3, [r7, #4]
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3708      	adds	r7, #8
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b082      	sub	sp, #8
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d013      	beq.n	8012d66 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d00b      	beq.n	8012d5e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f002 f88a 	bl	8014e64 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2200      	movs	r2, #0
 8012d54:	605a      	str	r2, [r3, #4]
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	685a      	ldr	r2, [r3, #4]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012d5e:	6879      	ldr	r1, [r7, #4]
 8012d60:	2006      	movs	r0, #6
 8012d62:	f001 f899 	bl	8013e98 <memp_free>
  }
}
 8012d66:	bf00      	nop
 8012d68:	3708      	adds	r7, #8
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
	...

08012d70 <netbuf_alloc>:
 * @return pointer to the allocated memory
 *         NULL if no memory could be allocated
 */
void *
netbuf_alloc(struct netbuf *buf, u16_t size)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	460b      	mov	r3, r1
 8012d7a:	807b      	strh	r3, [r7, #2]
  LWIP_ERROR("netbuf_alloc: invalid buf", (buf != NULL), return NULL;);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d107      	bne.n	8012d92 <netbuf_alloc+0x22>
 8012d82:	4b1c      	ldr	r3, [pc, #112]	@ (8012df4 <netbuf_alloc+0x84>)
 8012d84:	2268      	movs	r2, #104	@ 0x68
 8012d86:	491c      	ldr	r1, [pc, #112]	@ (8012df8 <netbuf_alloc+0x88>)
 8012d88:	481c      	ldr	r0, [pc, #112]	@ (8012dfc <netbuf_alloc+0x8c>)
 8012d8a:	f00e f8a3 	bl	8020ed4 <iprintf>
 8012d8e:	2300      	movs	r3, #0
 8012d90:	e02b      	b.n	8012dea <netbuf_alloc+0x7a>

  /* Deallocate any previously allocated memory. */
  if (buf->p != NULL) {
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d004      	beq.n	8012da4 <netbuf_alloc+0x34>
    pbuf_free(buf->p);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	4618      	mov	r0, r3
 8012da0:	f002 f860 	bl	8014e64 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, size, PBUF_RAM);
 8012da4:	887b      	ldrh	r3, [r7, #2]
 8012da6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012daa:	4619      	mov	r1, r3
 8012dac:	2036      	movs	r0, #54	@ 0x36
 8012dae:	f001 fd2d 	bl	801480c <pbuf_alloc>
 8012db2:	4602      	mov	r2, r0
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d101      	bne.n	8012dc4 <netbuf_alloc+0x54>
    return NULL;
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	e012      	b.n	8012dea <netbuf_alloc+0x7a>
  }
  LWIP_ASSERT("check that first pbuf can hold size",
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	895b      	ldrh	r3, [r3, #10]
 8012dca:	887a      	ldrh	r2, [r7, #2]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d905      	bls.n	8012ddc <netbuf_alloc+0x6c>
 8012dd0:	4b08      	ldr	r3, [pc, #32]	@ (8012df4 <netbuf_alloc+0x84>)
 8012dd2:	2272      	movs	r2, #114	@ 0x72
 8012dd4:	490a      	ldr	r1, [pc, #40]	@ (8012e00 <netbuf_alloc+0x90>)
 8012dd6:	4809      	ldr	r0, [pc, #36]	@ (8012dfc <netbuf_alloc+0x8c>)
 8012dd8:	f00e f87c 	bl	8020ed4 <iprintf>
              (buf->p->len >= size));
  buf->ptr = buf->p;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	681a      	ldr	r2, [r3, #0]
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	605a      	str	r2, [r3, #4]
  return buf->p->payload;
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	685b      	ldr	r3, [r3, #4]
}
 8012dea:	4618      	mov	r0, r3
 8012dec:	3708      	adds	r7, #8
 8012dee:	46bd      	mov	sp, r7
 8012df0:	bd80      	pop	{r7, pc}
 8012df2:	bf00      	nop
 8012df4:	08022bbc 	.word	0x08022bbc
 8012df8:	08022bf0 	.word	0x08022bf0
 8012dfc:	08022c0c 	.word	0x08022c0c
 8012e00:	08022c34 	.word	0x08022c34

08012e04 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d108      	bne.n	8012e28 <netbuf_data+0x24>
 8012e16:	4b1b      	ldr	r3, [pc, #108]	@ (8012e84 <netbuf_data+0x80>)
 8012e18:	22c6      	movs	r2, #198	@ 0xc6
 8012e1a:	491b      	ldr	r1, [pc, #108]	@ (8012e88 <netbuf_data+0x84>)
 8012e1c:	481b      	ldr	r0, [pc, #108]	@ (8012e8c <netbuf_data+0x88>)
 8012e1e:	f00e f859 	bl	8020ed4 <iprintf>
 8012e22:	f06f 030f 	mvn.w	r3, #15
 8012e26:	e029      	b.n	8012e7c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012e28:	68bb      	ldr	r3, [r7, #8]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d108      	bne.n	8012e40 <netbuf_data+0x3c>
 8012e2e:	4b15      	ldr	r3, [pc, #84]	@ (8012e84 <netbuf_data+0x80>)
 8012e30:	22c7      	movs	r2, #199	@ 0xc7
 8012e32:	4917      	ldr	r1, [pc, #92]	@ (8012e90 <netbuf_data+0x8c>)
 8012e34:	4815      	ldr	r0, [pc, #84]	@ (8012e8c <netbuf_data+0x88>)
 8012e36:	f00e f84d 	bl	8020ed4 <iprintf>
 8012e3a:	f06f 030f 	mvn.w	r3, #15
 8012e3e:	e01d      	b.n	8012e7c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d108      	bne.n	8012e58 <netbuf_data+0x54>
 8012e46:	4b0f      	ldr	r3, [pc, #60]	@ (8012e84 <netbuf_data+0x80>)
 8012e48:	22c8      	movs	r2, #200	@ 0xc8
 8012e4a:	4912      	ldr	r1, [pc, #72]	@ (8012e94 <netbuf_data+0x90>)
 8012e4c:	480f      	ldr	r0, [pc, #60]	@ (8012e8c <netbuf_data+0x88>)
 8012e4e:	f00e f841 	bl	8020ed4 <iprintf>
 8012e52:	f06f 030f 	mvn.w	r3, #15
 8012e56:	e011      	b.n	8012e7c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d102      	bne.n	8012e66 <netbuf_data+0x62>
    return ERR_BUF;
 8012e60:	f06f 0301 	mvn.w	r3, #1
 8012e64:	e00a      	b.n	8012e7c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	685b      	ldr	r3, [r3, #4]
 8012e6a:	685a      	ldr	r2, [r3, #4]
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	895a      	ldrh	r2, [r3, #10]
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8012e7a:	2300      	movs	r3, #0
}
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	3710      	adds	r7, #16
 8012e80:	46bd      	mov	sp, r7
 8012e82:	bd80      	pop	{r7, pc}
 8012e84:	08022bbc 	.word	0x08022bbc
 8012e88:	08022cc4 	.word	0x08022cc4
 8012e8c:	08022c0c 	.word	0x08022c0c
 8012e90:	08022ce0 	.word	0x08022ce0
 8012e94:	08022d00 	.word	0x08022d00

08012e98 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b084      	sub	sp, #16
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012ea2:	f008 ff97 	bl	801bdd4 <sys_timeouts_sleeptime>
 8012ea6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012eae:	d10b      	bne.n	8012ec8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012eb0:	4813      	ldr	r0, [pc, #76]	@ (8012f00 <tcpip_timeouts_mbox_fetch+0x68>)
 8012eb2:	f00c fe4a 	bl	801fb4a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012eb6:	2200      	movs	r2, #0
 8012eb8:	6839      	ldr	r1, [r7, #0]
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f00c fcd4 	bl	801f868 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012ec0:	480f      	ldr	r0, [pc, #60]	@ (8012f00 <tcpip_timeouts_mbox_fetch+0x68>)
 8012ec2:	f00c fe33 	bl	801fb2c <sys_mutex_lock>
    return;
 8012ec6:	e018      	b.n	8012efa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d102      	bne.n	8012ed4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012ece:	f008 ff47 	bl	801bd60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012ed2:	e7e6      	b.n	8012ea2 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012ed4:	480a      	ldr	r0, [pc, #40]	@ (8012f00 <tcpip_timeouts_mbox_fetch+0x68>)
 8012ed6:	f00c fe38 	bl	801fb4a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012eda:	68fa      	ldr	r2, [r7, #12]
 8012edc:	6839      	ldr	r1, [r7, #0]
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f00c fcc2 	bl	801f868 <sys_arch_mbox_fetch>
 8012ee4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012ee6:	4806      	ldr	r0, [pc, #24]	@ (8012f00 <tcpip_timeouts_mbox_fetch+0x68>)
 8012ee8:	f00c fe20 	bl	801fb2c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012eec:	68bb      	ldr	r3, [r7, #8]
 8012eee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ef2:	d102      	bne.n	8012efa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012ef4:	f008 ff34 	bl	801bd60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012ef8:	e7d3      	b.n	8012ea2 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012efa:	3710      	adds	r7, #16
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	200270f8 	.word	0x200270f8

08012f04 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b084      	sub	sp, #16
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012f0c:	4810      	ldr	r0, [pc, #64]	@ (8012f50 <tcpip_thread+0x4c>)
 8012f0e:	f00c fe0d 	bl	801fb2c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012f12:	4b10      	ldr	r3, [pc, #64]	@ (8012f54 <tcpip_thread+0x50>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d005      	beq.n	8012f26 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8012f54 <tcpip_thread+0x50>)
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8012f58 <tcpip_thread+0x54>)
 8012f20:	6812      	ldr	r2, [r2, #0]
 8012f22:	4610      	mov	r0, r2
 8012f24:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012f26:	f107 030c 	add.w	r3, r7, #12
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	480b      	ldr	r0, [pc, #44]	@ (8012f5c <tcpip_thread+0x58>)
 8012f2e:	f7ff ffb3 	bl	8012e98 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012f32:	68fb      	ldr	r3, [r7, #12]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d106      	bne.n	8012f46 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012f38:	4b09      	ldr	r3, [pc, #36]	@ (8012f60 <tcpip_thread+0x5c>)
 8012f3a:	2291      	movs	r2, #145	@ 0x91
 8012f3c:	4909      	ldr	r1, [pc, #36]	@ (8012f64 <tcpip_thread+0x60>)
 8012f3e:	480a      	ldr	r0, [pc, #40]	@ (8012f68 <tcpip_thread+0x64>)
 8012f40:	f00d ffc8 	bl	8020ed4 <iprintf>
      continue;
 8012f44:	e003      	b.n	8012f4e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f000 f80f 	bl	8012f6c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012f4e:	e7ea      	b.n	8012f26 <tcpip_thread+0x22>
 8012f50:	200270f8 	.word	0x200270f8
 8012f54:	200270ec 	.word	0x200270ec
 8012f58:	200270f0 	.word	0x200270f0
 8012f5c:	200270f4 	.word	0x200270f4
 8012f60:	08022d54 	.word	0x08022d54
 8012f64:	08022d84 	.word	0x08022d84
 8012f68:	08022da4 	.word	0x08022da4

08012f6c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b082      	sub	sp, #8
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	2b02      	cmp	r3, #2
 8012f7a:	d026      	beq.n	8012fca <tcpip_thread_handle_msg+0x5e>
 8012f7c:	2b02      	cmp	r3, #2
 8012f7e:	dc2b      	bgt.n	8012fd8 <tcpip_thread_handle_msg+0x6c>
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d002      	beq.n	8012f8a <tcpip_thread_handle_msg+0x1e>
 8012f84:	2b01      	cmp	r3, #1
 8012f86:	d015      	beq.n	8012fb4 <tcpip_thread_handle_msg+0x48>
 8012f88:	e026      	b.n	8012fd8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	68db      	ldr	r3, [r3, #12]
 8012f8e:	687a      	ldr	r2, [r7, #4]
 8012f90:	6850      	ldr	r0, [r2, #4]
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	6892      	ldr	r2, [r2, #8]
 8012f96:	4611      	mov	r1, r2
 8012f98:	4798      	blx	r3
 8012f9a:	4603      	mov	r3, r0
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d004      	beq.n	8012faa <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	f001 ff5d 	bl	8014e64 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012faa:	6879      	ldr	r1, [r7, #4]
 8012fac:	2009      	movs	r0, #9
 8012fae:	f000 ff73 	bl	8013e98 <memp_free>
      break;
 8012fb2:	e018      	b.n	8012fe6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	687a      	ldr	r2, [r7, #4]
 8012fba:	6892      	ldr	r2, [r2, #8]
 8012fbc:	4610      	mov	r0, r2
 8012fbe:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012fc0:	6879      	ldr	r1, [r7, #4]
 8012fc2:	2008      	movs	r0, #8
 8012fc4:	f000 ff68 	bl	8013e98 <memp_free>
      break;
 8012fc8:	e00d      	b.n	8012fe6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	685b      	ldr	r3, [r3, #4]
 8012fce:	687a      	ldr	r2, [r7, #4]
 8012fd0:	6892      	ldr	r2, [r2, #8]
 8012fd2:	4610      	mov	r0, r2
 8012fd4:	4798      	blx	r3
      break;
 8012fd6:	e006      	b.n	8012fe6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012fd8:	4b05      	ldr	r3, [pc, #20]	@ (8012ff0 <tcpip_thread_handle_msg+0x84>)
 8012fda:	22cf      	movs	r2, #207	@ 0xcf
 8012fdc:	4905      	ldr	r1, [pc, #20]	@ (8012ff4 <tcpip_thread_handle_msg+0x88>)
 8012fde:	4806      	ldr	r0, [pc, #24]	@ (8012ff8 <tcpip_thread_handle_msg+0x8c>)
 8012fe0:	f00d ff78 	bl	8020ed4 <iprintf>
      break;
 8012fe4:	bf00      	nop
  }
}
 8012fe6:	bf00      	nop
 8012fe8:	3708      	adds	r7, #8
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop
 8012ff0:	08022d54 	.word	0x08022d54
 8012ff4:	08022d84 	.word	0x08022d84
 8012ff8:	08022da4 	.word	0x08022da4

08012ffc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b086      	sub	sp, #24
 8013000:	af00      	add	r7, sp, #0
 8013002:	60f8      	str	r0, [r7, #12]
 8013004:	60b9      	str	r1, [r7, #8]
 8013006:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8013008:	481a      	ldr	r0, [pc, #104]	@ (8013074 <tcpip_inpkt+0x78>)
 801300a:	f00c fc75 	bl	801f8f8 <sys_mbox_valid>
 801300e:	4603      	mov	r3, r0
 8013010:	2b00      	cmp	r3, #0
 8013012:	d105      	bne.n	8013020 <tcpip_inpkt+0x24>
 8013014:	4b18      	ldr	r3, [pc, #96]	@ (8013078 <tcpip_inpkt+0x7c>)
 8013016:	22fc      	movs	r2, #252	@ 0xfc
 8013018:	4918      	ldr	r1, [pc, #96]	@ (801307c <tcpip_inpkt+0x80>)
 801301a:	4819      	ldr	r0, [pc, #100]	@ (8013080 <tcpip_inpkt+0x84>)
 801301c:	f00d ff5a 	bl	8020ed4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8013020:	2009      	movs	r0, #9
 8013022:	f000 febd 	bl	8013da0 <memp_malloc>
 8013026:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d102      	bne.n	8013034 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801302e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013032:	e01a      	b.n	801306a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	2200      	movs	r2, #0
 8013038:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	68fa      	ldr	r2, [r7, #12]
 801303e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	68ba      	ldr	r2, [r7, #8]
 8013044:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8013046:	697b      	ldr	r3, [r7, #20]
 8013048:	687a      	ldr	r2, [r7, #4]
 801304a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801304c:	6979      	ldr	r1, [r7, #20]
 801304e:	4809      	ldr	r0, [pc, #36]	@ (8013074 <tcpip_inpkt+0x78>)
 8013050:	f00c fbe6 	bl	801f820 <sys_mbox_trypost>
 8013054:	4603      	mov	r3, r0
 8013056:	2b00      	cmp	r3, #0
 8013058:	d006      	beq.n	8013068 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801305a:	6979      	ldr	r1, [r7, #20]
 801305c:	2009      	movs	r0, #9
 801305e:	f000 ff1b 	bl	8013e98 <memp_free>
    return ERR_MEM;
 8013062:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8013066:	e000      	b.n	801306a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8013068:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801306a:	4618      	mov	r0, r3
 801306c:	3718      	adds	r7, #24
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	200270f4 	.word	0x200270f4
 8013078:	08022d54 	.word	0x08022d54
 801307c:	08022dcc 	.word	0x08022dcc
 8013080:	08022da4 	.word	0x08022da4

08013084 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
 801308c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801308e:	683b      	ldr	r3, [r7, #0]
 8013090:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013094:	f003 0318 	and.w	r3, r3, #24
 8013098:	2b00      	cmp	r3, #0
 801309a:	d006      	beq.n	80130aa <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801309c:	4a08      	ldr	r2, [pc, #32]	@ (80130c0 <tcpip_input+0x3c>)
 801309e:	6839      	ldr	r1, [r7, #0]
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f7ff ffab 	bl	8012ffc <tcpip_inpkt>
 80130a6:	4603      	mov	r3, r0
 80130a8:	e005      	b.n	80130b6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80130aa:	4a06      	ldr	r2, [pc, #24]	@ (80130c4 <tcpip_input+0x40>)
 80130ac:	6839      	ldr	r1, [r7, #0]
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f7ff ffa4 	bl	8012ffc <tcpip_inpkt>
 80130b4:	4603      	mov	r3, r0
}
 80130b6:	4618      	mov	r0, r3
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	0801f569 	.word	0x0801f569
 80130c4:	0801e345 	.word	0x0801e345

080130c8 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80130d2:	4819      	ldr	r0, [pc, #100]	@ (8013138 <tcpip_try_callback+0x70>)
 80130d4:	f00c fc10 	bl	801f8f8 <sys_mbox_valid>
 80130d8:	4603      	mov	r3, r0
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d106      	bne.n	80130ec <tcpip_try_callback+0x24>
 80130de:	4b17      	ldr	r3, [pc, #92]	@ (801313c <tcpip_try_callback+0x74>)
 80130e0:	f240 125d 	movw	r2, #349	@ 0x15d
 80130e4:	4916      	ldr	r1, [pc, #88]	@ (8013140 <tcpip_try_callback+0x78>)
 80130e6:	4817      	ldr	r0, [pc, #92]	@ (8013144 <tcpip_try_callback+0x7c>)
 80130e8:	f00d fef4 	bl	8020ed4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80130ec:	2008      	movs	r0, #8
 80130ee:	f000 fe57 	bl	8013da0 <memp_malloc>
 80130f2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d102      	bne.n	8013100 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80130fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80130fe:	e017      	b.n	8013130 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	2201      	movs	r2, #1
 8013104:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	683a      	ldr	r2, [r7, #0]
 8013110:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8013112:	68f9      	ldr	r1, [r7, #12]
 8013114:	4808      	ldr	r0, [pc, #32]	@ (8013138 <tcpip_try_callback+0x70>)
 8013116:	f00c fb83 	bl	801f820 <sys_mbox_trypost>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d006      	beq.n	801312e <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8013120:	68f9      	ldr	r1, [r7, #12]
 8013122:	2008      	movs	r0, #8
 8013124:	f000 feb8 	bl	8013e98 <memp_free>
    return ERR_MEM;
 8013128:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801312c:	e000      	b.n	8013130 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801312e:	2300      	movs	r3, #0
}
 8013130:	4618      	mov	r0, r3
 8013132:	3710      	adds	r7, #16
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}
 8013138:	200270f4 	.word	0x200270f4
 801313c:	08022d54 	.word	0x08022d54
 8013140:	08022dcc 	.word	0x08022dcc
 8013144:	08022da4 	.word	0x08022da4

08013148 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b084      	sub	sp, #16
 801314c:	af00      	add	r7, sp, #0
 801314e:	60f8      	str	r0, [r7, #12]
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8013154:	4806      	ldr	r0, [pc, #24]	@ (8013170 <tcpip_send_msg_wait_sem+0x28>)
 8013156:	f00c fce9 	bl	801fb2c <sys_mutex_lock>
  fn(apimsg);
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	68b8      	ldr	r0, [r7, #8]
 801315e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8013160:	4803      	ldr	r0, [pc, #12]	@ (8013170 <tcpip_send_msg_wait_sem+0x28>)
 8013162:	f00c fcf2 	bl	801fb4a <sys_mutex_unlock>
  return ERR_OK;
 8013166:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8013168:	4618      	mov	r0, r3
 801316a:	3710      	adds	r7, #16
 801316c:	46bd      	mov	sp, r7
 801316e:	bd80      	pop	{r7, pc}
 8013170:	200270f8 	.word	0x200270f8

08013174 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8013174:	b580      	push	{r7, lr}
 8013176:	b084      	sub	sp, #16
 8013178:	af02      	add	r7, sp, #8
 801317a:	6078      	str	r0, [r7, #4]
 801317c:	6039      	str	r1, [r7, #0]
  lwip_init();
 801317e:	f000 f872 	bl	8013266 <lwip_init>

  tcpip_init_done = initfunc;
 8013182:	4a17      	ldr	r2, [pc, #92]	@ (80131e0 <tcpip_init+0x6c>)
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8013188:	4a16      	ldr	r2, [pc, #88]	@ (80131e4 <tcpip_init+0x70>)
 801318a:	683b      	ldr	r3, [r7, #0]
 801318c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801318e:	2106      	movs	r1, #6
 8013190:	4815      	ldr	r0, [pc, #84]	@ (80131e8 <tcpip_init+0x74>)
 8013192:	f00c faeb 	bl	801f76c <sys_mbox_new>
 8013196:	4603      	mov	r3, r0
 8013198:	2b00      	cmp	r3, #0
 801319a:	d006      	beq.n	80131aa <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 801319c:	4b13      	ldr	r3, [pc, #76]	@ (80131ec <tcpip_init+0x78>)
 801319e:	f240 2261 	movw	r2, #609	@ 0x261
 80131a2:	4913      	ldr	r1, [pc, #76]	@ (80131f0 <tcpip_init+0x7c>)
 80131a4:	4813      	ldr	r0, [pc, #76]	@ (80131f4 <tcpip_init+0x80>)
 80131a6:	f00d fe95 	bl	8020ed4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80131aa:	4813      	ldr	r0, [pc, #76]	@ (80131f8 <tcpip_init+0x84>)
 80131ac:	f00c fc88 	bl	801fac0 <sys_mutex_new>
 80131b0:	4603      	mov	r3, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d006      	beq.n	80131c4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80131b6:	4b0d      	ldr	r3, [pc, #52]	@ (80131ec <tcpip_init+0x78>)
 80131b8:	f240 2265 	movw	r2, #613	@ 0x265
 80131bc:	490f      	ldr	r1, [pc, #60]	@ (80131fc <tcpip_init+0x88>)
 80131be:	480d      	ldr	r0, [pc, #52]	@ (80131f4 <tcpip_init+0x80>)
 80131c0:	f00d fe88 	bl	8020ed4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80131c4:	2318      	movs	r3, #24
 80131c6:	9300      	str	r3, [sp, #0]
 80131c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80131cc:	2200      	movs	r2, #0
 80131ce:	490c      	ldr	r1, [pc, #48]	@ (8013200 <tcpip_init+0x8c>)
 80131d0:	480c      	ldr	r0, [pc, #48]	@ (8013204 <tcpip_init+0x90>)
 80131d2:	f00c fcc7 	bl	801fb64 <sys_thread_new>
}
 80131d6:	bf00      	nop
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	200270ec 	.word	0x200270ec
 80131e4:	200270f0 	.word	0x200270f0
 80131e8:	200270f4 	.word	0x200270f4
 80131ec:	08022d54 	.word	0x08022d54
 80131f0:	08022ddc 	.word	0x08022ddc
 80131f4:	08022da4 	.word	0x08022da4
 80131f8:	200270f8 	.word	0x200270f8
 80131fc:	08022e00 	.word	0x08022e00
 8013200:	08012f05 	.word	0x08012f05
 8013204:	08022e24 	.word	0x08022e24

08013208 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8013208:	b480      	push	{r7}
 801320a:	b083      	sub	sp, #12
 801320c:	af00      	add	r7, sp, #0
 801320e:	4603      	mov	r3, r0
 8013210:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8013212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013216:	021b      	lsls	r3, r3, #8
 8013218:	b21a      	sxth	r2, r3
 801321a:	88fb      	ldrh	r3, [r7, #6]
 801321c:	0a1b      	lsrs	r3, r3, #8
 801321e:	b29b      	uxth	r3, r3
 8013220:	b21b      	sxth	r3, r3
 8013222:	4313      	orrs	r3, r2
 8013224:	b21b      	sxth	r3, r3
 8013226:	b29b      	uxth	r3, r3
}
 8013228:	4618      	mov	r0, r3
 801322a:	370c      	adds	r7, #12
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr

08013234 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	061a      	lsls	r2, r3, #24
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	021b      	lsls	r3, r3, #8
 8013244:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013248:	431a      	orrs	r2, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	0a1b      	lsrs	r3, r3, #8
 801324e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013252:	431a      	orrs	r2, r3
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	0e1b      	lsrs	r3, r3, #24
 8013258:	4313      	orrs	r3, r2
}
 801325a:	4618      	mov	r0, r3
 801325c:	370c      	adds	r7, #12
 801325e:	46bd      	mov	sp, r7
 8013260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013264:	4770      	bx	lr

08013266 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8013266:	b580      	push	{r7, lr}
 8013268:	b082      	sub	sp, #8
 801326a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801326c:	2300      	movs	r3, #0
 801326e:	607b      	str	r3, [r7, #4]
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8013270:	f002 f8ce 	bl	8015410 <stats_init>
#if !NO_SYS
  sys_init();
 8013274:	f00c fc18 	bl	801faa8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8013278:	f000 f8d4 	bl	8013424 <mem_init>
  memp_init();
 801327c:	f000 fcf4 	bl	8013c68 <memp_init>
  pbuf_init();
  netif_init();
 8013280:	f000 fe34 	bl	8013eec <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8013284:	f008 fdde 	bl	801be44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8013288:	f002 fa40 	bl	801570c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801328c:	f008 fd20 	bl	801bcd0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8013290:	bf00      	nop
 8013292:	3708      	adds	r7, #8
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}

08013298 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8013298:	b480      	push	{r7}
 801329a:	b083      	sub	sp, #12
 801329c:	af00      	add	r7, sp, #0
 801329e:	4603      	mov	r3, r0
 80132a0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80132a2:	4b05      	ldr	r3, [pc, #20]	@ (80132b8 <ptr_to_mem+0x20>)
 80132a4:	681a      	ldr	r2, [r3, #0]
 80132a6:	88fb      	ldrh	r3, [r7, #6]
 80132a8:	4413      	add	r3, r2
}
 80132aa:	4618      	mov	r0, r3
 80132ac:	370c      	adds	r7, #12
 80132ae:	46bd      	mov	sp, r7
 80132b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b4:	4770      	bx	lr
 80132b6:	bf00      	nop
 80132b8:	20027114 	.word	0x20027114

080132bc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80132bc:	b480      	push	{r7}
 80132be:	b083      	sub	sp, #12
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80132c4:	4b05      	ldr	r3, [pc, #20]	@ (80132dc <mem_to_ptr+0x20>)
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	1ad3      	subs	r3, r2, r3
 80132cc:	b29b      	uxth	r3, r3
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	370c      	adds	r7, #12
 80132d2:	46bd      	mov	sp, r7
 80132d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop
 80132dc:	20027114 	.word	0x20027114

080132e0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80132e0:	b590      	push	{r4, r7, lr}
 80132e2:	b085      	sub	sp, #20
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80132e8:	4b45      	ldr	r3, [pc, #276]	@ (8013400 <plug_holes+0x120>)
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	687a      	ldr	r2, [r7, #4]
 80132ee:	429a      	cmp	r2, r3
 80132f0:	d206      	bcs.n	8013300 <plug_holes+0x20>
 80132f2:	4b44      	ldr	r3, [pc, #272]	@ (8013404 <plug_holes+0x124>)
 80132f4:	f240 12df 	movw	r2, #479	@ 0x1df
 80132f8:	4943      	ldr	r1, [pc, #268]	@ (8013408 <plug_holes+0x128>)
 80132fa:	4844      	ldr	r0, [pc, #272]	@ (801340c <plug_holes+0x12c>)
 80132fc:	f00d fdea 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013300:	4b43      	ldr	r3, [pc, #268]	@ (8013410 <plug_holes+0x130>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	687a      	ldr	r2, [r7, #4]
 8013306:	429a      	cmp	r2, r3
 8013308:	d306      	bcc.n	8013318 <plug_holes+0x38>
 801330a:	4b3e      	ldr	r3, [pc, #248]	@ (8013404 <plug_holes+0x124>)
 801330c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8013310:	4940      	ldr	r1, [pc, #256]	@ (8013414 <plug_holes+0x134>)
 8013312:	483e      	ldr	r0, [pc, #248]	@ (801340c <plug_holes+0x12c>)
 8013314:	f00d fdde 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	791b      	ldrb	r3, [r3, #4]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d006      	beq.n	801332e <plug_holes+0x4e>
 8013320:	4b38      	ldr	r3, [pc, #224]	@ (8013404 <plug_holes+0x124>)
 8013322:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8013326:	493c      	ldr	r1, [pc, #240]	@ (8013418 <plug_holes+0x138>)
 8013328:	4838      	ldr	r0, [pc, #224]	@ (801340c <plug_holes+0x12c>)
 801332a:	f00d fdd3 	bl	8020ed4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	881b      	ldrh	r3, [r3, #0]
 8013332:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013336:	d906      	bls.n	8013346 <plug_holes+0x66>
 8013338:	4b32      	ldr	r3, [pc, #200]	@ (8013404 <plug_holes+0x124>)
 801333a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 801333e:	4937      	ldr	r1, [pc, #220]	@ (801341c <plug_holes+0x13c>)
 8013340:	4832      	ldr	r0, [pc, #200]	@ (801340c <plug_holes+0x12c>)
 8013342:	f00d fdc7 	bl	8020ed4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	881b      	ldrh	r3, [r3, #0]
 801334a:	4618      	mov	r0, r3
 801334c:	f7ff ffa4 	bl	8013298 <ptr_to_mem>
 8013350:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	429a      	cmp	r2, r3
 8013358:	d024      	beq.n	80133a4 <plug_holes+0xc4>
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	791b      	ldrb	r3, [r3, #4]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d120      	bne.n	80133a4 <plug_holes+0xc4>
 8013362:	4b2b      	ldr	r3, [pc, #172]	@ (8013410 <plug_holes+0x130>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	68fa      	ldr	r2, [r7, #12]
 8013368:	429a      	cmp	r2, r3
 801336a:	d01b      	beq.n	80133a4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801336c:	4b2c      	ldr	r3, [pc, #176]	@ (8013420 <plug_holes+0x140>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	68fa      	ldr	r2, [r7, #12]
 8013372:	429a      	cmp	r2, r3
 8013374:	d102      	bne.n	801337c <plug_holes+0x9c>
      lfree = mem;
 8013376:	4a2a      	ldr	r2, [pc, #168]	@ (8013420 <plug_holes+0x140>)
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	881a      	ldrh	r2, [r3, #0]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	881b      	ldrh	r3, [r3, #0]
 8013388:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801338c:	d00a      	beq.n	80133a4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	881b      	ldrh	r3, [r3, #0]
 8013392:	4618      	mov	r0, r3
 8013394:	f7ff ff80 	bl	8013298 <ptr_to_mem>
 8013398:	4604      	mov	r4, r0
 801339a:	6878      	ldr	r0, [r7, #4]
 801339c:	f7ff ff8e 	bl	80132bc <mem_to_ptr>
 80133a0:	4603      	mov	r3, r0
 80133a2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	885b      	ldrh	r3, [r3, #2]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff ff75 	bl	8013298 <ptr_to_mem>
 80133ae:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80133b0:	68ba      	ldr	r2, [r7, #8]
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d01f      	beq.n	80133f8 <plug_holes+0x118>
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	791b      	ldrb	r3, [r3, #4]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d11b      	bne.n	80133f8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80133c0:	4b17      	ldr	r3, [pc, #92]	@ (8013420 <plug_holes+0x140>)
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	687a      	ldr	r2, [r7, #4]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d102      	bne.n	80133d0 <plug_holes+0xf0>
      lfree = pmem;
 80133ca:	4a15      	ldr	r2, [pc, #84]	@ (8013420 <plug_holes+0x140>)
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	881a      	ldrh	r2, [r3, #0]
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	881b      	ldrh	r3, [r3, #0]
 80133dc:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80133e0:	d00a      	beq.n	80133f8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	4618      	mov	r0, r3
 80133e8:	f7ff ff56 	bl	8013298 <ptr_to_mem>
 80133ec:	4604      	mov	r4, r0
 80133ee:	68b8      	ldr	r0, [r7, #8]
 80133f0:	f7ff ff64 	bl	80132bc <mem_to_ptr>
 80133f4:	4603      	mov	r3, r0
 80133f6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80133f8:	bf00      	nop
 80133fa:	3714      	adds	r7, #20
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd90      	pop	{r4, r7, pc}
 8013400:	20027114 	.word	0x20027114
 8013404:	08022e34 	.word	0x08022e34
 8013408:	08022e64 	.word	0x08022e64
 801340c:	08022e7c 	.word	0x08022e7c
 8013410:	20027118 	.word	0x20027118
 8013414:	08022ea4 	.word	0x08022ea4
 8013418:	08022ec0 	.word	0x08022ec0
 801341c:	08022edc 	.word	0x08022edc
 8013420:	20027120 	.word	0x20027120

08013424 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b082      	sub	sp, #8
 8013428:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801342a:	4b1f      	ldr	r3, [pc, #124]	@ (80134a8 <mem_init+0x84>)
 801342c:	4a1f      	ldr	r2, [pc, #124]	@ (80134ac <mem_init+0x88>)
 801342e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013430:	4b1d      	ldr	r3, [pc, #116]	@ (80134a8 <mem_init+0x84>)
 8013432:	681b      	ldr	r3, [r3, #0]
 8013434:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 801343c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	2200      	movs	r2, #0
 8013442:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	2200      	movs	r2, #0
 8013448:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801344a:	f44f 40c8 	mov.w	r0, #25600	@ 0x6400
 801344e:	f7ff ff23 	bl	8013298 <ptr_to_mem>
 8013452:	4603      	mov	r3, r0
 8013454:	4a16      	ldr	r2, [pc, #88]	@ (80134b0 <mem_init+0x8c>)
 8013456:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013458:	4b15      	ldr	r3, [pc, #84]	@ (80134b0 <mem_init+0x8c>)
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	2201      	movs	r2, #1
 801345e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8013460:	4b13      	ldr	r3, [pc, #76]	@ (80134b0 <mem_init+0x8c>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013468:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801346a:	4b11      	ldr	r3, [pc, #68]	@ (80134b0 <mem_init+0x8c>)
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013472:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8013474:	4b0c      	ldr	r3, [pc, #48]	@ (80134a8 <mem_init+0x84>)
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4a0e      	ldr	r2, [pc, #56]	@ (80134b4 <mem_init+0x90>)
 801347a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 801347c:	4b0e      	ldr	r3, [pc, #56]	@ (80134b8 <mem_init+0x94>)
 801347e:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8013482:	f8a3 20ae 	strh.w	r2, [r3, #174]	@ 0xae

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8013486:	480d      	ldr	r0, [pc, #52]	@ (80134bc <mem_init+0x98>)
 8013488:	f00c fb1a 	bl	801fac0 <sys_mutex_new>
 801348c:	4603      	mov	r3, r0
 801348e:	2b00      	cmp	r3, #0
 8013490:	d006      	beq.n	80134a0 <mem_init+0x7c>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8013492:	4b0b      	ldr	r3, [pc, #44]	@ (80134c0 <mem_init+0x9c>)
 8013494:	f240 221f 	movw	r2, #543	@ 0x21f
 8013498:	490a      	ldr	r1, [pc, #40]	@ (80134c4 <mem_init+0xa0>)
 801349a:	480b      	ldr	r0, [pc, #44]	@ (80134c8 <mem_init+0xa4>)
 801349c:	f00d fd1a 	bl	8020ed4 <iprintf>
  }
}
 80134a0:	bf00      	nop
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	20027114 	.word	0x20027114
 80134ac:	20048000 	.word	0x20048000
 80134b0:	20027118 	.word	0x20027118
 80134b4:	20027120 	.word	0x20027120
 80134b8:	2002d36c 	.word	0x2002d36c
 80134bc:	2002711c 	.word	0x2002711c
 80134c0:	08022e34 	.word	0x08022e34
 80134c4:	08022f08 	.word	0x08022f08
 80134c8:	08022e7c 	.word	0x08022e7c

080134cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b086      	sub	sp, #24
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80134d4:	6878      	ldr	r0, [r7, #4]
 80134d6:	f7ff fef1 	bl	80132bc <mem_to_ptr>
 80134da:	4603      	mov	r3, r0
 80134dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7ff fed8 	bl	8013298 <ptr_to_mem>
 80134e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	885b      	ldrh	r3, [r3, #2]
 80134ee:	4618      	mov	r0, r3
 80134f0:	f7ff fed2 	bl	8013298 <ptr_to_mem>
 80134f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	881b      	ldrh	r3, [r3, #0]
 80134fa:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80134fe:	d818      	bhi.n	8013532 <mem_link_valid+0x66>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	885b      	ldrh	r3, [r3, #2]
 8013504:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013508:	d813      	bhi.n	8013532 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801350e:	8afa      	ldrh	r2, [r7, #22]
 8013510:	429a      	cmp	r2, r3
 8013512:	d004      	beq.n	801351e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	881b      	ldrh	r3, [r3, #0]
 8013518:	8afa      	ldrh	r2, [r7, #22]
 801351a:	429a      	cmp	r2, r3
 801351c:	d109      	bne.n	8013532 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801351e:	4b08      	ldr	r3, [pc, #32]	@ (8013540 <mem_link_valid+0x74>)
 8013520:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013522:	693a      	ldr	r2, [r7, #16]
 8013524:	429a      	cmp	r2, r3
 8013526:	d006      	beq.n	8013536 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	885b      	ldrh	r3, [r3, #2]
 801352c:	8afa      	ldrh	r2, [r7, #22]
 801352e:	429a      	cmp	r2, r3
 8013530:	d001      	beq.n	8013536 <mem_link_valid+0x6a>
    return 0;
 8013532:	2300      	movs	r3, #0
 8013534:	e000      	b.n	8013538 <mem_link_valid+0x6c>
  }
  return 1;
 8013536:	2301      	movs	r3, #1
}
 8013538:	4618      	mov	r0, r3
 801353a:	3718      	adds	r7, #24
 801353c:	46bd      	mov	sp, r7
 801353e:	bd80      	pop	{r7, pc}
 8013540:	20027118 	.word	0x20027118

08013544 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b088      	sub	sp, #32
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d103      	bne.n	801355a <mem_free+0x16>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 8013552:	485a      	ldr	r0, [pc, #360]	@ (80136bc <mem_free+0x178>)
 8013554:	f00d fd2e 	bl	8020fb4 <puts>
    return;
 8013558:	e0ac      	b.n	80136b4 <mem_free+0x170>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	f003 0303 	and.w	r3, r3, #3
 8013560:	2b00      	cmp	r3, #0
 8013562:	d018      	beq.n	8013596 <mem_free+0x52>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013564:	4b56      	ldr	r3, [pc, #344]	@ (80136c0 <mem_free+0x17c>)
 8013566:	f240 2273 	movw	r2, #627	@ 0x273
 801356a:	4956      	ldr	r1, [pc, #344]	@ (80136c4 <mem_free+0x180>)
 801356c:	4856      	ldr	r0, [pc, #344]	@ (80136c8 <mem_free+0x184>)
 801356e:	f00d fcb1 	bl	8020ed4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 8013572:	4854      	ldr	r0, [pc, #336]	@ (80136c4 <mem_free+0x180>)
 8013574:	f00d fd1e 	bl	8020fb4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013578:	f00c fb14 	bl	801fba4 <sys_arch_protect>
 801357c:	60f8      	str	r0, [r7, #12]
 801357e:	4b53      	ldr	r3, [pc, #332]	@ (80136cc <mem_free+0x188>)
 8013580:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013584:	3301      	adds	r3, #1
 8013586:	b29a      	uxth	r2, r3
 8013588:	4b50      	ldr	r3, [pc, #320]	@ (80136cc <mem_free+0x188>)
 801358a:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 801358e:	68f8      	ldr	r0, [r7, #12]
 8013590:	f00c fb16 	bl	801fbc0 <sys_arch_unprotect>
    return;
 8013594:	e08e      	b.n	80136b4 <mem_free+0x170>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	3b08      	subs	r3, #8
 801359a:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801359c:	4b4c      	ldr	r3, [pc, #304]	@ (80136d0 <mem_free+0x18c>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	69fa      	ldr	r2, [r7, #28]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d306      	bcc.n	80135b4 <mem_free+0x70>
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f103 020c 	add.w	r2, r3, #12
 80135ac:	4b49      	ldr	r3, [pc, #292]	@ (80136d4 <mem_free+0x190>)
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	429a      	cmp	r2, r3
 80135b2:	d918      	bls.n	80135e6 <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80135b4:	4b42      	ldr	r3, [pc, #264]	@ (80136c0 <mem_free+0x17c>)
 80135b6:	f240 227f 	movw	r2, #639	@ 0x27f
 80135ba:	4947      	ldr	r1, [pc, #284]	@ (80136d8 <mem_free+0x194>)
 80135bc:	4842      	ldr	r0, [pc, #264]	@ (80136c8 <mem_free+0x184>)
 80135be:	f00d fc89 	bl	8020ed4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 80135c2:	4845      	ldr	r0, [pc, #276]	@ (80136d8 <mem_free+0x194>)
 80135c4:	f00d fcf6 	bl	8020fb4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80135c8:	f00c faec 	bl	801fba4 <sys_arch_protect>
 80135cc:	6138      	str	r0, [r7, #16]
 80135ce:	4b3f      	ldr	r3, [pc, #252]	@ (80136cc <mem_free+0x188>)
 80135d0:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 80135d4:	3301      	adds	r3, #1
 80135d6:	b29a      	uxth	r2, r3
 80135d8:	4b3c      	ldr	r3, [pc, #240]	@ (80136cc <mem_free+0x188>)
 80135da:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 80135de:	6938      	ldr	r0, [r7, #16]
 80135e0:	f00c faee 	bl	801fbc0 <sys_arch_unprotect>
    return;
 80135e4:	e066      	b.n	80136b4 <mem_free+0x170>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80135e6:	483d      	ldr	r0, [pc, #244]	@ (80136dc <mem_free+0x198>)
 80135e8:	f00c faa0 	bl	801fb2c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	791b      	ldrb	r3, [r3, #4]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d11b      	bne.n	801362c <mem_free+0xe8>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80135f4:	4b32      	ldr	r3, [pc, #200]	@ (80136c0 <mem_free+0x17c>)
 80135f6:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80135fa:	4939      	ldr	r1, [pc, #228]	@ (80136e0 <mem_free+0x19c>)
 80135fc:	4832      	ldr	r0, [pc, #200]	@ (80136c8 <mem_free+0x184>)
 80135fe:	f00d fc69 	bl	8020ed4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013602:	4836      	ldr	r0, [pc, #216]	@ (80136dc <mem_free+0x198>)
 8013604:	f00c faa1 	bl	801fb4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 8013608:	4836      	ldr	r0, [pc, #216]	@ (80136e4 <mem_free+0x1a0>)
 801360a:	f00d fcd3 	bl	8020fb4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801360e:	f00c fac9 	bl	801fba4 <sys_arch_protect>
 8013612:	6178      	str	r0, [r7, #20]
 8013614:	4b2d      	ldr	r3, [pc, #180]	@ (80136cc <mem_free+0x188>)
 8013616:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 801361a:	3301      	adds	r3, #1
 801361c:	b29a      	uxth	r2, r3
 801361e:	4b2b      	ldr	r3, [pc, #172]	@ (80136cc <mem_free+0x188>)
 8013620:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013624:	6978      	ldr	r0, [r7, #20]
 8013626:	f00c facb 	bl	801fbc0 <sys_arch_unprotect>
    return;
 801362a:	e043      	b.n	80136b4 <mem_free+0x170>
  }

  if (!mem_link_valid(mem)) {
 801362c:	69f8      	ldr	r0, [r7, #28]
 801362e:	f7ff ff4d 	bl	80134cc <mem_link_valid>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d11b      	bne.n	8013670 <mem_free+0x12c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013638:	4b21      	ldr	r3, [pc, #132]	@ (80136c0 <mem_free+0x17c>)
 801363a:	f240 2295 	movw	r2, #661	@ 0x295
 801363e:	492a      	ldr	r1, [pc, #168]	@ (80136e8 <mem_free+0x1a4>)
 8013640:	4821      	ldr	r0, [pc, #132]	@ (80136c8 <mem_free+0x184>)
 8013642:	f00d fc47 	bl	8020ed4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013646:	4825      	ldr	r0, [pc, #148]	@ (80136dc <mem_free+0x198>)
 8013648:	f00c fa7f 	bl	801fb4a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 801364c:	4827      	ldr	r0, [pc, #156]	@ (80136ec <mem_free+0x1a8>)
 801364e:	f00d fcb1 	bl	8020fb4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013652:	f00c faa7 	bl	801fba4 <sys_arch_protect>
 8013656:	61b8      	str	r0, [r7, #24]
 8013658:	4b1c      	ldr	r3, [pc, #112]	@ (80136cc <mem_free+0x188>)
 801365a:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 801365e:	3301      	adds	r3, #1
 8013660:	b29a      	uxth	r2, r3
 8013662:	4b1a      	ldr	r3, [pc, #104]	@ (80136cc <mem_free+0x188>)
 8013664:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 8013668:	69b8      	ldr	r0, [r7, #24]
 801366a:	f00c faa9 	bl	801fbc0 <sys_arch_unprotect>
    return;
 801366e:	e021      	b.n	80136b4 <mem_free+0x170>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013670:	69fb      	ldr	r3, [r7, #28]
 8013672:	2200      	movs	r2, #0
 8013674:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8013676:	4b1e      	ldr	r3, [pc, #120]	@ (80136f0 <mem_free+0x1ac>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	69fa      	ldr	r2, [r7, #28]
 801367c:	429a      	cmp	r2, r3
 801367e:	d202      	bcs.n	8013686 <mem_free+0x142>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013680:	4a1b      	ldr	r2, [pc, #108]	@ (80136f0 <mem_free+0x1ac>)
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 8013686:	4b11      	ldr	r3, [pc, #68]	@ (80136cc <mem_free+0x188>)
 8013688:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 801368c:	4b10      	ldr	r3, [pc, #64]	@ (80136d0 <mem_free+0x18c>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	69f9      	ldr	r1, [r7, #28]
 8013692:	1acb      	subs	r3, r1, r3
 8013694:	b299      	uxth	r1, r3
 8013696:	69fb      	ldr	r3, [r7, #28]
 8013698:	881b      	ldrh	r3, [r3, #0]
 801369a:	1acb      	subs	r3, r1, r3
 801369c:	b29b      	uxth	r3, r3
 801369e:	4413      	add	r3, r2
 80136a0:	b29a      	uxth	r2, r3
 80136a2:	4b0a      	ldr	r3, [pc, #40]	@ (80136cc <mem_free+0x188>)
 80136a4:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80136a8:	69f8      	ldr	r0, [r7, #28]
 80136aa:	f7ff fe19 	bl	80132e0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80136ae:	480b      	ldr	r0, [pc, #44]	@ (80136dc <mem_free+0x198>)
 80136b0:	f00c fa4b 	bl	801fb4a <sys_mutex_unlock>
}
 80136b4:	3720      	adds	r7, #32
 80136b6:	46bd      	mov	sp, r7
 80136b8:	bd80      	pop	{r7, pc}
 80136ba:	bf00      	nop
 80136bc:	08022f24 	.word	0x08022f24
 80136c0:	08022e34 	.word	0x08022e34
 80136c4:	08022f44 	.word	0x08022f44
 80136c8:	08022e7c 	.word	0x08022e7c
 80136cc:	2002d36c 	.word	0x2002d36c
 80136d0:	20027114 	.word	0x20027114
 80136d4:	20027118 	.word	0x20027118
 80136d8:	08022f68 	.word	0x08022f68
 80136dc:	2002711c 	.word	0x2002711c
 80136e0:	08022f84 	.word	0x08022f84
 80136e4:	08022fac 	.word	0x08022fac
 80136e8:	08022fd4 	.word	0x08022fd4
 80136ec:	08023008 	.word	0x08023008
 80136f0:	20027120 	.word	0x20027120

080136f4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b088      	sub	sp, #32
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	460b      	mov	r3, r1
 80136fe:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8013700:	887b      	ldrh	r3, [r7, #2]
 8013702:	3303      	adds	r3, #3
 8013704:	b29b      	uxth	r3, r3
 8013706:	f023 0303 	bic.w	r3, r3, #3
 801370a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801370c:	8bfb      	ldrh	r3, [r7, #30]
 801370e:	2b0b      	cmp	r3, #11
 8013710:	d801      	bhi.n	8013716 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8013712:	230c      	movs	r3, #12
 8013714:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8013716:	8bfb      	ldrh	r3, [r7, #30]
 8013718:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 801371c:	d803      	bhi.n	8013726 <mem_trim+0x32>
 801371e:	8bfa      	ldrh	r2, [r7, #30]
 8013720:	887b      	ldrh	r3, [r7, #2]
 8013722:	429a      	cmp	r2, r3
 8013724:	d201      	bcs.n	801372a <mem_trim+0x36>
    return NULL;
 8013726:	2300      	movs	r3, #0
 8013728:	e0fb      	b.n	8013922 <mem_trim+0x22e>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801372a:	4b80      	ldr	r3, [pc, #512]	@ (801392c <mem_trim+0x238>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	687a      	ldr	r2, [r7, #4]
 8013730:	429a      	cmp	r2, r3
 8013732:	d304      	bcc.n	801373e <mem_trim+0x4a>
 8013734:	4b7e      	ldr	r3, [pc, #504]	@ (8013930 <mem_trim+0x23c>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	687a      	ldr	r2, [r7, #4]
 801373a:	429a      	cmp	r2, r3
 801373c:	d306      	bcc.n	801374c <mem_trim+0x58>
 801373e:	4b7d      	ldr	r3, [pc, #500]	@ (8013934 <mem_trim+0x240>)
 8013740:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8013744:	497c      	ldr	r1, [pc, #496]	@ (8013938 <mem_trim+0x244>)
 8013746:	487d      	ldr	r0, [pc, #500]	@ (801393c <mem_trim+0x248>)
 8013748:	f00d fbc4 	bl	8020ed4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801374c:	4b77      	ldr	r3, [pc, #476]	@ (801392c <mem_trim+0x238>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	429a      	cmp	r2, r3
 8013754:	d304      	bcc.n	8013760 <mem_trim+0x6c>
 8013756:	4b76      	ldr	r3, [pc, #472]	@ (8013930 <mem_trim+0x23c>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	429a      	cmp	r2, r3
 801375e:	d312      	bcc.n	8013786 <mem_trim+0x92>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 8013760:	4877      	ldr	r0, [pc, #476]	@ (8013940 <mem_trim+0x24c>)
 8013762:	f00d fc27 	bl	8020fb4 <puts>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013766:	f00c fa1d 	bl	801fba4 <sys_arch_protect>
 801376a:	60b8      	str	r0, [r7, #8]
 801376c:	4b75      	ldr	r3, [pc, #468]	@ (8013944 <mem_trim+0x250>)
 801376e:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	@ 0xb4
 8013772:	3301      	adds	r3, #1
 8013774:	b29a      	uxth	r2, r3
 8013776:	4b73      	ldr	r3, [pc, #460]	@ (8013944 <mem_trim+0x250>)
 8013778:	f8a3 20b4 	strh.w	r2, [r3, #180]	@ 0xb4
 801377c:	68b8      	ldr	r0, [r7, #8]
 801377e:	f00c fa1f 	bl	801fbc0 <sys_arch_unprotect>
    return rmem;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	e0cd      	b.n	8013922 <mem_trim+0x22e>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	3b08      	subs	r3, #8
 801378a:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801378c:	69b8      	ldr	r0, [r7, #24]
 801378e:	f7ff fd95 	bl	80132bc <mem_to_ptr>
 8013792:	4603      	mov	r3, r0
 8013794:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013796:	69bb      	ldr	r3, [r7, #24]
 8013798:	881a      	ldrh	r2, [r3, #0]
 801379a:	8afb      	ldrh	r3, [r7, #22]
 801379c:	1ad3      	subs	r3, r2, r3
 801379e:	b29b      	uxth	r3, r3
 80137a0:	3b08      	subs	r3, #8
 80137a2:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80137a4:	8bfa      	ldrh	r2, [r7, #30]
 80137a6:	8abb      	ldrh	r3, [r7, #20]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d906      	bls.n	80137ba <mem_trim+0xc6>
 80137ac:	4b61      	ldr	r3, [pc, #388]	@ (8013934 <mem_trim+0x240>)
 80137ae:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 80137b2:	4965      	ldr	r1, [pc, #404]	@ (8013948 <mem_trim+0x254>)
 80137b4:	4861      	ldr	r0, [pc, #388]	@ (801393c <mem_trim+0x248>)
 80137b6:	f00d fb8d 	bl	8020ed4 <iprintf>
  if (newsize > size) {
 80137ba:	8bfa      	ldrh	r2, [r7, #30]
 80137bc:	8abb      	ldrh	r3, [r7, #20]
 80137be:	429a      	cmp	r2, r3
 80137c0:	d901      	bls.n	80137c6 <mem_trim+0xd2>
    /* not supported */
    return NULL;
 80137c2:	2300      	movs	r3, #0
 80137c4:	e0ad      	b.n	8013922 <mem_trim+0x22e>
  }
  if (newsize == size) {
 80137c6:	8bfa      	ldrh	r2, [r7, #30]
 80137c8:	8abb      	ldrh	r3, [r7, #20]
 80137ca:	429a      	cmp	r2, r3
 80137cc:	d101      	bne.n	80137d2 <mem_trim+0xde>
    /* No change in size, simply return */
    return rmem;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	e0a7      	b.n	8013922 <mem_trim+0x22e>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80137d2:	485e      	ldr	r0, [pc, #376]	@ (801394c <mem_trim+0x258>)
 80137d4:	f00c f9aa 	bl	801fb2c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	881b      	ldrh	r3, [r3, #0]
 80137dc:	4618      	mov	r0, r3
 80137de:	f7ff fd5b 	bl	8013298 <ptr_to_mem>
 80137e2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80137e4:	693b      	ldr	r3, [r7, #16]
 80137e6:	791b      	ldrb	r3, [r3, #4]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d14b      	bne.n	8013884 <mem_trim+0x190>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	881b      	ldrh	r3, [r3, #0]
 80137f0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80137f4:	d106      	bne.n	8013804 <mem_trim+0x110>
 80137f6:	4b4f      	ldr	r3, [pc, #316]	@ (8013934 <mem_trim+0x240>)
 80137f8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80137fc:	4954      	ldr	r1, [pc, #336]	@ (8013950 <mem_trim+0x25c>)
 80137fe:	484f      	ldr	r0, [pc, #316]	@ (801393c <mem_trim+0x248>)
 8013800:	f00d fb68 	bl	8020ed4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013804:	693b      	ldr	r3, [r7, #16]
 8013806:	881b      	ldrh	r3, [r3, #0]
 8013808:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801380a:	8afa      	ldrh	r2, [r7, #22]
 801380c:	8bfb      	ldrh	r3, [r7, #30]
 801380e:	4413      	add	r3, r2
 8013810:	b29b      	uxth	r3, r3
 8013812:	3308      	adds	r3, #8
 8013814:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8013816:	4b4f      	ldr	r3, [pc, #316]	@ (8013954 <mem_trim+0x260>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	693a      	ldr	r2, [r7, #16]
 801381c:	429a      	cmp	r2, r3
 801381e:	d106      	bne.n	801382e <mem_trim+0x13a>
      lfree = ptr_to_mem(ptr2);
 8013820:	89fb      	ldrh	r3, [r7, #14]
 8013822:	4618      	mov	r0, r3
 8013824:	f7ff fd38 	bl	8013298 <ptr_to_mem>
 8013828:	4603      	mov	r3, r0
 801382a:	4a4a      	ldr	r2, [pc, #296]	@ (8013954 <mem_trim+0x260>)
 801382c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801382e:	89fb      	ldrh	r3, [r7, #14]
 8013830:	4618      	mov	r0, r3
 8013832:	f7ff fd31 	bl	8013298 <ptr_to_mem>
 8013836:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8013838:	693b      	ldr	r3, [r7, #16]
 801383a:	2200      	movs	r2, #0
 801383c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	89ba      	ldrh	r2, [r7, #12]
 8013842:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8013844:	693b      	ldr	r3, [r7, #16]
 8013846:	8afa      	ldrh	r2, [r7, #22]
 8013848:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801384a:	69bb      	ldr	r3, [r7, #24]
 801384c:	89fa      	ldrh	r2, [r7, #14]
 801384e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	881b      	ldrh	r3, [r3, #0]
 8013854:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013858:	d007      	beq.n	801386a <mem_trim+0x176>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801385a:	693b      	ldr	r3, [r7, #16]
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	4618      	mov	r0, r3
 8013860:	f7ff fd1a 	bl	8013298 <ptr_to_mem>
 8013864:	4602      	mov	r2, r0
 8013866:	89fb      	ldrh	r3, [r7, #14]
 8013868:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 801386a:	4b36      	ldr	r3, [pc, #216]	@ (8013944 <mem_trim+0x250>)
 801386c:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013870:	8bf9      	ldrh	r1, [r7, #30]
 8013872:	8abb      	ldrh	r3, [r7, #20]
 8013874:	1acb      	subs	r3, r1, r3
 8013876:	b29b      	uxth	r3, r3
 8013878:	4413      	add	r3, r2
 801387a:	b29a      	uxth	r2, r3
 801387c:	4b31      	ldr	r3, [pc, #196]	@ (8013944 <mem_trim+0x250>)
 801387e:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013882:	e04a      	b.n	801391a <mem_trim+0x226>
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8013884:	8bfb      	ldrh	r3, [r7, #30]
 8013886:	f103 0214 	add.w	r2, r3, #20
 801388a:	8abb      	ldrh	r3, [r7, #20]
 801388c:	429a      	cmp	r2, r3
 801388e:	d844      	bhi.n	801391a <mem_trim+0x226>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013890:	8afa      	ldrh	r2, [r7, #22]
 8013892:	8bfb      	ldrh	r3, [r7, #30]
 8013894:	4413      	add	r3, r2
 8013896:	b29b      	uxth	r3, r3
 8013898:	3308      	adds	r3, #8
 801389a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	881b      	ldrh	r3, [r3, #0]
 80138a0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80138a4:	d106      	bne.n	80138b4 <mem_trim+0x1c0>
 80138a6:	4b23      	ldr	r3, [pc, #140]	@ (8013934 <mem_trim+0x240>)
 80138a8:	f240 3216 	movw	r2, #790	@ 0x316
 80138ac:	4928      	ldr	r1, [pc, #160]	@ (8013950 <mem_trim+0x25c>)
 80138ae:	4823      	ldr	r0, [pc, #140]	@ (801393c <mem_trim+0x248>)
 80138b0:	f00d fb10 	bl	8020ed4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80138b4:	89fb      	ldrh	r3, [r7, #14]
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7ff fcee 	bl	8013298 <ptr_to_mem>
 80138bc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80138be:	4b25      	ldr	r3, [pc, #148]	@ (8013954 <mem_trim+0x260>)
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	693a      	ldr	r2, [r7, #16]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d202      	bcs.n	80138ce <mem_trim+0x1da>
      lfree = mem2;
 80138c8:	4a22      	ldr	r2, [pc, #136]	@ (8013954 <mem_trim+0x260>)
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	2200      	movs	r2, #0
 80138d2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80138d4:	69bb      	ldr	r3, [r7, #24]
 80138d6:	881a      	ldrh	r2, [r3, #0]
 80138d8:	693b      	ldr	r3, [r7, #16]
 80138da:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	8afa      	ldrh	r2, [r7, #22]
 80138e0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	89fa      	ldrh	r2, [r7, #14]
 80138e6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	881b      	ldrh	r3, [r3, #0]
 80138ec:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80138f0:	d007      	beq.n	8013902 <mem_trim+0x20e>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80138f2:	693b      	ldr	r3, [r7, #16]
 80138f4:	881b      	ldrh	r3, [r3, #0]
 80138f6:	4618      	mov	r0, r3
 80138f8:	f7ff fcce 	bl	8013298 <ptr_to_mem>
 80138fc:	4602      	mov	r2, r0
 80138fe:	89fb      	ldrh	r3, [r7, #14]
 8013900:	8053      	strh	r3, [r2, #2]
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
 8013902:	4b10      	ldr	r3, [pc, #64]	@ (8013944 <mem_trim+0x250>)
 8013904:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013908:	8bf9      	ldrh	r1, [r7, #30]
 801390a:	8abb      	ldrh	r3, [r7, #20]
 801390c:	1acb      	subs	r3, r1, r3
 801390e:	b29b      	uxth	r3, r3
 8013910:	4413      	add	r3, r2
 8013912:	b29a      	uxth	r2, r3
 8013914:	4b0b      	ldr	r3, [pc, #44]	@ (8013944 <mem_trim+0x250>)
 8013916:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801391a:	480c      	ldr	r0, [pc, #48]	@ (801394c <mem_trim+0x258>)
 801391c:	f00c f915 	bl	801fb4a <sys_mutex_unlock>
  return rmem;
 8013920:	687b      	ldr	r3, [r7, #4]
}
 8013922:	4618      	mov	r0, r3
 8013924:	3720      	adds	r7, #32
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
 801392a:	bf00      	nop
 801392c:	20027114 	.word	0x20027114
 8013930:	20027118 	.word	0x20027118
 8013934:	08022e34 	.word	0x08022e34
 8013938:	0802303c 	.word	0x0802303c
 801393c:	08022e7c 	.word	0x08022e7c
 8013940:	08023054 	.word	0x08023054
 8013944:	2002d36c 	.word	0x2002d36c
 8013948:	08023070 	.word	0x08023070
 801394c:	2002711c 	.word	0x2002711c
 8013950:	08023090 	.word	0x08023090
 8013954:	20027120 	.word	0x20027120

08013958 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8013958:	b590      	push	{r4, r7, lr}
 801395a:	b089      	sub	sp, #36	@ 0x24
 801395c:	af00      	add	r7, sp, #0
 801395e:	4603      	mov	r3, r0
 8013960:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8013962:	88fb      	ldrh	r3, [r7, #6]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d101      	bne.n	801396c <mem_malloc+0x14>
    return NULL;
 8013968:	2300      	movs	r3, #0
 801396a:	e127      	b.n	8013bbc <mem_malloc+0x264>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801396c:	88fb      	ldrh	r3, [r7, #6]
 801396e:	3303      	adds	r3, #3
 8013970:	b29b      	uxth	r3, r3
 8013972:	f023 0303 	bic.w	r3, r3, #3
 8013976:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8013978:	8bbb      	ldrh	r3, [r7, #28]
 801397a:	2b0b      	cmp	r3, #11
 801397c:	d801      	bhi.n	8013982 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801397e:	230c      	movs	r3, #12
 8013980:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8013982:	8bbb      	ldrh	r3, [r7, #28]
 8013984:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013988:	d803      	bhi.n	8013992 <mem_malloc+0x3a>
 801398a:	8bba      	ldrh	r2, [r7, #28]
 801398c:	88fb      	ldrh	r3, [r7, #6]
 801398e:	429a      	cmp	r2, r3
 8013990:	d201      	bcs.n	8013996 <mem_malloc+0x3e>
    return NULL;
 8013992:	2300      	movs	r3, #0
 8013994:	e112      	b.n	8013bbc <mem_malloc+0x264>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8013996:	488b      	ldr	r0, [pc, #556]	@ (8013bc4 <mem_malloc+0x26c>)
 8013998:	f00c f8c8 	bl	801fb2c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801399c:	4b8a      	ldr	r3, [pc, #552]	@ (8013bc8 <mem_malloc+0x270>)
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	4618      	mov	r0, r3
 80139a2:	f7ff fc8b 	bl	80132bc <mem_to_ptr>
 80139a6:	4603      	mov	r3, r0
 80139a8:	83fb      	strh	r3, [r7, #30]
 80139aa:	e0ee      	b.n	8013b8a <mem_malloc+0x232>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80139ac:	8bfb      	ldrh	r3, [r7, #30]
 80139ae:	4618      	mov	r0, r3
 80139b0:	f7ff fc72 	bl	8013298 <ptr_to_mem>
 80139b4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80139b6:	697b      	ldr	r3, [r7, #20]
 80139b8:	791b      	ldrb	r3, [r3, #4]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	f040 80de 	bne.w	8013b7c <mem_malloc+0x224>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80139c0:	697b      	ldr	r3, [r7, #20]
 80139c2:	881b      	ldrh	r3, [r3, #0]
 80139c4:	461a      	mov	r2, r3
 80139c6:	8bfb      	ldrh	r3, [r7, #30]
 80139c8:	1ad3      	subs	r3, r2, r3
 80139ca:	f1a3 0208 	sub.w	r2, r3, #8
 80139ce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80139d0:	429a      	cmp	r2, r3
 80139d2:	f0c0 80d3 	bcc.w	8013b7c <mem_malloc+0x224>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80139d6:	697b      	ldr	r3, [r7, #20]
 80139d8:	881b      	ldrh	r3, [r3, #0]
 80139da:	461a      	mov	r2, r3
 80139dc:	8bfb      	ldrh	r3, [r7, #30]
 80139de:	1ad3      	subs	r3, r2, r3
 80139e0:	f1a3 0208 	sub.w	r2, r3, #8
 80139e4:	8bbb      	ldrh	r3, [r7, #28]
 80139e6:	3314      	adds	r3, #20
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d34c      	bcc.n	8013a86 <mem_malloc+0x12e>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80139ec:	8bfa      	ldrh	r2, [r7, #30]
 80139ee:	8bbb      	ldrh	r3, [r7, #28]
 80139f0:	4413      	add	r3, r2
 80139f2:	b29b      	uxth	r3, r3
 80139f4:	3308      	adds	r3, #8
 80139f6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80139f8:	8a7b      	ldrh	r3, [r7, #18]
 80139fa:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80139fe:	d106      	bne.n	8013a0e <mem_malloc+0xb6>
 8013a00:	4b72      	ldr	r3, [pc, #456]	@ (8013bcc <mem_malloc+0x274>)
 8013a02:	f240 3287 	movw	r2, #903	@ 0x387
 8013a06:	4972      	ldr	r1, [pc, #456]	@ (8013bd0 <mem_malloc+0x278>)
 8013a08:	4872      	ldr	r0, [pc, #456]	@ (8013bd4 <mem_malloc+0x27c>)
 8013a0a:	f00d fa63 	bl	8020ed4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013a0e:	8a7b      	ldrh	r3, [r7, #18]
 8013a10:	4618      	mov	r0, r3
 8013a12:	f7ff fc41 	bl	8013298 <ptr_to_mem>
 8013a16:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	881a      	ldrh	r2, [r3, #0]
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	8bfa      	ldrh	r2, [r7, #30]
 8013a2a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013a2c:	697b      	ldr	r3, [r7, #20]
 8013a2e:	8a7a      	ldrh	r2, [r7, #18]
 8013a30:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	2201      	movs	r2, #1
 8013a36:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	881b      	ldrh	r3, [r3, #0]
 8013a3c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8013a40:	d007      	beq.n	8013a52 <mem_malloc+0xfa>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	881b      	ldrh	r3, [r3, #0]
 8013a46:	4618      	mov	r0, r3
 8013a48:	f7ff fc26 	bl	8013298 <ptr_to_mem>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	8a7b      	ldrh	r3, [r7, #18]
 8013a50:	8053      	strh	r3, [r2, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 8013a52:	4b61      	ldr	r3, [pc, #388]	@ (8013bd8 <mem_malloc+0x280>)
 8013a54:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013a58:	8bbb      	ldrh	r3, [r7, #28]
 8013a5a:	4413      	add	r3, r2
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	3308      	adds	r3, #8
 8013a60:	b29a      	uxth	r2, r3
 8013a62:	4b5d      	ldr	r3, [pc, #372]	@ (8013bd8 <mem_malloc+0x280>)
 8013a64:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013a68:	4b5b      	ldr	r3, [pc, #364]	@ (8013bd8 <mem_malloc+0x280>)
 8013a6a:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 8013a6e:	4b5a      	ldr	r3, [pc, #360]	@ (8013bd8 <mem_malloc+0x280>)
 8013a70:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d227      	bcs.n	8013ac8 <mem_malloc+0x170>
 8013a78:	4b57      	ldr	r3, [pc, #348]	@ (8013bd8 <mem_malloc+0x280>)
 8013a7a:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013a7e:	4b56      	ldr	r3, [pc, #344]	@ (8013bd8 <mem_malloc+0x280>)
 8013a80:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
 8013a84:	e020      	b.n	8013ac8 <mem_malloc+0x170>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	2201      	movs	r2, #1
 8013a8a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8013a8c:	4b52      	ldr	r3, [pc, #328]	@ (8013bd8 <mem_malloc+0x280>)
 8013a8e:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	4413      	add	r3, r2
 8013a98:	b29c      	uxth	r4, r3
 8013a9a:	6978      	ldr	r0, [r7, #20]
 8013a9c:	f7ff fc0e 	bl	80132bc <mem_to_ptr>
 8013aa0:	4603      	mov	r3, r0
 8013aa2:	1ae3      	subs	r3, r4, r3
 8013aa4:	b29a      	uxth	r2, r3
 8013aa6:	4b4c      	ldr	r3, [pc, #304]	@ (8013bd8 <mem_malloc+0x280>)
 8013aa8:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 8013aac:	4b4a      	ldr	r3, [pc, #296]	@ (8013bd8 <mem_malloc+0x280>)
 8013aae:	f8b3 20b2 	ldrh.w	r2, [r3, #178]	@ 0xb2
 8013ab2:	4b49      	ldr	r3, [pc, #292]	@ (8013bd8 <mem_malloc+0x280>)
 8013ab4:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	@ 0xb0
 8013ab8:	429a      	cmp	r2, r3
 8013aba:	d205      	bcs.n	8013ac8 <mem_malloc+0x170>
 8013abc:	4b46      	ldr	r3, [pc, #280]	@ (8013bd8 <mem_malloc+0x280>)
 8013abe:	f8b3 20b0 	ldrh.w	r2, [r3, #176]	@ 0xb0
 8013ac2:	4b45      	ldr	r3, [pc, #276]	@ (8013bd8 <mem_malloc+0x280>)
 8013ac4:	f8a3 20b2 	strh.w	r2, [r3, #178]	@ 0xb2
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8013ac8:	4b3f      	ldr	r3, [pc, #252]	@ (8013bc8 <mem_malloc+0x270>)
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	697a      	ldr	r2, [r7, #20]
 8013ace:	429a      	cmp	r2, r3
 8013ad0:	d127      	bne.n	8013b22 <mem_malloc+0x1ca>
          struct mem *cur = lfree;
 8013ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8013bc8 <mem_malloc+0x270>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8013ad8:	e005      	b.n	8013ae6 <mem_malloc+0x18e>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8013ada:	69bb      	ldr	r3, [r7, #24]
 8013adc:	881b      	ldrh	r3, [r3, #0]
 8013ade:	4618      	mov	r0, r3
 8013ae0:	f7ff fbda 	bl	8013298 <ptr_to_mem>
 8013ae4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8013ae6:	69bb      	ldr	r3, [r7, #24]
 8013ae8:	791b      	ldrb	r3, [r3, #4]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d004      	beq.n	8013af8 <mem_malloc+0x1a0>
 8013aee:	4b3b      	ldr	r3, [pc, #236]	@ (8013bdc <mem_malloc+0x284>)
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	69ba      	ldr	r2, [r7, #24]
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d1f0      	bne.n	8013ada <mem_malloc+0x182>
          }
          lfree = cur;
 8013af8:	4a33      	ldr	r2, [pc, #204]	@ (8013bc8 <mem_malloc+0x270>)
 8013afa:	69bb      	ldr	r3, [r7, #24]
 8013afc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8013afe:	4b32      	ldr	r3, [pc, #200]	@ (8013bc8 <mem_malloc+0x270>)
 8013b00:	681a      	ldr	r2, [r3, #0]
 8013b02:	4b36      	ldr	r3, [pc, #216]	@ (8013bdc <mem_malloc+0x284>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d00b      	beq.n	8013b22 <mem_malloc+0x1ca>
 8013b0a:	4b2f      	ldr	r3, [pc, #188]	@ (8013bc8 <mem_malloc+0x270>)
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	791b      	ldrb	r3, [r3, #4]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d006      	beq.n	8013b22 <mem_malloc+0x1ca>
 8013b14:	4b2d      	ldr	r3, [pc, #180]	@ (8013bcc <mem_malloc+0x274>)
 8013b16:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8013b1a:	4931      	ldr	r1, [pc, #196]	@ (8013be0 <mem_malloc+0x288>)
 8013b1c:	482d      	ldr	r0, [pc, #180]	@ (8013bd4 <mem_malloc+0x27c>)
 8013b1e:	f00d f9d9 	bl	8020ed4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013b22:	4828      	ldr	r0, [pc, #160]	@ (8013bc4 <mem_malloc+0x26c>)
 8013b24:	f00c f811 	bl	801fb4a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8013b28:	8bba      	ldrh	r2, [r7, #28]
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	4413      	add	r3, r2
 8013b2e:	3308      	adds	r3, #8
 8013b30:	4a2a      	ldr	r2, [pc, #168]	@ (8013bdc <mem_malloc+0x284>)
 8013b32:	6812      	ldr	r2, [r2, #0]
 8013b34:	4293      	cmp	r3, r2
 8013b36:	d906      	bls.n	8013b46 <mem_malloc+0x1ee>
 8013b38:	4b24      	ldr	r3, [pc, #144]	@ (8013bcc <mem_malloc+0x274>)
 8013b3a:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8013b3e:	4929      	ldr	r1, [pc, #164]	@ (8013be4 <mem_malloc+0x28c>)
 8013b40:	4824      	ldr	r0, [pc, #144]	@ (8013bd4 <mem_malloc+0x27c>)
 8013b42:	f00d f9c7 	bl	8020ed4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	f003 0303 	and.w	r3, r3, #3
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d006      	beq.n	8013b5e <mem_malloc+0x206>
 8013b50:	4b1e      	ldr	r3, [pc, #120]	@ (8013bcc <mem_malloc+0x274>)
 8013b52:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8013b56:	4924      	ldr	r1, [pc, #144]	@ (8013be8 <mem_malloc+0x290>)
 8013b58:	481e      	ldr	r0, [pc, #120]	@ (8013bd4 <mem_malloc+0x27c>)
 8013b5a:	f00d f9bb 	bl	8020ed4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	f003 0303 	and.w	r3, r3, #3
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d006      	beq.n	8013b76 <mem_malloc+0x21e>
 8013b68:	4b18      	ldr	r3, [pc, #96]	@ (8013bcc <mem_malloc+0x274>)
 8013b6a:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8013b6e:	491f      	ldr	r1, [pc, #124]	@ (8013bec <mem_malloc+0x294>)
 8013b70:	4818      	ldr	r0, [pc, #96]	@ (8013bd4 <mem_malloc+0x27c>)
 8013b72:	f00d f9af 	bl	8020ed4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	3308      	adds	r3, #8
 8013b7a:	e01f      	b.n	8013bbc <mem_malloc+0x264>
         ptr = ptr_to_mem(ptr)->next) {
 8013b7c:	8bfb      	ldrh	r3, [r7, #30]
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7ff fb8a 	bl	8013298 <ptr_to_mem>
 8013b84:	4603      	mov	r3, r0
 8013b86:	881b      	ldrh	r3, [r3, #0]
 8013b88:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013b8a:	8bfa      	ldrh	r2, [r7, #30]
 8013b8c:	8bbb      	ldrh	r3, [r7, #28]
 8013b8e:	f5c3 43c8 	rsb	r3, r3, #25600	@ 0x6400
 8013b92:	429a      	cmp	r2, r3
 8013b94:	f4ff af0a 	bcc.w	80139ac <mem_malloc+0x54>
    }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
 8013b98:	4b0f      	ldr	r3, [pc, #60]	@ (8013bd8 <mem_malloc+0x280>)
 8013b9a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8013b9e:	3301      	adds	r3, #1
 8013ba0:	b29a      	uxth	r2, r3
 8013ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8013bd8 <mem_malloc+0x280>)
 8013ba4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8013ba8:	4806      	ldr	r0, [pc, #24]	@ (8013bc4 <mem_malloc+0x26c>)
 8013baa:	f00b ffce 	bl	801fb4a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 8013bae:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	480e      	ldr	r0, [pc, #56]	@ (8013bf0 <mem_malloc+0x298>)
 8013bb6:	f00d f98d 	bl	8020ed4 <iprintf>
  return NULL;
 8013bba:	2300      	movs	r3, #0
}
 8013bbc:	4618      	mov	r0, r3
 8013bbe:	3724      	adds	r7, #36	@ 0x24
 8013bc0:	46bd      	mov	sp, r7
 8013bc2:	bd90      	pop	{r4, r7, pc}
 8013bc4:	2002711c 	.word	0x2002711c
 8013bc8:	20027120 	.word	0x20027120
 8013bcc:	08022e34 	.word	0x08022e34
 8013bd0:	08023090 	.word	0x08023090
 8013bd4:	08022e7c 	.word	0x08022e7c
 8013bd8:	2002d36c 	.word	0x2002d36c
 8013bdc:	20027118 	.word	0x20027118
 8013be0:	080230a4 	.word	0x080230a4
 8013be4:	080230c0 	.word	0x080230c0
 8013be8:	080230f0 	.word	0x080230f0
 8013bec:	08023120 	.word	0x08023120
 8013bf0:	08023144 	.word	0x08023144

08013bf4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8013bf4:	b480      	push	{r7}
 8013bf6:	b085      	sub	sp, #20
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	691b      	ldr	r3, [r3, #16]
 8013c00:	2200      	movs	r2, #0
 8013c02:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	3303      	adds	r3, #3
 8013c0a:	f023 0303 	bic.w	r3, r3, #3
 8013c0e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8013c10:	2300      	movs	r3, #0
 8013c12:	60fb      	str	r3, [r7, #12]
 8013c14:	e011      	b.n	8013c3a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	691b      	ldr	r3, [r3, #16]
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	691b      	ldr	r3, [r3, #16]
 8013c24:	68ba      	ldr	r2, [r7, #8]
 8013c26:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	891b      	ldrh	r3, [r3, #8]
 8013c2c:	461a      	mov	r2, r3
 8013c2e:	68bb      	ldr	r3, [r7, #8]
 8013c30:	4413      	add	r3, r2
 8013c32:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	3301      	adds	r3, #1
 8013c38:	60fb      	str	r3, [r7, #12]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	895b      	ldrh	r3, [r3, #10]
 8013c3e:	461a      	mov	r2, r3
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	4293      	cmp	r3, r2
 8013c44:	dbe7      	blt.n	8013c16 <memp_init_pool+0x22>
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                  );
  }
#if MEMP_STATS
  desc->stats->avail = desc->num;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	685b      	ldr	r3, [r3, #4]
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	8952      	ldrh	r2, [r2, #10]
 8013c4e:	80da      	strh	r2, [r3, #6]
#endif /* MEMP_STATS */
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	685b      	ldr	r3, [r3, #4]
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	6812      	ldr	r2, [r2, #0]
 8013c58:	601a      	str	r2, [r3, #0]
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8013c5a:	bf00      	nop
 8013c5c:	3714      	adds	r7, #20
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c64:	4770      	bx	lr
	...

08013c68 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013c6e:	2300      	movs	r3, #0
 8013c70:	80fb      	strh	r3, [r7, #6]
 8013c72:	e013      	b.n	8013c9c <memp_init+0x34>
    memp_init_pool(memp_pools[i]);
 8013c74:	88fb      	ldrh	r3, [r7, #6]
 8013c76:	4a0d      	ldr	r2, [pc, #52]	@ (8013cac <memp_init+0x44>)
 8013c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f7ff ffb9 	bl	8013bf4 <memp_init_pool>

#if LWIP_STATS && MEMP_STATS
    lwip_stats.memp[i] = memp_pools[i]->stats;
 8013c82:	88fb      	ldrh	r3, [r7, #6]
 8013c84:	4a09      	ldr	r2, [pc, #36]	@ (8013cac <memp_init+0x44>)
 8013c86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013c8a:	88fb      	ldrh	r3, [r7, #6]
 8013c8c:	6852      	ldr	r2, [r2, #4]
 8013c8e:	4908      	ldr	r1, [pc, #32]	@ (8013cb0 <memp_init+0x48>)
 8013c90:	332e      	adds	r3, #46	@ 0x2e
 8013c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013c96:	88fb      	ldrh	r3, [r7, #6]
 8013c98:	3301      	adds	r3, #1
 8013c9a:	80fb      	strh	r3, [r7, #6]
 8013c9c:	88fb      	ldrh	r3, [r7, #6]
 8013c9e:	2b0c      	cmp	r3, #12
 8013ca0:	d9e8      	bls.n	8013c74 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8013ca2:	bf00      	nop
 8013ca4:	bf00      	nop
 8013ca6:	3708      	adds	r7, #8
 8013ca8:	46bd      	mov	sp, r7
 8013caa:	bd80      	pop	{r7, pc}
 8013cac:	08026d48 	.word	0x08026d48
 8013cb0:	2002d36c 	.word	0x2002d36c

08013cb4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013cbc:	f00b ff72 	bl	801fba4 <sys_arch_protect>
 8013cc0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	691b      	ldr	r3, [r3, #16]
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d029      	beq.n	8013d24 <do_memp_malloc_pool+0x70>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	691b      	ldr	r3, [r3, #16]
 8013cd4:	68ba      	ldr	r2, [r7, #8]
 8013cd6:	6812      	ldr	r2, [r2, #0]
 8013cd8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	f003 0303 	and.w	r3, r3, #3
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d006      	beq.n	8013cf2 <do_memp_malloc_pool+0x3e>
 8013ce4:	4b19      	ldr	r3, [pc, #100]	@ (8013d4c <do_memp_malloc_pool+0x98>)
 8013ce6:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8013cea:	4919      	ldr	r1, [pc, #100]	@ (8013d50 <do_memp_malloc_pool+0x9c>)
 8013cec:	4819      	ldr	r0, [pc, #100]	@ (8013d54 <do_memp_malloc_pool+0xa0>)
 8013cee:	f00d f8f1 	bl	8020ed4 <iprintf>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	685b      	ldr	r3, [r3, #4]
 8013cf6:	891a      	ldrh	r2, [r3, #8]
 8013cf8:	3201      	adds	r2, #1
 8013cfa:	b292      	uxth	r2, r2
 8013cfc:	811a      	strh	r2, [r3, #8]
    if (desc->stats->used > desc->stats->max) {
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	685b      	ldr	r3, [r3, #4]
 8013d02:	891a      	ldrh	r2, [r3, #8]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	685b      	ldr	r3, [r3, #4]
 8013d08:	895b      	ldrh	r3, [r3, #10]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d905      	bls.n	8013d1a <do_memp_malloc_pool+0x66>
      desc->stats->max = desc->stats->used;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	685a      	ldr	r2, [r3, #4]
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	8912      	ldrh	r2, [r2, #8]
 8013d18:	815a      	strh	r2, [r3, #10]
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013d1a:	68f8      	ldr	r0, [r7, #12]
 8013d1c:	f00b ff50 	bl	801fbc0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	e00f      	b.n	8013d44 <do_memp_malloc_pool+0x90>
  } else {
#if MEMP_STATS
    desc->stats->err++;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	889a      	ldrh	r2, [r3, #4]
 8013d2a:	3201      	adds	r2, #1
 8013d2c:	b292      	uxth	r2, r2
 8013d2e:	809a      	strh	r2, [r3, #4]
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f00b ff45 	bl	801fbc0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	4806      	ldr	r0, [pc, #24]	@ (8013d58 <do_memp_malloc_pool+0xa4>)
 8013d3e:	f00d f8c9 	bl	8020ed4 <iprintf>
  }

  return NULL;
 8013d42:	2300      	movs	r3, #0
}
 8013d44:	4618      	mov	r0, r3
 8013d46:	3710      	adds	r7, #16
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	bd80      	pop	{r7, pc}
 8013d4c:	08023234 	.word	0x08023234
 8013d50:	08023264 	.word	0x08023264
 8013d54:	08023288 	.word	0x08023288
 8013d58:	080232b0 	.word	0x080232b0

08013d5c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8013d5c:	b580      	push	{r7, lr}
 8013d5e:	b082      	sub	sp, #8
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d106      	bne.n	8013d78 <memp_malloc_pool+0x1c>
 8013d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8013d94 <memp_malloc_pool+0x38>)
 8013d6c:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8013d70:	4909      	ldr	r1, [pc, #36]	@ (8013d98 <memp_malloc_pool+0x3c>)
 8013d72:	480a      	ldr	r0, [pc, #40]	@ (8013d9c <memp_malloc_pool+0x40>)
 8013d74:	f00d f8ae 	bl	8020ed4 <iprintf>
  if (desc == NULL) {
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d101      	bne.n	8013d82 <memp_malloc_pool+0x26>
    return NULL;
 8013d7e:	2300      	movs	r3, #0
 8013d80:	e003      	b.n	8013d8a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f7ff ff96 	bl	8013cb4 <do_memp_malloc_pool>
 8013d88:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3708      	adds	r7, #8
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}
 8013d92:	bf00      	nop
 8013d94:	08023234 	.word	0x08023234
 8013d98:	080232d8 	.word	0x080232d8
 8013d9c:	08023288 	.word	0x08023288

08013da0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8013da0:	b580      	push	{r7, lr}
 8013da2:	b084      	sub	sp, #16
 8013da4:	af00      	add	r7, sp, #0
 8013da6:	4603      	mov	r3, r0
 8013da8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8013daa:	79fb      	ldrb	r3, [r7, #7]
 8013dac:	2b0c      	cmp	r3, #12
 8013dae:	d908      	bls.n	8013dc2 <memp_malloc+0x22>
 8013db0:	4b0a      	ldr	r3, [pc, #40]	@ (8013ddc <memp_malloc+0x3c>)
 8013db2:	f240 1257 	movw	r2, #343	@ 0x157
 8013db6:	490a      	ldr	r1, [pc, #40]	@ (8013de0 <memp_malloc+0x40>)
 8013db8:	480a      	ldr	r0, [pc, #40]	@ (8013de4 <memp_malloc+0x44>)
 8013dba:	f00d f88b 	bl	8020ed4 <iprintf>
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	e008      	b.n	8013dd4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013dc2:	79fb      	ldrb	r3, [r7, #7]
 8013dc4:	4a08      	ldr	r2, [pc, #32]	@ (8013de8 <memp_malloc+0x48>)
 8013dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dca:	4618      	mov	r0, r3
 8013dcc:	f7ff ff72 	bl	8013cb4 <do_memp_malloc_pool>
 8013dd0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3710      	adds	r7, #16
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}
 8013ddc:	08023234 	.word	0x08023234
 8013de0:	080232ec 	.word	0x080232ec
 8013de4:	08023288 	.word	0x08023288
 8013de8:	08026d48 	.word	0x08026d48

08013dec <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013dec:	b580      	push	{r7, lr}
 8013dee:	b084      	sub	sp, #16
 8013df0:	af00      	add	r7, sp, #0
 8013df2:	6078      	str	r0, [r7, #4]
 8013df4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013df6:	683b      	ldr	r3, [r7, #0]
 8013df8:	f003 0303 	and.w	r3, r3, #3
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d006      	beq.n	8013e0e <do_memp_free_pool+0x22>
 8013e00:	4b10      	ldr	r3, [pc, #64]	@ (8013e44 <do_memp_free_pool+0x58>)
 8013e02:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8013e06:	4910      	ldr	r1, [pc, #64]	@ (8013e48 <do_memp_free_pool+0x5c>)
 8013e08:	4810      	ldr	r0, [pc, #64]	@ (8013e4c <do_memp_free_pool+0x60>)
 8013e0a:	f00d f863 	bl	8020ed4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013e0e:	683b      	ldr	r3, [r7, #0]
 8013e10:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013e12:	f00b fec7 	bl	801fba4 <sys_arch_protect>
 8013e16:	60b8      	str	r0, [r7, #8]
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	685b      	ldr	r3, [r3, #4]
 8013e1c:	891a      	ldrh	r2, [r3, #8]
 8013e1e:	3a01      	subs	r2, #1
 8013e20:	b292      	uxth	r2, r2
 8013e22:	811a      	strh	r2, [r3, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	691b      	ldr	r3, [r3, #16]
 8013e28:	681a      	ldr	r2, [r3, #0]
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	691b      	ldr	r3, [r3, #16]
 8013e32:	68fa      	ldr	r2, [r7, #12]
 8013e34:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8013e36:	68b8      	ldr	r0, [r7, #8]
 8013e38:	f00b fec2 	bl	801fbc0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013e3c:	bf00      	nop
 8013e3e:	3710      	adds	r7, #16
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	08023234 	.word	0x08023234
 8013e48:	0802330c 	.word	0x0802330c
 8013e4c:	08023288 	.word	0x08023288

08013e50 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b082      	sub	sp, #8
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
 8013e58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d106      	bne.n	8013e6e <memp_free_pool+0x1e>
 8013e60:	4b0a      	ldr	r3, [pc, #40]	@ (8013e8c <memp_free_pool+0x3c>)
 8013e62:	f240 1295 	movw	r2, #405	@ 0x195
 8013e66:	490a      	ldr	r1, [pc, #40]	@ (8013e90 <memp_free_pool+0x40>)
 8013e68:	480a      	ldr	r0, [pc, #40]	@ (8013e94 <memp_free_pool+0x44>)
 8013e6a:	f00d f833 	bl	8020ed4 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d007      	beq.n	8013e84 <memp_free_pool+0x34>
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d004      	beq.n	8013e84 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8013e7a:	6839      	ldr	r1, [r7, #0]
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7ff ffb5 	bl	8013dec <do_memp_free_pool>
 8013e82:	e000      	b.n	8013e86 <memp_free_pool+0x36>
    return;
 8013e84:	bf00      	nop
}
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	08023234 	.word	0x08023234
 8013e90:	080232d8 	.word	0x080232d8
 8013e94:	08023288 	.word	0x08023288

08013e98 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b082      	sub	sp, #8
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	6039      	str	r1, [r7, #0]
 8013ea2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013ea4:	79fb      	ldrb	r3, [r7, #7]
 8013ea6:	2b0c      	cmp	r3, #12
 8013ea8:	d907      	bls.n	8013eba <memp_free+0x22>
 8013eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8013edc <memp_free+0x44>)
 8013eac:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8013eb0:	490b      	ldr	r1, [pc, #44]	@ (8013ee0 <memp_free+0x48>)
 8013eb2:	480c      	ldr	r0, [pc, #48]	@ (8013ee4 <memp_free+0x4c>)
 8013eb4:	f00d f80e 	bl	8020ed4 <iprintf>
 8013eb8:	e00c      	b.n	8013ed4 <memp_free+0x3c>

  if (mem == NULL) {
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d008      	beq.n	8013ed2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8013ec0:	79fb      	ldrb	r3, [r7, #7]
 8013ec2:	4a09      	ldr	r2, [pc, #36]	@ (8013ee8 <memp_free+0x50>)
 8013ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ec8:	6839      	ldr	r1, [r7, #0]
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7ff ff8e 	bl	8013dec <do_memp_free_pool>
 8013ed0:	e000      	b.n	8013ed4 <memp_free+0x3c>
    return;
 8013ed2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013ed4:	3708      	adds	r7, #8
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}
 8013eda:	bf00      	nop
 8013edc:	08023234 	.word	0x08023234
 8013ee0:	0802332c 	.word	0x0802332c
 8013ee4:	08023288 	.word	0x08023288
 8013ee8:	08026d48 	.word	0x08026d48

08013eec <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013eec:	b480      	push	{r7}
 8013eee:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013ef0:	bf00      	nop
 8013ef2:	46bd      	mov	sp, r7
 8013ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef8:	4770      	bx	lr
	...

08013efc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b088      	sub	sp, #32
 8013f00:	af02      	add	r7, sp, #8
 8013f02:	60f8      	str	r0, [r7, #12]
 8013f04:	60b9      	str	r1, [r7, #8]
 8013f06:	607a      	str	r2, [r7, #4]
 8013f08:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d108      	bne.n	8013f22 <netif_add+0x26>
 8013f10:	4b96      	ldr	r3, [pc, #600]	@ (801416c <netif_add+0x270>)
 8013f12:	f240 1227 	movw	r2, #295	@ 0x127
 8013f16:	4996      	ldr	r1, [pc, #600]	@ (8014170 <netif_add+0x274>)
 8013f18:	4896      	ldr	r0, [pc, #600]	@ (8014174 <netif_add+0x278>)
 8013f1a:	f00c ffdb 	bl	8020ed4 <iprintf>
 8013f1e:	2300      	movs	r3, #0
 8013f20:	e14c      	b.n	80141bc <netif_add+0x2c0>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8013f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d108      	bne.n	8013f3a <netif_add+0x3e>
 8013f28:	4b90      	ldr	r3, [pc, #576]	@ (801416c <netif_add+0x270>)
 8013f2a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8013f2e:	4992      	ldr	r1, [pc, #584]	@ (8014178 <netif_add+0x27c>)
 8013f30:	4890      	ldr	r0, [pc, #576]	@ (8014174 <netif_add+0x278>)
 8013f32:	f00c ffcf 	bl	8020ed4 <iprintf>
 8013f36:	2300      	movs	r3, #0
 8013f38:	e140      	b.n	80141bc <netif_add+0x2c0>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013f3a:	68bb      	ldr	r3, [r7, #8]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d101      	bne.n	8013f44 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013f40:	4b8e      	ldr	r3, [pc, #568]	@ (801417c <netif_add+0x280>)
 8013f42:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d101      	bne.n	8013f4e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013f4a:	4b8c      	ldr	r3, [pc, #560]	@ (801417c <netif_add+0x280>)
 8013f4c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d101      	bne.n	8013f58 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013f54:	4b89      	ldr	r3, [pc, #548]	@ (801417c <netif_add+0x280>)
 8013f56:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	2200      	movs	r2, #0
 8013f62:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	2200      	movs	r2, #0
 8013f68:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	4a84      	ldr	r2, [pc, #528]	@ (8014180 <netif_add+0x284>)
 8013f6e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	2200      	movs	r2, #0
 8013f74:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	2200      	movs	r2, #0
 8013f82:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013f84:	68fb      	ldr	r3, [r7, #12]
 8013f86:	6a3a      	ldr	r2, [r7, #32]
 8013f88:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013f8a:	4b7e      	ldr	r3, [pc, #504]	@ (8014184 <netif_add+0x288>)
 8013f8c:	781a      	ldrb	r2, [r3, #0]
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 8013f94:	68fb      	ldr	r3, [r7, #12]
 8013f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013f98:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013f9a:	683b      	ldr	r3, [r7, #0]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	68b9      	ldr	r1, [r7, #8]
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	f000 f9f5 	bl	8014390 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa8:	68f8      	ldr	r0, [r7, #12]
 8013faa:	4798      	blx	r3
 8013fac:	4603      	mov	r3, r0
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d001      	beq.n	8013fb6 <netif_add+0xba>
    return NULL;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	e102      	b.n	80141bc <netif_add+0x2c0>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013fbc:	2bff      	cmp	r3, #255	@ 0xff
 8013fbe:	d103      	bne.n	8013fc8 <netif_add+0xcc>
        netif->num = 0;
 8013fc0:	68fb      	ldr	r3, [r7, #12]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 8013fc8:	2300      	movs	r3, #0
 8013fca:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013fcc:	4b6e      	ldr	r3, [pc, #440]	@ (8014188 <netif_add+0x28c>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	617b      	str	r3, [r7, #20]
 8013fd2:	e02b      	b.n	801402c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013fd4:	697a      	ldr	r2, [r7, #20]
 8013fd6:	68fb      	ldr	r3, [r7, #12]
 8013fd8:	429a      	cmp	r2, r3
 8013fda:	d106      	bne.n	8013fea <netif_add+0xee>
 8013fdc:	4b63      	ldr	r3, [pc, #396]	@ (801416c <netif_add+0x270>)
 8013fde:	f240 128b 	movw	r2, #395	@ 0x18b
 8013fe2:	496a      	ldr	r1, [pc, #424]	@ (801418c <netif_add+0x290>)
 8013fe4:	4863      	ldr	r0, [pc, #396]	@ (8014174 <netif_add+0x278>)
 8013fe6:	f00c ff75 	bl	8020ed4 <iprintf>
        num_netifs++;
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	3301      	adds	r3, #1
 8013fee:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013ff0:	693b      	ldr	r3, [r7, #16]
 8013ff2:	2bff      	cmp	r3, #255	@ 0xff
 8013ff4:	dd06      	ble.n	8014004 <netif_add+0x108>
 8013ff6:	4b5d      	ldr	r3, [pc, #372]	@ (801416c <netif_add+0x270>)
 8013ff8:	f240 128d 	movw	r2, #397	@ 0x18d
 8013ffc:	4964      	ldr	r1, [pc, #400]	@ (8014190 <netif_add+0x294>)
 8013ffe:	485d      	ldr	r0, [pc, #372]	@ (8014174 <netif_add+0x278>)
 8014000:	f00c ff68 	bl	8020ed4 <iprintf>
        if (netif2->num == netif->num) {
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014010:	429a      	cmp	r2, r3
 8014012:	d108      	bne.n	8014026 <netif_add+0x12a>
          netif->num++;
 8014014:	68fb      	ldr	r3, [r7, #12]
 8014016:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801401a:	3301      	adds	r3, #1
 801401c:	b2da      	uxtb	r2, r3
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 8014024:	e005      	b.n	8014032 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	617b      	str	r3, [r7, #20]
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d1d0      	bne.n	8013fd4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	2b00      	cmp	r3, #0
 8014036:	d1be      	bne.n	8013fb6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8014038:	68fb      	ldr	r3, [r7, #12]
 801403a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801403e:	2bfe      	cmp	r3, #254	@ 0xfe
 8014040:	d103      	bne.n	801404a <netif_add+0x14e>
    netif_num = 0;
 8014042:	4b50      	ldr	r3, [pc, #320]	@ (8014184 <netif_add+0x288>)
 8014044:	2200      	movs	r2, #0
 8014046:	701a      	strb	r2, [r3, #0]
 8014048:	e006      	b.n	8014058 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801404a:	68fb      	ldr	r3, [r7, #12]
 801404c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8014050:	3301      	adds	r3, #1
 8014052:	b2da      	uxtb	r2, r3
 8014054:	4b4b      	ldr	r3, [pc, #300]	@ (8014184 <netif_add+0x288>)
 8014056:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8014058:	4b4b      	ldr	r3, [pc, #300]	@ (8014188 <netif_add+0x28c>)
 801405a:	681a      	ldr	r2, [r3, #0]
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8014060:	4a49      	ldr	r2, [pc, #292]	@ (8014188 <netif_add+0x28c>)
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801406c:	4619      	mov	r1, r3
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014074:	461a      	mov	r2, r3
 8014076:	4847      	ldr	r0, [pc, #284]	@ (8014194 <netif_add+0x298>)
 8014078:	f00c ff2c 	bl	8020ed4 <iprintf>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 801407c:	4846      	ldr	r0, [pc, #280]	@ (8014198 <netif_add+0x29c>)
 801407e:	f00c ff29 	bl	8020ed4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d003      	beq.n	8014090 <netif_add+0x194>
 8014088:	68bb      	ldr	r3, [r7, #8]
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	4619      	mov	r1, r3
 801408e:	e000      	b.n	8014092 <netif_add+0x196>
 8014090:	2100      	movs	r1, #0
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d004      	beq.n	80140a2 <netif_add+0x1a6>
 8014098:	68bb      	ldr	r3, [r7, #8]
 801409a:	3301      	adds	r3, #1
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	461a      	mov	r2, r3
 80140a0:	e000      	b.n	80140a4 <netif_add+0x1a8>
 80140a2:	2200      	movs	r2, #0
 80140a4:	68bb      	ldr	r3, [r7, #8]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d004      	beq.n	80140b4 <netif_add+0x1b8>
 80140aa:	68bb      	ldr	r3, [r7, #8]
 80140ac:	3302      	adds	r3, #2
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	4618      	mov	r0, r3
 80140b2:	e000      	b.n	80140b6 <netif_add+0x1ba>
 80140b4:	2000      	movs	r0, #0
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d003      	beq.n	80140c4 <netif_add+0x1c8>
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	3303      	adds	r3, #3
 80140c0:	781b      	ldrb	r3, [r3, #0]
 80140c2:	e000      	b.n	80140c6 <netif_add+0x1ca>
 80140c4:	2300      	movs	r3, #0
 80140c6:	9300      	str	r3, [sp, #0]
 80140c8:	4603      	mov	r3, r0
 80140ca:	4834      	ldr	r0, [pc, #208]	@ (801419c <netif_add+0x2a0>)
 80140cc:	f00c ff02 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 80140d0:	4833      	ldr	r0, [pc, #204]	@ (80141a0 <netif_add+0x2a4>)
 80140d2:	f00c feff 	bl	8020ed4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d003      	beq.n	80140e4 <netif_add+0x1e8>
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	4619      	mov	r1, r3
 80140e2:	e000      	b.n	80140e6 <netif_add+0x1ea>
 80140e4:	2100      	movs	r1, #0
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d004      	beq.n	80140f6 <netif_add+0x1fa>
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	3301      	adds	r3, #1
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	461a      	mov	r2, r3
 80140f4:	e000      	b.n	80140f8 <netif_add+0x1fc>
 80140f6:	2200      	movs	r2, #0
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d004      	beq.n	8014108 <netif_add+0x20c>
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	3302      	adds	r3, #2
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	4618      	mov	r0, r3
 8014106:	e000      	b.n	801410a <netif_add+0x20e>
 8014108:	2000      	movs	r0, #0
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	2b00      	cmp	r3, #0
 801410e:	d003      	beq.n	8014118 <netif_add+0x21c>
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	3303      	adds	r3, #3
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	e000      	b.n	801411a <netif_add+0x21e>
 8014118:	2300      	movs	r3, #0
 801411a:	9300      	str	r3, [sp, #0]
 801411c:	4603      	mov	r3, r0
 801411e:	481f      	ldr	r0, [pc, #124]	@ (801419c <netif_add+0x2a0>)
 8014120:	f00c fed8 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 8014124:	481f      	ldr	r0, [pc, #124]	@ (80141a4 <netif_add+0x2a8>)
 8014126:	f00c fed5 	bl	8020ed4 <iprintf>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 801412a:	683b      	ldr	r3, [r7, #0]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d003      	beq.n	8014138 <netif_add+0x23c>
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	781b      	ldrb	r3, [r3, #0]
 8014134:	4619      	mov	r1, r3
 8014136:	e000      	b.n	801413a <netif_add+0x23e>
 8014138:	2100      	movs	r1, #0
 801413a:	683b      	ldr	r3, [r7, #0]
 801413c:	2b00      	cmp	r3, #0
 801413e:	d004      	beq.n	801414a <netif_add+0x24e>
 8014140:	683b      	ldr	r3, [r7, #0]
 8014142:	3301      	adds	r3, #1
 8014144:	781b      	ldrb	r3, [r3, #0]
 8014146:	461a      	mov	r2, r3
 8014148:	e000      	b.n	801414c <netif_add+0x250>
 801414a:	2200      	movs	r2, #0
 801414c:	683b      	ldr	r3, [r7, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d004      	beq.n	801415c <netif_add+0x260>
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	3302      	adds	r3, #2
 8014156:	781b      	ldrb	r3, [r3, #0]
 8014158:	4618      	mov	r0, r3
 801415a:	e000      	b.n	801415e <netif_add+0x262>
 801415c:	2000      	movs	r0, #0
 801415e:	683b      	ldr	r3, [r7, #0]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d021      	beq.n	80141a8 <netif_add+0x2ac>
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	3303      	adds	r3, #3
 8014168:	781b      	ldrb	r3, [r3, #0]
 801416a:	e01e      	b.n	80141aa <netif_add+0x2ae>
 801416c:	08023348 	.word	0x08023348
 8014170:	080233dc 	.word	0x080233dc
 8014174:	08023398 	.word	0x08023398
 8014178:	080233f8 	.word	0x080233f8
 801417c:	08026dbc 	.word	0x08026dbc
 8014180:	08014693 	.word	0x08014693
 8014184:	2002d368 	.word	0x2002d368
 8014188:	2002d360 	.word	0x2002d360
 801418c:	0802341c 	.word	0x0802341c
 8014190:	08023430 	.word	0x08023430
 8014194:	08023460 	.word	0x08023460
 8014198:	08023480 	.word	0x08023480
 801419c:	08023488 	.word	0x08023488
 80141a0:	08023498 	.word	0x08023498
 80141a4:	080234a4 	.word	0x080234a4
 80141a8:	2300      	movs	r3, #0
 80141aa:	9300      	str	r3, [sp, #0]
 80141ac:	4603      	mov	r3, r0
 80141ae:	4805      	ldr	r0, [pc, #20]	@ (80141c4 <netif_add+0x2c8>)
 80141b0:	f00c fe90 	bl	8020ed4 <iprintf>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 80141b4:	200a      	movs	r0, #10
 80141b6:	f00c fe9f 	bl	8020ef8 <putchar>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80141ba:	68fb      	ldr	r3, [r7, #12]
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3718      	adds	r7, #24
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}
 80141c4:	08023488 	.word	0x08023488

080141c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80141d2:	6839      	ldr	r1, [r7, #0]
 80141d4:	6878      	ldr	r0, [r7, #4]
 80141d6:	f003 f933 	bl	8017440 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80141da:	6839      	ldr	r1, [r7, #0]
 80141dc:	6878      	ldr	r0, [r7, #4]
 80141de:	f008 fd81 	bl	801cce4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80141e2:	bf00      	nop
 80141e4:	3708      	adds	r7, #8
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
	...

080141ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80141ec:	b580      	push	{r7, lr}
 80141ee:	b086      	sub	sp, #24
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	60f8      	str	r0, [r7, #12]
 80141f4:	60b9      	str	r1, [r7, #8]
 80141f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d106      	bne.n	801420c <netif_do_set_ipaddr+0x20>
 80141fe:	4b1e      	ldr	r3, [pc, #120]	@ (8014278 <netif_do_set_ipaddr+0x8c>)
 8014200:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8014204:	491d      	ldr	r1, [pc, #116]	@ (801427c <netif_do_set_ipaddr+0x90>)
 8014206:	481e      	ldr	r0, [pc, #120]	@ (8014280 <netif_do_set_ipaddr+0x94>)
 8014208:	f00c fe64 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d106      	bne.n	8014220 <netif_do_set_ipaddr+0x34>
 8014212:	4b19      	ldr	r3, [pc, #100]	@ (8014278 <netif_do_set_ipaddr+0x8c>)
 8014214:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8014218:	4918      	ldr	r1, [pc, #96]	@ (801427c <netif_do_set_ipaddr+0x90>)
 801421a:	4819      	ldr	r0, [pc, #100]	@ (8014280 <netif_do_set_ipaddr+0x94>)
 801421c:	f00c fe5a 	bl	8020ed4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8014220:	68bb      	ldr	r3, [r7, #8]
 8014222:	681a      	ldr	r2, [r3, #0]
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	3304      	adds	r3, #4
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	429a      	cmp	r2, r3
 801422c:	d01f      	beq.n	801426e <netif_do_set_ipaddr+0x82>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	3304      	adds	r3, #4
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 801423e:	4811      	ldr	r0, [pc, #68]	@ (8014284 <netif_do_set_ipaddr+0x98>)
 8014240:	f00c feb8 	bl	8020fb4 <puts>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8014244:	f107 0314 	add.w	r3, r7, #20
 8014248:	4619      	mov	r1, r3
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f7ff ffbc 	bl	80141c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	2b00      	cmp	r3, #0
 8014254:	d002      	beq.n	801425c <netif_do_set_ipaddr+0x70>
 8014256:	68bb      	ldr	r3, [r7, #8]
 8014258:	681b      	ldr	r3, [r3, #0]
 801425a:	e000      	b.n	801425e <netif_do_set_ipaddr+0x72>
 801425c:	2300      	movs	r3, #0
 801425e:	68fa      	ldr	r2, [r7, #12]
 8014260:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8014262:	2101      	movs	r1, #1
 8014264:	68f8      	ldr	r0, [r7, #12]
 8014266:	f000 f92d 	bl	80144c4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801426a:	2301      	movs	r3, #1
 801426c:	e000      	b.n	8014270 <netif_do_set_ipaddr+0x84>
  }
  return 0; /* address unchanged */
 801426e:	2300      	movs	r3, #0
}
 8014270:	4618      	mov	r0, r3
 8014272:	3718      	adds	r7, #24
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}
 8014278:	08023348 	.word	0x08023348
 801427c:	080234ac 	.word	0x080234ac
 8014280:	08023398 	.word	0x08023398
 8014284:	080234bc 	.word	0x080234bc

08014288 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8014288:	b5b0      	push	{r4, r5, r7, lr}
 801428a:	b088      	sub	sp, #32
 801428c:	af04      	add	r7, sp, #16
 801428e:	60f8      	str	r0, [r7, #12]
 8014290:	60b9      	str	r1, [r7, #8]
 8014292:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	681a      	ldr	r2, [r3, #0]
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	3308      	adds	r3, #8
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	429a      	cmp	r2, r3
 80142a0:	d02d      	beq.n	80142fe <netif_do_set_netmask+0x76>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80142a2:	68bb      	ldr	r3, [r7, #8]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d002      	beq.n	80142ae <netif_do_set_netmask+0x26>
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	e000      	b.n	80142b0 <netif_do_set_netmask+0x28>
 80142ae:	2300      	movs	r3, #0
 80142b0:	68fa      	ldr	r2, [r7, #12]
 80142b2:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 80142ba:	4618      	mov	r0, r3
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80142c2:	461c      	mov	r4, r3
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	3308      	adds	r3, #8
 80142c8:	781b      	ldrb	r3, [r3, #0]
 80142ca:	461d      	mov	r5, r3
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	3308      	adds	r3, #8
 80142d0:	3301      	adds	r3, #1
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	461a      	mov	r2, r3
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	3308      	adds	r3, #8
 80142da:	3302      	adds	r3, #2
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	4619      	mov	r1, r3
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	3308      	adds	r3, #8
 80142e4:	3303      	adds	r3, #3
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	9302      	str	r3, [sp, #8]
 80142ea:	9101      	str	r1, [sp, #4]
 80142ec:	9200      	str	r2, [sp, #0]
 80142ee:	462b      	mov	r3, r5
 80142f0:	4622      	mov	r2, r4
 80142f2:	4601      	mov	r1, r0
 80142f4:	4804      	ldr	r0, [pc, #16]	@ (8014308 <netif_do_set_netmask+0x80>)
 80142f6:	f00c fded 	bl	8020ed4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80142fa:	2301      	movs	r3, #1
 80142fc:	e000      	b.n	8014300 <netif_do_set_netmask+0x78>
  }
  return 0; /* netmask unchanged */
 80142fe:	2300      	movs	r3, #0
}
 8014300:	4618      	mov	r0, r3
 8014302:	3710      	adds	r7, #16
 8014304:	46bd      	mov	sp, r7
 8014306:	bdb0      	pop	{r4, r5, r7, pc}
 8014308:	0802350c 	.word	0x0802350c

0801430c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801430c:	b5b0      	push	{r4, r5, r7, lr}
 801430e:	b088      	sub	sp, #32
 8014310:	af04      	add	r7, sp, #16
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	681a      	ldr	r2, [r3, #0]
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	330c      	adds	r3, #12
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	429a      	cmp	r2, r3
 8014324:	d02d      	beq.n	8014382 <netif_do_set_gw+0x76>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	2b00      	cmp	r3, #0
 801432a:	d002      	beq.n	8014332 <netif_do_set_gw+0x26>
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	e000      	b.n	8014334 <netif_do_set_gw+0x28>
 8014332:	2300      	movs	r3, #0
 8014334:	68fa      	ldr	r2, [r7, #12]
 8014336:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801433e:	4618      	mov	r0, r3
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014346:	461c      	mov	r4, r3
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	330c      	adds	r3, #12
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	461d      	mov	r5, r3
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	330c      	adds	r3, #12
 8014354:	3301      	adds	r3, #1
 8014356:	781b      	ldrb	r3, [r3, #0]
 8014358:	461a      	mov	r2, r3
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	330c      	adds	r3, #12
 801435e:	3302      	adds	r3, #2
 8014360:	781b      	ldrb	r3, [r3, #0]
 8014362:	4619      	mov	r1, r3
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	330c      	adds	r3, #12
 8014368:	3303      	adds	r3, #3
 801436a:	781b      	ldrb	r3, [r3, #0]
 801436c:	9302      	str	r3, [sp, #8]
 801436e:	9101      	str	r1, [sp, #4]
 8014370:	9200      	str	r2, [sp, #0]
 8014372:	462b      	mov	r3, r5
 8014374:	4622      	mov	r2, r4
 8014376:	4601      	mov	r1, r0
 8014378:	4804      	ldr	r0, [pc, #16]	@ (801438c <netif_do_set_gw+0x80>)
 801437a:	f00c fdab 	bl	8020ed4 <iprintf>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801437e:	2301      	movs	r3, #1
 8014380:	e000      	b.n	8014384 <netif_do_set_gw+0x78>
  }
  return 0; /* gateway unchanged */
 8014382:	2300      	movs	r3, #0
}
 8014384:	4618      	mov	r0, r3
 8014386:	3710      	adds	r7, #16
 8014388:	46bd      	mov	sp, r7
 801438a:	bdb0      	pop	{r4, r5, r7, pc}
 801438c:	0802356c 	.word	0x0802356c

08014390 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	b088      	sub	sp, #32
 8014394:	af00      	add	r7, sp, #0
 8014396:	60f8      	str	r0, [r7, #12]
 8014398:	60b9      	str	r1, [r7, #8]
 801439a:	607a      	str	r2, [r7, #4]
 801439c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801439e:	2300      	movs	r3, #0
 80143a0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80143a2:	2300      	movs	r3, #0
 80143a4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d101      	bne.n	80143b0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80143ac:	4b1c      	ldr	r3, [pc, #112]	@ (8014420 <netif_set_addr+0x90>)
 80143ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d101      	bne.n	80143ba <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80143b6:	4b1a      	ldr	r3, [pc, #104]	@ (8014420 <netif_set_addr+0x90>)
 80143b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d101      	bne.n	80143c4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80143c0:	4b17      	ldr	r3, [pc, #92]	@ (8014420 <netif_set_addr+0x90>)
 80143c2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80143c4:	68bb      	ldr	r3, [r7, #8]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d003      	beq.n	80143d2 <netif_set_addr+0x42>
 80143ca:	68bb      	ldr	r3, [r7, #8]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d101      	bne.n	80143d6 <netif_set_addr+0x46>
 80143d2:	2301      	movs	r3, #1
 80143d4:	e000      	b.n	80143d8 <netif_set_addr+0x48>
 80143d6:	2300      	movs	r3, #0
 80143d8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80143da:	697b      	ldr	r3, [r7, #20]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d006      	beq.n	80143ee <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80143e0:	f107 0310 	add.w	r3, r7, #16
 80143e4:	461a      	mov	r2, r3
 80143e6:	68b9      	ldr	r1, [r7, #8]
 80143e8:	68f8      	ldr	r0, [r7, #12]
 80143ea:	f7ff feff 	bl	80141ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80143ee:	69fa      	ldr	r2, [r7, #28]
 80143f0:	6879      	ldr	r1, [r7, #4]
 80143f2:	68f8      	ldr	r0, [r7, #12]
 80143f4:	f7ff ff48 	bl	8014288 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80143f8:	69ba      	ldr	r2, [r7, #24]
 80143fa:	6839      	ldr	r1, [r7, #0]
 80143fc:	68f8      	ldr	r0, [r7, #12]
 80143fe:	f7ff ff85 	bl	801430c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d106      	bne.n	8014416 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8014408:	f107 0310 	add.w	r3, r7, #16
 801440c:	461a      	mov	r2, r3
 801440e:	68b9      	ldr	r1, [r7, #8]
 8014410:	68f8      	ldr	r0, [r7, #12]
 8014412:	f7ff feeb 	bl	80141ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8014416:	bf00      	nop
 8014418:	3720      	adds	r7, #32
 801441a:	46bd      	mov	sp, r7
 801441c:	bd80      	pop	{r7, pc}
 801441e:	bf00      	nop
 8014420:	08026dbc 	.word	0x08026dbc

08014424 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b082      	sub	sp, #8
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801442c:	4a0d      	ldr	r2, [pc, #52]	@ (8014464 <netif_set_default+0x40>)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	2b00      	cmp	r3, #0
 8014436:	d004      	beq.n	8014442 <netif_set_default+0x1e>
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 801443e:	4619      	mov	r1, r3
 8014440:	e000      	b.n	8014444 <netif_set_default+0x20>
 8014442:	2127      	movs	r1, #39	@ 0x27
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	2b00      	cmp	r3, #0
 8014448:	d003      	beq.n	8014452 <netif_set_default+0x2e>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8014450:	e000      	b.n	8014454 <netif_set_default+0x30>
 8014452:	2327      	movs	r3, #39	@ 0x27
 8014454:	461a      	mov	r2, r3
 8014456:	4804      	ldr	r0, [pc, #16]	@ (8014468 <netif_set_default+0x44>)
 8014458:	f00c fd3c 	bl	8020ed4 <iprintf>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801445c:	bf00      	nop
 801445e:	3708      	adds	r7, #8
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}
 8014464:	2002d364 	.word	0x2002d364
 8014468:	080235e0 	.word	0x080235e0

0801446c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b082      	sub	sp, #8
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d107      	bne.n	801448a <netif_set_up+0x1e>
 801447a:	4b0f      	ldr	r3, [pc, #60]	@ (80144b8 <netif_set_up+0x4c>)
 801447c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8014480:	490e      	ldr	r1, [pc, #56]	@ (80144bc <netif_set_up+0x50>)
 8014482:	480f      	ldr	r0, [pc, #60]	@ (80144c0 <netif_set_up+0x54>)
 8014484:	f00c fd26 	bl	8020ed4 <iprintf>
 8014488:	e013      	b.n	80144b2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014490:	f003 0301 	and.w	r3, r3, #1
 8014494:	2b00      	cmp	r3, #0
 8014496:	d10c      	bne.n	80144b2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801449e:	f043 0301 	orr.w	r3, r3, #1
 80144a2:	b2da      	uxtb	r2, r3
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80144aa:	2103      	movs	r1, #3
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f000 f809 	bl	80144c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	08023348 	.word	0x08023348
 80144bc:	08023608 	.word	0x08023608
 80144c0:	08023398 	.word	0x08023398

080144c4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b082      	sub	sp, #8
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	460b      	mov	r3, r1
 80144ce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d106      	bne.n	80144e4 <netif_issue_reports+0x20>
 80144d6:	4b18      	ldr	r3, [pc, #96]	@ (8014538 <netif_issue_reports+0x74>)
 80144d8:	f240 326d 	movw	r2, #877	@ 0x36d
 80144dc:	4917      	ldr	r1, [pc, #92]	@ (801453c <netif_issue_reports+0x78>)
 80144de:	4818      	ldr	r0, [pc, #96]	@ (8014540 <netif_issue_reports+0x7c>)
 80144e0:	f00c fcf8 	bl	8020ed4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144ea:	f003 0304 	and.w	r3, r3, #4
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d01e      	beq.n	8014530 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80144f8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d017      	beq.n	8014530 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014500:	78fb      	ldrb	r3, [r7, #3]
 8014502:	f003 0301 	and.w	r3, r3, #1
 8014506:	2b00      	cmp	r3, #0
 8014508:	d013      	beq.n	8014532 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	3304      	adds	r3, #4
 801450e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8014510:	2b00      	cmp	r3, #0
 8014512:	d00e      	beq.n	8014532 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801451a:	f003 0308 	and.w	r3, r3, #8
 801451e:	2b00      	cmp	r3, #0
 8014520:	d007      	beq.n	8014532 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	3304      	adds	r3, #4
 8014526:	4619      	mov	r1, r3
 8014528:	6878      	ldr	r0, [r7, #4]
 801452a:	f009 fbf7 	bl	801dd1c <etharp_request>
 801452e:	e000      	b.n	8014532 <netif_issue_reports+0x6e>
    return;
 8014530:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8014532:	3708      	adds	r7, #8
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	08023348 	.word	0x08023348
 801453c:	08023624 	.word	0x08023624
 8014540:	08023398 	.word	0x08023398

08014544 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b082      	sub	sp, #8
 8014548:	af00      	add	r7, sp, #0
 801454a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d107      	bne.n	8014562 <netif_set_down+0x1e>
 8014552:	4b12      	ldr	r3, [pc, #72]	@ (801459c <netif_set_down+0x58>)
 8014554:	f240 329b 	movw	r2, #923	@ 0x39b
 8014558:	4911      	ldr	r1, [pc, #68]	@ (80145a0 <netif_set_down+0x5c>)
 801455a:	4812      	ldr	r0, [pc, #72]	@ (80145a4 <netif_set_down+0x60>)
 801455c:	f00c fcba 	bl	8020ed4 <iprintf>
 8014560:	e019      	b.n	8014596 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014568:	f003 0301 	and.w	r3, r3, #1
 801456c:	2b00      	cmp	r3, #0
 801456e:	d012      	beq.n	8014596 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014576:	f023 0301 	bic.w	r3, r3, #1
 801457a:	b2da      	uxtb	r2, r3
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014588:	f003 0308 	and.w	r3, r3, #8
 801458c:	2b00      	cmp	r3, #0
 801458e:	d002      	beq.n	8014596 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f008 ff41 	bl	801d418 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8014596:	3708      	adds	r7, #8
 8014598:	46bd      	mov	sp, r7
 801459a:	bd80      	pop	{r7, pc}
 801459c:	08023348 	.word	0x08023348
 80145a0:	08023648 	.word	0x08023648
 80145a4:	08023398 	.word	0x08023398

080145a8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d107      	bne.n	80145c6 <netif_set_link_up+0x1e>
 80145b6:	4b13      	ldr	r3, [pc, #76]	@ (8014604 <netif_set_link_up+0x5c>)
 80145b8:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80145bc:	4912      	ldr	r1, [pc, #72]	@ (8014608 <netif_set_link_up+0x60>)
 80145be:	4813      	ldr	r0, [pc, #76]	@ (801460c <netif_set_link_up+0x64>)
 80145c0:	f00c fc88 	bl	8020ed4 <iprintf>
 80145c4:	e01b      	b.n	80145fe <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145cc:	f003 0304 	and.w	r3, r3, #4
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d114      	bne.n	80145fe <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80145da:	f043 0304 	orr.w	r3, r3, #4
 80145de:	b2da      	uxtb	r2, r3
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80145e6:	2103      	movs	r1, #3
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f7ff ff6b 	bl	80144c4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	69db      	ldr	r3, [r3, #28]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d003      	beq.n	80145fe <netif_set_link_up+0x56>
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	69db      	ldr	r3, [r3, #28]
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80145fe:	3708      	adds	r7, #8
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}
 8014604:	08023348 	.word	0x08023348
 8014608:	08023668 	.word	0x08023668
 801460c:	08023398 	.word	0x08023398

08014610 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b082      	sub	sp, #8
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d107      	bne.n	801462e <netif_set_link_down+0x1e>
 801461e:	4b11      	ldr	r3, [pc, #68]	@ (8014664 <netif_set_link_down+0x54>)
 8014620:	f240 4206 	movw	r2, #1030	@ 0x406
 8014624:	4910      	ldr	r1, [pc, #64]	@ (8014668 <netif_set_link_down+0x58>)
 8014626:	4811      	ldr	r0, [pc, #68]	@ (801466c <netif_set_link_down+0x5c>)
 8014628:	f00c fc54 	bl	8020ed4 <iprintf>
 801462c:	e017      	b.n	801465e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014634:	f003 0304 	and.w	r3, r3, #4
 8014638:	2b00      	cmp	r3, #0
 801463a:	d010      	beq.n	801465e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8014642:	f023 0304 	bic.w	r3, r3, #4
 8014646:	b2da      	uxtb	r2, r3
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	69db      	ldr	r3, [r3, #28]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d003      	beq.n	801465e <netif_set_link_down+0x4e>
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	69db      	ldr	r3, [r3, #28]
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801465e:	3708      	adds	r7, #8
 8014660:	46bd      	mov	sp, r7
 8014662:	bd80      	pop	{r7, pc}
 8014664:	08023348 	.word	0x08023348
 8014668:	0802368c 	.word	0x0802368c
 801466c:	08023398 	.word	0x08023398

08014670 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8014670:	b480      	push	{r7}
 8014672:	b083      	sub	sp, #12
 8014674:	af00      	add	r7, sp, #0
 8014676:	6078      	str	r0, [r7, #4]
 8014678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d002      	beq.n	8014686 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	683a      	ldr	r2, [r7, #0]
 8014684:	61da      	str	r2, [r3, #28]
  }
}
 8014686:	bf00      	nop
 8014688:	370c      	adds	r7, #12
 801468a:	46bd      	mov	sp, r7
 801468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014690:	4770      	bx	lr

08014692 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8014692:	b480      	push	{r7}
 8014694:	b085      	sub	sp, #20
 8014696:	af00      	add	r7, sp, #0
 8014698:	60f8      	str	r0, [r7, #12]
 801469a:	60b9      	str	r1, [r7, #8]
 801469c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801469e:	f06f 030b 	mvn.w	r3, #11
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3714      	adds	r7, #20
 80146a6:	46bd      	mov	sp, r7
 80146a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ac:	4770      	bx	lr
	...

080146b0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b085      	sub	sp, #20
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	4603      	mov	r3, r0
 80146b8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80146ba:	79fb      	ldrb	r3, [r7, #7]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d013      	beq.n	80146e8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80146c0:	4b0d      	ldr	r3, [pc, #52]	@ (80146f8 <netif_get_by_index+0x48>)
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	60fb      	str	r3, [r7, #12]
 80146c6:	e00c      	b.n	80146e2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80146ce:	3301      	adds	r3, #1
 80146d0:	b2db      	uxtb	r3, r3
 80146d2:	79fa      	ldrb	r2, [r7, #7]
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d101      	bne.n	80146dc <netif_get_by_index+0x2c>
        return netif; /* found! */
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	e006      	b.n	80146ea <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	60fb      	str	r3, [r7, #12]
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d1ef      	bne.n	80146c8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80146e8:	2300      	movs	r3, #0
}
 80146ea:	4618      	mov	r0, r3
 80146ec:	3714      	adds	r7, #20
 80146ee:	46bd      	mov	sp, r7
 80146f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146f4:	4770      	bx	lr
 80146f6:	bf00      	nop
 80146f8:	2002d360 	.word	0x2002d360

080146fc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80146fc:	b580      	push	{r7, lr}
 80146fe:	b082      	sub	sp, #8
 8014700:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8014702:	f00b fa4f 	bl	801fba4 <sys_arch_protect>
 8014706:	6038      	str	r0, [r7, #0]
 8014708:	4b0e      	ldr	r3, [pc, #56]	@ (8014744 <pbuf_free_ooseq+0x48>)
 801470a:	2200      	movs	r2, #0
 801470c:	701a      	strb	r2, [r3, #0]
 801470e:	6838      	ldr	r0, [r7, #0]
 8014710:	f00b fa56 	bl	801fbc0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014714:	4b0c      	ldr	r3, [pc, #48]	@ (8014748 <pbuf_free_ooseq+0x4c>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	607b      	str	r3, [r7, #4]
 801471a:	e00d      	b.n	8014738 <pbuf_free_ooseq+0x3c>
    if (pcb->ooseq != NULL) {
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014720:	2b00      	cmp	r3, #0
 8014722:	d006      	beq.n	8014732 <pbuf_free_ooseq+0x36>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 8014724:	4809      	ldr	r0, [pc, #36]	@ (801474c <pbuf_free_ooseq+0x50>)
 8014726:	f00c fc45 	bl	8020fb4 <puts>
      tcp_free_ooseq(pcb);
 801472a:	6878      	ldr	r0, [r7, #4]
 801472c:	f002 fec6 	bl	80174bc <tcp_free_ooseq>
      return;
 8014730:	e005      	b.n	801473e <pbuf_free_ooseq+0x42>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	68db      	ldr	r3, [r3, #12]
 8014736:	607b      	str	r3, [r7, #4]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d1ee      	bne.n	801471c <pbuf_free_ooseq+0x20>
    }
  }
}
 801473e:	3708      	adds	r7, #8
 8014740:	46bd      	mov	sp, r7
 8014742:	bd80      	pop	{r7, pc}
 8014744:	2002d369 	.word	0x2002d369
 8014748:	2002d478 	.word	0x2002d478
 801474c:	080236e8 	.word	0x080236e8

08014750 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8014750:	b580      	push	{r7, lr}
 8014752:	b082      	sub	sp, #8
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8014758:	f7ff ffd0 	bl	80146fc <pbuf_free_ooseq>
}
 801475c:	bf00      	nop
 801475e:	3708      	adds	r7, #8
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}

08014764 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8014764:	b580      	push	{r7, lr}
 8014766:	b082      	sub	sp, #8
 8014768:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801476a:	f00b fa1b 	bl	801fba4 <sys_arch_protect>
 801476e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8014770:	4b0f      	ldr	r3, [pc, #60]	@ (80147b0 <pbuf_pool_is_empty+0x4c>)
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8014776:	4b0e      	ldr	r3, [pc, #56]	@ (80147b0 <pbuf_pool_is_empty+0x4c>)
 8014778:	2201      	movs	r2, #1
 801477a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f00b fa1f 	bl	801fbc0 <sys_arch_unprotect>

  if (!queued) {
 8014782:	78fb      	ldrb	r3, [r7, #3]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d10f      	bne.n	80147a8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8014788:	2100      	movs	r1, #0
 801478a:	480a      	ldr	r0, [pc, #40]	@ (80147b4 <pbuf_pool_is_empty+0x50>)
 801478c:	f7fe fc9c 	bl	80130c8 <tcpip_try_callback>
 8014790:	4603      	mov	r3, r0
 8014792:	2b00      	cmp	r3, #0
 8014794:	d008      	beq.n	80147a8 <pbuf_pool_is_empty+0x44>
 8014796:	f00b fa05 	bl	801fba4 <sys_arch_protect>
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	4b04      	ldr	r3, [pc, #16]	@ (80147b0 <pbuf_pool_is_empty+0x4c>)
 801479e:	2200      	movs	r2, #0
 80147a0:	701a      	strb	r2, [r3, #0]
 80147a2:	6878      	ldr	r0, [r7, #4]
 80147a4:	f00b fa0c 	bl	801fbc0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80147a8:	bf00      	nop
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	2002d369 	.word	0x2002d369
 80147b4:	08014751 	.word	0x08014751

080147b8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80147b8:	b480      	push	{r7}
 80147ba:	b085      	sub	sp, #20
 80147bc:	af00      	add	r7, sp, #0
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	60b9      	str	r1, [r7, #8]
 80147c2:	4611      	mov	r1, r2
 80147c4:	461a      	mov	r2, r3
 80147c6:	460b      	mov	r3, r1
 80147c8:	80fb      	strh	r3, [r7, #6]
 80147ca:	4613      	mov	r3, r2
 80147cc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	2200      	movs	r2, #0
 80147d2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	68ba      	ldr	r2, [r7, #8]
 80147d8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80147da:	68fb      	ldr	r3, [r7, #12]
 80147dc:	88fa      	ldrh	r2, [r7, #6]
 80147de:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	88ba      	ldrh	r2, [r7, #4]
 80147e4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80147e6:	8b3b      	ldrh	r3, [r7, #24]
 80147e8:	b2da      	uxtb	r2, r3
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80147ee:	68fb      	ldr	r3, [r7, #12]
 80147f0:	7f3a      	ldrb	r2, [r7, #28]
 80147f2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2201      	movs	r2, #1
 80147f8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	2200      	movs	r2, #0
 80147fe:	73da      	strb	r2, [r3, #15]
}
 8014800:	bf00      	nop
 8014802:	3714      	adds	r7, #20
 8014804:	46bd      	mov	sp, r7
 8014806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480a:	4770      	bx	lr

0801480c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801480c:	b580      	push	{r7, lr}
 801480e:	b08c      	sub	sp, #48	@ 0x30
 8014810:	af02      	add	r7, sp, #8
 8014812:	4603      	mov	r3, r0
 8014814:	71fb      	strb	r3, [r7, #7]
 8014816:	460b      	mov	r3, r1
 8014818:	80bb      	strh	r3, [r7, #4]
 801481a:	4613      	mov	r3, r2
 801481c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801481e:	79fb      	ldrb	r3, [r7, #7]
 8014820:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 8014822:	88bb      	ldrh	r3, [r7, #4]
 8014824:	4619      	mov	r1, r3
 8014826:	4874      	ldr	r0, [pc, #464]	@ (80149f8 <pbuf_alloc+0x1ec>)
 8014828:	f00c fb54 	bl	8020ed4 <iprintf>

  switch (type) {
 801482c:	887b      	ldrh	r3, [r7, #2]
 801482e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014832:	d07f      	beq.n	8014934 <pbuf_alloc+0x128>
 8014834:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8014838:	f300 80c8 	bgt.w	80149cc <pbuf_alloc+0x1c0>
 801483c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014840:	d010      	beq.n	8014864 <pbuf_alloc+0x58>
 8014842:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8014846:	f300 80c1 	bgt.w	80149cc <pbuf_alloc+0x1c0>
 801484a:	2b01      	cmp	r3, #1
 801484c:	d002      	beq.n	8014854 <pbuf_alloc+0x48>
 801484e:	2b41      	cmp	r3, #65	@ 0x41
 8014850:	f040 80bc 	bne.w	80149cc <pbuf_alloc+0x1c0>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8014854:	887a      	ldrh	r2, [r7, #2]
 8014856:	88bb      	ldrh	r3, [r7, #4]
 8014858:	4619      	mov	r1, r3
 801485a:	2000      	movs	r0, #0
 801485c:	f000 f8dc 	bl	8014a18 <pbuf_alloc_reference>
 8014860:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8014862:	e0bd      	b.n	80149e0 <pbuf_alloc+0x1d4>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8014864:	2300      	movs	r3, #0
 8014866:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8014868:	2300      	movs	r3, #0
 801486a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801486c:	88bb      	ldrh	r3, [r7, #4]
 801486e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014870:	200c      	movs	r0, #12
 8014872:	f7ff fa95 	bl	8013da0 <memp_malloc>
 8014876:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d109      	bne.n	8014892 <pbuf_alloc+0x86>
          PBUF_POOL_IS_EMPTY();
 801487e:	f7ff ff71 	bl	8014764 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014884:	2b00      	cmp	r3, #0
 8014886:	d002      	beq.n	801488e <pbuf_alloc+0x82>
            pbuf_free(p);
 8014888:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801488a:	f000 faeb 	bl	8014e64 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801488e:	2300      	movs	r3, #0
 8014890:	e0ad      	b.n	80149ee <pbuf_alloc+0x1e2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014892:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014894:	3303      	adds	r3, #3
 8014896:	b29b      	uxth	r3, r3
 8014898:	f023 0303 	bic.w	r3, r3, #3
 801489c:	b29b      	uxth	r3, r3
 801489e:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	8b7a      	ldrh	r2, [r7, #26]
 80148a6:	4293      	cmp	r3, r2
 80148a8:	bf28      	it	cs
 80148aa:	4613      	movcs	r3, r2
 80148ac:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80148ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148b0:	3310      	adds	r3, #16
 80148b2:	693a      	ldr	r2, [r7, #16]
 80148b4:	4413      	add	r3, r2
 80148b6:	3303      	adds	r3, #3
 80148b8:	f023 0303 	bic.w	r3, r3, #3
 80148bc:	4618      	mov	r0, r3
 80148be:	89f9      	ldrh	r1, [r7, #14]
 80148c0:	8b7a      	ldrh	r2, [r7, #26]
 80148c2:	2300      	movs	r3, #0
 80148c4:	9301      	str	r3, [sp, #4]
 80148c6:	887b      	ldrh	r3, [r7, #2]
 80148c8:	9300      	str	r3, [sp, #0]
 80148ca:	460b      	mov	r3, r1
 80148cc:	4601      	mov	r1, r0
 80148ce:	6938      	ldr	r0, [r7, #16]
 80148d0:	f7ff ff72 	bl	80147b8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80148d4:	693b      	ldr	r3, [r7, #16]
 80148d6:	685b      	ldr	r3, [r3, #4]
 80148d8:	f003 0303 	and.w	r3, r3, #3
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d006      	beq.n	80148ee <pbuf_alloc+0xe2>
 80148e0:	4b46      	ldr	r3, [pc, #280]	@ (80149fc <pbuf_alloc+0x1f0>)
 80148e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80148e6:	4946      	ldr	r1, [pc, #280]	@ (8014a00 <pbuf_alloc+0x1f4>)
 80148e8:	4846      	ldr	r0, [pc, #280]	@ (8014a04 <pbuf_alloc+0x1f8>)
 80148ea:	f00c faf3 	bl	8020ed4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80148ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80148f0:	3303      	adds	r3, #3
 80148f2:	f023 0303 	bic.w	r3, r3, #3
 80148f6:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80148fa:	d106      	bne.n	801490a <pbuf_alloc+0xfe>
 80148fc:	4b3f      	ldr	r3, [pc, #252]	@ (80149fc <pbuf_alloc+0x1f0>)
 80148fe:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8014902:	4941      	ldr	r1, [pc, #260]	@ (8014a08 <pbuf_alloc+0x1fc>)
 8014904:	483f      	ldr	r0, [pc, #252]	@ (8014a04 <pbuf_alloc+0x1f8>)
 8014906:	f00c fae5 	bl	8020ed4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801490c:	2b00      	cmp	r3, #0
 801490e:	d102      	bne.n	8014916 <pbuf_alloc+0x10a>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	627b      	str	r3, [r7, #36]	@ 0x24
 8014914:	e002      	b.n	801491c <pbuf_alloc+0x110>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8014916:	69fb      	ldr	r3, [r7, #28]
 8014918:	693a      	ldr	r2, [r7, #16]
 801491a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801491c:	693b      	ldr	r3, [r7, #16]
 801491e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014920:	8b7a      	ldrh	r2, [r7, #26]
 8014922:	89fb      	ldrh	r3, [r7, #14]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8014928:	2300      	movs	r3, #0
 801492a:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 801492c:	8b7b      	ldrh	r3, [r7, #26]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d19e      	bne.n	8014870 <pbuf_alloc+0x64>
      break;
 8014932:	e055      	b.n	80149e0 <pbuf_alloc+0x1d4>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8014934:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8014936:	3303      	adds	r3, #3
 8014938:	b29b      	uxth	r3, r3
 801493a:	f023 0303 	bic.w	r3, r3, #3
 801493e:	b29a      	uxth	r2, r3
 8014940:	88bb      	ldrh	r3, [r7, #4]
 8014942:	3303      	adds	r3, #3
 8014944:	b29b      	uxth	r3, r3
 8014946:	f023 0303 	bic.w	r3, r3, #3
 801494a:	b29b      	uxth	r3, r3
 801494c:	4413      	add	r3, r2
 801494e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014950:	8b3b      	ldrh	r3, [r7, #24]
 8014952:	3310      	adds	r3, #16
 8014954:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014956:	8b3a      	ldrh	r2, [r7, #24]
 8014958:	88bb      	ldrh	r3, [r7, #4]
 801495a:	3303      	adds	r3, #3
 801495c:	f023 0303 	bic.w	r3, r3, #3
 8014960:	429a      	cmp	r2, r3
 8014962:	d306      	bcc.n	8014972 <pbuf_alloc+0x166>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8014964:	8afa      	ldrh	r2, [r7, #22]
 8014966:	88bb      	ldrh	r3, [r7, #4]
 8014968:	3303      	adds	r3, #3
 801496a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801496e:	429a      	cmp	r2, r3
 8014970:	d201      	bcs.n	8014976 <pbuf_alloc+0x16a>
        return NULL;
 8014972:	2300      	movs	r3, #0
 8014974:	e03b      	b.n	80149ee <pbuf_alloc+0x1e2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8014976:	8afb      	ldrh	r3, [r7, #22]
 8014978:	4618      	mov	r0, r3
 801497a:	f7fe ffed 	bl	8013958 <mem_malloc>
 801497e:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8014980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014982:	2b00      	cmp	r3, #0
 8014984:	d101      	bne.n	801498a <pbuf_alloc+0x17e>
        return NULL;
 8014986:	2300      	movs	r3, #0
 8014988:	e031      	b.n	80149ee <pbuf_alloc+0x1e2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801498a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801498c:	3310      	adds	r3, #16
 801498e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014990:	4413      	add	r3, r2
 8014992:	3303      	adds	r3, #3
 8014994:	f023 0303 	bic.w	r3, r3, #3
 8014998:	4618      	mov	r0, r3
 801499a:	88b9      	ldrh	r1, [r7, #4]
 801499c:	88ba      	ldrh	r2, [r7, #4]
 801499e:	2300      	movs	r3, #0
 80149a0:	9301      	str	r3, [sp, #4]
 80149a2:	887b      	ldrh	r3, [r7, #2]
 80149a4:	9300      	str	r3, [sp, #0]
 80149a6:	460b      	mov	r3, r1
 80149a8:	4601      	mov	r1, r0
 80149aa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80149ac:	f7ff ff04 	bl	80147b8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80149b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149b2:	685b      	ldr	r3, [r3, #4]
 80149b4:	f003 0303 	and.w	r3, r3, #3
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d010      	beq.n	80149de <pbuf_alloc+0x1d2>
 80149bc:	4b0f      	ldr	r3, [pc, #60]	@ (80149fc <pbuf_alloc+0x1f0>)
 80149be:	f44f 7291 	mov.w	r2, #290	@ 0x122
 80149c2:	4912      	ldr	r1, [pc, #72]	@ (8014a0c <pbuf_alloc+0x200>)
 80149c4:	480f      	ldr	r0, [pc, #60]	@ (8014a04 <pbuf_alloc+0x1f8>)
 80149c6:	f00c fa85 	bl	8020ed4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80149ca:	e008      	b.n	80149de <pbuf_alloc+0x1d2>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80149cc:	4b0b      	ldr	r3, [pc, #44]	@ (80149fc <pbuf_alloc+0x1f0>)
 80149ce:	f240 1227 	movw	r2, #295	@ 0x127
 80149d2:	490f      	ldr	r1, [pc, #60]	@ (8014a10 <pbuf_alloc+0x204>)
 80149d4:	480b      	ldr	r0, [pc, #44]	@ (8014a04 <pbuf_alloc+0x1f8>)
 80149d6:	f00c fa7d 	bl	8020ed4 <iprintf>
      return NULL;
 80149da:	2300      	movs	r3, #0
 80149dc:	e007      	b.n	80149ee <pbuf_alloc+0x1e2>
      break;
 80149de:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 80149e0:	88bb      	ldrh	r3, [r7, #4]
 80149e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80149e4:	4619      	mov	r1, r3
 80149e6:	480b      	ldr	r0, [pc, #44]	@ (8014a14 <pbuf_alloc+0x208>)
 80149e8:	f00c fa74 	bl	8020ed4 <iprintf>
  return p;
 80149ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3728      	adds	r7, #40	@ 0x28
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}
 80149f6:	bf00      	nop
 80149f8:	08023718 	.word	0x08023718
 80149fc:	08023730 	.word	0x08023730
 8014a00:	08023760 	.word	0x08023760
 8014a04:	08023790 	.word	0x08023790
 8014a08:	080237b8 	.word	0x080237b8
 8014a0c:	080237ec 	.word	0x080237ec
 8014a10:	08023818 	.word	0x08023818
 8014a14:	08023834 	.word	0x08023834

08014a18 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b086      	sub	sp, #24
 8014a1c:	af02      	add	r7, sp, #8
 8014a1e:	6078      	str	r0, [r7, #4]
 8014a20:	460b      	mov	r3, r1
 8014a22:	807b      	strh	r3, [r7, #2]
 8014a24:	4613      	mov	r3, r2
 8014a26:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014a28:	883b      	ldrh	r3, [r7, #0]
 8014a2a:	2b41      	cmp	r3, #65	@ 0x41
 8014a2c:	d009      	beq.n	8014a42 <pbuf_alloc_reference+0x2a>
 8014a2e:	883b      	ldrh	r3, [r7, #0]
 8014a30:	2b01      	cmp	r3, #1
 8014a32:	d006      	beq.n	8014a42 <pbuf_alloc_reference+0x2a>
 8014a34:	4b14      	ldr	r3, [pc, #80]	@ (8014a88 <pbuf_alloc_reference+0x70>)
 8014a36:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8014a3a:	4914      	ldr	r1, [pc, #80]	@ (8014a8c <pbuf_alloc_reference+0x74>)
 8014a3c:	4814      	ldr	r0, [pc, #80]	@ (8014a90 <pbuf_alloc_reference+0x78>)
 8014a3e:	f00c fa49 	bl	8020ed4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014a42:	200b      	movs	r0, #11
 8014a44:	f7ff f9ac 	bl	8013da0 <memp_malloc>
 8014a48:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d10b      	bne.n	8014a68 <pbuf_alloc_reference+0x50>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8014a50:	883b      	ldrh	r3, [r7, #0]
 8014a52:	2b01      	cmp	r3, #1
 8014a54:	d101      	bne.n	8014a5a <pbuf_alloc_reference+0x42>
 8014a56:	4b0f      	ldr	r3, [pc, #60]	@ (8014a94 <pbuf_alloc_reference+0x7c>)
 8014a58:	e000      	b.n	8014a5c <pbuf_alloc_reference+0x44>
 8014a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8014a98 <pbuf_alloc_reference+0x80>)
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	480f      	ldr	r0, [pc, #60]	@ (8014a9c <pbuf_alloc_reference+0x84>)
 8014a60:	f00c fa38 	bl	8020ed4 <iprintf>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014a64:	2300      	movs	r3, #0
 8014a66:	e00b      	b.n	8014a80 <pbuf_alloc_reference+0x68>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014a68:	8879      	ldrh	r1, [r7, #2]
 8014a6a:	887a      	ldrh	r2, [r7, #2]
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	9301      	str	r3, [sp, #4]
 8014a70:	883b      	ldrh	r3, [r7, #0]
 8014a72:	9300      	str	r3, [sp, #0]
 8014a74:	460b      	mov	r3, r1
 8014a76:	6879      	ldr	r1, [r7, #4]
 8014a78:	68f8      	ldr	r0, [r7, #12]
 8014a7a:	f7ff fe9d 	bl	80147b8 <pbuf_init_alloced_pbuf>
  return p;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
}
 8014a80:	4618      	mov	r0, r3
 8014a82:	3710      	adds	r7, #16
 8014a84:	46bd      	mov	sp, r7
 8014a86:	bd80      	pop	{r7, pc}
 8014a88:	08023730 	.word	0x08023730
 8014a8c:	08023854 	.word	0x08023854
 8014a90:	08023790 	.word	0x08023790
 8014a94:	08023868 	.word	0x08023868
 8014a98:	0802386c 	.word	0x0802386c
 8014a9c:	08023870 	.word	0x08023870

08014aa0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b088      	sub	sp, #32
 8014aa4:	af02      	add	r7, sp, #8
 8014aa6:	607b      	str	r3, [r7, #4]
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	73fb      	strb	r3, [r7, #15]
 8014aac:	460b      	mov	r3, r1
 8014aae:	81bb      	strh	r3, [r7, #12]
 8014ab0:	4613      	mov	r3, r2
 8014ab2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014ab4:	7bfb      	ldrb	r3, [r7, #15]
 8014ab6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 8014ab8:	89bb      	ldrh	r3, [r7, #12]
 8014aba:	4619      	mov	r1, r3
 8014abc:	4817      	ldr	r0, [pc, #92]	@ (8014b1c <pbuf_alloced_custom+0x7c>)
 8014abe:	f00c fa09 	bl	8020ed4 <iprintf>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014ac2:	8a7b      	ldrh	r3, [r7, #18]
 8014ac4:	3303      	adds	r3, #3
 8014ac6:	f023 0203 	bic.w	r2, r3, #3
 8014aca:	89bb      	ldrh	r3, [r7, #12]
 8014acc:	441a      	add	r2, r3
 8014ace:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d906      	bls.n	8014ae2 <pbuf_alloced_custom+0x42>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 8014ad4:	89bb      	ldrh	r3, [r7, #12]
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	4811      	ldr	r0, [pc, #68]	@ (8014b20 <pbuf_alloced_custom+0x80>)
 8014ada:	f00c f9fb 	bl	8020ed4 <iprintf>
    return NULL;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	e018      	b.n	8014b14 <pbuf_alloced_custom+0x74>
  }

  if (payload_mem != NULL) {
 8014ae2:	6a3b      	ldr	r3, [r7, #32]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d007      	beq.n	8014af8 <pbuf_alloced_custom+0x58>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014ae8:	8a7b      	ldrh	r3, [r7, #18]
 8014aea:	3303      	adds	r3, #3
 8014aec:	f023 0303 	bic.w	r3, r3, #3
 8014af0:	6a3a      	ldr	r2, [r7, #32]
 8014af2:	4413      	add	r3, r2
 8014af4:	617b      	str	r3, [r7, #20]
 8014af6:	e001      	b.n	8014afc <pbuf_alloced_custom+0x5c>
  } else {
    payload = NULL;
 8014af8:	2300      	movs	r3, #0
 8014afa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	89b9      	ldrh	r1, [r7, #12]
 8014b00:	89ba      	ldrh	r2, [r7, #12]
 8014b02:	2302      	movs	r3, #2
 8014b04:	9301      	str	r3, [sp, #4]
 8014b06:	897b      	ldrh	r3, [r7, #10]
 8014b08:	9300      	str	r3, [sp, #0]
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	6979      	ldr	r1, [r7, #20]
 8014b0e:	f7ff fe53 	bl	80147b8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8014b12:	687b      	ldr	r3, [r7, #4]
}
 8014b14:	4618      	mov	r0, r3
 8014b16:	3718      	adds	r7, #24
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}
 8014b1c:	080238b4 	.word	0x080238b4
 8014b20:	080238d8 	.word	0x080238d8

08014b24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	460b      	mov	r3, r1
 8014b2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d106      	bne.n	8014b44 <pbuf_realloc+0x20>
 8014b36:	4b3a      	ldr	r3, [pc, #232]	@ (8014c20 <pbuf_realloc+0xfc>)
 8014b38:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8014b3c:	4939      	ldr	r1, [pc, #228]	@ (8014c24 <pbuf_realloc+0x100>)
 8014b3e:	483a      	ldr	r0, [pc, #232]	@ (8014c28 <pbuf_realloc+0x104>)
 8014b40:	f00c f9c8 	bl	8020ed4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	891b      	ldrh	r3, [r3, #8]
 8014b48:	887a      	ldrh	r2, [r7, #2]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d263      	bcs.n	8014c16 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	891a      	ldrh	r2, [r3, #8]
 8014b52:	887b      	ldrh	r3, [r7, #2]
 8014b54:	1ad3      	subs	r3, r2, r3
 8014b56:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8014b58:	887b      	ldrh	r3, [r7, #2]
 8014b5a:	817b      	strh	r3, [r7, #10]
  q = p;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014b60:	e018      	b.n	8014b94 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014b62:	68fb      	ldr	r3, [r7, #12]
 8014b64:	895b      	ldrh	r3, [r3, #10]
 8014b66:	897a      	ldrh	r2, [r7, #10]
 8014b68:	1ad3      	subs	r3, r2, r3
 8014b6a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	891a      	ldrh	r2, [r3, #8]
 8014b70:	893b      	ldrh	r3, [r7, #8]
 8014b72:	1ad3      	subs	r3, r2, r3
 8014b74:	b29a      	uxth	r2, r3
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d106      	bne.n	8014b94 <pbuf_realloc+0x70>
 8014b86:	4b26      	ldr	r3, [pc, #152]	@ (8014c20 <pbuf_realloc+0xfc>)
 8014b88:	f240 12af 	movw	r2, #431	@ 0x1af
 8014b8c:	4927      	ldr	r1, [pc, #156]	@ (8014c2c <pbuf_realloc+0x108>)
 8014b8e:	4826      	ldr	r0, [pc, #152]	@ (8014c28 <pbuf_realloc+0x104>)
 8014b90:	f00c f9a0 	bl	8020ed4 <iprintf>
  while (rem_len > q->len) {
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	895b      	ldrh	r3, [r3, #10]
 8014b98:	897a      	ldrh	r2, [r7, #10]
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d8e1      	bhi.n	8014b62 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	7b1b      	ldrb	r3, [r3, #12]
 8014ba2:	f003 030f 	and.w	r3, r3, #15
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d121      	bne.n	8014bee <pbuf_realloc+0xca>
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	895b      	ldrh	r3, [r3, #10]
 8014bae:	897a      	ldrh	r2, [r7, #10]
 8014bb0:	429a      	cmp	r2, r3
 8014bb2:	d01c      	beq.n	8014bee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014bb4:	68fb      	ldr	r3, [r7, #12]
 8014bb6:	7b5b      	ldrb	r3, [r3, #13]
 8014bb8:	f003 0302 	and.w	r3, r3, #2
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d116      	bne.n	8014bee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	685a      	ldr	r2, [r3, #4]
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	1ad3      	subs	r3, r2, r3
 8014bc8:	b29a      	uxth	r2, r3
 8014bca:	897b      	ldrh	r3, [r7, #10]
 8014bcc:	4413      	add	r3, r2
 8014bce:	b29b      	uxth	r3, r3
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	68f8      	ldr	r0, [r7, #12]
 8014bd4:	f7fe fd8e 	bl	80136f4 <mem_trim>
 8014bd8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d106      	bne.n	8014bee <pbuf_realloc+0xca>
 8014be0:	4b0f      	ldr	r3, [pc, #60]	@ (8014c20 <pbuf_realloc+0xfc>)
 8014be2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8014be6:	4912      	ldr	r1, [pc, #72]	@ (8014c30 <pbuf_realloc+0x10c>)
 8014be8:	480f      	ldr	r0, [pc, #60]	@ (8014c28 <pbuf_realloc+0x104>)
 8014bea:	f00c f973 	bl	8020ed4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	897a      	ldrh	r2, [r7, #10]
 8014bf2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	895a      	ldrh	r2, [r3, #10]
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d004      	beq.n	8014c0e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f000 f92b 	bl	8014e64 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8014c0e:	68fb      	ldr	r3, [r7, #12]
 8014c10:	2200      	movs	r2, #0
 8014c12:	601a      	str	r2, [r3, #0]
 8014c14:	e000      	b.n	8014c18 <pbuf_realloc+0xf4>
    return;
 8014c16:	bf00      	nop

}
 8014c18:	3710      	adds	r7, #16
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bd80      	pop	{r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	08023730 	.word	0x08023730
 8014c24:	0802390c 	.word	0x0802390c
 8014c28:	08023790 	.word	0x08023790
 8014c2c:	08023924 	.word	0x08023924
 8014c30:	0802393c 	.word	0x0802393c

08014c34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8014c34:	b580      	push	{r7, lr}
 8014c36:	b086      	sub	sp, #24
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	60f8      	str	r0, [r7, #12]
 8014c3c:	60b9      	str	r1, [r7, #8]
 8014c3e:	4613      	mov	r3, r2
 8014c40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d106      	bne.n	8014c56 <pbuf_add_header_impl+0x22>
 8014c48:	4b32      	ldr	r3, [pc, #200]	@ (8014d14 <pbuf_add_header_impl+0xe0>)
 8014c4a:	f240 12df 	movw	r2, #479	@ 0x1df
 8014c4e:	4932      	ldr	r1, [pc, #200]	@ (8014d18 <pbuf_add_header_impl+0xe4>)
 8014c50:	4832      	ldr	r0, [pc, #200]	@ (8014d1c <pbuf_add_header_impl+0xe8>)
 8014c52:	f00c f93f 	bl	8020ed4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d003      	beq.n	8014c64 <pbuf_add_header_impl+0x30>
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014c62:	d301      	bcc.n	8014c68 <pbuf_add_header_impl+0x34>
    return 1;
 8014c64:	2301      	movs	r3, #1
 8014c66:	e051      	b.n	8014d0c <pbuf_add_header_impl+0xd8>
  }
  if (header_size_increment == 0) {
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d101      	bne.n	8014c72 <pbuf_add_header_impl+0x3e>
    return 0;
 8014c6e:	2300      	movs	r3, #0
 8014c70:	e04c      	b.n	8014d0c <pbuf_add_header_impl+0xd8>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	891a      	ldrh	r2, [r3, #8]
 8014c7a:	8a7b      	ldrh	r3, [r7, #18]
 8014c7c:	4413      	add	r3, r2
 8014c7e:	b29b      	uxth	r3, r3
 8014c80:	8a7a      	ldrh	r2, [r7, #18]
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d901      	bls.n	8014c8a <pbuf_add_header_impl+0x56>
    return 1;
 8014c86:	2301      	movs	r3, #1
 8014c88:	e040      	b.n	8014d0c <pbuf_add_header_impl+0xd8>
  }

  type_internal = p->type_internal;
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	7b1b      	ldrb	r3, [r3, #12]
 8014c8e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014c90:	8a3b      	ldrh	r3, [r7, #16]
 8014c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d013      	beq.n	8014cc2 <pbuf_add_header_impl+0x8e>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8014c9a:	68fb      	ldr	r3, [r7, #12]
 8014c9c:	685a      	ldr	r2, [r3, #4]
 8014c9e:	68bb      	ldr	r3, [r7, #8]
 8014ca0:	425b      	negs	r3, r3
 8014ca2:	4413      	add	r3, r2
 8014ca4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	3310      	adds	r3, #16
 8014caa:	697a      	ldr	r2, [r7, #20]
 8014cac:	429a      	cmp	r2, r3
 8014cae:	d214      	bcs.n	8014cda <pbuf_add_header_impl+0xa6>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	3310      	adds	r3, #16
 8014cb4:	461a      	mov	r2, r3
 8014cb6:	6979      	ldr	r1, [r7, #20]
 8014cb8:	4819      	ldr	r0, [pc, #100]	@ (8014d20 <pbuf_add_header_impl+0xec>)
 8014cba:	f00c f90b 	bl	8020ed4 <iprintf>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014cbe:	2301      	movs	r3, #1
 8014cc0:	e024      	b.n	8014d0c <pbuf_add_header_impl+0xd8>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014cc2:	79fb      	ldrb	r3, [r7, #7]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d006      	beq.n	8014cd6 <pbuf_add_header_impl+0xa2>
      payload = (u8_t *)p->payload - header_size_increment;
 8014cc8:	68fb      	ldr	r3, [r7, #12]
 8014cca:	685a      	ldr	r2, [r3, #4]
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	425b      	negs	r3, r3
 8014cd0:	4413      	add	r3, r2
 8014cd2:	617b      	str	r3, [r7, #20]
 8014cd4:	e001      	b.n	8014cda <pbuf_add_header_impl+0xa6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8014cd6:	2301      	movs	r3, #1
 8014cd8:	e018      	b.n	8014d0c <pbuf_add_header_impl+0xd8>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	6859      	ldr	r1, [r3, #4]
 8014cde:	8a7b      	ldrh	r3, [r7, #18]
 8014ce0:	697a      	ldr	r2, [r7, #20]
 8014ce2:	4810      	ldr	r0, [pc, #64]	@ (8014d24 <pbuf_add_header_impl+0xf0>)
 8014ce4:	f00c f8f6 	bl	8020ed4 <iprintf>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	697a      	ldr	r2, [r7, #20]
 8014cec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	895a      	ldrh	r2, [r3, #10]
 8014cf2:	8a7b      	ldrh	r3, [r7, #18]
 8014cf4:	4413      	add	r3, r2
 8014cf6:	b29a      	uxth	r2, r3
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	891a      	ldrh	r2, [r3, #8]
 8014d00:	8a7b      	ldrh	r3, [r7, #18]
 8014d02:	4413      	add	r3, r2
 8014d04:	b29a      	uxth	r2, r3
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	811a      	strh	r2, [r3, #8]


  return 0;
 8014d0a:	2300      	movs	r3, #0
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3718      	adds	r7, #24
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}
 8014d14:	08023730 	.word	0x08023730
 8014d18:	08023958 	.word	0x08023958
 8014d1c:	08023790 	.word	0x08023790
 8014d20:	08023964 	.word	0x08023964
 8014d24:	080239b0 	.word	0x080239b0

08014d28 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
 8014d30:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8014d32:	2200      	movs	r2, #0
 8014d34:	6839      	ldr	r1, [r7, #0]
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f7ff ff7c 	bl	8014c34 <pbuf_add_header_impl>
 8014d3c:	4603      	mov	r3, r0
}
 8014d3e:	4618      	mov	r0, r3
 8014d40:	3708      	adds	r7, #8
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
	...

08014d48 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b084      	sub	sp, #16
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	6078      	str	r0, [r7, #4]
 8014d50:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d106      	bne.n	8014d66 <pbuf_remove_header+0x1e>
 8014d58:	4b23      	ldr	r3, [pc, #140]	@ (8014de8 <pbuf_remove_header+0xa0>)
 8014d5a:	f240 224b 	movw	r2, #587	@ 0x24b
 8014d5e:	4923      	ldr	r1, [pc, #140]	@ (8014dec <pbuf_remove_header+0xa4>)
 8014d60:	4823      	ldr	r0, [pc, #140]	@ (8014df0 <pbuf_remove_header+0xa8>)
 8014d62:	f00c f8b7 	bl	8020ed4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d003      	beq.n	8014d74 <pbuf_remove_header+0x2c>
 8014d6c:	683b      	ldr	r3, [r7, #0]
 8014d6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8014d72:	d301      	bcc.n	8014d78 <pbuf_remove_header+0x30>
    return 1;
 8014d74:	2301      	movs	r3, #1
 8014d76:	e033      	b.n	8014de0 <pbuf_remove_header+0x98>
  }
  if (header_size_decrement == 0) {
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d101      	bne.n	8014d82 <pbuf_remove_header+0x3a>
    return 0;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	e02e      	b.n	8014de0 <pbuf_remove_header+0x98>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014d82:	683b      	ldr	r3, [r7, #0]
 8014d84:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	895b      	ldrh	r3, [r3, #10]
 8014d8a:	89fa      	ldrh	r2, [r7, #14]
 8014d8c:	429a      	cmp	r2, r3
 8014d8e:	d908      	bls.n	8014da2 <pbuf_remove_header+0x5a>
 8014d90:	4b15      	ldr	r3, [pc, #84]	@ (8014de8 <pbuf_remove_header+0xa0>)
 8014d92:	f240 2255 	movw	r2, #597	@ 0x255
 8014d96:	4917      	ldr	r1, [pc, #92]	@ (8014df4 <pbuf_remove_header+0xac>)
 8014d98:	4815      	ldr	r0, [pc, #84]	@ (8014df0 <pbuf_remove_header+0xa8>)
 8014d9a:	f00c f89b 	bl	8020ed4 <iprintf>
 8014d9e:	2301      	movs	r3, #1
 8014da0:	e01e      	b.n	8014de0 <pbuf_remove_header+0x98>

  /* remember current payload pointer */
  payload = p->payload;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	685a      	ldr	r2, [r3, #4]
 8014dac:	683b      	ldr	r3, [r7, #0]
 8014dae:	441a      	add	r2, r3
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	895a      	ldrh	r2, [r3, #10]
 8014db8:	89fb      	ldrh	r3, [r7, #14]
 8014dba:	1ad3      	subs	r3, r2, r3
 8014dbc:	b29a      	uxth	r2, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	891a      	ldrh	r2, [r3, #8]
 8014dc6:	89fb      	ldrh	r3, [r7, #14]
 8014dc8:	1ad3      	subs	r3, r2, r3
 8014dca:	b29a      	uxth	r2, r3
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	685a      	ldr	r2, [r3, #4]
 8014dd4:	89fb      	ldrh	r3, [r7, #14]
 8014dd6:	68b9      	ldr	r1, [r7, #8]
 8014dd8:	4807      	ldr	r0, [pc, #28]	@ (8014df8 <pbuf_remove_header+0xb0>)
 8014dda:	f00c f87b 	bl	8020ed4 <iprintf>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014dde:	2300      	movs	r3, #0
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3710      	adds	r7, #16
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	08023730 	.word	0x08023730
 8014dec:	08023958 	.word	0x08023958
 8014df0:	08023790 	.word	0x08023790
 8014df4:	080239d8 	.word	0x080239d8
 8014df8:	080239f8 	.word	0x080239f8

08014dfc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	b082      	sub	sp, #8
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
 8014e04:	460b      	mov	r3, r1
 8014e06:	807b      	strh	r3, [r7, #2]
 8014e08:	4613      	mov	r3, r2
 8014e0a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8014e0c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	da08      	bge.n	8014e26 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014e14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014e18:	425b      	negs	r3, r3
 8014e1a:	4619      	mov	r1, r3
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7ff ff93 	bl	8014d48 <pbuf_remove_header>
 8014e22:	4603      	mov	r3, r0
 8014e24:	e007      	b.n	8014e36 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014e26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014e2a:	787a      	ldrb	r2, [r7, #1]
 8014e2c:	4619      	mov	r1, r3
 8014e2e:	6878      	ldr	r0, [r7, #4]
 8014e30:	f7ff ff00 	bl	8014c34 <pbuf_add_header_impl>
 8014e34:	4603      	mov	r3, r0
  }
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3708      	adds	r7, #8
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}

08014e3e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8014e3e:	b580      	push	{r7, lr}
 8014e40:	b082      	sub	sp, #8
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	6078      	str	r0, [r7, #4]
 8014e46:	460b      	mov	r3, r1
 8014e48:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014e4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014e4e:	2201      	movs	r2, #1
 8014e50:	4619      	mov	r1, r3
 8014e52:	6878      	ldr	r0, [r7, #4]
 8014e54:	f7ff ffd2 	bl	8014dfc <pbuf_header_impl>
 8014e58:	4603      	mov	r3, r0
}
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	3708      	adds	r7, #8
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}
	...

08014e64 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b088      	sub	sp, #32
 8014e68:	af00      	add	r7, sp, #0
 8014e6a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d10e      	bne.n	8014e90 <pbuf_free+0x2c>
    LWIP_ASSERT("p != NULL", p != NULL);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d106      	bne.n	8014e86 <pbuf_free+0x22>
 8014e78:	4b43      	ldr	r3, [pc, #268]	@ (8014f88 <pbuf_free+0x124>)
 8014e7a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8014e7e:	4943      	ldr	r1, [pc, #268]	@ (8014f8c <pbuf_free+0x128>)
 8014e80:	4843      	ldr	r0, [pc, #268]	@ (8014f90 <pbuf_free+0x12c>)
 8014e82:	f00c f827 	bl	8020ed4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8014e86:	4843      	ldr	r0, [pc, #268]	@ (8014f94 <pbuf_free+0x130>)
 8014e88:	f00c f894 	bl	8020fb4 <puts>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	e077      	b.n	8014f80 <pbuf_free+0x11c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 8014e90:	6879      	ldr	r1, [r7, #4]
 8014e92:	4841      	ldr	r0, [pc, #260]	@ (8014f98 <pbuf_free+0x134>)
 8014e94:	f00c f81e 	bl	8020ed4 <iprintf>

  PERF_START;

  count = 0;
 8014e98:	2300      	movs	r3, #0
 8014e9a:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8014e9c:	e06c      	b.n	8014f78 <pbuf_free+0x114>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014e9e:	f00a fe81 	bl	801fba4 <sys_arch_protect>
 8014ea2:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	7b9b      	ldrb	r3, [r3, #14]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d106      	bne.n	8014eba <pbuf_free+0x56>
 8014eac:	4b36      	ldr	r3, [pc, #216]	@ (8014f88 <pbuf_free+0x124>)
 8014eae:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8014eb2:	493a      	ldr	r1, [pc, #232]	@ (8014f9c <pbuf_free+0x138>)
 8014eb4:	4836      	ldr	r0, [pc, #216]	@ (8014f90 <pbuf_free+0x12c>)
 8014eb6:	f00c f80d 	bl	8020ed4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	7b9b      	ldrb	r3, [r3, #14]
 8014ebe:	3b01      	subs	r3, #1
 8014ec0:	b2da      	uxtb	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	739a      	strb	r2, [r3, #14]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	7b9b      	ldrb	r3, [r3, #14]
 8014eca:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8014ecc:	69b8      	ldr	r0, [r7, #24]
 8014ece:	f00a fe77 	bl	801fbc0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014ed2:	7dfb      	ldrb	r3, [r7, #23]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d147      	bne.n	8014f68 <pbuf_free+0x104>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 8014ede:	6879      	ldr	r1, [r7, #4]
 8014ee0:	482f      	ldr	r0, [pc, #188]	@ (8014fa0 <pbuf_free+0x13c>)
 8014ee2:	f00b fff7 	bl	8020ed4 <iprintf>
      alloc_src = pbuf_get_allocsrc(p);
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	7b1b      	ldrb	r3, [r3, #12]
 8014eea:	f003 030f 	and.w	r3, r3, #15
 8014eee:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	7b5b      	ldrb	r3, [r3, #13]
 8014ef4:	f003 0302 	and.w	r3, r3, #2
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d011      	beq.n	8014f20 <pbuf_free+0xbc>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8014f00:	68bb      	ldr	r3, [r7, #8]
 8014f02:	691b      	ldr	r3, [r3, #16]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d106      	bne.n	8014f16 <pbuf_free+0xb2>
 8014f08:	4b1f      	ldr	r3, [pc, #124]	@ (8014f88 <pbuf_free+0x124>)
 8014f0a:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8014f0e:	4925      	ldr	r1, [pc, #148]	@ (8014fa4 <pbuf_free+0x140>)
 8014f10:	481f      	ldr	r0, [pc, #124]	@ (8014f90 <pbuf_free+0x12c>)
 8014f12:	f00b ffdf 	bl	8020ed4 <iprintf>
        pc->custom_free_function(p);
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	691b      	ldr	r3, [r3, #16]
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	4798      	blx	r3
 8014f1e:	e01d      	b.n	8014f5c <pbuf_free+0xf8>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8014f20:	7bfb      	ldrb	r3, [r7, #15]
 8014f22:	2b02      	cmp	r3, #2
 8014f24:	d104      	bne.n	8014f30 <pbuf_free+0xcc>
          memp_free(MEMP_PBUF_POOL, p);
 8014f26:	6879      	ldr	r1, [r7, #4]
 8014f28:	200c      	movs	r0, #12
 8014f2a:	f7fe ffb5 	bl	8013e98 <memp_free>
 8014f2e:	e015      	b.n	8014f5c <pbuf_free+0xf8>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8014f30:	7bfb      	ldrb	r3, [r7, #15]
 8014f32:	2b01      	cmp	r3, #1
 8014f34:	d104      	bne.n	8014f40 <pbuf_free+0xdc>
          memp_free(MEMP_PBUF, p);
 8014f36:	6879      	ldr	r1, [r7, #4]
 8014f38:	200b      	movs	r0, #11
 8014f3a:	f7fe ffad 	bl	8013e98 <memp_free>
 8014f3e:	e00d      	b.n	8014f5c <pbuf_free+0xf8>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8014f40:	7bfb      	ldrb	r3, [r7, #15]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d103      	bne.n	8014f4e <pbuf_free+0xea>
          mem_free(p);
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f7fe fafc 	bl	8013544 <mem_free>
 8014f4c:	e006      	b.n	8014f5c <pbuf_free+0xf8>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8014f88 <pbuf_free+0x124>)
 8014f50:	f240 320f 	movw	r2, #783	@ 0x30f
 8014f54:	4914      	ldr	r1, [pc, #80]	@ (8014fa8 <pbuf_free+0x144>)
 8014f56:	480e      	ldr	r0, [pc, #56]	@ (8014f90 <pbuf_free+0x12c>)
 8014f58:	f00b ffbc 	bl	8020ed4 <iprintf>
        }
      }
      count++;
 8014f5c:	7ffb      	ldrb	r3, [r7, #31]
 8014f5e:	3301      	adds	r3, #1
 8014f60:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	607b      	str	r3, [r7, #4]
 8014f66:	e007      	b.n	8014f78 <pbuf_free+0x114>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 8014f68:	7dfb      	ldrb	r3, [r7, #23]
 8014f6a:	461a      	mov	r2, r3
 8014f6c:	6879      	ldr	r1, [r7, #4]
 8014f6e:	480f      	ldr	r0, [pc, #60]	@ (8014fac <pbuf_free+0x148>)
 8014f70:	f00b ffb0 	bl	8020ed4 <iprintf>
      /* stop walking through the chain */
      p = NULL;
 8014f74:	2300      	movs	r3, #0
 8014f76:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d18f      	bne.n	8014e9e <pbuf_free+0x3a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8014f80:	4618      	mov	r0, r3
 8014f82:	3720      	adds	r7, #32
 8014f84:	46bd      	mov	sp, r7
 8014f86:	bd80      	pop	{r7, pc}
 8014f88:	08023730 	.word	0x08023730
 8014f8c:	08023958 	.word	0x08023958
 8014f90:	08023790 	.word	0x08023790
 8014f94:	08023a24 	.word	0x08023a24
 8014f98:	08023a48 	.word	0x08023a48
 8014f9c:	08023a58 	.word	0x08023a58
 8014fa0:	08023a70 	.word	0x08023a70
 8014fa4:	08023a8c 	.word	0x08023a8c
 8014fa8:	08023ab0 	.word	0x08023ab0
 8014fac:	08023ac4 	.word	0x08023ac4

08014fb0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8014fb0:	b480      	push	{r7}
 8014fb2:	b085      	sub	sp, #20
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014fb8:	2300      	movs	r3, #0
 8014fba:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014fbc:	e005      	b.n	8014fca <pbuf_clen+0x1a>
    ++len;
 8014fbe:	89fb      	ldrh	r3, [r7, #14]
 8014fc0:	3301      	adds	r3, #1
 8014fc2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	681b      	ldr	r3, [r3, #0]
 8014fc8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d1f6      	bne.n	8014fbe <pbuf_clen+0xe>
  }
  return len;
 8014fd0:	89fb      	ldrh	r3, [r7, #14]
}
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	3714      	adds	r7, #20
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fdc:	4770      	bx	lr
	...

08014fe0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014fe0:	b580      	push	{r7, lr}
 8014fe2:	b084      	sub	sp, #16
 8014fe4:	af00      	add	r7, sp, #0
 8014fe6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d016      	beq.n	801501c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8014fee:	f00a fdd9 	bl	801fba4 <sys_arch_protect>
 8014ff2:	60f8      	str	r0, [r7, #12]
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	7b9b      	ldrb	r3, [r3, #14]
 8014ff8:	3301      	adds	r3, #1
 8014ffa:	b2da      	uxtb	r2, r3
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	739a      	strb	r2, [r3, #14]
 8015000:	68f8      	ldr	r0, [r7, #12]
 8015002:	f00a fddd 	bl	801fbc0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	7b9b      	ldrb	r3, [r3, #14]
 801500a:	2b00      	cmp	r3, #0
 801500c:	d106      	bne.n	801501c <pbuf_ref+0x3c>
 801500e:	4b05      	ldr	r3, [pc, #20]	@ (8015024 <pbuf_ref+0x44>)
 8015010:	f240 3242 	movw	r2, #834	@ 0x342
 8015014:	4904      	ldr	r1, [pc, #16]	@ (8015028 <pbuf_ref+0x48>)
 8015016:	4805      	ldr	r0, [pc, #20]	@ (801502c <pbuf_ref+0x4c>)
 8015018:	f00b ff5c 	bl	8020ed4 <iprintf>
  }
}
 801501c:	bf00      	nop
 801501e:	3710      	adds	r7, #16
 8015020:	46bd      	mov	sp, r7
 8015022:	bd80      	pop	{r7, pc}
 8015024:	08023730 	.word	0x08023730
 8015028:	08023af0 	.word	0x08023af0
 801502c:	08023790 	.word	0x08023790

08015030 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8015030:	b580      	push	{r7, lr}
 8015032:	b084      	sub	sp, #16
 8015034:	af00      	add	r7, sp, #0
 8015036:	6078      	str	r0, [r7, #4]
 8015038:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d002      	beq.n	8015046 <pbuf_cat+0x16>
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	2b00      	cmp	r3, #0
 8015044:	d107      	bne.n	8015056 <pbuf_cat+0x26>
 8015046:	4b20      	ldr	r3, [pc, #128]	@ (80150c8 <pbuf_cat+0x98>)
 8015048:	f240 3259 	movw	r2, #857	@ 0x359
 801504c:	491f      	ldr	r1, [pc, #124]	@ (80150cc <pbuf_cat+0x9c>)
 801504e:	4820      	ldr	r0, [pc, #128]	@ (80150d0 <pbuf_cat+0xa0>)
 8015050:	f00b ff40 	bl	8020ed4 <iprintf>
 8015054:	e034      	b.n	80150c0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	60fb      	str	r3, [r7, #12]
 801505a:	e00a      	b.n	8015072 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	891a      	ldrh	r2, [r3, #8]
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	891b      	ldrh	r3, [r3, #8]
 8015064:	4413      	add	r3, r2
 8015066:	b29a      	uxth	r2, r3
 8015068:	68fb      	ldr	r3, [r7, #12]
 801506a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	60fb      	str	r3, [r7, #12]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d1f0      	bne.n	801505c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	891a      	ldrh	r2, [r3, #8]
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	895b      	ldrh	r3, [r3, #10]
 8015082:	429a      	cmp	r2, r3
 8015084:	d006      	beq.n	8015094 <pbuf_cat+0x64>
 8015086:	4b10      	ldr	r3, [pc, #64]	@ (80150c8 <pbuf_cat+0x98>)
 8015088:	f240 3262 	movw	r2, #866	@ 0x362
 801508c:	4911      	ldr	r1, [pc, #68]	@ (80150d4 <pbuf_cat+0xa4>)
 801508e:	4810      	ldr	r0, [pc, #64]	@ (80150d0 <pbuf_cat+0xa0>)
 8015090:	f00b ff20 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d006      	beq.n	80150aa <pbuf_cat+0x7a>
 801509c:	4b0a      	ldr	r3, [pc, #40]	@ (80150c8 <pbuf_cat+0x98>)
 801509e:	f240 3263 	movw	r2, #867	@ 0x363
 80150a2:	490d      	ldr	r1, [pc, #52]	@ (80150d8 <pbuf_cat+0xa8>)
 80150a4:	480a      	ldr	r0, [pc, #40]	@ (80150d0 <pbuf_cat+0xa0>)
 80150a6:	f00b ff15 	bl	8020ed4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80150aa:	68fb      	ldr	r3, [r7, #12]
 80150ac:	891a      	ldrh	r2, [r3, #8]
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	891b      	ldrh	r3, [r3, #8]
 80150b2:	4413      	add	r3, r2
 80150b4:	b29a      	uxth	r2, r3
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	683a      	ldr	r2, [r7, #0]
 80150be:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80150c0:	3710      	adds	r7, #16
 80150c2:	46bd      	mov	sp, r7
 80150c4:	bd80      	pop	{r7, pc}
 80150c6:	bf00      	nop
 80150c8:	08023730 	.word	0x08023730
 80150cc:	08023b04 	.word	0x08023b04
 80150d0:	08023790 	.word	0x08023790
 80150d4:	08023b3c 	.word	0x08023b3c
 80150d8:	08023b6c 	.word	0x08023b6c

080150dc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80150e6:	6839      	ldr	r1, [r7, #0]
 80150e8:	6878      	ldr	r0, [r7, #4]
 80150ea:	f7ff ffa1 	bl	8015030 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80150ee:	6838      	ldr	r0, [r7, #0]
 80150f0:	f7ff ff76 	bl	8014fe0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 80150f4:	683a      	ldr	r2, [r7, #0]
 80150f6:	6879      	ldr	r1, [r7, #4]
 80150f8:	4803      	ldr	r0, [pc, #12]	@ (8015108 <pbuf_chain+0x2c>)
 80150fa:	f00b feeb 	bl	8020ed4 <iprintf>
}
 80150fe:	bf00      	nop
 8015100:	3708      	adds	r7, #8
 8015102:	46bd      	mov	sp, r7
 8015104:	bd80      	pop	{r7, pc}
 8015106:	bf00      	nop
 8015108:	08023b7c 	.word	0x08023b7c

0801510c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b086      	sub	sp, #24
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8015116:	2300      	movs	r3, #0
 8015118:	617b      	str	r3, [r7, #20]
 801511a:	2300      	movs	r3, #0
 801511c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 801511e:	683a      	ldr	r2, [r7, #0]
 8015120:	6879      	ldr	r1, [r7, #4]
 8015122:	4860      	ldr	r0, [pc, #384]	@ (80152a4 <pbuf_copy+0x198>)
 8015124:	f00b fed6 	bl	8020ed4 <iprintf>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d008      	beq.n	8015140 <pbuf_copy+0x34>
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d005      	beq.n	8015140 <pbuf_copy+0x34>
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	891a      	ldrh	r2, [r3, #8]
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	891b      	ldrh	r3, [r3, #8]
 801513c:	429a      	cmp	r2, r3
 801513e:	d209      	bcs.n	8015154 <pbuf_copy+0x48>
 8015140:	4b59      	ldr	r3, [pc, #356]	@ (80152a8 <pbuf_copy+0x19c>)
 8015142:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8015146:	4959      	ldr	r1, [pc, #356]	@ (80152ac <pbuf_copy+0x1a0>)
 8015148:	4859      	ldr	r0, [pc, #356]	@ (80152b0 <pbuf_copy+0x1a4>)
 801514a:	f00b fec3 	bl	8020ed4 <iprintf>
 801514e:	f06f 030f 	mvn.w	r3, #15
 8015152:	e0a2      	b.n	801529a <pbuf_copy+0x18e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	895b      	ldrh	r3, [r3, #10]
 8015158:	461a      	mov	r2, r3
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	1ad2      	subs	r2, r2, r3
 801515e:	683b      	ldr	r3, [r7, #0]
 8015160:	895b      	ldrh	r3, [r3, #10]
 8015162:	4619      	mov	r1, r3
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	1acb      	subs	r3, r1, r3
 8015168:	429a      	cmp	r2, r3
 801516a:	d306      	bcc.n	801517a <pbuf_copy+0x6e>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801516c:	683b      	ldr	r3, [r7, #0]
 801516e:	895b      	ldrh	r3, [r3, #10]
 8015170:	461a      	mov	r2, r3
 8015172:	693b      	ldr	r3, [r7, #16]
 8015174:	1ad3      	subs	r3, r2, r3
 8015176:	60fb      	str	r3, [r7, #12]
 8015178:	e005      	b.n	8015186 <pbuf_copy+0x7a>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	895b      	ldrh	r3, [r3, #10]
 801517e:	461a      	mov	r2, r3
 8015180:	697b      	ldr	r3, [r7, #20]
 8015182:	1ad3      	subs	r3, r2, r3
 8015184:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	685a      	ldr	r2, [r3, #4]
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	18d0      	adds	r0, r2, r3
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	685a      	ldr	r2, [r3, #4]
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	4413      	add	r3, r2
 8015196:	68fa      	ldr	r2, [r7, #12]
 8015198:	4619      	mov	r1, r3
 801519a:	f00c f8ce 	bl	802133a <memcpy>
    offset_to += len;
 801519e:	697a      	ldr	r2, [r7, #20]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	4413      	add	r3, r2
 80151a4:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80151a6:	693a      	ldr	r2, [r7, #16]
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	4413      	add	r3, r2
 80151ac:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	895b      	ldrh	r3, [r3, #10]
 80151b2:	461a      	mov	r2, r3
 80151b4:	697b      	ldr	r3, [r7, #20]
 80151b6:	4293      	cmp	r3, r2
 80151b8:	d906      	bls.n	80151c8 <pbuf_copy+0xbc>
 80151ba:	4b3b      	ldr	r3, [pc, #236]	@ (80152a8 <pbuf_copy+0x19c>)
 80151bc:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80151c0:	493c      	ldr	r1, [pc, #240]	@ (80152b4 <pbuf_copy+0x1a8>)
 80151c2:	483b      	ldr	r0, [pc, #236]	@ (80152b0 <pbuf_copy+0x1a4>)
 80151c4:	f00b fe86 	bl	8020ed4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	895b      	ldrh	r3, [r3, #10]
 80151cc:	461a      	mov	r2, r3
 80151ce:	693b      	ldr	r3, [r7, #16]
 80151d0:	4293      	cmp	r3, r2
 80151d2:	d906      	bls.n	80151e2 <pbuf_copy+0xd6>
 80151d4:	4b34      	ldr	r3, [pc, #208]	@ (80152a8 <pbuf_copy+0x19c>)
 80151d6:	f240 32da 	movw	r2, #986	@ 0x3da
 80151da:	4937      	ldr	r1, [pc, #220]	@ (80152b8 <pbuf_copy+0x1ac>)
 80151dc:	4834      	ldr	r0, [pc, #208]	@ (80152b0 <pbuf_copy+0x1a4>)
 80151de:	f00b fe79 	bl	8020ed4 <iprintf>
    if (offset_from >= p_from->len) {
 80151e2:	683b      	ldr	r3, [r7, #0]
 80151e4:	895b      	ldrh	r3, [r3, #10]
 80151e6:	461a      	mov	r2, r3
 80151e8:	693b      	ldr	r3, [r7, #16]
 80151ea:	4293      	cmp	r3, r2
 80151ec:	d304      	bcc.n	80151f8 <pbuf_copy+0xec>
      /* on to next p_from (if any) */
      offset_from = 0;
 80151ee:	2300      	movs	r3, #0
 80151f0:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80151f2:	683b      	ldr	r3, [r7, #0]
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	895b      	ldrh	r3, [r3, #10]
 80151fc:	461a      	mov	r2, r3
 80151fe:	697b      	ldr	r3, [r7, #20]
 8015200:	4293      	cmp	r3, r2
 8015202:	d114      	bne.n	801522e <pbuf_copy+0x122>
      /* on to next p_to (if any) */
      offset_to = 0;
 8015204:	2300      	movs	r3, #0
 8015206:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d10c      	bne.n	801522e <pbuf_copy+0x122>
 8015214:	683b      	ldr	r3, [r7, #0]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d009      	beq.n	801522e <pbuf_copy+0x122>
 801521a:	4b23      	ldr	r3, [pc, #140]	@ (80152a8 <pbuf_copy+0x19c>)
 801521c:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8015220:	4926      	ldr	r1, [pc, #152]	@ (80152bc <pbuf_copy+0x1b0>)
 8015222:	4823      	ldr	r0, [pc, #140]	@ (80152b0 <pbuf_copy+0x1a4>)
 8015224:	f00b fe56 	bl	8020ed4 <iprintf>
 8015228:	f06f 030f 	mvn.w	r3, #15
 801522c:	e035      	b.n	801529a <pbuf_copy+0x18e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	2b00      	cmp	r3, #0
 8015232:	d013      	beq.n	801525c <pbuf_copy+0x150>
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	895a      	ldrh	r2, [r3, #10]
 8015238:	683b      	ldr	r3, [r7, #0]
 801523a:	891b      	ldrh	r3, [r3, #8]
 801523c:	429a      	cmp	r2, r3
 801523e:	d10d      	bne.n	801525c <pbuf_copy+0x150>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d009      	beq.n	801525c <pbuf_copy+0x150>
 8015248:	4b17      	ldr	r3, [pc, #92]	@ (80152a8 <pbuf_copy+0x19c>)
 801524a:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 801524e:	491c      	ldr	r1, [pc, #112]	@ (80152c0 <pbuf_copy+0x1b4>)
 8015250:	4817      	ldr	r0, [pc, #92]	@ (80152b0 <pbuf_copy+0x1a4>)
 8015252:	f00b fe3f 	bl	8020ed4 <iprintf>
 8015256:	f06f 0305 	mvn.w	r3, #5
 801525a:	e01e      	b.n	801529a <pbuf_copy+0x18e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2b00      	cmp	r3, #0
 8015260:	d013      	beq.n	801528a <pbuf_copy+0x17e>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	895a      	ldrh	r2, [r3, #10]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	891b      	ldrh	r3, [r3, #8]
 801526a:	429a      	cmp	r2, r3
 801526c:	d10d      	bne.n	801528a <pbuf_copy+0x17e>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d009      	beq.n	801528a <pbuf_copy+0x17e>
 8015276:	4b0c      	ldr	r3, [pc, #48]	@ (80152a8 <pbuf_copy+0x19c>)
 8015278:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 801527c:	4910      	ldr	r1, [pc, #64]	@ (80152c0 <pbuf_copy+0x1b4>)
 801527e:	480c      	ldr	r0, [pc, #48]	@ (80152b0 <pbuf_copy+0x1a4>)
 8015280:	f00b fe28 	bl	8020ed4 <iprintf>
 8015284:	f06f 0305 	mvn.w	r3, #5
 8015288:	e007      	b.n	801529a <pbuf_copy+0x18e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801528a:	683b      	ldr	r3, [r7, #0]
 801528c:	2b00      	cmp	r3, #0
 801528e:	f47f af61 	bne.w	8015154 <pbuf_copy+0x48>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 8015292:	480c      	ldr	r0, [pc, #48]	@ (80152c4 <pbuf_copy+0x1b8>)
 8015294:	f00b fe8e 	bl	8020fb4 <puts>
  return ERR_OK;
 8015298:	2300      	movs	r3, #0
}
 801529a:	4618      	mov	r0, r3
 801529c:	3718      	adds	r7, #24
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd80      	pop	{r7, pc}
 80152a2:	bf00      	nop
 80152a4:	08023c38 	.word	0x08023c38
 80152a8:	08023730 	.word	0x08023730
 80152ac:	08023c4c 	.word	0x08023c4c
 80152b0:	08023790 	.word	0x08023790
 80152b4:	08023c7c 	.word	0x08023c7c
 80152b8:	08023c94 	.word	0x08023c94
 80152bc:	08023cb0 	.word	0x08023cb0
 80152c0:	08023cc0 	.word	0x08023cc0
 80152c4:	08023cec 	.word	0x08023cec

080152c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80152c8:	b580      	push	{r7, lr}
 80152ca:	b088      	sub	sp, #32
 80152cc:	af00      	add	r7, sp, #0
 80152ce:	60f8      	str	r0, [r7, #12]
 80152d0:	60b9      	str	r1, [r7, #8]
 80152d2:	4611      	mov	r1, r2
 80152d4:	461a      	mov	r2, r3
 80152d6:	460b      	mov	r3, r1
 80152d8:	80fb      	strh	r3, [r7, #6]
 80152da:	4613      	mov	r3, r2
 80152dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80152de:	2300      	movs	r3, #0
 80152e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80152e2:	2300      	movs	r3, #0
 80152e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d108      	bne.n	80152fe <pbuf_copy_partial+0x36>
 80152ec:	4b2b      	ldr	r3, [pc, #172]	@ (801539c <pbuf_copy_partial+0xd4>)
 80152ee:	f240 420a 	movw	r2, #1034	@ 0x40a
 80152f2:	492b      	ldr	r1, [pc, #172]	@ (80153a0 <pbuf_copy_partial+0xd8>)
 80152f4:	482b      	ldr	r0, [pc, #172]	@ (80153a4 <pbuf_copy_partial+0xdc>)
 80152f6:	f00b fded 	bl	8020ed4 <iprintf>
 80152fa:	2300      	movs	r3, #0
 80152fc:	e04a      	b.n	8015394 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80152fe:	68bb      	ldr	r3, [r7, #8]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d108      	bne.n	8015316 <pbuf_copy_partial+0x4e>
 8015304:	4b25      	ldr	r3, [pc, #148]	@ (801539c <pbuf_copy_partial+0xd4>)
 8015306:	f240 420b 	movw	r2, #1035	@ 0x40b
 801530a:	4927      	ldr	r1, [pc, #156]	@ (80153a8 <pbuf_copy_partial+0xe0>)
 801530c:	4825      	ldr	r0, [pc, #148]	@ (80153a4 <pbuf_copy_partial+0xdc>)
 801530e:	f00b fde1 	bl	8020ed4 <iprintf>
 8015312:	2300      	movs	r3, #0
 8015314:	e03e      	b.n	8015394 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	61fb      	str	r3, [r7, #28]
 801531a:	e034      	b.n	8015386 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801531c:	88bb      	ldrh	r3, [r7, #4]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d00a      	beq.n	8015338 <pbuf_copy_partial+0x70>
 8015322:	69fb      	ldr	r3, [r7, #28]
 8015324:	895b      	ldrh	r3, [r3, #10]
 8015326:	88ba      	ldrh	r2, [r7, #4]
 8015328:	429a      	cmp	r2, r3
 801532a:	d305      	bcc.n	8015338 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	895b      	ldrh	r3, [r3, #10]
 8015330:	88ba      	ldrh	r2, [r7, #4]
 8015332:	1ad3      	subs	r3, r2, r3
 8015334:	80bb      	strh	r3, [r7, #4]
 8015336:	e023      	b.n	8015380 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8015338:	69fb      	ldr	r3, [r7, #28]
 801533a:	895a      	ldrh	r2, [r3, #10]
 801533c:	88bb      	ldrh	r3, [r7, #4]
 801533e:	1ad3      	subs	r3, r2, r3
 8015340:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8015342:	8b3a      	ldrh	r2, [r7, #24]
 8015344:	88fb      	ldrh	r3, [r7, #6]
 8015346:	429a      	cmp	r2, r3
 8015348:	d901      	bls.n	801534e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 801534a:	88fb      	ldrh	r3, [r7, #6]
 801534c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801534e:	8b7b      	ldrh	r3, [r7, #26]
 8015350:	68ba      	ldr	r2, [r7, #8]
 8015352:	18d0      	adds	r0, r2, r3
 8015354:	69fb      	ldr	r3, [r7, #28]
 8015356:	685a      	ldr	r2, [r3, #4]
 8015358:	88bb      	ldrh	r3, [r7, #4]
 801535a:	4413      	add	r3, r2
 801535c:	8b3a      	ldrh	r2, [r7, #24]
 801535e:	4619      	mov	r1, r3
 8015360:	f00b ffeb 	bl	802133a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8015364:	8afa      	ldrh	r2, [r7, #22]
 8015366:	8b3b      	ldrh	r3, [r7, #24]
 8015368:	4413      	add	r3, r2
 801536a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801536c:	8b7a      	ldrh	r2, [r7, #26]
 801536e:	8b3b      	ldrh	r3, [r7, #24]
 8015370:	4413      	add	r3, r2
 8015372:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8015374:	88fa      	ldrh	r2, [r7, #6]
 8015376:	8b3b      	ldrh	r3, [r7, #24]
 8015378:	1ad3      	subs	r3, r2, r3
 801537a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801537c:	2300      	movs	r3, #0
 801537e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	61fb      	str	r3, [r7, #28]
 8015386:	88fb      	ldrh	r3, [r7, #6]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d002      	beq.n	8015392 <pbuf_copy_partial+0xca>
 801538c:	69fb      	ldr	r3, [r7, #28]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d1c4      	bne.n	801531c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8015392:	8afb      	ldrh	r3, [r7, #22]
}
 8015394:	4618      	mov	r0, r3
 8015396:	3720      	adds	r7, #32
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}
 801539c:	08023730 	.word	0x08023730
 80153a0:	08023d10 	.word	0x08023d10
 80153a4:	08023790 	.word	0x08023790
 80153a8:	08023d30 	.word	0x08023d30

080153ac <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b084      	sub	sp, #16
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	4603      	mov	r3, r0
 80153b4:	603a      	str	r2, [r7, #0]
 80153b6:	71fb      	strb	r3, [r7, #7]
 80153b8:	460b      	mov	r3, r1
 80153ba:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80153bc:	683b      	ldr	r3, [r7, #0]
 80153be:	8919      	ldrh	r1, [r3, #8]
 80153c0:	88ba      	ldrh	r2, [r7, #4]
 80153c2:	79fb      	ldrb	r3, [r7, #7]
 80153c4:	4618      	mov	r0, r3
 80153c6:	f7ff fa21 	bl	801480c <pbuf_alloc>
 80153ca:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d101      	bne.n	80153d6 <pbuf_clone+0x2a>
    return NULL;
 80153d2:	2300      	movs	r3, #0
 80153d4:	e011      	b.n	80153fa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80153d6:	6839      	ldr	r1, [r7, #0]
 80153d8:	68f8      	ldr	r0, [r7, #12]
 80153da:	f7ff fe97 	bl	801510c <pbuf_copy>
 80153de:	4603      	mov	r3, r0
 80153e0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80153e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d006      	beq.n	80153f8 <pbuf_clone+0x4c>
 80153ea:	4b06      	ldr	r3, [pc, #24]	@ (8015404 <pbuf_clone+0x58>)
 80153ec:	f240 5224 	movw	r2, #1316	@ 0x524
 80153f0:	4905      	ldr	r1, [pc, #20]	@ (8015408 <pbuf_clone+0x5c>)
 80153f2:	4806      	ldr	r0, [pc, #24]	@ (801540c <pbuf_clone+0x60>)
 80153f4:	f00b fd6e 	bl	8020ed4 <iprintf>
  return q;
 80153f8:	68fb      	ldr	r3, [r7, #12]
}
 80153fa:	4618      	mov	r0, r3
 80153fc:	3710      	adds	r7, #16
 80153fe:	46bd      	mov	sp, r7
 8015400:	bd80      	pop	{r7, pc}
 8015402:	bf00      	nop
 8015404:	08023730 	.word	0x08023730
 8015408:	08023e3c 	.word	0x08023e3c
 801540c:	08023790 	.word	0x08023790

08015410 <stats_init>:

struct stats_ lwip_stats;

void
stats_init(void)
{
 8015410:	b480      	push	{r7}
 8015412:	af00      	add	r7, sp, #0
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
 8015414:	4b04      	ldr	r3, [pc, #16]	@ (8015428 <stats_init+0x18>)
 8015416:	4a05      	ldr	r2, [pc, #20]	@ (801542c <stats_init+0x1c>)
 8015418:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 801541c:	bf00      	nop
 801541e:	46bd      	mov	sp, r7
 8015420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015424:	4770      	bx	lr
 8015426:	bf00      	nop
 8015428:	2002d36c 	.word	0x2002d36c
 801542c:	08023e50 	.word	0x08023e50

08015430 <stats_display_proto>:

#if LWIP_STATS_DISPLAY
void
stats_display_proto(struct stats_proto *proto, const char *name)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
 8015438:	6039      	str	r1, [r7, #0]
  LWIP_PLATFORM_DIAG(("\n%s\n\t", name));
 801543a:	6839      	ldr	r1, [r7, #0]
 801543c:	4827      	ldr	r0, [pc, #156]	@ (80154dc <stats_display_proto+0xac>)
 801543e:	f00b fd49 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("xmit: %"STAT_COUNTER_F"\n\t", proto->xmit));
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	881b      	ldrh	r3, [r3, #0]
 8015446:	4619      	mov	r1, r3
 8015448:	4825      	ldr	r0, [pc, #148]	@ (80154e0 <stats_display_proto+0xb0>)
 801544a:	f00b fd43 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("recv: %"STAT_COUNTER_F"\n\t", proto->recv));
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	885b      	ldrh	r3, [r3, #2]
 8015452:	4619      	mov	r1, r3
 8015454:	4823      	ldr	r0, [pc, #140]	@ (80154e4 <stats_display_proto+0xb4>)
 8015456:	f00b fd3d 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("fw: %"STAT_COUNTER_F"\n\t", proto->fw));
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	889b      	ldrh	r3, [r3, #4]
 801545e:	4619      	mov	r1, r3
 8015460:	4821      	ldr	r0, [pc, #132]	@ (80154e8 <stats_display_proto+0xb8>)
 8015462:	f00b fd37 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("drop: %"STAT_COUNTER_F"\n\t", proto->drop));
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	88db      	ldrh	r3, [r3, #6]
 801546a:	4619      	mov	r1, r3
 801546c:	481f      	ldr	r0, [pc, #124]	@ (80154ec <stats_display_proto+0xbc>)
 801546e:	f00b fd31 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("chkerr: %"STAT_COUNTER_F"\n\t", proto->chkerr));
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	891b      	ldrh	r3, [r3, #8]
 8015476:	4619      	mov	r1, r3
 8015478:	481d      	ldr	r0, [pc, #116]	@ (80154f0 <stats_display_proto+0xc0>)
 801547a:	f00b fd2b 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("lenerr: %"STAT_COUNTER_F"\n\t", proto->lenerr));
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	895b      	ldrh	r3, [r3, #10]
 8015482:	4619      	mov	r1, r3
 8015484:	481b      	ldr	r0, [pc, #108]	@ (80154f4 <stats_display_proto+0xc4>)
 8015486:	f00b fd25 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("memerr: %"STAT_COUNTER_F"\n\t", proto->memerr));
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	899b      	ldrh	r3, [r3, #12]
 801548e:	4619      	mov	r1, r3
 8015490:	4819      	ldr	r0, [pc, #100]	@ (80154f8 <stats_display_proto+0xc8>)
 8015492:	f00b fd1f 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("rterr: %"STAT_COUNTER_F"\n\t", proto->rterr));
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	89db      	ldrh	r3, [r3, #14]
 801549a:	4619      	mov	r1, r3
 801549c:	4817      	ldr	r0, [pc, #92]	@ (80154fc <stats_display_proto+0xcc>)
 801549e:	f00b fd19 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("proterr: %"STAT_COUNTER_F"\n\t", proto->proterr));
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	8a1b      	ldrh	r3, [r3, #16]
 80154a6:	4619      	mov	r1, r3
 80154a8:	4815      	ldr	r0, [pc, #84]	@ (8015500 <stats_display_proto+0xd0>)
 80154aa:	f00b fd13 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("opterr: %"STAT_COUNTER_F"\n\t", proto->opterr));
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	8a5b      	ldrh	r3, [r3, #18]
 80154b2:	4619      	mov	r1, r3
 80154b4:	4813      	ldr	r0, [pc, #76]	@ (8015504 <stats_display_proto+0xd4>)
 80154b6:	f00b fd0d 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n\t", proto->err));
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	8a9b      	ldrh	r3, [r3, #20]
 80154be:	4619      	mov	r1, r3
 80154c0:	4811      	ldr	r0, [pc, #68]	@ (8015508 <stats_display_proto+0xd8>)
 80154c2:	f00b fd07 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("cachehit: %"STAT_COUNTER_F"\n", proto->cachehit));
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	8adb      	ldrh	r3, [r3, #22]
 80154ca:	4619      	mov	r1, r3
 80154cc:	480f      	ldr	r0, [pc, #60]	@ (801550c <stats_display_proto+0xdc>)
 80154ce:	f00b fd01 	bl	8020ed4 <iprintf>
}
 80154d2:	bf00      	nop
 80154d4:	3708      	adds	r7, #8
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	08023e54 	.word	0x08023e54
 80154e0:	08023e5c 	.word	0x08023e5c
 80154e4:	08023e68 	.word	0x08023e68
 80154e8:	08023e74 	.word	0x08023e74
 80154ec:	08023e80 	.word	0x08023e80
 80154f0:	08023e8c 	.word	0x08023e8c
 80154f4:	08023e9c 	.word	0x08023e9c
 80154f8:	08023eac 	.word	0x08023eac
 80154fc:	08023ebc 	.word	0x08023ebc
 8015500:	08023ecc 	.word	0x08023ecc
 8015504:	08023edc 	.word	0x08023edc
 8015508:	08023eec 	.word	0x08023eec
 801550c:	08023ef8 	.word	0x08023ef8

08015510 <stats_display_mem>:
#endif /* IGMP_STATS || MLD6_STATS */

#if MEM_STATS || MEMP_STATS
void
stats_display_mem(struct stats_mem *mem, const char *name)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b082      	sub	sp, #8
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
 8015518:	6039      	str	r1, [r7, #0]
  LWIP_PLATFORM_DIAG(("\nMEM %s\n\t", name));
 801551a:	6839      	ldr	r1, [r7, #0]
 801551c:	480f      	ldr	r0, [pc, #60]	@ (801555c <stats_display_mem+0x4c>)
 801551e:	f00b fcd9 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("avail: %"MEM_SIZE_F"\n\t", mem->avail));
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	88db      	ldrh	r3, [r3, #6]
 8015526:	4619      	mov	r1, r3
 8015528:	480d      	ldr	r0, [pc, #52]	@ (8015560 <stats_display_mem+0x50>)
 801552a:	f00b fcd3 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("used: %"MEM_SIZE_F"\n\t", mem->used));
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	891b      	ldrh	r3, [r3, #8]
 8015532:	4619      	mov	r1, r3
 8015534:	480b      	ldr	r0, [pc, #44]	@ (8015564 <stats_display_mem+0x54>)
 8015536:	f00b fccd 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("max: %"MEM_SIZE_F"\n\t", mem->max));
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	895b      	ldrh	r3, [r3, #10]
 801553e:	4619      	mov	r1, r3
 8015540:	4809      	ldr	r0, [pc, #36]	@ (8015568 <stats_display_mem+0x58>)
 8015542:	f00b fcc7 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("err: %"STAT_COUNTER_F"\n", mem->err));
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	889b      	ldrh	r3, [r3, #4]
 801554a:	4619      	mov	r1, r3
 801554c:	4807      	ldr	r0, [pc, #28]	@ (801556c <stats_display_mem+0x5c>)
 801554e:	f00b fcc1 	bl	8020ed4 <iprintf>
}
 8015552:	bf00      	nop
 8015554:	3708      	adds	r7, #8
 8015556:	46bd      	mov	sp, r7
 8015558:	bd80      	pop	{r7, pc}
 801555a:	bf00      	nop
 801555c:	08023f08 	.word	0x08023f08
 8015560:	08023f14 	.word	0x08023f14
 8015564:	08023f24 	.word	0x08023f24
 8015568:	08023f30 	.word	0x08023f30
 801556c:	08023f3c 	.word	0x08023f3c

08015570 <stats_display_memp>:

#if MEMP_STATS
void
stats_display_memp(struct stats_mem *mem, int idx)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
  if (idx < MEMP_MAX) {
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	2b0c      	cmp	r3, #12
 801557e:	dc05      	bgt.n	801558c <stats_display_memp+0x1c>
    stats_display_mem(mem, mem->name);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	4619      	mov	r1, r3
 8015586:	6878      	ldr	r0, [r7, #4]
 8015588:	f7ff ffc2 	bl	8015510 <stats_display_mem>
  }
}
 801558c:	bf00      	nop
 801558e:	3708      	adds	r7, #8
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}

08015594 <stats_display_sys>:
#endif /* MEM_STATS || MEMP_STATS */

#if SYS_STATS
void
stats_display_sys(struct stats_sys *sys)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b082      	sub	sp, #8
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  LWIP_PLATFORM_DIAG(("\nSYS\n\t"));
 801559c:	481e      	ldr	r0, [pc, #120]	@ (8015618 <stats_display_sys+0x84>)
 801559e:	f00b fc99 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.used:  %"STAT_COUNTER_F"\n\t", sys->sem.used));
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	881b      	ldrh	r3, [r3, #0]
 80155a6:	4619      	mov	r1, r3
 80155a8:	481c      	ldr	r0, [pc, #112]	@ (801561c <stats_display_sys+0x88>)
 80155aa:	f00b fc93 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.max:   %"STAT_COUNTER_F"\n\t", sys->sem.max));
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	885b      	ldrh	r3, [r3, #2]
 80155b2:	4619      	mov	r1, r3
 80155b4:	481a      	ldr	r0, [pc, #104]	@ (8015620 <stats_display_sys+0x8c>)
 80155b6:	f00b fc8d 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("sem.err:   %"STAT_COUNTER_F"\n\t", sys->sem.err));
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	889b      	ldrh	r3, [r3, #4]
 80155be:	4619      	mov	r1, r3
 80155c0:	4818      	ldr	r0, [pc, #96]	@ (8015624 <stats_display_sys+0x90>)
 80155c2:	f00b fc87 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.used: %"STAT_COUNTER_F"\n\t", sys->mutex.used));
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	88db      	ldrh	r3, [r3, #6]
 80155ca:	4619      	mov	r1, r3
 80155cc:	4816      	ldr	r0, [pc, #88]	@ (8015628 <stats_display_sys+0x94>)
 80155ce:	f00b fc81 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.max:  %"STAT_COUNTER_F"\n\t", sys->mutex.max));
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	891b      	ldrh	r3, [r3, #8]
 80155d6:	4619      	mov	r1, r3
 80155d8:	4814      	ldr	r0, [pc, #80]	@ (801562c <stats_display_sys+0x98>)
 80155da:	f00b fc7b 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("mutex.err:  %"STAT_COUNTER_F"\n\t", sys->mutex.err));
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	895b      	ldrh	r3, [r3, #10]
 80155e2:	4619      	mov	r1, r3
 80155e4:	4812      	ldr	r0, [pc, #72]	@ (8015630 <stats_display_sys+0x9c>)
 80155e6:	f00b fc75 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.used:  %"STAT_COUNTER_F"\n\t", sys->mbox.used));
 80155ea:	687b      	ldr	r3, [r7, #4]
 80155ec:	899b      	ldrh	r3, [r3, #12]
 80155ee:	4619      	mov	r1, r3
 80155f0:	4810      	ldr	r0, [pc, #64]	@ (8015634 <stats_display_sys+0xa0>)
 80155f2:	f00b fc6f 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.max:   %"STAT_COUNTER_F"\n\t", sys->mbox.max));
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	89db      	ldrh	r3, [r3, #14]
 80155fa:	4619      	mov	r1, r3
 80155fc:	480e      	ldr	r0, [pc, #56]	@ (8015638 <stats_display_sys+0xa4>)
 80155fe:	f00b fc69 	bl	8020ed4 <iprintf>
  LWIP_PLATFORM_DIAG(("mbox.err:   %"STAT_COUNTER_F"\n", sys->mbox.err));
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	8a1b      	ldrh	r3, [r3, #16]
 8015606:	4619      	mov	r1, r3
 8015608:	480c      	ldr	r0, [pc, #48]	@ (801563c <stats_display_sys+0xa8>)
 801560a:	f00b fc63 	bl	8020ed4 <iprintf>
}
 801560e:	bf00      	nop
 8015610:	3708      	adds	r7, #8
 8015612:	46bd      	mov	sp, r7
 8015614:	bd80      	pop	{r7, pc}
 8015616:	bf00      	nop
 8015618:	08023f48 	.word	0x08023f48
 801561c:	08023f50 	.word	0x08023f50
 8015620:	08023f64 	.word	0x08023f64
 8015624:	08023f78 	.word	0x08023f78
 8015628:	08023f8c 	.word	0x08023f8c
 801562c:	08023fa0 	.word	0x08023fa0
 8015630:	08023fb4 	.word	0x08023fb4
 8015634:	08023fc8 	.word	0x08023fc8
 8015638:	08023fdc 	.word	0x08023fdc
 801563c:	08023ff0 	.word	0x08023ff0

08015640 <stats_display>:
#endif /* SYS_STATS */

void
stats_display(void)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
  s16_t i;

  LINK_STATS_DISPLAY();
 8015646:	4920      	ldr	r1, [pc, #128]	@ (80156c8 <stats_display+0x88>)
 8015648:	4820      	ldr	r0, [pc, #128]	@ (80156cc <stats_display+0x8c>)
 801564a:	f7ff fef1 	bl	8015430 <stats_display_proto>
  ETHARP_STATS_DISPLAY();
 801564e:	4920      	ldr	r1, [pc, #128]	@ (80156d0 <stats_display+0x90>)
 8015650:	4820      	ldr	r0, [pc, #128]	@ (80156d4 <stats_display+0x94>)
 8015652:	f7ff feed 	bl	8015430 <stats_display_proto>
  IPFRAG_STATS_DISPLAY();
 8015656:	4920      	ldr	r1, [pc, #128]	@ (80156d8 <stats_display+0x98>)
 8015658:	4820      	ldr	r0, [pc, #128]	@ (80156dc <stats_display+0x9c>)
 801565a:	f7ff fee9 	bl	8015430 <stats_display_proto>
  IP6_FRAG_STATS_DISPLAY();
  IP_STATS_DISPLAY();
 801565e:	4920      	ldr	r1, [pc, #128]	@ (80156e0 <stats_display+0xa0>)
 8015660:	4820      	ldr	r0, [pc, #128]	@ (80156e4 <stats_display+0xa4>)
 8015662:	f7ff fee5 	bl	8015430 <stats_display_proto>
  ND6_STATS_DISPLAY();
  IP6_STATS_DISPLAY();
  IGMP_STATS_DISPLAY();
  MLD6_STATS_DISPLAY();
  ICMP_STATS_DISPLAY();
 8015666:	4920      	ldr	r1, [pc, #128]	@ (80156e8 <stats_display+0xa8>)
 8015668:	4820      	ldr	r0, [pc, #128]	@ (80156ec <stats_display+0xac>)
 801566a:	f7ff fee1 	bl	8015430 <stats_display_proto>
  ICMP6_STATS_DISPLAY();
  UDP_STATS_DISPLAY();
 801566e:	4920      	ldr	r1, [pc, #128]	@ (80156f0 <stats_display+0xb0>)
 8015670:	4820      	ldr	r0, [pc, #128]	@ (80156f4 <stats_display+0xb4>)
 8015672:	f7ff fedd 	bl	8015430 <stats_display_proto>
  TCP_STATS_DISPLAY();
 8015676:	4920      	ldr	r1, [pc, #128]	@ (80156f8 <stats_display+0xb8>)
 8015678:	4820      	ldr	r0, [pc, #128]	@ (80156fc <stats_display+0xbc>)
 801567a:	f7ff fed9 	bl	8015430 <stats_display_proto>
  MEM_STATS_DISPLAY();
 801567e:	4920      	ldr	r1, [pc, #128]	@ (8015700 <stats_display+0xc0>)
 8015680:	4820      	ldr	r0, [pc, #128]	@ (8015704 <stats_display+0xc4>)
 8015682:	f7ff ff45 	bl	8015510 <stats_display_mem>
  for (i = 0; i < MEMP_MAX; i++) {
 8015686:	2300      	movs	r3, #0
 8015688:	80fb      	strh	r3, [r7, #6]
 801568a:	e011      	b.n	80156b0 <stats_display+0x70>
    MEMP_STATS_DISPLAY(i);
 801568c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8015690:	4a0e      	ldr	r2, [pc, #56]	@ (80156cc <stats_display+0x8c>)
 8015692:	332e      	adds	r3, #46	@ 0x2e
 8015694:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015698:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801569c:	4611      	mov	r1, r2
 801569e:	4618      	mov	r0, r3
 80156a0:	f7ff ff66 	bl	8015570 <stats_display_memp>
  for (i = 0; i < MEMP_MAX; i++) {
 80156a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	3301      	adds	r3, #1
 80156ac:	b29b      	uxth	r3, r3
 80156ae:	80fb      	strh	r3, [r7, #6]
 80156b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80156b4:	2b0c      	cmp	r3, #12
 80156b6:	dde9      	ble.n	801568c <stats_display+0x4c>
  }
  SYS_STATS_DISPLAY();
 80156b8:	4813      	ldr	r0, [pc, #76]	@ (8015708 <stats_display+0xc8>)
 80156ba:	f7ff ff6b 	bl	8015594 <stats_display_sys>
}
 80156be:	bf00      	nop
 80156c0:	3708      	adds	r7, #8
 80156c2:	46bd      	mov	sp, r7
 80156c4:	bd80      	pop	{r7, pc}
 80156c6:	bf00      	nop
 80156c8:	08024004 	.word	0x08024004
 80156cc:	2002d36c 	.word	0x2002d36c
 80156d0:	0802400c 	.word	0x0802400c
 80156d4:	2002d384 	.word	0x2002d384
 80156d8:	08024014 	.word	0x08024014
 80156dc:	2002d39c 	.word	0x2002d39c
 80156e0:	0802401c 	.word	0x0802401c
 80156e4:	2002d3b4 	.word	0x2002d3b4
 80156e8:	08024020 	.word	0x08024020
 80156ec:	2002d3cc 	.word	0x2002d3cc
 80156f0:	08024028 	.word	0x08024028
 80156f4:	2002d3e4 	.word	0x2002d3e4
 80156f8:	0802402c 	.word	0x0802402c
 80156fc:	2002d3fc 	.word	0x2002d3fc
 8015700:	08024030 	.word	0x08024030
 8015704:	2002d414 	.word	0x2002d414
 8015708:	2002d458 	.word	0x2002d458

0801570c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801570c:	b580      	push	{r7, lr}
 801570e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015710:	f00b fae0 	bl	8020cd4 <rand>
 8015714:	4603      	mov	r3, r0
 8015716:	b29b      	uxth	r3, r3
 8015718:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801571c:	b29b      	uxth	r3, r3
 801571e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8015722:	b29a      	uxth	r2, r3
 8015724:	4b01      	ldr	r3, [pc, #4]	@ (801572c <tcp_init+0x20>)
 8015726:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015728:	bf00      	nop
 801572a:	bd80      	pop	{r7, pc}
 801572c:	20000068 	.word	0x20000068

08015730 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8015730:	b580      	push	{r7, lr}
 8015732:	b082      	sub	sp, #8
 8015734:	af00      	add	r7, sp, #0
 8015736:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	7d1b      	ldrb	r3, [r3, #20]
 801573c:	2b01      	cmp	r3, #1
 801573e:	d105      	bne.n	801574c <tcp_free+0x1c>
 8015740:	4b06      	ldr	r3, [pc, #24]	@ (801575c <tcp_free+0x2c>)
 8015742:	22d4      	movs	r2, #212	@ 0xd4
 8015744:	4906      	ldr	r1, [pc, #24]	@ (8015760 <tcp_free+0x30>)
 8015746:	4807      	ldr	r0, [pc, #28]	@ (8015764 <tcp_free+0x34>)
 8015748:	f00b fbc4 	bl	8020ed4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801574c:	6879      	ldr	r1, [r7, #4]
 801574e:	2001      	movs	r0, #1
 8015750:	f7fe fba2 	bl	8013e98 <memp_free>
}
 8015754:	bf00      	nop
 8015756:	3708      	adds	r7, #8
 8015758:	46bd      	mov	sp, r7
 801575a:	bd80      	pop	{r7, pc}
 801575c:	080240b0 	.word	0x080240b0
 8015760:	080240e0 	.word	0x080240e0
 8015764:	080240f4 	.word	0x080240f4

08015768 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	7d1b      	ldrb	r3, [r3, #20]
 8015774:	2b01      	cmp	r3, #1
 8015776:	d105      	bne.n	8015784 <tcp_free_listen+0x1c>
 8015778:	4b06      	ldr	r3, [pc, #24]	@ (8015794 <tcp_free_listen+0x2c>)
 801577a:	22df      	movs	r2, #223	@ 0xdf
 801577c:	4906      	ldr	r1, [pc, #24]	@ (8015798 <tcp_free_listen+0x30>)
 801577e:	4807      	ldr	r0, [pc, #28]	@ (801579c <tcp_free_listen+0x34>)
 8015780:	f00b fba8 	bl	8020ed4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8015784:	6879      	ldr	r1, [r7, #4]
 8015786:	2002      	movs	r0, #2
 8015788:	f7fe fb86 	bl	8013e98 <memp_free>
}
 801578c:	bf00      	nop
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}
 8015794:	080240b0 	.word	0x080240b0
 8015798:	0802411c 	.word	0x0802411c
 801579c:	080240f4 	.word	0x080240f4

080157a0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80157a4:	f001 f8f6 	bl	8016994 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80157a8:	4b07      	ldr	r3, [pc, #28]	@ (80157c8 <tcp_tmr+0x28>)
 80157aa:	781b      	ldrb	r3, [r3, #0]
 80157ac:	3301      	adds	r3, #1
 80157ae:	b2da      	uxtb	r2, r3
 80157b0:	4b05      	ldr	r3, [pc, #20]	@ (80157c8 <tcp_tmr+0x28>)
 80157b2:	701a      	strb	r2, [r3, #0]
 80157b4:	4b04      	ldr	r3, [pc, #16]	@ (80157c8 <tcp_tmr+0x28>)
 80157b6:	781b      	ldrb	r3, [r3, #0]
 80157b8:	f003 0301 	and.w	r3, r3, #1
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d001      	beq.n	80157c4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80157c0:	f000 fda6 	bl	8016310 <tcp_slowtmr>
  }
}
 80157c4:	bf00      	nop
 80157c6:	bd80      	pop	{r7, pc}
 80157c8:	2002d481 	.word	0x2002d481

080157cc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80157cc:	b580      	push	{r7, lr}
 80157ce:	b084      	sub	sp, #16
 80157d0:	af00      	add	r7, sp, #0
 80157d2:	6078      	str	r0, [r7, #4]
 80157d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d105      	bne.n	80157e8 <tcp_remove_listener+0x1c>
 80157dc:	4b0d      	ldr	r3, [pc, #52]	@ (8015814 <tcp_remove_listener+0x48>)
 80157de:	22ff      	movs	r2, #255	@ 0xff
 80157e0:	490d      	ldr	r1, [pc, #52]	@ (8015818 <tcp_remove_listener+0x4c>)
 80157e2:	480e      	ldr	r0, [pc, #56]	@ (801581c <tcp_remove_listener+0x50>)
 80157e4:	f00b fb76 	bl	8020ed4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	60fb      	str	r3, [r7, #12]
 80157ec:	e00a      	b.n	8015804 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80157f2:	683a      	ldr	r2, [r7, #0]
 80157f4:	429a      	cmp	r2, r3
 80157f6:	d102      	bne.n	80157fe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	2200      	movs	r2, #0
 80157fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	68db      	ldr	r3, [r3, #12]
 8015802:	60fb      	str	r3, [r7, #12]
 8015804:	68fb      	ldr	r3, [r7, #12]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1f1      	bne.n	80157ee <tcp_remove_listener+0x22>
    }
  }
}
 801580a:	bf00      	nop
 801580c:	bf00      	nop
 801580e:	3710      	adds	r7, #16
 8015810:	46bd      	mov	sp, r7
 8015812:	bd80      	pop	{r7, pc}
 8015814:	080240b0 	.word	0x080240b0
 8015818:	08024138 	.word	0x08024138
 801581c:	080240f4 	.word	0x080240f4

08015820 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b084      	sub	sp, #16
 8015824:	af00      	add	r7, sp, #0
 8015826:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d106      	bne.n	801583c <tcp_listen_closed+0x1c>
 801582e:	4b14      	ldr	r3, [pc, #80]	@ (8015880 <tcp_listen_closed+0x60>)
 8015830:	f240 1211 	movw	r2, #273	@ 0x111
 8015834:	4913      	ldr	r1, [pc, #76]	@ (8015884 <tcp_listen_closed+0x64>)
 8015836:	4814      	ldr	r0, [pc, #80]	@ (8015888 <tcp_listen_closed+0x68>)
 8015838:	f00b fb4c 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	7d1b      	ldrb	r3, [r3, #20]
 8015840:	2b01      	cmp	r3, #1
 8015842:	d006      	beq.n	8015852 <tcp_listen_closed+0x32>
 8015844:	4b0e      	ldr	r3, [pc, #56]	@ (8015880 <tcp_listen_closed+0x60>)
 8015846:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801584a:	4910      	ldr	r1, [pc, #64]	@ (801588c <tcp_listen_closed+0x6c>)
 801584c:	480e      	ldr	r0, [pc, #56]	@ (8015888 <tcp_listen_closed+0x68>)
 801584e:	f00b fb41 	bl	8020ed4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8015852:	2301      	movs	r3, #1
 8015854:	60fb      	str	r3, [r7, #12]
 8015856:	e00b      	b.n	8015870 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8015858:	4a0d      	ldr	r2, [pc, #52]	@ (8015890 <tcp_listen_closed+0x70>)
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015860:	681b      	ldr	r3, [r3, #0]
 8015862:	6879      	ldr	r1, [r7, #4]
 8015864:	4618      	mov	r0, r3
 8015866:	f7ff ffb1 	bl	80157cc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	3301      	adds	r3, #1
 801586e:	60fb      	str	r3, [r7, #12]
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	2b03      	cmp	r3, #3
 8015874:	d9f0      	bls.n	8015858 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8015876:	bf00      	nop
 8015878:	bf00      	nop
 801587a:	3710      	adds	r7, #16
 801587c:	46bd      	mov	sp, r7
 801587e:	bd80      	pop	{r7, pc}
 8015880:	080240b0 	.word	0x080240b0
 8015884:	08024160 	.word	0x08024160
 8015888:	080240f4 	.word	0x080240f4
 801588c:	0802416c 	.word	0x0802416c
 8015890:	08026d94 	.word	0x08026d94

08015894 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8015894:	b5b0      	push	{r4, r5, r7, lr}
 8015896:	b088      	sub	sp, #32
 8015898:	af04      	add	r7, sp, #16
 801589a:	6078      	str	r0, [r7, #4]
 801589c:	460b      	mov	r3, r1
 801589e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d106      	bne.n	80158b4 <tcp_close_shutdown+0x20>
 80158a6:	4b63      	ldr	r3, [pc, #396]	@ (8015a34 <tcp_close_shutdown+0x1a0>)
 80158a8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80158ac:	4962      	ldr	r1, [pc, #392]	@ (8015a38 <tcp_close_shutdown+0x1a4>)
 80158ae:	4863      	ldr	r0, [pc, #396]	@ (8015a3c <tcp_close_shutdown+0x1a8>)
 80158b0:	f00b fb10 	bl	8020ed4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80158b4:	78fb      	ldrb	r3, [r7, #3]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d066      	beq.n	8015988 <tcp_close_shutdown+0xf4>
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	7d1b      	ldrb	r3, [r3, #20]
 80158be:	2b04      	cmp	r3, #4
 80158c0:	d003      	beq.n	80158ca <tcp_close_shutdown+0x36>
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	7d1b      	ldrb	r3, [r3, #20]
 80158c6:	2b07      	cmp	r3, #7
 80158c8:	d15e      	bne.n	8015988 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d104      	bne.n	80158dc <tcp_close_shutdown+0x48>
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80158d6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80158da:	d055      	beq.n	8015988 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	8b5b      	ldrh	r3, [r3, #26]
 80158e0:	f003 0310 	and.w	r3, r3, #16
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d106      	bne.n	80158f6 <tcp_close_shutdown+0x62>
 80158e8:	4b52      	ldr	r3, [pc, #328]	@ (8015a34 <tcp_close_shutdown+0x1a0>)
 80158ea:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80158ee:	4954      	ldr	r1, [pc, #336]	@ (8015a40 <tcp_close_shutdown+0x1ac>)
 80158f0:	4852      	ldr	r0, [pc, #328]	@ (8015a3c <tcp_close_shutdown+0x1a8>)
 80158f2:	f00b faef 	bl	8020ed4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80158fe:	687d      	ldr	r5, [r7, #4]
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	3304      	adds	r3, #4
 8015904:	687a      	ldr	r2, [r7, #4]
 8015906:	8ad2      	ldrh	r2, [r2, #22]
 8015908:	6879      	ldr	r1, [r7, #4]
 801590a:	8b09      	ldrh	r1, [r1, #24]
 801590c:	9102      	str	r1, [sp, #8]
 801590e:	9201      	str	r2, [sp, #4]
 8015910:	9300      	str	r3, [sp, #0]
 8015912:	462b      	mov	r3, r5
 8015914:	4622      	mov	r2, r4
 8015916:	4601      	mov	r1, r0
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f005 ff57 	bl	801b7cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f001 fc12 	bl	8017148 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8015924:	4b47      	ldr	r3, [pc, #284]	@ (8015a44 <tcp_close_shutdown+0x1b0>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	687a      	ldr	r2, [r7, #4]
 801592a:	429a      	cmp	r2, r3
 801592c:	d105      	bne.n	801593a <tcp_close_shutdown+0xa6>
 801592e:	4b45      	ldr	r3, [pc, #276]	@ (8015a44 <tcp_close_shutdown+0x1b0>)
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	4a43      	ldr	r2, [pc, #268]	@ (8015a44 <tcp_close_shutdown+0x1b0>)
 8015936:	6013      	str	r3, [r2, #0]
 8015938:	e013      	b.n	8015962 <tcp_close_shutdown+0xce>
 801593a:	4b42      	ldr	r3, [pc, #264]	@ (8015a44 <tcp_close_shutdown+0x1b0>)
 801593c:	681b      	ldr	r3, [r3, #0]
 801593e:	60fb      	str	r3, [r7, #12]
 8015940:	e00c      	b.n	801595c <tcp_close_shutdown+0xc8>
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	68db      	ldr	r3, [r3, #12]
 8015946:	687a      	ldr	r2, [r7, #4]
 8015948:	429a      	cmp	r2, r3
 801594a:	d104      	bne.n	8015956 <tcp_close_shutdown+0xc2>
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	68da      	ldr	r2, [r3, #12]
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	60da      	str	r2, [r3, #12]
 8015954:	e005      	b.n	8015962 <tcp_close_shutdown+0xce>
 8015956:	68fb      	ldr	r3, [r7, #12]
 8015958:	68db      	ldr	r3, [r3, #12]
 801595a:	60fb      	str	r3, [r7, #12]
 801595c:	68fb      	ldr	r3, [r7, #12]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d1ef      	bne.n	8015942 <tcp_close_shutdown+0xae>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2200      	movs	r2, #0
 8015966:	60da      	str	r2, [r3, #12]
 8015968:	4b37      	ldr	r3, [pc, #220]	@ (8015a48 <tcp_close_shutdown+0x1b4>)
 801596a:	2201      	movs	r2, #1
 801596c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801596e:	4b37      	ldr	r3, [pc, #220]	@ (8015a4c <tcp_close_shutdown+0x1b8>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	687a      	ldr	r2, [r7, #4]
 8015974:	429a      	cmp	r2, r3
 8015976:	d102      	bne.n	801597e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8015978:	f004 f912 	bl	8019ba0 <tcp_trigger_input_pcb_close>
 801597c:	e002      	b.n	8015984 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801597e:	6878      	ldr	r0, [r7, #4]
 8015980:	f7ff fed6 	bl	8015730 <tcp_free>
      }
      return ERR_OK;
 8015984:	2300      	movs	r3, #0
 8015986:	e050      	b.n	8015a2a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	7d1b      	ldrb	r3, [r3, #20]
 801598c:	2b02      	cmp	r3, #2
 801598e:	d03b      	beq.n	8015a08 <tcp_close_shutdown+0x174>
 8015990:	2b02      	cmp	r3, #2
 8015992:	dc44      	bgt.n	8015a1e <tcp_close_shutdown+0x18a>
 8015994:	2b00      	cmp	r3, #0
 8015996:	d002      	beq.n	801599e <tcp_close_shutdown+0x10a>
 8015998:	2b01      	cmp	r3, #1
 801599a:	d02a      	beq.n	80159f2 <tcp_close_shutdown+0x15e>
 801599c:	e03f      	b.n	8015a1e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	8adb      	ldrh	r3, [r3, #22]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d021      	beq.n	80159ea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80159a6:	4b2a      	ldr	r3, [pc, #168]	@ (8015a50 <tcp_close_shutdown+0x1bc>)
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	687a      	ldr	r2, [r7, #4]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d105      	bne.n	80159bc <tcp_close_shutdown+0x128>
 80159b0:	4b27      	ldr	r3, [pc, #156]	@ (8015a50 <tcp_close_shutdown+0x1bc>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	68db      	ldr	r3, [r3, #12]
 80159b6:	4a26      	ldr	r2, [pc, #152]	@ (8015a50 <tcp_close_shutdown+0x1bc>)
 80159b8:	6013      	str	r3, [r2, #0]
 80159ba:	e013      	b.n	80159e4 <tcp_close_shutdown+0x150>
 80159bc:	4b24      	ldr	r3, [pc, #144]	@ (8015a50 <tcp_close_shutdown+0x1bc>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	60bb      	str	r3, [r7, #8]
 80159c2:	e00c      	b.n	80159de <tcp_close_shutdown+0x14a>
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	68db      	ldr	r3, [r3, #12]
 80159c8:	687a      	ldr	r2, [r7, #4]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d104      	bne.n	80159d8 <tcp_close_shutdown+0x144>
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	68da      	ldr	r2, [r3, #12]
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	60da      	str	r2, [r3, #12]
 80159d6:	e005      	b.n	80159e4 <tcp_close_shutdown+0x150>
 80159d8:	68bb      	ldr	r3, [r7, #8]
 80159da:	68db      	ldr	r3, [r3, #12]
 80159dc:	60bb      	str	r3, [r7, #8]
 80159de:	68bb      	ldr	r3, [r7, #8]
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d1ef      	bne.n	80159c4 <tcp_close_shutdown+0x130>
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2200      	movs	r2, #0
 80159e8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80159ea:	6878      	ldr	r0, [r7, #4]
 80159ec:	f7ff fea0 	bl	8015730 <tcp_free>
      break;
 80159f0:	e01a      	b.n	8015a28 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80159f2:	6878      	ldr	r0, [r7, #4]
 80159f4:	f7ff ff14 	bl	8015820 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80159f8:	6879      	ldr	r1, [r7, #4]
 80159fa:	4816      	ldr	r0, [pc, #88]	@ (8015a54 <tcp_close_shutdown+0x1c0>)
 80159fc:	f001 fbf4 	bl	80171e8 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f7ff feb1 	bl	8015768 <tcp_free_listen>
      break;
 8015a06:	e00f      	b.n	8015a28 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015a08:	6879      	ldr	r1, [r7, #4]
 8015a0a:	480e      	ldr	r0, [pc, #56]	@ (8015a44 <tcp_close_shutdown+0x1b0>)
 8015a0c:	f001 fbec 	bl	80171e8 <tcp_pcb_remove>
 8015a10:	4b0d      	ldr	r3, [pc, #52]	@ (8015a48 <tcp_close_shutdown+0x1b4>)
 8015a12:	2201      	movs	r2, #1
 8015a14:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f7ff fe8a 	bl	8015730 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8015a1c:	e004      	b.n	8015a28 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8015a1e:	6878      	ldr	r0, [r7, #4]
 8015a20:	f000 f81a 	bl	8015a58 <tcp_close_shutdown_fin>
 8015a24:	4603      	mov	r3, r0
 8015a26:	e000      	b.n	8015a2a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8015a28:	2300      	movs	r3, #0
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3710      	adds	r7, #16
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bdb0      	pop	{r4, r5, r7, pc}
 8015a32:	bf00      	nop
 8015a34:	080240b0 	.word	0x080240b0
 8015a38:	08024184 	.word	0x08024184
 8015a3c:	080240f4 	.word	0x080240f4
 8015a40:	080241a4 	.word	0x080241a4
 8015a44:	2002d478 	.word	0x2002d478
 8015a48:	2002d480 	.word	0x2002d480
 8015a4c:	2002d4bc 	.word	0x2002d4bc
 8015a50:	2002d470 	.word	0x2002d470
 8015a54:	2002d474 	.word	0x2002d474

08015a58 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b084      	sub	sp, #16
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d106      	bne.n	8015a74 <tcp_close_shutdown_fin+0x1c>
 8015a66:	4b2e      	ldr	r3, [pc, #184]	@ (8015b20 <tcp_close_shutdown_fin+0xc8>)
 8015a68:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8015a6c:	492d      	ldr	r1, [pc, #180]	@ (8015b24 <tcp_close_shutdown_fin+0xcc>)
 8015a6e:	482e      	ldr	r0, [pc, #184]	@ (8015b28 <tcp_close_shutdown_fin+0xd0>)
 8015a70:	f00b fa30 	bl	8020ed4 <iprintf>

  switch (pcb->state) {
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	7d1b      	ldrb	r3, [r3, #20]
 8015a78:	2b07      	cmp	r3, #7
 8015a7a:	d020      	beq.n	8015abe <tcp_close_shutdown_fin+0x66>
 8015a7c:	2b07      	cmp	r3, #7
 8015a7e:	dc2b      	bgt.n	8015ad8 <tcp_close_shutdown_fin+0x80>
 8015a80:	2b03      	cmp	r3, #3
 8015a82:	d002      	beq.n	8015a8a <tcp_close_shutdown_fin+0x32>
 8015a84:	2b04      	cmp	r3, #4
 8015a86:	d00d      	beq.n	8015aa4 <tcp_close_shutdown_fin+0x4c>
 8015a88:	e026      	b.n	8015ad8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f004 ff7a 	bl	801a984 <tcp_send_fin>
 8015a90:	4603      	mov	r3, r0
 8015a92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d11f      	bne.n	8015adc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2205      	movs	r2, #5
 8015aa0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015aa2:	e01b      	b.n	8015adc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8015aa4:	6878      	ldr	r0, [r7, #4]
 8015aa6:	f004 ff6d 	bl	801a984 <tcp_send_fin>
 8015aaa:	4603      	mov	r3, r0
 8015aac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d114      	bne.n	8015ae0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	2205      	movs	r2, #5
 8015aba:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015abc:	e010      	b.n	8015ae0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f004 ff60 	bl	801a984 <tcp_send_fin>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8015ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d109      	bne.n	8015ae4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2209      	movs	r2, #9
 8015ad4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015ad6:	e005      	b.n	8015ae4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8015ad8:	2300      	movs	r3, #0
 8015ada:	e01c      	b.n	8015b16 <tcp_close_shutdown_fin+0xbe>
      break;
 8015adc:	bf00      	nop
 8015ade:	e002      	b.n	8015ae6 <tcp_close_shutdown_fin+0x8e>
      break;
 8015ae0:	bf00      	nop
 8015ae2:	e000      	b.n	8015ae6 <tcp_close_shutdown_fin+0x8e>
      break;
 8015ae4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8015ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d103      	bne.n	8015af6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f005 f898 	bl	801ac24 <tcp_output>
 8015af4:	e00d      	b.n	8015b12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8015af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015afa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015afe:	d108      	bne.n	8015b12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	8b5b      	ldrh	r3, [r3, #26]
 8015b04:	f043 0308 	orr.w	r3, r3, #8
 8015b08:	b29a      	uxth	r2, r3
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	e001      	b.n	8015b16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8015b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015b16:	4618      	mov	r0, r3
 8015b18:	3710      	adds	r7, #16
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}
 8015b1e:	bf00      	nop
 8015b20:	080240b0 	.word	0x080240b0
 8015b24:	08024160 	.word	0x08024160
 8015b28:	080240f4 	.word	0x080240f4

08015b2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b082      	sub	sp, #8
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d109      	bne.n	8015b4e <tcp_close+0x22>
 8015b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8015b78 <tcp_close+0x4c>)
 8015b3c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8015b40:	490e      	ldr	r1, [pc, #56]	@ (8015b7c <tcp_close+0x50>)
 8015b42:	480f      	ldr	r0, [pc, #60]	@ (8015b80 <tcp_close+0x54>)
 8015b44:	f00b f9c6 	bl	8020ed4 <iprintf>
 8015b48:	f06f 030f 	mvn.w	r3, #15
 8015b4c:	e00f      	b.n	8015b6e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	7d1b      	ldrb	r3, [r3, #20]
 8015b52:	2b01      	cmp	r3, #1
 8015b54:	d006      	beq.n	8015b64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	8b5b      	ldrh	r3, [r3, #26]
 8015b5a:	f043 0310 	orr.w	r3, r3, #16
 8015b5e:	b29a      	uxth	r2, r3
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8015b64:	2101      	movs	r1, #1
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f7ff fe94 	bl	8015894 <tcp_close_shutdown>
 8015b6c:	4603      	mov	r3, r0
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3708      	adds	r7, #8
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	080240b0 	.word	0x080240b0
 8015b7c:	080241c0 	.word	0x080241c0
 8015b80:	080240f4 	.word	0x080240f4

08015b84 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b084      	sub	sp, #16
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	60f8      	str	r0, [r7, #12]
 8015b8c:	60b9      	str	r1, [r7, #8]
 8015b8e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d109      	bne.n	8015baa <tcp_shutdown+0x26>
 8015b96:	4b26      	ldr	r3, [pc, #152]	@ (8015c30 <tcp_shutdown+0xac>)
 8015b98:	f240 2207 	movw	r2, #519	@ 0x207
 8015b9c:	4925      	ldr	r1, [pc, #148]	@ (8015c34 <tcp_shutdown+0xb0>)
 8015b9e:	4826      	ldr	r0, [pc, #152]	@ (8015c38 <tcp_shutdown+0xb4>)
 8015ba0:	f00b f998 	bl	8020ed4 <iprintf>
 8015ba4:	f06f 030f 	mvn.w	r3, #15
 8015ba8:	e03d      	b.n	8015c26 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8015baa:	68fb      	ldr	r3, [r7, #12]
 8015bac:	7d1b      	ldrb	r3, [r3, #20]
 8015bae:	2b01      	cmp	r3, #1
 8015bb0:	d102      	bne.n	8015bb8 <tcp_shutdown+0x34>
    return ERR_CONN;
 8015bb2:	f06f 030a 	mvn.w	r3, #10
 8015bb6:	e036      	b.n	8015c26 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8015bb8:	68bb      	ldr	r3, [r7, #8]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d01b      	beq.n	8015bf6 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8015bbe:	68fb      	ldr	r3, [r7, #12]
 8015bc0:	8b5b      	ldrh	r3, [r3, #26]
 8015bc2:	f043 0310 	orr.w	r3, r3, #16
 8015bc6:	b29a      	uxth	r2, r3
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d005      	beq.n	8015bde <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8015bd2:	2101      	movs	r1, #1
 8015bd4:	68f8      	ldr	r0, [r7, #12]
 8015bd6:	f7ff fe5d 	bl	8015894 <tcp_close_shutdown>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	e023      	b.n	8015c26 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d007      	beq.n	8015bf6 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8015bea:	4618      	mov	r0, r3
 8015bec:	f7ff f93a 	bl	8014e64 <pbuf_free>
      pcb->refused_data = NULL;
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	2200      	movs	r2, #0
 8015bf4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d013      	beq.n	8015c24 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	7d1b      	ldrb	r3, [r3, #20]
 8015c00:	2b04      	cmp	r3, #4
 8015c02:	dc02      	bgt.n	8015c0a <tcp_shutdown+0x86>
 8015c04:	2b03      	cmp	r3, #3
 8015c06:	da02      	bge.n	8015c0e <tcp_shutdown+0x8a>
 8015c08:	e009      	b.n	8015c1e <tcp_shutdown+0x9a>
 8015c0a:	2b07      	cmp	r3, #7
 8015c0c:	d107      	bne.n	8015c1e <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8015c0e:	68bb      	ldr	r3, [r7, #8]
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	4619      	mov	r1, r3
 8015c14:	68f8      	ldr	r0, [r7, #12]
 8015c16:	f7ff fe3d 	bl	8015894 <tcp_close_shutdown>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	e003      	b.n	8015c26 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8015c1e:	f06f 030a 	mvn.w	r3, #10
 8015c22:	e000      	b.n	8015c26 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015c24:	2300      	movs	r3, #0
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3710      	adds	r7, #16
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	080240b0 	.word	0x080240b0
 8015c34:	080241d8 	.word	0x080241d8
 8015c38:	080240f4 	.word	0x080240f4

08015c3c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b08e      	sub	sp, #56	@ 0x38
 8015c40:	af04      	add	r7, sp, #16
 8015c42:	6078      	str	r0, [r7, #4]
 8015c44:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d107      	bne.n	8015c5c <tcp_abandon+0x20>
 8015c4c:	4b52      	ldr	r3, [pc, #328]	@ (8015d98 <tcp_abandon+0x15c>)
 8015c4e:	f240 223d 	movw	r2, #573	@ 0x23d
 8015c52:	4952      	ldr	r1, [pc, #328]	@ (8015d9c <tcp_abandon+0x160>)
 8015c54:	4852      	ldr	r0, [pc, #328]	@ (8015da0 <tcp_abandon+0x164>)
 8015c56:	f00b f93d 	bl	8020ed4 <iprintf>
 8015c5a:	e099      	b.n	8015d90 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	7d1b      	ldrb	r3, [r3, #20]
 8015c60:	2b01      	cmp	r3, #1
 8015c62:	d106      	bne.n	8015c72 <tcp_abandon+0x36>
 8015c64:	4b4c      	ldr	r3, [pc, #304]	@ (8015d98 <tcp_abandon+0x15c>)
 8015c66:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8015c6a:	494e      	ldr	r1, [pc, #312]	@ (8015da4 <tcp_abandon+0x168>)
 8015c6c:	484c      	ldr	r0, [pc, #304]	@ (8015da0 <tcp_abandon+0x164>)
 8015c6e:	f00b f931 	bl	8020ed4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	7d1b      	ldrb	r3, [r3, #20]
 8015c76:	2b0a      	cmp	r3, #10
 8015c78:	d107      	bne.n	8015c8a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015c7a:	6879      	ldr	r1, [r7, #4]
 8015c7c:	484a      	ldr	r0, [pc, #296]	@ (8015da8 <tcp_abandon+0x16c>)
 8015c7e:	f001 fab3 	bl	80171e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8015c82:	6878      	ldr	r0, [r7, #4]
 8015c84:	f7ff fd54 	bl	8015730 <tcp_free>
 8015c88:	e082      	b.n	8015d90 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8015c8e:	2300      	movs	r3, #0
 8015c90:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015c96:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c9c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015ca4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	691b      	ldr	r3, [r3, #16]
 8015caa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	7d1b      	ldrb	r3, [r3, #20]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d126      	bne.n	8015d02 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	8adb      	ldrh	r3, [r3, #22]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d02e      	beq.n	8015d1a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8015cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8015dac <tcp_abandon+0x170>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	687a      	ldr	r2, [r7, #4]
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	d105      	bne.n	8015cd2 <tcp_abandon+0x96>
 8015cc6:	4b39      	ldr	r3, [pc, #228]	@ (8015dac <tcp_abandon+0x170>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	68db      	ldr	r3, [r3, #12]
 8015ccc:	4a37      	ldr	r2, [pc, #220]	@ (8015dac <tcp_abandon+0x170>)
 8015cce:	6013      	str	r3, [r2, #0]
 8015cd0:	e013      	b.n	8015cfa <tcp_abandon+0xbe>
 8015cd2:	4b36      	ldr	r3, [pc, #216]	@ (8015dac <tcp_abandon+0x170>)
 8015cd4:	681b      	ldr	r3, [r3, #0]
 8015cd6:	61fb      	str	r3, [r7, #28]
 8015cd8:	e00c      	b.n	8015cf4 <tcp_abandon+0xb8>
 8015cda:	69fb      	ldr	r3, [r7, #28]
 8015cdc:	68db      	ldr	r3, [r3, #12]
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d104      	bne.n	8015cee <tcp_abandon+0xb2>
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	68da      	ldr	r2, [r3, #12]
 8015ce8:	69fb      	ldr	r3, [r7, #28]
 8015cea:	60da      	str	r2, [r3, #12]
 8015cec:	e005      	b.n	8015cfa <tcp_abandon+0xbe>
 8015cee:	69fb      	ldr	r3, [r7, #28]
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	61fb      	str	r3, [r7, #28]
 8015cf4:	69fb      	ldr	r3, [r7, #28]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d1ef      	bne.n	8015cda <tcp_abandon+0x9e>
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	60da      	str	r2, [r3, #12]
 8015d00:	e00b      	b.n	8015d1a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8015d02:	683b      	ldr	r3, [r7, #0]
 8015d04:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	8adb      	ldrh	r3, [r3, #22]
 8015d0a:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015d0c:	6879      	ldr	r1, [r7, #4]
 8015d0e:	4828      	ldr	r0, [pc, #160]	@ (8015db0 <tcp_abandon+0x174>)
 8015d10:	f001 fa6a 	bl	80171e8 <tcp_pcb_remove>
 8015d14:	4b27      	ldr	r3, [pc, #156]	@ (8015db4 <tcp_abandon+0x178>)
 8015d16:	2201      	movs	r2, #1
 8015d18:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d004      	beq.n	8015d2c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015d26:	4618      	mov	r0, r3
 8015d28:	f000 ff14 	bl	8016b54 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d004      	beq.n	8015d3e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f000 ff0b 	bl	8016b54 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d004      	beq.n	8015d50 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015d4a:	4618      	mov	r0, r3
 8015d4c:	f000 ff02 	bl	8016b54 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8015d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d00e      	beq.n	8015d74 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015d56:	6879      	ldr	r1, [r7, #4]
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	3304      	adds	r3, #4
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	8b12      	ldrh	r2, [r2, #24]
 8015d60:	9202      	str	r2, [sp, #8]
 8015d62:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8015d64:	9201      	str	r2, [sp, #4]
 8015d66:	9300      	str	r3, [sp, #0]
 8015d68:	460b      	mov	r3, r1
 8015d6a:	697a      	ldr	r2, [r7, #20]
 8015d6c:	69b9      	ldr	r1, [r7, #24]
 8015d6e:	6878      	ldr	r0, [r7, #4]
 8015d70:	f005 fd2c 	bl	801b7cc <tcp_rst>
    }
    last_state = pcb->state;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	7d1b      	ldrb	r3, [r3, #20]
 8015d78:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015d7a:	6878      	ldr	r0, [r7, #4]
 8015d7c:	f7ff fcd8 	bl	8015730 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d004      	beq.n	8015d90 <tcp_abandon+0x154>
 8015d86:	693b      	ldr	r3, [r7, #16]
 8015d88:	f06f 010c 	mvn.w	r1, #12
 8015d8c:	68f8      	ldr	r0, [r7, #12]
 8015d8e:	4798      	blx	r3
  }
}
 8015d90:	3728      	adds	r7, #40	@ 0x28
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
 8015d96:	bf00      	nop
 8015d98:	080240b0 	.word	0x080240b0
 8015d9c:	080241f4 	.word	0x080241f4
 8015da0:	080240f4 	.word	0x080240f4
 8015da4:	08024210 	.word	0x08024210
 8015da8:	2002d47c 	.word	0x2002d47c
 8015dac:	2002d470 	.word	0x2002d470
 8015db0:	2002d478 	.word	0x2002d478
 8015db4:	2002d480 	.word	0x2002d480

08015db8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8015dc0:	2101      	movs	r1, #1
 8015dc2:	6878      	ldr	r0, [r7, #4]
 8015dc4:	f7ff ff3a 	bl	8015c3c <tcp_abandon>
}
 8015dc8:	bf00      	nop
 8015dca:	3708      	adds	r7, #8
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b088      	sub	sp, #32
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	60f8      	str	r0, [r7, #12]
 8015dd8:	60b9      	str	r1, [r7, #8]
 8015dda:	4613      	mov	r3, r2
 8015ddc:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8015dde:	2304      	movs	r3, #4
 8015de0:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d101      	bne.n	8015dec <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015de8:	4b3e      	ldr	r3, [pc, #248]	@ (8015ee4 <tcp_bind+0x114>)
 8015dea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d109      	bne.n	8015e06 <tcp_bind+0x36>
 8015df2:	4b3d      	ldr	r3, [pc, #244]	@ (8015ee8 <tcp_bind+0x118>)
 8015df4:	f240 22a9 	movw	r2, #681	@ 0x2a9
 8015df8:	493c      	ldr	r1, [pc, #240]	@ (8015eec <tcp_bind+0x11c>)
 8015dfa:	483d      	ldr	r0, [pc, #244]	@ (8015ef0 <tcp_bind+0x120>)
 8015dfc:	f00b f86a 	bl	8020ed4 <iprintf>
 8015e00:	f06f 030f 	mvn.w	r3, #15
 8015e04:	e06a      	b.n	8015edc <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	7d1b      	ldrb	r3, [r3, #20]
 8015e0a:	2b00      	cmp	r3, #0
 8015e0c:	d009      	beq.n	8015e22 <tcp_bind+0x52>
 8015e0e:	4b36      	ldr	r3, [pc, #216]	@ (8015ee8 <tcp_bind+0x118>)
 8015e10:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8015e14:	4937      	ldr	r1, [pc, #220]	@ (8015ef4 <tcp_bind+0x124>)
 8015e16:	4836      	ldr	r0, [pc, #216]	@ (8015ef0 <tcp_bind+0x120>)
 8015e18:	f00b f85c 	bl	8020ed4 <iprintf>
 8015e1c:	f06f 0305 	mvn.w	r3, #5
 8015e20:	e05c      	b.n	8015edc <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8015e22:	88fb      	ldrh	r3, [r7, #6]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d109      	bne.n	8015e3c <tcp_bind+0x6c>
    port = tcp_new_port();
 8015e28:	f000 f914 	bl	8016054 <tcp_new_port>
 8015e2c:	4603      	mov	r3, r0
 8015e2e:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015e30:	88fb      	ldrh	r3, [r7, #6]
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d135      	bne.n	8015ea2 <tcp_bind+0xd2>
      return ERR_BUF;
 8015e36:	f06f 0301 	mvn.w	r3, #1
 8015e3a:	e04f      	b.n	8015edc <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015e3c:	2300      	movs	r3, #0
 8015e3e:	61fb      	str	r3, [r7, #28]
 8015e40:	e02b      	b.n	8015e9a <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015e42:	4a2d      	ldr	r2, [pc, #180]	@ (8015ef8 <tcp_bind+0x128>)
 8015e44:	69fb      	ldr	r3, [r7, #28]
 8015e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	61bb      	str	r3, [r7, #24]
 8015e4e:	e01e      	b.n	8015e8e <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8015e50:	69bb      	ldr	r3, [r7, #24]
 8015e52:	8adb      	ldrh	r3, [r3, #22]
 8015e54:	88fa      	ldrh	r2, [r7, #6]
 8015e56:	429a      	cmp	r2, r3
 8015e58:	d116      	bne.n	8015e88 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015e5a:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d010      	beq.n	8015e82 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8015e60:	69bb      	ldr	r3, [r7, #24]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d00c      	beq.n	8015e82 <tcp_bind+0xb2>
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d009      	beq.n	8015e82 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8015e6e:	68bb      	ldr	r3, [r7, #8]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d005      	beq.n	8015e82 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015e76:	69bb      	ldr	r3, [r7, #24]
 8015e78:	681a      	ldr	r2, [r3, #0]
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d102      	bne.n	8015e88 <tcp_bind+0xb8>
              return ERR_USE;
 8015e82:	f06f 0307 	mvn.w	r3, #7
 8015e86:	e029      	b.n	8015edc <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8015e88:	69bb      	ldr	r3, [r7, #24]
 8015e8a:	68db      	ldr	r3, [r3, #12]
 8015e8c:	61bb      	str	r3, [r7, #24]
 8015e8e:	69bb      	ldr	r3, [r7, #24]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d1dd      	bne.n	8015e50 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8015e94:	69fb      	ldr	r3, [r7, #28]
 8015e96:	3301      	adds	r3, #1
 8015e98:	61fb      	str	r3, [r7, #28]
 8015e9a:	69fa      	ldr	r2, [r7, #28]
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	429a      	cmp	r2, r3
 8015ea0:	dbcf      	blt.n	8015e42 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8015ea2:	68bb      	ldr	r3, [r7, #8]
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d00c      	beq.n	8015ec2 <tcp_bind+0xf2>
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d008      	beq.n	8015ec2 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8015eb0:	68bb      	ldr	r3, [r7, #8]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d002      	beq.n	8015ebc <tcp_bind+0xec>
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	e000      	b.n	8015ebe <tcp_bind+0xee>
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	68fa      	ldr	r2, [r7, #12]
 8015ec0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	88fa      	ldrh	r2, [r7, #6]
 8015ec6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8015ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8015efc <tcp_bind+0x12c>)
 8015eca:	681a      	ldr	r2, [r3, #0]
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	60da      	str	r2, [r3, #12]
 8015ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8015efc <tcp_bind+0x12c>)
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	6013      	str	r3, [r2, #0]
 8015ed6:	f005 fe3b 	bl	801bb50 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8015eda:	2300      	movs	r3, #0
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3720      	adds	r7, #32
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}
 8015ee4:	08026dbc 	.word	0x08026dbc
 8015ee8:	080240b0 	.word	0x080240b0
 8015eec:	08024244 	.word	0x08024244
 8015ef0:	080240f4 	.word	0x080240f4
 8015ef4:	0802425c 	.word	0x0802425c
 8015ef8:	08026d94 	.word	0x08026d94
 8015efc:	2002d470 	.word	0x2002d470

08015f00 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b084      	sub	sp, #16
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d106      	bne.n	8015f1c <tcp_update_rcv_ann_wnd+0x1c>
 8015f0e:	4b25      	ldr	r3, [pc, #148]	@ (8015fa4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015f10:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8015f14:	4924      	ldr	r1, [pc, #144]	@ (8015fa8 <tcp_update_rcv_ann_wnd+0xa8>)
 8015f16:	4825      	ldr	r0, [pc, #148]	@ (8015fac <tcp_update_rcv_ann_wnd+0xac>)
 8015f18:	f00a ffdc 	bl	8020ed4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015f1c:	687b      	ldr	r3, [r7, #4]
 8015f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f20:	687a      	ldr	r2, [r7, #4]
 8015f22:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8015f24:	4413      	add	r3, r2
 8015f26:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f2c:	687a      	ldr	r2, [r7, #4]
 8015f2e:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8015f30:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8015f34:	bf28      	it	cs
 8015f36:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8015f3a:	b292      	uxth	r2, r2
 8015f3c:	4413      	add	r3, r2
 8015f3e:	68fa      	ldr	r2, [r7, #12]
 8015f40:	1ad3      	subs	r3, r2, r3
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	db08      	blt.n	8015f58 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f52:	68fa      	ldr	r2, [r7, #12]
 8015f54:	1ad3      	subs	r3, r2, r3
 8015f56:	e020      	b.n	8015f9a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f60:	1ad3      	subs	r3, r2, r3
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	dd03      	ble.n	8015f6e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2200      	movs	r2, #0
 8015f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8015f6c:	e014      	b.n	8015f98 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f76:	1ad3      	subs	r3, r2, r3
 8015f78:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015f7a:	68bb      	ldr	r3, [r7, #8]
 8015f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015f80:	d306      	bcc.n	8015f90 <tcp_update_rcv_ann_wnd+0x90>
 8015f82:	4b08      	ldr	r3, [pc, #32]	@ (8015fa4 <tcp_update_rcv_ann_wnd+0xa4>)
 8015f84:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8015f88:	4909      	ldr	r1, [pc, #36]	@ (8015fb0 <tcp_update_rcv_ann_wnd+0xb0>)
 8015f8a:	4808      	ldr	r0, [pc, #32]	@ (8015fac <tcp_update_rcv_ann_wnd+0xac>)
 8015f8c:	f00a ffa2 	bl	8020ed4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015f90:	68bb      	ldr	r3, [r7, #8]
 8015f92:	b29a      	uxth	r2, r3
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8015f98:	2300      	movs	r3, #0
  }
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3710      	adds	r7, #16
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}
 8015fa2:	bf00      	nop
 8015fa4:	080240b0 	.word	0x080240b0
 8015fa8:	0802430c 	.word	0x0802430c
 8015fac:	080240f4 	.word	0x080240f4
 8015fb0:	08024330 	.word	0x08024330

08015fb4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b084      	sub	sp, #16
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	6078      	str	r0, [r7, #4]
 8015fbc:	460b      	mov	r3, r1
 8015fbe:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d107      	bne.n	8015fd6 <tcp_recved+0x22>
 8015fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8016044 <tcp_recved+0x90>)
 8015fc8:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8015fcc:	491e      	ldr	r1, [pc, #120]	@ (8016048 <tcp_recved+0x94>)
 8015fce:	481f      	ldr	r0, [pc, #124]	@ (801604c <tcp_recved+0x98>)
 8015fd0:	f00a ff80 	bl	8020ed4 <iprintf>
 8015fd4:	e032      	b.n	801603c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	7d1b      	ldrb	r3, [r3, #20]
 8015fda:	2b01      	cmp	r3, #1
 8015fdc:	d106      	bne.n	8015fec <tcp_recved+0x38>
 8015fde:	4b19      	ldr	r3, [pc, #100]	@ (8016044 <tcp_recved+0x90>)
 8015fe0:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8015fe4:	491a      	ldr	r1, [pc, #104]	@ (8016050 <tcp_recved+0x9c>)
 8015fe6:	4819      	ldr	r0, [pc, #100]	@ (801604c <tcp_recved+0x98>)
 8015fe8:	f00a ff74 	bl	8020ed4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015ff0:	887b      	ldrh	r3, [r7, #2]
 8015ff2:	4413      	add	r3, r2
 8015ff4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015ff6:	89fb      	ldrh	r3, [r7, #14]
 8015ff8:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8015ffc:	d804      	bhi.n	8016008 <tcp_recved+0x54>
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016002:	89fa      	ldrh	r2, [r7, #14]
 8016004:	429a      	cmp	r2, r3
 8016006:	d204      	bcs.n	8016012 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801600e:	851a      	strh	r2, [r3, #40]	@ 0x28
 8016010:	e002      	b.n	8016018 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	89fa      	ldrh	r2, [r7, #14]
 8016016:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8016018:	6878      	ldr	r0, [r7, #4]
 801601a:	f7ff ff71 	bl	8015f00 <tcp_update_rcv_ann_wnd>
 801601e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8016020:	68bb      	ldr	r3, [r7, #8]
 8016022:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016026:	d309      	bcc.n	801603c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	8b5b      	ldrh	r3, [r3, #26]
 801602c:	f043 0302 	orr.w	r3, r3, #2
 8016030:	b29a      	uxth	r2, r3
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	f004 fdf4 	bl	801ac24 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 801603c:	3710      	adds	r7, #16
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	080240b0 	.word	0x080240b0
 8016048:	0802434c 	.word	0x0802434c
 801604c:	080240f4 	.word	0x080240f4
 8016050:	08024364 	.word	0x08024364

08016054 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8016054:	b480      	push	{r7}
 8016056:	b083      	sub	sp, #12
 8016058:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801605a:	2300      	movs	r3, #0
 801605c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801605e:	4b1e      	ldr	r3, [pc, #120]	@ (80160d8 <tcp_new_port+0x84>)
 8016060:	881b      	ldrh	r3, [r3, #0]
 8016062:	3301      	adds	r3, #1
 8016064:	b29a      	uxth	r2, r3
 8016066:	4b1c      	ldr	r3, [pc, #112]	@ (80160d8 <tcp_new_port+0x84>)
 8016068:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801606a:	4b1b      	ldr	r3, [pc, #108]	@ (80160d8 <tcp_new_port+0x84>)
 801606c:	881b      	ldrh	r3, [r3, #0]
 801606e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016072:	4293      	cmp	r3, r2
 8016074:	d103      	bne.n	801607e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8016076:	4b18      	ldr	r3, [pc, #96]	@ (80160d8 <tcp_new_port+0x84>)
 8016078:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801607c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801607e:	2300      	movs	r3, #0
 8016080:	71fb      	strb	r3, [r7, #7]
 8016082:	e01e      	b.n	80160c2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8016084:	79fb      	ldrb	r3, [r7, #7]
 8016086:	4a15      	ldr	r2, [pc, #84]	@ (80160dc <tcp_new_port+0x88>)
 8016088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801608c:	681b      	ldr	r3, [r3, #0]
 801608e:	603b      	str	r3, [r7, #0]
 8016090:	e011      	b.n	80160b6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	8ada      	ldrh	r2, [r3, #22]
 8016096:	4b10      	ldr	r3, [pc, #64]	@ (80160d8 <tcp_new_port+0x84>)
 8016098:	881b      	ldrh	r3, [r3, #0]
 801609a:	429a      	cmp	r2, r3
 801609c:	d108      	bne.n	80160b0 <tcp_new_port+0x5c>
        n++;
 801609e:	88bb      	ldrh	r3, [r7, #4]
 80160a0:	3301      	adds	r3, #1
 80160a2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80160a4:	88bb      	ldrh	r3, [r7, #4]
 80160a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80160aa:	d3d8      	bcc.n	801605e <tcp_new_port+0xa>
          return 0;
 80160ac:	2300      	movs	r3, #0
 80160ae:	e00d      	b.n	80160cc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	68db      	ldr	r3, [r3, #12]
 80160b4:	603b      	str	r3, [r7, #0]
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d1ea      	bne.n	8016092 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80160bc:	79fb      	ldrb	r3, [r7, #7]
 80160be:	3301      	adds	r3, #1
 80160c0:	71fb      	strb	r3, [r7, #7]
 80160c2:	79fb      	ldrb	r3, [r7, #7]
 80160c4:	2b03      	cmp	r3, #3
 80160c6:	d9dd      	bls.n	8016084 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80160c8:	4b03      	ldr	r3, [pc, #12]	@ (80160d8 <tcp_new_port+0x84>)
 80160ca:	881b      	ldrh	r3, [r3, #0]
}
 80160cc:	4618      	mov	r0, r3
 80160ce:	370c      	adds	r7, #12
 80160d0:	46bd      	mov	sp, r7
 80160d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160d6:	4770      	bx	lr
 80160d8:	20000068 	.word	0x20000068
 80160dc:	08026d94 	.word	0x08026d94

080160e0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b08a      	sub	sp, #40	@ 0x28
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	60f8      	str	r0, [r7, #12]
 80160e8:	60b9      	str	r1, [r7, #8]
 80160ea:	603b      	str	r3, [r7, #0]
 80160ec:	4613      	mov	r3, r2
 80160ee:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80160f0:	2300      	movs	r3, #0
 80160f2:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d109      	bne.n	801610e <tcp_connect+0x2e>
 80160fa:	4b7d      	ldr	r3, [pc, #500]	@ (80162f0 <tcp_connect+0x210>)
 80160fc:	f240 4235 	movw	r2, #1077	@ 0x435
 8016100:	497c      	ldr	r1, [pc, #496]	@ (80162f4 <tcp_connect+0x214>)
 8016102:	487d      	ldr	r0, [pc, #500]	@ (80162f8 <tcp_connect+0x218>)
 8016104:	f00a fee6 	bl	8020ed4 <iprintf>
 8016108:	f06f 030f 	mvn.w	r3, #15
 801610c:	e0ec      	b.n	80162e8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d109      	bne.n	8016128 <tcp_connect+0x48>
 8016114:	4b76      	ldr	r3, [pc, #472]	@ (80162f0 <tcp_connect+0x210>)
 8016116:	f240 4236 	movw	r2, #1078	@ 0x436
 801611a:	4978      	ldr	r1, [pc, #480]	@ (80162fc <tcp_connect+0x21c>)
 801611c:	4876      	ldr	r0, [pc, #472]	@ (80162f8 <tcp_connect+0x218>)
 801611e:	f00a fed9 	bl	8020ed4 <iprintf>
 8016122:	f06f 030f 	mvn.w	r3, #15
 8016126:	e0df      	b.n	80162e8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	7d1b      	ldrb	r3, [r3, #20]
 801612c:	2b00      	cmp	r3, #0
 801612e:	d009      	beq.n	8016144 <tcp_connect+0x64>
 8016130:	4b6f      	ldr	r3, [pc, #444]	@ (80162f0 <tcp_connect+0x210>)
 8016132:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8016136:	4972      	ldr	r1, [pc, #456]	@ (8016300 <tcp_connect+0x220>)
 8016138:	486f      	ldr	r0, [pc, #444]	@ (80162f8 <tcp_connect+0x218>)
 801613a:	f00a fecb 	bl	8020ed4 <iprintf>
 801613e:	f06f 0309 	mvn.w	r3, #9
 8016142:	e0d1      	b.n	80162e8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	2b00      	cmp	r3, #0
 8016148:	d002      	beq.n	8016150 <tcp_connect+0x70>
 801614a:	68bb      	ldr	r3, [r7, #8]
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	e000      	b.n	8016152 <tcp_connect+0x72>
 8016150:	2300      	movs	r3, #0
 8016152:	68fa      	ldr	r2, [r7, #12]
 8016154:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	88fa      	ldrh	r2, [r7, #6]
 801615a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	7a1b      	ldrb	r3, [r3, #8]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d006      	beq.n	8016172 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	7a1b      	ldrb	r3, [r3, #8]
 8016168:	4618      	mov	r0, r3
 801616a:	f7fe faa1 	bl	80146b0 <netif_get_by_index>
 801616e:	6278      	str	r0, [r7, #36]	@ 0x24
 8016170:	e005      	b.n	801617e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	3304      	adds	r3, #4
 8016176:	4618      	mov	r0, r3
 8016178:	f008 f840 	bl	801e1fc <ip4_route>
 801617c:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 801617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016180:	2b00      	cmp	r3, #0
 8016182:	d102      	bne.n	801618a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8016184:	f06f 0303 	mvn.w	r3, #3
 8016188:	e0ae      	b.n	80162e8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801618a:	68fb      	ldr	r3, [r7, #12]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d003      	beq.n	8016198 <tcp_connect+0xb8>
 8016190:	68fb      	ldr	r3, [r7, #12]
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	2b00      	cmp	r3, #0
 8016196:	d111      	bne.n	80161bc <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8016198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801619a:	2b00      	cmp	r3, #0
 801619c:	d002      	beq.n	80161a4 <tcp_connect+0xc4>
 801619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161a0:	3304      	adds	r3, #4
 80161a2:	e000      	b.n	80161a6 <tcp_connect+0xc6>
 80161a4:	2300      	movs	r3, #0
 80161a6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 80161a8:	69fb      	ldr	r3, [r7, #28]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d102      	bne.n	80161b4 <tcp_connect+0xd4>
      return ERR_RTE;
 80161ae:	f06f 0303 	mvn.w	r3, #3
 80161b2:	e099      	b.n	80162e8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80161b4:	69fb      	ldr	r3, [r7, #28]
 80161b6:	681a      	ldr	r2, [r3, #0]
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	8adb      	ldrh	r3, [r3, #22]
 80161c0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	8adb      	ldrh	r3, [r3, #22]
 80161c6:	2b00      	cmp	r3, #0
 80161c8:	d10c      	bne.n	80161e4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 80161ca:	f7ff ff43 	bl	8016054 <tcp_new_port>
 80161ce:	4603      	mov	r3, r0
 80161d0:	461a      	mov	r2, r3
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	8adb      	ldrh	r3, [r3, #22]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d102      	bne.n	80161e4 <tcp_connect+0x104>
      return ERR_BUF;
 80161de:	f06f 0301 	mvn.w	r3, #1
 80161e2:	e081      	b.n	80162e8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	f001 f893 	bl	8017310 <tcp_next_iss>
 80161ea:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	2200      	movs	r2, #0
 80161f0:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	697a      	ldr	r2, [r7, #20]
 80161f6:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	1e5a      	subs	r2, r3, #1
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	1e5a      	subs	r2, r3, #1
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8016208:	697b      	ldr	r3, [r7, #20]
 801620a:	1e5a      	subs	r2, r3, #1
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016216:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 801622e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016238:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	3304      	adds	r3, #4
 8016242:	461a      	mov	r2, r3
 8016244:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016246:	f001 f889 	bl	801735c <tcp_eff_send_mss_netif>
 801624a:	4603      	mov	r3, r0
 801624c:	461a      	mov	r2, r3
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	2201      	movs	r2, #1
 8016256:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	683a      	ldr	r2, [r7, #0]
 801625e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8016262:	2102      	movs	r1, #2
 8016264:	68f8      	ldr	r0, [r7, #12]
 8016266:	f004 fbdd 	bl	801aa24 <tcp_enqueue_flags>
 801626a:	4603      	mov	r3, r0
 801626c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801626e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d136      	bne.n	80162e4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	2202      	movs	r2, #2
 801627a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801627c:	8b7b      	ldrh	r3, [r7, #26]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d021      	beq.n	80162c6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8016282:	4b20      	ldr	r3, [pc, #128]	@ (8016304 <tcp_connect+0x224>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	68fa      	ldr	r2, [r7, #12]
 8016288:	429a      	cmp	r2, r3
 801628a:	d105      	bne.n	8016298 <tcp_connect+0x1b8>
 801628c:	4b1d      	ldr	r3, [pc, #116]	@ (8016304 <tcp_connect+0x224>)
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	68db      	ldr	r3, [r3, #12]
 8016292:	4a1c      	ldr	r2, [pc, #112]	@ (8016304 <tcp_connect+0x224>)
 8016294:	6013      	str	r3, [r2, #0]
 8016296:	e013      	b.n	80162c0 <tcp_connect+0x1e0>
 8016298:	4b1a      	ldr	r3, [pc, #104]	@ (8016304 <tcp_connect+0x224>)
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	623b      	str	r3, [r7, #32]
 801629e:	e00c      	b.n	80162ba <tcp_connect+0x1da>
 80162a0:	6a3b      	ldr	r3, [r7, #32]
 80162a2:	68db      	ldr	r3, [r3, #12]
 80162a4:	68fa      	ldr	r2, [r7, #12]
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d104      	bne.n	80162b4 <tcp_connect+0x1d4>
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	68da      	ldr	r2, [r3, #12]
 80162ae:	6a3b      	ldr	r3, [r7, #32]
 80162b0:	60da      	str	r2, [r3, #12]
 80162b2:	e005      	b.n	80162c0 <tcp_connect+0x1e0>
 80162b4:	6a3b      	ldr	r3, [r7, #32]
 80162b6:	68db      	ldr	r3, [r3, #12]
 80162b8:	623b      	str	r3, [r7, #32]
 80162ba:	6a3b      	ldr	r3, [r7, #32]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d1ef      	bne.n	80162a0 <tcp_connect+0x1c0>
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	2200      	movs	r2, #0
 80162c4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 80162c6:	4b10      	ldr	r3, [pc, #64]	@ (8016308 <tcp_connect+0x228>)
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	68fb      	ldr	r3, [r7, #12]
 80162cc:	60da      	str	r2, [r3, #12]
 80162ce:	4a0e      	ldr	r2, [pc, #56]	@ (8016308 <tcp_connect+0x228>)
 80162d0:	68fb      	ldr	r3, [r7, #12]
 80162d2:	6013      	str	r3, [r2, #0]
 80162d4:	f005 fc3c 	bl	801bb50 <tcp_timer_needed>
 80162d8:	4b0c      	ldr	r3, [pc, #48]	@ (801630c <tcp_connect+0x22c>)
 80162da:	2201      	movs	r2, #1
 80162dc:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80162de:	68f8      	ldr	r0, [r7, #12]
 80162e0:	f004 fca0 	bl	801ac24 <tcp_output>
  }
  return ret;
 80162e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	3728      	adds	r7, #40	@ 0x28
 80162ec:	46bd      	mov	sp, r7
 80162ee:	bd80      	pop	{r7, pc}
 80162f0:	080240b0 	.word	0x080240b0
 80162f4:	0802438c 	.word	0x0802438c
 80162f8:	080240f4 	.word	0x080240f4
 80162fc:	080243a8 	.word	0x080243a8
 8016300:	080243c4 	.word	0x080243c4
 8016304:	2002d470 	.word	0x2002d470
 8016308:	2002d478 	.word	0x2002d478
 801630c:	2002d480 	.word	0x2002d480

08016310 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8016310:	b5b0      	push	{r4, r5, r7, lr}
 8016312:	b090      	sub	sp, #64	@ 0x40
 8016314:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8016316:	2300      	movs	r3, #0
 8016318:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 801631c:	4b95      	ldr	r3, [pc, #596]	@ (8016574 <tcp_slowtmr+0x264>)
 801631e:	681b      	ldr	r3, [r3, #0]
 8016320:	3301      	adds	r3, #1
 8016322:	4a94      	ldr	r2, [pc, #592]	@ (8016574 <tcp_slowtmr+0x264>)
 8016324:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8016326:	4b94      	ldr	r3, [pc, #592]	@ (8016578 <tcp_slowtmr+0x268>)
 8016328:	781b      	ldrb	r3, [r3, #0]
 801632a:	3301      	adds	r3, #1
 801632c:	b2da      	uxtb	r2, r3
 801632e:	4b92      	ldr	r3, [pc, #584]	@ (8016578 <tcp_slowtmr+0x268>)
 8016330:	701a      	strb	r2, [r3, #0]
 8016332:	e000      	b.n	8016336 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8016334:	bf00      	nop
  prev = NULL;
 8016336:	2300      	movs	r3, #0
 8016338:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801633a:	4b90      	ldr	r3, [pc, #576]	@ (801657c <tcp_slowtmr+0x26c>)
 801633c:	681b      	ldr	r3, [r3, #0]
 801633e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016340:	e29d      	b.n	801687e <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8016342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016344:	7d1b      	ldrb	r3, [r3, #20]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d106      	bne.n	8016358 <tcp_slowtmr+0x48>
 801634a:	4b8d      	ldr	r3, [pc, #564]	@ (8016580 <tcp_slowtmr+0x270>)
 801634c:	f240 42be 	movw	r2, #1214	@ 0x4be
 8016350:	498c      	ldr	r1, [pc, #560]	@ (8016584 <tcp_slowtmr+0x274>)
 8016352:	488d      	ldr	r0, [pc, #564]	@ (8016588 <tcp_slowtmr+0x278>)
 8016354:	f00a fdbe 	bl	8020ed4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8016358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801635a:	7d1b      	ldrb	r3, [r3, #20]
 801635c:	2b01      	cmp	r3, #1
 801635e:	d106      	bne.n	801636e <tcp_slowtmr+0x5e>
 8016360:	4b87      	ldr	r3, [pc, #540]	@ (8016580 <tcp_slowtmr+0x270>)
 8016362:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8016366:	4989      	ldr	r1, [pc, #548]	@ (801658c <tcp_slowtmr+0x27c>)
 8016368:	4887      	ldr	r0, [pc, #540]	@ (8016588 <tcp_slowtmr+0x278>)
 801636a:	f00a fdb3 	bl	8020ed4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801636e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016370:	7d1b      	ldrb	r3, [r3, #20]
 8016372:	2b0a      	cmp	r3, #10
 8016374:	d106      	bne.n	8016384 <tcp_slowtmr+0x74>
 8016376:	4b82      	ldr	r3, [pc, #520]	@ (8016580 <tcp_slowtmr+0x270>)
 8016378:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 801637c:	4984      	ldr	r1, [pc, #528]	@ (8016590 <tcp_slowtmr+0x280>)
 801637e:	4882      	ldr	r0, [pc, #520]	@ (8016588 <tcp_slowtmr+0x278>)
 8016380:	f00a fda8 	bl	8020ed4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8016384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016386:	7f9a      	ldrb	r2, [r3, #30]
 8016388:	4b7b      	ldr	r3, [pc, #492]	@ (8016578 <tcp_slowtmr+0x268>)
 801638a:	781b      	ldrb	r3, [r3, #0]
 801638c:	429a      	cmp	r2, r3
 801638e:	d105      	bne.n	801639c <tcp_slowtmr+0x8c>
      prev = pcb;
 8016390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016392:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016396:	68db      	ldr	r3, [r3, #12]
 8016398:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801639a:	e270      	b.n	801687e <tcp_slowtmr+0x56e>
    pcb->last_timer = tcp_timer_ctr;
 801639c:	4b76      	ldr	r3, [pc, #472]	@ (8016578 <tcp_slowtmr+0x268>)
 801639e:	781a      	ldrb	r2, [r3, #0]
 80163a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163a2:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 80163a4:	2300      	movs	r3, #0
 80163a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 80163aa:	2300      	movs	r3, #0
 80163ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80163b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163b2:	7d1b      	ldrb	r3, [r3, #20]
 80163b4:	2b02      	cmp	r3, #2
 80163b6:	d10a      	bne.n	80163ce <tcp_slowtmr+0xbe>
 80163b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80163be:	2b05      	cmp	r3, #5
 80163c0:	d905      	bls.n	80163ce <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80163c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80163c6:	3301      	adds	r3, #1
 80163c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 80163cc:	e11e      	b.n	801660c <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80163ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80163d4:	2b0b      	cmp	r3, #11
 80163d6:	d905      	bls.n	80163e4 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80163d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80163dc:	3301      	adds	r3, #1
 80163de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80163e2:	e113      	b.n	801660c <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80163e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163e6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	d075      	beq.n	80164da <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80163ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80163f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d006      	beq.n	8016404 <tcp_slowtmr+0xf4>
 80163f6:	4b62      	ldr	r3, [pc, #392]	@ (8016580 <tcp_slowtmr+0x270>)
 80163f8:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80163fc:	4965      	ldr	r1, [pc, #404]	@ (8016594 <tcp_slowtmr+0x284>)
 80163fe:	4862      	ldr	r0, [pc, #392]	@ (8016588 <tcp_slowtmr+0x278>)
 8016400:	f00a fd68 	bl	8020ed4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8016404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016406:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016408:	2b00      	cmp	r3, #0
 801640a:	d106      	bne.n	801641a <tcp_slowtmr+0x10a>
 801640c:	4b5c      	ldr	r3, [pc, #368]	@ (8016580 <tcp_slowtmr+0x270>)
 801640e:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 8016412:	4961      	ldr	r1, [pc, #388]	@ (8016598 <tcp_slowtmr+0x288>)
 8016414:	485c      	ldr	r0, [pc, #368]	@ (8016588 <tcp_slowtmr+0x278>)
 8016416:	f00a fd5d 	bl	8020ed4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801641a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801641c:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8016420:	2b0b      	cmp	r3, #11
 8016422:	d905      	bls.n	8016430 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 8016424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016428:	3301      	adds	r3, #1
 801642a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801642e:	e0ed      	b.n	801660c <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8016430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016432:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016436:	3b01      	subs	r3, #1
 8016438:	4a58      	ldr	r2, [pc, #352]	@ (801659c <tcp_slowtmr+0x28c>)
 801643a:	5cd3      	ldrb	r3, [r2, r3]
 801643c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801643e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016440:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016444:	7c7a      	ldrb	r2, [r7, #17]
 8016446:	429a      	cmp	r2, r3
 8016448:	d907      	bls.n	801645a <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801644c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016450:	3301      	adds	r3, #1
 8016452:	b2da      	uxtb	r2, r3
 8016454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016456:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801645a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801645c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8016460:	7c7a      	ldrb	r2, [r7, #17]
 8016462:	429a      	cmp	r2, r3
 8016464:	f200 80d2 	bhi.w	801660c <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8016468:	2301      	movs	r3, #1
 801646a:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 801646c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801646e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016472:	2b00      	cmp	r3, #0
 8016474:	d108      	bne.n	8016488 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8016476:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016478:	f005 fa9c 	bl	801b9b4 <tcp_zero_window_probe>
 801647c:	4603      	mov	r3, r0
 801647e:	2b00      	cmp	r3, #0
 8016480:	d014      	beq.n	80164ac <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8016482:	2300      	movs	r3, #0
 8016484:	623b      	str	r3, [r7, #32]
 8016486:	e011      	b.n	80164ac <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8016488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801648a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801648e:	4619      	mov	r1, r3
 8016490:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016492:	f004 f921 	bl	801a6d8 <tcp_split_unsent_seg>
 8016496:	4603      	mov	r3, r0
 8016498:	2b00      	cmp	r3, #0
 801649a:	d107      	bne.n	80164ac <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 801649c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801649e:	f004 fbc1 	bl	801ac24 <tcp_output>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d101      	bne.n	80164ac <tcp_slowtmr+0x19c>
                  next_slot = 0;
 80164a8:	2300      	movs	r3, #0
 80164aa:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 80164ac:	6a3b      	ldr	r3, [r7, #32]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	f000 80ac 	beq.w	801660c <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 80164b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164b6:	2200      	movs	r2, #0
 80164b8:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80164bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164be:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80164c2:	2b06      	cmp	r3, #6
 80164c4:	f200 80a2 	bhi.w	801660c <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 80164c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164ca:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80164ce:	3301      	adds	r3, #1
 80164d0:	b2da      	uxtb	r2, r3
 80164d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164d4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80164d8:	e098      	b.n	801660c <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80164da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	db0f      	blt.n	8016504 <tcp_slowtmr+0x1f4>
 80164e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164e6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80164ea:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80164ee:	4293      	cmp	r3, r2
 80164f0:	d008      	beq.n	8016504 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80164f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80164f4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80164f8:	b29b      	uxth	r3, r3
 80164fa:	3301      	adds	r3, #1
 80164fc:	b29b      	uxth	r3, r3
 80164fe:	b21a      	sxth	r2, r3
 8016500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016502:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 8016504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016506:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 801650a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801650c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8016510:	429a      	cmp	r2, r3
 8016512:	db7b      	blt.n	801660c <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8016514:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016516:	f004 fe85 	bl	801b224 <tcp_rexmit_rto_prepare>
 801651a:	4603      	mov	r3, r0
 801651c:	2b00      	cmp	r3, #0
 801651e:	d007      	beq.n	8016530 <tcp_slowtmr+0x220>
 8016520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016524:	2b00      	cmp	r3, #0
 8016526:	d171      	bne.n	801660c <tcp_slowtmr+0x2fc>
 8016528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801652a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801652c:	2b00      	cmp	r3, #0
 801652e:	d06d      	beq.n	801660c <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8016530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016532:	7d1b      	ldrb	r3, [r3, #20]
 8016534:	2b02      	cmp	r3, #2
 8016536:	d03a      	beq.n	80165ae <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8016538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801653a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801653e:	2b0c      	cmp	r3, #12
 8016540:	bf28      	it	cs
 8016542:	230c      	movcs	r3, #12
 8016544:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8016546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016548:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801654c:	10db      	asrs	r3, r3, #3
 801654e:	b21b      	sxth	r3, r3
 8016550:	461a      	mov	r2, r3
 8016552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016554:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8016558:	4413      	add	r3, r2
 801655a:	7efa      	ldrb	r2, [r7, #27]
 801655c:	4910      	ldr	r1, [pc, #64]	@ (80165a0 <tcp_slowtmr+0x290>)
 801655e:	5c8a      	ldrb	r2, [r1, r2]
 8016560:	4093      	lsls	r3, r2
 8016562:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801656a:	4293      	cmp	r3, r2
 801656c:	dc1a      	bgt.n	80165a4 <tcp_slowtmr+0x294>
 801656e:	697b      	ldr	r3, [r7, #20]
 8016570:	b21a      	sxth	r2, r3
 8016572:	e019      	b.n	80165a8 <tcp_slowtmr+0x298>
 8016574:	2002d46c 	.word	0x2002d46c
 8016578:	2002d482 	.word	0x2002d482
 801657c:	2002d478 	.word	0x2002d478
 8016580:	080240b0 	.word	0x080240b0
 8016584:	080243f4 	.word	0x080243f4
 8016588:	080240f4 	.word	0x080240f4
 801658c:	08024420 	.word	0x08024420
 8016590:	0802444c 	.word	0x0802444c
 8016594:	0802447c 	.word	0x0802447c
 8016598:	080244b0 	.word	0x080244b0
 801659c:	08026d8c 	.word	0x08026d8c
 80165a0:	08026d7c 	.word	0x08026d7c
 80165a4:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80165a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 80165ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165b0:	2200      	movs	r2, #0
 80165b2:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80165b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80165ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80165c0:	4293      	cmp	r3, r2
 80165c2:	bf28      	it	cs
 80165c4:	4613      	movcs	r3, r2
 80165c6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80165c8:	8a7b      	ldrh	r3, [r7, #18]
 80165ca:	085b      	lsrs	r3, r3, #1
 80165cc:	b29a      	uxth	r2, r3
 80165ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165d0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80165d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165d6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80165da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80165de:	005b      	lsls	r3, r3, #1
 80165e0:	b29b      	uxth	r3, r3
 80165e2:	429a      	cmp	r2, r3
 80165e4:	d206      	bcs.n	80165f4 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80165e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80165ea:	005b      	lsls	r3, r3, #1
 80165ec:	b29a      	uxth	r2, r3
 80165ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165f0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80165f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165f6:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80165f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80165fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80165fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016600:	2200      	movs	r2, #0
 8016602:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 8016606:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016608:	f004 fe86 	bl	801b318 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 801660c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801660e:	7d1b      	ldrb	r3, [r3, #20]
 8016610:	2b06      	cmp	r3, #6
 8016612:	d111      	bne.n	8016638 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 8016614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016616:	8b5b      	ldrh	r3, [r3, #26]
 8016618:	f003 0310 	and.w	r3, r3, #16
 801661c:	2b00      	cmp	r3, #0
 801661e:	d00b      	beq.n	8016638 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016620:	4b9c      	ldr	r3, [pc, #624]	@ (8016894 <tcp_slowtmr+0x584>)
 8016622:	681a      	ldr	r2, [r3, #0]
 8016624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016626:	6a1b      	ldr	r3, [r3, #32]
 8016628:	1ad3      	subs	r3, r2, r3
 801662a:	2b28      	cmp	r3, #40	@ 0x28
 801662c:	d904      	bls.n	8016638 <tcp_slowtmr+0x328>
          ++pcb_remove;
 801662e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016632:	3301      	adds	r3, #1
 8016634:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801663a:	7a5b      	ldrb	r3, [r3, #9]
 801663c:	f003 0308 	and.w	r3, r3, #8
 8016640:	2b00      	cmp	r3, #0
 8016642:	d04a      	beq.n	80166da <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8016644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016646:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8016648:	2b04      	cmp	r3, #4
 801664a:	d003      	beq.n	8016654 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 801664c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801664e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8016650:	2b07      	cmp	r3, #7
 8016652:	d142      	bne.n	80166da <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016654:	4b8f      	ldr	r3, [pc, #572]	@ (8016894 <tcp_slowtmr+0x584>)
 8016656:	681a      	ldr	r2, [r3, #0]
 8016658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801665a:	6a1b      	ldr	r3, [r3, #32]
 801665c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016660:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8016664:	4b8c      	ldr	r3, [pc, #560]	@ (8016898 <tcp_slowtmr+0x588>)
 8016666:	440b      	add	r3, r1
 8016668:	498c      	ldr	r1, [pc, #560]	@ (801689c <tcp_slowtmr+0x58c>)
 801666a:	fba1 1303 	umull	r1, r3, r1, r3
 801666e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8016670:	429a      	cmp	r2, r3
 8016672:	d90a      	bls.n	801668a <tcp_slowtmr+0x37a>
        ++pcb_remove;
 8016674:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016678:	3301      	adds	r3, #1
 801667a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801667e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8016682:	3301      	adds	r3, #1
 8016684:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8016688:	e027      	b.n	80166da <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801668a:	4b82      	ldr	r3, [pc, #520]	@ (8016894 <tcp_slowtmr+0x584>)
 801668c:	681a      	ldr	r2, [r3, #0]
 801668e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016690:	6a1b      	ldr	r3, [r3, #32]
 8016692:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8016694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016696:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801669a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801669c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80166a0:	4618      	mov	r0, r3
 80166a2:	4b7f      	ldr	r3, [pc, #508]	@ (80168a0 <tcp_slowtmr+0x590>)
 80166a4:	fb00 f303 	mul.w	r3, r0, r3
 80166a8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80166aa:	497c      	ldr	r1, [pc, #496]	@ (801689c <tcp_slowtmr+0x58c>)
 80166ac:	fba1 1303 	umull	r1, r3, r1, r3
 80166b0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80166b2:	429a      	cmp	r2, r3
 80166b4:	d911      	bls.n	80166da <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80166b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80166b8:	f005 f93c 	bl	801b934 <tcp_keepalive>
 80166bc:	4603      	mov	r3, r0
 80166be:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 80166c2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d107      	bne.n	80166da <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80166ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166cc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80166d0:	3301      	adds	r3, #1
 80166d2:	b2da      	uxtb	r2, r3
 80166d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80166da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d011      	beq.n	8016706 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80166e2:	4b6c      	ldr	r3, [pc, #432]	@ (8016894 <tcp_slowtmr+0x584>)
 80166e4:	681a      	ldr	r2, [r3, #0]
 80166e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166e8:	6a1b      	ldr	r3, [r3, #32]
 80166ea:	1ad2      	subs	r2, r2, r3
 80166ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166ee:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80166f2:	4619      	mov	r1, r3
 80166f4:	460b      	mov	r3, r1
 80166f6:	005b      	lsls	r3, r3, #1
 80166f8:	440b      	add	r3, r1
 80166fa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80166fc:	429a      	cmp	r2, r3
 80166fe:	d302      	bcc.n	8016706 <tcp_slowtmr+0x3f6>
      tcp_free_ooseq(pcb);
 8016700:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016702:	f000 fedb 	bl	80174bc <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 8016706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016708:	7d1b      	ldrb	r3, [r3, #20]
 801670a:	2b03      	cmp	r3, #3
 801670c:	d10b      	bne.n	8016726 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801670e:	4b61      	ldr	r3, [pc, #388]	@ (8016894 <tcp_slowtmr+0x584>)
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016714:	6a1b      	ldr	r3, [r3, #32]
 8016716:	1ad3      	subs	r3, r2, r3
 8016718:	2b28      	cmp	r3, #40	@ 0x28
 801671a:	d904      	bls.n	8016726 <tcp_slowtmr+0x416>
        ++pcb_remove;
 801671c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016720:	3301      	adds	r3, #1
 8016722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 8016726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016728:	7d1b      	ldrb	r3, [r3, #20]
 801672a:	2b09      	cmp	r3, #9
 801672c:	d10b      	bne.n	8016746 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801672e:	4b59      	ldr	r3, [pc, #356]	@ (8016894 <tcp_slowtmr+0x584>)
 8016730:	681a      	ldr	r2, [r3, #0]
 8016732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016734:	6a1b      	ldr	r3, [r3, #32]
 8016736:	1ad3      	subs	r3, r2, r3
 8016738:	2bf0      	cmp	r3, #240	@ 0xf0
 801673a:	d904      	bls.n	8016746 <tcp_slowtmr+0x436>
        ++pcb_remove;
 801673c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016740:	3301      	adds	r3, #1
 8016742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8016746:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801674a:	2b00      	cmp	r3, #0
 801674c:	d060      	beq.n	8016810 <tcp_slowtmr+0x500>
      tcp_err_fn err_fn = pcb->errf;
 801674e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016754:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8016756:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016758:	f000 fcf6 	bl	8017148 <tcp_pcb_purge>
      if (prev != NULL) {
 801675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801675e:	2b00      	cmp	r3, #0
 8016760:	d010      	beq.n	8016784 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8016762:	4b50      	ldr	r3, [pc, #320]	@ (80168a4 <tcp_slowtmr+0x594>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016768:	429a      	cmp	r2, r3
 801676a:	d106      	bne.n	801677a <tcp_slowtmr+0x46a>
 801676c:	4b4e      	ldr	r3, [pc, #312]	@ (80168a8 <tcp_slowtmr+0x598>)
 801676e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8016772:	494e      	ldr	r1, [pc, #312]	@ (80168ac <tcp_slowtmr+0x59c>)
 8016774:	484e      	ldr	r0, [pc, #312]	@ (80168b0 <tcp_slowtmr+0x5a0>)
 8016776:	f00a fbad 	bl	8020ed4 <iprintf>
        prev->next = pcb->next;
 801677a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801677c:	68da      	ldr	r2, [r3, #12]
 801677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016780:	60da      	str	r2, [r3, #12]
 8016782:	e00f      	b.n	80167a4 <tcp_slowtmr+0x494>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8016784:	4b47      	ldr	r3, [pc, #284]	@ (80168a4 <tcp_slowtmr+0x594>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801678a:	429a      	cmp	r2, r3
 801678c:	d006      	beq.n	801679c <tcp_slowtmr+0x48c>
 801678e:	4b46      	ldr	r3, [pc, #280]	@ (80168a8 <tcp_slowtmr+0x598>)
 8016790:	f240 5271 	movw	r2, #1393	@ 0x571
 8016794:	4947      	ldr	r1, [pc, #284]	@ (80168b4 <tcp_slowtmr+0x5a4>)
 8016796:	4846      	ldr	r0, [pc, #280]	@ (80168b0 <tcp_slowtmr+0x5a0>)
 8016798:	f00a fb9c 	bl	8020ed4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801679c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801679e:	68db      	ldr	r3, [r3, #12]
 80167a0:	4a40      	ldr	r2, [pc, #256]	@ (80168a4 <tcp_slowtmr+0x594>)
 80167a2:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 80167a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d013      	beq.n	80167d4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80167ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167ae:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80167b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167b2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80167b4:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 80167b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167b8:	3304      	adds	r3, #4
 80167ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80167bc:	8ad2      	ldrh	r2, [r2, #22]
 80167be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80167c0:	8b09      	ldrh	r1, [r1, #24]
 80167c2:	9102      	str	r1, [sp, #8]
 80167c4:	9201      	str	r2, [sp, #4]
 80167c6:	9300      	str	r3, [sp, #0]
 80167c8:	462b      	mov	r3, r5
 80167ca:	4622      	mov	r2, r4
 80167cc:	4601      	mov	r1, r0
 80167ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80167d0:	f004 fffc 	bl	801b7cc <tcp_rst>
      err_arg = pcb->callback_arg;
 80167d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167d6:	691b      	ldr	r3, [r3, #16]
 80167d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80167da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167dc:	7d1b      	ldrb	r3, [r3, #20]
 80167de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80167e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80167e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167e6:	68db      	ldr	r3, [r3, #12]
 80167e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80167ea:	6838      	ldr	r0, [r7, #0]
 80167ec:	f7fe ffa0 	bl	8015730 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80167f0:	4b31      	ldr	r3, [pc, #196]	@ (80168b8 <tcp_slowtmr+0x5a8>)
 80167f2:	2200      	movs	r2, #0
 80167f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d004      	beq.n	8016806 <tcp_slowtmr+0x4f6>
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	f06f 010c 	mvn.w	r1, #12
 8016802:	68b8      	ldr	r0, [r7, #8]
 8016804:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8016806:	4b2c      	ldr	r3, [pc, #176]	@ (80168b8 <tcp_slowtmr+0x5a8>)
 8016808:	781b      	ldrb	r3, [r3, #0]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d037      	beq.n	801687e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 801680e:	e592      	b.n	8016336 <tcp_slowtmr+0x26>
      prev = pcb;
 8016810:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016812:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016816:	68db      	ldr	r3, [r3, #12]
 8016818:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 801681a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801681c:	7f1b      	ldrb	r3, [r3, #28]
 801681e:	3301      	adds	r3, #1
 8016820:	b2da      	uxtb	r2, r3
 8016822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016824:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8016826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016828:	7f1a      	ldrb	r2, [r3, #28]
 801682a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801682c:	7f5b      	ldrb	r3, [r3, #29]
 801682e:	429a      	cmp	r2, r3
 8016830:	d325      	bcc.n	801687e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8016832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016834:	2200      	movs	r2, #0
 8016836:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8016838:	4b1f      	ldr	r3, [pc, #124]	@ (80168b8 <tcp_slowtmr+0x5a8>)
 801683a:	2200      	movs	r2, #0
 801683c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016840:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8016844:	2b00      	cmp	r3, #0
 8016846:	d00b      	beq.n	8016860 <tcp_slowtmr+0x550>
 8016848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801684a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801684e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016850:	6912      	ldr	r2, [r2, #16]
 8016852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016854:	4610      	mov	r0, r2
 8016856:	4798      	blx	r3
 8016858:	4603      	mov	r3, r0
 801685a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 801685e:	e002      	b.n	8016866 <tcp_slowtmr+0x556>
 8016860:	2300      	movs	r3, #0
 8016862:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8016866:	4b14      	ldr	r3, [pc, #80]	@ (80168b8 <tcp_slowtmr+0x5a8>)
 8016868:	781b      	ldrb	r3, [r3, #0]
 801686a:	2b00      	cmp	r3, #0
 801686c:	f47f ad62 	bne.w	8016334 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8016870:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8016874:	2b00      	cmp	r3, #0
 8016876:	d102      	bne.n	801687e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8016878:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801687a:	f004 f9d3 	bl	801ac24 <tcp_output>
  while (pcb != NULL) {
 801687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016880:	2b00      	cmp	r3, #0
 8016882:	f47f ad5e 	bne.w	8016342 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8016886:	2300      	movs	r3, #0
 8016888:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 801688a:	4b0c      	ldr	r3, [pc, #48]	@ (80168bc <tcp_slowtmr+0x5ac>)
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016890:	e069      	b.n	8016966 <tcp_slowtmr+0x656>
 8016892:	bf00      	nop
 8016894:	2002d46c 	.word	0x2002d46c
 8016898:	000a4cb8 	.word	0x000a4cb8
 801689c:	10624dd3 	.word	0x10624dd3
 80168a0:	000124f8 	.word	0x000124f8
 80168a4:	2002d478 	.word	0x2002d478
 80168a8:	080240b0 	.word	0x080240b0
 80168ac:	080244e8 	.word	0x080244e8
 80168b0:	080240f4 	.word	0x080240f4
 80168b4:	08024514 	.word	0x08024514
 80168b8:	2002d480 	.word	0x2002d480
 80168bc:	2002d47c 	.word	0x2002d47c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80168c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168c2:	7d1b      	ldrb	r3, [r3, #20]
 80168c4:	2b0a      	cmp	r3, #10
 80168c6:	d006      	beq.n	80168d6 <tcp_slowtmr+0x5c6>
 80168c8:	4b2b      	ldr	r3, [pc, #172]	@ (8016978 <tcp_slowtmr+0x668>)
 80168ca:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80168ce:	492b      	ldr	r1, [pc, #172]	@ (801697c <tcp_slowtmr+0x66c>)
 80168d0:	482b      	ldr	r0, [pc, #172]	@ (8016980 <tcp_slowtmr+0x670>)
 80168d2:	f00a faff 	bl	8020ed4 <iprintf>
    pcb_remove = 0;
 80168d6:	2300      	movs	r3, #0
 80168d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80168dc:	4b29      	ldr	r3, [pc, #164]	@ (8016984 <tcp_slowtmr+0x674>)
 80168de:	681a      	ldr	r2, [r3, #0]
 80168e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168e2:	6a1b      	ldr	r3, [r3, #32]
 80168e4:	1ad3      	subs	r3, r2, r3
 80168e6:	2bf0      	cmp	r3, #240	@ 0xf0
 80168e8:	d904      	bls.n	80168f4 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80168ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80168ee:	3301      	adds	r3, #1
 80168f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80168f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d02f      	beq.n	801695c <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80168fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80168fe:	f000 fc23 	bl	8017148 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8016902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016904:	2b00      	cmp	r3, #0
 8016906:	d010      	beq.n	801692a <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8016908:	4b1f      	ldr	r3, [pc, #124]	@ (8016988 <tcp_slowtmr+0x678>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801690e:	429a      	cmp	r2, r3
 8016910:	d106      	bne.n	8016920 <tcp_slowtmr+0x610>
 8016912:	4b19      	ldr	r3, [pc, #100]	@ (8016978 <tcp_slowtmr+0x668>)
 8016914:	f240 52af 	movw	r2, #1455	@ 0x5af
 8016918:	491c      	ldr	r1, [pc, #112]	@ (801698c <tcp_slowtmr+0x67c>)
 801691a:	4819      	ldr	r0, [pc, #100]	@ (8016980 <tcp_slowtmr+0x670>)
 801691c:	f00a fada 	bl	8020ed4 <iprintf>
        prev->next = pcb->next;
 8016920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016922:	68da      	ldr	r2, [r3, #12]
 8016924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016926:	60da      	str	r2, [r3, #12]
 8016928:	e00f      	b.n	801694a <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801692a:	4b17      	ldr	r3, [pc, #92]	@ (8016988 <tcp_slowtmr+0x678>)
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016930:	429a      	cmp	r2, r3
 8016932:	d006      	beq.n	8016942 <tcp_slowtmr+0x632>
 8016934:	4b10      	ldr	r3, [pc, #64]	@ (8016978 <tcp_slowtmr+0x668>)
 8016936:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801693a:	4915      	ldr	r1, [pc, #84]	@ (8016990 <tcp_slowtmr+0x680>)
 801693c:	4810      	ldr	r0, [pc, #64]	@ (8016980 <tcp_slowtmr+0x670>)
 801693e:	f00a fac9 	bl	8020ed4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8016942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016944:	68db      	ldr	r3, [r3, #12]
 8016946:	4a10      	ldr	r2, [pc, #64]	@ (8016988 <tcp_slowtmr+0x678>)
 8016948:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801694a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801694c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801694e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016950:	68db      	ldr	r3, [r3, #12]
 8016952:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8016954:	69f8      	ldr	r0, [r7, #28]
 8016956:	f7fe feeb 	bl	8015730 <tcp_free>
 801695a:	e004      	b.n	8016966 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 801695c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801695e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8016960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016962:	68db      	ldr	r3, [r3, #12]
 8016964:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8016966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016968:	2b00      	cmp	r3, #0
 801696a:	d1a9      	bne.n	80168c0 <tcp_slowtmr+0x5b0>
    }
  }
}
 801696c:	bf00      	nop
 801696e:	bf00      	nop
 8016970:	3730      	adds	r7, #48	@ 0x30
 8016972:	46bd      	mov	sp, r7
 8016974:	bdb0      	pop	{r4, r5, r7, pc}
 8016976:	bf00      	nop
 8016978:	080240b0 	.word	0x080240b0
 801697c:	08024540 	.word	0x08024540
 8016980:	080240f4 	.word	0x080240f4
 8016984:	2002d46c 	.word	0x2002d46c
 8016988:	2002d47c 	.word	0x2002d47c
 801698c:	08024570 	.word	0x08024570
 8016990:	08024598 	.word	0x08024598

08016994 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8016994:	b580      	push	{r7, lr}
 8016996:	b082      	sub	sp, #8
 8016998:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801699a:	4b2d      	ldr	r3, [pc, #180]	@ (8016a50 <tcp_fasttmr+0xbc>)
 801699c:	781b      	ldrb	r3, [r3, #0]
 801699e:	3301      	adds	r3, #1
 80169a0:	b2da      	uxtb	r2, r3
 80169a2:	4b2b      	ldr	r3, [pc, #172]	@ (8016a50 <tcp_fasttmr+0xbc>)
 80169a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80169a6:	4b2b      	ldr	r3, [pc, #172]	@ (8016a54 <tcp_fasttmr+0xc0>)
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80169ac:	e048      	b.n	8016a40 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	7f9a      	ldrb	r2, [r3, #30]
 80169b2:	4b27      	ldr	r3, [pc, #156]	@ (8016a50 <tcp_fasttmr+0xbc>)
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	429a      	cmp	r2, r3
 80169b8:	d03f      	beq.n	8016a3a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80169ba:	4b25      	ldr	r3, [pc, #148]	@ (8016a50 <tcp_fasttmr+0xbc>)
 80169bc:	781a      	ldrb	r2, [r3, #0]
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80169c2:	687b      	ldr	r3, [r7, #4]
 80169c4:	8b5b      	ldrh	r3, [r3, #26]
 80169c6:	f003 0301 	and.w	r3, r3, #1
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d010      	beq.n	80169f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	8b5b      	ldrh	r3, [r3, #26]
 80169d2:	f043 0302 	orr.w	r3, r3, #2
 80169d6:	b29a      	uxth	r2, r3
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80169dc:	6878      	ldr	r0, [r7, #4]
 80169de:	f004 f921 	bl	801ac24 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	8b5b      	ldrh	r3, [r3, #26]
 80169e6:	f023 0303 	bic.w	r3, r3, #3
 80169ea:	b29a      	uxth	r2, r3
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	8b5b      	ldrh	r3, [r3, #26]
 80169f4:	f003 0308 	and.w	r3, r3, #8
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d009      	beq.n	8016a10 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	8b5b      	ldrh	r3, [r3, #26]
 8016a00:	f023 0308 	bic.w	r3, r3, #8
 8016a04:	b29a      	uxth	r2, r3
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f7ff f824 	bl	8015a58 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	68db      	ldr	r3, [r3, #12]
 8016a14:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d00a      	beq.n	8016a34 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8016a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8016a58 <tcp_fasttmr+0xc4>)
 8016a20:	2200      	movs	r2, #0
 8016a22:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f000 f819 	bl	8016a5c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8016a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8016a58 <tcp_fasttmr+0xc4>)
 8016a2c:	781b      	ldrb	r3, [r3, #0]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d000      	beq.n	8016a34 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8016a32:	e7b8      	b.n	80169a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	607b      	str	r3, [r7, #4]
 8016a38:	e002      	b.n	8016a40 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	68db      	ldr	r3, [r3, #12]
 8016a3e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d1b3      	bne.n	80169ae <tcp_fasttmr+0x1a>
    }
  }
}
 8016a46:	bf00      	nop
 8016a48:	bf00      	nop
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}
 8016a50:	2002d482 	.word	0x2002d482
 8016a54:	2002d478 	.word	0x2002d478
 8016a58:	2002d480 	.word	0x2002d480

08016a5c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8016a5c:	b590      	push	{r4, r7, lr}
 8016a5e:	b085      	sub	sp, #20
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d109      	bne.n	8016a7e <tcp_process_refused_data+0x22>
 8016a6a:	4b37      	ldr	r3, [pc, #220]	@ (8016b48 <tcp_process_refused_data+0xec>)
 8016a6c:	f240 6209 	movw	r2, #1545	@ 0x609
 8016a70:	4936      	ldr	r1, [pc, #216]	@ (8016b4c <tcp_process_refused_data+0xf0>)
 8016a72:	4837      	ldr	r0, [pc, #220]	@ (8016b50 <tcp_process_refused_data+0xf4>)
 8016a74:	f00a fa2e 	bl	8020ed4 <iprintf>
 8016a78:	f06f 030f 	mvn.w	r3, #15
 8016a7c:	e060      	b.n	8016b40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a82:	7b5b      	ldrb	r3, [r3, #13]
 8016a84:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016a8a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2200      	movs	r2, #0
 8016a90:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d00b      	beq.n	8016ab4 <tcp_process_refused_data+0x58>
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	6918      	ldr	r0, [r3, #16]
 8016aa6:	2300      	movs	r3, #0
 8016aa8:	68ba      	ldr	r2, [r7, #8]
 8016aaa:	6879      	ldr	r1, [r7, #4]
 8016aac:	47a0      	blx	r4
 8016aae:	4603      	mov	r3, r0
 8016ab0:	73fb      	strb	r3, [r7, #15]
 8016ab2:	e007      	b.n	8016ac4 <tcp_process_refused_data+0x68>
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	68ba      	ldr	r2, [r7, #8]
 8016ab8:	6879      	ldr	r1, [r7, #4]
 8016aba:	2000      	movs	r0, #0
 8016abc:	f000 f8a4 	bl	8016c08 <tcp_recv_null>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8016ac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d12a      	bne.n	8016b22 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8016acc:	7bbb      	ldrb	r3, [r7, #14]
 8016ace:	f003 0320 	and.w	r3, r3, #32
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d033      	beq.n	8016b3e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ada:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8016ade:	d005      	beq.n	8016aec <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ae4:	3301      	adds	r3, #1
 8016ae6:	b29a      	uxth	r2, r3
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d00b      	beq.n	8016b0e <tcp_process_refused_data+0xb2>
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6918      	ldr	r0, [r3, #16]
 8016b00:	2300      	movs	r3, #0
 8016b02:	2200      	movs	r2, #0
 8016b04:	6879      	ldr	r1, [r7, #4]
 8016b06:	47a0      	blx	r4
 8016b08:	4603      	mov	r3, r0
 8016b0a:	73fb      	strb	r3, [r7, #15]
 8016b0c:	e001      	b.n	8016b12 <tcp_process_refused_data+0xb6>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8016b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b16:	f113 0f0d 	cmn.w	r3, #13
 8016b1a:	d110      	bne.n	8016b3e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8016b1c:	f06f 030c 	mvn.w	r3, #12
 8016b20:	e00e      	b.n	8016b40 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8016b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016b26:	f113 0f0d 	cmn.w	r3, #13
 8016b2a:	d102      	bne.n	8016b32 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8016b2c:	f06f 030c 	mvn.w	r3, #12
 8016b30:	e006      	b.n	8016b40 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	68ba      	ldr	r2, [r7, #8]
 8016b36:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8016b38:	f06f 0304 	mvn.w	r3, #4
 8016b3c:	e000      	b.n	8016b40 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8016b3e:	2300      	movs	r3, #0
}
 8016b40:	4618      	mov	r0, r3
 8016b42:	3714      	adds	r7, #20
 8016b44:	46bd      	mov	sp, r7
 8016b46:	bd90      	pop	{r4, r7, pc}
 8016b48:	080240b0 	.word	0x080240b0
 8016b4c:	080245c0 	.word	0x080245c0
 8016b50:	080240f4 	.word	0x080240f4

08016b54 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8016b54:	b580      	push	{r7, lr}
 8016b56:	b084      	sub	sp, #16
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8016b5c:	e007      	b.n	8016b6e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8016b64:	6878      	ldr	r0, [r7, #4]
 8016b66:	f000 f80a 	bl	8016b7e <tcp_seg_free>
    seg = next;
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d1f4      	bne.n	8016b5e <tcp_segs_free+0xa>
  }
}
 8016b74:	bf00      	nop
 8016b76:	bf00      	nop
 8016b78:	3710      	adds	r7, #16
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}

08016b7e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8016b7e:	b580      	push	{r7, lr}
 8016b80:	b082      	sub	sp, #8
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	d00c      	beq.n	8016ba6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	685b      	ldr	r3, [r3, #4]
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d004      	beq.n	8016b9e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	685b      	ldr	r3, [r3, #4]
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f7fe f963 	bl	8014e64 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8016b9e:	6879      	ldr	r1, [r7, #4]
 8016ba0:	2003      	movs	r0, #3
 8016ba2:	f7fd f979 	bl	8013e98 <memp_free>
  }
}
 8016ba6:	bf00      	nop
 8016ba8:	3708      	adds	r7, #8
 8016baa:	46bd      	mov	sp, r7
 8016bac:	bd80      	pop	{r7, pc}
	...

08016bb0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8016bb0:	b580      	push	{r7, lr}
 8016bb2:	b084      	sub	sp, #16
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d106      	bne.n	8016bcc <tcp_seg_copy+0x1c>
 8016bbe:	4b0f      	ldr	r3, [pc, #60]	@ (8016bfc <tcp_seg_copy+0x4c>)
 8016bc0:	f240 6282 	movw	r2, #1666	@ 0x682
 8016bc4:	490e      	ldr	r1, [pc, #56]	@ (8016c00 <tcp_seg_copy+0x50>)
 8016bc6:	480f      	ldr	r0, [pc, #60]	@ (8016c04 <tcp_seg_copy+0x54>)
 8016bc8:	f00a f984 	bl	8020ed4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8016bcc:	2003      	movs	r0, #3
 8016bce:	f7fd f8e7 	bl	8013da0 <memp_malloc>
 8016bd2:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d101      	bne.n	8016bde <tcp_seg_copy+0x2e>
    return NULL;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	e00a      	b.n	8016bf4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8016bde:	2214      	movs	r2, #20
 8016be0:	6879      	ldr	r1, [r7, #4]
 8016be2:	68f8      	ldr	r0, [r7, #12]
 8016be4:	f00a fba9 	bl	802133a <memcpy>
  pbuf_ref(cseg->p);
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	685b      	ldr	r3, [r3, #4]
 8016bec:	4618      	mov	r0, r3
 8016bee:	f7fe f9f7 	bl	8014fe0 <pbuf_ref>
  return cseg;
 8016bf2:	68fb      	ldr	r3, [r7, #12]
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3710      	adds	r7, #16
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	080240b0 	.word	0x080240b0
 8016c00:	08024604 	.word	0x08024604
 8016c04:	080240f4 	.word	0x080240f4

08016c08 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b084      	sub	sp, #16
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	60f8      	str	r0, [r7, #12]
 8016c10:	60b9      	str	r1, [r7, #8]
 8016c12:	607a      	str	r2, [r7, #4]
 8016c14:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8016c16:	68bb      	ldr	r3, [r7, #8]
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d109      	bne.n	8016c30 <tcp_recv_null+0x28>
 8016c1c:	4b12      	ldr	r3, [pc, #72]	@ (8016c68 <tcp_recv_null+0x60>)
 8016c1e:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016c22:	4912      	ldr	r1, [pc, #72]	@ (8016c6c <tcp_recv_null+0x64>)
 8016c24:	4812      	ldr	r0, [pc, #72]	@ (8016c70 <tcp_recv_null+0x68>)
 8016c26:	f00a f955 	bl	8020ed4 <iprintf>
 8016c2a:	f06f 030f 	mvn.w	r3, #15
 8016c2e:	e016      	b.n	8016c5e <tcp_recv_null+0x56>

  if (p != NULL) {
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d009      	beq.n	8016c4a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	891b      	ldrh	r3, [r3, #8]
 8016c3a:	4619      	mov	r1, r3
 8016c3c:	68b8      	ldr	r0, [r7, #8]
 8016c3e:	f7ff f9b9 	bl	8015fb4 <tcp_recved>
    pbuf_free(p);
 8016c42:	6878      	ldr	r0, [r7, #4]
 8016c44:	f7fe f90e 	bl	8014e64 <pbuf_free>
 8016c48:	e008      	b.n	8016c5c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8016c4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d104      	bne.n	8016c5c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8016c52:	68b8      	ldr	r0, [r7, #8]
 8016c54:	f7fe ff6a 	bl	8015b2c <tcp_close>
 8016c58:	4603      	mov	r3, r0
 8016c5a:	e000      	b.n	8016c5e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8016c5c:	2300      	movs	r3, #0
}
 8016c5e:	4618      	mov	r0, r3
 8016c60:	3710      	adds	r7, #16
 8016c62:	46bd      	mov	sp, r7
 8016c64:	bd80      	pop	{r7, pc}
 8016c66:	bf00      	nop
 8016c68:	080240b0 	.word	0x080240b0
 8016c6c:	08024620 	.word	0x08024620
 8016c70:	080240f4 	.word	0x080240f4

08016c74 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	b086      	sub	sp, #24
 8016c78:	af00      	add	r7, sp, #0
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8016c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	db01      	blt.n	8016c8a <tcp_kill_prio+0x16>
 8016c86:	79fb      	ldrb	r3, [r7, #7]
 8016c88:	e000      	b.n	8016c8c <tcp_kill_prio+0x18>
 8016c8a:	237f      	movs	r3, #127	@ 0x7f
 8016c8c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8016c8e:	7afb      	ldrb	r3, [r7, #11]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d034      	beq.n	8016cfe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8016c94:	7afb      	ldrb	r3, [r7, #11]
 8016c96:	3b01      	subs	r3, #1
 8016c98:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ca2:	4b19      	ldr	r3, [pc, #100]	@ (8016d08 <tcp_kill_prio+0x94>)
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	617b      	str	r3, [r7, #20]
 8016ca8:	e01f      	b.n	8016cea <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8016caa:	697b      	ldr	r3, [r7, #20]
 8016cac:	7d5b      	ldrb	r3, [r3, #21]
 8016cae:	7afa      	ldrb	r2, [r7, #11]
 8016cb0:	429a      	cmp	r2, r3
 8016cb2:	d80c      	bhi.n	8016cce <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8016cb8:	7afa      	ldrb	r2, [r7, #11]
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d112      	bne.n	8016ce4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8016cbe:	4b13      	ldr	r3, [pc, #76]	@ (8016d0c <tcp_kill_prio+0x98>)
 8016cc0:	681a      	ldr	r2, [r3, #0]
 8016cc2:	697b      	ldr	r3, [r7, #20]
 8016cc4:	6a1b      	ldr	r3, [r3, #32]
 8016cc6:	1ad3      	subs	r3, r2, r3
 8016cc8:	68fa      	ldr	r2, [r7, #12]
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	d80a      	bhi.n	8016ce4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8016cce:	4b0f      	ldr	r3, [pc, #60]	@ (8016d0c <tcp_kill_prio+0x98>)
 8016cd0:	681a      	ldr	r2, [r3, #0]
 8016cd2:	697b      	ldr	r3, [r7, #20]
 8016cd4:	6a1b      	ldr	r3, [r3, #32]
 8016cd6:	1ad3      	subs	r3, r2, r3
 8016cd8:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8016cda:	697b      	ldr	r3, [r7, #20]
 8016cdc:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	7d5b      	ldrb	r3, [r3, #21]
 8016ce2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016ce4:	697b      	ldr	r3, [r7, #20]
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	617b      	str	r3, [r7, #20]
 8016cea:	697b      	ldr	r3, [r7, #20]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d1dc      	bne.n	8016caa <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8016cf0:	693b      	ldr	r3, [r7, #16]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d004      	beq.n	8016d00 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016cf6:	6938      	ldr	r0, [r7, #16]
 8016cf8:	f7ff f85e 	bl	8015db8 <tcp_abort>
 8016cfc:	e000      	b.n	8016d00 <tcp_kill_prio+0x8c>
    return;
 8016cfe:	bf00      	nop
  }
}
 8016d00:	3718      	adds	r7, #24
 8016d02:	46bd      	mov	sp, r7
 8016d04:	bd80      	pop	{r7, pc}
 8016d06:	bf00      	nop
 8016d08:	2002d478 	.word	0x2002d478
 8016d0c:	2002d46c 	.word	0x2002d46c

08016d10 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b086      	sub	sp, #24
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	4603      	mov	r3, r0
 8016d18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8016d1a:	79fb      	ldrb	r3, [r7, #7]
 8016d1c:	2b08      	cmp	r3, #8
 8016d1e:	d009      	beq.n	8016d34 <tcp_kill_state+0x24>
 8016d20:	79fb      	ldrb	r3, [r7, #7]
 8016d22:	2b09      	cmp	r3, #9
 8016d24:	d006      	beq.n	8016d34 <tcp_kill_state+0x24>
 8016d26:	4b1a      	ldr	r3, [pc, #104]	@ (8016d90 <tcp_kill_state+0x80>)
 8016d28:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8016d2c:	4919      	ldr	r1, [pc, #100]	@ (8016d94 <tcp_kill_state+0x84>)
 8016d2e:	481a      	ldr	r0, [pc, #104]	@ (8016d98 <tcp_kill_state+0x88>)
 8016d30:	f00a f8d0 	bl	8020ed4 <iprintf>

  inactivity = 0;
 8016d34:	2300      	movs	r3, #0
 8016d36:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8016d38:	2300      	movs	r3, #0
 8016d3a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d3c:	4b17      	ldr	r3, [pc, #92]	@ (8016d9c <tcp_kill_state+0x8c>)
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	617b      	str	r3, [r7, #20]
 8016d42:	e017      	b.n	8016d74 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8016d44:	697b      	ldr	r3, [r7, #20]
 8016d46:	7d1b      	ldrb	r3, [r3, #20]
 8016d48:	79fa      	ldrb	r2, [r7, #7]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d10f      	bne.n	8016d6e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016d4e:	4b14      	ldr	r3, [pc, #80]	@ (8016da0 <tcp_kill_state+0x90>)
 8016d50:	681a      	ldr	r2, [r3, #0]
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	6a1b      	ldr	r3, [r3, #32]
 8016d56:	1ad3      	subs	r3, r2, r3
 8016d58:	68fa      	ldr	r2, [r7, #12]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d807      	bhi.n	8016d6e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8016d5e:	4b10      	ldr	r3, [pc, #64]	@ (8016da0 <tcp_kill_state+0x90>)
 8016d60:	681a      	ldr	r2, [r3, #0]
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	6a1b      	ldr	r3, [r3, #32]
 8016d66:	1ad3      	subs	r3, r2, r3
 8016d68:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8016d6a:	697b      	ldr	r3, [r7, #20]
 8016d6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	68db      	ldr	r3, [r3, #12]
 8016d72:	617b      	str	r3, [r7, #20]
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d1e4      	bne.n	8016d44 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8016d7a:	693b      	ldr	r3, [r7, #16]
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d003      	beq.n	8016d88 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8016d80:	2100      	movs	r1, #0
 8016d82:	6938      	ldr	r0, [r7, #16]
 8016d84:	f7fe ff5a 	bl	8015c3c <tcp_abandon>
  }
}
 8016d88:	bf00      	nop
 8016d8a:	3718      	adds	r7, #24
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd80      	pop	{r7, pc}
 8016d90:	080240b0 	.word	0x080240b0
 8016d94:	0802463c 	.word	0x0802463c
 8016d98:	080240f4 	.word	0x080240f4
 8016d9c:	2002d478 	.word	0x2002d478
 8016da0:	2002d46c 	.word	0x2002d46c

08016da4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b084      	sub	sp, #16
 8016da8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8016daa:	2300      	movs	r3, #0
 8016dac:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8016dae:	2300      	movs	r3, #0
 8016db0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016db2:	4b12      	ldr	r3, [pc, #72]	@ (8016dfc <tcp_kill_timewait+0x58>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	60fb      	str	r3, [r7, #12]
 8016db8:	e012      	b.n	8016de0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8016dba:	4b11      	ldr	r3, [pc, #68]	@ (8016e00 <tcp_kill_timewait+0x5c>)
 8016dbc:	681a      	ldr	r2, [r3, #0]
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	6a1b      	ldr	r3, [r3, #32]
 8016dc2:	1ad3      	subs	r3, r2, r3
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	429a      	cmp	r2, r3
 8016dc8:	d807      	bhi.n	8016dda <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8016dca:	4b0d      	ldr	r3, [pc, #52]	@ (8016e00 <tcp_kill_timewait+0x5c>)
 8016dcc:	681a      	ldr	r2, [r3, #0]
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	6a1b      	ldr	r3, [r3, #32]
 8016dd2:	1ad3      	subs	r3, r2, r3
 8016dd4:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016dda:	68fb      	ldr	r3, [r7, #12]
 8016ddc:	68db      	ldr	r3, [r3, #12]
 8016dde:	60fb      	str	r3, [r7, #12]
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d1e9      	bne.n	8016dba <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8016de6:	68bb      	ldr	r3, [r7, #8]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d002      	beq.n	8016df2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8016dec:	68b8      	ldr	r0, [r7, #8]
 8016dee:	f7fe ffe3 	bl	8015db8 <tcp_abort>
  }
}
 8016df2:	bf00      	nop
 8016df4:	3710      	adds	r7, #16
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}
 8016dfa:	bf00      	nop
 8016dfc:	2002d47c 	.word	0x2002d47c
 8016e00:	2002d46c 	.word	0x2002d46c

08016e04 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8016e0a:	4b10      	ldr	r3, [pc, #64]	@ (8016e4c <tcp_handle_closepend+0x48>)
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8016e10:	e014      	b.n	8016e3c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	68db      	ldr	r3, [r3, #12]
 8016e16:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	8b5b      	ldrh	r3, [r3, #26]
 8016e1c:	f003 0308 	and.w	r3, r3, #8
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d009      	beq.n	8016e38 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	8b5b      	ldrh	r3, [r3, #26]
 8016e28:	f023 0308 	bic.w	r3, r3, #8
 8016e2c:	b29a      	uxth	r2, r3
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8016e32:	6878      	ldr	r0, [r7, #4]
 8016e34:	f7fe fe10 	bl	8015a58 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d1e7      	bne.n	8016e12 <tcp_handle_closepend+0xe>
  }
}
 8016e42:	bf00      	nop
 8016e44:	bf00      	nop
 8016e46:	3708      	adds	r7, #8
 8016e48:	46bd      	mov	sp, r7
 8016e4a:	bd80      	pop	{r7, pc}
 8016e4c:	2002d478 	.word	0x2002d478

08016e50 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	4603      	mov	r3, r0
 8016e58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016e5a:	2001      	movs	r0, #1
 8016e5c:	f7fc ffa0 	bl	8013da0 <memp_malloc>
 8016e60:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d14e      	bne.n	8016f06 <tcp_alloc+0xb6>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016e68:	f7ff ffcc 	bl	8016e04 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016e6c:	f7ff ff9a 	bl	8016da4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016e70:	2001      	movs	r0, #1
 8016e72:	f7fc ff95 	bl	8013da0 <memp_malloc>
 8016e76:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d139      	bne.n	8016ef2 <tcp_alloc+0xa2>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016e7e:	2009      	movs	r0, #9
 8016e80:	f7ff ff46 	bl	8016d10 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016e84:	2001      	movs	r0, #1
 8016e86:	f7fc ff8b 	bl	8013da0 <memp_malloc>
 8016e8a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016e8c:	68fb      	ldr	r3, [r7, #12]
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d125      	bne.n	8016ede <tcp_alloc+0x8e>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8016e92:	2008      	movs	r0, #8
 8016e94:	f7ff ff3c 	bl	8016d10 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016e98:	2001      	movs	r0, #1
 8016e9a:	f7fc ff81 	bl	8013da0 <memp_malloc>
 8016e9e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d111      	bne.n	8016eca <tcp_alloc+0x7a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8016ea6:	79fb      	ldrb	r3, [r7, #7]
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	f7ff fee3 	bl	8016c74 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016eae:	2001      	movs	r0, #1
 8016eb0:	f7fc ff76 	bl	8013da0 <memp_malloc>
 8016eb4:	60f8      	str	r0, [r7, #12]
          if (pcb != NULL) {
 8016eb6:	68fb      	ldr	r3, [r7, #12]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d006      	beq.n	8016eca <tcp_alloc+0x7a>
            /* adjust err stats: memp_malloc failed multiple times before */
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016ebc:	4b36      	ldr	r3, [pc, #216]	@ (8016f98 <tcp_alloc+0x148>)
 8016ebe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016ec2:	889a      	ldrh	r2, [r3, #4]
 8016ec4:	3a01      	subs	r2, #1
 8016ec6:	b292      	uxth	r2, r2
 8016ec8:	809a      	strh	r2, [r3, #4]
          }
        }
        if (pcb != NULL) {
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d006      	beq.n	8016ede <tcp_alloc+0x8e>
          /* adjust err stats: memp_malloc failed multiple times before */
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016ed0:	4b31      	ldr	r3, [pc, #196]	@ (8016f98 <tcp_alloc+0x148>)
 8016ed2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016ed6:	889a      	ldrh	r2, [r3, #4]
 8016ed8:	3a01      	subs	r2, #1
 8016eda:	b292      	uxth	r2, r2
 8016edc:	809a      	strh	r2, [r3, #4]
        }
      }
      if (pcb != NULL) {
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d006      	beq.n	8016ef2 <tcp_alloc+0xa2>
        /* adjust err stats: memp_malloc failed multiple times before */
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8016f98 <tcp_alloc+0x148>)
 8016ee6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016eea:	889a      	ldrh	r2, [r3, #4]
 8016eec:	3a01      	subs	r2, #1
 8016eee:	b292      	uxth	r2, r2
 8016ef0:	809a      	strh	r2, [r3, #4]
      }
    }
    if (pcb != NULL) {
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d006      	beq.n	8016f06 <tcp_alloc+0xb6>
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 8016ef8:	4b27      	ldr	r3, [pc, #156]	@ (8016f98 <tcp_alloc+0x148>)
 8016efa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8016efe:	889a      	ldrh	r2, [r3, #4]
 8016f00:	3a01      	subs	r2, #1
 8016f02:	b292      	uxth	r2, r2
 8016f04:	809a      	strh	r2, [r3, #4]
    }
  }
  if (pcb != NULL) {
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d03f      	beq.n	8016f8c <tcp_alloc+0x13c>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8016f0c:	229c      	movs	r2, #156	@ 0x9c
 8016f0e:	2100      	movs	r1, #0
 8016f10:	68f8      	ldr	r0, [r7, #12]
 8016f12:	f00a f93f 	bl	8021194 <memset>
    pcb->prio = prio;
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	79fa      	ldrb	r2, [r7, #7]
 8016f1a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016f22:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8016f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016f32:	68fb      	ldr	r3, [r7, #12]
 8016f34:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	22ff      	movs	r2, #255	@ 0xff
 8016f3a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016f42:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	2206      	movs	r2, #6
 8016f48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	2206      	movs	r2, #6
 8016f50:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016f58:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	2201      	movs	r2, #1
 8016f5e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8016f62:	4b0e      	ldr	r3, [pc, #56]	@ (8016f9c <tcp_alloc+0x14c>)
 8016f64:	681a      	ldr	r2, [r3, #0]
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8016fa0 <tcp_alloc+0x150>)
 8016f6c:	781a      	ldrb	r2, [r3, #0]
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8016f78:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	4a09      	ldr	r2, [pc, #36]	@ (8016fa4 <tcp_alloc+0x154>)
 8016f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8016f84:	68fb      	ldr	r3, [r7, #12]
 8016f86:	4a08      	ldr	r2, [pc, #32]	@ (8016fa8 <tcp_alloc+0x158>)
 8016f88:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016f8c:	68fb      	ldr	r3, [r7, #12]
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3710      	adds	r7, #16
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	2002d36c 	.word	0x2002d36c
 8016f9c:	2002d46c 	.word	0x2002d46c
 8016fa0:	2002d482 	.word	0x2002d482
 8016fa4:	08016c09 	.word	0x08016c09
 8016fa8:	006ddd00 	.word	0x006ddd00

08016fac <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b084      	sub	sp, #16
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8016fb6:	2040      	movs	r0, #64	@ 0x40
 8016fb8:	f7ff ff4a 	bl	8016e50 <tcp_alloc>
 8016fbc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016fbe:	68fb      	ldr	r3, [r7, #12]
}
 8016fc0:	4618      	mov	r0, r3
 8016fc2:	3710      	adds	r7, #16
 8016fc4:	46bd      	mov	sp, r7
 8016fc6:	bd80      	pop	{r7, pc}

08016fc8 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8016fc8:	b480      	push	{r7}
 8016fca:	b083      	sub	sp, #12
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d002      	beq.n	8016fde <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	683a      	ldr	r2, [r7, #0]
 8016fdc:	611a      	str	r2, [r3, #16]
  }
}
 8016fde:	bf00      	nop
 8016fe0:	370c      	adds	r7, #12
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fe8:	4770      	bx	lr
	...

08016fec <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
 8016ff4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d00e      	beq.n	801701a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	7d1b      	ldrb	r3, [r3, #20]
 8017000:	2b01      	cmp	r3, #1
 8017002:	d106      	bne.n	8017012 <tcp_recv+0x26>
 8017004:	4b07      	ldr	r3, [pc, #28]	@ (8017024 <tcp_recv+0x38>)
 8017006:	f240 72df 	movw	r2, #2015	@ 0x7df
 801700a:	4907      	ldr	r1, [pc, #28]	@ (8017028 <tcp_recv+0x3c>)
 801700c:	4807      	ldr	r0, [pc, #28]	@ (801702c <tcp_recv+0x40>)
 801700e:	f009 ff61 	bl	8020ed4 <iprintf>
    pcb->recv = recv;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	683a      	ldr	r2, [r7, #0]
 8017016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801701a:	bf00      	nop
 801701c:	3708      	adds	r7, #8
 801701e:	46bd      	mov	sp, r7
 8017020:	bd80      	pop	{r7, pc}
 8017022:	bf00      	nop
 8017024:	080240b0 	.word	0x080240b0
 8017028:	0802464c 	.word	0x0802464c
 801702c:	080240f4 	.word	0x080240f4

08017030 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b082      	sub	sp, #8
 8017034:	af00      	add	r7, sp, #0
 8017036:	6078      	str	r0, [r7, #4]
 8017038:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d00e      	beq.n	801705e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	7d1b      	ldrb	r3, [r3, #20]
 8017044:	2b01      	cmp	r3, #1
 8017046:	d106      	bne.n	8017056 <tcp_sent+0x26>
 8017048:	4b07      	ldr	r3, [pc, #28]	@ (8017068 <tcp_sent+0x38>)
 801704a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801704e:	4907      	ldr	r1, [pc, #28]	@ (801706c <tcp_sent+0x3c>)
 8017050:	4807      	ldr	r0, [pc, #28]	@ (8017070 <tcp_sent+0x40>)
 8017052:	f009 ff3f 	bl	8020ed4 <iprintf>
    pcb->sent = sent;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	683a      	ldr	r2, [r7, #0]
 801705a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 801705e:	bf00      	nop
 8017060:	3708      	adds	r7, #8
 8017062:	46bd      	mov	sp, r7
 8017064:	bd80      	pop	{r7, pc}
 8017066:	bf00      	nop
 8017068:	080240b0 	.word	0x080240b0
 801706c:	08024674 	.word	0x08024674
 8017070:	080240f4 	.word	0x080240f4

08017074 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b082      	sub	sp, #8
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d00e      	beq.n	80170a2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	7d1b      	ldrb	r3, [r3, #20]
 8017088:	2b01      	cmp	r3, #1
 801708a:	d106      	bne.n	801709a <tcp_err+0x26>
 801708c:	4b07      	ldr	r3, [pc, #28]	@ (80170ac <tcp_err+0x38>)
 801708e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8017092:	4907      	ldr	r1, [pc, #28]	@ (80170b0 <tcp_err+0x3c>)
 8017094:	4807      	ldr	r0, [pc, #28]	@ (80170b4 <tcp_err+0x40>)
 8017096:	f009 ff1d 	bl	8020ed4 <iprintf>
    pcb->errf = err;
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	683a      	ldr	r2, [r7, #0]
 801709e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80170a2:	bf00      	nop
 80170a4:	3708      	adds	r7, #8
 80170a6:	46bd      	mov	sp, r7
 80170a8:	bd80      	pop	{r7, pc}
 80170aa:	bf00      	nop
 80170ac:	080240b0 	.word	0x080240b0
 80170b0:	0802469c 	.word	0x0802469c
 80170b4:	080240f4 	.word	0x080240f4

080170b8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80170b8:	b480      	push	{r7}
 80170ba:	b085      	sub	sp, #20
 80170bc:	af00      	add	r7, sp, #0
 80170be:	6078      	str	r0, [r7, #4]
 80170c0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d008      	beq.n	80170da <tcp_accept+0x22>
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	7d1b      	ldrb	r3, [r3, #20]
 80170cc:	2b01      	cmp	r3, #1
 80170ce:	d104      	bne.n	80170da <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	683a      	ldr	r2, [r7, #0]
 80170d8:	619a      	str	r2, [r3, #24]
  }
}
 80170da:	bf00      	nop
 80170dc:	3714      	adds	r7, #20
 80170de:	46bd      	mov	sp, r7
 80170e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170e4:	4770      	bx	lr
	...

080170e8 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80170e8:	b580      	push	{r7, lr}
 80170ea:	b084      	sub	sp, #16
 80170ec:	af00      	add	r7, sp, #0
 80170ee:	60f8      	str	r0, [r7, #12]
 80170f0:	60b9      	str	r1, [r7, #8]
 80170f2:	4613      	mov	r3, r2
 80170f4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d107      	bne.n	801710c <tcp_poll+0x24>
 80170fc:	4b0e      	ldr	r3, [pc, #56]	@ (8017138 <tcp_poll+0x50>)
 80170fe:	f640 023d 	movw	r2, #2109	@ 0x83d
 8017102:	490e      	ldr	r1, [pc, #56]	@ (801713c <tcp_poll+0x54>)
 8017104:	480e      	ldr	r0, [pc, #56]	@ (8017140 <tcp_poll+0x58>)
 8017106:	f009 fee5 	bl	8020ed4 <iprintf>
 801710a:	e011      	b.n	8017130 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	7d1b      	ldrb	r3, [r3, #20]
 8017110:	2b01      	cmp	r3, #1
 8017112:	d106      	bne.n	8017122 <tcp_poll+0x3a>
 8017114:	4b08      	ldr	r3, [pc, #32]	@ (8017138 <tcp_poll+0x50>)
 8017116:	f640 023e 	movw	r2, #2110	@ 0x83e
 801711a:	490a      	ldr	r1, [pc, #40]	@ (8017144 <tcp_poll+0x5c>)
 801711c:	4808      	ldr	r0, [pc, #32]	@ (8017140 <tcp_poll+0x58>)
 801711e:	f009 fed9 	bl	8020ed4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	68ba      	ldr	r2, [r7, #8]
 8017126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	79fa      	ldrb	r2, [r7, #7]
 801712e:	775a      	strb	r2, [r3, #29]
}
 8017130:	3710      	adds	r7, #16
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}
 8017136:	bf00      	nop
 8017138:	080240b0 	.word	0x080240b0
 801713c:	080246c4 	.word	0x080246c4
 8017140:	080240f4 	.word	0x080240f4
 8017144:	080246dc 	.word	0x080246dc

08017148 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b082      	sub	sp, #8
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d107      	bne.n	8017166 <tcp_pcb_purge+0x1e>
 8017156:	4b21      	ldr	r3, [pc, #132]	@ (80171dc <tcp_pcb_purge+0x94>)
 8017158:	f640 0251 	movw	r2, #2129	@ 0x851
 801715c:	4920      	ldr	r1, [pc, #128]	@ (80171e0 <tcp_pcb_purge+0x98>)
 801715e:	4821      	ldr	r0, [pc, #132]	@ (80171e4 <tcp_pcb_purge+0x9c>)
 8017160:	f009 feb8 	bl	8020ed4 <iprintf>
 8017164:	e037      	b.n	80171d6 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	7d1b      	ldrb	r3, [r3, #20]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d033      	beq.n	80171d6 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8017172:	2b0a      	cmp	r3, #10
 8017174:	d02f      	beq.n	80171d6 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801717a:	2b01      	cmp	r3, #1
 801717c:	d02b      	beq.n	80171d6 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017182:	2b00      	cmp	r3, #0
 8017184:	d007      	beq.n	8017196 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801718a:	4618      	mov	r0, r3
 801718c:	f7fd fe6a 	bl	8014e64 <pbuf_free>
      pcb->refused_data = NULL;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2200      	movs	r2, #0
 8017194:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801719a:	2b00      	cmp	r3, #0
 801719c:	d002      	beq.n	80171a4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801719e:	6878      	ldr	r0, [r7, #4]
 80171a0:	f000 f98c 	bl	80174bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80171aa:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80171b0:	4618      	mov	r0, r3
 80171b2:	f7ff fccf 	bl	8016b54 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171ba:	4618      	mov	r0, r3
 80171bc:	f7ff fcca 	bl	8016b54 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2200      	movs	r2, #0
 80171c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	2200      	movs	r2, #0
 80171d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80171d6:	3708      	adds	r7, #8
 80171d8:	46bd      	mov	sp, r7
 80171da:	bd80      	pop	{r7, pc}
 80171dc:	080240b0 	.word	0x080240b0
 80171e0:	080246fc 	.word	0x080246fc
 80171e4:	080240f4 	.word	0x080240f4

080171e8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b084      	sub	sp, #16
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
 80171f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d106      	bne.n	8017206 <tcp_pcb_remove+0x1e>
 80171f8:	4b3e      	ldr	r3, [pc, #248]	@ (80172f4 <tcp_pcb_remove+0x10c>)
 80171fa:	f640 0283 	movw	r2, #2179	@ 0x883
 80171fe:	493e      	ldr	r1, [pc, #248]	@ (80172f8 <tcp_pcb_remove+0x110>)
 8017200:	483e      	ldr	r0, [pc, #248]	@ (80172fc <tcp_pcb_remove+0x114>)
 8017202:	f009 fe67 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d106      	bne.n	801721a <tcp_pcb_remove+0x32>
 801720c:	4b39      	ldr	r3, [pc, #228]	@ (80172f4 <tcp_pcb_remove+0x10c>)
 801720e:	f640 0284 	movw	r2, #2180	@ 0x884
 8017212:	493b      	ldr	r1, [pc, #236]	@ (8017300 <tcp_pcb_remove+0x118>)
 8017214:	4839      	ldr	r0, [pc, #228]	@ (80172fc <tcp_pcb_remove+0x114>)
 8017216:	f009 fe5d 	bl	8020ed4 <iprintf>

  TCP_RMV(pcblist, pcb);
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	683a      	ldr	r2, [r7, #0]
 8017220:	429a      	cmp	r2, r3
 8017222:	d105      	bne.n	8017230 <tcp_pcb_remove+0x48>
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	68da      	ldr	r2, [r3, #12]
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	601a      	str	r2, [r3, #0]
 801722e:	e013      	b.n	8017258 <tcp_pcb_remove+0x70>
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	60fb      	str	r3, [r7, #12]
 8017236:	e00c      	b.n	8017252 <tcp_pcb_remove+0x6a>
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	68db      	ldr	r3, [r3, #12]
 801723c:	683a      	ldr	r2, [r7, #0]
 801723e:	429a      	cmp	r2, r3
 8017240:	d104      	bne.n	801724c <tcp_pcb_remove+0x64>
 8017242:	683b      	ldr	r3, [r7, #0]
 8017244:	68da      	ldr	r2, [r3, #12]
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	60da      	str	r2, [r3, #12]
 801724a:	e005      	b.n	8017258 <tcp_pcb_remove+0x70>
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	60fb      	str	r3, [r7, #12]
 8017252:	68fb      	ldr	r3, [r7, #12]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d1ef      	bne.n	8017238 <tcp_pcb_remove+0x50>
 8017258:	683b      	ldr	r3, [r7, #0]
 801725a:	2200      	movs	r2, #0
 801725c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801725e:	6838      	ldr	r0, [r7, #0]
 8017260:	f7ff ff72 	bl	8017148 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	7d1b      	ldrb	r3, [r3, #20]
 8017268:	2b0a      	cmp	r3, #10
 801726a:	d013      	beq.n	8017294 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8017270:	2b01      	cmp	r3, #1
 8017272:	d00f      	beq.n	8017294 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8017274:	683b      	ldr	r3, [r7, #0]
 8017276:	8b5b      	ldrh	r3, [r3, #26]
 8017278:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801727c:	2b00      	cmp	r3, #0
 801727e:	d009      	beq.n	8017294 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8017280:	683b      	ldr	r3, [r7, #0]
 8017282:	8b5b      	ldrh	r3, [r3, #26]
 8017284:	f043 0302 	orr.w	r3, r3, #2
 8017288:	b29a      	uxth	r2, r3
 801728a:	683b      	ldr	r3, [r7, #0]
 801728c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801728e:	6838      	ldr	r0, [r7, #0]
 8017290:	f003 fcc8 	bl	801ac24 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8017294:	683b      	ldr	r3, [r7, #0]
 8017296:	7d1b      	ldrb	r3, [r3, #20]
 8017298:	2b01      	cmp	r3, #1
 801729a:	d020      	beq.n	80172de <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d006      	beq.n	80172b2 <tcp_pcb_remove+0xca>
 80172a4:	4b13      	ldr	r3, [pc, #76]	@ (80172f4 <tcp_pcb_remove+0x10c>)
 80172a6:	f640 0293 	movw	r2, #2195	@ 0x893
 80172aa:	4916      	ldr	r1, [pc, #88]	@ (8017304 <tcp_pcb_remove+0x11c>)
 80172ac:	4813      	ldr	r0, [pc, #76]	@ (80172fc <tcp_pcb_remove+0x114>)
 80172ae:	f009 fe11 	bl	8020ed4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d006      	beq.n	80172c8 <tcp_pcb_remove+0xe0>
 80172ba:	4b0e      	ldr	r3, [pc, #56]	@ (80172f4 <tcp_pcb_remove+0x10c>)
 80172bc:	f640 0294 	movw	r2, #2196	@ 0x894
 80172c0:	4911      	ldr	r1, [pc, #68]	@ (8017308 <tcp_pcb_remove+0x120>)
 80172c2:	480e      	ldr	r0, [pc, #56]	@ (80172fc <tcp_pcb_remove+0x114>)
 80172c4:	f009 fe06 	bl	8020ed4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80172c8:	683b      	ldr	r3, [r7, #0]
 80172ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d006      	beq.n	80172de <tcp_pcb_remove+0xf6>
 80172d0:	4b08      	ldr	r3, [pc, #32]	@ (80172f4 <tcp_pcb_remove+0x10c>)
 80172d2:	f640 0296 	movw	r2, #2198	@ 0x896
 80172d6:	490d      	ldr	r1, [pc, #52]	@ (801730c <tcp_pcb_remove+0x124>)
 80172d8:	4808      	ldr	r0, [pc, #32]	@ (80172fc <tcp_pcb_remove+0x114>)
 80172da:	f009 fdfb 	bl	8020ed4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	2200      	movs	r2, #0
 80172e2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	2200      	movs	r2, #0
 80172e8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80172ea:	bf00      	nop
 80172ec:	3710      	adds	r7, #16
 80172ee:	46bd      	mov	sp, r7
 80172f0:	bd80      	pop	{r7, pc}
 80172f2:	bf00      	nop
 80172f4:	080240b0 	.word	0x080240b0
 80172f8:	08024718 	.word	0x08024718
 80172fc:	080240f4 	.word	0x080240f4
 8017300:	08024734 	.word	0x08024734
 8017304:	08024754 	.word	0x08024754
 8017308:	0802476c 	.word	0x0802476c
 801730c:	08024788 	.word	0x08024788

08017310 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	2b00      	cmp	r3, #0
 801731c:	d106      	bne.n	801732c <tcp_next_iss+0x1c>
 801731e:	4b0a      	ldr	r3, [pc, #40]	@ (8017348 <tcp_next_iss+0x38>)
 8017320:	f640 02af 	movw	r2, #2223	@ 0x8af
 8017324:	4909      	ldr	r1, [pc, #36]	@ (801734c <tcp_next_iss+0x3c>)
 8017326:	480a      	ldr	r0, [pc, #40]	@ (8017350 <tcp_next_iss+0x40>)
 8017328:	f009 fdd4 	bl	8020ed4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801732c:	4b09      	ldr	r3, [pc, #36]	@ (8017354 <tcp_next_iss+0x44>)
 801732e:	681a      	ldr	r2, [r3, #0]
 8017330:	4b09      	ldr	r3, [pc, #36]	@ (8017358 <tcp_next_iss+0x48>)
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	4413      	add	r3, r2
 8017336:	4a07      	ldr	r2, [pc, #28]	@ (8017354 <tcp_next_iss+0x44>)
 8017338:	6013      	str	r3, [r2, #0]
  return iss;
 801733a:	4b06      	ldr	r3, [pc, #24]	@ (8017354 <tcp_next_iss+0x44>)
 801733c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801733e:	4618      	mov	r0, r3
 8017340:	3708      	adds	r7, #8
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	080240b0 	.word	0x080240b0
 801734c:	080247a0 	.word	0x080247a0
 8017350:	080240f4 	.word	0x080240f4
 8017354:	2000006c 	.word	0x2000006c
 8017358:	2002d46c 	.word	0x2002d46c

0801735c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b086      	sub	sp, #24
 8017360:	af00      	add	r7, sp, #0
 8017362:	4603      	mov	r3, r0
 8017364:	60b9      	str	r1, [r7, #8]
 8017366:	607a      	str	r2, [r7, #4]
 8017368:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	2b00      	cmp	r3, #0
 801736e:	d106      	bne.n	801737e <tcp_eff_send_mss_netif+0x22>
 8017370:	4b14      	ldr	r3, [pc, #80]	@ (80173c4 <tcp_eff_send_mss_netif+0x68>)
 8017372:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8017376:	4914      	ldr	r1, [pc, #80]	@ (80173c8 <tcp_eff_send_mss_netif+0x6c>)
 8017378:	4814      	ldr	r0, [pc, #80]	@ (80173cc <tcp_eff_send_mss_netif+0x70>)
 801737a:	f009 fdab 	bl	8020ed4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801737e:	68bb      	ldr	r3, [r7, #8]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d101      	bne.n	8017388 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8017384:	89fb      	ldrh	r3, [r7, #14]
 8017386:	e019      	b.n	80173bc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801738c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801738e:	8afb      	ldrh	r3, [r7, #22]
 8017390:	2b00      	cmp	r3, #0
 8017392:	d012      	beq.n	80173ba <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8017394:	2328      	movs	r3, #40	@ 0x28
 8017396:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8017398:	8afa      	ldrh	r2, [r7, #22]
 801739a:	8abb      	ldrh	r3, [r7, #20]
 801739c:	429a      	cmp	r2, r3
 801739e:	d904      	bls.n	80173aa <tcp_eff_send_mss_netif+0x4e>
 80173a0:	8afa      	ldrh	r2, [r7, #22]
 80173a2:	8abb      	ldrh	r3, [r7, #20]
 80173a4:	1ad3      	subs	r3, r2, r3
 80173a6:	b29b      	uxth	r3, r3
 80173a8:	e000      	b.n	80173ac <tcp_eff_send_mss_netif+0x50>
 80173aa:	2300      	movs	r3, #0
 80173ac:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80173ae:	8a7a      	ldrh	r2, [r7, #18]
 80173b0:	89fb      	ldrh	r3, [r7, #14]
 80173b2:	4293      	cmp	r3, r2
 80173b4:	bf28      	it	cs
 80173b6:	4613      	movcs	r3, r2
 80173b8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80173ba:	89fb      	ldrh	r3, [r7, #14]
}
 80173bc:	4618      	mov	r0, r3
 80173be:	3718      	adds	r7, #24
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	080240b0 	.word	0x080240b0
 80173c8:	080247bc 	.word	0x080247bc
 80173cc:	080240f4 	.word	0x080240f4

080173d0 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80173d0:	b580      	push	{r7, lr}
 80173d2:	b084      	sub	sp, #16
 80173d4:	af00      	add	r7, sp, #0
 80173d6:	6078      	str	r0, [r7, #4]
 80173d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80173da:	683b      	ldr	r3, [r7, #0]
 80173dc:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d11d      	bne.n	8017420 <tcp_netif_ip_addr_changed_pcblist+0x50>
 80173e4:	4b12      	ldr	r3, [pc, #72]	@ (8017430 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80173e6:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80173ea:	4912      	ldr	r1, [pc, #72]	@ (8017434 <tcp_netif_ip_addr_changed_pcblist+0x64>)
 80173ec:	4812      	ldr	r0, [pc, #72]	@ (8017438 <tcp_netif_ip_addr_changed_pcblist+0x68>)
 80173ee:	f009 fd71 	bl	8020ed4 <iprintf>

  while (pcb != NULL) {
 80173f2:	e015      	b.n	8017420 <tcp_netif_ip_addr_changed_pcblist+0x50>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80173f4:	68fb      	ldr	r3, [r7, #12]
 80173f6:	681a      	ldr	r2, [r3, #0]
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	429a      	cmp	r2, r3
 80173fe:	d10c      	bne.n	801741a <tcp_netif_ip_addr_changed_pcblist+0x4a>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	68db      	ldr	r3, [r3, #12]
 8017404:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 8017406:	68f9      	ldr	r1, [r7, #12]
 8017408:	480c      	ldr	r0, [pc, #48]	@ (801743c <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 801740a:	f009 fd63 	bl	8020ed4 <iprintf>
      tcp_abort(pcb);
 801740e:	68f8      	ldr	r0, [r7, #12]
 8017410:	f7fe fcd2 	bl	8015db8 <tcp_abort>
      pcb = next;
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	60fb      	str	r3, [r7, #12]
 8017418:	e002      	b.n	8017420 <tcp_netif_ip_addr_changed_pcblist+0x50>
    } else {
      pcb = pcb->next;
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	68db      	ldr	r3, [r3, #12]
 801741e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8017420:	68fb      	ldr	r3, [r7, #12]
 8017422:	2b00      	cmp	r3, #0
 8017424:	d1e6      	bne.n	80173f4 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8017426:	bf00      	nop
 8017428:	bf00      	nop
 801742a:	3710      	adds	r7, #16
 801742c:	46bd      	mov	sp, r7
 801742e:	bd80      	pop	{r7, pc}
 8017430:	080240b0 	.word	0x080240b0
 8017434:	080247e4 	.word	0x080247e4
 8017438:	080240f4 	.word	0x080240f4
 801743c:	08024818 	.word	0x08024818

08017440 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b084      	sub	sp, #16
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
 8017448:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d02a      	beq.n	80174a6 <tcp_netif_ip_addr_changed+0x66>
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	681b      	ldr	r3, [r3, #0]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d026      	beq.n	80174a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8017458:	4b15      	ldr	r3, [pc, #84]	@ (80174b0 <tcp_netif_ip_addr_changed+0x70>)
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	4619      	mov	r1, r3
 801745e:	6878      	ldr	r0, [r7, #4]
 8017460:	f7ff ffb6 	bl	80173d0 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8017464:	4b13      	ldr	r3, [pc, #76]	@ (80174b4 <tcp_netif_ip_addr_changed+0x74>)
 8017466:	681b      	ldr	r3, [r3, #0]
 8017468:	4619      	mov	r1, r3
 801746a:	6878      	ldr	r0, [r7, #4]
 801746c:	f7ff ffb0 	bl	80173d0 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8017470:	683b      	ldr	r3, [r7, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d017      	beq.n	80174a6 <tcp_netif_ip_addr_changed+0x66>
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	2b00      	cmp	r3, #0
 801747c:	d013      	beq.n	80174a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801747e:	4b0e      	ldr	r3, [pc, #56]	@ (80174b8 <tcp_netif_ip_addr_changed+0x78>)
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	60fb      	str	r3, [r7, #12]
 8017484:	e00c      	b.n	80174a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8017486:	68fb      	ldr	r3, [r7, #12]
 8017488:	681a      	ldr	r2, [r3, #0]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	681b      	ldr	r3, [r3, #0]
 801748e:	429a      	cmp	r2, r3
 8017490:	d103      	bne.n	801749a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8017492:	683b      	ldr	r3, [r7, #0]
 8017494:	681a      	ldr	r2, [r3, #0]
 8017496:	68fb      	ldr	r3, [r7, #12]
 8017498:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801749a:	68fb      	ldr	r3, [r7, #12]
 801749c:	68db      	ldr	r3, [r3, #12]
 801749e:	60fb      	str	r3, [r7, #12]
 80174a0:	68fb      	ldr	r3, [r7, #12]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d1ef      	bne.n	8017486 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80174a6:	bf00      	nop
 80174a8:	3710      	adds	r7, #16
 80174aa:	46bd      	mov	sp, r7
 80174ac:	bd80      	pop	{r7, pc}
 80174ae:	bf00      	nop
 80174b0:	2002d478 	.word	0x2002d478
 80174b4:	2002d470 	.word	0x2002d470
 80174b8:	2002d474 	.word	0x2002d474

080174bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d007      	beq.n	80174dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80174d0:	4618      	mov	r0, r3
 80174d2:	f7ff fb3f 	bl	8016b54 <tcp_segs_free>
    pcb->ooseq = NULL;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	2200      	movs	r2, #0
 80174da:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80174dc:	bf00      	nop
 80174de:	3708      	adds	r7, #8
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}

080174e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80174e4:	b590      	push	{r4, r7, lr}
 80174e6:	b08d      	sub	sp, #52	@ 0x34
 80174e8:	af04      	add	r7, sp, #16
 80174ea:	6078      	str	r0, [r7, #4]
 80174ec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d105      	bne.n	8017500 <tcp_input+0x1c>
 80174f4:	4b9b      	ldr	r3, [pc, #620]	@ (8017764 <tcp_input+0x280>)
 80174f6:	2283      	movs	r2, #131	@ 0x83
 80174f8:	499b      	ldr	r1, [pc, #620]	@ (8017768 <tcp_input+0x284>)
 80174fa:	489c      	ldr	r0, [pc, #624]	@ (801776c <tcp_input+0x288>)
 80174fc:	f009 fcea 	bl	8020ed4 <iprintf>

  PERF_START;

  TCP_STATS_INC(tcp.recv);
 8017500:	4b9b      	ldr	r3, [pc, #620]	@ (8017770 <tcp_input+0x28c>)
 8017502:	f8b3 3092 	ldrh.w	r3, [r3, #146]	@ 0x92
 8017506:	3301      	adds	r3, #1
 8017508:	b29a      	uxth	r2, r3
 801750a:	4b99      	ldr	r3, [pc, #612]	@ (8017770 <tcp_input+0x28c>)
 801750c:	f8a3 2092 	strh.w	r2, [r3, #146]	@ 0x92
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	685b      	ldr	r3, [r3, #4]
 8017514:	4a97      	ldr	r2, [pc, #604]	@ (8017774 <tcp_input+0x290>)
 8017516:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	895b      	ldrh	r3, [r3, #10]
 801751c:	2b13      	cmp	r3, #19
 801751e:	d809      	bhi.n	8017534 <tcp_input+0x50>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
    TCP_STATS_INC(tcp.lenerr);
 8017520:	4b93      	ldr	r3, [pc, #588]	@ (8017770 <tcp_input+0x28c>)
 8017522:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017526:	3301      	adds	r3, #1
 8017528:	b29a      	uxth	r2, r3
 801752a:	4b91      	ldr	r3, [pc, #580]	@ (8017770 <tcp_input+0x28c>)
 801752c:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 8017530:	f000 bc1c 	b.w	8017d6c <tcp_input+0x888>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017534:	4b90      	ldr	r3, [pc, #576]	@ (8017778 <tcp_input+0x294>)
 8017536:	695b      	ldr	r3, [r3, #20]
 8017538:	4a8f      	ldr	r2, [pc, #572]	@ (8017778 <tcp_input+0x294>)
 801753a:	6812      	ldr	r2, [r2, #0]
 801753c:	4611      	mov	r1, r2
 801753e:	4618      	mov	r0, r3
 8017540:	f007 f964 	bl	801e80c <ip4_addr_isbroadcast_u32>
 8017544:	4603      	mov	r3, r0
 8017546:	2b00      	cmp	r3, #0
 8017548:	d105      	bne.n	8017556 <tcp_input+0x72>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801754a:	4b8b      	ldr	r3, [pc, #556]	@ (8017778 <tcp_input+0x294>)
 801754c:	695b      	ldr	r3, [r3, #20]
 801754e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8017552:	2be0      	cmp	r3, #224	@ 0xe0
 8017554:	d109      	bne.n	801756a <tcp_input+0x86>
    TCP_STATS_INC(tcp.proterr);
 8017556:	4b86      	ldr	r3, [pc, #536]	@ (8017770 <tcp_input+0x28c>)
 8017558:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 801755c:	3301      	adds	r3, #1
 801755e:	b29a      	uxth	r2, r3
 8017560:	4b83      	ldr	r3, [pc, #524]	@ (8017770 <tcp_input+0x28c>)
 8017562:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    goto dropped;
 8017566:	f000 bc01 	b.w	8017d6c <tcp_input+0x888>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801756a:	4b82      	ldr	r3, [pc, #520]	@ (8017774 <tcp_input+0x290>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	899b      	ldrh	r3, [r3, #12]
 8017570:	b29b      	uxth	r3, r3
 8017572:	4618      	mov	r0, r3
 8017574:	f7fb fe48 	bl	8013208 <lwip_htons>
 8017578:	4603      	mov	r3, r0
 801757a:	0b1b      	lsrs	r3, r3, #12
 801757c:	b29b      	uxth	r3, r3
 801757e:	b2db      	uxtb	r3, r3
 8017580:	009b      	lsls	r3, r3, #2
 8017582:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8017584:	7cbb      	ldrb	r3, [r7, #18]
 8017586:	2b13      	cmp	r3, #19
 8017588:	d905      	bls.n	8017596 <tcp_input+0xb2>
 801758a:	7cbb      	ldrb	r3, [r7, #18]
 801758c:	b29a      	uxth	r2, r3
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	891b      	ldrh	r3, [r3, #8]
 8017592:	429a      	cmp	r2, r3
 8017594:	d908      	bls.n	80175a8 <tcp_input+0xc4>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
    TCP_STATS_INC(tcp.lenerr);
 8017596:	4b76      	ldr	r3, [pc, #472]	@ (8017770 <tcp_input+0x28c>)
 8017598:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801759c:	3301      	adds	r3, #1
 801759e:	b29a      	uxth	r2, r3
 80175a0:	4b73      	ldr	r3, [pc, #460]	@ (8017770 <tcp_input+0x28c>)
 80175a2:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
    goto dropped;
 80175a6:	e3e1      	b.n	8017d6c <tcp_input+0x888>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80175a8:	7cbb      	ldrb	r3, [r7, #18]
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	3b14      	subs	r3, #20
 80175ae:	b29a      	uxth	r2, r3
 80175b0:	4b72      	ldr	r3, [pc, #456]	@ (801777c <tcp_input+0x298>)
 80175b2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80175b4:	4b72      	ldr	r3, [pc, #456]	@ (8017780 <tcp_input+0x29c>)
 80175b6:	2200      	movs	r2, #0
 80175b8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	895a      	ldrh	r2, [r3, #10]
 80175be:	7cbb      	ldrb	r3, [r7, #18]
 80175c0:	b29b      	uxth	r3, r3
 80175c2:	429a      	cmp	r2, r3
 80175c4:	d309      	bcc.n	80175da <tcp_input+0xf6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80175c6:	4b6d      	ldr	r3, [pc, #436]	@ (801777c <tcp_input+0x298>)
 80175c8:	881a      	ldrh	r2, [r3, #0]
 80175ca:	4b6e      	ldr	r3, [pc, #440]	@ (8017784 <tcp_input+0x2a0>)
 80175cc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80175ce:	7cbb      	ldrb	r3, [r7, #18]
 80175d0:	4619      	mov	r1, r3
 80175d2:	6878      	ldr	r0, [r7, #4]
 80175d4:	f7fd fbb8 	bl	8014d48 <pbuf_remove_header>
 80175d8:	e056      	b.n	8017688 <tcp_input+0x1a4>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	681b      	ldr	r3, [r3, #0]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d105      	bne.n	80175ee <tcp_input+0x10a>
 80175e2:	4b60      	ldr	r3, [pc, #384]	@ (8017764 <tcp_input+0x280>)
 80175e4:	22c2      	movs	r2, #194	@ 0xc2
 80175e6:	4968      	ldr	r1, [pc, #416]	@ (8017788 <tcp_input+0x2a4>)
 80175e8:	4860      	ldr	r0, [pc, #384]	@ (801776c <tcp_input+0x288>)
 80175ea:	f009 fc73 	bl	8020ed4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80175ee:	2114      	movs	r1, #20
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7fd fba9 	bl	8014d48 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	895a      	ldrh	r2, [r3, #10]
 80175fa:	4b62      	ldr	r3, [pc, #392]	@ (8017784 <tcp_input+0x2a0>)
 80175fc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80175fe:	4b5f      	ldr	r3, [pc, #380]	@ (801777c <tcp_input+0x298>)
 8017600:	881a      	ldrh	r2, [r3, #0]
 8017602:	4b60      	ldr	r3, [pc, #384]	@ (8017784 <tcp_input+0x2a0>)
 8017604:	881b      	ldrh	r3, [r3, #0]
 8017606:	1ad3      	subs	r3, r2, r3
 8017608:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801760a:	4b5e      	ldr	r3, [pc, #376]	@ (8017784 <tcp_input+0x2a0>)
 801760c:	881b      	ldrh	r3, [r3, #0]
 801760e:	4619      	mov	r1, r3
 8017610:	6878      	ldr	r0, [r7, #4]
 8017612:	f7fd fb99 	bl	8014d48 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	895b      	ldrh	r3, [r3, #10]
 801761c:	8a3a      	ldrh	r2, [r7, #16]
 801761e:	429a      	cmp	r2, r3
 8017620:	d908      	bls.n	8017634 <tcp_input+0x150>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
      TCP_STATS_INC(tcp.lenerr);
 8017622:	4b53      	ldr	r3, [pc, #332]	@ (8017770 <tcp_input+0x28c>)
 8017624:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 8017628:	3301      	adds	r3, #1
 801762a:	b29a      	uxth	r2, r3
 801762c:	4b50      	ldr	r3, [pc, #320]	@ (8017770 <tcp_input+0x28c>)
 801762e:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8017632:	e39b      	b.n	8017d6c <tcp_input+0x888>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	681b      	ldr	r3, [r3, #0]
 8017638:	685b      	ldr	r3, [r3, #4]
 801763a:	4a51      	ldr	r2, [pc, #324]	@ (8017780 <tcp_input+0x29c>)
 801763c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	8a3a      	ldrh	r2, [r7, #16]
 8017644:	4611      	mov	r1, r2
 8017646:	4618      	mov	r0, r3
 8017648:	f7fd fb7e 	bl	8014d48 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	891a      	ldrh	r2, [r3, #8]
 8017650:	8a3b      	ldrh	r3, [r7, #16]
 8017652:	1ad3      	subs	r3, r2, r3
 8017654:	b29a      	uxth	r2, r3
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	895b      	ldrh	r3, [r3, #10]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d005      	beq.n	801766e <tcp_input+0x18a>
 8017662:	4b40      	ldr	r3, [pc, #256]	@ (8017764 <tcp_input+0x280>)
 8017664:	22df      	movs	r2, #223	@ 0xdf
 8017666:	4949      	ldr	r1, [pc, #292]	@ (801778c <tcp_input+0x2a8>)
 8017668:	4840      	ldr	r0, [pc, #256]	@ (801776c <tcp_input+0x288>)
 801766a:	f009 fc33 	bl	8020ed4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	891a      	ldrh	r2, [r3, #8]
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	891b      	ldrh	r3, [r3, #8]
 8017678:	429a      	cmp	r2, r3
 801767a:	d005      	beq.n	8017688 <tcp_input+0x1a4>
 801767c:	4b39      	ldr	r3, [pc, #228]	@ (8017764 <tcp_input+0x280>)
 801767e:	22e0      	movs	r2, #224	@ 0xe0
 8017680:	4943      	ldr	r1, [pc, #268]	@ (8017790 <tcp_input+0x2ac>)
 8017682:	483a      	ldr	r0, [pc, #232]	@ (801776c <tcp_input+0x288>)
 8017684:	f009 fc26 	bl	8020ed4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8017688:	4b3a      	ldr	r3, [pc, #232]	@ (8017774 <tcp_input+0x290>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	881b      	ldrh	r3, [r3, #0]
 801768e:	b29b      	uxth	r3, r3
 8017690:	4a38      	ldr	r2, [pc, #224]	@ (8017774 <tcp_input+0x290>)
 8017692:	6814      	ldr	r4, [r2, #0]
 8017694:	4618      	mov	r0, r3
 8017696:	f7fb fdb7 	bl	8013208 <lwip_htons>
 801769a:	4603      	mov	r3, r0
 801769c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801769e:	4b35      	ldr	r3, [pc, #212]	@ (8017774 <tcp_input+0x290>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	885b      	ldrh	r3, [r3, #2]
 80176a4:	b29b      	uxth	r3, r3
 80176a6:	4a33      	ldr	r2, [pc, #204]	@ (8017774 <tcp_input+0x290>)
 80176a8:	6814      	ldr	r4, [r2, #0]
 80176aa:	4618      	mov	r0, r3
 80176ac:	f7fb fdac 	bl	8013208 <lwip_htons>
 80176b0:	4603      	mov	r3, r0
 80176b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80176b4:	4b2f      	ldr	r3, [pc, #188]	@ (8017774 <tcp_input+0x290>)
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	685b      	ldr	r3, [r3, #4]
 80176ba:	4a2e      	ldr	r2, [pc, #184]	@ (8017774 <tcp_input+0x290>)
 80176bc:	6814      	ldr	r4, [r2, #0]
 80176be:	4618      	mov	r0, r3
 80176c0:	f7fb fdb8 	bl	8013234 <lwip_htonl>
 80176c4:	4603      	mov	r3, r0
 80176c6:	6063      	str	r3, [r4, #4]
 80176c8:	6863      	ldr	r3, [r4, #4]
 80176ca:	4a32      	ldr	r2, [pc, #200]	@ (8017794 <tcp_input+0x2b0>)
 80176cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80176ce:	4b29      	ldr	r3, [pc, #164]	@ (8017774 <tcp_input+0x290>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	689b      	ldr	r3, [r3, #8]
 80176d4:	4a27      	ldr	r2, [pc, #156]	@ (8017774 <tcp_input+0x290>)
 80176d6:	6814      	ldr	r4, [r2, #0]
 80176d8:	4618      	mov	r0, r3
 80176da:	f7fb fdab 	bl	8013234 <lwip_htonl>
 80176de:	4603      	mov	r3, r0
 80176e0:	60a3      	str	r3, [r4, #8]
 80176e2:	68a3      	ldr	r3, [r4, #8]
 80176e4:	4a2c      	ldr	r2, [pc, #176]	@ (8017798 <tcp_input+0x2b4>)
 80176e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80176e8:	4b22      	ldr	r3, [pc, #136]	@ (8017774 <tcp_input+0x290>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	89db      	ldrh	r3, [r3, #14]
 80176ee:	b29b      	uxth	r3, r3
 80176f0:	4a20      	ldr	r2, [pc, #128]	@ (8017774 <tcp_input+0x290>)
 80176f2:	6814      	ldr	r4, [r2, #0]
 80176f4:	4618      	mov	r0, r3
 80176f6:	f7fb fd87 	bl	8013208 <lwip_htons>
 80176fa:	4603      	mov	r3, r0
 80176fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80176fe:	4b1d      	ldr	r3, [pc, #116]	@ (8017774 <tcp_input+0x290>)
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	899b      	ldrh	r3, [r3, #12]
 8017704:	b29b      	uxth	r3, r3
 8017706:	4618      	mov	r0, r3
 8017708:	f7fb fd7e 	bl	8013208 <lwip_htons>
 801770c:	4603      	mov	r3, r0
 801770e:	b2db      	uxtb	r3, r3
 8017710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8017714:	b2da      	uxtb	r2, r3
 8017716:	4b21      	ldr	r3, [pc, #132]	@ (801779c <tcp_input+0x2b8>)
 8017718:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	891a      	ldrh	r2, [r3, #8]
 801771e:	4b20      	ldr	r3, [pc, #128]	@ (80177a0 <tcp_input+0x2bc>)
 8017720:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8017722:	4b1e      	ldr	r3, [pc, #120]	@ (801779c <tcp_input+0x2b8>)
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	f003 0303 	and.w	r3, r3, #3
 801772a:	2b00      	cmp	r3, #0
 801772c:	d014      	beq.n	8017758 <tcp_input+0x274>
    tcplen++;
 801772e:	4b1c      	ldr	r3, [pc, #112]	@ (80177a0 <tcp_input+0x2bc>)
 8017730:	881b      	ldrh	r3, [r3, #0]
 8017732:	3301      	adds	r3, #1
 8017734:	b29a      	uxth	r2, r3
 8017736:	4b1a      	ldr	r3, [pc, #104]	@ (80177a0 <tcp_input+0x2bc>)
 8017738:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	891a      	ldrh	r2, [r3, #8]
 801773e:	4b18      	ldr	r3, [pc, #96]	@ (80177a0 <tcp_input+0x2bc>)
 8017740:	881b      	ldrh	r3, [r3, #0]
 8017742:	429a      	cmp	r2, r3
 8017744:	d908      	bls.n	8017758 <tcp_input+0x274>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
      TCP_STATS_INC(tcp.lenerr);
 8017746:	4b0a      	ldr	r3, [pc, #40]	@ (8017770 <tcp_input+0x28c>)
 8017748:	f8b3 309a 	ldrh.w	r3, [r3, #154]	@ 0x9a
 801774c:	3301      	adds	r3, #1
 801774e:	b29a      	uxth	r2, r3
 8017750:	4b07      	ldr	r3, [pc, #28]	@ (8017770 <tcp_input+0x28c>)
 8017752:	f8a3 209a 	strh.w	r2, [r3, #154]	@ 0x9a
      goto dropped;
 8017756:	e309      	b.n	8017d6c <tcp_input+0x888>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8017758:	2300      	movs	r3, #0
 801775a:	61fb      	str	r3, [r7, #28]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801775c:	4b11      	ldr	r3, [pc, #68]	@ (80177a4 <tcp_input+0x2c0>)
 801775e:	681b      	ldr	r3, [r3, #0]
 8017760:	61bb      	str	r3, [r7, #24]
 8017762:	e0a1      	b.n	80178a8 <tcp_input+0x3c4>
 8017764:	08024840 	.word	0x08024840
 8017768:	08024874 	.word	0x08024874
 801776c:	0802488c 	.word	0x0802488c
 8017770:	2002d36c 	.word	0x2002d36c
 8017774:	2002d498 	.word	0x2002d498
 8017778:	200270fc 	.word	0x200270fc
 801777c:	2002d49c 	.word	0x2002d49c
 8017780:	2002d4a0 	.word	0x2002d4a0
 8017784:	2002d49e 	.word	0x2002d49e
 8017788:	080248b4 	.word	0x080248b4
 801778c:	080248c4 	.word	0x080248c4
 8017790:	080248d0 	.word	0x080248d0
 8017794:	2002d4a8 	.word	0x2002d4a8
 8017798:	2002d4ac 	.word	0x2002d4ac
 801779c:	2002d4b4 	.word	0x2002d4b4
 80177a0:	2002d4b2 	.word	0x2002d4b2
 80177a4:	2002d478 	.word	0x2002d478
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80177a8:	69bb      	ldr	r3, [r7, #24]
 80177aa:	7d1b      	ldrb	r3, [r3, #20]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d105      	bne.n	80177bc <tcp_input+0x2d8>
 80177b0:	4b8a      	ldr	r3, [pc, #552]	@ (80179dc <tcp_input+0x4f8>)
 80177b2:	22fb      	movs	r2, #251	@ 0xfb
 80177b4:	498a      	ldr	r1, [pc, #552]	@ (80179e0 <tcp_input+0x4fc>)
 80177b6:	488b      	ldr	r0, [pc, #556]	@ (80179e4 <tcp_input+0x500>)
 80177b8:	f009 fb8c 	bl	8020ed4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80177bc:	69bb      	ldr	r3, [r7, #24]
 80177be:	7d1b      	ldrb	r3, [r3, #20]
 80177c0:	2b0a      	cmp	r3, #10
 80177c2:	d105      	bne.n	80177d0 <tcp_input+0x2ec>
 80177c4:	4b85      	ldr	r3, [pc, #532]	@ (80179dc <tcp_input+0x4f8>)
 80177c6:	22fc      	movs	r2, #252	@ 0xfc
 80177c8:	4987      	ldr	r1, [pc, #540]	@ (80179e8 <tcp_input+0x504>)
 80177ca:	4886      	ldr	r0, [pc, #536]	@ (80179e4 <tcp_input+0x500>)
 80177cc:	f009 fb82 	bl	8020ed4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80177d0:	69bb      	ldr	r3, [r7, #24]
 80177d2:	7d1b      	ldrb	r3, [r3, #20]
 80177d4:	2b01      	cmp	r3, #1
 80177d6:	d105      	bne.n	80177e4 <tcp_input+0x300>
 80177d8:	4b80      	ldr	r3, [pc, #512]	@ (80179dc <tcp_input+0x4f8>)
 80177da:	22fd      	movs	r2, #253	@ 0xfd
 80177dc:	4983      	ldr	r1, [pc, #524]	@ (80179ec <tcp_input+0x508>)
 80177de:	4881      	ldr	r0, [pc, #516]	@ (80179e4 <tcp_input+0x500>)
 80177e0:	f009 fb78 	bl	8020ed4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80177e4:	69bb      	ldr	r3, [r7, #24]
 80177e6:	7a1b      	ldrb	r3, [r3, #8]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d00c      	beq.n	8017806 <tcp_input+0x322>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80177ec:	69bb      	ldr	r3, [r7, #24]
 80177ee:	7a1a      	ldrb	r2, [r3, #8]
 80177f0:	4b7f      	ldr	r3, [pc, #508]	@ (80179f0 <tcp_input+0x50c>)
 80177f2:	685b      	ldr	r3, [r3, #4]
 80177f4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80177f8:	3301      	adds	r3, #1
 80177fa:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80177fc:	429a      	cmp	r2, r3
 80177fe:	d002      	beq.n	8017806 <tcp_input+0x322>
      prev = pcb;
 8017800:	69bb      	ldr	r3, [r7, #24]
 8017802:	61fb      	str	r3, [r7, #28]
      continue;
 8017804:	e04d      	b.n	80178a2 <tcp_input+0x3be>
    }

    if (pcb->remote_port == tcphdr->src &&
 8017806:	69bb      	ldr	r3, [r7, #24]
 8017808:	8b1a      	ldrh	r2, [r3, #24]
 801780a:	4b7a      	ldr	r3, [pc, #488]	@ (80179f4 <tcp_input+0x510>)
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	881b      	ldrh	r3, [r3, #0]
 8017810:	b29b      	uxth	r3, r3
 8017812:	429a      	cmp	r2, r3
 8017814:	d143      	bne.n	801789e <tcp_input+0x3ba>
        pcb->local_port == tcphdr->dest &&
 8017816:	69bb      	ldr	r3, [r7, #24]
 8017818:	8ada      	ldrh	r2, [r3, #22]
 801781a:	4b76      	ldr	r3, [pc, #472]	@ (80179f4 <tcp_input+0x510>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	885b      	ldrh	r3, [r3, #2]
 8017820:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8017822:	429a      	cmp	r2, r3
 8017824:	d13b      	bne.n	801789e <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017826:	69bb      	ldr	r3, [r7, #24]
 8017828:	685a      	ldr	r2, [r3, #4]
 801782a:	4b71      	ldr	r3, [pc, #452]	@ (80179f0 <tcp_input+0x50c>)
 801782c:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801782e:	429a      	cmp	r2, r3
 8017830:	d135      	bne.n	801789e <tcp_input+0x3ba>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017832:	69bb      	ldr	r3, [r7, #24]
 8017834:	681a      	ldr	r2, [r3, #0]
 8017836:	4b6e      	ldr	r3, [pc, #440]	@ (80179f0 <tcp_input+0x50c>)
 8017838:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801783a:	429a      	cmp	r2, r3
 801783c:	d12f      	bne.n	801789e <tcp_input+0x3ba>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801783e:	69bb      	ldr	r3, [r7, #24]
 8017840:	68db      	ldr	r3, [r3, #12]
 8017842:	69ba      	ldr	r2, [r7, #24]
 8017844:	429a      	cmp	r2, r3
 8017846:	d106      	bne.n	8017856 <tcp_input+0x372>
 8017848:	4b64      	ldr	r3, [pc, #400]	@ (80179dc <tcp_input+0x4f8>)
 801784a:	f240 120d 	movw	r2, #269	@ 0x10d
 801784e:	496a      	ldr	r1, [pc, #424]	@ (80179f8 <tcp_input+0x514>)
 8017850:	4864      	ldr	r0, [pc, #400]	@ (80179e4 <tcp_input+0x500>)
 8017852:	f009 fb3f 	bl	8020ed4 <iprintf>
      if (prev != NULL) {
 8017856:	69fb      	ldr	r3, [r7, #28]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d00b      	beq.n	8017874 <tcp_input+0x390>
        prev->next = pcb->next;
 801785c:	69bb      	ldr	r3, [r7, #24]
 801785e:	68da      	ldr	r2, [r3, #12]
 8017860:	69fb      	ldr	r3, [r7, #28]
 8017862:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8017864:	4b65      	ldr	r3, [pc, #404]	@ (80179fc <tcp_input+0x518>)
 8017866:	681a      	ldr	r2, [r3, #0]
 8017868:	69bb      	ldr	r3, [r7, #24]
 801786a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801786c:	4a63      	ldr	r2, [pc, #396]	@ (80179fc <tcp_input+0x518>)
 801786e:	69bb      	ldr	r3, [r7, #24]
 8017870:	6013      	str	r3, [r2, #0]
 8017872:	e007      	b.n	8017884 <tcp_input+0x3a0>
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017874:	4b62      	ldr	r3, [pc, #392]	@ (8017a00 <tcp_input+0x51c>)
 8017876:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 801787a:	3301      	adds	r3, #1
 801787c:	b29a      	uxth	r2, r3
 801787e:	4b60      	ldr	r3, [pc, #384]	@ (8017a00 <tcp_input+0x51c>)
 8017880:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8017884:	69bb      	ldr	r3, [r7, #24]
 8017886:	68db      	ldr	r3, [r3, #12]
 8017888:	69ba      	ldr	r2, [r7, #24]
 801788a:	429a      	cmp	r2, r3
 801788c:	d111      	bne.n	80178b2 <tcp_input+0x3ce>
 801788e:	4b53      	ldr	r3, [pc, #332]	@ (80179dc <tcp_input+0x4f8>)
 8017890:	f240 1215 	movw	r2, #277	@ 0x115
 8017894:	495b      	ldr	r1, [pc, #364]	@ (8017a04 <tcp_input+0x520>)
 8017896:	4853      	ldr	r0, [pc, #332]	@ (80179e4 <tcp_input+0x500>)
 8017898:	f009 fb1c 	bl	8020ed4 <iprintf>
      break;
 801789c:	e009      	b.n	80178b2 <tcp_input+0x3ce>
    }
    prev = pcb;
 801789e:	69bb      	ldr	r3, [r7, #24]
 80178a0:	61fb      	str	r3, [r7, #28]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80178a2:	69bb      	ldr	r3, [r7, #24]
 80178a4:	68db      	ldr	r3, [r3, #12]
 80178a6:	61bb      	str	r3, [r7, #24]
 80178a8:	69bb      	ldr	r3, [r7, #24]
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	f47f af7c 	bne.w	80177a8 <tcp_input+0x2c4>
 80178b0:	e000      	b.n	80178b4 <tcp_input+0x3d0>
      break;
 80178b2:	bf00      	nop
  }

  if (pcb == NULL) {
 80178b4:	69bb      	ldr	r3, [r7, #24]
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	f040 80bb 	bne.w	8017a32 <tcp_input+0x54e>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80178bc:	4b52      	ldr	r3, [pc, #328]	@ (8017a08 <tcp_input+0x524>)
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	61bb      	str	r3, [r7, #24]
 80178c2:	e03f      	b.n	8017944 <tcp_input+0x460>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80178c4:	69bb      	ldr	r3, [r7, #24]
 80178c6:	7d1b      	ldrb	r3, [r3, #20]
 80178c8:	2b0a      	cmp	r3, #10
 80178ca:	d006      	beq.n	80178da <tcp_input+0x3f6>
 80178cc:	4b43      	ldr	r3, [pc, #268]	@ (80179dc <tcp_input+0x4f8>)
 80178ce:	f240 121f 	movw	r2, #287	@ 0x11f
 80178d2:	494e      	ldr	r1, [pc, #312]	@ (8017a0c <tcp_input+0x528>)
 80178d4:	4843      	ldr	r0, [pc, #268]	@ (80179e4 <tcp_input+0x500>)
 80178d6:	f009 fafd 	bl	8020ed4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80178da:	69bb      	ldr	r3, [r7, #24]
 80178dc:	7a1b      	ldrb	r3, [r3, #8]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d009      	beq.n	80178f6 <tcp_input+0x412>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	7a1a      	ldrb	r2, [r3, #8]
 80178e6:	4b42      	ldr	r3, [pc, #264]	@ (80179f0 <tcp_input+0x50c>)
 80178e8:	685b      	ldr	r3, [r3, #4]
 80178ea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80178ee:	3301      	adds	r3, #1
 80178f0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80178f2:	429a      	cmp	r2, r3
 80178f4:	d122      	bne.n	801793c <tcp_input+0x458>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80178f6:	69bb      	ldr	r3, [r7, #24]
 80178f8:	8b1a      	ldrh	r2, [r3, #24]
 80178fa:	4b3e      	ldr	r3, [pc, #248]	@ (80179f4 <tcp_input+0x510>)
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	881b      	ldrh	r3, [r3, #0]
 8017900:	b29b      	uxth	r3, r3
 8017902:	429a      	cmp	r2, r3
 8017904:	d11b      	bne.n	801793e <tcp_input+0x45a>
          pcb->local_port == tcphdr->dest &&
 8017906:	69bb      	ldr	r3, [r7, #24]
 8017908:	8ada      	ldrh	r2, [r3, #22]
 801790a:	4b3a      	ldr	r3, [pc, #232]	@ (80179f4 <tcp_input+0x510>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	885b      	ldrh	r3, [r3, #2]
 8017910:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8017912:	429a      	cmp	r2, r3
 8017914:	d113      	bne.n	801793e <tcp_input+0x45a>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8017916:	69bb      	ldr	r3, [r7, #24]
 8017918:	685a      	ldr	r2, [r3, #4]
 801791a:	4b35      	ldr	r3, [pc, #212]	@ (80179f0 <tcp_input+0x50c>)
 801791c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801791e:	429a      	cmp	r2, r3
 8017920:	d10d      	bne.n	801793e <tcp_input+0x45a>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017922:	69bb      	ldr	r3, [r7, #24]
 8017924:	681a      	ldr	r2, [r3, #0]
 8017926:	4b32      	ldr	r3, [pc, #200]	@ (80179f0 <tcp_input+0x50c>)
 8017928:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801792a:	429a      	cmp	r2, r3
 801792c:	d107      	bne.n	801793e <tcp_input+0x45a>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801792e:	69b8      	ldr	r0, [r7, #24]
 8017930:	f000 fb88 	bl	8018044 <tcp_timewait_input>
        }
        pbuf_free(p);
 8017934:	6878      	ldr	r0, [r7, #4]
 8017936:	f7fd fa95 	bl	8014e64 <pbuf_free>
        return;
 801793a:	e224      	b.n	8017d86 <tcp_input+0x8a2>
        continue;
 801793c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801793e:	69bb      	ldr	r3, [r7, #24]
 8017940:	68db      	ldr	r3, [r3, #12]
 8017942:	61bb      	str	r3, [r7, #24]
 8017944:	69bb      	ldr	r3, [r7, #24]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d1bc      	bne.n	80178c4 <tcp_input+0x3e0>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801794a:	2300      	movs	r3, #0
 801794c:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801794e:	4b30      	ldr	r3, [pc, #192]	@ (8017a10 <tcp_input+0x52c>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	617b      	str	r3, [r7, #20]
 8017954:	e02a      	b.n	80179ac <tcp_input+0x4c8>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8017956:	697b      	ldr	r3, [r7, #20]
 8017958:	7a1b      	ldrb	r3, [r3, #8]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d00c      	beq.n	8017978 <tcp_input+0x494>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801795e:	697b      	ldr	r3, [r7, #20]
 8017960:	7a1a      	ldrb	r2, [r3, #8]
 8017962:	4b23      	ldr	r3, [pc, #140]	@ (80179f0 <tcp_input+0x50c>)
 8017964:	685b      	ldr	r3, [r3, #4]
 8017966:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801796a:	3301      	adds	r3, #1
 801796c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801796e:	429a      	cmp	r2, r3
 8017970:	d002      	beq.n	8017978 <tcp_input+0x494>
        prev = (struct tcp_pcb *)lpcb;
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	61fb      	str	r3, [r7, #28]
        continue;
 8017976:	e016      	b.n	80179a6 <tcp_input+0x4c2>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	8ada      	ldrh	r2, [r3, #22]
 801797c:	4b1d      	ldr	r3, [pc, #116]	@ (80179f4 <tcp_input+0x510>)
 801797e:	681b      	ldr	r3, [r3, #0]
 8017980:	885b      	ldrh	r3, [r3, #2]
 8017982:	b29b      	uxth	r3, r3
 8017984:	429a      	cmp	r2, r3
 8017986:	d10c      	bne.n	80179a2 <tcp_input+0x4be>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8017988:	697b      	ldr	r3, [r7, #20]
 801798a:	681a      	ldr	r2, [r3, #0]
 801798c:	4b18      	ldr	r3, [pc, #96]	@ (80179f0 <tcp_input+0x50c>)
 801798e:	695b      	ldr	r3, [r3, #20]
 8017990:	429a      	cmp	r2, r3
 8017992:	d00f      	beq.n	80179b4 <tcp_input+0x4d0>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8017994:	697b      	ldr	r3, [r7, #20]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d00d      	beq.n	80179b6 <tcp_input+0x4d2>
 801799a:	697b      	ldr	r3, [r7, #20]
 801799c:	681b      	ldr	r3, [r3, #0]
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d009      	beq.n	80179b6 <tcp_input+0x4d2>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80179a2:	697b      	ldr	r3, [r7, #20]
 80179a4:	61fb      	str	r3, [r7, #28]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80179a6:	697b      	ldr	r3, [r7, #20]
 80179a8:	68db      	ldr	r3, [r3, #12]
 80179aa:	617b      	str	r3, [r7, #20]
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d1d1      	bne.n	8017956 <tcp_input+0x472>
 80179b2:	e000      	b.n	80179b6 <tcp_input+0x4d2>
            break;
 80179b4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80179b6:	697b      	ldr	r3, [r7, #20]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d03a      	beq.n	8017a32 <tcp_input+0x54e>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80179bc:	69fb      	ldr	r3, [r7, #28]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d028      	beq.n	8017a14 <tcp_input+0x530>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80179c2:	697b      	ldr	r3, [r7, #20]
 80179c4:	68da      	ldr	r2, [r3, #12]
 80179c6:	69fb      	ldr	r3, [r7, #28]
 80179c8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80179ca:	4b11      	ldr	r3, [pc, #68]	@ (8017a10 <tcp_input+0x52c>)
 80179cc:	681a      	ldr	r2, [r3, #0]
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80179d2:	4a0f      	ldr	r2, [pc, #60]	@ (8017a10 <tcp_input+0x52c>)
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	6013      	str	r3, [r2, #0]
 80179d8:	e024      	b.n	8017a24 <tcp_input+0x540>
 80179da:	bf00      	nop
 80179dc:	08024840 	.word	0x08024840
 80179e0:	080248f0 	.word	0x080248f0
 80179e4:	0802488c 	.word	0x0802488c
 80179e8:	08024918 	.word	0x08024918
 80179ec:	08024944 	.word	0x08024944
 80179f0:	200270fc 	.word	0x200270fc
 80179f4:	2002d498 	.word	0x2002d498
 80179f8:	0802496c 	.word	0x0802496c
 80179fc:	2002d478 	.word	0x2002d478
 8017a00:	2002d36c 	.word	0x2002d36c
 8017a04:	08024998 	.word	0x08024998
 8017a08:	2002d47c 	.word	0x2002d47c
 8017a0c:	080249c4 	.word	0x080249c4
 8017a10:	2002d474 	.word	0x2002d474
      } else {
        TCP_STATS_INC(tcp.cachehit);
 8017a14:	4ba0      	ldr	r3, [pc, #640]	@ (8017c98 <tcp_input+0x7b4>)
 8017a16:	f8b3 30a6 	ldrh.w	r3, [r3, #166]	@ 0xa6
 8017a1a:	3301      	adds	r3, #1
 8017a1c:	b29a      	uxth	r2, r3
 8017a1e:	4b9e      	ldr	r3, [pc, #632]	@ (8017c98 <tcp_input+0x7b4>)
 8017a20:	f8a3 20a6 	strh.w	r2, [r3, #166]	@ 0xa6
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8017a24:	6978      	ldr	r0, [r7, #20]
 8017a26:	f000 fa05 	bl	8017e34 <tcp_listen_input>
      }
      pbuf_free(p);
 8017a2a:	6878      	ldr	r0, [r7, #4]
 8017a2c:	f7fd fa1a 	bl	8014e64 <pbuf_free>
      return;
 8017a30:	e1a9      	b.n	8017d86 <tcp_input+0x8a2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8017a32:	69bb      	ldr	r3, [r7, #24]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	f000 815f 	beq.w	8017cf8 <tcp_input+0x814>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8017a3a:	4b98      	ldr	r3, [pc, #608]	@ (8017c9c <tcp_input+0x7b8>)
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	891a      	ldrh	r2, [r3, #8]
 8017a44:	4b95      	ldr	r3, [pc, #596]	@ (8017c9c <tcp_input+0x7b8>)
 8017a46:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8017a48:	4a94      	ldr	r2, [pc, #592]	@ (8017c9c <tcp_input+0x7b8>)
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8017a4e:	4b94      	ldr	r3, [pc, #592]	@ (8017ca0 <tcp_input+0x7bc>)
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	4a92      	ldr	r2, [pc, #584]	@ (8017c9c <tcp_input+0x7b8>)
 8017a54:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 8017a56:	4b93      	ldr	r3, [pc, #588]	@ (8017ca4 <tcp_input+0x7c0>)
 8017a58:	2200      	movs	r2, #0
 8017a5a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8017a5c:	4b92      	ldr	r3, [pc, #584]	@ (8017ca8 <tcp_input+0x7c4>)
 8017a5e:	2200      	movs	r2, #0
 8017a60:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8017a62:	4b92      	ldr	r3, [pc, #584]	@ (8017cac <tcp_input+0x7c8>)
 8017a64:	2200      	movs	r2, #0
 8017a66:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8017a68:	4b91      	ldr	r3, [pc, #580]	@ (8017cb0 <tcp_input+0x7cc>)
 8017a6a:	781b      	ldrb	r3, [r3, #0]
 8017a6c:	f003 0308 	and.w	r3, r3, #8
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d006      	beq.n	8017a82 <tcp_input+0x59e>
      p->flags |= PBUF_FLAG_PUSH;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	7b5b      	ldrb	r3, [r3, #13]
 8017a78:	f043 0301 	orr.w	r3, r3, #1
 8017a7c:	b2da      	uxtb	r2, r3
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8017a82:	69bb      	ldr	r3, [r7, #24]
 8017a84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d01e      	beq.n	8017ac8 <tcp_input+0x5e4>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017a8a:	69b8      	ldr	r0, [r7, #24]
 8017a8c:	f7fe ffe6 	bl	8016a5c <tcp_process_refused_data>
 8017a90:	4603      	mov	r3, r0
 8017a92:	f113 0f0d 	cmn.w	r3, #13
 8017a96:	d007      	beq.n	8017aa8 <tcp_input+0x5c4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017a98:	69bb      	ldr	r3, [r7, #24]
 8017a9a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d013      	beq.n	8017ac8 <tcp_input+0x5e4>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8017aa0:	4b84      	ldr	r3, [pc, #528]	@ (8017cb4 <tcp_input+0x7d0>)
 8017aa2:	881b      	ldrh	r3, [r3, #0]
 8017aa4:	2b00      	cmp	r3, #0
 8017aa6:	d00f      	beq.n	8017ac8 <tcp_input+0x5e4>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8017aa8:	69bb      	ldr	r3, [r7, #24]
 8017aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d102      	bne.n	8017ab6 <tcp_input+0x5d2>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8017ab0:	69b8      	ldr	r0, [r7, #24]
 8017ab2:	f003 fedd 	bl	801b870 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
 8017ab6:	4b78      	ldr	r3, [pc, #480]	@ (8017c98 <tcp_input+0x7b4>)
 8017ab8:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017abc:	3301      	adds	r3, #1
 8017abe:	b29a      	uxth	r2, r3
 8017ac0:	4b75      	ldr	r3, [pc, #468]	@ (8017c98 <tcp_input+0x7b4>)
 8017ac2:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8017ac6:	e104      	b.n	8017cd2 <tcp_input+0x7ee>
      }
    }
    tcp_input_pcb = pcb;
 8017ac8:	4a7b      	ldr	r2, [pc, #492]	@ (8017cb8 <tcp_input+0x7d4>)
 8017aca:	69bb      	ldr	r3, [r7, #24]
 8017acc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8017ace:	69b8      	ldr	r0, [r7, #24]
 8017ad0:	f000 fb32 	bl	8018138 <tcp_process>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8017ad8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017adc:	f113 0f0d 	cmn.w	r3, #13
 8017ae0:	f000 80d1 	beq.w	8017c86 <tcp_input+0x7a2>
      if (recv_flags & TF_RESET) {
 8017ae4:	4b70      	ldr	r3, [pc, #448]	@ (8017ca8 <tcp_input+0x7c4>)
 8017ae6:	781b      	ldrb	r3, [r3, #0]
 8017ae8:	f003 0308 	and.w	r3, r3, #8
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	d015      	beq.n	8017b1c <tcp_input+0x638>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8017af0:	69bb      	ldr	r3, [r7, #24]
 8017af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d008      	beq.n	8017b0c <tcp_input+0x628>
 8017afa:	69bb      	ldr	r3, [r7, #24]
 8017afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017b00:	69ba      	ldr	r2, [r7, #24]
 8017b02:	6912      	ldr	r2, [r2, #16]
 8017b04:	f06f 010d 	mvn.w	r1, #13
 8017b08:	4610      	mov	r0, r2
 8017b0a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017b0c:	69b9      	ldr	r1, [r7, #24]
 8017b0e:	486b      	ldr	r0, [pc, #428]	@ (8017cbc <tcp_input+0x7d8>)
 8017b10:	f7ff fb6a 	bl	80171e8 <tcp_pcb_remove>
        tcp_free(pcb);
 8017b14:	69b8      	ldr	r0, [r7, #24]
 8017b16:	f7fd fe0b 	bl	8015730 <tcp_free>
 8017b1a:	e0da      	b.n	8017cd2 <tcp_input+0x7ee>
      } else {
        err = ERR_OK;
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8017b20:	4b62      	ldr	r3, [pc, #392]	@ (8017cac <tcp_input+0x7c8>)
 8017b22:	881b      	ldrh	r3, [r3, #0]
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d01d      	beq.n	8017b64 <tcp_input+0x680>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8017b28:	4b60      	ldr	r3, [pc, #384]	@ (8017cac <tcp_input+0x7c8>)
 8017b2a:	881b      	ldrh	r3, [r3, #0]
 8017b2c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8017b2e:	69bb      	ldr	r3, [r7, #24]
 8017b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	d00a      	beq.n	8017b4e <tcp_input+0x66a>
 8017b38:	69bb      	ldr	r3, [r7, #24]
 8017b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8017b3e:	69ba      	ldr	r2, [r7, #24]
 8017b40:	6910      	ldr	r0, [r2, #16]
 8017b42:	89fa      	ldrh	r2, [r7, #14]
 8017b44:	69b9      	ldr	r1, [r7, #24]
 8017b46:	4798      	blx	r3
 8017b48:	4603      	mov	r3, r0
 8017b4a:	74fb      	strb	r3, [r7, #19]
 8017b4c:	e001      	b.n	8017b52 <tcp_input+0x66e>
 8017b4e:	2300      	movs	r3, #0
 8017b50:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017b52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017b56:	f113 0f0d 	cmn.w	r3, #13
 8017b5a:	f000 8096 	beq.w	8017c8a <tcp_input+0x7a6>
              goto aborted;
            }
          }
          recv_acked = 0;
 8017b5e:	4b53      	ldr	r3, [pc, #332]	@ (8017cac <tcp_input+0x7c8>)
 8017b60:	2200      	movs	r2, #0
 8017b62:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8017b64:	69b8      	ldr	r0, [r7, #24]
 8017b66:	f000 f925 	bl	8017db4 <tcp_input_delayed_close>
 8017b6a:	4603      	mov	r3, r0
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	f040 808e 	bne.w	8017c8e <tcp_input+0x7aa>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8017b72:	4b4c      	ldr	r3, [pc, #304]	@ (8017ca4 <tcp_input+0x7c0>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d041      	beq.n	8017bfe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8017b7a:	69bb      	ldr	r3, [r7, #24]
 8017b7c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d006      	beq.n	8017b90 <tcp_input+0x6ac>
 8017b82:	4b4f      	ldr	r3, [pc, #316]	@ (8017cc0 <tcp_input+0x7dc>)
 8017b84:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8017b88:	494e      	ldr	r1, [pc, #312]	@ (8017cc4 <tcp_input+0x7e0>)
 8017b8a:	484f      	ldr	r0, [pc, #316]	@ (8017cc8 <tcp_input+0x7e4>)
 8017b8c:	f009 f9a2 	bl	8020ed4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8017b90:	69bb      	ldr	r3, [r7, #24]
 8017b92:	8b5b      	ldrh	r3, [r3, #26]
 8017b94:	f003 0310 	and.w	r3, r3, #16
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d008      	beq.n	8017bae <tcp_input+0x6ca>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8017b9c:	4b41      	ldr	r3, [pc, #260]	@ (8017ca4 <tcp_input+0x7c0>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f7fd f95f 	bl	8014e64 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8017ba6:	69b8      	ldr	r0, [r7, #24]
 8017ba8:	f7fe f906 	bl	8015db8 <tcp_abort>
            goto aborted;
 8017bac:	e091      	b.n	8017cd2 <tcp_input+0x7ee>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8017bae:	69bb      	ldr	r3, [r7, #24]
 8017bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d00c      	beq.n	8017bd2 <tcp_input+0x6ee>
 8017bb8:	69bb      	ldr	r3, [r7, #24]
 8017bba:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017bbe:	69bb      	ldr	r3, [r7, #24]
 8017bc0:	6918      	ldr	r0, [r3, #16]
 8017bc2:	4b38      	ldr	r3, [pc, #224]	@ (8017ca4 <tcp_input+0x7c0>)
 8017bc4:	681a      	ldr	r2, [r3, #0]
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	69b9      	ldr	r1, [r7, #24]
 8017bca:	47a0      	blx	r4
 8017bcc:	4603      	mov	r3, r0
 8017bce:	74fb      	strb	r3, [r7, #19]
 8017bd0:	e008      	b.n	8017be4 <tcp_input+0x700>
 8017bd2:	4b34      	ldr	r3, [pc, #208]	@ (8017ca4 <tcp_input+0x7c0>)
 8017bd4:	681a      	ldr	r2, [r3, #0]
 8017bd6:	2300      	movs	r3, #0
 8017bd8:	69b9      	ldr	r1, [r7, #24]
 8017bda:	2000      	movs	r0, #0
 8017bdc:	f7ff f814 	bl	8016c08 <tcp_recv_null>
 8017be0:	4603      	mov	r3, r0
 8017be2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8017be4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017be8:	f113 0f0d 	cmn.w	r3, #13
 8017bec:	d051      	beq.n	8017c92 <tcp_input+0x7ae>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8017bee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d003      	beq.n	8017bfe <tcp_input+0x71a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8017bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8017ca4 <tcp_input+0x7c0>)
 8017bf8:	681a      	ldr	r2, [r3, #0]
 8017bfa:	69bb      	ldr	r3, [r7, #24]
 8017bfc:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8017bfe:	4b2a      	ldr	r3, [pc, #168]	@ (8017ca8 <tcp_input+0x7c4>)
 8017c00:	781b      	ldrb	r3, [r3, #0]
 8017c02:	f003 0320 	and.w	r3, r3, #32
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d030      	beq.n	8017c6c <tcp_input+0x788>
          if (pcb->refused_data != NULL) {
 8017c0a:	69bb      	ldr	r3, [r7, #24]
 8017c0c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d009      	beq.n	8017c26 <tcp_input+0x742>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8017c12:	69bb      	ldr	r3, [r7, #24]
 8017c14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017c16:	7b5a      	ldrb	r2, [r3, #13]
 8017c18:	69bb      	ldr	r3, [r7, #24]
 8017c1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8017c1c:	f042 0220 	orr.w	r2, r2, #32
 8017c20:	b2d2      	uxtb	r2, r2
 8017c22:	735a      	strb	r2, [r3, #13]
 8017c24:	e022      	b.n	8017c6c <tcp_input+0x788>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8017c26:	69bb      	ldr	r3, [r7, #24]
 8017c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017c2a:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8017c2e:	d005      	beq.n	8017c3c <tcp_input+0x758>
              pcb->rcv_wnd++;
 8017c30:	69bb      	ldr	r3, [r7, #24]
 8017c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8017c34:	3301      	adds	r3, #1
 8017c36:	b29a      	uxth	r2, r3
 8017c38:	69bb      	ldr	r3, [r7, #24]
 8017c3a:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8017c3c:	69bb      	ldr	r3, [r7, #24]
 8017c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d00b      	beq.n	8017c5e <tcp_input+0x77a>
 8017c46:	69bb      	ldr	r3, [r7, #24]
 8017c48:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8017c4c:	69bb      	ldr	r3, [r7, #24]
 8017c4e:	6918      	ldr	r0, [r3, #16]
 8017c50:	2300      	movs	r3, #0
 8017c52:	2200      	movs	r2, #0
 8017c54:	69b9      	ldr	r1, [r7, #24]
 8017c56:	47a0      	blx	r4
 8017c58:	4603      	mov	r3, r0
 8017c5a:	74fb      	strb	r3, [r7, #19]
 8017c5c:	e001      	b.n	8017c62 <tcp_input+0x77e>
 8017c5e:	2300      	movs	r3, #0
 8017c60:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8017c62:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8017c66:	f113 0f0d 	cmn.w	r3, #13
 8017c6a:	d02f      	beq.n	8017ccc <tcp_input+0x7e8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8017c6c:	4b12      	ldr	r3, [pc, #72]	@ (8017cb8 <tcp_input+0x7d4>)
 8017c6e:	2200      	movs	r2, #0
 8017c70:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8017c72:	69b8      	ldr	r0, [r7, #24]
 8017c74:	f000 f89e 	bl	8017db4 <tcp_input_delayed_close>
 8017c78:	4603      	mov	r3, r0
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d128      	bne.n	8017cd0 <tcp_input+0x7ec>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8017c7e:	69b8      	ldr	r0, [r7, #24]
 8017c80:	f002 ffd0 	bl	801ac24 <tcp_output>
 8017c84:	e025      	b.n	8017cd2 <tcp_input+0x7ee>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8017c86:	bf00      	nop
 8017c88:	e023      	b.n	8017cd2 <tcp_input+0x7ee>
              goto aborted;
 8017c8a:	bf00      	nop
 8017c8c:	e021      	b.n	8017cd2 <tcp_input+0x7ee>
          goto aborted;
 8017c8e:	bf00      	nop
 8017c90:	e01f      	b.n	8017cd2 <tcp_input+0x7ee>
            goto aborted;
 8017c92:	bf00      	nop
 8017c94:	e01d      	b.n	8017cd2 <tcp_input+0x7ee>
 8017c96:	bf00      	nop
 8017c98:	2002d36c 	.word	0x2002d36c
 8017c9c:	2002d484 	.word	0x2002d484
 8017ca0:	2002d498 	.word	0x2002d498
 8017ca4:	2002d4b8 	.word	0x2002d4b8
 8017ca8:	2002d4b5 	.word	0x2002d4b5
 8017cac:	2002d4b0 	.word	0x2002d4b0
 8017cb0:	2002d4b4 	.word	0x2002d4b4
 8017cb4:	2002d4b2 	.word	0x2002d4b2
 8017cb8:	2002d4bc 	.word	0x2002d4bc
 8017cbc:	2002d478 	.word	0x2002d478
 8017cc0:	08024840 	.word	0x08024840
 8017cc4:	080249f4 	.word	0x080249f4
 8017cc8:	0802488c 	.word	0x0802488c
              goto aborted;
 8017ccc:	bf00      	nop
 8017cce:	e000      	b.n	8017cd2 <tcp_input+0x7ee>
          goto aborted;
 8017cd0:	bf00      	nop
    tcp_input_pcb = NULL;
 8017cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8017d8c <tcp_input+0x8a8>)
 8017cd4:	2200      	movs	r2, #0
 8017cd6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8017cd8:	4b2d      	ldr	r3, [pc, #180]	@ (8017d90 <tcp_input+0x8ac>)
 8017cda:	2200      	movs	r2, #0
 8017cdc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8017cde:	4b2d      	ldr	r3, [pc, #180]	@ (8017d94 <tcp_input+0x8b0>)
 8017ce0:	685b      	ldr	r3, [r3, #4]
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d04e      	beq.n	8017d84 <tcp_input+0x8a0>
      pbuf_free(inseg.p);
 8017ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8017d94 <tcp_input+0x8b0>)
 8017ce8:	685b      	ldr	r3, [r3, #4]
 8017cea:	4618      	mov	r0, r3
 8017cec:	f7fd f8ba 	bl	8014e64 <pbuf_free>
      inseg.p = NULL;
 8017cf0:	4b28      	ldr	r3, [pc, #160]	@ (8017d94 <tcp_input+0x8b0>)
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8017cf6:	e045      	b.n	8017d84 <tcp_input+0x8a0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8017cf8:	4b27      	ldr	r3, [pc, #156]	@ (8017d98 <tcp_input+0x8b4>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	899b      	ldrh	r3, [r3, #12]
 8017cfe:	b29b      	uxth	r3, r3
 8017d00:	4618      	mov	r0, r3
 8017d02:	f7fb fa81 	bl	8013208 <lwip_htons>
 8017d06:	4603      	mov	r3, r0
 8017d08:	b2db      	uxtb	r3, r3
 8017d0a:	f003 0304 	and.w	r3, r3, #4
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d128      	bne.n	8017d64 <tcp_input+0x880>
      TCP_STATS_INC(tcp.proterr);
 8017d12:	4b22      	ldr	r3, [pc, #136]	@ (8017d9c <tcp_input+0x8b8>)
 8017d14:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8017d18:	3301      	adds	r3, #1
 8017d1a:	b29a      	uxth	r2, r3
 8017d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8017d9c <tcp_input+0x8b8>)
 8017d1e:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
      TCP_STATS_INC(tcp.drop);
 8017d22:	4b1e      	ldr	r3, [pc, #120]	@ (8017d9c <tcp_input+0x8b8>)
 8017d24:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017d28:	3301      	adds	r3, #1
 8017d2a:	b29a      	uxth	r2, r3
 8017d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8017d9c <tcp_input+0x8b8>)
 8017d2e:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d32:	4b1b      	ldr	r3, [pc, #108]	@ (8017da0 <tcp_input+0x8bc>)
 8017d34:	6819      	ldr	r1, [r3, #0]
 8017d36:	4b1b      	ldr	r3, [pc, #108]	@ (8017da4 <tcp_input+0x8c0>)
 8017d38:	881b      	ldrh	r3, [r3, #0]
 8017d3a:	461a      	mov	r2, r3
 8017d3c:	4b1a      	ldr	r3, [pc, #104]	@ (8017da8 <tcp_input+0x8c4>)
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d42:	4b15      	ldr	r3, [pc, #84]	@ (8017d98 <tcp_input+0x8b4>)
 8017d44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d46:	885b      	ldrh	r3, [r3, #2]
 8017d48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017d4a:	4a13      	ldr	r2, [pc, #76]	@ (8017d98 <tcp_input+0x8b4>)
 8017d4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017d4e:	8812      	ldrh	r2, [r2, #0]
 8017d50:	b292      	uxth	r2, r2
 8017d52:	9202      	str	r2, [sp, #8]
 8017d54:	9301      	str	r3, [sp, #4]
 8017d56:	4b15      	ldr	r3, [pc, #84]	@ (8017dac <tcp_input+0x8c8>)
 8017d58:	9300      	str	r3, [sp, #0]
 8017d5a:	4b15      	ldr	r3, [pc, #84]	@ (8017db0 <tcp_input+0x8cc>)
 8017d5c:	4602      	mov	r2, r0
 8017d5e:	2000      	movs	r0, #0
 8017d60:	f003 fd34 	bl	801b7cc <tcp_rst>
    pbuf_free(p);
 8017d64:	6878      	ldr	r0, [r7, #4]
 8017d66:	f7fd f87d 	bl	8014e64 <pbuf_free>
  return;
 8017d6a:	e00b      	b.n	8017d84 <tcp_input+0x8a0>
dropped:
  TCP_STATS_INC(tcp.drop);
 8017d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8017d9c <tcp_input+0x8b8>)
 8017d6e:	f8b3 3096 	ldrh.w	r3, [r3, #150]	@ 0x96
 8017d72:	3301      	adds	r3, #1
 8017d74:	b29a      	uxth	r2, r3
 8017d76:	4b09      	ldr	r3, [pc, #36]	@ (8017d9c <tcp_input+0x8b8>)
 8017d78:	f8a3 2096 	strh.w	r2, [r3, #150]	@ 0x96
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8017d7c:	6878      	ldr	r0, [r7, #4]
 8017d7e:	f7fd f871 	bl	8014e64 <pbuf_free>
 8017d82:	e000      	b.n	8017d86 <tcp_input+0x8a2>
  return;
 8017d84:	bf00      	nop
}
 8017d86:	3724      	adds	r7, #36	@ 0x24
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd90      	pop	{r4, r7, pc}
 8017d8c:	2002d4bc 	.word	0x2002d4bc
 8017d90:	2002d4b8 	.word	0x2002d4b8
 8017d94:	2002d484 	.word	0x2002d484
 8017d98:	2002d498 	.word	0x2002d498
 8017d9c:	2002d36c 	.word	0x2002d36c
 8017da0:	2002d4ac 	.word	0x2002d4ac
 8017da4:	2002d4b2 	.word	0x2002d4b2
 8017da8:	2002d4a8 	.word	0x2002d4a8
 8017dac:	2002710c 	.word	0x2002710c
 8017db0:	20027110 	.word	0x20027110

08017db4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b082      	sub	sp, #8
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d106      	bne.n	8017dd0 <tcp_input_delayed_close+0x1c>
 8017dc2:	4b17      	ldr	r3, [pc, #92]	@ (8017e20 <tcp_input_delayed_close+0x6c>)
 8017dc4:	f240 225a 	movw	r2, #602	@ 0x25a
 8017dc8:	4916      	ldr	r1, [pc, #88]	@ (8017e24 <tcp_input_delayed_close+0x70>)
 8017dca:	4817      	ldr	r0, [pc, #92]	@ (8017e28 <tcp_input_delayed_close+0x74>)
 8017dcc:	f009 f882 	bl	8020ed4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8017dd0:	4b16      	ldr	r3, [pc, #88]	@ (8017e2c <tcp_input_delayed_close+0x78>)
 8017dd2:	781b      	ldrb	r3, [r3, #0]
 8017dd4:	f003 0310 	and.w	r3, r3, #16
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d01c      	beq.n	8017e16 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	8b5b      	ldrh	r3, [r3, #26]
 8017de0:	f003 0310 	and.w	r3, r3, #16
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d10d      	bne.n	8017e04 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d008      	beq.n	8017e04 <tcp_input_delayed_close+0x50>
 8017df2:	687b      	ldr	r3, [r7, #4]
 8017df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017df8:	687a      	ldr	r2, [r7, #4]
 8017dfa:	6912      	ldr	r2, [r2, #16]
 8017dfc:	f06f 010e 	mvn.w	r1, #14
 8017e00:	4610      	mov	r0, r2
 8017e02:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8017e04:	6879      	ldr	r1, [r7, #4]
 8017e06:	480a      	ldr	r0, [pc, #40]	@ (8017e30 <tcp_input_delayed_close+0x7c>)
 8017e08:	f7ff f9ee 	bl	80171e8 <tcp_pcb_remove>
    tcp_free(pcb);
 8017e0c:	6878      	ldr	r0, [r7, #4]
 8017e0e:	f7fd fc8f 	bl	8015730 <tcp_free>
    return 1;
 8017e12:	2301      	movs	r3, #1
 8017e14:	e000      	b.n	8017e18 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8017e16:	2300      	movs	r3, #0
}
 8017e18:	4618      	mov	r0, r3
 8017e1a:	3708      	adds	r7, #8
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}
 8017e20:	08024840 	.word	0x08024840
 8017e24:	08024a10 	.word	0x08024a10
 8017e28:	0802488c 	.word	0x0802488c
 8017e2c:	2002d4b5 	.word	0x2002d4b5
 8017e30:	2002d478 	.word	0x2002d478

08017e34 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8017e34:	b590      	push	{r4, r7, lr}
 8017e36:	b08b      	sub	sp, #44	@ 0x2c
 8017e38:	af04      	add	r7, sp, #16
 8017e3a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8017e3c:	4b73      	ldr	r3, [pc, #460]	@ (801800c <tcp_listen_input+0x1d8>)
 8017e3e:	781b      	ldrb	r3, [r3, #0]
 8017e40:	f003 0304 	and.w	r3, r3, #4
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	f040 80da 	bne.w	8017ffe <tcp_listen_input+0x1ca>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d106      	bne.n	8017e5e <tcp_listen_input+0x2a>
 8017e50:	4b6f      	ldr	r3, [pc, #444]	@ (8018010 <tcp_listen_input+0x1dc>)
 8017e52:	f240 2281 	movw	r2, #641	@ 0x281
 8017e56:	496f      	ldr	r1, [pc, #444]	@ (8018014 <tcp_listen_input+0x1e0>)
 8017e58:	486f      	ldr	r0, [pc, #444]	@ (8018018 <tcp_listen_input+0x1e4>)
 8017e5a:	f009 f83b 	bl	8020ed4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8017e5e:	4b6b      	ldr	r3, [pc, #428]	@ (801800c <tcp_listen_input+0x1d8>)
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	f003 0310 	and.w	r3, r3, #16
 8017e66:	2b00      	cmp	r3, #0
 8017e68:	d019      	beq.n	8017e9e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e6a:	4b6c      	ldr	r3, [pc, #432]	@ (801801c <tcp_listen_input+0x1e8>)
 8017e6c:	6819      	ldr	r1, [r3, #0]
 8017e6e:	4b6c      	ldr	r3, [pc, #432]	@ (8018020 <tcp_listen_input+0x1ec>)
 8017e70:	881b      	ldrh	r3, [r3, #0]
 8017e72:	461a      	mov	r2, r3
 8017e74:	4b6b      	ldr	r3, [pc, #428]	@ (8018024 <tcp_listen_input+0x1f0>)
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e7a:	4b6b      	ldr	r3, [pc, #428]	@ (8018028 <tcp_listen_input+0x1f4>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e7e:	885b      	ldrh	r3, [r3, #2]
 8017e80:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017e82:	4a69      	ldr	r2, [pc, #420]	@ (8018028 <tcp_listen_input+0x1f4>)
 8017e84:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017e86:	8812      	ldrh	r2, [r2, #0]
 8017e88:	b292      	uxth	r2, r2
 8017e8a:	9202      	str	r2, [sp, #8]
 8017e8c:	9301      	str	r3, [sp, #4]
 8017e8e:	4b67      	ldr	r3, [pc, #412]	@ (801802c <tcp_listen_input+0x1f8>)
 8017e90:	9300      	str	r3, [sp, #0]
 8017e92:	4b67      	ldr	r3, [pc, #412]	@ (8018030 <tcp_listen_input+0x1fc>)
 8017e94:	4602      	mov	r2, r0
 8017e96:	6878      	ldr	r0, [r7, #4]
 8017e98:	f003 fc98 	bl	801b7cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8017e9c:	e0b1      	b.n	8018002 <tcp_listen_input+0x1ce>
  } else if (flags & TCP_SYN) {
 8017e9e:	4b5b      	ldr	r3, [pc, #364]	@ (801800c <tcp_listen_input+0x1d8>)
 8017ea0:	781b      	ldrb	r3, [r3, #0]
 8017ea2:	f003 0302 	and.w	r3, r3, #2
 8017ea6:	2b00      	cmp	r3, #0
 8017ea8:	f000 80ab 	beq.w	8018002 <tcp_listen_input+0x1ce>
    npcb = tcp_alloc(pcb->prio);
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	7d5b      	ldrb	r3, [r3, #21]
 8017eb0:	4618      	mov	r0, r3
 8017eb2:	f7fe ffcd 	bl	8016e50 <tcp_alloc>
 8017eb6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8017eb8:	697b      	ldr	r3, [r7, #20]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d119      	bne.n	8017ef2 <tcp_listen_input+0xbe>
      TCP_STATS_INC(tcp.memerr);
 8017ebe:	4b5d      	ldr	r3, [pc, #372]	@ (8018034 <tcp_listen_input+0x200>)
 8017ec0:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	b29a      	uxth	r2, r3
 8017ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8018034 <tcp_listen_input+0x200>)
 8017eca:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	699b      	ldr	r3, [r3, #24]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d00a      	beq.n	8017eec <tcp_listen_input+0xb8>
 8017ed6:	687b      	ldr	r3, [r7, #4]
 8017ed8:	699b      	ldr	r3, [r3, #24]
 8017eda:	687a      	ldr	r2, [r7, #4]
 8017edc:	6910      	ldr	r0, [r2, #16]
 8017ede:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017ee2:	2100      	movs	r1, #0
 8017ee4:	4798      	blx	r3
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	73bb      	strb	r3, [r7, #14]
      return;
 8017eea:	e08b      	b.n	8018004 <tcp_listen_input+0x1d0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8017eec:	23f0      	movs	r3, #240	@ 0xf0
 8017eee:	73bb      	strb	r3, [r7, #14]
      return;
 8017ef0:	e088      	b.n	8018004 <tcp_listen_input+0x1d0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8017ef2:	4b51      	ldr	r3, [pc, #324]	@ (8018038 <tcp_listen_input+0x204>)
 8017ef4:	695a      	ldr	r2, [r3, #20]
 8017ef6:	697b      	ldr	r3, [r7, #20]
 8017ef8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8017efa:	4b4f      	ldr	r3, [pc, #316]	@ (8018038 <tcp_listen_input+0x204>)
 8017efc:	691a      	ldr	r2, [r3, #16]
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	8ada      	ldrh	r2, [r3, #22]
 8017f06:	697b      	ldr	r3, [r7, #20]
 8017f08:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8017f0a:	4b47      	ldr	r3, [pc, #284]	@ (8018028 <tcp_listen_input+0x1f4>)
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	881b      	ldrh	r3, [r3, #0]
 8017f10:	b29a      	uxth	r2, r3
 8017f12:	697b      	ldr	r3, [r7, #20]
 8017f14:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8017f16:	697b      	ldr	r3, [r7, #20]
 8017f18:	2203      	movs	r2, #3
 8017f1a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8017f1c:	4b41      	ldr	r3, [pc, #260]	@ (8018024 <tcp_listen_input+0x1f0>)
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	1c5a      	adds	r2, r3, #1
 8017f22:	697b      	ldr	r3, [r7, #20]
 8017f24:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8017f26:	697b      	ldr	r3, [r7, #20]
 8017f28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017f2a:	697b      	ldr	r3, [r7, #20]
 8017f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8017f2e:	6978      	ldr	r0, [r7, #20]
 8017f30:	f7ff f9ee 	bl	8017310 <tcp_next_iss>
 8017f34:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8017f36:	697b      	ldr	r3, [r7, #20]
 8017f38:	693a      	ldr	r2, [r7, #16]
 8017f3a:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8017f3c:	697b      	ldr	r3, [r7, #20]
 8017f3e:	693a      	ldr	r2, [r7, #16]
 8017f40:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8017f42:	697b      	ldr	r3, [r7, #20]
 8017f44:	693a      	ldr	r2, [r7, #16]
 8017f46:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8017f48:	697b      	ldr	r3, [r7, #20]
 8017f4a:	693a      	ldr	r2, [r7, #16]
 8017f4c:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8017f4e:	4b35      	ldr	r3, [pc, #212]	@ (8018024 <tcp_listen_input+0x1f0>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	1e5a      	subs	r2, r3, #1
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	691a      	ldr	r2, [r3, #16]
 8017f5c:	697b      	ldr	r3, [r7, #20]
 8017f5e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8017f60:	697b      	ldr	r3, [r7, #20]
 8017f62:	687a      	ldr	r2, [r7, #4]
 8017f64:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	7a5b      	ldrb	r3, [r3, #9]
 8017f6a:	f003 030c 	and.w	r3, r3, #12
 8017f6e:	b2da      	uxtb	r2, r3
 8017f70:	697b      	ldr	r3, [r7, #20]
 8017f72:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	7a1a      	ldrb	r2, [r3, #8]
 8017f78:	697b      	ldr	r3, [r7, #20]
 8017f7a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017f7c:	4b2f      	ldr	r3, [pc, #188]	@ (801803c <tcp_listen_input+0x208>)
 8017f7e:	681a      	ldr	r2, [r3, #0]
 8017f80:	697b      	ldr	r3, [r7, #20]
 8017f82:	60da      	str	r2, [r3, #12]
 8017f84:	4a2d      	ldr	r2, [pc, #180]	@ (801803c <tcp_listen_input+0x208>)
 8017f86:	697b      	ldr	r3, [r7, #20]
 8017f88:	6013      	str	r3, [r2, #0]
 8017f8a:	f003 fde1 	bl	801bb50 <tcp_timer_needed>
 8017f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8018040 <tcp_listen_input+0x20c>)
 8017f90:	2201      	movs	r2, #1
 8017f92:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017f94:	6978      	ldr	r0, [r7, #20]
 8017f96:	f001 fd8d 	bl	8019ab4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017f9a:	4b23      	ldr	r3, [pc, #140]	@ (8018028 <tcp_listen_input+0x1f4>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	89db      	ldrh	r3, [r3, #14]
 8017fa0:	b29a      	uxth	r2, r3
 8017fa2:	697b      	ldr	r3, [r7, #20]
 8017fa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017fa8:	697b      	ldr	r3, [r7, #20]
 8017faa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017fae:	697b      	ldr	r3, [r7, #20]
 8017fb0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017fb4:	697b      	ldr	r3, [r7, #20]
 8017fb6:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8017fb8:	697b      	ldr	r3, [r7, #20]
 8017fba:	3304      	adds	r3, #4
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f006 f91d 	bl	801e1fc <ip4_route>
 8017fc2:	4601      	mov	r1, r0
 8017fc4:	697b      	ldr	r3, [r7, #20]
 8017fc6:	3304      	adds	r3, #4
 8017fc8:	461a      	mov	r2, r3
 8017fca:	4620      	mov	r0, r4
 8017fcc:	f7ff f9c6 	bl	801735c <tcp_eff_send_mss_netif>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	461a      	mov	r2, r3
 8017fd4:	697b      	ldr	r3, [r7, #20]
 8017fd6:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017fd8:	2112      	movs	r1, #18
 8017fda:	6978      	ldr	r0, [r7, #20]
 8017fdc:	f002 fd22 	bl	801aa24 <tcp_enqueue_flags>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8017fe4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d004      	beq.n	8017ff6 <tcp_listen_input+0x1c2>
      tcp_abandon(npcb, 0);
 8017fec:	2100      	movs	r1, #0
 8017fee:	6978      	ldr	r0, [r7, #20]
 8017ff0:	f7fd fe24 	bl	8015c3c <tcp_abandon>
      return;
 8017ff4:	e006      	b.n	8018004 <tcp_listen_input+0x1d0>
    tcp_output(npcb);
 8017ff6:	6978      	ldr	r0, [r7, #20]
 8017ff8:	f002 fe14 	bl	801ac24 <tcp_output>
  return;
 8017ffc:	e001      	b.n	8018002 <tcp_listen_input+0x1ce>
    return;
 8017ffe:	bf00      	nop
 8018000:	e000      	b.n	8018004 <tcp_listen_input+0x1d0>
  return;
 8018002:	bf00      	nop
}
 8018004:	371c      	adds	r7, #28
 8018006:	46bd      	mov	sp, r7
 8018008:	bd90      	pop	{r4, r7, pc}
 801800a:	bf00      	nop
 801800c:	2002d4b4 	.word	0x2002d4b4
 8018010:	08024840 	.word	0x08024840
 8018014:	08024a38 	.word	0x08024a38
 8018018:	0802488c 	.word	0x0802488c
 801801c:	2002d4ac 	.word	0x2002d4ac
 8018020:	2002d4b2 	.word	0x2002d4b2
 8018024:	2002d4a8 	.word	0x2002d4a8
 8018028:	2002d498 	.word	0x2002d498
 801802c:	2002710c 	.word	0x2002710c
 8018030:	20027110 	.word	0x20027110
 8018034:	2002d36c 	.word	0x2002d36c
 8018038:	200270fc 	.word	0x200270fc
 801803c:	2002d478 	.word	0x2002d478
 8018040:	2002d480 	.word	0x2002d480

08018044 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b086      	sub	sp, #24
 8018048:	af04      	add	r7, sp, #16
 801804a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801804c:	4b2f      	ldr	r3, [pc, #188]	@ (801810c <tcp_timewait_input+0xc8>)
 801804e:	781b      	ldrb	r3, [r3, #0]
 8018050:	f003 0304 	and.w	r3, r3, #4
 8018054:	2b00      	cmp	r3, #0
 8018056:	d153      	bne.n	8018100 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d106      	bne.n	801806c <tcp_timewait_input+0x28>
 801805e:	4b2c      	ldr	r3, [pc, #176]	@ (8018110 <tcp_timewait_input+0xcc>)
 8018060:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8018064:	492b      	ldr	r1, [pc, #172]	@ (8018114 <tcp_timewait_input+0xd0>)
 8018066:	482c      	ldr	r0, [pc, #176]	@ (8018118 <tcp_timewait_input+0xd4>)
 8018068:	f008 ff34 	bl	8020ed4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801806c:	4b27      	ldr	r3, [pc, #156]	@ (801810c <tcp_timewait_input+0xc8>)
 801806e:	781b      	ldrb	r3, [r3, #0]
 8018070:	f003 0302 	and.w	r3, r3, #2
 8018074:	2b00      	cmp	r3, #0
 8018076:	d02a      	beq.n	80180ce <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8018078:	4b28      	ldr	r3, [pc, #160]	@ (801811c <tcp_timewait_input+0xd8>)
 801807a:	681a      	ldr	r2, [r3, #0]
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018080:	1ad3      	subs	r3, r2, r3
 8018082:	2b00      	cmp	r3, #0
 8018084:	db2d      	blt.n	80180e2 <tcp_timewait_input+0x9e>
 8018086:	4b25      	ldr	r3, [pc, #148]	@ (801811c <tcp_timewait_input+0xd8>)
 8018088:	681a      	ldr	r2, [r3, #0]
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801808e:	6879      	ldr	r1, [r7, #4]
 8018090:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8018092:	440b      	add	r3, r1
 8018094:	1ad3      	subs	r3, r2, r3
 8018096:	2b00      	cmp	r3, #0
 8018098:	dc23      	bgt.n	80180e2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801809a:	4b21      	ldr	r3, [pc, #132]	@ (8018120 <tcp_timewait_input+0xdc>)
 801809c:	6819      	ldr	r1, [r3, #0]
 801809e:	4b21      	ldr	r3, [pc, #132]	@ (8018124 <tcp_timewait_input+0xe0>)
 80180a0:	881b      	ldrh	r3, [r3, #0]
 80180a2:	461a      	mov	r2, r3
 80180a4:	4b1d      	ldr	r3, [pc, #116]	@ (801811c <tcp_timewait_input+0xd8>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80180aa:	4b1f      	ldr	r3, [pc, #124]	@ (8018128 <tcp_timewait_input+0xe4>)
 80180ac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80180ae:	885b      	ldrh	r3, [r3, #2]
 80180b0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80180b2:	4a1d      	ldr	r2, [pc, #116]	@ (8018128 <tcp_timewait_input+0xe4>)
 80180b4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80180b6:	8812      	ldrh	r2, [r2, #0]
 80180b8:	b292      	uxth	r2, r2
 80180ba:	9202      	str	r2, [sp, #8]
 80180bc:	9301      	str	r3, [sp, #4]
 80180be:	4b1b      	ldr	r3, [pc, #108]	@ (801812c <tcp_timewait_input+0xe8>)
 80180c0:	9300      	str	r3, [sp, #0]
 80180c2:	4b1b      	ldr	r3, [pc, #108]	@ (8018130 <tcp_timewait_input+0xec>)
 80180c4:	4602      	mov	r2, r0
 80180c6:	6878      	ldr	r0, [r7, #4]
 80180c8:	f003 fb80 	bl	801b7cc <tcp_rst>
      return;
 80180cc:	e01b      	b.n	8018106 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80180ce:	4b0f      	ldr	r3, [pc, #60]	@ (801810c <tcp_timewait_input+0xc8>)
 80180d0:	781b      	ldrb	r3, [r3, #0]
 80180d2:	f003 0301 	and.w	r3, r3, #1
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d003      	beq.n	80180e2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80180da:	4b16      	ldr	r3, [pc, #88]	@ (8018134 <tcp_timewait_input+0xf0>)
 80180dc:	681a      	ldr	r2, [r3, #0]
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80180e2:	4b10      	ldr	r3, [pc, #64]	@ (8018124 <tcp_timewait_input+0xe0>)
 80180e4:	881b      	ldrh	r3, [r3, #0]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d00c      	beq.n	8018104 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	8b5b      	ldrh	r3, [r3, #26]
 80180ee:	f043 0302 	orr.w	r3, r3, #2
 80180f2:	b29a      	uxth	r2, r3
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80180f8:	6878      	ldr	r0, [r7, #4]
 80180fa:	f002 fd93 	bl	801ac24 <tcp_output>
  }
  return;
 80180fe:	e001      	b.n	8018104 <tcp_timewait_input+0xc0>
    return;
 8018100:	bf00      	nop
 8018102:	e000      	b.n	8018106 <tcp_timewait_input+0xc2>
  return;
 8018104:	bf00      	nop
}
 8018106:	3708      	adds	r7, #8
 8018108:	46bd      	mov	sp, r7
 801810a:	bd80      	pop	{r7, pc}
 801810c:	2002d4b4 	.word	0x2002d4b4
 8018110:	08024840 	.word	0x08024840
 8018114:	08024a58 	.word	0x08024a58
 8018118:	0802488c 	.word	0x0802488c
 801811c:	2002d4a8 	.word	0x2002d4a8
 8018120:	2002d4ac 	.word	0x2002d4ac
 8018124:	2002d4b2 	.word	0x2002d4b2
 8018128:	2002d498 	.word	0x2002d498
 801812c:	2002710c 	.word	0x2002710c
 8018130:	20027110 	.word	0x20027110
 8018134:	2002d46c 	.word	0x2002d46c

08018138 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8018138:	b590      	push	{r4, r7, lr}
 801813a:	b08d      	sub	sp, #52	@ 0x34
 801813c:	af04      	add	r7, sp, #16
 801813e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8018140:	2300      	movs	r3, #0
 8018142:	77fb      	strb	r3, [r7, #31]
  err_t err;

  err = ERR_OK;
 8018144:	2300      	movs	r3, #0
 8018146:	77bb      	strb	r3, [r7, #30]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d106      	bne.n	801815c <tcp_process+0x24>
 801814e:	4b9d      	ldr	r3, [pc, #628]	@ (80183c4 <tcp_process+0x28c>)
 8018150:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8018154:	499c      	ldr	r1, [pc, #624]	@ (80183c8 <tcp_process+0x290>)
 8018156:	489d      	ldr	r0, [pc, #628]	@ (80183cc <tcp_process+0x294>)
 8018158:	f008 febc 	bl	8020ed4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801815c:	4b9c      	ldr	r3, [pc, #624]	@ (80183d0 <tcp_process+0x298>)
 801815e:	781b      	ldrb	r3, [r3, #0]
 8018160:	f003 0304 	and.w	r3, r3, #4
 8018164:	2b00      	cmp	r3, #0
 8018166:	d04e      	beq.n	8018206 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	7d1b      	ldrb	r3, [r3, #20]
 801816c:	2b02      	cmp	r3, #2
 801816e:	d108      	bne.n	8018182 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018174:	4b97      	ldr	r3, [pc, #604]	@ (80183d4 <tcp_process+0x29c>)
 8018176:	681b      	ldr	r3, [r3, #0]
 8018178:	429a      	cmp	r2, r3
 801817a:	d123      	bne.n	80181c4 <tcp_process+0x8c>
        acceptable = 1;
 801817c:	2301      	movs	r3, #1
 801817e:	77fb      	strb	r3, [r7, #31]
 8018180:	e020      	b.n	80181c4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8018186:	4b94      	ldr	r3, [pc, #592]	@ (80183d8 <tcp_process+0x2a0>)
 8018188:	681b      	ldr	r3, [r3, #0]
 801818a:	429a      	cmp	r2, r3
 801818c:	d102      	bne.n	8018194 <tcp_process+0x5c>
        acceptable = 1;
 801818e:	2301      	movs	r3, #1
 8018190:	77fb      	strb	r3, [r7, #31]
 8018192:	e017      	b.n	80181c4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018194:	4b90      	ldr	r3, [pc, #576]	@ (80183d8 <tcp_process+0x2a0>)
 8018196:	681a      	ldr	r2, [r3, #0]
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801819c:	1ad3      	subs	r3, r2, r3
 801819e:	2b00      	cmp	r3, #0
 80181a0:	db10      	blt.n	80181c4 <tcp_process+0x8c>
 80181a2:	4b8d      	ldr	r3, [pc, #564]	@ (80183d8 <tcp_process+0x2a0>)
 80181a4:	681a      	ldr	r2, [r3, #0]
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181aa:	6879      	ldr	r1, [r7, #4]
 80181ac:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80181ae:	440b      	add	r3, r1
 80181b0:	1ad3      	subs	r3, r2, r3
 80181b2:	2b00      	cmp	r3, #0
 80181b4:	dc06      	bgt.n	80181c4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	8b5b      	ldrh	r3, [r3, #26]
 80181ba:	f043 0302 	orr.w	r3, r3, #2
 80181be:	b29a      	uxth	r2, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80181c4:	7ffb      	ldrb	r3, [r7, #31]
 80181c6:	2b00      	cmp	r3, #0
 80181c8:	d01b      	beq.n	8018202 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	7d1b      	ldrb	r3, [r3, #20]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	d106      	bne.n	80181e0 <tcp_process+0xa8>
 80181d2:	4b7c      	ldr	r3, [pc, #496]	@ (80183c4 <tcp_process+0x28c>)
 80181d4:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80181d8:	4980      	ldr	r1, [pc, #512]	@ (80183dc <tcp_process+0x2a4>)
 80181da:	487c      	ldr	r0, [pc, #496]	@ (80183cc <tcp_process+0x294>)
 80181dc:	f008 fe7a 	bl	8020ed4 <iprintf>
      recv_flags |= TF_RESET;
 80181e0:	4b7f      	ldr	r3, [pc, #508]	@ (80183e0 <tcp_process+0x2a8>)
 80181e2:	781b      	ldrb	r3, [r3, #0]
 80181e4:	f043 0308 	orr.w	r3, r3, #8
 80181e8:	b2da      	uxtb	r2, r3
 80181ea:	4b7d      	ldr	r3, [pc, #500]	@ (80183e0 <tcp_process+0x2a8>)
 80181ec:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	8b5b      	ldrh	r3, [r3, #26]
 80181f2:	f023 0301 	bic.w	r3, r3, #1
 80181f6:	b29a      	uxth	r2, r3
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80181fc:	f06f 030d 	mvn.w	r3, #13
 8018200:	e37a      	b.n	80188f8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8018202:	2300      	movs	r3, #0
 8018204:	e378      	b.n	80188f8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8018206:	4b72      	ldr	r3, [pc, #456]	@ (80183d0 <tcp_process+0x298>)
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	f003 0302 	and.w	r3, r3, #2
 801820e:	2b00      	cmp	r3, #0
 8018210:	d010      	beq.n	8018234 <tcp_process+0xfc>
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	7d1b      	ldrb	r3, [r3, #20]
 8018216:	2b02      	cmp	r3, #2
 8018218:	d00c      	beq.n	8018234 <tcp_process+0xfc>
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	7d1b      	ldrb	r3, [r3, #20]
 801821e:	2b03      	cmp	r3, #3
 8018220:	d008      	beq.n	8018234 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	8b5b      	ldrh	r3, [r3, #26]
 8018226:	f043 0302 	orr.w	r3, r3, #2
 801822a:	b29a      	uxth	r2, r3
 801822c:	687b      	ldr	r3, [r7, #4]
 801822e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8018230:	2300      	movs	r3, #0
 8018232:	e361      	b.n	80188f8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	8b5b      	ldrh	r3, [r3, #26]
 8018238:	f003 0310 	and.w	r3, r3, #16
 801823c:	2b00      	cmp	r3, #0
 801823e:	d103      	bne.n	8018248 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8018240:	4b68      	ldr	r3, [pc, #416]	@ (80183e4 <tcp_process+0x2ac>)
 8018242:	681a      	ldr	r2, [r3, #0]
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	2200      	movs	r2, #0
 801824c:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	2200      	movs	r2, #0
 8018254:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8018258:	6878      	ldr	r0, [r7, #4]
 801825a:	f001 fc2b 	bl	8019ab4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	7d1b      	ldrb	r3, [r3, #20]
 8018262:	3b02      	subs	r3, #2
 8018264:	2b07      	cmp	r3, #7
 8018266:	f200 8337 	bhi.w	80188d8 <tcp_process+0x7a0>
 801826a:	a201      	add	r2, pc, #4	@ (adr r2, 8018270 <tcp_process+0x138>)
 801826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018270:	08018291 	.word	0x08018291
 8018274:	080184c1 	.word	0x080184c1
 8018278:	08018639 	.word	0x08018639
 801827c:	08018663 	.word	0x08018663
 8018280:	08018787 	.word	0x08018787
 8018284:	08018639 	.word	0x08018639
 8018288:	08018813 	.word	0x08018813
 801828c:	080188a3 	.word	0x080188a3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8018290:	4b4f      	ldr	r3, [pc, #316]	@ (80183d0 <tcp_process+0x298>)
 8018292:	781b      	ldrb	r3, [r3, #0]
 8018294:	f003 0310 	and.w	r3, r3, #16
 8018298:	2b00      	cmp	r3, #0
 801829a:	f000 80e4 	beq.w	8018466 <tcp_process+0x32e>
 801829e:	4b4c      	ldr	r3, [pc, #304]	@ (80183d0 <tcp_process+0x298>)
 80182a0:	781b      	ldrb	r3, [r3, #0]
 80182a2:	f003 0302 	and.w	r3, r3, #2
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	f000 80dd 	beq.w	8018466 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80182b0:	1c5a      	adds	r2, r3, #1
 80182b2:	4b48      	ldr	r3, [pc, #288]	@ (80183d4 <tcp_process+0x29c>)
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	429a      	cmp	r2, r3
 80182b8:	f040 80d5 	bne.w	8018466 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80182bc:	4b46      	ldr	r3, [pc, #280]	@ (80183d8 <tcp_process+0x2a0>)
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	1c5a      	adds	r2, r3, #1
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80182ce:	4b41      	ldr	r3, [pc, #260]	@ (80183d4 <tcp_process+0x29c>)
 80182d0:	681a      	ldr	r2, [r3, #0]
 80182d2:	687b      	ldr	r3, [r7, #4]
 80182d4:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80182d6:	4b44      	ldr	r3, [pc, #272]	@ (80183e8 <tcp_process+0x2b0>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	89db      	ldrh	r3, [r3, #14]
 80182dc:	b29a      	uxth	r2, r3
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80182ea:	687b      	ldr	r3, [r7, #4]
 80182ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80182f0:	4b39      	ldr	r3, [pc, #228]	@ (80183d8 <tcp_process+0x2a0>)
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	1e5a      	subs	r2, r3, #1
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	2204      	movs	r2, #4
 80182fe:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	3304      	adds	r3, #4
 8018308:	4618      	mov	r0, r3
 801830a:	f005 ff77 	bl	801e1fc <ip4_route>
 801830e:	4601      	mov	r1, r0
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	3304      	adds	r3, #4
 8018314:	461a      	mov	r2, r3
 8018316:	4620      	mov	r0, r4
 8018318:	f7ff f820 	bl	801735c <tcp_eff_send_mss_netif>
 801831c:	4603      	mov	r3, r0
 801831e:	461a      	mov	r2, r3
 8018320:	687b      	ldr	r3, [r7, #4]
 8018322:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018328:	009a      	lsls	r2, r3, #2
 801832a:	687b      	ldr	r3, [r7, #4]
 801832c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801832e:	005b      	lsls	r3, r3, #1
 8018330:	f241 111c 	movw	r1, #4380	@ 0x111c
 8018334:	428b      	cmp	r3, r1
 8018336:	bf38      	it	cc
 8018338:	460b      	movcc	r3, r1
 801833a:	429a      	cmp	r2, r3
 801833c:	d204      	bcs.n	8018348 <tcp_process+0x210>
 801833e:	687b      	ldr	r3, [r7, #4]
 8018340:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018342:	009b      	lsls	r3, r3, #2
 8018344:	b29b      	uxth	r3, r3
 8018346:	e00d      	b.n	8018364 <tcp_process+0x22c>
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801834c:	005b      	lsls	r3, r3, #1
 801834e:	f241 121c 	movw	r2, #4380	@ 0x111c
 8018352:	4293      	cmp	r3, r2
 8018354:	d904      	bls.n	8018360 <tcp_process+0x228>
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801835a:	005b      	lsls	r3, r3, #1
 801835c:	b29b      	uxth	r3, r3
 801835e:	e001      	b.n	8018364 <tcp_process+0x22c>
 8018360:	f241 131c 	movw	r3, #4380	@ 0x111c
 8018364:	687a      	ldr	r2, [r7, #4]
 8018366:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018370:	2b00      	cmp	r3, #0
 8018372:	d106      	bne.n	8018382 <tcp_process+0x24a>
 8018374:	4b13      	ldr	r3, [pc, #76]	@ (80183c4 <tcp_process+0x28c>)
 8018376:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801837a:	491c      	ldr	r1, [pc, #112]	@ (80183ec <tcp_process+0x2b4>)
 801837c:	4813      	ldr	r0, [pc, #76]	@ (80183cc <tcp_process+0x294>)
 801837e:	f008 fda9 	bl	8020ed4 <iprintf>
        --pcb->snd_queuelen;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018388:	3b01      	subs	r3, #1
 801838a:	b29a      	uxth	r2, r3
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018396:	617b      	str	r3, [r7, #20]
        if (rseg == NULL) {
 8018398:	697b      	ldr	r3, [r7, #20]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d12a      	bne.n	80183f4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80183a2:	617b      	str	r3, [r7, #20]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80183a4:	697b      	ldr	r3, [r7, #20]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d106      	bne.n	80183b8 <tcp_process+0x280>
 80183aa:	4b06      	ldr	r3, [pc, #24]	@ (80183c4 <tcp_process+0x28c>)
 80183ac:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80183b0:	490f      	ldr	r1, [pc, #60]	@ (80183f0 <tcp_process+0x2b8>)
 80183b2:	4806      	ldr	r0, [pc, #24]	@ (80183cc <tcp_process+0x294>)
 80183b4:	f008 fd8e 	bl	8020ed4 <iprintf>
          pcb->unsent = rseg->next;
 80183b8:	697b      	ldr	r3, [r7, #20]
 80183ba:	681a      	ldr	r2, [r3, #0]
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	66da      	str	r2, [r3, #108]	@ 0x6c
 80183c0:	e01c      	b.n	80183fc <tcp_process+0x2c4>
 80183c2:	bf00      	nop
 80183c4:	08024840 	.word	0x08024840
 80183c8:	08024a78 	.word	0x08024a78
 80183cc:	0802488c 	.word	0x0802488c
 80183d0:	2002d4b4 	.word	0x2002d4b4
 80183d4:	2002d4ac 	.word	0x2002d4ac
 80183d8:	2002d4a8 	.word	0x2002d4a8
 80183dc:	08024a94 	.word	0x08024a94
 80183e0:	2002d4b5 	.word	0x2002d4b5
 80183e4:	2002d46c 	.word	0x2002d46c
 80183e8:	2002d498 	.word	0x2002d498
 80183ec:	08024ab4 	.word	0x08024ab4
 80183f0:	08024acc 	.word	0x08024acc
        } else {
          pcb->unacked = rseg->next;
 80183f4:	697b      	ldr	r3, [r7, #20]
 80183f6:	681a      	ldr	r2, [r3, #0]
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80183fc:	6978      	ldr	r0, [r7, #20]
 80183fe:	f7fe fbbe 	bl	8016b7e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018406:	2b00      	cmp	r3, #0
 8018408:	d104      	bne.n	8018414 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018410:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018412:	e006      	b.n	8018422 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	2200      	movs	r2, #0
 8018418:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	2200      	movs	r2, #0
 801841e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018428:	2b00      	cmp	r3, #0
 801842a:	d00a      	beq.n	8018442 <tcp_process+0x30a>
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018432:	687a      	ldr	r2, [r7, #4]
 8018434:	6910      	ldr	r0, [r2, #16]
 8018436:	2200      	movs	r2, #0
 8018438:	6879      	ldr	r1, [r7, #4]
 801843a:	4798      	blx	r3
 801843c:	4603      	mov	r3, r0
 801843e:	77bb      	strb	r3, [r7, #30]
 8018440:	e001      	b.n	8018446 <tcp_process+0x30e>
 8018442:	2300      	movs	r3, #0
 8018444:	77bb      	strb	r3, [r7, #30]
        if (err == ERR_ABRT) {
 8018446:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801844a:	f113 0f0d 	cmn.w	r3, #13
 801844e:	d102      	bne.n	8018456 <tcp_process+0x31e>
          return ERR_ABRT;
 8018450:	f06f 030c 	mvn.w	r3, #12
 8018454:	e250      	b.n	80188f8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	8b5b      	ldrh	r3, [r3, #26]
 801845a:	f043 0302 	orr.w	r3, r3, #2
 801845e:	b29a      	uxth	r2, r3
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8018464:	e23a      	b.n	80188dc <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8018466:	4b98      	ldr	r3, [pc, #608]	@ (80186c8 <tcp_process+0x590>)
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	f003 0310 	and.w	r3, r3, #16
 801846e:	2b00      	cmp	r3, #0
 8018470:	f000 8234 	beq.w	80188dc <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018474:	4b95      	ldr	r3, [pc, #596]	@ (80186cc <tcp_process+0x594>)
 8018476:	6819      	ldr	r1, [r3, #0]
 8018478:	4b95      	ldr	r3, [pc, #596]	@ (80186d0 <tcp_process+0x598>)
 801847a:	881b      	ldrh	r3, [r3, #0]
 801847c:	461a      	mov	r2, r3
 801847e:	4b95      	ldr	r3, [pc, #596]	@ (80186d4 <tcp_process+0x59c>)
 8018480:	681b      	ldr	r3, [r3, #0]
 8018482:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8018484:	4b94      	ldr	r3, [pc, #592]	@ (80186d8 <tcp_process+0x5a0>)
 8018486:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018488:	885b      	ldrh	r3, [r3, #2]
 801848a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801848c:	4a92      	ldr	r2, [pc, #584]	@ (80186d8 <tcp_process+0x5a0>)
 801848e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8018490:	8812      	ldrh	r2, [r2, #0]
 8018492:	b292      	uxth	r2, r2
 8018494:	9202      	str	r2, [sp, #8]
 8018496:	9301      	str	r3, [sp, #4]
 8018498:	4b90      	ldr	r3, [pc, #576]	@ (80186dc <tcp_process+0x5a4>)
 801849a:	9300      	str	r3, [sp, #0]
 801849c:	4b90      	ldr	r3, [pc, #576]	@ (80186e0 <tcp_process+0x5a8>)
 801849e:	4602      	mov	r2, r0
 80184a0:	6878      	ldr	r0, [r7, #4]
 80184a2:	f003 f993 	bl	801b7cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80184a6:	687b      	ldr	r3, [r7, #4]
 80184a8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80184ac:	2b05      	cmp	r3, #5
 80184ae:	f200 8215 	bhi.w	80188dc <tcp_process+0x7a4>
          pcb->rtime = 0;
 80184b2:	687b      	ldr	r3, [r7, #4]
 80184b4:	2200      	movs	r2, #0
 80184b6:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80184b8:	6878      	ldr	r0, [r7, #4]
 80184ba:	f002 ff55 	bl	801b368 <tcp_rexmit_rto>
      break;
 80184be:	e20d      	b.n	80188dc <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80184c0:	4b81      	ldr	r3, [pc, #516]	@ (80186c8 <tcp_process+0x590>)
 80184c2:	781b      	ldrb	r3, [r3, #0]
 80184c4:	f003 0310 	and.w	r3, r3, #16
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	f000 80a1 	beq.w	8018610 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80184ce:	4b7f      	ldr	r3, [pc, #508]	@ (80186cc <tcp_process+0x594>)
 80184d0:	681a      	ldr	r2, [r3, #0]
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80184d6:	1ad3      	subs	r3, r2, r3
 80184d8:	3b01      	subs	r3, #1
 80184da:	2b00      	cmp	r3, #0
 80184dc:	db7e      	blt.n	80185dc <tcp_process+0x4a4>
 80184de:	4b7b      	ldr	r3, [pc, #492]	@ (80186cc <tcp_process+0x594>)
 80184e0:	681a      	ldr	r2, [r3, #0]
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80184e6:	1ad3      	subs	r3, r2, r3
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	dc77      	bgt.n	80185dc <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	2204      	movs	r2, #4
 80184f0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d102      	bne.n	8018500 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80184fa:	23fa      	movs	r3, #250	@ 0xfa
 80184fc:	77bb      	strb	r3, [r7, #30]
 80184fe:	e01d      	b.n	801853c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018504:	699b      	ldr	r3, [r3, #24]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d106      	bne.n	8018518 <tcp_process+0x3e0>
 801850a:	4b76      	ldr	r3, [pc, #472]	@ (80186e4 <tcp_process+0x5ac>)
 801850c:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8018510:	4975      	ldr	r1, [pc, #468]	@ (80186e8 <tcp_process+0x5b0>)
 8018512:	4876      	ldr	r0, [pc, #472]	@ (80186ec <tcp_process+0x5b4>)
 8018514:	f008 fcde 	bl	8020ed4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801851c:	699b      	ldr	r3, [r3, #24]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d00a      	beq.n	8018538 <tcp_process+0x400>
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8018526:	699b      	ldr	r3, [r3, #24]
 8018528:	687a      	ldr	r2, [r7, #4]
 801852a:	6910      	ldr	r0, [r2, #16]
 801852c:	2200      	movs	r2, #0
 801852e:	6879      	ldr	r1, [r7, #4]
 8018530:	4798      	blx	r3
 8018532:	4603      	mov	r3, r0
 8018534:	77bb      	strb	r3, [r7, #30]
 8018536:	e001      	b.n	801853c <tcp_process+0x404>
 8018538:	23f0      	movs	r3, #240	@ 0xf0
 801853a:	77bb      	strb	r3, [r7, #30]
          }
          if (err != ERR_OK) {
 801853c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d00a      	beq.n	801855a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8018544:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8018548:	f113 0f0d 	cmn.w	r3, #13
 801854c:	d002      	beq.n	8018554 <tcp_process+0x41c>
              tcp_abort(pcb);
 801854e:	6878      	ldr	r0, [r7, #4]
 8018550:	f7fd fc32 	bl	8015db8 <tcp_abort>
            }
            return ERR_ABRT;
 8018554:	f06f 030c 	mvn.w	r3, #12
 8018558:	e1ce      	b.n	80188f8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801855a:	6878      	ldr	r0, [r7, #4]
 801855c:	f000 fae0 	bl	8018b20 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8018560:	4b63      	ldr	r3, [pc, #396]	@ (80186f0 <tcp_process+0x5b8>)
 8018562:	881b      	ldrh	r3, [r3, #0]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d005      	beq.n	8018574 <tcp_process+0x43c>
            recv_acked--;
 8018568:	4b61      	ldr	r3, [pc, #388]	@ (80186f0 <tcp_process+0x5b8>)
 801856a:	881b      	ldrh	r3, [r3, #0]
 801856c:	3b01      	subs	r3, #1
 801856e:	b29a      	uxth	r2, r3
 8018570:	4b5f      	ldr	r3, [pc, #380]	@ (80186f0 <tcp_process+0x5b8>)
 8018572:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018578:	009a      	lsls	r2, r3, #2
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801857e:	005b      	lsls	r3, r3, #1
 8018580:	f241 111c 	movw	r1, #4380	@ 0x111c
 8018584:	428b      	cmp	r3, r1
 8018586:	bf38      	it	cc
 8018588:	460b      	movcc	r3, r1
 801858a:	429a      	cmp	r2, r3
 801858c:	d204      	bcs.n	8018598 <tcp_process+0x460>
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	b29b      	uxth	r3, r3
 8018596:	e00d      	b.n	80185b4 <tcp_process+0x47c>
 8018598:	687b      	ldr	r3, [r7, #4]
 801859a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801859c:	005b      	lsls	r3, r3, #1
 801859e:	f241 121c 	movw	r2, #4380	@ 0x111c
 80185a2:	4293      	cmp	r3, r2
 80185a4:	d904      	bls.n	80185b0 <tcp_process+0x478>
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80185aa:	005b      	lsls	r3, r3, #1
 80185ac:	b29b      	uxth	r3, r3
 80185ae:	e001      	b.n	80185b4 <tcp_process+0x47c>
 80185b0:	f241 131c 	movw	r3, #4380	@ 0x111c
 80185b4:	687a      	ldr	r2, [r7, #4]
 80185b6:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80185ba:	4b4e      	ldr	r3, [pc, #312]	@ (80186f4 <tcp_process+0x5bc>)
 80185bc:	781b      	ldrb	r3, [r3, #0]
 80185be:	f003 0320 	and.w	r3, r3, #32
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d037      	beq.n	8018636 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	8b5b      	ldrh	r3, [r3, #26]
 80185ca:	f043 0302 	orr.w	r3, r3, #2
 80185ce:	b29a      	uxth	r2, r3
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80185d4:	687b      	ldr	r3, [r7, #4]
 80185d6:	2207      	movs	r2, #7
 80185d8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80185da:	e02c      	b.n	8018636 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80185dc:	4b3b      	ldr	r3, [pc, #236]	@ (80186cc <tcp_process+0x594>)
 80185de:	6819      	ldr	r1, [r3, #0]
 80185e0:	4b3b      	ldr	r3, [pc, #236]	@ (80186d0 <tcp_process+0x598>)
 80185e2:	881b      	ldrh	r3, [r3, #0]
 80185e4:	461a      	mov	r2, r3
 80185e6:	4b3b      	ldr	r3, [pc, #236]	@ (80186d4 <tcp_process+0x59c>)
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80185ec:	4b3a      	ldr	r3, [pc, #232]	@ (80186d8 <tcp_process+0x5a0>)
 80185ee:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80185f0:	885b      	ldrh	r3, [r3, #2]
 80185f2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80185f4:	4a38      	ldr	r2, [pc, #224]	@ (80186d8 <tcp_process+0x5a0>)
 80185f6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80185f8:	8812      	ldrh	r2, [r2, #0]
 80185fa:	b292      	uxth	r2, r2
 80185fc:	9202      	str	r2, [sp, #8]
 80185fe:	9301      	str	r3, [sp, #4]
 8018600:	4b36      	ldr	r3, [pc, #216]	@ (80186dc <tcp_process+0x5a4>)
 8018602:	9300      	str	r3, [sp, #0]
 8018604:	4b36      	ldr	r3, [pc, #216]	@ (80186e0 <tcp_process+0x5a8>)
 8018606:	4602      	mov	r2, r0
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f003 f8df 	bl	801b7cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801860e:	e167      	b.n	80188e0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8018610:	4b2d      	ldr	r3, [pc, #180]	@ (80186c8 <tcp_process+0x590>)
 8018612:	781b      	ldrb	r3, [r3, #0]
 8018614:	f003 0302 	and.w	r3, r3, #2
 8018618:	2b00      	cmp	r3, #0
 801861a:	f000 8161 	beq.w	80188e0 <tcp_process+0x7a8>
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018622:	1e5a      	subs	r2, r3, #1
 8018624:	4b2b      	ldr	r3, [pc, #172]	@ (80186d4 <tcp_process+0x59c>)
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	429a      	cmp	r2, r3
 801862a:	f040 8159 	bne.w	80188e0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	f002 febc 	bl	801b3ac <tcp_rexmit>
      break;
 8018634:	e154      	b.n	80188e0 <tcp_process+0x7a8>
 8018636:	e153      	b.n	80188e0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8018638:	6878      	ldr	r0, [r7, #4]
 801863a:	f000 fa71 	bl	8018b20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801863e:	4b2d      	ldr	r3, [pc, #180]	@ (80186f4 <tcp_process+0x5bc>)
 8018640:	781b      	ldrb	r3, [r3, #0]
 8018642:	f003 0320 	and.w	r3, r3, #32
 8018646:	2b00      	cmp	r3, #0
 8018648:	f000 814c 	beq.w	80188e4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	8b5b      	ldrh	r3, [r3, #26]
 8018650:	f043 0302 	orr.w	r3, r3, #2
 8018654:	b29a      	uxth	r2, r3
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	2207      	movs	r2, #7
 801865e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8018660:	e140      	b.n	80188e4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8018662:	6878      	ldr	r0, [r7, #4]
 8018664:	f000 fa5c 	bl	8018b20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8018668:	4b22      	ldr	r3, [pc, #136]	@ (80186f4 <tcp_process+0x5bc>)
 801866a:	781b      	ldrb	r3, [r3, #0]
 801866c:	f003 0320 	and.w	r3, r3, #32
 8018670:	2b00      	cmp	r3, #0
 8018672:	d071      	beq.n	8018758 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018674:	4b14      	ldr	r3, [pc, #80]	@ (80186c8 <tcp_process+0x590>)
 8018676:	781b      	ldrb	r3, [r3, #0]
 8018678:	f003 0310 	and.w	r3, r3, #16
 801867c:	2b00      	cmp	r3, #0
 801867e:	d060      	beq.n	8018742 <tcp_process+0x60a>
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018684:	4b11      	ldr	r3, [pc, #68]	@ (80186cc <tcp_process+0x594>)
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	429a      	cmp	r2, r3
 801868a:	d15a      	bne.n	8018742 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018690:	2b00      	cmp	r3, #0
 8018692:	d156      	bne.n	8018742 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	8b5b      	ldrh	r3, [r3, #26]
 8018698:	f043 0302 	orr.w	r3, r3, #2
 801869c:	b29a      	uxth	r2, r3
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80186a2:	6878      	ldr	r0, [r7, #4]
 80186a4:	f7fe fd50 	bl	8017148 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80186a8:	4b13      	ldr	r3, [pc, #76]	@ (80186f8 <tcp_process+0x5c0>)
 80186aa:	681b      	ldr	r3, [r3, #0]
 80186ac:	687a      	ldr	r2, [r7, #4]
 80186ae:	429a      	cmp	r2, r3
 80186b0:	d105      	bne.n	80186be <tcp_process+0x586>
 80186b2:	4b11      	ldr	r3, [pc, #68]	@ (80186f8 <tcp_process+0x5c0>)
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	68db      	ldr	r3, [r3, #12]
 80186b8:	4a0f      	ldr	r2, [pc, #60]	@ (80186f8 <tcp_process+0x5c0>)
 80186ba:	6013      	str	r3, [r2, #0]
 80186bc:	e02e      	b.n	801871c <tcp_process+0x5e4>
 80186be:	4b0e      	ldr	r3, [pc, #56]	@ (80186f8 <tcp_process+0x5c0>)
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	613b      	str	r3, [r7, #16]
 80186c4:	e027      	b.n	8018716 <tcp_process+0x5de>
 80186c6:	bf00      	nop
 80186c8:	2002d4b4 	.word	0x2002d4b4
 80186cc:	2002d4ac 	.word	0x2002d4ac
 80186d0:	2002d4b2 	.word	0x2002d4b2
 80186d4:	2002d4a8 	.word	0x2002d4a8
 80186d8:	2002d498 	.word	0x2002d498
 80186dc:	2002710c 	.word	0x2002710c
 80186e0:	20027110 	.word	0x20027110
 80186e4:	08024840 	.word	0x08024840
 80186e8:	08024ae0 	.word	0x08024ae0
 80186ec:	0802488c 	.word	0x0802488c
 80186f0:	2002d4b0 	.word	0x2002d4b0
 80186f4:	2002d4b5 	.word	0x2002d4b5
 80186f8:	2002d478 	.word	0x2002d478
 80186fc:	693b      	ldr	r3, [r7, #16]
 80186fe:	68db      	ldr	r3, [r3, #12]
 8018700:	687a      	ldr	r2, [r7, #4]
 8018702:	429a      	cmp	r2, r3
 8018704:	d104      	bne.n	8018710 <tcp_process+0x5d8>
 8018706:	687b      	ldr	r3, [r7, #4]
 8018708:	68da      	ldr	r2, [r3, #12]
 801870a:	693b      	ldr	r3, [r7, #16]
 801870c:	60da      	str	r2, [r3, #12]
 801870e:	e005      	b.n	801871c <tcp_process+0x5e4>
 8018710:	693b      	ldr	r3, [r7, #16]
 8018712:	68db      	ldr	r3, [r3, #12]
 8018714:	613b      	str	r3, [r7, #16]
 8018716:	693b      	ldr	r3, [r7, #16]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d1ef      	bne.n	80186fc <tcp_process+0x5c4>
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	2200      	movs	r2, #0
 8018720:	60da      	str	r2, [r3, #12]
 8018722:	4b77      	ldr	r3, [pc, #476]	@ (8018900 <tcp_process+0x7c8>)
 8018724:	2201      	movs	r2, #1
 8018726:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8018728:	687b      	ldr	r3, [r7, #4]
 801872a:	220a      	movs	r2, #10
 801872c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801872e:	4b75      	ldr	r3, [pc, #468]	@ (8018904 <tcp_process+0x7cc>)
 8018730:	681a      	ldr	r2, [r3, #0]
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	60da      	str	r2, [r3, #12]
 8018736:	4a73      	ldr	r2, [pc, #460]	@ (8018904 <tcp_process+0x7cc>)
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	6013      	str	r3, [r2, #0]
 801873c:	f003 fa08 	bl	801bb50 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8018740:	e0d2      	b.n	80188e8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	8b5b      	ldrh	r3, [r3, #26]
 8018746:	f043 0302 	orr.w	r3, r3, #2
 801874a:	b29a      	uxth	r2, r3
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	2208      	movs	r2, #8
 8018754:	751a      	strb	r2, [r3, #20]
      break;
 8018756:	e0c7      	b.n	80188e8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018758:	4b6b      	ldr	r3, [pc, #428]	@ (8018908 <tcp_process+0x7d0>)
 801875a:	781b      	ldrb	r3, [r3, #0]
 801875c:	f003 0310 	and.w	r3, r3, #16
 8018760:	2b00      	cmp	r3, #0
 8018762:	f000 80c1 	beq.w	80188e8 <tcp_process+0x7b0>
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801876a:	4b68      	ldr	r3, [pc, #416]	@ (801890c <tcp_process+0x7d4>)
 801876c:	681b      	ldr	r3, [r3, #0]
 801876e:	429a      	cmp	r2, r3
 8018770:	f040 80ba 	bne.w	80188e8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8018778:	2b00      	cmp	r3, #0
 801877a:	f040 80b5 	bne.w	80188e8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	2206      	movs	r2, #6
 8018782:	751a      	strb	r2, [r3, #20]
      break;
 8018784:	e0b0      	b.n	80188e8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8018786:	6878      	ldr	r0, [r7, #4]
 8018788:	f000 f9ca 	bl	8018b20 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801878c:	4b60      	ldr	r3, [pc, #384]	@ (8018910 <tcp_process+0x7d8>)
 801878e:	781b      	ldrb	r3, [r3, #0]
 8018790:	f003 0320 	and.w	r3, r3, #32
 8018794:	2b00      	cmp	r3, #0
 8018796:	f000 80a9 	beq.w	80188ec <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	8b5b      	ldrh	r3, [r3, #26]
 801879e:	f043 0302 	orr.w	r3, r3, #2
 80187a2:	b29a      	uxth	r2, r3
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80187a8:	6878      	ldr	r0, [r7, #4]
 80187aa:	f7fe fccd 	bl	8017148 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80187ae:	4b59      	ldr	r3, [pc, #356]	@ (8018914 <tcp_process+0x7dc>)
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	687a      	ldr	r2, [r7, #4]
 80187b4:	429a      	cmp	r2, r3
 80187b6:	d105      	bne.n	80187c4 <tcp_process+0x68c>
 80187b8:	4b56      	ldr	r3, [pc, #344]	@ (8018914 <tcp_process+0x7dc>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	68db      	ldr	r3, [r3, #12]
 80187be:	4a55      	ldr	r2, [pc, #340]	@ (8018914 <tcp_process+0x7dc>)
 80187c0:	6013      	str	r3, [r2, #0]
 80187c2:	e013      	b.n	80187ec <tcp_process+0x6b4>
 80187c4:	4b53      	ldr	r3, [pc, #332]	@ (8018914 <tcp_process+0x7dc>)
 80187c6:	681b      	ldr	r3, [r3, #0]
 80187c8:	60fb      	str	r3, [r7, #12]
 80187ca:	e00c      	b.n	80187e6 <tcp_process+0x6ae>
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	68db      	ldr	r3, [r3, #12]
 80187d0:	687a      	ldr	r2, [r7, #4]
 80187d2:	429a      	cmp	r2, r3
 80187d4:	d104      	bne.n	80187e0 <tcp_process+0x6a8>
 80187d6:	687b      	ldr	r3, [r7, #4]
 80187d8:	68da      	ldr	r2, [r3, #12]
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	60da      	str	r2, [r3, #12]
 80187de:	e005      	b.n	80187ec <tcp_process+0x6b4>
 80187e0:	68fb      	ldr	r3, [r7, #12]
 80187e2:	68db      	ldr	r3, [r3, #12]
 80187e4:	60fb      	str	r3, [r7, #12]
 80187e6:	68fb      	ldr	r3, [r7, #12]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d1ef      	bne.n	80187cc <tcp_process+0x694>
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	2200      	movs	r2, #0
 80187f0:	60da      	str	r2, [r3, #12]
 80187f2:	4b43      	ldr	r3, [pc, #268]	@ (8018900 <tcp_process+0x7c8>)
 80187f4:	2201      	movs	r2, #1
 80187f6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	220a      	movs	r2, #10
 80187fc:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80187fe:	4b41      	ldr	r3, [pc, #260]	@ (8018904 <tcp_process+0x7cc>)
 8018800:	681a      	ldr	r2, [r3, #0]
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	60da      	str	r2, [r3, #12]
 8018806:	4a3f      	ldr	r2, [pc, #252]	@ (8018904 <tcp_process+0x7cc>)
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6013      	str	r3, [r2, #0]
 801880c:	f003 f9a0 	bl	801bb50 <tcp_timer_needed>
      }
      break;
 8018810:	e06c      	b.n	80188ec <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f000 f984 	bl	8018b20 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8018818:	4b3b      	ldr	r3, [pc, #236]	@ (8018908 <tcp_process+0x7d0>)
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	f003 0310 	and.w	r3, r3, #16
 8018820:	2b00      	cmp	r3, #0
 8018822:	d065      	beq.n	80188f0 <tcp_process+0x7b8>
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018828:	4b38      	ldr	r3, [pc, #224]	@ (801890c <tcp_process+0x7d4>)
 801882a:	681b      	ldr	r3, [r3, #0]
 801882c:	429a      	cmp	r2, r3
 801882e:	d15f      	bne.n	80188f0 <tcp_process+0x7b8>
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018834:	2b00      	cmp	r3, #0
 8018836:	d15b      	bne.n	80188f0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f7fe fc85 	bl	8017148 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801883e:	4b35      	ldr	r3, [pc, #212]	@ (8018914 <tcp_process+0x7dc>)
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	687a      	ldr	r2, [r7, #4]
 8018844:	429a      	cmp	r2, r3
 8018846:	d105      	bne.n	8018854 <tcp_process+0x71c>
 8018848:	4b32      	ldr	r3, [pc, #200]	@ (8018914 <tcp_process+0x7dc>)
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	68db      	ldr	r3, [r3, #12]
 801884e:	4a31      	ldr	r2, [pc, #196]	@ (8018914 <tcp_process+0x7dc>)
 8018850:	6013      	str	r3, [r2, #0]
 8018852:	e013      	b.n	801887c <tcp_process+0x744>
 8018854:	4b2f      	ldr	r3, [pc, #188]	@ (8018914 <tcp_process+0x7dc>)
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	61bb      	str	r3, [r7, #24]
 801885a:	e00c      	b.n	8018876 <tcp_process+0x73e>
 801885c:	69bb      	ldr	r3, [r7, #24]
 801885e:	68db      	ldr	r3, [r3, #12]
 8018860:	687a      	ldr	r2, [r7, #4]
 8018862:	429a      	cmp	r2, r3
 8018864:	d104      	bne.n	8018870 <tcp_process+0x738>
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	68da      	ldr	r2, [r3, #12]
 801886a:	69bb      	ldr	r3, [r7, #24]
 801886c:	60da      	str	r2, [r3, #12]
 801886e:	e005      	b.n	801887c <tcp_process+0x744>
 8018870:	69bb      	ldr	r3, [r7, #24]
 8018872:	68db      	ldr	r3, [r3, #12]
 8018874:	61bb      	str	r3, [r7, #24]
 8018876:	69bb      	ldr	r3, [r7, #24]
 8018878:	2b00      	cmp	r3, #0
 801887a:	d1ef      	bne.n	801885c <tcp_process+0x724>
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	2200      	movs	r2, #0
 8018880:	60da      	str	r2, [r3, #12]
 8018882:	4b1f      	ldr	r3, [pc, #124]	@ (8018900 <tcp_process+0x7c8>)
 8018884:	2201      	movs	r2, #1
 8018886:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	220a      	movs	r2, #10
 801888c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801888e:	4b1d      	ldr	r3, [pc, #116]	@ (8018904 <tcp_process+0x7cc>)
 8018890:	681a      	ldr	r2, [r3, #0]
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	60da      	str	r2, [r3, #12]
 8018896:	4a1b      	ldr	r2, [pc, #108]	@ (8018904 <tcp_process+0x7cc>)
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	6013      	str	r3, [r2, #0]
 801889c:	f003 f958 	bl	801bb50 <tcp_timer_needed>
      }
      break;
 80188a0:	e026      	b.n	80188f0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80188a2:	6878      	ldr	r0, [r7, #4]
 80188a4:	f000 f93c 	bl	8018b20 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80188a8:	4b17      	ldr	r3, [pc, #92]	@ (8018908 <tcp_process+0x7d0>)
 80188aa:	781b      	ldrb	r3, [r3, #0]
 80188ac:	f003 0310 	and.w	r3, r3, #16
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d01f      	beq.n	80188f4 <tcp_process+0x7bc>
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80188b8:	4b14      	ldr	r3, [pc, #80]	@ (801890c <tcp_process+0x7d4>)
 80188ba:	681b      	ldr	r3, [r3, #0]
 80188bc:	429a      	cmp	r2, r3
 80188be:	d119      	bne.n	80188f4 <tcp_process+0x7bc>
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d115      	bne.n	80188f4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80188c8:	4b11      	ldr	r3, [pc, #68]	@ (8018910 <tcp_process+0x7d8>)
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	f043 0310 	orr.w	r3, r3, #16
 80188d0:	b2da      	uxtb	r2, r3
 80188d2:	4b0f      	ldr	r3, [pc, #60]	@ (8018910 <tcp_process+0x7d8>)
 80188d4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80188d6:	e00d      	b.n	80188f4 <tcp_process+0x7bc>
    default:
      break;
 80188d8:	bf00      	nop
 80188da:	e00c      	b.n	80188f6 <tcp_process+0x7be>
      break;
 80188dc:	bf00      	nop
 80188de:	e00a      	b.n	80188f6 <tcp_process+0x7be>
      break;
 80188e0:	bf00      	nop
 80188e2:	e008      	b.n	80188f6 <tcp_process+0x7be>
      break;
 80188e4:	bf00      	nop
 80188e6:	e006      	b.n	80188f6 <tcp_process+0x7be>
      break;
 80188e8:	bf00      	nop
 80188ea:	e004      	b.n	80188f6 <tcp_process+0x7be>
      break;
 80188ec:	bf00      	nop
 80188ee:	e002      	b.n	80188f6 <tcp_process+0x7be>
      break;
 80188f0:	bf00      	nop
 80188f2:	e000      	b.n	80188f6 <tcp_process+0x7be>
      break;
 80188f4:	bf00      	nop
  }
  return ERR_OK;
 80188f6:	2300      	movs	r3, #0
}
 80188f8:	4618      	mov	r0, r3
 80188fa:	3724      	adds	r7, #36	@ 0x24
 80188fc:	46bd      	mov	sp, r7
 80188fe:	bd90      	pop	{r4, r7, pc}
 8018900:	2002d480 	.word	0x2002d480
 8018904:	2002d47c 	.word	0x2002d47c
 8018908:	2002d4b4 	.word	0x2002d4b4
 801890c:	2002d4ac 	.word	0x2002d4ac
 8018910:	2002d4b5 	.word	0x2002d4b5
 8018914:	2002d478 	.word	0x2002d478

08018918 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8018918:	b590      	push	{r4, r7, lr}
 801891a:	b085      	sub	sp, #20
 801891c:	af00      	add	r7, sp, #0
 801891e:	6078      	str	r0, [r7, #4]
 8018920:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d106      	bne.n	8018936 <tcp_oos_insert_segment+0x1e>
 8018928:	4b3b      	ldr	r3, [pc, #236]	@ (8018a18 <tcp_oos_insert_segment+0x100>)
 801892a:	f240 421f 	movw	r2, #1055	@ 0x41f
 801892e:	493b      	ldr	r1, [pc, #236]	@ (8018a1c <tcp_oos_insert_segment+0x104>)
 8018930:	483b      	ldr	r0, [pc, #236]	@ (8018a20 <tcp_oos_insert_segment+0x108>)
 8018932:	f008 facf 	bl	8020ed4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	691b      	ldr	r3, [r3, #16]
 801893a:	899b      	ldrh	r3, [r3, #12]
 801893c:	b29b      	uxth	r3, r3
 801893e:	4618      	mov	r0, r3
 8018940:	f7fa fc62 	bl	8013208 <lwip_htons>
 8018944:	4603      	mov	r3, r0
 8018946:	b2db      	uxtb	r3, r3
 8018948:	f003 0301 	and.w	r3, r3, #1
 801894c:	2b00      	cmp	r3, #0
 801894e:	d028      	beq.n	80189a2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8018950:	6838      	ldr	r0, [r7, #0]
 8018952:	f7fe f8ff 	bl	8016b54 <tcp_segs_free>
    next = NULL;
 8018956:	2300      	movs	r3, #0
 8018958:	603b      	str	r3, [r7, #0]
 801895a:	e056      	b.n	8018a0a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801895c:	683b      	ldr	r3, [r7, #0]
 801895e:	691b      	ldr	r3, [r3, #16]
 8018960:	899b      	ldrh	r3, [r3, #12]
 8018962:	b29b      	uxth	r3, r3
 8018964:	4618      	mov	r0, r3
 8018966:	f7fa fc4f 	bl	8013208 <lwip_htons>
 801896a:	4603      	mov	r3, r0
 801896c:	b2db      	uxtb	r3, r3
 801896e:	f003 0301 	and.w	r3, r3, #1
 8018972:	2b00      	cmp	r3, #0
 8018974:	d00d      	beq.n	8018992 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	691b      	ldr	r3, [r3, #16]
 801897a:	899b      	ldrh	r3, [r3, #12]
 801897c:	b29c      	uxth	r4, r3
 801897e:	2001      	movs	r0, #1
 8018980:	f7fa fc42 	bl	8013208 <lwip_htons>
 8018984:	4603      	mov	r3, r0
 8018986:	461a      	mov	r2, r3
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	691b      	ldr	r3, [r3, #16]
 801898c:	4322      	orrs	r2, r4
 801898e:	b292      	uxth	r2, r2
 8018990:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8018992:	683b      	ldr	r3, [r7, #0]
 8018994:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8018996:	683b      	ldr	r3, [r7, #0]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801899c:	68f8      	ldr	r0, [r7, #12]
 801899e:	f7fe f8ee 	bl	8016b7e <tcp_seg_free>
    while (next &&
 80189a2:	683b      	ldr	r3, [r7, #0]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d00e      	beq.n	80189c6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	891b      	ldrh	r3, [r3, #8]
 80189ac:	461a      	mov	r2, r3
 80189ae:	4b1d      	ldr	r3, [pc, #116]	@ (8018a24 <tcp_oos_insert_segment+0x10c>)
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	441a      	add	r2, r3
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	691b      	ldr	r3, [r3, #16]
 80189b8:	685b      	ldr	r3, [r3, #4]
 80189ba:	6839      	ldr	r1, [r7, #0]
 80189bc:	8909      	ldrh	r1, [r1, #8]
 80189be:	440b      	add	r3, r1
 80189c0:	1ad3      	subs	r3, r2, r3
    while (next &&
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	daca      	bge.n	801895c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80189c6:	683b      	ldr	r3, [r7, #0]
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d01e      	beq.n	8018a0a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	891b      	ldrh	r3, [r3, #8]
 80189d0:	461a      	mov	r2, r3
 80189d2:	4b14      	ldr	r3, [pc, #80]	@ (8018a24 <tcp_oos_insert_segment+0x10c>)
 80189d4:	681b      	ldr	r3, [r3, #0]
 80189d6:	441a      	add	r2, r3
 80189d8:	683b      	ldr	r3, [r7, #0]
 80189da:	691b      	ldr	r3, [r3, #16]
 80189dc:	685b      	ldr	r3, [r3, #4]
 80189de:	1ad3      	subs	r3, r2, r3
    if (next &&
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	dd12      	ble.n	8018a0a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80189e4:	683b      	ldr	r3, [r7, #0]
 80189e6:	691b      	ldr	r3, [r3, #16]
 80189e8:	685b      	ldr	r3, [r3, #4]
 80189ea:	b29a      	uxth	r2, r3
 80189ec:	4b0d      	ldr	r3, [pc, #52]	@ (8018a24 <tcp_oos_insert_segment+0x10c>)
 80189ee:	681b      	ldr	r3, [r3, #0]
 80189f0:	b29b      	uxth	r3, r3
 80189f2:	1ad3      	subs	r3, r2, r3
 80189f4:	b29a      	uxth	r2, r3
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	685a      	ldr	r2, [r3, #4]
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	891b      	ldrh	r3, [r3, #8]
 8018a02:	4619      	mov	r1, r3
 8018a04:	4610      	mov	r0, r2
 8018a06:	f7fc f88d 	bl	8014b24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	683a      	ldr	r2, [r7, #0]
 8018a0e:	601a      	str	r2, [r3, #0]
}
 8018a10:	bf00      	nop
 8018a12:	3714      	adds	r7, #20
 8018a14:	46bd      	mov	sp, r7
 8018a16:	bd90      	pop	{r4, r7, pc}
 8018a18:	08024840 	.word	0x08024840
 8018a1c:	08024b00 	.word	0x08024b00
 8018a20:	0802488c 	.word	0x0802488c
 8018a24:	2002d4a8 	.word	0x2002d4a8

08018a28 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8018a28:	b5b0      	push	{r4, r5, r7, lr}
 8018a2a:	b086      	sub	sp, #24
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	60f8      	str	r0, [r7, #12]
 8018a30:	60b9      	str	r1, [r7, #8]
 8018a32:	607a      	str	r2, [r7, #4]
 8018a34:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8018a36:	e03e      	b.n	8018ab6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8018a38:	68bb      	ldr	r3, [r7, #8]
 8018a3a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8018a3c:	68bb      	ldr	r3, [r7, #8]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8018a42:	697b      	ldr	r3, [r7, #20]
 8018a44:	685b      	ldr	r3, [r3, #4]
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7fc fab2 	bl	8014fb0 <pbuf_clen>
 8018a4c:	4603      	mov	r3, r0
 8018a4e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a56:	8a7a      	ldrh	r2, [r7, #18]
 8018a58:	429a      	cmp	r2, r3
 8018a5a:	d906      	bls.n	8018a6a <tcp_free_acked_segments+0x42>
 8018a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8018b08 <tcp_free_acked_segments+0xe0>)
 8018a5e:	f240 4257 	movw	r2, #1111	@ 0x457
 8018a62:	492a      	ldr	r1, [pc, #168]	@ (8018b0c <tcp_free_acked_segments+0xe4>)
 8018a64:	482a      	ldr	r0, [pc, #168]	@ (8018b10 <tcp_free_acked_segments+0xe8>)
 8018a66:	f008 fa35 	bl	8020ed4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8018a70:	8a7b      	ldrh	r3, [r7, #18]
 8018a72:	1ad3      	subs	r3, r2, r3
 8018a74:	b29a      	uxth	r2, r3
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8018a7c:	697b      	ldr	r3, [r7, #20]
 8018a7e:	891a      	ldrh	r2, [r3, #8]
 8018a80:	4b24      	ldr	r3, [pc, #144]	@ (8018b14 <tcp_free_acked_segments+0xec>)
 8018a82:	881b      	ldrh	r3, [r3, #0]
 8018a84:	4413      	add	r3, r2
 8018a86:	b29a      	uxth	r2, r3
 8018a88:	4b22      	ldr	r3, [pc, #136]	@ (8018b14 <tcp_free_acked_segments+0xec>)
 8018a8a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8018a8c:	6978      	ldr	r0, [r7, #20]
 8018a8e:	f7fe f876 	bl	8016b7e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d00c      	beq.n	8018ab6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8018a9c:	68bb      	ldr	r3, [r7, #8]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d109      	bne.n	8018ab6 <tcp_free_acked_segments+0x8e>
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	2b00      	cmp	r3, #0
 8018aa6:	d106      	bne.n	8018ab6 <tcp_free_acked_segments+0x8e>
 8018aa8:	4b17      	ldr	r3, [pc, #92]	@ (8018b08 <tcp_free_acked_segments+0xe0>)
 8018aaa:	f240 4261 	movw	r2, #1121	@ 0x461
 8018aae:	491a      	ldr	r1, [pc, #104]	@ (8018b18 <tcp_free_acked_segments+0xf0>)
 8018ab0:	4817      	ldr	r0, [pc, #92]	@ (8018b10 <tcp_free_acked_segments+0xe8>)
 8018ab2:	f008 fa0f 	bl	8020ed4 <iprintf>
  while (seg_list != NULL &&
 8018ab6:	68bb      	ldr	r3, [r7, #8]
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	d020      	beq.n	8018afe <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8018abc:	68bb      	ldr	r3, [r7, #8]
 8018abe:	691b      	ldr	r3, [r3, #16]
 8018ac0:	685b      	ldr	r3, [r3, #4]
 8018ac2:	4618      	mov	r0, r3
 8018ac4:	f7fa fbb6 	bl	8013234 <lwip_htonl>
 8018ac8:	4604      	mov	r4, r0
 8018aca:	68bb      	ldr	r3, [r7, #8]
 8018acc:	891b      	ldrh	r3, [r3, #8]
 8018ace:	461d      	mov	r5, r3
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	691b      	ldr	r3, [r3, #16]
 8018ad4:	899b      	ldrh	r3, [r3, #12]
 8018ad6:	b29b      	uxth	r3, r3
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f7fa fb95 	bl	8013208 <lwip_htons>
 8018ade:	4603      	mov	r3, r0
 8018ae0:	b2db      	uxtb	r3, r3
 8018ae2:	f003 0303 	and.w	r3, r3, #3
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d001      	beq.n	8018aee <tcp_free_acked_segments+0xc6>
 8018aea:	2301      	movs	r3, #1
 8018aec:	e000      	b.n	8018af0 <tcp_free_acked_segments+0xc8>
 8018aee:	2300      	movs	r3, #0
 8018af0:	442b      	add	r3, r5
 8018af2:	18e2      	adds	r2, r4, r3
 8018af4:	4b09      	ldr	r3, [pc, #36]	@ (8018b1c <tcp_free_acked_segments+0xf4>)
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8018afa:	2b00      	cmp	r3, #0
 8018afc:	dd9c      	ble.n	8018a38 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8018afe:	68bb      	ldr	r3, [r7, #8]
}
 8018b00:	4618      	mov	r0, r3
 8018b02:	3718      	adds	r7, #24
 8018b04:	46bd      	mov	sp, r7
 8018b06:	bdb0      	pop	{r4, r5, r7, pc}
 8018b08:	08024840 	.word	0x08024840
 8018b0c:	08024b28 	.word	0x08024b28
 8018b10:	0802488c 	.word	0x0802488c
 8018b14:	2002d4b0 	.word	0x2002d4b0
 8018b18:	08024b50 	.word	0x08024b50
 8018b1c:	2002d4ac 	.word	0x2002d4ac

08018b20 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8018b20:	b5b0      	push	{r4, r5, r7, lr}
 8018b22:	b094      	sub	sp, #80	@ 0x50
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8018b28:	2300      	movs	r3, #0
 8018b2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	d106      	bne.n	8018b40 <tcp_receive+0x20>
 8018b32:	4b91      	ldr	r3, [pc, #580]	@ (8018d78 <tcp_receive+0x258>)
 8018b34:	f240 427b 	movw	r2, #1147	@ 0x47b
 8018b38:	4990      	ldr	r1, [pc, #576]	@ (8018d7c <tcp_receive+0x25c>)
 8018b3a:	4891      	ldr	r0, [pc, #580]	@ (8018d80 <tcp_receive+0x260>)
 8018b3c:	f008 f9ca 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	7d1b      	ldrb	r3, [r3, #20]
 8018b44:	2b03      	cmp	r3, #3
 8018b46:	d806      	bhi.n	8018b56 <tcp_receive+0x36>
 8018b48:	4b8b      	ldr	r3, [pc, #556]	@ (8018d78 <tcp_receive+0x258>)
 8018b4a:	f240 427c 	movw	r2, #1148	@ 0x47c
 8018b4e:	498d      	ldr	r1, [pc, #564]	@ (8018d84 <tcp_receive+0x264>)
 8018b50:	488b      	ldr	r0, [pc, #556]	@ (8018d80 <tcp_receive+0x260>)
 8018b52:	f008 f9bf 	bl	8020ed4 <iprintf>

  if (flags & TCP_ACK) {
 8018b56:	4b8c      	ldr	r3, [pc, #560]	@ (8018d88 <tcp_receive+0x268>)
 8018b58:	781b      	ldrb	r3, [r3, #0]
 8018b5a:	f003 0310 	and.w	r3, r3, #16
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	f000 8264 	beq.w	801902c <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018b6a:	461a      	mov	r2, r3
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b70:	4413      	add	r3, r2
 8018b72:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018b78:	4b84      	ldr	r3, [pc, #528]	@ (8018d8c <tcp_receive+0x26c>)
 8018b7a:	681b      	ldr	r3, [r3, #0]
 8018b7c:	1ad3      	subs	r3, r2, r3
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	db1b      	blt.n	8018bba <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b82:	687b      	ldr	r3, [r7, #4]
 8018b84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8018b86:	4b81      	ldr	r3, [pc, #516]	@ (8018d8c <tcp_receive+0x26c>)
 8018b88:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8018b8a:	429a      	cmp	r2, r3
 8018b8c:	d106      	bne.n	8018b9c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018b92:	4b7f      	ldr	r3, [pc, #508]	@ (8018d90 <tcp_receive+0x270>)
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	1ad3      	subs	r3, r2, r3
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	db0e      	blt.n	8018bba <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018ba0:	4b7b      	ldr	r3, [pc, #492]	@ (8018d90 <tcp_receive+0x270>)
 8018ba2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d125      	bne.n	8018bf4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8018ba8:	4b7a      	ldr	r3, [pc, #488]	@ (8018d94 <tcp_receive+0x274>)
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	89db      	ldrh	r3, [r3, #14]
 8018bae:	b29a      	uxth	r2, r3
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018bb6:	429a      	cmp	r2, r3
 8018bb8:	d91c      	bls.n	8018bf4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8018bba:	4b76      	ldr	r3, [pc, #472]	@ (8018d94 <tcp_receive+0x274>)
 8018bbc:	681b      	ldr	r3, [r3, #0]
 8018bbe:	89db      	ldrh	r3, [r3, #14]
 8018bc0:	b29a      	uxth	r2, r3
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8018bd4:	429a      	cmp	r2, r3
 8018bd6:	d205      	bcs.n	8018be4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8018be4:	4b69      	ldr	r3, [pc, #420]	@ (8018d8c <tcp_receive+0x26c>)
 8018be6:	681a      	ldr	r2, [r3, #0]
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8018bec:	4b68      	ldr	r3, [pc, #416]	@ (8018d90 <tcp_receive+0x270>)
 8018bee:	681a      	ldr	r2, [r3, #0]
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8018bf4:	4b66      	ldr	r3, [pc, #408]	@ (8018d90 <tcp_receive+0x270>)
 8018bf6:	681a      	ldr	r2, [r3, #0]
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018bfc:	1ad3      	subs	r3, r2, r3
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	dc58      	bgt.n	8018cb4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8018c02:	4b65      	ldr	r3, [pc, #404]	@ (8018d98 <tcp_receive+0x278>)
 8018c04:	881b      	ldrh	r3, [r3, #0]
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	d14b      	bne.n	8018ca2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018c0e:	687a      	ldr	r2, [r7, #4]
 8018c10:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8018c14:	4413      	add	r3, r2
 8018c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018c18:	429a      	cmp	r2, r3
 8018c1a:	d142      	bne.n	8018ca2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	db3d      	blt.n	8018ca2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018c2a:	4b59      	ldr	r3, [pc, #356]	@ (8018d90 <tcp_receive+0x270>)
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	d137      	bne.n	8018ca2 <tcp_receive+0x182>
              found_dupack = 1;
 8018c32:	2301      	movs	r3, #1
 8018c34:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018c3c:	2bff      	cmp	r3, #255	@ 0xff
 8018c3e:	d007      	beq.n	8018c50 <tcp_receive+0x130>
                ++pcb->dupacks;
 8018c40:	687b      	ldr	r3, [r7, #4]
 8018c42:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018c46:	3301      	adds	r3, #1
 8018c48:	b2da      	uxtb	r2, r3
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018c56:	2b03      	cmp	r3, #3
 8018c58:	d91b      	bls.n	8018c92 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c64:	4413      	add	r3, r2
 8018c66:	b29a      	uxth	r2, r3
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018c6e:	429a      	cmp	r2, r3
 8018c70:	d30a      	bcc.n	8018c88 <tcp_receive+0x168>
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018c7c:	4413      	add	r3, r2
 8018c7e:	b29a      	uxth	r2, r3
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018c86:	e004      	b.n	8018c92 <tcp_receive+0x172>
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018c8e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8018c98:	2b02      	cmp	r3, #2
 8018c9a:	d902      	bls.n	8018ca2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8018c9c:	6878      	ldr	r0, [r7, #4]
 8018c9e:	f002 fbf1 	bl	801b484 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8018ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	f040 8161 	bne.w	8018f6c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	2200      	movs	r2, #0
 8018cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8018cb2:	e15b      	b.n	8018f6c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018cb4:	4b36      	ldr	r3, [pc, #216]	@ (8018d90 <tcp_receive+0x270>)
 8018cb6:	681a      	ldr	r2, [r3, #0]
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018cbc:	1ad3      	subs	r3, r2, r3
 8018cbe:	3b01      	subs	r3, #1
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	f2c0 814e 	blt.w	8018f62 <tcp_receive+0x442>
 8018cc6:	4b32      	ldr	r3, [pc, #200]	@ (8018d90 <tcp_receive+0x270>)
 8018cc8:	681a      	ldr	r2, [r3, #0]
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018cce:	1ad3      	subs	r3, r2, r3
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	f300 8146 	bgt.w	8018f62 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	8b5b      	ldrh	r3, [r3, #26]
 8018cda:	f003 0304 	and.w	r3, r3, #4
 8018cde:	2b00      	cmp	r3, #0
 8018ce0:	d010      	beq.n	8018d04 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	8b5b      	ldrh	r3, [r3, #26]
 8018ce6:	f023 0304 	bic.w	r3, r3, #4
 8018cea:	b29a      	uxth	r2, r3
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2200      	movs	r2, #0
 8018d00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	2200      	movs	r2, #0
 8018d08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8018d0c:	687b      	ldr	r3, [r7, #4]
 8018d0e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018d12:	10db      	asrs	r3, r3, #3
 8018d14:	b21b      	sxth	r3, r3
 8018d16:	b29a      	uxth	r2, r3
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018d1e:	b29b      	uxth	r3, r3
 8018d20:	4413      	add	r3, r2
 8018d22:	b29b      	uxth	r3, r3
 8018d24:	b21a      	sxth	r2, r3
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8018d2c:	4b18      	ldr	r3, [pc, #96]	@ (8018d90 <tcp_receive+0x270>)
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	b29a      	uxth	r2, r3
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018d36:	b29b      	uxth	r3, r3
 8018d38:	1ad3      	subs	r3, r2, r3
 8018d3a:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	2200      	movs	r2, #0
 8018d40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8018d44:	4b12      	ldr	r3, [pc, #72]	@ (8018d90 <tcp_receive+0x270>)
 8018d46:	681a      	ldr	r2, [r3, #0]
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	7d1b      	ldrb	r3, [r3, #20]
 8018d50:	2b03      	cmp	r3, #3
 8018d52:	f240 8097 	bls.w	8018e84 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8018d56:	687b      	ldr	r3, [r7, #4]
 8018d58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d245      	bcs.n	8018df2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	8b5b      	ldrh	r3, [r3, #26]
 8018d6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d014      	beq.n	8018d9c <tcp_receive+0x27c>
 8018d72:	2301      	movs	r3, #1
 8018d74:	e013      	b.n	8018d9e <tcp_receive+0x27e>
 8018d76:	bf00      	nop
 8018d78:	08024840 	.word	0x08024840
 8018d7c:	08024b70 	.word	0x08024b70
 8018d80:	0802488c 	.word	0x0802488c
 8018d84:	08024b8c 	.word	0x08024b8c
 8018d88:	2002d4b4 	.word	0x2002d4b4
 8018d8c:	2002d4a8 	.word	0x2002d4a8
 8018d90:	2002d4ac 	.word	0x2002d4ac
 8018d94:	2002d498 	.word	0x2002d498
 8018d98:	2002d4b2 	.word	0x2002d4b2
 8018d9c:	2302      	movs	r3, #2
 8018d9e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8018da2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8018da6:	b29a      	uxth	r2, r3
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018dac:	fb12 f303 	smulbb	r3, r2, r3
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8018db4:	4293      	cmp	r3, r2
 8018db6:	bf28      	it	cs
 8018db8:	4613      	movcs	r3, r2
 8018dba:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018dc2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018dc4:	4413      	add	r3, r2
 8018dc6:	b29a      	uxth	r2, r3
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018dce:	429a      	cmp	r2, r3
 8018dd0:	d309      	bcc.n	8018de6 <tcp_receive+0x2c6>
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018dd8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8018dda:	4413      	add	r3, r2
 8018ddc:	b29a      	uxth	r2, r3
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018de4:	e04e      	b.n	8018e84 <tcp_receive+0x364>
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018dec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018df0:	e048      	b.n	8018e84 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018df8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018dfa:	4413      	add	r3, r2
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d309      	bcc.n	8018e1c <tcp_receive+0x2fc>
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018e0e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8018e10:	4413      	add	r3, r2
 8018e12:	b29a      	uxth	r2, r3
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8018e1a:	e004      	b.n	8018e26 <tcp_receive+0x306>
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018e32:	429a      	cmp	r2, r3
 8018e34:	d326      	bcc.n	8018e84 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018e42:	1ad3      	subs	r3, r2, r3
 8018e44:	b29a      	uxth	r2, r3
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018e56:	4413      	add	r3, r2
 8018e58:	b29a      	uxth	r2, r3
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8018e60:	429a      	cmp	r2, r3
 8018e62:	d30a      	bcc.n	8018e7a <tcp_receive+0x35a>
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8018e6e:	4413      	add	r3, r2
 8018e70:	b29a      	uxth	r2, r3
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8018e78:	e004      	b.n	8018e84 <tcp_receive+0x364>
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e80:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018e8c:	4a98      	ldr	r2, [pc, #608]	@ (80190f0 <tcp_receive+0x5d0>)
 8018e8e:	6878      	ldr	r0, [r7, #4]
 8018e90:	f7ff fdca 	bl	8018a28 <tcp_free_acked_segments>
 8018e94:	4602      	mov	r2, r0
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018ea2:	4a94      	ldr	r2, [pc, #592]	@ (80190f4 <tcp_receive+0x5d4>)
 8018ea4:	6878      	ldr	r0, [r7, #4]
 8018ea6:	f7ff fdbf 	bl	8018a28 <tcp_free_acked_segments>
 8018eaa:	4602      	mov	r2, r0
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d104      	bne.n	8018ec2 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018ebe:	861a      	strh	r2, [r3, #48]	@ 0x30
 8018ec0:	e002      	b.n	8018ec8 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	2200      	movs	r2, #0
 8018ec6:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	2200      	movs	r2, #0
 8018ecc:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	d103      	bne.n	8018ede <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8018ee4:	4b84      	ldr	r3, [pc, #528]	@ (80190f8 <tcp_receive+0x5d8>)
 8018ee6:	881b      	ldrh	r3, [r3, #0]
 8018ee8:	4413      	add	r3, r2
 8018eea:	b29a      	uxth	r2, r3
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	8b5b      	ldrh	r3, [r3, #26]
 8018ef6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d035      	beq.n	8018f6a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d118      	bne.n	8018f38 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f0a:	2b00      	cmp	r3, #0
 8018f0c:	d00c      	beq.n	8018f28 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8018f16:	691b      	ldr	r3, [r3, #16]
 8018f18:	685b      	ldr	r3, [r3, #4]
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	f7fa f98a 	bl	8013234 <lwip_htonl>
 8018f20:	4603      	mov	r3, r0
 8018f22:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	dc20      	bgt.n	8018f6a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	8b5b      	ldrh	r3, [r3, #26]
 8018f2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018f30:	b29a      	uxth	r2, r3
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018f36:	e018      	b.n	8018f6a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018f40:	691b      	ldr	r3, [r3, #16]
 8018f42:	685b      	ldr	r3, [r3, #4]
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7fa f975 	bl	8013234 <lwip_htonl>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	1ae3      	subs	r3, r4, r3
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	dc0b      	bgt.n	8018f6a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	8b5b      	ldrh	r3, [r3, #26]
 8018f56:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8018f5a:	b29a      	uxth	r2, r3
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018f60:	e003      	b.n	8018f6a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018f62:	6878      	ldr	r0, [r7, #4]
 8018f64:	f002 fc84 	bl	801b870 <tcp_send_empty_ack>
 8018f68:	e000      	b.n	8018f6c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018f6a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d05b      	beq.n	801902c <tcp_receive+0x50c>
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8018f78:	4b60      	ldr	r3, [pc, #384]	@ (80190fc <tcp_receive+0x5dc>)
 8018f7a:	681b      	ldr	r3, [r3, #0]
 8018f7c:	1ad3      	subs	r3, r2, r3
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	da54      	bge.n	801902c <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018f82:	4b5f      	ldr	r3, [pc, #380]	@ (8019100 <tcp_receive+0x5e0>)
 8018f84:	681b      	ldr	r3, [r3, #0]
 8018f86:	b29a      	uxth	r2, r3
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018f8c:	b29b      	uxth	r3, r3
 8018f8e:	1ad3      	subs	r3, r2, r3
 8018f90:	b29b      	uxth	r3, r3
 8018f92:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8018f96:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018fa0:	10db      	asrs	r3, r3, #3
 8018fa2:	b21b      	sxth	r3, r3
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	1ad3      	subs	r3, r2, r3
 8018fa8:	b29b      	uxth	r3, r3
 8018faa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8018fb4:	b29a      	uxth	r2, r3
 8018fb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018fba:	4413      	add	r3, r2
 8018fbc:	b29b      	uxth	r3, r3
 8018fbe:	b21a      	sxth	r2, r3
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8018fc4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	da05      	bge.n	8018fd8 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8018fcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018fd0:	425b      	negs	r3, r3
 8018fd2:	b29b      	uxth	r3, r3
 8018fd4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8018fd8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018fe2:	109b      	asrs	r3, r3, #2
 8018fe4:	b21b      	sxth	r3, r3
 8018fe6:	b29b      	uxth	r3, r3
 8018fe8:	1ad3      	subs	r3, r2, r3
 8018fea:	b29b      	uxth	r3, r3
 8018fec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8018ff6:	b29a      	uxth	r2, r3
 8018ff8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8018ffc:	4413      	add	r3, r2
 8018ffe:	b29b      	uxth	r3, r3
 8019000:	b21a      	sxth	r2, r3
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801900c:	10db      	asrs	r3, r3, #3
 801900e:	b21b      	sxth	r3, r3
 8019010:	b29a      	uxth	r2, r3
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8019018:	b29b      	uxth	r3, r3
 801901a:	4413      	add	r3, r2
 801901c:	b29b      	uxth	r3, r3
 801901e:	b21a      	sxth	r2, r3
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8019026:	687b      	ldr	r3, [r7, #4]
 8019028:	2200      	movs	r2, #0
 801902a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801902c:	4b35      	ldr	r3, [pc, #212]	@ (8019104 <tcp_receive+0x5e4>)
 801902e:	881b      	ldrh	r3, [r3, #0]
 8019030:	2b00      	cmp	r3, #0
 8019032:	f000 84df 	beq.w	80199f4 <tcp_receive+0xed4>
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	7d1b      	ldrb	r3, [r3, #20]
 801903a:	2b06      	cmp	r3, #6
 801903c:	f200 84da 	bhi.w	80199f4 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019044:	4b30      	ldr	r3, [pc, #192]	@ (8019108 <tcp_receive+0x5e8>)
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	1ad3      	subs	r3, r2, r3
 801904a:	3b01      	subs	r3, #1
 801904c:	2b00      	cmp	r3, #0
 801904e:	f2c0 808f 	blt.w	8019170 <tcp_receive+0x650>
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019056:	4b2b      	ldr	r3, [pc, #172]	@ (8019104 <tcp_receive+0x5e4>)
 8019058:	881b      	ldrh	r3, [r3, #0]
 801905a:	4619      	mov	r1, r3
 801905c:	4b2a      	ldr	r3, [pc, #168]	@ (8019108 <tcp_receive+0x5e8>)
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	440b      	add	r3, r1
 8019062:	1ad3      	subs	r3, r2, r3
 8019064:	3301      	adds	r3, #1
 8019066:	2b00      	cmp	r3, #0
 8019068:	f300 8082 	bgt.w	8019170 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801906c:	4b27      	ldr	r3, [pc, #156]	@ (801910c <tcp_receive+0x5ec>)
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8019072:	687b      	ldr	r3, [r7, #4]
 8019074:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019076:	4b24      	ldr	r3, [pc, #144]	@ (8019108 <tcp_receive+0x5e8>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	1ad3      	subs	r3, r2, r3
 801907c:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801907e:	4b23      	ldr	r3, [pc, #140]	@ (801910c <tcp_receive+0x5ec>)
 8019080:	685b      	ldr	r3, [r3, #4]
 8019082:	2b00      	cmp	r3, #0
 8019084:	d106      	bne.n	8019094 <tcp_receive+0x574>
 8019086:	4b22      	ldr	r3, [pc, #136]	@ (8019110 <tcp_receive+0x5f0>)
 8019088:	f240 5294 	movw	r2, #1428	@ 0x594
 801908c:	4921      	ldr	r1, [pc, #132]	@ (8019114 <tcp_receive+0x5f4>)
 801908e:	4822      	ldr	r0, [pc, #136]	@ (8019118 <tcp_receive+0x5f8>)
 8019090:	f007 ff20 	bl	8020ed4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8019094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019096:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801909a:	4293      	cmp	r3, r2
 801909c:	d906      	bls.n	80190ac <tcp_receive+0x58c>
 801909e:	4b1c      	ldr	r3, [pc, #112]	@ (8019110 <tcp_receive+0x5f0>)
 80190a0:	f240 5295 	movw	r2, #1429	@ 0x595
 80190a4:	491d      	ldr	r1, [pc, #116]	@ (801911c <tcp_receive+0x5fc>)
 80190a6:	481c      	ldr	r0, [pc, #112]	@ (8019118 <tcp_receive+0x5f8>)
 80190a8:	f007 ff14 	bl	8020ed4 <iprintf>
      off = (u16_t)off32;
 80190ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190ae:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80190b2:	4b16      	ldr	r3, [pc, #88]	@ (801910c <tcp_receive+0x5ec>)
 80190b4:	685b      	ldr	r3, [r3, #4]
 80190b6:	891b      	ldrh	r3, [r3, #8]
 80190b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80190bc:	429a      	cmp	r2, r3
 80190be:	d906      	bls.n	80190ce <tcp_receive+0x5ae>
 80190c0:	4b13      	ldr	r3, [pc, #76]	@ (8019110 <tcp_receive+0x5f0>)
 80190c2:	f240 5297 	movw	r2, #1431	@ 0x597
 80190c6:	4916      	ldr	r1, [pc, #88]	@ (8019120 <tcp_receive+0x600>)
 80190c8:	4813      	ldr	r0, [pc, #76]	@ (8019118 <tcp_receive+0x5f8>)
 80190ca:	f007 ff03 	bl	8020ed4 <iprintf>
      inseg.len -= off;
 80190ce:	4b0f      	ldr	r3, [pc, #60]	@ (801910c <tcp_receive+0x5ec>)
 80190d0:	891a      	ldrh	r2, [r3, #8]
 80190d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80190d6:	1ad3      	subs	r3, r2, r3
 80190d8:	b29a      	uxth	r2, r3
 80190da:	4b0c      	ldr	r3, [pc, #48]	@ (801910c <tcp_receive+0x5ec>)
 80190dc:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80190de:	4b0b      	ldr	r3, [pc, #44]	@ (801910c <tcp_receive+0x5ec>)
 80190e0:	685b      	ldr	r3, [r3, #4]
 80190e2:	891a      	ldrh	r2, [r3, #8]
 80190e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80190e8:	1ad3      	subs	r3, r2, r3
 80190ea:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80190ec:	e02a      	b.n	8019144 <tcp_receive+0x624>
 80190ee:	bf00      	nop
 80190f0:	08024ba8 	.word	0x08024ba8
 80190f4:	08024bb0 	.word	0x08024bb0
 80190f8:	2002d4b0 	.word	0x2002d4b0
 80190fc:	2002d4ac 	.word	0x2002d4ac
 8019100:	2002d46c 	.word	0x2002d46c
 8019104:	2002d4b2 	.word	0x2002d4b2
 8019108:	2002d4a8 	.word	0x2002d4a8
 801910c:	2002d484 	.word	0x2002d484
 8019110:	08024840 	.word	0x08024840
 8019114:	08024bb8 	.word	0x08024bb8
 8019118:	0802488c 	.word	0x0802488c
 801911c:	08024bc8 	.word	0x08024bc8
 8019120:	08024bd8 	.word	0x08024bd8
        off -= p->len;
 8019124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019126:	895b      	ldrh	r3, [r3, #10]
 8019128:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801912c:	1ad3      	subs	r3, r2, r3
 801912e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8019132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019134:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019136:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8019138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801913a:	2200      	movs	r2, #0
 801913c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801913e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019140:	681b      	ldr	r3, [r3, #0]
 8019142:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8019144:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8019146:	895b      	ldrh	r3, [r3, #10]
 8019148:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801914c:	429a      	cmp	r2, r3
 801914e:	d8e9      	bhi.n	8019124 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8019150:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8019154:	4619      	mov	r1, r3
 8019156:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8019158:	f7fb fdf6 	bl	8014d48 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019160:	4a90      	ldr	r2, [pc, #576]	@ (80193a4 <tcp_receive+0x884>)
 8019162:	6013      	str	r3, [r2, #0]
 8019164:	4b90      	ldr	r3, [pc, #576]	@ (80193a8 <tcp_receive+0x888>)
 8019166:	691b      	ldr	r3, [r3, #16]
 8019168:	4a8e      	ldr	r2, [pc, #568]	@ (80193a4 <tcp_receive+0x884>)
 801916a:	6812      	ldr	r2, [r2, #0]
 801916c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801916e:	e00d      	b.n	801918c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8019170:	4b8c      	ldr	r3, [pc, #560]	@ (80193a4 <tcp_receive+0x884>)
 8019172:	681a      	ldr	r2, [r3, #0]
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019178:	1ad3      	subs	r3, r2, r3
 801917a:	2b00      	cmp	r3, #0
 801917c:	da06      	bge.n	801918c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801917e:	687b      	ldr	r3, [r7, #4]
 8019180:	8b5b      	ldrh	r3, [r3, #26]
 8019182:	f043 0302 	orr.w	r3, r3, #2
 8019186:	b29a      	uxth	r2, r3
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801918c:	4b85      	ldr	r3, [pc, #532]	@ (80193a4 <tcp_receive+0x884>)
 801918e:	681a      	ldr	r2, [r3, #0]
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019194:	1ad3      	subs	r3, r2, r3
 8019196:	2b00      	cmp	r3, #0
 8019198:	f2c0 8427 	blt.w	80199ea <tcp_receive+0xeca>
 801919c:	4b81      	ldr	r3, [pc, #516]	@ (80193a4 <tcp_receive+0x884>)
 801919e:	681a      	ldr	r2, [r3, #0]
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80191a4:	6879      	ldr	r1, [r7, #4]
 80191a6:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80191a8:	440b      	add	r3, r1
 80191aa:	1ad3      	subs	r3, r2, r3
 80191ac:	3301      	adds	r3, #1
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	f300 841b 	bgt.w	80199ea <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80191b4:	687b      	ldr	r3, [r7, #4]
 80191b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80191b8:	4b7a      	ldr	r3, [pc, #488]	@ (80193a4 <tcp_receive+0x884>)
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	429a      	cmp	r2, r3
 80191be:	f040 8298 	bne.w	80196f2 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80191c2:	4b79      	ldr	r3, [pc, #484]	@ (80193a8 <tcp_receive+0x888>)
 80191c4:	891c      	ldrh	r4, [r3, #8]
 80191c6:	4b78      	ldr	r3, [pc, #480]	@ (80193a8 <tcp_receive+0x888>)
 80191c8:	691b      	ldr	r3, [r3, #16]
 80191ca:	899b      	ldrh	r3, [r3, #12]
 80191cc:	b29b      	uxth	r3, r3
 80191ce:	4618      	mov	r0, r3
 80191d0:	f7fa f81a 	bl	8013208 <lwip_htons>
 80191d4:	4603      	mov	r3, r0
 80191d6:	b2db      	uxtb	r3, r3
 80191d8:	f003 0303 	and.w	r3, r3, #3
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d001      	beq.n	80191e4 <tcp_receive+0x6c4>
 80191e0:	2301      	movs	r3, #1
 80191e2:	e000      	b.n	80191e6 <tcp_receive+0x6c6>
 80191e4:	2300      	movs	r3, #0
 80191e6:	4423      	add	r3, r4
 80191e8:	b29a      	uxth	r2, r3
 80191ea:	4b70      	ldr	r3, [pc, #448]	@ (80193ac <tcp_receive+0x88c>)
 80191ec:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80191f2:	4b6e      	ldr	r3, [pc, #440]	@ (80193ac <tcp_receive+0x88c>)
 80191f4:	881b      	ldrh	r3, [r3, #0]
 80191f6:	429a      	cmp	r2, r3
 80191f8:	d274      	bcs.n	80192e4 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80191fa:	4b6b      	ldr	r3, [pc, #428]	@ (80193a8 <tcp_receive+0x888>)
 80191fc:	691b      	ldr	r3, [r3, #16]
 80191fe:	899b      	ldrh	r3, [r3, #12]
 8019200:	b29b      	uxth	r3, r3
 8019202:	4618      	mov	r0, r3
 8019204:	f7fa f800 	bl	8013208 <lwip_htons>
 8019208:	4603      	mov	r3, r0
 801920a:	b2db      	uxtb	r3, r3
 801920c:	f003 0301 	and.w	r3, r3, #1
 8019210:	2b00      	cmp	r3, #0
 8019212:	d01e      	beq.n	8019252 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8019214:	4b64      	ldr	r3, [pc, #400]	@ (80193a8 <tcp_receive+0x888>)
 8019216:	691b      	ldr	r3, [r3, #16]
 8019218:	899b      	ldrh	r3, [r3, #12]
 801921a:	b29b      	uxth	r3, r3
 801921c:	b21b      	sxth	r3, r3
 801921e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8019222:	b21c      	sxth	r4, r3
 8019224:	4b60      	ldr	r3, [pc, #384]	@ (80193a8 <tcp_receive+0x888>)
 8019226:	691b      	ldr	r3, [r3, #16]
 8019228:	899b      	ldrh	r3, [r3, #12]
 801922a:	b29b      	uxth	r3, r3
 801922c:	4618      	mov	r0, r3
 801922e:	f7f9 ffeb 	bl	8013208 <lwip_htons>
 8019232:	4603      	mov	r3, r0
 8019234:	b2db      	uxtb	r3, r3
 8019236:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801923a:	b29b      	uxth	r3, r3
 801923c:	4618      	mov	r0, r3
 801923e:	f7f9 ffe3 	bl	8013208 <lwip_htons>
 8019242:	4603      	mov	r3, r0
 8019244:	b21b      	sxth	r3, r3
 8019246:	4323      	orrs	r3, r4
 8019248:	b21a      	sxth	r2, r3
 801924a:	4b57      	ldr	r3, [pc, #348]	@ (80193a8 <tcp_receive+0x888>)
 801924c:	691b      	ldr	r3, [r3, #16]
 801924e:	b292      	uxth	r2, r2
 8019250:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8019256:	4b54      	ldr	r3, [pc, #336]	@ (80193a8 <tcp_receive+0x888>)
 8019258:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801925a:	4b53      	ldr	r3, [pc, #332]	@ (80193a8 <tcp_receive+0x888>)
 801925c:	691b      	ldr	r3, [r3, #16]
 801925e:	899b      	ldrh	r3, [r3, #12]
 8019260:	b29b      	uxth	r3, r3
 8019262:	4618      	mov	r0, r3
 8019264:	f7f9 ffd0 	bl	8013208 <lwip_htons>
 8019268:	4603      	mov	r3, r0
 801926a:	b2db      	uxtb	r3, r3
 801926c:	f003 0302 	and.w	r3, r3, #2
 8019270:	2b00      	cmp	r3, #0
 8019272:	d005      	beq.n	8019280 <tcp_receive+0x760>
            inseg.len -= 1;
 8019274:	4b4c      	ldr	r3, [pc, #304]	@ (80193a8 <tcp_receive+0x888>)
 8019276:	891b      	ldrh	r3, [r3, #8]
 8019278:	3b01      	subs	r3, #1
 801927a:	b29a      	uxth	r2, r3
 801927c:	4b4a      	ldr	r3, [pc, #296]	@ (80193a8 <tcp_receive+0x888>)
 801927e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8019280:	4b49      	ldr	r3, [pc, #292]	@ (80193a8 <tcp_receive+0x888>)
 8019282:	685b      	ldr	r3, [r3, #4]
 8019284:	4a48      	ldr	r2, [pc, #288]	@ (80193a8 <tcp_receive+0x888>)
 8019286:	8912      	ldrh	r2, [r2, #8]
 8019288:	4611      	mov	r1, r2
 801928a:	4618      	mov	r0, r3
 801928c:	f7fb fc4a 	bl	8014b24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8019290:	4b45      	ldr	r3, [pc, #276]	@ (80193a8 <tcp_receive+0x888>)
 8019292:	891c      	ldrh	r4, [r3, #8]
 8019294:	4b44      	ldr	r3, [pc, #272]	@ (80193a8 <tcp_receive+0x888>)
 8019296:	691b      	ldr	r3, [r3, #16]
 8019298:	899b      	ldrh	r3, [r3, #12]
 801929a:	b29b      	uxth	r3, r3
 801929c:	4618      	mov	r0, r3
 801929e:	f7f9 ffb3 	bl	8013208 <lwip_htons>
 80192a2:	4603      	mov	r3, r0
 80192a4:	b2db      	uxtb	r3, r3
 80192a6:	f003 0303 	and.w	r3, r3, #3
 80192aa:	2b00      	cmp	r3, #0
 80192ac:	d001      	beq.n	80192b2 <tcp_receive+0x792>
 80192ae:	2301      	movs	r3, #1
 80192b0:	e000      	b.n	80192b4 <tcp_receive+0x794>
 80192b2:	2300      	movs	r3, #0
 80192b4:	4423      	add	r3, r4
 80192b6:	b29a      	uxth	r2, r3
 80192b8:	4b3c      	ldr	r3, [pc, #240]	@ (80193ac <tcp_receive+0x88c>)
 80192ba:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80192bc:	4b3b      	ldr	r3, [pc, #236]	@ (80193ac <tcp_receive+0x88c>)
 80192be:	881b      	ldrh	r3, [r3, #0]
 80192c0:	461a      	mov	r2, r3
 80192c2:	4b38      	ldr	r3, [pc, #224]	@ (80193a4 <tcp_receive+0x884>)
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	441a      	add	r2, r3
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192cc:	6879      	ldr	r1, [r7, #4]
 80192ce:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80192d0:	440b      	add	r3, r1
 80192d2:	429a      	cmp	r2, r3
 80192d4:	d006      	beq.n	80192e4 <tcp_receive+0x7c4>
 80192d6:	4b36      	ldr	r3, [pc, #216]	@ (80193b0 <tcp_receive+0x890>)
 80192d8:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80192dc:	4935      	ldr	r1, [pc, #212]	@ (80193b4 <tcp_receive+0x894>)
 80192de:	4836      	ldr	r0, [pc, #216]	@ (80193b8 <tcp_receive+0x898>)
 80192e0:	f007 fdf8 	bl	8020ed4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	f000 80e6 	beq.w	80194ba <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80192ee:	4b2e      	ldr	r3, [pc, #184]	@ (80193a8 <tcp_receive+0x888>)
 80192f0:	691b      	ldr	r3, [r3, #16]
 80192f2:	899b      	ldrh	r3, [r3, #12]
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	4618      	mov	r0, r3
 80192f8:	f7f9 ff86 	bl	8013208 <lwip_htons>
 80192fc:	4603      	mov	r3, r0
 80192fe:	b2db      	uxtb	r3, r3
 8019300:	f003 0301 	and.w	r3, r3, #1
 8019304:	2b00      	cmp	r3, #0
 8019306:	d010      	beq.n	801932a <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8019308:	e00a      	b.n	8019320 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801930e:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019314:	681a      	ldr	r2, [r3, #0]
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801931a:	68f8      	ldr	r0, [r7, #12]
 801931c:	f7fd fc2f 	bl	8016b7e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019324:	2b00      	cmp	r3, #0
 8019326:	d1f0      	bne.n	801930a <tcp_receive+0x7ea>
 8019328:	e0c7      	b.n	80194ba <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801932e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8019330:	e051      	b.n	80193d6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019334:	691b      	ldr	r3, [r3, #16]
 8019336:	899b      	ldrh	r3, [r3, #12]
 8019338:	b29b      	uxth	r3, r3
 801933a:	4618      	mov	r0, r3
 801933c:	f7f9 ff64 	bl	8013208 <lwip_htons>
 8019340:	4603      	mov	r3, r0
 8019342:	b2db      	uxtb	r3, r3
 8019344:	f003 0301 	and.w	r3, r3, #1
 8019348:	2b00      	cmp	r3, #0
 801934a:	d03c      	beq.n	80193c6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801934c:	4b16      	ldr	r3, [pc, #88]	@ (80193a8 <tcp_receive+0x888>)
 801934e:	691b      	ldr	r3, [r3, #16]
 8019350:	899b      	ldrh	r3, [r3, #12]
 8019352:	b29b      	uxth	r3, r3
 8019354:	4618      	mov	r0, r3
 8019356:	f7f9 ff57 	bl	8013208 <lwip_htons>
 801935a:	4603      	mov	r3, r0
 801935c:	b2db      	uxtb	r3, r3
 801935e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8019362:	2b00      	cmp	r3, #0
 8019364:	d12f      	bne.n	80193c6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8019366:	4b10      	ldr	r3, [pc, #64]	@ (80193a8 <tcp_receive+0x888>)
 8019368:	691b      	ldr	r3, [r3, #16]
 801936a:	899b      	ldrh	r3, [r3, #12]
 801936c:	b29c      	uxth	r4, r3
 801936e:	2001      	movs	r0, #1
 8019370:	f7f9 ff4a 	bl	8013208 <lwip_htons>
 8019374:	4603      	mov	r3, r0
 8019376:	461a      	mov	r2, r3
 8019378:	4b0b      	ldr	r3, [pc, #44]	@ (80193a8 <tcp_receive+0x888>)
 801937a:	691b      	ldr	r3, [r3, #16]
 801937c:	4322      	orrs	r2, r4
 801937e:	b292      	uxth	r2, r2
 8019380:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8019382:	4b09      	ldr	r3, [pc, #36]	@ (80193a8 <tcp_receive+0x888>)
 8019384:	891c      	ldrh	r4, [r3, #8]
 8019386:	4b08      	ldr	r3, [pc, #32]	@ (80193a8 <tcp_receive+0x888>)
 8019388:	691b      	ldr	r3, [r3, #16]
 801938a:	899b      	ldrh	r3, [r3, #12]
 801938c:	b29b      	uxth	r3, r3
 801938e:	4618      	mov	r0, r3
 8019390:	f7f9 ff3a 	bl	8013208 <lwip_htons>
 8019394:	4603      	mov	r3, r0
 8019396:	b2db      	uxtb	r3, r3
 8019398:	f003 0303 	and.w	r3, r3, #3
 801939c:	2b00      	cmp	r3, #0
 801939e:	d00d      	beq.n	80193bc <tcp_receive+0x89c>
 80193a0:	2301      	movs	r3, #1
 80193a2:	e00c      	b.n	80193be <tcp_receive+0x89e>
 80193a4:	2002d4a8 	.word	0x2002d4a8
 80193a8:	2002d484 	.word	0x2002d484
 80193ac:	2002d4b2 	.word	0x2002d4b2
 80193b0:	08024840 	.word	0x08024840
 80193b4:	08024be8 	.word	0x08024be8
 80193b8:	0802488c 	.word	0x0802488c
 80193bc:	2300      	movs	r3, #0
 80193be:	4423      	add	r3, r4
 80193c0:	b29a      	uxth	r2, r3
 80193c2:	4b98      	ldr	r3, [pc, #608]	@ (8019624 <tcp_receive+0xb04>)
 80193c4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80193c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193c8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80193ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80193d0:	6938      	ldr	r0, [r7, #16]
 80193d2:	f7fd fbd4 	bl	8016b7e <tcp_seg_free>
            while (next &&
 80193d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193d8:	2b00      	cmp	r3, #0
 80193da:	d00e      	beq.n	80193fa <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80193dc:	4b91      	ldr	r3, [pc, #580]	@ (8019624 <tcp_receive+0xb04>)
 80193de:	881b      	ldrh	r3, [r3, #0]
 80193e0:	461a      	mov	r2, r3
 80193e2:	4b91      	ldr	r3, [pc, #580]	@ (8019628 <tcp_receive+0xb08>)
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	441a      	add	r2, r3
 80193e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193ea:	691b      	ldr	r3, [r3, #16]
 80193ec:	685b      	ldr	r3, [r3, #4]
 80193ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80193f0:	8909      	ldrh	r1, [r1, #8]
 80193f2:	440b      	add	r3, r1
 80193f4:	1ad3      	subs	r3, r2, r3
            while (next &&
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	da9b      	bge.n	8019332 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80193fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d059      	beq.n	80194b4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8019400:	4b88      	ldr	r3, [pc, #544]	@ (8019624 <tcp_receive+0xb04>)
 8019402:	881b      	ldrh	r3, [r3, #0]
 8019404:	461a      	mov	r2, r3
 8019406:	4b88      	ldr	r3, [pc, #544]	@ (8019628 <tcp_receive+0xb08>)
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	441a      	add	r2, r3
 801940c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801940e:	691b      	ldr	r3, [r3, #16]
 8019410:	685b      	ldr	r3, [r3, #4]
 8019412:	1ad3      	subs	r3, r2, r3
            if (next &&
 8019414:	2b00      	cmp	r3, #0
 8019416:	dd4d      	ble.n	80194b4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8019418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801941a:	691b      	ldr	r3, [r3, #16]
 801941c:	685b      	ldr	r3, [r3, #4]
 801941e:	b29a      	uxth	r2, r3
 8019420:	4b81      	ldr	r3, [pc, #516]	@ (8019628 <tcp_receive+0xb08>)
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	b29b      	uxth	r3, r3
 8019426:	1ad3      	subs	r3, r2, r3
 8019428:	b29a      	uxth	r2, r3
 801942a:	4b80      	ldr	r3, [pc, #512]	@ (801962c <tcp_receive+0xb0c>)
 801942c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801942e:	4b7f      	ldr	r3, [pc, #508]	@ (801962c <tcp_receive+0xb0c>)
 8019430:	691b      	ldr	r3, [r3, #16]
 8019432:	899b      	ldrh	r3, [r3, #12]
 8019434:	b29b      	uxth	r3, r3
 8019436:	4618      	mov	r0, r3
 8019438:	f7f9 fee6 	bl	8013208 <lwip_htons>
 801943c:	4603      	mov	r3, r0
 801943e:	b2db      	uxtb	r3, r3
 8019440:	f003 0302 	and.w	r3, r3, #2
 8019444:	2b00      	cmp	r3, #0
 8019446:	d005      	beq.n	8019454 <tcp_receive+0x934>
                inseg.len -= 1;
 8019448:	4b78      	ldr	r3, [pc, #480]	@ (801962c <tcp_receive+0xb0c>)
 801944a:	891b      	ldrh	r3, [r3, #8]
 801944c:	3b01      	subs	r3, #1
 801944e:	b29a      	uxth	r2, r3
 8019450:	4b76      	ldr	r3, [pc, #472]	@ (801962c <tcp_receive+0xb0c>)
 8019452:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8019454:	4b75      	ldr	r3, [pc, #468]	@ (801962c <tcp_receive+0xb0c>)
 8019456:	685b      	ldr	r3, [r3, #4]
 8019458:	4a74      	ldr	r2, [pc, #464]	@ (801962c <tcp_receive+0xb0c>)
 801945a:	8912      	ldrh	r2, [r2, #8]
 801945c:	4611      	mov	r1, r2
 801945e:	4618      	mov	r0, r3
 8019460:	f7fb fb60 	bl	8014b24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8019464:	4b71      	ldr	r3, [pc, #452]	@ (801962c <tcp_receive+0xb0c>)
 8019466:	891c      	ldrh	r4, [r3, #8]
 8019468:	4b70      	ldr	r3, [pc, #448]	@ (801962c <tcp_receive+0xb0c>)
 801946a:	691b      	ldr	r3, [r3, #16]
 801946c:	899b      	ldrh	r3, [r3, #12]
 801946e:	b29b      	uxth	r3, r3
 8019470:	4618      	mov	r0, r3
 8019472:	f7f9 fec9 	bl	8013208 <lwip_htons>
 8019476:	4603      	mov	r3, r0
 8019478:	b2db      	uxtb	r3, r3
 801947a:	f003 0303 	and.w	r3, r3, #3
 801947e:	2b00      	cmp	r3, #0
 8019480:	d001      	beq.n	8019486 <tcp_receive+0x966>
 8019482:	2301      	movs	r3, #1
 8019484:	e000      	b.n	8019488 <tcp_receive+0x968>
 8019486:	2300      	movs	r3, #0
 8019488:	4423      	add	r3, r4
 801948a:	b29a      	uxth	r2, r3
 801948c:	4b65      	ldr	r3, [pc, #404]	@ (8019624 <tcp_receive+0xb04>)
 801948e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8019490:	4b64      	ldr	r3, [pc, #400]	@ (8019624 <tcp_receive+0xb04>)
 8019492:	881b      	ldrh	r3, [r3, #0]
 8019494:	461a      	mov	r2, r3
 8019496:	4b64      	ldr	r3, [pc, #400]	@ (8019628 <tcp_receive+0xb08>)
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	441a      	add	r2, r3
 801949c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801949e:	691b      	ldr	r3, [r3, #16]
 80194a0:	685b      	ldr	r3, [r3, #4]
 80194a2:	429a      	cmp	r2, r3
 80194a4:	d006      	beq.n	80194b4 <tcp_receive+0x994>
 80194a6:	4b62      	ldr	r3, [pc, #392]	@ (8019630 <tcp_receive+0xb10>)
 80194a8:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80194ac:	4961      	ldr	r1, [pc, #388]	@ (8019634 <tcp_receive+0xb14>)
 80194ae:	4862      	ldr	r0, [pc, #392]	@ (8019638 <tcp_receive+0xb18>)
 80194b0:	f007 fd10 	bl	8020ed4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80194b8:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80194ba:	4b5a      	ldr	r3, [pc, #360]	@ (8019624 <tcp_receive+0xb04>)
 80194bc:	881b      	ldrh	r3, [r3, #0]
 80194be:	461a      	mov	r2, r3
 80194c0:	4b59      	ldr	r3, [pc, #356]	@ (8019628 <tcp_receive+0xb08>)
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	441a      	add	r2, r3
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80194ce:	4b55      	ldr	r3, [pc, #340]	@ (8019624 <tcp_receive+0xb04>)
 80194d0:	881b      	ldrh	r3, [r3, #0]
 80194d2:	429a      	cmp	r2, r3
 80194d4:	d206      	bcs.n	80194e4 <tcp_receive+0x9c4>
 80194d6:	4b56      	ldr	r3, [pc, #344]	@ (8019630 <tcp_receive+0xb10>)
 80194d8:	f240 6207 	movw	r2, #1543	@ 0x607
 80194dc:	4957      	ldr	r1, [pc, #348]	@ (801963c <tcp_receive+0xb1c>)
 80194de:	4856      	ldr	r0, [pc, #344]	@ (8019638 <tcp_receive+0xb18>)
 80194e0:	f007 fcf8 	bl	8020ed4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80194e8:	4b4e      	ldr	r3, [pc, #312]	@ (8019624 <tcp_receive+0xb04>)
 80194ea:	881b      	ldrh	r3, [r3, #0]
 80194ec:	1ad3      	subs	r3, r2, r3
 80194ee:	b29a      	uxth	r2, r3
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80194f4:	6878      	ldr	r0, [r7, #4]
 80194f6:	f7fc fd03 	bl	8015f00 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80194fa:	4b4c      	ldr	r3, [pc, #304]	@ (801962c <tcp_receive+0xb0c>)
 80194fc:	685b      	ldr	r3, [r3, #4]
 80194fe:	891b      	ldrh	r3, [r3, #8]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d006      	beq.n	8019512 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8019504:	4b49      	ldr	r3, [pc, #292]	@ (801962c <tcp_receive+0xb0c>)
 8019506:	685b      	ldr	r3, [r3, #4]
 8019508:	4a4d      	ldr	r2, [pc, #308]	@ (8019640 <tcp_receive+0xb20>)
 801950a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801950c:	4b47      	ldr	r3, [pc, #284]	@ (801962c <tcp_receive+0xb0c>)
 801950e:	2200      	movs	r2, #0
 8019510:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8019512:	4b46      	ldr	r3, [pc, #280]	@ (801962c <tcp_receive+0xb0c>)
 8019514:	691b      	ldr	r3, [r3, #16]
 8019516:	899b      	ldrh	r3, [r3, #12]
 8019518:	b29b      	uxth	r3, r3
 801951a:	4618      	mov	r0, r3
 801951c:	f7f9 fe74 	bl	8013208 <lwip_htons>
 8019520:	4603      	mov	r3, r0
 8019522:	b2db      	uxtb	r3, r3
 8019524:	f003 0301 	and.w	r3, r3, #1
 8019528:	2b00      	cmp	r3, #0
 801952a:	f000 80b8 	beq.w	801969e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801952e:	4b45      	ldr	r3, [pc, #276]	@ (8019644 <tcp_receive+0xb24>)
 8019530:	781b      	ldrb	r3, [r3, #0]
 8019532:	f043 0320 	orr.w	r3, r3, #32
 8019536:	b2da      	uxtb	r2, r3
 8019538:	4b42      	ldr	r3, [pc, #264]	@ (8019644 <tcp_receive+0xb24>)
 801953a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801953c:	e0af      	b.n	801969e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019542:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019548:	691b      	ldr	r3, [r3, #16]
 801954a:	685b      	ldr	r3, [r3, #4]
 801954c:	4a36      	ldr	r2, [pc, #216]	@ (8019628 <tcp_receive+0xb08>)
 801954e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8019550:	68bb      	ldr	r3, [r7, #8]
 8019552:	891b      	ldrh	r3, [r3, #8]
 8019554:	461c      	mov	r4, r3
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	691b      	ldr	r3, [r3, #16]
 801955a:	899b      	ldrh	r3, [r3, #12]
 801955c:	b29b      	uxth	r3, r3
 801955e:	4618      	mov	r0, r3
 8019560:	f7f9 fe52 	bl	8013208 <lwip_htons>
 8019564:	4603      	mov	r3, r0
 8019566:	b2db      	uxtb	r3, r3
 8019568:	f003 0303 	and.w	r3, r3, #3
 801956c:	2b00      	cmp	r3, #0
 801956e:	d001      	beq.n	8019574 <tcp_receive+0xa54>
 8019570:	2301      	movs	r3, #1
 8019572:	e000      	b.n	8019576 <tcp_receive+0xa56>
 8019574:	2300      	movs	r3, #0
 8019576:	191a      	adds	r2, r3, r4
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801957c:	441a      	add	r2, r3
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019586:	461c      	mov	r4, r3
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	891b      	ldrh	r3, [r3, #8]
 801958c:	461d      	mov	r5, r3
 801958e:	68bb      	ldr	r3, [r7, #8]
 8019590:	691b      	ldr	r3, [r3, #16]
 8019592:	899b      	ldrh	r3, [r3, #12]
 8019594:	b29b      	uxth	r3, r3
 8019596:	4618      	mov	r0, r3
 8019598:	f7f9 fe36 	bl	8013208 <lwip_htons>
 801959c:	4603      	mov	r3, r0
 801959e:	b2db      	uxtb	r3, r3
 80195a0:	f003 0303 	and.w	r3, r3, #3
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d001      	beq.n	80195ac <tcp_receive+0xa8c>
 80195a8:	2301      	movs	r3, #1
 80195aa:	e000      	b.n	80195ae <tcp_receive+0xa8e>
 80195ac:	2300      	movs	r3, #0
 80195ae:	442b      	add	r3, r5
 80195b0:	429c      	cmp	r4, r3
 80195b2:	d206      	bcs.n	80195c2 <tcp_receive+0xaa2>
 80195b4:	4b1e      	ldr	r3, [pc, #120]	@ (8019630 <tcp_receive+0xb10>)
 80195b6:	f240 622b 	movw	r2, #1579	@ 0x62b
 80195ba:	4923      	ldr	r1, [pc, #140]	@ (8019648 <tcp_receive+0xb28>)
 80195bc:	481e      	ldr	r0, [pc, #120]	@ (8019638 <tcp_receive+0xb18>)
 80195be:	f007 fc89 	bl	8020ed4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80195c2:	68bb      	ldr	r3, [r7, #8]
 80195c4:	891b      	ldrh	r3, [r3, #8]
 80195c6:	461c      	mov	r4, r3
 80195c8:	68bb      	ldr	r3, [r7, #8]
 80195ca:	691b      	ldr	r3, [r3, #16]
 80195cc:	899b      	ldrh	r3, [r3, #12]
 80195ce:	b29b      	uxth	r3, r3
 80195d0:	4618      	mov	r0, r3
 80195d2:	f7f9 fe19 	bl	8013208 <lwip_htons>
 80195d6:	4603      	mov	r3, r0
 80195d8:	b2db      	uxtb	r3, r3
 80195da:	f003 0303 	and.w	r3, r3, #3
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d001      	beq.n	80195e6 <tcp_receive+0xac6>
 80195e2:	2301      	movs	r3, #1
 80195e4:	e000      	b.n	80195e8 <tcp_receive+0xac8>
 80195e6:	2300      	movs	r3, #0
 80195e8:	1919      	adds	r1, r3, r4
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80195ee:	b28b      	uxth	r3, r1
 80195f0:	1ad3      	subs	r3, r2, r3
 80195f2:	b29a      	uxth	r2, r3
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80195f8:	6878      	ldr	r0, [r7, #4]
 80195fa:	f7fc fc81 	bl	8015f00 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80195fe:	68bb      	ldr	r3, [r7, #8]
 8019600:	685b      	ldr	r3, [r3, #4]
 8019602:	891b      	ldrh	r3, [r3, #8]
 8019604:	2b00      	cmp	r3, #0
 8019606:	d028      	beq.n	801965a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8019608:	4b0d      	ldr	r3, [pc, #52]	@ (8019640 <tcp_receive+0xb20>)
 801960a:	681b      	ldr	r3, [r3, #0]
 801960c:	2b00      	cmp	r3, #0
 801960e:	d01d      	beq.n	801964c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8019610:	4b0b      	ldr	r3, [pc, #44]	@ (8019640 <tcp_receive+0xb20>)
 8019612:	681a      	ldr	r2, [r3, #0]
 8019614:	68bb      	ldr	r3, [r7, #8]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	4619      	mov	r1, r3
 801961a:	4610      	mov	r0, r2
 801961c:	f7fb fd08 	bl	8015030 <pbuf_cat>
 8019620:	e018      	b.n	8019654 <tcp_receive+0xb34>
 8019622:	bf00      	nop
 8019624:	2002d4b2 	.word	0x2002d4b2
 8019628:	2002d4a8 	.word	0x2002d4a8
 801962c:	2002d484 	.word	0x2002d484
 8019630:	08024840 	.word	0x08024840
 8019634:	08024c20 	.word	0x08024c20
 8019638:	0802488c 	.word	0x0802488c
 801963c:	08024c5c 	.word	0x08024c5c
 8019640:	2002d4b8 	.word	0x2002d4b8
 8019644:	2002d4b5 	.word	0x2002d4b5
 8019648:	08024c7c 	.word	0x08024c7c
            } else {
              recv_data = cseg->p;
 801964c:	68bb      	ldr	r3, [r7, #8]
 801964e:	685b      	ldr	r3, [r3, #4]
 8019650:	4a70      	ldr	r2, [pc, #448]	@ (8019814 <tcp_receive+0xcf4>)
 8019652:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	2200      	movs	r2, #0
 8019658:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801965a:	68bb      	ldr	r3, [r7, #8]
 801965c:	691b      	ldr	r3, [r3, #16]
 801965e:	899b      	ldrh	r3, [r3, #12]
 8019660:	b29b      	uxth	r3, r3
 8019662:	4618      	mov	r0, r3
 8019664:	f7f9 fdd0 	bl	8013208 <lwip_htons>
 8019668:	4603      	mov	r3, r0
 801966a:	b2db      	uxtb	r3, r3
 801966c:	f003 0301 	and.w	r3, r3, #1
 8019670:	2b00      	cmp	r3, #0
 8019672:	d00d      	beq.n	8019690 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8019674:	4b68      	ldr	r3, [pc, #416]	@ (8019818 <tcp_receive+0xcf8>)
 8019676:	781b      	ldrb	r3, [r3, #0]
 8019678:	f043 0320 	orr.w	r3, r3, #32
 801967c:	b2da      	uxtb	r2, r3
 801967e:	4b66      	ldr	r3, [pc, #408]	@ (8019818 <tcp_receive+0xcf8>)
 8019680:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	7d1b      	ldrb	r3, [r3, #20]
 8019686:	2b04      	cmp	r3, #4
 8019688:	d102      	bne.n	8019690 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801968a:	687b      	ldr	r3, [r7, #4]
 801968c:	2207      	movs	r2, #7
 801968e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8019690:	68bb      	ldr	r3, [r7, #8]
 8019692:	681a      	ldr	r2, [r3, #0]
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8019698:	68b8      	ldr	r0, [r7, #8]
 801969a:	f7fd fa70 	bl	8016b7e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d008      	beq.n	80196b8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80196aa:	691b      	ldr	r3, [r3, #16]
 80196ac:	685a      	ldr	r2, [r3, #4]
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80196b2:	429a      	cmp	r2, r3
 80196b4:	f43f af43 	beq.w	801953e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	8b5b      	ldrh	r3, [r3, #26]
 80196bc:	f003 0301 	and.w	r3, r3, #1
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d00e      	beq.n	80196e2 <tcp_receive+0xbc2>
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	8b5b      	ldrh	r3, [r3, #26]
 80196c8:	f023 0301 	bic.w	r3, r3, #1
 80196cc:	b29a      	uxth	r2, r3
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	835a      	strh	r2, [r3, #26]
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	8b5b      	ldrh	r3, [r3, #26]
 80196d6:	f043 0302 	orr.w	r3, r3, #2
 80196da:	b29a      	uxth	r2, r3
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80196e0:	e187      	b.n	80199f2 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	8b5b      	ldrh	r3, [r3, #26]
 80196e6:	f043 0301 	orr.w	r3, r3, #1
 80196ea:	b29a      	uxth	r2, r3
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80196f0:	e17f      	b.n	80199f2 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d106      	bne.n	8019708 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80196fa:	4848      	ldr	r0, [pc, #288]	@ (801981c <tcp_receive+0xcfc>)
 80196fc:	f7fd fa58 	bl	8016bb0 <tcp_seg_copy>
 8019700:	4602      	mov	r2, r0
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	675a      	str	r2, [r3, #116]	@ 0x74
 8019706:	e16c      	b.n	80199e2 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8019708:	2300      	movs	r3, #0
 801970a:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019710:	63bb      	str	r3, [r7, #56]	@ 0x38
 8019712:	e156      	b.n	80199c2 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8019714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019716:	691b      	ldr	r3, [r3, #16]
 8019718:	685a      	ldr	r2, [r3, #4]
 801971a:	4b41      	ldr	r3, [pc, #260]	@ (8019820 <tcp_receive+0xd00>)
 801971c:	681b      	ldr	r3, [r3, #0]
 801971e:	429a      	cmp	r2, r3
 8019720:	d11d      	bne.n	801975e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8019722:	4b3e      	ldr	r3, [pc, #248]	@ (801981c <tcp_receive+0xcfc>)
 8019724:	891a      	ldrh	r2, [r3, #8]
 8019726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019728:	891b      	ldrh	r3, [r3, #8]
 801972a:	429a      	cmp	r2, r3
 801972c:	f240 814e 	bls.w	80199cc <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019730:	483a      	ldr	r0, [pc, #232]	@ (801981c <tcp_receive+0xcfc>)
 8019732:	f7fd fa3d 	bl	8016bb0 <tcp_seg_copy>
 8019736:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	2b00      	cmp	r3, #0
 801973c:	f000 8148 	beq.w	80199d0 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8019740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019742:	2b00      	cmp	r3, #0
 8019744:	d003      	beq.n	801974e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8019746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019748:	697a      	ldr	r2, [r7, #20]
 801974a:	601a      	str	r2, [r3, #0]
 801974c:	e002      	b.n	8019754 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	697a      	ldr	r2, [r7, #20]
 8019752:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8019754:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8019756:	6978      	ldr	r0, [r7, #20]
 8019758:	f7ff f8de 	bl	8018918 <tcp_oos_insert_segment>
                }
                break;
 801975c:	e138      	b.n	80199d0 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801975e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019760:	2b00      	cmp	r3, #0
 8019762:	d117      	bne.n	8019794 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8019764:	4b2e      	ldr	r3, [pc, #184]	@ (8019820 <tcp_receive+0xd00>)
 8019766:	681a      	ldr	r2, [r3, #0]
 8019768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801976a:	691b      	ldr	r3, [r3, #16]
 801976c:	685b      	ldr	r3, [r3, #4]
 801976e:	1ad3      	subs	r3, r2, r3
 8019770:	2b00      	cmp	r3, #0
 8019772:	da57      	bge.n	8019824 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8019774:	4829      	ldr	r0, [pc, #164]	@ (801981c <tcp_receive+0xcfc>)
 8019776:	f7fd fa1b 	bl	8016bb0 <tcp_seg_copy>
 801977a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801977c:	69bb      	ldr	r3, [r7, #24]
 801977e:	2b00      	cmp	r3, #0
 8019780:	f000 8128 	beq.w	80199d4 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	69ba      	ldr	r2, [r7, #24]
 8019788:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801978a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801978c:	69b8      	ldr	r0, [r7, #24]
 801978e:	f7ff f8c3 	bl	8018918 <tcp_oos_insert_segment>
                  }
                  break;
 8019792:	e11f      	b.n	80199d4 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8019794:	4b22      	ldr	r3, [pc, #136]	@ (8019820 <tcp_receive+0xd00>)
 8019796:	681a      	ldr	r2, [r3, #0]
 8019798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801979a:	691b      	ldr	r3, [r3, #16]
 801979c:	685b      	ldr	r3, [r3, #4]
 801979e:	1ad3      	subs	r3, r2, r3
 80197a0:	3b01      	subs	r3, #1
 80197a2:	2b00      	cmp	r3, #0
 80197a4:	db3e      	blt.n	8019824 <tcp_receive+0xd04>
 80197a6:	4b1e      	ldr	r3, [pc, #120]	@ (8019820 <tcp_receive+0xd00>)
 80197a8:	681a      	ldr	r2, [r3, #0]
 80197aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80197ac:	691b      	ldr	r3, [r3, #16]
 80197ae:	685b      	ldr	r3, [r3, #4]
 80197b0:	1ad3      	subs	r3, r2, r3
 80197b2:	3301      	adds	r3, #1
 80197b4:	2b00      	cmp	r3, #0
 80197b6:	dc35      	bgt.n	8019824 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80197b8:	4818      	ldr	r0, [pc, #96]	@ (801981c <tcp_receive+0xcfc>)
 80197ba:	f7fd f9f9 	bl	8016bb0 <tcp_seg_copy>
 80197be:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80197c0:	69fb      	ldr	r3, [r7, #28]
 80197c2:	2b00      	cmp	r3, #0
 80197c4:	f000 8108 	beq.w	80199d8 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80197c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197ca:	691b      	ldr	r3, [r3, #16]
 80197cc:	685b      	ldr	r3, [r3, #4]
 80197ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80197d0:	8912      	ldrh	r2, [r2, #8]
 80197d2:	441a      	add	r2, r3
 80197d4:	4b12      	ldr	r3, [pc, #72]	@ (8019820 <tcp_receive+0xd00>)
 80197d6:	681b      	ldr	r3, [r3, #0]
 80197d8:	1ad3      	subs	r3, r2, r3
 80197da:	2b00      	cmp	r3, #0
 80197dc:	dd12      	ble.n	8019804 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80197de:	4b10      	ldr	r3, [pc, #64]	@ (8019820 <tcp_receive+0xd00>)
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	b29a      	uxth	r2, r3
 80197e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197e6:	691b      	ldr	r3, [r3, #16]
 80197e8:	685b      	ldr	r3, [r3, #4]
 80197ea:	b29b      	uxth	r3, r3
 80197ec:	1ad3      	subs	r3, r2, r3
 80197ee:	b29a      	uxth	r2, r3
 80197f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197f2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80197f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197f6:	685a      	ldr	r2, [r3, #4]
 80197f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80197fa:	891b      	ldrh	r3, [r3, #8]
 80197fc:	4619      	mov	r1, r3
 80197fe:	4610      	mov	r0, r2
 8019800:	f7fb f990 	bl	8014b24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8019804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019806:	69fa      	ldr	r2, [r7, #28]
 8019808:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801980a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801980c:	69f8      	ldr	r0, [r7, #28]
 801980e:	f7ff f883 	bl	8018918 <tcp_oos_insert_segment>
                  }
                  break;
 8019812:	e0e1      	b.n	80199d8 <tcp_receive+0xeb8>
 8019814:	2002d4b8 	.word	0x2002d4b8
 8019818:	2002d4b5 	.word	0x2002d4b5
 801981c:	2002d484 	.word	0x2002d484
 8019820:	2002d4a8 	.word	0x2002d4a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8019824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019826:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8019828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	2b00      	cmp	r3, #0
 801982e:	f040 80c5 	bne.w	80199bc <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8019832:	4b7f      	ldr	r3, [pc, #508]	@ (8019a30 <tcp_receive+0xf10>)
 8019834:	681a      	ldr	r2, [r3, #0]
 8019836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019838:	691b      	ldr	r3, [r3, #16]
 801983a:	685b      	ldr	r3, [r3, #4]
 801983c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801983e:	2b00      	cmp	r3, #0
 8019840:	f340 80bc 	ble.w	80199bc <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8019844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019846:	691b      	ldr	r3, [r3, #16]
 8019848:	899b      	ldrh	r3, [r3, #12]
 801984a:	b29b      	uxth	r3, r3
 801984c:	4618      	mov	r0, r3
 801984e:	f7f9 fcdb 	bl	8013208 <lwip_htons>
 8019852:	4603      	mov	r3, r0
 8019854:	b2db      	uxtb	r3, r3
 8019856:	f003 0301 	and.w	r3, r3, #1
 801985a:	2b00      	cmp	r3, #0
 801985c:	f040 80be 	bne.w	80199dc <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8019860:	4874      	ldr	r0, [pc, #464]	@ (8019a34 <tcp_receive+0xf14>)
 8019862:	f7fd f9a5 	bl	8016bb0 <tcp_seg_copy>
 8019866:	4602      	mov	r2, r0
 8019868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801986a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801986c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801986e:	681b      	ldr	r3, [r3, #0]
 8019870:	2b00      	cmp	r3, #0
 8019872:	f000 80b5 	beq.w	80199e0 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8019876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019878:	691b      	ldr	r3, [r3, #16]
 801987a:	685b      	ldr	r3, [r3, #4]
 801987c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801987e:	8912      	ldrh	r2, [r2, #8]
 8019880:	441a      	add	r2, r3
 8019882:	4b6b      	ldr	r3, [pc, #428]	@ (8019a30 <tcp_receive+0xf10>)
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	1ad3      	subs	r3, r2, r3
 8019888:	2b00      	cmp	r3, #0
 801988a:	dd12      	ble.n	80198b2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801988c:	4b68      	ldr	r3, [pc, #416]	@ (8019a30 <tcp_receive+0xf10>)
 801988e:	681b      	ldr	r3, [r3, #0]
 8019890:	b29a      	uxth	r2, r3
 8019892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019894:	691b      	ldr	r3, [r3, #16]
 8019896:	685b      	ldr	r3, [r3, #4]
 8019898:	b29b      	uxth	r3, r3
 801989a:	1ad3      	subs	r3, r2, r3
 801989c:	b29a      	uxth	r2, r3
 801989e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198a0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80198a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198a4:	685a      	ldr	r2, [r3, #4]
 80198a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198a8:	891b      	ldrh	r3, [r3, #8]
 80198aa:	4619      	mov	r1, r3
 80198ac:	4610      	mov	r0, r2
 80198ae:	f7fb f939 	bl	8014b24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80198b2:	4b61      	ldr	r3, [pc, #388]	@ (8019a38 <tcp_receive+0xf18>)
 80198b4:	881b      	ldrh	r3, [r3, #0]
 80198b6:	461a      	mov	r2, r3
 80198b8:	4b5d      	ldr	r3, [pc, #372]	@ (8019a30 <tcp_receive+0xf10>)
 80198ba:	681b      	ldr	r3, [r3, #0]
 80198bc:	441a      	add	r2, r3
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80198c2:	6879      	ldr	r1, [r7, #4]
 80198c4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80198c6:	440b      	add	r3, r1
 80198c8:	1ad3      	subs	r3, r2, r3
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	f340 8088 	ble.w	80199e0 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80198d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	691b      	ldr	r3, [r3, #16]
 80198d6:	899b      	ldrh	r3, [r3, #12]
 80198d8:	b29b      	uxth	r3, r3
 80198da:	4618      	mov	r0, r3
 80198dc:	f7f9 fc94 	bl	8013208 <lwip_htons>
 80198e0:	4603      	mov	r3, r0
 80198e2:	b2db      	uxtb	r3, r3
 80198e4:	f003 0301 	and.w	r3, r3, #1
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	d021      	beq.n	8019930 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80198ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80198ee:	681b      	ldr	r3, [r3, #0]
 80198f0:	691b      	ldr	r3, [r3, #16]
 80198f2:	899b      	ldrh	r3, [r3, #12]
 80198f4:	b29b      	uxth	r3, r3
 80198f6:	b21b      	sxth	r3, r3
 80198f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80198fc:	b21c      	sxth	r4, r3
 80198fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	691b      	ldr	r3, [r3, #16]
 8019904:	899b      	ldrh	r3, [r3, #12]
 8019906:	b29b      	uxth	r3, r3
 8019908:	4618      	mov	r0, r3
 801990a:	f7f9 fc7d 	bl	8013208 <lwip_htons>
 801990e:	4603      	mov	r3, r0
 8019910:	b2db      	uxtb	r3, r3
 8019912:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8019916:	b29b      	uxth	r3, r3
 8019918:	4618      	mov	r0, r3
 801991a:	f7f9 fc75 	bl	8013208 <lwip_htons>
 801991e:	4603      	mov	r3, r0
 8019920:	b21b      	sxth	r3, r3
 8019922:	4323      	orrs	r3, r4
 8019924:	b21a      	sxth	r2, r3
 8019926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	691b      	ldr	r3, [r3, #16]
 801992c:	b292      	uxth	r2, r2
 801992e:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019934:	b29a      	uxth	r2, r3
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801993a:	4413      	add	r3, r2
 801993c:	b299      	uxth	r1, r3
 801993e:	4b3c      	ldr	r3, [pc, #240]	@ (8019a30 <tcp_receive+0xf10>)
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	b29a      	uxth	r2, r3
 8019944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	1a8a      	subs	r2, r1, r2
 801994a:	b292      	uxth	r2, r2
 801994c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801994e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	685a      	ldr	r2, [r3, #4]
 8019954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	891b      	ldrh	r3, [r3, #8]
 801995a:	4619      	mov	r1, r3
 801995c:	4610      	mov	r0, r2
 801995e:	f7fb f8e1 	bl	8014b24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8019962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	891c      	ldrh	r4, [r3, #8]
 8019968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	691b      	ldr	r3, [r3, #16]
 801996e:	899b      	ldrh	r3, [r3, #12]
 8019970:	b29b      	uxth	r3, r3
 8019972:	4618      	mov	r0, r3
 8019974:	f7f9 fc48 	bl	8013208 <lwip_htons>
 8019978:	4603      	mov	r3, r0
 801997a:	b2db      	uxtb	r3, r3
 801997c:	f003 0303 	and.w	r3, r3, #3
 8019980:	2b00      	cmp	r3, #0
 8019982:	d001      	beq.n	8019988 <tcp_receive+0xe68>
 8019984:	2301      	movs	r3, #1
 8019986:	e000      	b.n	801998a <tcp_receive+0xe6a>
 8019988:	2300      	movs	r3, #0
 801998a:	4423      	add	r3, r4
 801998c:	b29a      	uxth	r2, r3
 801998e:	4b2a      	ldr	r3, [pc, #168]	@ (8019a38 <tcp_receive+0xf18>)
 8019990:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8019992:	4b29      	ldr	r3, [pc, #164]	@ (8019a38 <tcp_receive+0xf18>)
 8019994:	881b      	ldrh	r3, [r3, #0]
 8019996:	461a      	mov	r2, r3
 8019998:	4b25      	ldr	r3, [pc, #148]	@ (8019a30 <tcp_receive+0xf10>)
 801999a:	681b      	ldr	r3, [r3, #0]
 801999c:	441a      	add	r2, r3
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199a2:	6879      	ldr	r1, [r7, #4]
 80199a4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80199a6:	440b      	add	r3, r1
 80199a8:	429a      	cmp	r2, r3
 80199aa:	d019      	beq.n	80199e0 <tcp_receive+0xec0>
 80199ac:	4b23      	ldr	r3, [pc, #140]	@ (8019a3c <tcp_receive+0xf1c>)
 80199ae:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80199b2:	4923      	ldr	r1, [pc, #140]	@ (8019a40 <tcp_receive+0xf20>)
 80199b4:	4823      	ldr	r0, [pc, #140]	@ (8019a44 <tcp_receive+0xf24>)
 80199b6:	f007 fa8d 	bl	8020ed4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80199ba:	e011      	b.n	80199e0 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80199bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80199c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	f47f aea5 	bne.w	8019714 <tcp_receive+0xbf4>
 80199ca:	e00a      	b.n	80199e2 <tcp_receive+0xec2>
                break;
 80199cc:	bf00      	nop
 80199ce:	e008      	b.n	80199e2 <tcp_receive+0xec2>
                break;
 80199d0:	bf00      	nop
 80199d2:	e006      	b.n	80199e2 <tcp_receive+0xec2>
                  break;
 80199d4:	bf00      	nop
 80199d6:	e004      	b.n	80199e2 <tcp_receive+0xec2>
                  break;
 80199d8:	bf00      	nop
 80199da:	e002      	b.n	80199e2 <tcp_receive+0xec2>
                  break;
 80199dc:	bf00      	nop
 80199de:	e000      	b.n	80199e2 <tcp_receive+0xec2>
                break;
 80199e0:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80199e2:	6878      	ldr	r0, [r7, #4]
 80199e4:	f001 ff44 	bl	801b870 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80199e8:	e003      	b.n	80199f2 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	f001 ff40 	bl	801b870 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80199f0:	e01a      	b.n	8019a28 <tcp_receive+0xf08>
 80199f2:	e019      	b.n	8019a28 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80199f4:	4b0e      	ldr	r3, [pc, #56]	@ (8019a30 <tcp_receive+0xf10>)
 80199f6:	681a      	ldr	r2, [r3, #0]
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199fc:	1ad3      	subs	r3, r2, r3
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	db0a      	blt.n	8019a18 <tcp_receive+0xef8>
 8019a02:	4b0b      	ldr	r3, [pc, #44]	@ (8019a30 <tcp_receive+0xf10>)
 8019a04:	681a      	ldr	r2, [r3, #0]
 8019a06:	687b      	ldr	r3, [r7, #4]
 8019a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a0a:	6879      	ldr	r1, [r7, #4]
 8019a0c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8019a0e:	440b      	add	r3, r1
 8019a10:	1ad3      	subs	r3, r2, r3
 8019a12:	3301      	adds	r3, #1
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	dd07      	ble.n	8019a28 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	8b5b      	ldrh	r3, [r3, #26]
 8019a1c:	f043 0302 	orr.w	r3, r3, #2
 8019a20:	b29a      	uxth	r2, r3
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8019a26:	e7ff      	b.n	8019a28 <tcp_receive+0xf08>
 8019a28:	bf00      	nop
 8019a2a:	3750      	adds	r7, #80	@ 0x50
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8019a30:	2002d4a8 	.word	0x2002d4a8
 8019a34:	2002d484 	.word	0x2002d484
 8019a38:	2002d4b2 	.word	0x2002d4b2
 8019a3c:	08024840 	.word	0x08024840
 8019a40:	08024be8 	.word	0x08024be8
 8019a44:	0802488c 	.word	0x0802488c

08019a48 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8019a48:	b480      	push	{r7}
 8019a4a:	b083      	sub	sp, #12
 8019a4c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8019a4e:	4b15      	ldr	r3, [pc, #84]	@ (8019aa4 <tcp_get_next_optbyte+0x5c>)
 8019a50:	881b      	ldrh	r3, [r3, #0]
 8019a52:	1c5a      	adds	r2, r3, #1
 8019a54:	b291      	uxth	r1, r2
 8019a56:	4a13      	ldr	r2, [pc, #76]	@ (8019aa4 <tcp_get_next_optbyte+0x5c>)
 8019a58:	8011      	strh	r1, [r2, #0]
 8019a5a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8019a5c:	4b12      	ldr	r3, [pc, #72]	@ (8019aa8 <tcp_get_next_optbyte+0x60>)
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d004      	beq.n	8019a6e <tcp_get_next_optbyte+0x26>
 8019a64:	4b11      	ldr	r3, [pc, #68]	@ (8019aac <tcp_get_next_optbyte+0x64>)
 8019a66:	881b      	ldrh	r3, [r3, #0]
 8019a68:	88fa      	ldrh	r2, [r7, #6]
 8019a6a:	429a      	cmp	r2, r3
 8019a6c:	d208      	bcs.n	8019a80 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8019a6e:	4b10      	ldr	r3, [pc, #64]	@ (8019ab0 <tcp_get_next_optbyte+0x68>)
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	3314      	adds	r3, #20
 8019a74:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8019a76:	88fb      	ldrh	r3, [r7, #6]
 8019a78:	683a      	ldr	r2, [r7, #0]
 8019a7a:	4413      	add	r3, r2
 8019a7c:	781b      	ldrb	r3, [r3, #0]
 8019a7e:	e00b      	b.n	8019a98 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8019a80:	88fb      	ldrh	r3, [r7, #6]
 8019a82:	b2da      	uxtb	r2, r3
 8019a84:	4b09      	ldr	r3, [pc, #36]	@ (8019aac <tcp_get_next_optbyte+0x64>)
 8019a86:	881b      	ldrh	r3, [r3, #0]
 8019a88:	b2db      	uxtb	r3, r3
 8019a8a:	1ad3      	subs	r3, r2, r3
 8019a8c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8019a8e:	4b06      	ldr	r3, [pc, #24]	@ (8019aa8 <tcp_get_next_optbyte+0x60>)
 8019a90:	681a      	ldr	r2, [r3, #0]
 8019a92:	797b      	ldrb	r3, [r7, #5]
 8019a94:	4413      	add	r3, r2
 8019a96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019a98:	4618      	mov	r0, r3
 8019a9a:	370c      	adds	r7, #12
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa2:	4770      	bx	lr
 8019aa4:	2002d4a4 	.word	0x2002d4a4
 8019aa8:	2002d4a0 	.word	0x2002d4a0
 8019aac:	2002d49e 	.word	0x2002d49e
 8019ab0:	2002d498 	.word	0x2002d498

08019ab4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8019ab4:	b580      	push	{r7, lr}
 8019ab6:	b084      	sub	sp, #16
 8019ab8:	af00      	add	r7, sp, #0
 8019aba:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d106      	bne.n	8019ad0 <tcp_parseopt+0x1c>
 8019ac2:	4b32      	ldr	r3, [pc, #200]	@ (8019b8c <tcp_parseopt+0xd8>)
 8019ac4:	f240 727d 	movw	r2, #1917	@ 0x77d
 8019ac8:	4931      	ldr	r1, [pc, #196]	@ (8019b90 <tcp_parseopt+0xdc>)
 8019aca:	4832      	ldr	r0, [pc, #200]	@ (8019b94 <tcp_parseopt+0xe0>)
 8019acc:	f007 fa02 	bl	8020ed4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8019ad0:	4b31      	ldr	r3, [pc, #196]	@ (8019b98 <tcp_parseopt+0xe4>)
 8019ad2:	881b      	ldrh	r3, [r3, #0]
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d056      	beq.n	8019b86 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019ad8:	4b30      	ldr	r3, [pc, #192]	@ (8019b9c <tcp_parseopt+0xe8>)
 8019ada:	2200      	movs	r2, #0
 8019adc:	801a      	strh	r2, [r3, #0]
 8019ade:	e046      	b.n	8019b6e <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8019ae0:	f7ff ffb2 	bl	8019a48 <tcp_get_next_optbyte>
 8019ae4:	4603      	mov	r3, r0
 8019ae6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8019ae8:	7bfb      	ldrb	r3, [r7, #15]
 8019aea:	2b02      	cmp	r3, #2
 8019aec:	d006      	beq.n	8019afc <tcp_parseopt+0x48>
 8019aee:	2b02      	cmp	r3, #2
 8019af0:	dc2a      	bgt.n	8019b48 <tcp_parseopt+0x94>
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d042      	beq.n	8019b7c <tcp_parseopt+0xc8>
 8019af6:	2b01      	cmp	r3, #1
 8019af8:	d038      	beq.n	8019b6c <tcp_parseopt+0xb8>
 8019afa:	e025      	b.n	8019b48 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8019afc:	f7ff ffa4 	bl	8019a48 <tcp_get_next_optbyte>
 8019b00:	4603      	mov	r3, r0
 8019b02:	2b04      	cmp	r3, #4
 8019b04:	d13c      	bne.n	8019b80 <tcp_parseopt+0xcc>
 8019b06:	4b25      	ldr	r3, [pc, #148]	@ (8019b9c <tcp_parseopt+0xe8>)
 8019b08:	881b      	ldrh	r3, [r3, #0]
 8019b0a:	3301      	adds	r3, #1
 8019b0c:	4a22      	ldr	r2, [pc, #136]	@ (8019b98 <tcp_parseopt+0xe4>)
 8019b0e:	8812      	ldrh	r2, [r2, #0]
 8019b10:	4293      	cmp	r3, r2
 8019b12:	da35      	bge.n	8019b80 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8019b14:	f7ff ff98 	bl	8019a48 <tcp_get_next_optbyte>
 8019b18:	4603      	mov	r3, r0
 8019b1a:	021b      	lsls	r3, r3, #8
 8019b1c:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8019b1e:	f7ff ff93 	bl	8019a48 <tcp_get_next_optbyte>
 8019b22:	4603      	mov	r3, r0
 8019b24:	461a      	mov	r2, r3
 8019b26:	89bb      	ldrh	r3, [r7, #12]
 8019b28:	4313      	orrs	r3, r2
 8019b2a:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8019b2c:	89bb      	ldrh	r3, [r7, #12]
 8019b2e:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8019b32:	d804      	bhi.n	8019b3e <tcp_parseopt+0x8a>
 8019b34:	89bb      	ldrh	r3, [r7, #12]
 8019b36:	2b00      	cmp	r3, #0
 8019b38:	d001      	beq.n	8019b3e <tcp_parseopt+0x8a>
 8019b3a:	89ba      	ldrh	r2, [r7, #12]
 8019b3c:	e001      	b.n	8019b42 <tcp_parseopt+0x8e>
 8019b3e:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8019b46:	e012      	b.n	8019b6e <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8019b48:	f7ff ff7e 	bl	8019a48 <tcp_get_next_optbyte>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8019b50:	7afb      	ldrb	r3, [r7, #11]
 8019b52:	2b01      	cmp	r3, #1
 8019b54:	d916      	bls.n	8019b84 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8019b56:	7afb      	ldrb	r3, [r7, #11]
 8019b58:	b29a      	uxth	r2, r3
 8019b5a:	4b10      	ldr	r3, [pc, #64]	@ (8019b9c <tcp_parseopt+0xe8>)
 8019b5c:	881b      	ldrh	r3, [r3, #0]
 8019b5e:	4413      	add	r3, r2
 8019b60:	b29b      	uxth	r3, r3
 8019b62:	3b02      	subs	r3, #2
 8019b64:	b29a      	uxth	r2, r3
 8019b66:	4b0d      	ldr	r3, [pc, #52]	@ (8019b9c <tcp_parseopt+0xe8>)
 8019b68:	801a      	strh	r2, [r3, #0]
 8019b6a:	e000      	b.n	8019b6e <tcp_parseopt+0xba>
          break;
 8019b6c:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8019b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8019b9c <tcp_parseopt+0xe8>)
 8019b70:	881a      	ldrh	r2, [r3, #0]
 8019b72:	4b09      	ldr	r3, [pc, #36]	@ (8019b98 <tcp_parseopt+0xe4>)
 8019b74:	881b      	ldrh	r3, [r3, #0]
 8019b76:	429a      	cmp	r2, r3
 8019b78:	d3b2      	bcc.n	8019ae0 <tcp_parseopt+0x2c>
 8019b7a:	e004      	b.n	8019b86 <tcp_parseopt+0xd2>
          return;
 8019b7c:	bf00      	nop
 8019b7e:	e002      	b.n	8019b86 <tcp_parseopt+0xd2>
            return;
 8019b80:	bf00      	nop
 8019b82:	e000      	b.n	8019b86 <tcp_parseopt+0xd2>
            return;
 8019b84:	bf00      	nop
      }
    }
  }
}
 8019b86:	3710      	adds	r7, #16
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bd80      	pop	{r7, pc}
 8019b8c:	08024840 	.word	0x08024840
 8019b90:	08024ca4 	.word	0x08024ca4
 8019b94:	0802488c 	.word	0x0802488c
 8019b98:	2002d49c 	.word	0x2002d49c
 8019b9c:	2002d4a4 	.word	0x2002d4a4

08019ba0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8019ba0:	b480      	push	{r7}
 8019ba2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8019ba4:	4b05      	ldr	r3, [pc, #20]	@ (8019bbc <tcp_trigger_input_pcb_close+0x1c>)
 8019ba6:	781b      	ldrb	r3, [r3, #0]
 8019ba8:	f043 0310 	orr.w	r3, r3, #16
 8019bac:	b2da      	uxtb	r2, r3
 8019bae:	4b03      	ldr	r3, [pc, #12]	@ (8019bbc <tcp_trigger_input_pcb_close+0x1c>)
 8019bb0:	701a      	strb	r2, [r3, #0]
}
 8019bb2:	bf00      	nop
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bba:	4770      	bx	lr
 8019bbc:	2002d4b5 	.word	0x2002d4b5

08019bc0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8019bc0:	b580      	push	{r7, lr}
 8019bc2:	b084      	sub	sp, #16
 8019bc4:	af00      	add	r7, sp, #0
 8019bc6:	60f8      	str	r0, [r7, #12]
 8019bc8:	60b9      	str	r1, [r7, #8]
 8019bca:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d00a      	beq.n	8019be8 <tcp_route+0x28>
 8019bd2:	68fb      	ldr	r3, [r7, #12]
 8019bd4:	7a1b      	ldrb	r3, [r3, #8]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d006      	beq.n	8019be8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8019bda:	68fb      	ldr	r3, [r7, #12]
 8019bdc:	7a1b      	ldrb	r3, [r3, #8]
 8019bde:	4618      	mov	r0, r3
 8019be0:	f7fa fd66 	bl	80146b0 <netif_get_by_index>
 8019be4:	4603      	mov	r3, r0
 8019be6:	e003      	b.n	8019bf0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8019be8:	6878      	ldr	r0, [r7, #4]
 8019bea:	f004 fb07 	bl	801e1fc <ip4_route>
 8019bee:	4603      	mov	r3, r0
  }
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	3710      	adds	r7, #16
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	bd80      	pop	{r7, pc}

08019bf8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8019bf8:	b590      	push	{r4, r7, lr}
 8019bfa:	b087      	sub	sp, #28
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	60f8      	str	r0, [r7, #12]
 8019c00:	60b9      	str	r1, [r7, #8]
 8019c02:	603b      	str	r3, [r7, #0]
 8019c04:	4613      	mov	r3, r2
 8019c06:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8019c08:	68fb      	ldr	r3, [r7, #12]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d105      	bne.n	8019c1a <tcp_create_segment+0x22>
 8019c0e:	4b49      	ldr	r3, [pc, #292]	@ (8019d34 <tcp_create_segment+0x13c>)
 8019c10:	22a3      	movs	r2, #163	@ 0xa3
 8019c12:	4949      	ldr	r1, [pc, #292]	@ (8019d38 <tcp_create_segment+0x140>)
 8019c14:	4849      	ldr	r0, [pc, #292]	@ (8019d3c <tcp_create_segment+0x144>)
 8019c16:	f007 f95d 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8019c1a:	68bb      	ldr	r3, [r7, #8]
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	d105      	bne.n	8019c2c <tcp_create_segment+0x34>
 8019c20:	4b44      	ldr	r3, [pc, #272]	@ (8019d34 <tcp_create_segment+0x13c>)
 8019c22:	22a4      	movs	r2, #164	@ 0xa4
 8019c24:	4946      	ldr	r1, [pc, #280]	@ (8019d40 <tcp_create_segment+0x148>)
 8019c26:	4845      	ldr	r0, [pc, #276]	@ (8019d3c <tcp_create_segment+0x144>)
 8019c28:	f007 f954 	bl	8020ed4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019c2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019c30:	009b      	lsls	r3, r3, #2
 8019c32:	b2db      	uxtb	r3, r3
 8019c34:	f003 0304 	and.w	r3, r3, #4
 8019c38:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8019c3a:	2003      	movs	r0, #3
 8019c3c:	f7fa f8b0 	bl	8013da0 <memp_malloc>
 8019c40:	6138      	str	r0, [r7, #16]
 8019c42:	693b      	ldr	r3, [r7, #16]
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d104      	bne.n	8019c52 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8019c48:	68b8      	ldr	r0, [r7, #8]
 8019c4a:	f7fb f90b 	bl	8014e64 <pbuf_free>
    return NULL;
 8019c4e:	2300      	movs	r3, #0
 8019c50:	e06b      	b.n	8019d2a <tcp_create_segment+0x132>
  }
  seg->flags = optflags;
 8019c52:	693b      	ldr	r3, [r7, #16]
 8019c54:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019c58:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 8019c5a:	693b      	ldr	r3, [r7, #16]
 8019c5c:	2200      	movs	r2, #0
 8019c5e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8019c60:	693b      	ldr	r3, [r7, #16]
 8019c62:	68ba      	ldr	r2, [r7, #8]
 8019c64:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8019c66:	68bb      	ldr	r3, [r7, #8]
 8019c68:	891a      	ldrh	r2, [r3, #8]
 8019c6a:	7dfb      	ldrb	r3, [r7, #23]
 8019c6c:	b29b      	uxth	r3, r3
 8019c6e:	429a      	cmp	r2, r3
 8019c70:	d205      	bcs.n	8019c7e <tcp_create_segment+0x86>
 8019c72:	4b30      	ldr	r3, [pc, #192]	@ (8019d34 <tcp_create_segment+0x13c>)
 8019c74:	22b0      	movs	r2, #176	@ 0xb0
 8019c76:	4933      	ldr	r1, [pc, #204]	@ (8019d44 <tcp_create_segment+0x14c>)
 8019c78:	4830      	ldr	r0, [pc, #192]	@ (8019d3c <tcp_create_segment+0x144>)
 8019c7a:	f007 f92b 	bl	8020ed4 <iprintf>
  seg->len = p->tot_len - optlen;
 8019c7e:	68bb      	ldr	r3, [r7, #8]
 8019c80:	891a      	ldrh	r2, [r3, #8]
 8019c82:	7dfb      	ldrb	r3, [r7, #23]
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	1ad3      	subs	r3, r2, r3
 8019c88:	b29a      	uxth	r2, r3
 8019c8a:	693b      	ldr	r3, [r7, #16]
 8019c8c:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8019c8e:	693b      	ldr	r3, [r7, #16]
 8019c90:	2200      	movs	r2, #0
 8019c92:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8019c94:	2114      	movs	r1, #20
 8019c96:	68b8      	ldr	r0, [r7, #8]
 8019c98:	f7fb f846 	bl	8014d28 <pbuf_add_header>
 8019c9c:	4603      	mov	r3, r0
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d00c      	beq.n	8019cbc <tcp_create_segment+0xc4>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
 8019ca2:	4b29      	ldr	r3, [pc, #164]	@ (8019d48 <tcp_create_segment+0x150>)
 8019ca4:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	@ 0xa4
 8019ca8:	3301      	adds	r3, #1
 8019caa:	b29a      	uxth	r2, r3
 8019cac:	4b26      	ldr	r3, [pc, #152]	@ (8019d48 <tcp_create_segment+0x150>)
 8019cae:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
    tcp_seg_free(seg);
 8019cb2:	6938      	ldr	r0, [r7, #16]
 8019cb4:	f7fc ff63 	bl	8016b7e <tcp_seg_free>
    return NULL;
 8019cb8:	2300      	movs	r3, #0
 8019cba:	e036      	b.n	8019d2a <tcp_create_segment+0x132>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8019cbc:	693b      	ldr	r3, [r7, #16]
 8019cbe:	685b      	ldr	r3, [r3, #4]
 8019cc0:	685a      	ldr	r2, [r3, #4]
 8019cc2:	693b      	ldr	r3, [r7, #16]
 8019cc4:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8019cc6:	68fb      	ldr	r3, [r7, #12]
 8019cc8:	8ada      	ldrh	r2, [r3, #22]
 8019cca:	693b      	ldr	r3, [r7, #16]
 8019ccc:	691c      	ldr	r4, [r3, #16]
 8019cce:	4610      	mov	r0, r2
 8019cd0:	f7f9 fa9a 	bl	8013208 <lwip_htons>
 8019cd4:	4603      	mov	r3, r0
 8019cd6:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	8b1a      	ldrh	r2, [r3, #24]
 8019cdc:	693b      	ldr	r3, [r7, #16]
 8019cde:	691c      	ldr	r4, [r3, #16]
 8019ce0:	4610      	mov	r0, r2
 8019ce2:	f7f9 fa91 	bl	8013208 <lwip_htons>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8019cea:	693b      	ldr	r3, [r7, #16]
 8019cec:	691c      	ldr	r4, [r3, #16]
 8019cee:	6838      	ldr	r0, [r7, #0]
 8019cf0:	f7f9 faa0 	bl	8013234 <lwip_htonl>
 8019cf4:	4603      	mov	r3, r0
 8019cf6:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8019cf8:	7dfb      	ldrb	r3, [r7, #23]
 8019cfa:	089b      	lsrs	r3, r3, #2
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	3305      	adds	r3, #5
 8019d00:	b29b      	uxth	r3, r3
 8019d02:	031b      	lsls	r3, r3, #12
 8019d04:	b29a      	uxth	r2, r3
 8019d06:	79fb      	ldrb	r3, [r7, #7]
 8019d08:	b29b      	uxth	r3, r3
 8019d0a:	4313      	orrs	r3, r2
 8019d0c:	b29a      	uxth	r2, r3
 8019d0e:	693b      	ldr	r3, [r7, #16]
 8019d10:	691c      	ldr	r4, [r3, #16]
 8019d12:	4610      	mov	r0, r2
 8019d14:	f7f9 fa78 	bl	8013208 <lwip_htons>
 8019d18:	4603      	mov	r3, r0
 8019d1a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8019d1c:	693b      	ldr	r3, [r7, #16]
 8019d1e:	691b      	ldr	r3, [r3, #16]
 8019d20:	2200      	movs	r2, #0
 8019d22:	749a      	strb	r2, [r3, #18]
 8019d24:	2200      	movs	r2, #0
 8019d26:	74da      	strb	r2, [r3, #19]
  return seg;
 8019d28:	693b      	ldr	r3, [r7, #16]
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	371c      	adds	r7, #28
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bd90      	pop	{r4, r7, pc}
 8019d32:	bf00      	nop
 8019d34:	08024cc0 	.word	0x08024cc0
 8019d38:	08024cf4 	.word	0x08024cf4
 8019d3c:	08024d14 	.word	0x08024d14
 8019d40:	08024d3c 	.word	0x08024d3c
 8019d44:	08024d60 	.word	0x08024d60
 8019d48:	2002d36c 	.word	0x2002d36c

08019d4c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b086      	sub	sp, #24
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	607b      	str	r3, [r7, #4]
 8019d54:	4603      	mov	r3, r0
 8019d56:	73fb      	strb	r3, [r7, #15]
 8019d58:	460b      	mov	r3, r1
 8019d5a:	81bb      	strh	r3, [r7, #12]
 8019d5c:	4613      	mov	r3, r2
 8019d5e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8019d60:	89bb      	ldrh	r3, [r7, #12]
 8019d62:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2b00      	cmp	r3, #0
 8019d68:	d105      	bne.n	8019d76 <tcp_pbuf_prealloc+0x2a>
 8019d6a:	4b30      	ldr	r3, [pc, #192]	@ (8019e2c <tcp_pbuf_prealloc+0xe0>)
 8019d6c:	22e8      	movs	r2, #232	@ 0xe8
 8019d6e:	4930      	ldr	r1, [pc, #192]	@ (8019e30 <tcp_pbuf_prealloc+0xe4>)
 8019d70:	4830      	ldr	r0, [pc, #192]	@ (8019e34 <tcp_pbuf_prealloc+0xe8>)
 8019d72:	f007 f8af 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8019d76:	6a3b      	ldr	r3, [r7, #32]
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d105      	bne.n	8019d88 <tcp_pbuf_prealloc+0x3c>
 8019d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8019e2c <tcp_pbuf_prealloc+0xe0>)
 8019d7e:	22e9      	movs	r2, #233	@ 0xe9
 8019d80:	492d      	ldr	r1, [pc, #180]	@ (8019e38 <tcp_pbuf_prealloc+0xec>)
 8019d82:	482c      	ldr	r0, [pc, #176]	@ (8019e34 <tcp_pbuf_prealloc+0xe8>)
 8019d84:	f007 f8a6 	bl	8020ed4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8019d88:	89ba      	ldrh	r2, [r7, #12]
 8019d8a:	897b      	ldrh	r3, [r7, #10]
 8019d8c:	429a      	cmp	r2, r3
 8019d8e:	d221      	bcs.n	8019dd4 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019d90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019d94:	f003 0302 	and.w	r3, r3, #2
 8019d98:	2b00      	cmp	r3, #0
 8019d9a:	d111      	bne.n	8019dc0 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8019d9c:	6a3b      	ldr	r3, [r7, #32]
 8019d9e:	8b5b      	ldrh	r3, [r3, #26]
 8019da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	d115      	bne.n	8019dd4 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8019da8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d007      	beq.n	8019dc0 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8019db0:	6a3b      	ldr	r3, [r7, #32]
 8019db2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8019db4:	2b00      	cmp	r3, #0
 8019db6:	d103      	bne.n	8019dc0 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8019db8:	6a3b      	ldr	r3, [r7, #32]
 8019dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d009      	beq.n	8019dd4 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8019dc0:	89bb      	ldrh	r3, [r7, #12]
 8019dc2:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8019dc6:	f023 0203 	bic.w	r2, r3, #3
 8019dca:	897b      	ldrh	r3, [r7, #10]
 8019dcc:	4293      	cmp	r3, r2
 8019dce:	bf28      	it	cs
 8019dd0:	4613      	movcs	r3, r2
 8019dd2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8019dd4:	8af9      	ldrh	r1, [r7, #22]
 8019dd6:	7bfb      	ldrb	r3, [r7, #15]
 8019dd8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019ddc:	4618      	mov	r0, r3
 8019dde:	f7fa fd15 	bl	801480c <pbuf_alloc>
 8019de2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019de4:	693b      	ldr	r3, [r7, #16]
 8019de6:	2b00      	cmp	r3, #0
 8019de8:	d101      	bne.n	8019dee <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8019dea:	2300      	movs	r3, #0
 8019dec:	e019      	b.n	8019e22 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8019dee:	693b      	ldr	r3, [r7, #16]
 8019df0:	681b      	ldr	r3, [r3, #0]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d006      	beq.n	8019e04 <tcp_pbuf_prealloc+0xb8>
 8019df6:	4b0d      	ldr	r3, [pc, #52]	@ (8019e2c <tcp_pbuf_prealloc+0xe0>)
 8019df8:	f240 120b 	movw	r2, #267	@ 0x10b
 8019dfc:	490f      	ldr	r1, [pc, #60]	@ (8019e3c <tcp_pbuf_prealloc+0xf0>)
 8019dfe:	480d      	ldr	r0, [pc, #52]	@ (8019e34 <tcp_pbuf_prealloc+0xe8>)
 8019e00:	f007 f868 	bl	8020ed4 <iprintf>
  *oversize = p->len - length;
 8019e04:	693b      	ldr	r3, [r7, #16]
 8019e06:	895a      	ldrh	r2, [r3, #10]
 8019e08:	89bb      	ldrh	r3, [r7, #12]
 8019e0a:	1ad3      	subs	r3, r2, r3
 8019e0c:	b29a      	uxth	r2, r3
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8019e12:	693b      	ldr	r3, [r7, #16]
 8019e14:	89ba      	ldrh	r2, [r7, #12]
 8019e16:	811a      	strh	r2, [r3, #8]
 8019e18:	693b      	ldr	r3, [r7, #16]
 8019e1a:	891a      	ldrh	r2, [r3, #8]
 8019e1c:	693b      	ldr	r3, [r7, #16]
 8019e1e:	815a      	strh	r2, [r3, #10]
  return p;
 8019e20:	693b      	ldr	r3, [r7, #16]
}
 8019e22:	4618      	mov	r0, r3
 8019e24:	3718      	adds	r7, #24
 8019e26:	46bd      	mov	sp, r7
 8019e28:	bd80      	pop	{r7, pc}
 8019e2a:	bf00      	nop
 8019e2c:	08024cc0 	.word	0x08024cc0
 8019e30:	08024d78 	.word	0x08024d78
 8019e34:	08024d14 	.word	0x08024d14
 8019e38:	08024d9c 	.word	0x08024d9c
 8019e3c:	08024dbc 	.word	0x08024dbc

08019e40 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8019e40:	b580      	push	{r7, lr}
 8019e42:	b082      	sub	sp, #8
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
 8019e48:	460b      	mov	r3, r1
 8019e4a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8019e4c:	687b      	ldr	r3, [r7, #4]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d106      	bne.n	8019e60 <tcp_write_checks+0x20>
 8019e52:	4b37      	ldr	r3, [pc, #220]	@ (8019f30 <tcp_write_checks+0xf0>)
 8019e54:	f240 1233 	movw	r2, #307	@ 0x133
 8019e58:	4936      	ldr	r1, [pc, #216]	@ (8019f34 <tcp_write_checks+0xf4>)
 8019e5a:	4837      	ldr	r0, [pc, #220]	@ (8019f38 <tcp_write_checks+0xf8>)
 8019e5c:	f007 f83a 	bl	8020ed4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	7d1b      	ldrb	r3, [r3, #20]
 8019e64:	2b04      	cmp	r3, #4
 8019e66:	d00e      	beq.n	8019e86 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8019e6c:	2b07      	cmp	r3, #7
 8019e6e:	d00a      	beq.n	8019e86 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8019e74:	2b02      	cmp	r3, #2
 8019e76:	d006      	beq.n	8019e86 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8019e7c:	2b03      	cmp	r3, #3
 8019e7e:	d002      	beq.n	8019e86 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8019e80:	f06f 030a 	mvn.w	r3, #10
 8019e84:	e050      	b.n	8019f28 <tcp_write_checks+0xe8>
  } else if (len == 0) {
 8019e86:	887b      	ldrh	r3, [r7, #2]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d101      	bne.n	8019e90 <tcp_write_checks+0x50>
    return ERR_OK;
 8019e8c:	2300      	movs	r3, #0
 8019e8e:	e04b      	b.n	8019f28 <tcp_write_checks+0xe8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8019e96:	887a      	ldrh	r2, [r7, #2]
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	d909      	bls.n	8019eb0 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	8b5b      	ldrh	r3, [r3, #26]
 8019ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019ea4:	b29a      	uxth	r2, r3
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019eaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019eae:	e03b      	b.n	8019f28 <tcp_write_checks+0xe8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019eb6:	2b08      	cmp	r3, #8
 8019eb8:	d911      	bls.n	8019ede <tcp_write_checks+0x9e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
 8019eba:	4b20      	ldr	r3, [pc, #128]	@ (8019f3c <tcp_write_checks+0xfc>)
 8019ebc:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 8019ec0:	3301      	adds	r3, #1
 8019ec2:	b29a      	uxth	r2, r3
 8019ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8019f3c <tcp_write_checks+0xfc>)
 8019ec6:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	8b5b      	ldrh	r3, [r3, #26]
 8019ece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8019ed2:	b29a      	uxth	r2, r3
 8019ed4:	687b      	ldr	r3, [r7, #4]
 8019ed6:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8019ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8019edc:	e024      	b.n	8019f28 <tcp_write_checks+0xe8>
  }
  if (pcb->snd_queuelen != 0) {
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d00f      	beq.n	8019f08 <tcp_write_checks+0xc8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d11a      	bne.n	8019f26 <tcp_write_checks+0xe6>
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ef4:	2b00      	cmp	r3, #0
 8019ef6:	d116      	bne.n	8019f26 <tcp_write_checks+0xe6>
 8019ef8:	4b0d      	ldr	r3, [pc, #52]	@ (8019f30 <tcp_write_checks+0xf0>)
 8019efa:	f240 1255 	movw	r2, #341	@ 0x155
 8019efe:	4910      	ldr	r1, [pc, #64]	@ (8019f40 <tcp_write_checks+0x100>)
 8019f00:	480d      	ldr	r0, [pc, #52]	@ (8019f38 <tcp_write_checks+0xf8>)
 8019f02:	f006 ffe7 	bl	8020ed4 <iprintf>
 8019f06:	e00e      	b.n	8019f26 <tcp_write_checks+0xe6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d103      	bne.n	8019f18 <tcp_write_checks+0xd8>
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d006      	beq.n	8019f26 <tcp_write_checks+0xe6>
 8019f18:	4b05      	ldr	r3, [pc, #20]	@ (8019f30 <tcp_write_checks+0xf0>)
 8019f1a:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8019f1e:	4909      	ldr	r1, [pc, #36]	@ (8019f44 <tcp_write_checks+0x104>)
 8019f20:	4805      	ldr	r0, [pc, #20]	@ (8019f38 <tcp_write_checks+0xf8>)
 8019f22:	f006 ffd7 	bl	8020ed4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8019f26:	2300      	movs	r3, #0
}
 8019f28:	4618      	mov	r0, r3
 8019f2a:	3708      	adds	r7, #8
 8019f2c:	46bd      	mov	sp, r7
 8019f2e:	bd80      	pop	{r7, pc}
 8019f30:	08024cc0 	.word	0x08024cc0
 8019f34:	08024dd0 	.word	0x08024dd0
 8019f38:	08024d14 	.word	0x08024d14
 8019f3c:	2002d36c 	.word	0x2002d36c
 8019f40:	08024df0 	.word	0x08024df0
 8019f44:	08024e2c 	.word	0x08024e2c

08019f48 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8019f48:	b590      	push	{r4, r7, lr}
 8019f4a:	b09d      	sub	sp, #116	@ 0x74
 8019f4c:	af04      	add	r7, sp, #16
 8019f4e:	60f8      	str	r0, [r7, #12]
 8019f50:	60b9      	str	r1, [r7, #8]
 8019f52:	4611      	mov	r1, r2
 8019f54:	461a      	mov	r2, r3
 8019f56:	460b      	mov	r3, r1
 8019f58:	80fb      	strh	r3, [r7, #6]
 8019f5a:	4613      	mov	r3, r2
 8019f5c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8019f5e:	2300      	movs	r3, #0
 8019f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8019f62:	2300      	movs	r3, #0
 8019f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8019f66:	2300      	movs	r3, #0
 8019f68:	657b      	str	r3, [r7, #84]	@ 0x54
 8019f6a:	2300      	movs	r3, #0
 8019f6c:	653b      	str	r3, [r7, #80]	@ 0x50
 8019f6e:	2300      	movs	r3, #0
 8019f70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  u16_t pos = 0; /* position in 'arg' data */
 8019f72:	2300      	movs	r3, #0
 8019f74:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019f78:	2300      	movs	r3, #0
 8019f7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8019f7e:	2300      	movs	r3, #0
 8019f80:	82fb      	strh	r3, [r7, #22]
  u16_t oversize_used = 0;
 8019f82:	2300      	movs	r3, #0
 8019f84:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 8019f88:	2300      	movs	r3, #0
 8019f8a:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019f8e:	2300      	movs	r3, #0
 8019f90:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d109      	bne.n	8019fae <tcp_write+0x66>
 8019f9a:	4b9c      	ldr	r3, [pc, #624]	@ (801a20c <tcp_write+0x2c4>)
 8019f9c:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8019fa0:	499b      	ldr	r1, [pc, #620]	@ (801a210 <tcp_write+0x2c8>)
 8019fa2:	489c      	ldr	r0, [pc, #624]	@ (801a214 <tcp_write+0x2cc>)
 8019fa4:	f006 ff96 	bl	8020ed4 <iprintf>
 8019fa8:	f06f 030f 	mvn.w	r3, #15
 8019fac:	e381      	b.n	801a6b2 <tcp_write+0x76a>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8019fb4:	085b      	lsrs	r3, r3, #1
 8019fb6:	b29a      	uxth	r2, r3
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019fbc:	4293      	cmp	r3, r2
 8019fbe:	bf28      	it	cs
 8019fc0:	4613      	movcs	r3, r2
 8019fc2:	853b      	strh	r3, [r7, #40]	@ 0x28
  mss_local = mss_local ? mss_local : pcb->mss;
 8019fc4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019fc6:	2b00      	cmp	r3, #0
 8019fc8:	d102      	bne.n	8019fd0 <tcp_write+0x88>
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8019fce:	e000      	b.n	8019fd2 <tcp_write+0x8a>
 8019fd0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8019fd2:	853b      	strh	r3, [r7, #40]	@ 0x28
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8019fd4:	68bb      	ldr	r3, [r7, #8]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d109      	bne.n	8019fee <tcp_write+0xa6>
 8019fda:	4b8c      	ldr	r3, [pc, #560]	@ (801a20c <tcp_write+0x2c4>)
 8019fdc:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8019fe0:	498d      	ldr	r1, [pc, #564]	@ (801a218 <tcp_write+0x2d0>)
 8019fe2:	488c      	ldr	r0, [pc, #560]	@ (801a214 <tcp_write+0x2cc>)
 8019fe4:	f006 ff76 	bl	8020ed4 <iprintf>
 8019fe8:	f06f 030f 	mvn.w	r3, #15
 8019fec:	e361      	b.n	801a6b2 <tcp_write+0x76a>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019fee:	88fb      	ldrh	r3, [r7, #6]
 8019ff0:	4619      	mov	r1, r3
 8019ff2:	68f8      	ldr	r0, [r7, #12]
 8019ff4:	f7ff ff24 	bl	8019e40 <tcp_write_checks>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (err != ERR_OK) {
 8019ffe:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a002:	2b00      	cmp	r3, #0
 801a004:	d002      	beq.n	801a00c <tcp_write+0xc4>
    return err;
 801a006:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801a00a:	e352      	b.n	801a6b2 <tcp_write+0x76a>
  }
  queuelen = pcb->snd_queuelen;
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a012:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a016:	2300      	movs	r3, #0
 801a018:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a020:	2b00      	cmp	r3, #0
 801a022:	f000 8127 	beq.w	801a274 <tcp_write+0x32c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a026:	68fb      	ldr	r3, [r7, #12]
 801a028:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a02a:	643b      	str	r3, [r7, #64]	@ 0x40
 801a02c:	e002      	b.n	801a034 <tcp_write+0xec>
         last_unsent = last_unsent->next);
 801a02e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	643b      	str	r3, [r7, #64]	@ 0x40
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d1f8      	bne.n	801a02e <tcp_write+0xe6>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801a03c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a03e:	7b1b      	ldrb	r3, [r3, #12]
 801a040:	009b      	lsls	r3, r3, #2
 801a042:	b29b      	uxth	r3, r3
 801a044:	f003 0304 	and.w	r3, r3, #4
 801a048:	84bb      	strh	r3, [r7, #36]	@ 0x24
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801a04a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a04c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a04e:	891b      	ldrh	r3, [r3, #8]
 801a050:	4619      	mov	r1, r3
 801a052:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a054:	440b      	add	r3, r1
 801a056:	429a      	cmp	r2, r3
 801a058:	da06      	bge.n	801a068 <tcp_write+0x120>
 801a05a:	4b6c      	ldr	r3, [pc, #432]	@ (801a20c <tcp_write+0x2c4>)
 801a05c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801a060:	496e      	ldr	r1, [pc, #440]	@ (801a21c <tcp_write+0x2d4>)
 801a062:	486c      	ldr	r0, [pc, #432]	@ (801a214 <tcp_write+0x2cc>)
 801a064:	f006 ff36 	bl	8020ed4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801a068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a06a:	891a      	ldrh	r2, [r3, #8]
 801a06c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a06e:	4413      	add	r3, r2
 801a070:	b29b      	uxth	r3, r3
 801a072:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a074:	1ad3      	subs	r3, r2, r3
 801a076:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 801a080:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a082:	895b      	ldrh	r3, [r3, #10]
 801a084:	429a      	cmp	r2, r3
 801a086:	d006      	beq.n	801a096 <tcp_write+0x14e>
 801a088:	4b60      	ldr	r3, [pc, #384]	@ (801a20c <tcp_write+0x2c4>)
 801a08a:	f240 12f3 	movw	r2, #499	@ 0x1f3
 801a08e:	4964      	ldr	r1, [pc, #400]	@ (801a220 <tcp_write+0x2d8>)
 801a090:	4860      	ldr	r0, [pc, #384]	@ (801a214 <tcp_write+0x2cc>)
 801a092:	f006 ff1f 	bl	8020ed4 <iprintf>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801a096:	68fb      	ldr	r3, [r7, #12]
 801a098:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a09c:	82fb      	strh	r3, [r7, #22]
    if (oversize > 0) {
 801a09e:	8afb      	ldrh	r3, [r7, #22]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d02e      	beq.n	801a102 <tcp_write+0x1ba>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801a0a4:	8afb      	ldrh	r3, [r7, #22]
 801a0a6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a0aa:	429a      	cmp	r2, r3
 801a0ac:	d206      	bcs.n	801a0bc <tcp_write+0x174>
 801a0ae:	4b57      	ldr	r3, [pc, #348]	@ (801a20c <tcp_write+0x2c4>)
 801a0b0:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801a0b4:	495b      	ldr	r1, [pc, #364]	@ (801a224 <tcp_write+0x2dc>)
 801a0b6:	4857      	ldr	r0, [pc, #348]	@ (801a214 <tcp_write+0x2cc>)
 801a0b8:	f006 ff0c 	bl	8020ed4 <iprintf>
      seg = last_unsent;
 801a0bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a0be:	657b      	str	r3, [r7, #84]	@ 0x54
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801a0c0:	8afb      	ldrh	r3, [r7, #22]
 801a0c2:	88fa      	ldrh	r2, [r7, #6]
 801a0c4:	4293      	cmp	r3, r2
 801a0c6:	bf28      	it	cs
 801a0c8:	4613      	movcs	r3, r2
 801a0ca:	b29b      	uxth	r3, r3
 801a0cc:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a0d0:	4293      	cmp	r3, r2
 801a0d2:	bf28      	it	cs
 801a0d4:	4613      	movcs	r3, r2
 801a0d6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      pos += oversize_used;
 801a0da:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a0de:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a0e2:	4413      	add	r3, r2
 801a0e4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
      oversize -= oversize_used;
 801a0e8:	8afa      	ldrh	r2, [r7, #22]
 801a0ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a0ee:	1ad3      	subs	r3, r2, r3
 801a0f0:	b29b      	uxth	r3, r3
 801a0f2:	82fb      	strh	r3, [r7, #22]
      space -= oversize_used;
 801a0f4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a0f8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a0fc:	1ad3      	subs	r3, r2, r3
 801a0fe:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801a102:	8afb      	ldrh	r3, [r7, #22]
 801a104:	2b00      	cmp	r3, #0
 801a106:	d00b      	beq.n	801a120 <tcp_write+0x1d8>
 801a108:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a10c:	88fb      	ldrh	r3, [r7, #6]
 801a10e:	429a      	cmp	r2, r3
 801a110:	d006      	beq.n	801a120 <tcp_write+0x1d8>
 801a112:	4b3e      	ldr	r3, [pc, #248]	@ (801a20c <tcp_write+0x2c4>)
 801a114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801a118:	4943      	ldr	r1, [pc, #268]	@ (801a228 <tcp_write+0x2e0>)
 801a11a:	483e      	ldr	r0, [pc, #248]	@ (801a214 <tcp_write+0x2cc>)
 801a11c:	f006 feda 	bl	8020ed4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801a120:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a124:	88fb      	ldrh	r3, [r7, #6]
 801a126:	429a      	cmp	r2, r3
 801a128:	f080 8172 	bcs.w	801a410 <tcp_write+0x4c8>
 801a12c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801a130:	2b00      	cmp	r3, #0
 801a132:	f000 816d 	beq.w	801a410 <tcp_write+0x4c8>
 801a136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a138:	891b      	ldrh	r3, [r3, #8]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	f000 8168 	beq.w	801a410 <tcp_write+0x4c8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801a140:	88fa      	ldrh	r2, [r7, #6]
 801a142:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a146:	1ad2      	subs	r2, r2, r3
 801a148:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 801a14c:	4293      	cmp	r3, r2
 801a14e:	bfa8      	it	ge
 801a150:	4613      	movge	r3, r2
 801a152:	847b      	strh	r3, [r7, #34]	@ 0x22
      seg = last_unsent;
 801a154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a156:	657b      	str	r3, [r7, #84]	@ 0x54

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a158:	797b      	ldrb	r3, [r7, #5]
 801a15a:	f003 0301 	and.w	r3, r3, #1
 801a15e:	2b00      	cmp	r3, #0
 801a160:	d02b      	beq.n	801a1ba <tcp_write+0x272>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801a162:	f107 0016 	add.w	r0, r7, #22
 801a166:	f8b7 205c 	ldrh.w	r2, [r7, #92]	@ 0x5c
 801a16a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 801a16c:	2301      	movs	r3, #1
 801a16e:	9302      	str	r3, [sp, #8]
 801a170:	797b      	ldrb	r3, [r7, #5]
 801a172:	9301      	str	r3, [sp, #4]
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	9300      	str	r3, [sp, #0]
 801a178:	4603      	mov	r3, r0
 801a17a:	2000      	movs	r0, #0
 801a17c:	f7ff fde6 	bl	8019d4c <tcp_pbuf_prealloc>
 801a180:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801a182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a184:	2b00      	cmp	r3, #0
 801a186:	f000 825a 	beq.w	801a63e <tcp_write+0x6f6>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 801a18a:	8afb      	ldrh	r3, [r7, #22]
 801a18c:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801a190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a192:	6858      	ldr	r0, [r3, #4]
 801a194:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a198:	68ba      	ldr	r2, [r7, #8]
 801a19a:	4413      	add	r3, r2
 801a19c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801a19e:	4619      	mov	r1, r3
 801a1a0:	f007 f8cb 	bl	802133a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801a1a4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a1a6:	f7fa ff03 	bl	8014fb0 <pbuf_clen>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	461a      	mov	r2, r3
 801a1ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a1b2:	4413      	add	r3, r2
 801a1b4:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 801a1b8:	e055      	b.n	801a266 <tcp_write+0x31e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801a1ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a1bc:	685b      	ldr	r3, [r3, #4]
 801a1be:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a1c0:	e002      	b.n	801a1c8 <tcp_write+0x280>
 801a1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 801a1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	d1f8      	bne.n	801a1c2 <tcp_write+0x27a>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a1d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1d2:	7b1b      	ldrb	r3, [r3, #12]
 801a1d4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d129      	bne.n	801a230 <tcp_write+0x2e8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801a1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a1de:	685b      	ldr	r3, [r3, #4]
 801a1e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a1e2:	8952      	ldrh	r2, [r2, #10]
 801a1e4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801a1e6:	68ba      	ldr	r2, [r7, #8]
 801a1e8:	429a      	cmp	r2, r3
 801a1ea:	d121      	bne.n	801a230 <tcp_write+0x2e8>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801a1ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d006      	beq.n	801a202 <tcp_write+0x2ba>
 801a1f4:	4b05      	ldr	r3, [pc, #20]	@ (801a20c <tcp_write+0x2c4>)
 801a1f6:	f240 2231 	movw	r2, #561	@ 0x231
 801a1fa:	490c      	ldr	r1, [pc, #48]	@ (801a22c <tcp_write+0x2e4>)
 801a1fc:	4805      	ldr	r0, [pc, #20]	@ (801a214 <tcp_write+0x2cc>)
 801a1fe:	f006 fe69 	bl	8020ed4 <iprintf>
          extendlen = seglen;
 801a202:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a204:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 801a208:	e02d      	b.n	801a266 <tcp_write+0x31e>
 801a20a:	bf00      	nop
 801a20c:	08024cc0 	.word	0x08024cc0
 801a210:	08024e60 	.word	0x08024e60
 801a214:	08024d14 	.word	0x08024d14
 801a218:	08024e78 	.word	0x08024e78
 801a21c:	08024eac 	.word	0x08024eac
 801a220:	08024ec4 	.word	0x08024ec4
 801a224:	08024ef4 	.word	0x08024ef4
 801a228:	08024f14 	.word	0x08024f14
 801a22c:	08024f34 	.word	0x08024f34
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801a230:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a232:	2201      	movs	r2, #1
 801a234:	4619      	mov	r1, r3
 801a236:	2000      	movs	r0, #0
 801a238:	f7fa fae8 	bl	801480c <pbuf_alloc>
 801a23c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801a23e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a240:	2b00      	cmp	r3, #0
 801a242:	f000 81fe 	beq.w	801a642 <tcp_write+0x6fa>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801a246:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a24a:	68ba      	ldr	r2, [r7, #8]
 801a24c:	441a      	add	r2, r3
 801a24e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a250:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801a252:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a254:	f7fa feac 	bl	8014fb0 <pbuf_clen>
 801a258:	4603      	mov	r3, r0
 801a25a:	461a      	mov	r2, r3
 801a25c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a260:	4413      	add	r3, r2
 801a262:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801a266:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a26a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a26c:	4413      	add	r3, r2
 801a26e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 801a272:	e0cd      	b.n	801a410 <tcp_write+0x4c8>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801a274:	68fb      	ldr	r3, [r7, #12]
 801a276:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	f000 80c8 	beq.w	801a410 <tcp_write+0x4c8>
 801a280:	4b72      	ldr	r3, [pc, #456]	@ (801a44c <tcp_write+0x504>)
 801a282:	f240 224a 	movw	r2, #586	@ 0x24a
 801a286:	4972      	ldr	r1, [pc, #456]	@ (801a450 <tcp_write+0x508>)
 801a288:	4872      	ldr	r0, [pc, #456]	@ (801a454 <tcp_write+0x50c>)
 801a28a:	f006 fe23 	bl	8020ed4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801a28e:	e0bf      	b.n	801a410 <tcp_write+0x4c8>
    struct pbuf *p;
    u16_t left = len - pos;
 801a290:	88fa      	ldrh	r2, [r7, #6]
 801a292:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a296:	1ad3      	subs	r3, r2, r3
 801a298:	843b      	strh	r3, [r7, #32]
    u16_t max_len = mss_local - optlen;
 801a29a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a29e:	b29b      	uxth	r3, r3
 801a2a0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a2a2:	1ad3      	subs	r3, r2, r3
 801a2a4:	83fb      	strh	r3, [r7, #30]
    u16_t seglen = LWIP_MIN(left, max_len);
 801a2a6:	8bfa      	ldrh	r2, [r7, #30]
 801a2a8:	8c3b      	ldrh	r3, [r7, #32]
 801a2aa:	4293      	cmp	r3, r2
 801a2ac:	bf28      	it	cs
 801a2ae:	4613      	movcs	r3, r2
 801a2b0:	83bb      	strh	r3, [r7, #28]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801a2b2:	797b      	ldrb	r3, [r7, #5]
 801a2b4:	f003 0301 	and.w	r3, r3, #1
 801a2b8:	2b00      	cmp	r3, #0
 801a2ba:	d036      	beq.n	801a32a <tcp_write+0x3e2>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801a2bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a2c0:	b29a      	uxth	r2, r3
 801a2c2:	8bbb      	ldrh	r3, [r7, #28]
 801a2c4:	4413      	add	r3, r2
 801a2c6:	b299      	uxth	r1, r3
 801a2c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	bf0c      	ite	eq
 801a2ce:	2301      	moveq	r3, #1
 801a2d0:	2300      	movne	r3, #0
 801a2d2:	b2db      	uxtb	r3, r3
 801a2d4:	f107 0016 	add.w	r0, r7, #22
 801a2d8:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 801a2da:	9302      	str	r3, [sp, #8]
 801a2dc:	797b      	ldrb	r3, [r7, #5]
 801a2de:	9301      	str	r3, [sp, #4]
 801a2e0:	68fb      	ldr	r3, [r7, #12]
 801a2e2:	9300      	str	r3, [sp, #0]
 801a2e4:	4603      	mov	r3, r0
 801a2e6:	2036      	movs	r0, #54	@ 0x36
 801a2e8:	f7ff fd30 	bl	8019d4c <tcp_pbuf_prealloc>
 801a2ec:	6378      	str	r0, [r7, #52]	@ 0x34
 801a2ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	f000 81a8 	beq.w	801a646 <tcp_write+0x6fe>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801a2f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a2f8:	895b      	ldrh	r3, [r3, #10]
 801a2fa:	8bba      	ldrh	r2, [r7, #28]
 801a2fc:	429a      	cmp	r2, r3
 801a2fe:	d906      	bls.n	801a30e <tcp_write+0x3c6>
 801a300:	4b52      	ldr	r3, [pc, #328]	@ (801a44c <tcp_write+0x504>)
 801a302:	f240 2266 	movw	r2, #614	@ 0x266
 801a306:	4954      	ldr	r1, [pc, #336]	@ (801a458 <tcp_write+0x510>)
 801a308:	4852      	ldr	r0, [pc, #328]	@ (801a454 <tcp_write+0x50c>)
 801a30a:	f006 fde3 	bl	8020ed4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801a30e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a310:	685a      	ldr	r2, [r3, #4]
 801a312:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a316:	18d0      	adds	r0, r2, r3
 801a318:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a31c:	68ba      	ldr	r2, [r7, #8]
 801a31e:	4413      	add	r3, r2
 801a320:	8bba      	ldrh	r2, [r7, #28]
 801a322:	4619      	mov	r1, r3
 801a324:	f007 f809 	bl	802133a <memcpy>
 801a328:	e02f      	b.n	801a38a <tcp_write+0x442>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801a32a:	8afb      	ldrh	r3, [r7, #22]
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d006      	beq.n	801a33e <tcp_write+0x3f6>
 801a330:	4b46      	ldr	r3, [pc, #280]	@ (801a44c <tcp_write+0x504>)
 801a332:	f240 2271 	movw	r2, #625	@ 0x271
 801a336:	4949      	ldr	r1, [pc, #292]	@ (801a45c <tcp_write+0x514>)
 801a338:	4846      	ldr	r0, [pc, #280]	@ (801a454 <tcp_write+0x50c>)
 801a33a:	f006 fdcb 	bl	8020ed4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801a33e:	8bbb      	ldrh	r3, [r7, #28]
 801a340:	2201      	movs	r2, #1
 801a342:	4619      	mov	r1, r3
 801a344:	2036      	movs	r0, #54	@ 0x36
 801a346:	f7fa fa61 	bl	801480c <pbuf_alloc>
 801a34a:	61b8      	str	r0, [r7, #24]
 801a34c:	69bb      	ldr	r3, [r7, #24]
 801a34e:	2b00      	cmp	r3, #0
 801a350:	f000 817b 	beq.w	801a64a <tcp_write+0x702>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801a354:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a358:	68ba      	ldr	r2, [r7, #8]
 801a35a:	441a      	add	r2, r3
 801a35c:	69bb      	ldr	r3, [r7, #24]
 801a35e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801a360:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a364:	b29b      	uxth	r3, r3
 801a366:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a36a:	4619      	mov	r1, r3
 801a36c:	2036      	movs	r0, #54	@ 0x36
 801a36e:	f7fa fa4d 	bl	801480c <pbuf_alloc>
 801a372:	6378      	str	r0, [r7, #52]	@ 0x34
 801a374:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a376:	2b00      	cmp	r3, #0
 801a378:	d103      	bne.n	801a382 <tcp_write+0x43a>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801a37a:	69b8      	ldr	r0, [r7, #24]
 801a37c:	f7fa fd72 	bl	8014e64 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801a380:	e166      	b.n	801a650 <tcp_write+0x708>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801a382:	69b9      	ldr	r1, [r7, #24]
 801a384:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a386:	f7fa fe53 	bl	8015030 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801a38a:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a38c:	f7fa fe10 	bl	8014fb0 <pbuf_clen>
 801a390:	4603      	mov	r3, r0
 801a392:	461a      	mov	r2, r3
 801a394:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a398:	4413      	add	r3, r2
 801a39a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801a39e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 801a3a2:	2b09      	cmp	r3, #9
 801a3a4:	d903      	bls.n	801a3ae <tcp_write+0x466>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801a3a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a3a8:	f7fa fd5c 	bl	8014e64 <pbuf_free>
      goto memerr;
 801a3ac:	e150      	b.n	801a650 <tcp_write+0x708>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801a3ae:	68fb      	ldr	r3, [r7, #12]
 801a3b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801a3b2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 801a3b6:	441a      	add	r2, r3
 801a3b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801a3bc:	9300      	str	r3, [sp, #0]
 801a3be:	4613      	mov	r3, r2
 801a3c0:	2200      	movs	r2, #0
 801a3c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a3c4:	68f8      	ldr	r0, [r7, #12]
 801a3c6:	f7ff fc17 	bl	8019bf8 <tcp_create_segment>
 801a3ca:	6578      	str	r0, [r7, #84]	@ 0x54
 801a3cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	f000 813d 	beq.w	801a64e <tcp_write+0x706>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 801a3d4:	8afa      	ldrh	r2, [r7, #22]
 801a3d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3d8:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801a3da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3dc:	2b00      	cmp	r3, #0
 801a3de:	d102      	bne.n	801a3e6 <tcp_write+0x49e>
      queue = seg;
 801a3e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a3e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a3e4:	e00c      	b.n	801a400 <tcp_write+0x4b8>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801a3e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d106      	bne.n	801a3fa <tcp_write+0x4b2>
 801a3ec:	4b17      	ldr	r3, [pc, #92]	@ (801a44c <tcp_write+0x504>)
 801a3ee:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a3f2:	491b      	ldr	r1, [pc, #108]	@ (801a460 <tcp_write+0x518>)
 801a3f4:	4817      	ldr	r0, [pc, #92]	@ (801a454 <tcp_write+0x50c>)
 801a3f6:	f006 fd6d 	bl	8020ed4 <iprintf>
      prev_seg->next = seg;
 801a3fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a3fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a3fe:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801a400:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a402:	653b      	str	r3, [r7, #80]	@ 0x50

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801a404:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a408:	8bbb      	ldrh	r3, [r7, #28]
 801a40a:	4413      	add	r3, r2
 801a40c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  while (pos < len) {
 801a410:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 801a414:	88fb      	ldrh	r3, [r7, #6]
 801a416:	429a      	cmp	r2, r3
 801a418:	f4ff af3a 	bcc.w	801a290 <tcp_write+0x348>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 801a41c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d00b      	beq.n	801a43a <tcp_write+0x4f2>
 801a422:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801a426:	2b00      	cmp	r3, #0
 801a428:	d007      	beq.n	801a43a <tcp_write+0x4f2>
    last_unsent->oversize_left += oversize_add;
 801a42a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a42c:	895a      	ldrh	r2, [r3, #10]
 801a42e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 801a432:	4413      	add	r3, r2
 801a434:	b29a      	uxth	r2, r3
 801a436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a438:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801a43a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d052      	beq.n	801a4e8 <tcp_write+0x5a0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801a442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a444:	685b      	ldr	r3, [r3, #4]
 801a446:	633b      	str	r3, [r7, #48]	@ 0x30
 801a448:	e02e      	b.n	801a4a8 <tcp_write+0x560>
 801a44a:	bf00      	nop
 801a44c:	08024cc0 	.word	0x08024cc0
 801a450:	08024f60 	.word	0x08024f60
 801a454:	08024d14 	.word	0x08024d14
 801a458:	08024f90 	.word	0x08024f90
 801a45c:	08024fd0 	.word	0x08024fd0
 801a460:	08024fe0 	.word	0x08024fe0
      p->tot_len += oversize_used;
 801a464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a466:	891a      	ldrh	r2, [r3, #8]
 801a468:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a46c:	4413      	add	r3, r2
 801a46e:	b29a      	uxth	r2, r3
 801a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a472:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801a474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d112      	bne.n	801a4a2 <tcp_write+0x55a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801a47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a47e:	685b      	ldr	r3, [r3, #4]
 801a480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a482:	8952      	ldrh	r2, [r2, #10]
 801a484:	4413      	add	r3, r2
 801a486:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a48a:	68b9      	ldr	r1, [r7, #8]
 801a48c:	4618      	mov	r0, r3
 801a48e:	f006 ff54 	bl	802133a <memcpy>
        p->len += oversize_used;
 801a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a494:	895a      	ldrh	r2, [r3, #10]
 801a496:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a49a:	4413      	add	r3, r2
 801a49c:	b29a      	uxth	r2, r3
 801a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4a0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801a4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	633b      	str	r3, [r7, #48]	@ 0x30
 801a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d1da      	bne.n	801a464 <tcp_write+0x51c>
      }
    }
    last_unsent->len += oversize_used;
 801a4ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4b0:	891a      	ldrh	r2, [r3, #8]
 801a4b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a4b6:	4413      	add	r3, r2
 801a4b8:	b29a      	uxth	r2, r3
 801a4ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4bc:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 801a4be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4c0:	895b      	ldrh	r3, [r3, #10]
 801a4c2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801a4c6:	429a      	cmp	r2, r3
 801a4c8:	d906      	bls.n	801a4d8 <tcp_write+0x590>
 801a4ca:	4b7c      	ldr	r3, [pc, #496]	@ (801a6bc <tcp_write+0x774>)
 801a4cc:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801a4d0:	497b      	ldr	r1, [pc, #492]	@ (801a6c0 <tcp_write+0x778>)
 801a4d2:	487c      	ldr	r0, [pc, #496]	@ (801a6c4 <tcp_write+0x77c>)
 801a4d4:	f006 fcfe 	bl	8020ed4 <iprintf>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 801a4d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4da:	895a      	ldrh	r2, [r3, #10]
 801a4dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801a4e0:	1ad3      	subs	r3, r2, r3
 801a4e2:	b29a      	uxth	r2, r3
 801a4e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4e6:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801a4e8:	8afa      	ldrh	r2, [r7, #22]
 801a4ea:	68fb      	ldr	r3, [r7, #12]
 801a4ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801a4f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d018      	beq.n	801a528 <tcp_write+0x5e0>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801a4f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a4f8:	2b00      	cmp	r3, #0
 801a4fa:	d106      	bne.n	801a50a <tcp_write+0x5c2>
 801a4fc:	4b6f      	ldr	r3, [pc, #444]	@ (801a6bc <tcp_write+0x774>)
 801a4fe:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 801a502:	4971      	ldr	r1, [pc, #452]	@ (801a6c8 <tcp_write+0x780>)
 801a504:	486f      	ldr	r0, [pc, #444]	@ (801a6c4 <tcp_write+0x77c>)
 801a506:	f006 fce5 	bl	8020ed4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801a50a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a50c:	685b      	ldr	r3, [r3, #4]
 801a50e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a510:	4618      	mov	r0, r3
 801a512:	f7fa fd8d 	bl	8015030 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801a516:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a518:	891a      	ldrh	r2, [r3, #8]
 801a51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a51c:	891b      	ldrh	r3, [r3, #8]
 801a51e:	4413      	add	r3, r2
 801a520:	b29a      	uxth	r2, r3
 801a522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a524:	811a      	strh	r2, [r3, #8]
 801a526:	e03c      	b.n	801a5a2 <tcp_write+0x65a>
  } else if (extendlen > 0) {
 801a528:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	d038      	beq.n	801a5a2 <tcp_write+0x65a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801a530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a532:	2b00      	cmp	r3, #0
 801a534:	d003      	beq.n	801a53e <tcp_write+0x5f6>
 801a536:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a538:	685b      	ldr	r3, [r3, #4]
 801a53a:	2b00      	cmp	r3, #0
 801a53c:	d106      	bne.n	801a54c <tcp_write+0x604>
 801a53e:	4b5f      	ldr	r3, [pc, #380]	@ (801a6bc <tcp_write+0x774>)
 801a540:	f240 22e6 	movw	r2, #742	@ 0x2e6
 801a544:	4961      	ldr	r1, [pc, #388]	@ (801a6cc <tcp_write+0x784>)
 801a546:	485f      	ldr	r0, [pc, #380]	@ (801a6c4 <tcp_write+0x77c>)
 801a548:	f006 fcc4 	bl	8020ed4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a54c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a54e:	685b      	ldr	r3, [r3, #4]
 801a550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a552:	e00a      	b.n	801a56a <tcp_write+0x622>
      p->tot_len += extendlen;
 801a554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a556:	891a      	ldrh	r2, [r3, #8]
 801a558:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a55c:	4413      	add	r3, r2
 801a55e:	b29a      	uxth	r2, r3
 801a560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a562:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801a564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	2b00      	cmp	r3, #0
 801a570:	d1f0      	bne.n	801a554 <tcp_write+0x60c>
    }
    p->tot_len += extendlen;
 801a572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a574:	891a      	ldrh	r2, [r3, #8]
 801a576:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a57a:	4413      	add	r3, r2
 801a57c:	b29a      	uxth	r2, r3
 801a57e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a580:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801a582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a584:	895a      	ldrh	r2, [r3, #10]
 801a586:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a58a:	4413      	add	r3, r2
 801a58c:	b29a      	uxth	r2, r3
 801a58e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a590:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801a592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a594:	891a      	ldrh	r2, [r3, #8]
 801a596:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 801a59a:	4413      	add	r3, r2
 801a59c:	b29a      	uxth	r2, r3
 801a59e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a5a0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801a5a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a5a4:	2b00      	cmp	r3, #0
 801a5a6:	d103      	bne.n	801a5b0 <tcp_write+0x668>
    pcb->unsent = queue;
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a5ac:	66da      	str	r2, [r3, #108]	@ 0x6c
 801a5ae:	e002      	b.n	801a5b6 <tcp_write+0x66e>
  } else {
    last_unsent->next = queue;
 801a5b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a5b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801a5b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801a5ba:	88fb      	ldrh	r3, [r7, #6]
 801a5bc:	441a      	add	r2, r3
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 801a5c8:	88fb      	ldrh	r3, [r7, #6]
 801a5ca:	1ad3      	subs	r3, r2, r3
 801a5cc:	b29a      	uxth	r2, r3
 801a5ce:	68fb      	ldr	r3, [r7, #12]
 801a5d0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 801a5da:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a5e4:	2b00      	cmp	r3, #0
 801a5e6:	d00e      	beq.n	801a606 <tcp_write+0x6be>
    LWIP_ASSERT("tcp_write: valid queue length",
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d10a      	bne.n	801a606 <tcp_write+0x6be>
 801a5f0:	68fb      	ldr	r3, [r7, #12]
 801a5f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d106      	bne.n	801a606 <tcp_write+0x6be>
 801a5f8:	4b30      	ldr	r3, [pc, #192]	@ (801a6bc <tcp_write+0x774>)
 801a5fa:	f240 3212 	movw	r2, #786	@ 0x312
 801a5fe:	4934      	ldr	r1, [pc, #208]	@ (801a6d0 <tcp_write+0x788>)
 801a600:	4830      	ldr	r0, [pc, #192]	@ (801a6c4 <tcp_write+0x77c>)
 801a602:	f006 fc67 	bl	8020ed4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801a606:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d016      	beq.n	801a63a <tcp_write+0x6f2>
 801a60c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a60e:	691b      	ldr	r3, [r3, #16]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d012      	beq.n	801a63a <tcp_write+0x6f2>
 801a614:	797b      	ldrb	r3, [r7, #5]
 801a616:	f003 0302 	and.w	r3, r3, #2
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d10d      	bne.n	801a63a <tcp_write+0x6f2>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801a61e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a620:	691b      	ldr	r3, [r3, #16]
 801a622:	899b      	ldrh	r3, [r3, #12]
 801a624:	b29c      	uxth	r4, r3
 801a626:	2008      	movs	r0, #8
 801a628:	f7f8 fdee 	bl	8013208 <lwip_htons>
 801a62c:	4603      	mov	r3, r0
 801a62e:	461a      	mov	r2, r3
 801a630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a632:	691b      	ldr	r3, [r3, #16]
 801a634:	4322      	orrs	r2, r4
 801a636:	b292      	uxth	r2, r2
 801a638:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801a63a:	2300      	movs	r3, #0
 801a63c:	e039      	b.n	801a6b2 <tcp_write+0x76a>
          goto memerr;
 801a63e:	bf00      	nop
 801a640:	e006      	b.n	801a650 <tcp_write+0x708>
            goto memerr;
 801a642:	bf00      	nop
 801a644:	e004      	b.n	801a650 <tcp_write+0x708>
        goto memerr;
 801a646:	bf00      	nop
 801a648:	e002      	b.n	801a650 <tcp_write+0x708>
        goto memerr;
 801a64a:	bf00      	nop
 801a64c:	e000      	b.n	801a650 <tcp_write+0x708>
      goto memerr;
 801a64e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801a650:	68fb      	ldr	r3, [r7, #12]
 801a652:	8b5b      	ldrh	r3, [r3, #26]
 801a654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a658:	b29a      	uxth	r2, r3
 801a65a:	68fb      	ldr	r3, [r7, #12]
 801a65c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);
 801a65e:	4b1d      	ldr	r3, [pc, #116]	@ (801a6d4 <tcp_write+0x78c>)
 801a660:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a664:	3301      	adds	r3, #1
 801a666:	b29a      	uxth	r2, r3
 801a668:	4b1a      	ldr	r3, [pc, #104]	@ (801a6d4 <tcp_write+0x78c>)
 801a66a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  if (concat_p != NULL) {
 801a66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a670:	2b00      	cmp	r3, #0
 801a672:	d002      	beq.n	801a67a <tcp_write+0x732>
    pbuf_free(concat_p);
 801a674:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801a676:	f7fa fbf5 	bl	8014e64 <pbuf_free>
  }
  if (queue != NULL) {
 801a67a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d002      	beq.n	801a686 <tcp_write+0x73e>
    tcp_segs_free(queue);
 801a680:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801a682:	f7fc fa67 	bl	8016b54 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801a686:	68fb      	ldr	r3, [r7, #12]
 801a688:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	d00e      	beq.n	801a6ae <tcp_write+0x766>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801a690:	68fb      	ldr	r3, [r7, #12]
 801a692:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a694:	2b00      	cmp	r3, #0
 801a696:	d10a      	bne.n	801a6ae <tcp_write+0x766>
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d106      	bne.n	801a6ae <tcp_write+0x766>
 801a6a0:	4b06      	ldr	r3, [pc, #24]	@ (801a6bc <tcp_write+0x774>)
 801a6a2:	f240 3227 	movw	r2, #807	@ 0x327
 801a6a6:	490a      	ldr	r1, [pc, #40]	@ (801a6d0 <tcp_write+0x788>)
 801a6a8:	4806      	ldr	r0, [pc, #24]	@ (801a6c4 <tcp_write+0x77c>)
 801a6aa:	f006 fc13 	bl	8020ed4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801a6ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	3764      	adds	r7, #100	@ 0x64
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	bd90      	pop	{r4, r7, pc}
 801a6ba:	bf00      	nop
 801a6bc:	08024cc0 	.word	0x08024cc0
 801a6c0:	08024ff4 	.word	0x08024ff4
 801a6c4:	08024d14 	.word	0x08024d14
 801a6c8:	08025020 	.word	0x08025020
 801a6cc:	08025058 	.word	0x08025058
 801a6d0:	08025090 	.word	0x08025090
 801a6d4:	2002d36c 	.word	0x2002d36c

0801a6d8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801a6d8:	b590      	push	{r4, r7, lr}
 801a6da:	b08b      	sub	sp, #44	@ 0x2c
 801a6dc:	af02      	add	r7, sp, #8
 801a6de:	6078      	str	r0, [r7, #4]
 801a6e0:	460b      	mov	r3, r1
 801a6e2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	61bb      	str	r3, [r7, #24]
 801a6e8:	2300      	movs	r3, #0
 801a6ea:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801a6ec:	2300      	movs	r3, #0
 801a6ee:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d106      	bne.n	801a704 <tcp_split_unsent_seg+0x2c>
 801a6f6:	4b9b      	ldr	r3, [pc, #620]	@ (801a964 <tcp_split_unsent_seg+0x28c>)
 801a6f8:	f240 324b 	movw	r2, #843	@ 0x34b
 801a6fc:	499a      	ldr	r1, [pc, #616]	@ (801a968 <tcp_split_unsent_seg+0x290>)
 801a6fe:	489b      	ldr	r0, [pc, #620]	@ (801a96c <tcp_split_unsent_seg+0x294>)
 801a700:	f006 fbe8 	bl	8020ed4 <iprintf>

  useg = pcb->unsent;
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a708:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801a70a:	697b      	ldr	r3, [r7, #20]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d102      	bne.n	801a716 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801a710:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a714:	e121      	b.n	801a95a <tcp_split_unsent_seg+0x282>
  }

  if (split == 0) {
 801a716:	887b      	ldrh	r3, [r7, #2]
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d109      	bne.n	801a730 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801a71c:	4b91      	ldr	r3, [pc, #580]	@ (801a964 <tcp_split_unsent_seg+0x28c>)
 801a71e:	f240 3253 	movw	r2, #851	@ 0x353
 801a722:	4993      	ldr	r1, [pc, #588]	@ (801a970 <tcp_split_unsent_seg+0x298>)
 801a724:	4891      	ldr	r0, [pc, #580]	@ (801a96c <tcp_split_unsent_seg+0x294>)
 801a726:	f006 fbd5 	bl	8020ed4 <iprintf>
    return ERR_VAL;
 801a72a:	f06f 0305 	mvn.w	r3, #5
 801a72e:	e114      	b.n	801a95a <tcp_split_unsent_seg+0x282>
  }

  if (useg->len <= split) {
 801a730:	697b      	ldr	r3, [r7, #20]
 801a732:	891b      	ldrh	r3, [r3, #8]
 801a734:	887a      	ldrh	r2, [r7, #2]
 801a736:	429a      	cmp	r2, r3
 801a738:	d301      	bcc.n	801a73e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801a73a:	2300      	movs	r3, #0
 801a73c:	e10d      	b.n	801a95a <tcp_split_unsent_seg+0x282>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801a742:	887a      	ldrh	r2, [r7, #2]
 801a744:	429a      	cmp	r2, r3
 801a746:	d906      	bls.n	801a756 <tcp_split_unsent_seg+0x7e>
 801a748:	4b86      	ldr	r3, [pc, #536]	@ (801a964 <tcp_split_unsent_seg+0x28c>)
 801a74a:	f240 325b 	movw	r2, #859	@ 0x35b
 801a74e:	4989      	ldr	r1, [pc, #548]	@ (801a974 <tcp_split_unsent_seg+0x29c>)
 801a750:	4886      	ldr	r0, [pc, #536]	@ (801a96c <tcp_split_unsent_seg+0x294>)
 801a752:	f006 fbbf 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801a756:	697b      	ldr	r3, [r7, #20]
 801a758:	891b      	ldrh	r3, [r3, #8]
 801a75a:	2b00      	cmp	r3, #0
 801a75c:	d106      	bne.n	801a76c <tcp_split_unsent_seg+0x94>
 801a75e:	4b81      	ldr	r3, [pc, #516]	@ (801a964 <tcp_split_unsent_seg+0x28c>)
 801a760:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 801a764:	4984      	ldr	r1, [pc, #528]	@ (801a978 <tcp_split_unsent_seg+0x2a0>)
 801a766:	4881      	ldr	r0, [pc, #516]	@ (801a96c <tcp_split_unsent_seg+0x294>)
 801a768:	f006 fbb4 	bl	8020ed4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801a76c:	697b      	ldr	r3, [r7, #20]
 801a76e:	7b1b      	ldrb	r3, [r3, #12]
 801a770:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801a772:	7bfb      	ldrb	r3, [r7, #15]
 801a774:	009b      	lsls	r3, r3, #2
 801a776:	b2db      	uxtb	r3, r3
 801a778:	f003 0304 	and.w	r3, r3, #4
 801a77c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801a77e:	697b      	ldr	r3, [r7, #20]
 801a780:	891a      	ldrh	r2, [r3, #8]
 801a782:	887b      	ldrh	r3, [r7, #2]
 801a784:	1ad3      	subs	r3, r2, r3
 801a786:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801a788:	7bbb      	ldrb	r3, [r7, #14]
 801a78a:	b29a      	uxth	r2, r3
 801a78c:	89bb      	ldrh	r3, [r7, #12]
 801a78e:	4413      	add	r3, r2
 801a790:	b29b      	uxth	r3, r3
 801a792:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a796:	4619      	mov	r1, r3
 801a798:	2036      	movs	r0, #54	@ 0x36
 801a79a:	f7fa f837 	bl	801480c <pbuf_alloc>
 801a79e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a7a0:	693b      	ldr	r3, [r7, #16]
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	f000 80ba 	beq.w	801a91c <tcp_split_unsent_seg+0x244>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801a7a8:	697b      	ldr	r3, [r7, #20]
 801a7aa:	685b      	ldr	r3, [r3, #4]
 801a7ac:	891a      	ldrh	r2, [r3, #8]
 801a7ae:	697b      	ldr	r3, [r7, #20]
 801a7b0:	891b      	ldrh	r3, [r3, #8]
 801a7b2:	1ad3      	subs	r3, r2, r3
 801a7b4:	b29a      	uxth	r2, r3
 801a7b6:	887b      	ldrh	r3, [r7, #2]
 801a7b8:	4413      	add	r3, r2
 801a7ba:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801a7bc:	697b      	ldr	r3, [r7, #20]
 801a7be:	6858      	ldr	r0, [r3, #4]
 801a7c0:	693b      	ldr	r3, [r7, #16]
 801a7c2:	685a      	ldr	r2, [r3, #4]
 801a7c4:	7bbb      	ldrb	r3, [r7, #14]
 801a7c6:	18d1      	adds	r1, r2, r3
 801a7c8:	897b      	ldrh	r3, [r7, #10]
 801a7ca:	89ba      	ldrh	r2, [r7, #12]
 801a7cc:	f7fa fd7c 	bl	80152c8 <pbuf_copy_partial>
 801a7d0:	4603      	mov	r3, r0
 801a7d2:	461a      	mov	r2, r3
 801a7d4:	89bb      	ldrh	r3, [r7, #12]
 801a7d6:	4293      	cmp	r3, r2
 801a7d8:	f040 80a2 	bne.w	801a920 <tcp_split_unsent_seg+0x248>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801a7dc:	697b      	ldr	r3, [r7, #20]
 801a7de:	691b      	ldr	r3, [r3, #16]
 801a7e0:	899b      	ldrh	r3, [r3, #12]
 801a7e2:	b29b      	uxth	r3, r3
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	f7f8 fd0f 	bl	8013208 <lwip_htons>
 801a7ea:	4603      	mov	r3, r0
 801a7ec:	b2db      	uxtb	r3, r3
 801a7ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801a7f2:	77fb      	strb	r3, [r7, #31]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	77bb      	strb	r3, [r7, #30]

  if (split_flags & TCP_PSH) {
 801a7f8:	7ffb      	ldrb	r3, [r7, #31]
 801a7fa:	f003 0308 	and.w	r3, r3, #8
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d007      	beq.n	801a812 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801a802:	7ffb      	ldrb	r3, [r7, #31]
 801a804:	f023 0308 	bic.w	r3, r3, #8
 801a808:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_PSH;
 801a80a:	7fbb      	ldrb	r3, [r7, #30]
 801a80c:	f043 0308 	orr.w	r3, r3, #8
 801a810:	77bb      	strb	r3, [r7, #30]
  }
  if (split_flags & TCP_FIN) {
 801a812:	7ffb      	ldrb	r3, [r7, #31]
 801a814:	f003 0301 	and.w	r3, r3, #1
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d007      	beq.n	801a82c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801a81c:	7ffb      	ldrb	r3, [r7, #31]
 801a81e:	f023 0301 	bic.w	r3, r3, #1
 801a822:	77fb      	strb	r3, [r7, #31]
    remainder_flags |= TCP_FIN;
 801a824:	7fbb      	ldrb	r3, [r7, #30]
 801a826:	f043 0301 	orr.w	r3, r3, #1
 801a82a:	77bb      	strb	r3, [r7, #30]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801a82c:	697b      	ldr	r3, [r7, #20]
 801a82e:	691b      	ldr	r3, [r3, #16]
 801a830:	685b      	ldr	r3, [r3, #4]
 801a832:	4618      	mov	r0, r3
 801a834:	f7f8 fcfe 	bl	8013234 <lwip_htonl>
 801a838:	4602      	mov	r2, r0
 801a83a:	887b      	ldrh	r3, [r7, #2]
 801a83c:	18d1      	adds	r1, r2, r3
 801a83e:	7fba      	ldrb	r2, [r7, #30]
 801a840:	7bfb      	ldrb	r3, [r7, #15]
 801a842:	9300      	str	r3, [sp, #0]
 801a844:	460b      	mov	r3, r1
 801a846:	6939      	ldr	r1, [r7, #16]
 801a848:	6878      	ldr	r0, [r7, #4]
 801a84a:	f7ff f9d5 	bl	8019bf8 <tcp_create_segment>
 801a84e:	61b8      	str	r0, [r7, #24]
  if (seg == NULL) {
 801a850:	69bb      	ldr	r3, [r7, #24]
 801a852:	2b00      	cmp	r3, #0
 801a854:	d066      	beq.n	801a924 <tcp_split_unsent_seg+0x24c>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801a856:	697b      	ldr	r3, [r7, #20]
 801a858:	685b      	ldr	r3, [r3, #4]
 801a85a:	4618      	mov	r0, r3
 801a85c:	f7fa fba8 	bl	8014fb0 <pbuf_clen>
 801a860:	4603      	mov	r3, r0
 801a862:	461a      	mov	r2, r3
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a86a:	1a9b      	subs	r3, r3, r2
 801a86c:	b29a      	uxth	r2, r3
 801a86e:	687b      	ldr	r3, [r7, #4]
 801a870:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801a874:	697b      	ldr	r3, [r7, #20]
 801a876:	6858      	ldr	r0, [r3, #4]
 801a878:	697b      	ldr	r3, [r7, #20]
 801a87a:	685b      	ldr	r3, [r3, #4]
 801a87c:	891a      	ldrh	r2, [r3, #8]
 801a87e:	89bb      	ldrh	r3, [r7, #12]
 801a880:	1ad3      	subs	r3, r2, r3
 801a882:	b29b      	uxth	r3, r3
 801a884:	4619      	mov	r1, r3
 801a886:	f7fa f94d 	bl	8014b24 <pbuf_realloc>
  useg->len -= remainder;
 801a88a:	697b      	ldr	r3, [r7, #20]
 801a88c:	891a      	ldrh	r2, [r3, #8]
 801a88e:	89bb      	ldrh	r3, [r7, #12]
 801a890:	1ad3      	subs	r3, r2, r3
 801a892:	b29a      	uxth	r2, r3
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801a898:	697b      	ldr	r3, [r7, #20]
 801a89a:	691b      	ldr	r3, [r3, #16]
 801a89c:	899b      	ldrh	r3, [r3, #12]
 801a89e:	b29c      	uxth	r4, r3
 801a8a0:	7ffb      	ldrb	r3, [r7, #31]
 801a8a2:	b29b      	uxth	r3, r3
 801a8a4:	4618      	mov	r0, r3
 801a8a6:	f7f8 fcaf 	bl	8013208 <lwip_htons>
 801a8aa:	4603      	mov	r3, r0
 801a8ac:	461a      	mov	r2, r3
 801a8ae:	697b      	ldr	r3, [r7, #20]
 801a8b0:	691b      	ldr	r3, [r3, #16]
 801a8b2:	4322      	orrs	r2, r4
 801a8b4:	b292      	uxth	r2, r2
 801a8b6:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801a8b8:	697b      	ldr	r3, [r7, #20]
 801a8ba:	2200      	movs	r2, #0
 801a8bc:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801a8be:	697b      	ldr	r3, [r7, #20]
 801a8c0:	685b      	ldr	r3, [r3, #4]
 801a8c2:	4618      	mov	r0, r3
 801a8c4:	f7fa fb74 	bl	8014fb0 <pbuf_clen>
 801a8c8:	4603      	mov	r3, r0
 801a8ca:	461a      	mov	r2, r3
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a8d2:	4413      	add	r3, r2
 801a8d4:	b29a      	uxth	r2, r3
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801a8dc:	69bb      	ldr	r3, [r7, #24]
 801a8de:	685b      	ldr	r3, [r3, #4]
 801a8e0:	4618      	mov	r0, r3
 801a8e2:	f7fa fb65 	bl	8014fb0 <pbuf_clen>
 801a8e6:	4603      	mov	r3, r0
 801a8e8:	461a      	mov	r2, r3
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801a8f0:	4413      	add	r3, r2
 801a8f2:	b29a      	uxth	r2, r3
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801a8fa:	697b      	ldr	r3, [r7, #20]
 801a8fc:	681a      	ldr	r2, [r3, #0]
 801a8fe:	69bb      	ldr	r3, [r7, #24]
 801a900:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801a902:	697b      	ldr	r3, [r7, #20]
 801a904:	69ba      	ldr	r2, [r7, #24]
 801a906:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801a908:	69bb      	ldr	r3, [r7, #24]
 801a90a:	681b      	ldr	r3, [r3, #0]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d103      	bne.n	801a918 <tcp_split_unsent_seg+0x240>
    pcb->unsent_oversize = 0;
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	2200      	movs	r2, #0
 801a914:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801a918:	2300      	movs	r3, #0
 801a91a:	e01e      	b.n	801a95a <tcp_split_unsent_seg+0x282>
    goto memerr;
 801a91c:	bf00      	nop
 801a91e:	e002      	b.n	801a926 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a920:	bf00      	nop
 801a922:	e000      	b.n	801a926 <tcp_split_unsent_seg+0x24e>
    goto memerr;
 801a924:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);
 801a926:	4b15      	ldr	r3, [pc, #84]	@ (801a97c <tcp_split_unsent_seg+0x2a4>)
 801a928:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801a92c:	3301      	adds	r3, #1
 801a92e:	b29a      	uxth	r2, r3
 801a930:	4b12      	ldr	r3, [pc, #72]	@ (801a97c <tcp_split_unsent_seg+0x2a4>)
 801a932:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801a936:	69bb      	ldr	r3, [r7, #24]
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d006      	beq.n	801a94a <tcp_split_unsent_seg+0x272>
 801a93c:	4b09      	ldr	r3, [pc, #36]	@ (801a964 <tcp_split_unsent_seg+0x28c>)
 801a93e:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 801a942:	490f      	ldr	r1, [pc, #60]	@ (801a980 <tcp_split_unsent_seg+0x2a8>)
 801a944:	4809      	ldr	r0, [pc, #36]	@ (801a96c <tcp_split_unsent_seg+0x294>)
 801a946:	f006 fac5 	bl	8020ed4 <iprintf>
  if (p != NULL) {
 801a94a:	693b      	ldr	r3, [r7, #16]
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d002      	beq.n	801a956 <tcp_split_unsent_seg+0x27e>
    pbuf_free(p);
 801a950:	6938      	ldr	r0, [r7, #16]
 801a952:	f7fa fa87 	bl	8014e64 <pbuf_free>
  }

  return ERR_MEM;
 801a956:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801a95a:	4618      	mov	r0, r3
 801a95c:	3724      	adds	r7, #36	@ 0x24
 801a95e:	46bd      	mov	sp, r7
 801a960:	bd90      	pop	{r4, r7, pc}
 801a962:	bf00      	nop
 801a964:	08024cc0 	.word	0x08024cc0
 801a968:	080250b0 	.word	0x080250b0
 801a96c:	08024d14 	.word	0x08024d14
 801a970:	080250d4 	.word	0x080250d4
 801a974:	080250f8 	.word	0x080250f8
 801a978:	08025108 	.word	0x08025108
 801a97c:	2002d36c 	.word	0x2002d36c
 801a980:	08025118 	.word	0x08025118

0801a984 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801a984:	b590      	push	{r4, r7, lr}
 801a986:	b085      	sub	sp, #20
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	2b00      	cmp	r3, #0
 801a990:	d106      	bne.n	801a9a0 <tcp_send_fin+0x1c>
 801a992:	4b21      	ldr	r3, [pc, #132]	@ (801aa18 <tcp_send_fin+0x94>)
 801a994:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801a998:	4920      	ldr	r1, [pc, #128]	@ (801aa1c <tcp_send_fin+0x98>)
 801a99a:	4821      	ldr	r0, [pc, #132]	@ (801aa20 <tcp_send_fin+0x9c>)
 801a99c:	f006 fa9a 	bl	8020ed4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d02e      	beq.n	801aa06 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a9ac:	60fb      	str	r3, [r7, #12]
 801a9ae:	e002      	b.n	801a9b6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d1f8      	bne.n	801a9b0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801a9be:	68fb      	ldr	r3, [r7, #12]
 801a9c0:	691b      	ldr	r3, [r3, #16]
 801a9c2:	899b      	ldrh	r3, [r3, #12]
 801a9c4:	b29b      	uxth	r3, r3
 801a9c6:	4618      	mov	r0, r3
 801a9c8:	f7f8 fc1e 	bl	8013208 <lwip_htons>
 801a9cc:	4603      	mov	r3, r0
 801a9ce:	b2db      	uxtb	r3, r3
 801a9d0:	f003 0307 	and.w	r3, r3, #7
 801a9d4:	2b00      	cmp	r3, #0
 801a9d6:	d116      	bne.n	801aa06 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	691b      	ldr	r3, [r3, #16]
 801a9dc:	899b      	ldrh	r3, [r3, #12]
 801a9de:	b29c      	uxth	r4, r3
 801a9e0:	2001      	movs	r0, #1
 801a9e2:	f7f8 fc11 	bl	8013208 <lwip_htons>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	461a      	mov	r2, r3
 801a9ea:	68fb      	ldr	r3, [r7, #12]
 801a9ec:	691b      	ldr	r3, [r3, #16]
 801a9ee:	4322      	orrs	r2, r4
 801a9f0:	b292      	uxth	r2, r2
 801a9f2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	8b5b      	ldrh	r3, [r3, #26]
 801a9f8:	f043 0320 	orr.w	r3, r3, #32
 801a9fc:	b29a      	uxth	r2, r3
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801aa02:	2300      	movs	r3, #0
 801aa04:	e004      	b.n	801aa10 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801aa06:	2101      	movs	r1, #1
 801aa08:	6878      	ldr	r0, [r7, #4]
 801aa0a:	f000 f80b 	bl	801aa24 <tcp_enqueue_flags>
 801aa0e:	4603      	mov	r3, r0
}
 801aa10:	4618      	mov	r0, r3
 801aa12:	3714      	adds	r7, #20
 801aa14:	46bd      	mov	sp, r7
 801aa16:	bd90      	pop	{r4, r7, pc}
 801aa18:	08024cc0 	.word	0x08024cc0
 801aa1c:	08025124 	.word	0x08025124
 801aa20:	08024d14 	.word	0x08024d14

0801aa24 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b088      	sub	sp, #32
 801aa28:	af02      	add	r7, sp, #8
 801aa2a:	6078      	str	r0, [r7, #4]
 801aa2c:	460b      	mov	r3, r1
 801aa2e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801aa30:	2300      	movs	r3, #0
 801aa32:	75fb      	strb	r3, [r7, #23]
  u8_t optlen = 0;
 801aa34:	2300      	movs	r3, #0
 801aa36:	75bb      	strb	r3, [r7, #22]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801aa38:	78fb      	ldrb	r3, [r7, #3]
 801aa3a:	f003 0303 	and.w	r3, r3, #3
 801aa3e:	2b00      	cmp	r3, #0
 801aa40:	d106      	bne.n	801aa50 <tcp_enqueue_flags+0x2c>
 801aa42:	4b6f      	ldr	r3, [pc, #444]	@ (801ac00 <tcp_enqueue_flags+0x1dc>)
 801aa44:	f240 4211 	movw	r2, #1041	@ 0x411
 801aa48:	496e      	ldr	r1, [pc, #440]	@ (801ac04 <tcp_enqueue_flags+0x1e0>)
 801aa4a:	486f      	ldr	r0, [pc, #444]	@ (801ac08 <tcp_enqueue_flags+0x1e4>)
 801aa4c:	f006 fa42 	bl	8020ed4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	2b00      	cmp	r3, #0
 801aa54:	d106      	bne.n	801aa64 <tcp_enqueue_flags+0x40>
 801aa56:	4b6a      	ldr	r3, [pc, #424]	@ (801ac00 <tcp_enqueue_flags+0x1dc>)
 801aa58:	f240 4213 	movw	r2, #1043	@ 0x413
 801aa5c:	496b      	ldr	r1, [pc, #428]	@ (801ac0c <tcp_enqueue_flags+0x1e8>)
 801aa5e:	486a      	ldr	r0, [pc, #424]	@ (801ac08 <tcp_enqueue_flags+0x1e4>)
 801aa60:	f006 fa38 	bl	8020ed4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801aa64:	78fb      	ldrb	r3, [r7, #3]
 801aa66:	f003 0302 	and.w	r3, r3, #2
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d001      	beq.n	801aa72 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801aa6e:	2301      	movs	r3, #1
 801aa70:	75fb      	strb	r3, [r7, #23]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801aa72:	7dfb      	ldrb	r3, [r7, #23]
 801aa74:	009b      	lsls	r3, r3, #2
 801aa76:	b2db      	uxtb	r3, r3
 801aa78:	f003 0304 	and.w	r3, r3, #4
 801aa7c:	75bb      	strb	r3, [r7, #22]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801aa7e:	7dbb      	ldrb	r3, [r7, #22]
 801aa80:	b29b      	uxth	r3, r3
 801aa82:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801aa86:	4619      	mov	r1, r3
 801aa88:	2036      	movs	r0, #54	@ 0x36
 801aa8a:	f7f9 febf 	bl	801480c <pbuf_alloc>
 801aa8e:	60f8      	str	r0, [r7, #12]
 801aa90:	68fb      	ldr	r3, [r7, #12]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d111      	bne.n	801aaba <tcp_enqueue_flags+0x96>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	8b5b      	ldrh	r3, [r3, #26]
 801aa9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aa9e:	b29a      	uxth	r2, r3
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801aaa4:	4b5a      	ldr	r3, [pc, #360]	@ (801ac10 <tcp_enqueue_flags+0x1ec>)
 801aaa6:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801aaaa:	3301      	adds	r3, #1
 801aaac:	b29a      	uxth	r2, r3
 801aaae:	4b58      	ldr	r3, [pc, #352]	@ (801ac10 <tcp_enqueue_flags+0x1ec>)
 801aab0:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801aab4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801aab8:	e09d      	b.n	801abf6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	895a      	ldrh	r2, [r3, #10]
 801aabe:	7dbb      	ldrb	r3, [r7, #22]
 801aac0:	b29b      	uxth	r3, r3
 801aac2:	429a      	cmp	r2, r3
 801aac4:	d206      	bcs.n	801aad4 <tcp_enqueue_flags+0xb0>
 801aac6:	4b4e      	ldr	r3, [pc, #312]	@ (801ac00 <tcp_enqueue_flags+0x1dc>)
 801aac8:	f240 4239 	movw	r2, #1081	@ 0x439
 801aacc:	4951      	ldr	r1, [pc, #324]	@ (801ac14 <tcp_enqueue_flags+0x1f0>)
 801aace:	484e      	ldr	r0, [pc, #312]	@ (801ac08 <tcp_enqueue_flags+0x1e4>)
 801aad0:	f006 fa00 	bl	8020ed4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801aad8:	78fa      	ldrb	r2, [r7, #3]
 801aada:	7dfb      	ldrb	r3, [r7, #23]
 801aadc:	9300      	str	r3, [sp, #0]
 801aade:	460b      	mov	r3, r1
 801aae0:	68f9      	ldr	r1, [r7, #12]
 801aae2:	6878      	ldr	r0, [r7, #4]
 801aae4:	f7ff f888 	bl	8019bf8 <tcp_create_segment>
 801aae8:	60b8      	str	r0, [r7, #8]
 801aaea:	68bb      	ldr	r3, [r7, #8]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d111      	bne.n	801ab14 <tcp_enqueue_flags+0xf0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	8b5b      	ldrh	r3, [r3, #26]
 801aaf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801aaf8:	b29a      	uxth	r2, r3
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
 801aafe:	4b44      	ldr	r3, [pc, #272]	@ (801ac10 <tcp_enqueue_flags+0x1ec>)
 801ab00:	f8b3 309c 	ldrh.w	r3, [r3, #156]	@ 0x9c
 801ab04:	3301      	adds	r3, #1
 801ab06:	b29a      	uxth	r2, r3
 801ab08:	4b41      	ldr	r3, [pc, #260]	@ (801ac10 <tcp_enqueue_flags+0x1ec>)
 801ab0a:	f8a3 209c 	strh.w	r2, [r3, #156]	@ 0x9c
    return ERR_MEM;
 801ab0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ab12:	e070      	b.n	801abf6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ab14:	68bb      	ldr	r3, [r7, #8]
 801ab16:	691b      	ldr	r3, [r3, #16]
 801ab18:	f003 0303 	and.w	r3, r3, #3
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d006      	beq.n	801ab2e <tcp_enqueue_flags+0x10a>
 801ab20:	4b37      	ldr	r3, [pc, #220]	@ (801ac00 <tcp_enqueue_flags+0x1dc>)
 801ab22:	f240 4242 	movw	r2, #1090	@ 0x442
 801ab26:	493c      	ldr	r1, [pc, #240]	@ (801ac18 <tcp_enqueue_flags+0x1f4>)
 801ab28:	4837      	ldr	r0, [pc, #220]	@ (801ac08 <tcp_enqueue_flags+0x1e4>)
 801ab2a:	f006 f9d3 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ab2e:	68bb      	ldr	r3, [r7, #8]
 801ab30:	891b      	ldrh	r3, [r3, #8]
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d006      	beq.n	801ab44 <tcp_enqueue_flags+0x120>
 801ab36:	4b32      	ldr	r3, [pc, #200]	@ (801ac00 <tcp_enqueue_flags+0x1dc>)
 801ab38:	f240 4243 	movw	r2, #1091	@ 0x443
 801ab3c:	4937      	ldr	r1, [pc, #220]	@ (801ac1c <tcp_enqueue_flags+0x1f8>)
 801ab3e:	4832      	ldr	r0, [pc, #200]	@ (801ac08 <tcp_enqueue_flags+0x1e4>)
 801ab40:	f006 f9c8 	bl	8020ed4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d103      	bne.n	801ab54 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	68ba      	ldr	r2, [r7, #8]
 801ab50:	66da      	str	r2, [r3, #108]	@ 0x6c
 801ab52:	e00d      	b.n	801ab70 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ab58:	613b      	str	r3, [r7, #16]
 801ab5a:	e002      	b.n	801ab62 <tcp_enqueue_flags+0x13e>
 801ab5c:	693b      	ldr	r3, [r7, #16]
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	613b      	str	r3, [r7, #16]
 801ab62:	693b      	ldr	r3, [r7, #16]
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d1f8      	bne.n	801ab5c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801ab6a:	693b      	ldr	r3, [r7, #16]
 801ab6c:	68ba      	ldr	r2, [r7, #8]
 801ab6e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	2200      	movs	r2, #0
 801ab74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801ab78:	78fb      	ldrb	r3, [r7, #3]
 801ab7a:	f003 0302 	and.w	r3, r3, #2
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d104      	bne.n	801ab8c <tcp_enqueue_flags+0x168>
 801ab82:	78fb      	ldrb	r3, [r7, #3]
 801ab84:	f003 0301 	and.w	r3, r3, #1
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d004      	beq.n	801ab96 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab90:	1c5a      	adds	r2, r3, #1
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801ab96:	78fb      	ldrb	r3, [r7, #3]
 801ab98:	f003 0301 	and.w	r3, r3, #1
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d006      	beq.n	801abae <tcp_enqueue_flags+0x18a>
    tcp_set_flags(pcb, TF_FIN);
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	8b5b      	ldrh	r3, [r3, #26]
 801aba4:	f043 0320 	orr.w	r3, r3, #32
 801aba8:	b29a      	uxth	r2, r3
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801abae:	68bb      	ldr	r3, [r7, #8]
 801abb0:	685b      	ldr	r3, [r3, #4]
 801abb2:	4618      	mov	r0, r3
 801abb4:	f7fa f9fc 	bl	8014fb0 <pbuf_clen>
 801abb8:	4603      	mov	r3, r0
 801abba:	461a      	mov	r2, r3
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801abc2:	4413      	add	r3, r2
 801abc4:	b29a      	uxth	r2, r3
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d00e      	beq.n	801abf4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d10a      	bne.n	801abf4 <tcp_enqueue_flags+0x1d0>
 801abde:	687b      	ldr	r3, [r7, #4]
 801abe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d106      	bne.n	801abf4 <tcp_enqueue_flags+0x1d0>
 801abe6:	4b06      	ldr	r3, [pc, #24]	@ (801ac00 <tcp_enqueue_flags+0x1dc>)
 801abe8:	f240 4265 	movw	r2, #1125	@ 0x465
 801abec:	490c      	ldr	r1, [pc, #48]	@ (801ac20 <tcp_enqueue_flags+0x1fc>)
 801abee:	4806      	ldr	r0, [pc, #24]	@ (801ac08 <tcp_enqueue_flags+0x1e4>)
 801abf0:	f006 f970 	bl	8020ed4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801abf4:	2300      	movs	r3, #0
}
 801abf6:	4618      	mov	r0, r3
 801abf8:	3718      	adds	r7, #24
 801abfa:	46bd      	mov	sp, r7
 801abfc:	bd80      	pop	{r7, pc}
 801abfe:	bf00      	nop
 801ac00:	08024cc0 	.word	0x08024cc0
 801ac04:	08025140 	.word	0x08025140
 801ac08:	08024d14 	.word	0x08024d14
 801ac0c:	08025198 	.word	0x08025198
 801ac10:	2002d36c 	.word	0x2002d36c
 801ac14:	080251b8 	.word	0x080251b8
 801ac18:	080251f4 	.word	0x080251f4
 801ac1c:	0802520c 	.word	0x0802520c
 801ac20:	08025238 	.word	0x08025238

0801ac24 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801ac24:	b5b0      	push	{r4, r5, r7, lr}
 801ac26:	b08a      	sub	sp, #40	@ 0x28
 801ac28:	af00      	add	r7, sp, #0
 801ac2a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d106      	bne.n	801ac40 <tcp_output+0x1c>
 801ac32:	4b8a      	ldr	r3, [pc, #552]	@ (801ae5c <tcp_output+0x238>)
 801ac34:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 801ac38:	4989      	ldr	r1, [pc, #548]	@ (801ae60 <tcp_output+0x23c>)
 801ac3a:	488a      	ldr	r0, [pc, #552]	@ (801ae64 <tcp_output+0x240>)
 801ac3c:	f006 f94a 	bl	8020ed4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	7d1b      	ldrb	r3, [r3, #20]
 801ac44:	2b01      	cmp	r3, #1
 801ac46:	d106      	bne.n	801ac56 <tcp_output+0x32>
 801ac48:	4b84      	ldr	r3, [pc, #528]	@ (801ae5c <tcp_output+0x238>)
 801ac4a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801ac4e:	4986      	ldr	r1, [pc, #536]	@ (801ae68 <tcp_output+0x244>)
 801ac50:	4884      	ldr	r0, [pc, #528]	@ (801ae64 <tcp_output+0x240>)
 801ac52:	f006 f93f 	bl	8020ed4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801ac56:	4b85      	ldr	r3, [pc, #532]	@ (801ae6c <tcp_output+0x248>)
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	687a      	ldr	r2, [r7, #4]
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	d101      	bne.n	801ac64 <tcp_output+0x40>
    return ERR_OK;
 801ac60:	2300      	movs	r3, #0
 801ac62:	e1d1      	b.n	801b008 <tcp_output+0x3e4>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801ac64:	687b      	ldr	r3, [r7, #4]
 801ac66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ac70:	4293      	cmp	r3, r2
 801ac72:	bf28      	it	cs
 801ac74:	4613      	movcs	r3, r2
 801ac76:	b29b      	uxth	r3, r3
 801ac78:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ac7e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801ac80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d10b      	bne.n	801ac9e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	8b5b      	ldrh	r3, [r3, #26]
 801ac8a:	f003 0302 	and.w	r3, r3, #2
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	f000 81ad 	beq.w	801afee <tcp_output+0x3ca>
      return tcp_send_empty_ack(pcb);
 801ac94:	6878      	ldr	r0, [r7, #4]
 801ac96:	f000 fdeb 	bl	801b870 <tcp_send_empty_ack>
 801ac9a:	4603      	mov	r3, r0
 801ac9c:	e1b4      	b.n	801b008 <tcp_output+0x3e4>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801ac9e:	6879      	ldr	r1, [r7, #4]
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	3304      	adds	r3, #4
 801aca4:	461a      	mov	r2, r3
 801aca6:	6878      	ldr	r0, [r7, #4]
 801aca8:	f7fe ff8a 	bl	8019bc0 <tcp_route>
 801acac:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801acae:	697b      	ldr	r3, [r7, #20]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d102      	bne.n	801acba <tcp_output+0x96>
    return ERR_RTE;
 801acb4:	f06f 0303 	mvn.w	r3, #3
 801acb8:	e1a6      	b.n	801b008 <tcp_output+0x3e4>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d003      	beq.n	801acc8 <tcp_output+0xa4>
 801acc0:	687b      	ldr	r3, [r7, #4]
 801acc2:	681b      	ldr	r3, [r3, #0]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d111      	bne.n	801acec <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801acc8:	697b      	ldr	r3, [r7, #20]
 801acca:	2b00      	cmp	r3, #0
 801accc:	d002      	beq.n	801acd4 <tcp_output+0xb0>
 801acce:	697b      	ldr	r3, [r7, #20]
 801acd0:	3304      	adds	r3, #4
 801acd2:	e000      	b.n	801acd6 <tcp_output+0xb2>
 801acd4:	2300      	movs	r3, #0
 801acd6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801acd8:	693b      	ldr	r3, [r7, #16]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	d102      	bne.n	801ace4 <tcp_output+0xc0>
      return ERR_RTE;
 801acde:	f06f 0303 	mvn.w	r3, #3
 801ace2:	e191      	b.n	801b008 <tcp_output+0x3e4>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801ace4:	693b      	ldr	r3, [r7, #16]
 801ace6:	681a      	ldr	r2, [r3, #0]
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801acec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acee:	691b      	ldr	r3, [r3, #16]
 801acf0:	685b      	ldr	r3, [r3, #4]
 801acf2:	4618      	mov	r0, r3
 801acf4:	f7f8 fa9e 	bl	8013234 <lwip_htonl>
 801acf8:	4602      	mov	r2, r0
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801acfe:	1ad3      	subs	r3, r2, r3
 801ad00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ad02:	8912      	ldrh	r2, [r2, #8]
 801ad04:	4413      	add	r3, r2
 801ad06:	69ba      	ldr	r2, [r7, #24]
 801ad08:	429a      	cmp	r2, r3
 801ad0a:	d227      	bcs.n	801ad5c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801ad12:	461a      	mov	r2, r3
 801ad14:	69bb      	ldr	r3, [r7, #24]
 801ad16:	4293      	cmp	r3, r2
 801ad18:	d114      	bne.n	801ad44 <tcp_output+0x120>
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d110      	bne.n	801ad44 <tcp_output+0x120>
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801ad28:	2b00      	cmp	r3, #0
 801ad2a:	d10b      	bne.n	801ad44 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	2200      	movs	r2, #0
 801ad30:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	2201      	movs	r2, #1
 801ad38:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	2200      	movs	r2, #0
 801ad40:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	8b5b      	ldrh	r3, [r3, #26]
 801ad48:	f003 0302 	and.w	r3, r3, #2
 801ad4c:	2b00      	cmp	r3, #0
 801ad4e:	f000 8150 	beq.w	801aff2 <tcp_output+0x3ce>
      return tcp_send_empty_ack(pcb);
 801ad52:	6878      	ldr	r0, [r7, #4]
 801ad54:	f000 fd8c 	bl	801b870 <tcp_send_empty_ack>
 801ad58:	4603      	mov	r3, r0
 801ad5a:	e155      	b.n	801b008 <tcp_output+0x3e4>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	2200      	movs	r2, #0
 801ad60:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad68:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801ad6a:	6a3b      	ldr	r3, [r7, #32]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	f000 811f 	beq.w	801afb0 <tcp_output+0x38c>
    for (; useg->next != NULL; useg = useg->next);
 801ad72:	e002      	b.n	801ad7a <tcp_output+0x156>
 801ad74:	6a3b      	ldr	r3, [r7, #32]
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	623b      	str	r3, [r7, #32]
 801ad7a:	6a3b      	ldr	r3, [r7, #32]
 801ad7c:	681b      	ldr	r3, [r3, #0]
 801ad7e:	2b00      	cmp	r3, #0
 801ad80:	d1f8      	bne.n	801ad74 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801ad82:	e115      	b.n	801afb0 <tcp_output+0x38c>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801ad84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ad86:	691b      	ldr	r3, [r3, #16]
 801ad88:	899b      	ldrh	r3, [r3, #12]
 801ad8a:	b29b      	uxth	r3, r3
 801ad8c:	4618      	mov	r0, r3
 801ad8e:	f7f8 fa3b 	bl	8013208 <lwip_htons>
 801ad92:	4603      	mov	r3, r0
 801ad94:	b2db      	uxtb	r3, r3
 801ad96:	f003 0304 	and.w	r3, r3, #4
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d006      	beq.n	801adac <tcp_output+0x188>
 801ad9e:	4b2f      	ldr	r3, [pc, #188]	@ (801ae5c <tcp_output+0x238>)
 801ada0:	f240 5236 	movw	r2, #1334	@ 0x536
 801ada4:	4932      	ldr	r1, [pc, #200]	@ (801ae70 <tcp_output+0x24c>)
 801ada6:	482f      	ldr	r0, [pc, #188]	@ (801ae64 <tcp_output+0x240>)
 801ada8:	f006 f894 	bl	8020ed4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801adac:	687b      	ldr	r3, [r7, #4]
 801adae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801adb0:	2b00      	cmp	r3, #0
 801adb2:	d01f      	beq.n	801adf4 <tcp_output+0x1d0>
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	8b5b      	ldrh	r3, [r3, #26]
 801adb8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d119      	bne.n	801adf4 <tcp_output+0x1d0>
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801adc4:	2b00      	cmp	r3, #0
 801adc6:	d00b      	beq.n	801ade0 <tcp_output+0x1bc>
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801adcc:	681b      	ldr	r3, [r3, #0]
 801adce:	2b00      	cmp	r3, #0
 801add0:	d110      	bne.n	801adf4 <tcp_output+0x1d0>
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801add6:	891a      	ldrh	r2, [r3, #8]
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801addc:	429a      	cmp	r2, r3
 801adde:	d209      	bcs.n	801adf4 <tcp_output+0x1d0>
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801ade6:	2b00      	cmp	r3, #0
 801ade8:	d004      	beq.n	801adf4 <tcp_output+0x1d0>
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801adf0:	2b08      	cmp	r3, #8
 801adf2:	d901      	bls.n	801adf8 <tcp_output+0x1d4>
 801adf4:	2301      	movs	r3, #1
 801adf6:	e000      	b.n	801adfa <tcp_output+0x1d6>
 801adf8:	2300      	movs	r3, #0
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	d106      	bne.n	801ae0c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	8b5b      	ldrh	r3, [r3, #26]
 801ae02:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	f000 80e7 	beq.w	801afda <tcp_output+0x3b6>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	7d1b      	ldrb	r3, [r3, #20]
 801ae10:	2b02      	cmp	r3, #2
 801ae12:	d00d      	beq.n	801ae30 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801ae14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae16:	691b      	ldr	r3, [r3, #16]
 801ae18:	899b      	ldrh	r3, [r3, #12]
 801ae1a:	b29c      	uxth	r4, r3
 801ae1c:	2010      	movs	r0, #16
 801ae1e:	f7f8 f9f3 	bl	8013208 <lwip_htons>
 801ae22:	4603      	mov	r3, r0
 801ae24:	461a      	mov	r2, r3
 801ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae28:	691b      	ldr	r3, [r3, #16]
 801ae2a:	4322      	orrs	r2, r4
 801ae2c:	b292      	uxth	r2, r2
 801ae2e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801ae30:	697a      	ldr	r2, [r7, #20]
 801ae32:	6879      	ldr	r1, [r7, #4]
 801ae34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ae36:	f000 f90b 	bl	801b050 <tcp_output_segment>
 801ae3a:	4603      	mov	r3, r0
 801ae3c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801ae3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d016      	beq.n	801ae74 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	8b5b      	ldrh	r3, [r3, #26]
 801ae4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ae4e:	b29a      	uxth	r2, r3
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	835a      	strh	r2, [r3, #26]
      return err;
 801ae54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae58:	e0d6      	b.n	801b008 <tcp_output+0x3e4>
 801ae5a:	bf00      	nop
 801ae5c:	08024cc0 	.word	0x08024cc0
 801ae60:	08025260 	.word	0x08025260
 801ae64:	08024d14 	.word	0x08024d14
 801ae68:	08025278 	.word	0x08025278
 801ae6c:	2002d4bc 	.word	0x2002d4bc
 801ae70:	080252a0 	.word	0x080252a0
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 801ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae76:	2200      	movs	r2, #0
 801ae78:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801ae7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae7c:	681a      	ldr	r2, [r3, #0]
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	7d1b      	ldrb	r3, [r3, #20]
 801ae86:	2b02      	cmp	r3, #2
 801ae88:	d006      	beq.n	801ae98 <tcp_output+0x274>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	8b5b      	ldrh	r3, [r3, #26]
 801ae8e:	f023 0303 	bic.w	r3, r3, #3
 801ae92:	b29a      	uxth	r2, r3
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ae98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae9a:	691b      	ldr	r3, [r3, #16]
 801ae9c:	685b      	ldr	r3, [r3, #4]
 801ae9e:	4618      	mov	r0, r3
 801aea0:	f7f8 f9c8 	bl	8013234 <lwip_htonl>
 801aea4:	4604      	mov	r4, r0
 801aea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aea8:	891b      	ldrh	r3, [r3, #8]
 801aeaa:	461d      	mov	r5, r3
 801aeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeae:	691b      	ldr	r3, [r3, #16]
 801aeb0:	899b      	ldrh	r3, [r3, #12]
 801aeb2:	b29b      	uxth	r3, r3
 801aeb4:	4618      	mov	r0, r3
 801aeb6:	f7f8 f9a7 	bl	8013208 <lwip_htons>
 801aeba:	4603      	mov	r3, r0
 801aebc:	b2db      	uxtb	r3, r3
 801aebe:	f003 0303 	and.w	r3, r3, #3
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d001      	beq.n	801aeca <tcp_output+0x2a6>
 801aec6:	2301      	movs	r3, #1
 801aec8:	e000      	b.n	801aecc <tcp_output+0x2a8>
 801aeca:	2300      	movs	r3, #0
 801aecc:	442b      	add	r3, r5
 801aece:	4423      	add	r3, r4
 801aed0:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801aed6:	68bb      	ldr	r3, [r7, #8]
 801aed8:	1ad3      	subs	r3, r2, r3
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	da02      	bge.n	801aee4 <tcp_output+0x2c0>
      pcb->snd_nxt = snd_nxt;
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	68ba      	ldr	r2, [r7, #8]
 801aee2:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801aee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aee6:	891b      	ldrh	r3, [r3, #8]
 801aee8:	461c      	mov	r4, r3
 801aeea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801aeec:	691b      	ldr	r3, [r3, #16]
 801aeee:	899b      	ldrh	r3, [r3, #12]
 801aef0:	b29b      	uxth	r3, r3
 801aef2:	4618      	mov	r0, r3
 801aef4:	f7f8 f988 	bl	8013208 <lwip_htons>
 801aef8:	4603      	mov	r3, r0
 801aefa:	b2db      	uxtb	r3, r3
 801aefc:	f003 0303 	and.w	r3, r3, #3
 801af00:	2b00      	cmp	r3, #0
 801af02:	d001      	beq.n	801af08 <tcp_output+0x2e4>
 801af04:	2301      	movs	r3, #1
 801af06:	e000      	b.n	801af0a <tcp_output+0x2e6>
 801af08:	2300      	movs	r3, #0
 801af0a:	4423      	add	r3, r4
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d049      	beq.n	801afa4 <tcp_output+0x380>
      seg->next = NULL;
 801af10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af12:	2200      	movs	r2, #0
 801af14:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d105      	bne.n	801af2a <tcp_output+0x306>
        pcb->unacked = seg;
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801af22:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801af24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af26:	623b      	str	r3, [r7, #32]
 801af28:	e03f      	b.n	801afaa <tcp_output+0x386>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801af2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af2c:	691b      	ldr	r3, [r3, #16]
 801af2e:	685b      	ldr	r3, [r3, #4]
 801af30:	4618      	mov	r0, r3
 801af32:	f7f8 f97f 	bl	8013234 <lwip_htonl>
 801af36:	4604      	mov	r4, r0
 801af38:	6a3b      	ldr	r3, [r7, #32]
 801af3a:	691b      	ldr	r3, [r3, #16]
 801af3c:	685b      	ldr	r3, [r3, #4]
 801af3e:	4618      	mov	r0, r3
 801af40:	f7f8 f978 	bl	8013234 <lwip_htonl>
 801af44:	4603      	mov	r3, r0
 801af46:	1ae3      	subs	r3, r4, r3
 801af48:	2b00      	cmp	r3, #0
 801af4a:	da24      	bge.n	801af96 <tcp_output+0x372>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	3370      	adds	r3, #112	@ 0x70
 801af50:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801af52:	e002      	b.n	801af5a <tcp_output+0x336>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801af54:	69fb      	ldr	r3, [r7, #28]
 801af56:	681b      	ldr	r3, [r3, #0]
 801af58:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801af5a:	69fb      	ldr	r3, [r7, #28]
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d011      	beq.n	801af86 <tcp_output+0x362>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801af62:	69fb      	ldr	r3, [r7, #28]
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	691b      	ldr	r3, [r3, #16]
 801af68:	685b      	ldr	r3, [r3, #4]
 801af6a:	4618      	mov	r0, r3
 801af6c:	f7f8 f962 	bl	8013234 <lwip_htonl>
 801af70:	4604      	mov	r4, r0
 801af72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af74:	691b      	ldr	r3, [r3, #16]
 801af76:	685b      	ldr	r3, [r3, #4]
 801af78:	4618      	mov	r0, r3
 801af7a:	f7f8 f95b 	bl	8013234 <lwip_htonl>
 801af7e:	4603      	mov	r3, r0
 801af80:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801af82:	2b00      	cmp	r3, #0
 801af84:	dbe6      	blt.n	801af54 <tcp_output+0x330>
          }
          seg->next = (*cur_seg);
 801af86:	69fb      	ldr	r3, [r7, #28]
 801af88:	681a      	ldr	r2, [r3, #0]
 801af8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801af8c:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801af8e:	69fb      	ldr	r3, [r7, #28]
 801af90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801af92:	601a      	str	r2, [r3, #0]
 801af94:	e009      	b.n	801afaa <tcp_output+0x386>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801af96:	6a3b      	ldr	r3, [r7, #32]
 801af98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801af9a:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801af9c:	6a3b      	ldr	r3, [r7, #32]
 801af9e:	681b      	ldr	r3, [r3, #0]
 801afa0:	623b      	str	r3, [r7, #32]
 801afa2:	e002      	b.n	801afaa <tcp_output+0x386>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801afa4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801afa6:	f7fb fdea 	bl	8016b7e <tcp_seg_free>
    }
    seg = pcb->unsent;
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801afae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 801afb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d012      	beq.n	801afdc <tcp_output+0x3b8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801afb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afb8:	691b      	ldr	r3, [r3, #16]
 801afba:	685b      	ldr	r3, [r3, #4]
 801afbc:	4618      	mov	r0, r3
 801afbe:	f7f8 f939 	bl	8013234 <lwip_htonl>
 801afc2:	4602      	mov	r2, r0
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801afc8:	1ad3      	subs	r3, r2, r3
 801afca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801afcc:	8912      	ldrh	r2, [r2, #8]
 801afce:	4413      	add	r3, r2
  while (seg != NULL &&
 801afd0:	69ba      	ldr	r2, [r7, #24]
 801afd2:	429a      	cmp	r2, r3
 801afd4:	f4bf aed6 	bcs.w	801ad84 <tcp_output+0x160>
 801afd8:	e000      	b.n	801afdc <tcp_output+0x3b8>
      break;
 801afda:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801afe0:	2b00      	cmp	r3, #0
 801afe2:	d108      	bne.n	801aff6 <tcp_output+0x3d2>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	2200      	movs	r2, #0
 801afe8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 801afec:	e004      	b.n	801aff8 <tcp_output+0x3d4>
    goto output_done;
 801afee:	bf00      	nop
 801aff0:	e002      	b.n	801aff8 <tcp_output+0x3d4>
    goto output_done;
 801aff2:	bf00      	nop
 801aff4:	e000      	b.n	801aff8 <tcp_output+0x3d4>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801aff6:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	8b5b      	ldrh	r3, [r3, #26]
 801affc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801b000:	b29a      	uxth	r2, r3
 801b002:	687b      	ldr	r3, [r7, #4]
 801b004:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801b006:	2300      	movs	r3, #0
}
 801b008:	4618      	mov	r0, r3
 801b00a:	3728      	adds	r7, #40	@ 0x28
 801b00c:	46bd      	mov	sp, r7
 801b00e:	bdb0      	pop	{r4, r5, r7, pc}

0801b010 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801b010:	b580      	push	{r7, lr}
 801b012:	b082      	sub	sp, #8
 801b014:	af00      	add	r7, sp, #0
 801b016:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d106      	bne.n	801b02c <tcp_output_segment_busy+0x1c>
 801b01e:	4b09      	ldr	r3, [pc, #36]	@ (801b044 <tcp_output_segment_busy+0x34>)
 801b020:	f240 529a 	movw	r2, #1434	@ 0x59a
 801b024:	4908      	ldr	r1, [pc, #32]	@ (801b048 <tcp_output_segment_busy+0x38>)
 801b026:	4809      	ldr	r0, [pc, #36]	@ (801b04c <tcp_output_segment_busy+0x3c>)
 801b028:	f005 ff54 	bl	8020ed4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	685b      	ldr	r3, [r3, #4]
 801b030:	7b9b      	ldrb	r3, [r3, #14]
 801b032:	2b01      	cmp	r3, #1
 801b034:	d001      	beq.n	801b03a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801b036:	2301      	movs	r3, #1
 801b038:	e000      	b.n	801b03c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801b03a:	2300      	movs	r3, #0
}
 801b03c:	4618      	mov	r0, r3
 801b03e:	3708      	adds	r7, #8
 801b040:	46bd      	mov	sp, r7
 801b042:	bd80      	pop	{r7, pc}
 801b044:	08024cc0 	.word	0x08024cc0
 801b048:	080252b8 	.word	0x080252b8
 801b04c:	08024d14 	.word	0x08024d14

0801b050 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801b050:	b5b0      	push	{r4, r5, r7, lr}
 801b052:	b08c      	sub	sp, #48	@ 0x30
 801b054:	af04      	add	r7, sp, #16
 801b056:	60f8      	str	r0, [r7, #12]
 801b058:	60b9      	str	r1, [r7, #8]
 801b05a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801b05c:	68fb      	ldr	r3, [r7, #12]
 801b05e:	2b00      	cmp	r3, #0
 801b060:	d106      	bne.n	801b070 <tcp_output_segment+0x20>
 801b062:	4b68      	ldr	r3, [pc, #416]	@ (801b204 <tcp_output_segment+0x1b4>)
 801b064:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 801b068:	4967      	ldr	r1, [pc, #412]	@ (801b208 <tcp_output_segment+0x1b8>)
 801b06a:	4868      	ldr	r0, [pc, #416]	@ (801b20c <tcp_output_segment+0x1bc>)
 801b06c:	f005 ff32 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801b070:	68bb      	ldr	r3, [r7, #8]
 801b072:	2b00      	cmp	r3, #0
 801b074:	d106      	bne.n	801b084 <tcp_output_segment+0x34>
 801b076:	4b63      	ldr	r3, [pc, #396]	@ (801b204 <tcp_output_segment+0x1b4>)
 801b078:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 801b07c:	4964      	ldr	r1, [pc, #400]	@ (801b210 <tcp_output_segment+0x1c0>)
 801b07e:	4863      	ldr	r0, [pc, #396]	@ (801b20c <tcp_output_segment+0x1bc>)
 801b080:	f005 ff28 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d106      	bne.n	801b098 <tcp_output_segment+0x48>
 801b08a:	4b5e      	ldr	r3, [pc, #376]	@ (801b204 <tcp_output_segment+0x1b4>)
 801b08c:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 801b090:	4960      	ldr	r1, [pc, #384]	@ (801b214 <tcp_output_segment+0x1c4>)
 801b092:	485e      	ldr	r0, [pc, #376]	@ (801b20c <tcp_output_segment+0x1bc>)
 801b094:	f005 ff1e 	bl	8020ed4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801b098:	68f8      	ldr	r0, [r7, #12]
 801b09a:	f7ff ffb9 	bl	801b010 <tcp_output_segment_busy>
 801b09e:	4603      	mov	r3, r0
 801b0a0:	2b00      	cmp	r3, #0
 801b0a2:	d001      	beq.n	801b0a8 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	e0a9      	b.n	801b1fc <tcp_output_segment+0x1ac>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	691c      	ldr	r4, [r3, #16]
 801b0b0:	4610      	mov	r0, r2
 801b0b2:	f7f8 f8bf 	bl	8013234 <lwip_htonl>
 801b0b6:	4603      	mov	r3, r0
 801b0b8:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801b0ba:	68bb      	ldr	r3, [r7, #8]
 801b0bc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801b0be:	68fb      	ldr	r3, [r7, #12]
 801b0c0:	691c      	ldr	r4, [r3, #16]
 801b0c2:	4610      	mov	r0, r2
 801b0c4:	f7f8 f8a0 	bl	8013208 <lwip_htons>
 801b0c8:	4603      	mov	r3, r0
 801b0ca:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b0cc:	68bb      	ldr	r3, [r7, #8]
 801b0ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b0d0:	68ba      	ldr	r2, [r7, #8]
 801b0d2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b0d4:	441a      	add	r2, r3
 801b0d6:	68bb      	ldr	r3, [r7, #8]
 801b0d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801b0da:	68fb      	ldr	r3, [r7, #12]
 801b0dc:	691b      	ldr	r3, [r3, #16]
 801b0de:	3314      	adds	r3, #20
 801b0e0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	7b1b      	ldrb	r3, [r3, #12]
 801b0e6:	f003 0301 	and.w	r3, r3, #1
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d015      	beq.n	801b11a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801b0ee:	68bb      	ldr	r3, [r7, #8]
 801b0f0:	3304      	adds	r3, #4
 801b0f2:	461a      	mov	r2, r3
 801b0f4:	6879      	ldr	r1, [r7, #4]
 801b0f6:	f44f 7006 	mov.w	r0, #536	@ 0x218
 801b0fa:	f7fc f92f 	bl	801735c <tcp_eff_send_mss_netif>
 801b0fe:	4603      	mov	r3, r0
 801b100:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801b102:	8b7b      	ldrh	r3, [r7, #26]
 801b104:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 801b108:	4618      	mov	r0, r3
 801b10a:	f7f8 f893 	bl	8013234 <lwip_htonl>
 801b10e:	4602      	mov	r2, r0
 801b110:	69fb      	ldr	r3, [r7, #28]
 801b112:	601a      	str	r2, [r3, #0]
    opts += 1;
 801b114:	69fb      	ldr	r3, [r7, #28]
 801b116:	3304      	adds	r3, #4
 801b118:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801b11a:	68bb      	ldr	r3, [r7, #8]
 801b11c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801b120:	2b00      	cmp	r3, #0
 801b122:	da02      	bge.n	801b12a <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801b124:	68bb      	ldr	r3, [r7, #8]
 801b126:	2200      	movs	r2, #0
 801b128:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d10c      	bne.n	801b14c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801b132:	4b39      	ldr	r3, [pc, #228]	@ (801b218 <tcp_output_segment+0x1c8>)
 801b134:	681a      	ldr	r2, [r3, #0]
 801b136:	68bb      	ldr	r3, [r7, #8]
 801b138:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801b13a:	68fb      	ldr	r3, [r7, #12]
 801b13c:	691b      	ldr	r3, [r3, #16]
 801b13e:	685b      	ldr	r3, [r3, #4]
 801b140:	4618      	mov	r0, r3
 801b142:	f7f8 f877 	bl	8013234 <lwip_htonl>
 801b146:	4602      	mov	r2, r0
 801b148:	68bb      	ldr	r3, [r7, #8]
 801b14a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801b14c:	68fb      	ldr	r3, [r7, #12]
 801b14e:	691a      	ldr	r2, [r3, #16]
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	685b      	ldr	r3, [r3, #4]
 801b154:	685b      	ldr	r3, [r3, #4]
 801b156:	1ad3      	subs	r3, r2, r3
 801b158:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801b15a:	68fb      	ldr	r3, [r7, #12]
 801b15c:	685b      	ldr	r3, [r3, #4]
 801b15e:	8959      	ldrh	r1, [r3, #10]
 801b160:	68fb      	ldr	r3, [r7, #12]
 801b162:	685b      	ldr	r3, [r3, #4]
 801b164:	8b3a      	ldrh	r2, [r7, #24]
 801b166:	1a8a      	subs	r2, r1, r2
 801b168:	b292      	uxth	r2, r2
 801b16a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801b16c:	68fb      	ldr	r3, [r7, #12]
 801b16e:	685b      	ldr	r3, [r3, #4]
 801b170:	8919      	ldrh	r1, [r3, #8]
 801b172:	68fb      	ldr	r3, [r7, #12]
 801b174:	685b      	ldr	r3, [r3, #4]
 801b176:	8b3a      	ldrh	r2, [r7, #24]
 801b178:	1a8a      	subs	r2, r1, r2
 801b17a:	b292      	uxth	r2, r2
 801b17c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	685b      	ldr	r3, [r3, #4]
 801b182:	68fa      	ldr	r2, [r7, #12]
 801b184:	6912      	ldr	r2, [r2, #16]
 801b186:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	691b      	ldr	r3, [r3, #16]
 801b18c:	2200      	movs	r2, #0
 801b18e:	741a      	strb	r2, [r3, #16]
 801b190:	2200      	movs	r2, #0
 801b192:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801b194:	68fb      	ldr	r3, [r7, #12]
 801b196:	691a      	ldr	r2, [r3, #16]
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	7b1b      	ldrb	r3, [r3, #12]
 801b19c:	f003 0301 	and.w	r3, r3, #1
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d001      	beq.n	801b1a8 <tcp_output_segment+0x158>
 801b1a4:	2318      	movs	r3, #24
 801b1a6:	e000      	b.n	801b1aa <tcp_output_segment+0x15a>
 801b1a8:	2314      	movs	r3, #20
 801b1aa:	4413      	add	r3, r2
 801b1ac:	69fa      	ldr	r2, [r7, #28]
 801b1ae:	429a      	cmp	r2, r3
 801b1b0:	d006      	beq.n	801b1c0 <tcp_output_segment+0x170>
 801b1b2:	4b14      	ldr	r3, [pc, #80]	@ (801b204 <tcp_output_segment+0x1b4>)
 801b1b4:	f240 621c 	movw	r2, #1564	@ 0x61c
 801b1b8:	4918      	ldr	r1, [pc, #96]	@ (801b21c <tcp_output_segment+0x1cc>)
 801b1ba:	4814      	ldr	r0, [pc, #80]	@ (801b20c <tcp_output_segment+0x1bc>)
 801b1bc:	f005 fe8a 	bl	8020ed4 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
                                           seg->p->tot_len, &pcb->local_ip, &pcb->remote_ip);
#endif /* TCP_CHECKSUM_ON_COPY */
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);
 801b1c0:	4b17      	ldr	r3, [pc, #92]	@ (801b220 <tcp_output_segment+0x1d0>)
 801b1c2:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b1c6:	3301      	adds	r3, #1
 801b1c8:	b29a      	uxth	r2, r3
 801b1ca:	4b15      	ldr	r3, [pc, #84]	@ (801b220 <tcp_output_segment+0x1d0>)
 801b1cc:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801b1d0:	68fb      	ldr	r3, [r7, #12]
 801b1d2:	6858      	ldr	r0, [r3, #4]
 801b1d4:	68b9      	ldr	r1, [r7, #8]
 801b1d6:	68bb      	ldr	r3, [r7, #8]
 801b1d8:	1d1c      	adds	r4, r3, #4
 801b1da:	68bb      	ldr	r3, [r7, #8]
 801b1dc:	7add      	ldrb	r5, [r3, #11]
 801b1de:	68bb      	ldr	r3, [r7, #8]
 801b1e0:	7a9b      	ldrb	r3, [r3, #10]
 801b1e2:	687a      	ldr	r2, [r7, #4]
 801b1e4:	9202      	str	r2, [sp, #8]
 801b1e6:	2206      	movs	r2, #6
 801b1e8:	9201      	str	r2, [sp, #4]
 801b1ea:	9300      	str	r3, [sp, #0]
 801b1ec:	462b      	mov	r3, r5
 801b1ee:	4622      	mov	r2, r4
 801b1f0:	f003 fa1a 	bl	801e628 <ip4_output_if>
 801b1f4:	4603      	mov	r3, r0
 801b1f6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801b1f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b1fc:	4618      	mov	r0, r3
 801b1fe:	3720      	adds	r7, #32
 801b200:	46bd      	mov	sp, r7
 801b202:	bdb0      	pop	{r4, r5, r7, pc}
 801b204:	08024cc0 	.word	0x08024cc0
 801b208:	080252e0 	.word	0x080252e0
 801b20c:	08024d14 	.word	0x08024d14
 801b210:	08025300 	.word	0x08025300
 801b214:	08025320 	.word	0x08025320
 801b218:	2002d46c 	.word	0x2002d46c
 801b21c:	08025344 	.word	0x08025344
 801b220:	2002d36c 	.word	0x2002d36c

0801b224 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801b224:	b5b0      	push	{r4, r5, r7, lr}
 801b226:	b084      	sub	sp, #16
 801b228:	af00      	add	r7, sp, #0
 801b22a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d106      	bne.n	801b240 <tcp_rexmit_rto_prepare+0x1c>
 801b232:	4b36      	ldr	r3, [pc, #216]	@ (801b30c <tcp_rexmit_rto_prepare+0xe8>)
 801b234:	f240 6263 	movw	r2, #1635	@ 0x663
 801b238:	4935      	ldr	r1, [pc, #212]	@ (801b310 <tcp_rexmit_rto_prepare+0xec>)
 801b23a:	4836      	ldr	r0, [pc, #216]	@ (801b314 <tcp_rexmit_rto_prepare+0xf0>)
 801b23c:	f005 fe4a 	bl	8020ed4 <iprintf>

  if (pcb->unacked == NULL) {
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b244:	2b00      	cmp	r3, #0
 801b246:	d102      	bne.n	801b24e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801b248:	f06f 0305 	mvn.w	r3, #5
 801b24c:	e059      	b.n	801b302 <tcp_rexmit_rto_prepare+0xde>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b252:	60fb      	str	r3, [r7, #12]
 801b254:	e00b      	b.n	801b26e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801b256:	68f8      	ldr	r0, [r7, #12]
 801b258:	f7ff feda 	bl	801b010 <tcp_output_segment_busy>
 801b25c:	4603      	mov	r3, r0
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d002      	beq.n	801b268 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801b262:	f06f 0305 	mvn.w	r3, #5
 801b266:	e04c      	b.n	801b302 <tcp_rexmit_rto_prepare+0xde>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	681b      	ldr	r3, [r3, #0]
 801b26c:	60fb      	str	r3, [r7, #12]
 801b26e:	68fb      	ldr	r3, [r7, #12]
 801b270:	681b      	ldr	r3, [r3, #0]
 801b272:	2b00      	cmp	r3, #0
 801b274:	d1ef      	bne.n	801b256 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801b276:	68f8      	ldr	r0, [r7, #12]
 801b278:	f7ff feca 	bl	801b010 <tcp_output_segment_busy>
 801b27c:	4603      	mov	r3, r0
 801b27e:	2b00      	cmp	r3, #0
 801b280:	d002      	beq.n	801b288 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801b282:	f06f 0305 	mvn.w	r3, #5
 801b286:	e03c      	b.n	801b302 <tcp_rexmit_rto_prepare+0xde>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b294:	2b00      	cmp	r3, #0
 801b296:	d104      	bne.n	801b2a2 <tcp_rexmit_rto_prepare+0x7e>
    pcb->unsent_oversize = seg->oversize_left;
 801b298:	68fb      	ldr	r3, [r7, #12]
 801b29a:	895a      	ldrh	r2, [r3, #10]
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	2200      	movs	r2, #0
 801b2ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	8b5b      	ldrh	r3, [r3, #26]
 801b2b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801b2b8:	b29a      	uxth	r2, r3
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801b2be:	68fb      	ldr	r3, [r7, #12]
 801b2c0:	691b      	ldr	r3, [r3, #16]
 801b2c2:	685b      	ldr	r3, [r3, #4]
 801b2c4:	4618      	mov	r0, r3
 801b2c6:	f7f7 ffb5 	bl	8013234 <lwip_htonl>
 801b2ca:	4604      	mov	r4, r0
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	891b      	ldrh	r3, [r3, #8]
 801b2d0:	461d      	mov	r5, r3
 801b2d2:	68fb      	ldr	r3, [r7, #12]
 801b2d4:	691b      	ldr	r3, [r3, #16]
 801b2d6:	899b      	ldrh	r3, [r3, #12]
 801b2d8:	b29b      	uxth	r3, r3
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f7f7 ff94 	bl	8013208 <lwip_htons>
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	b2db      	uxtb	r3, r3
 801b2e4:	f003 0303 	and.w	r3, r3, #3
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d001      	beq.n	801b2f0 <tcp_rexmit_rto_prepare+0xcc>
 801b2ec:	2301      	movs	r3, #1
 801b2ee:	e000      	b.n	801b2f2 <tcp_rexmit_rto_prepare+0xce>
 801b2f0:	2300      	movs	r3, #0
 801b2f2:	442b      	add	r3, r5
 801b2f4:	18e2      	adds	r2, r4, r3
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	2200      	movs	r2, #0
 801b2fe:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 801b300:	2300      	movs	r3, #0
}
 801b302:	4618      	mov	r0, r3
 801b304:	3710      	adds	r7, #16
 801b306:	46bd      	mov	sp, r7
 801b308:	bdb0      	pop	{r4, r5, r7, pc}
 801b30a:	bf00      	nop
 801b30c:	08024cc0 	.word	0x08024cc0
 801b310:	08025358 	.word	0x08025358
 801b314:	08024d14 	.word	0x08024d14

0801b318 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801b318:	b580      	push	{r7, lr}
 801b31a:	b082      	sub	sp, #8
 801b31c:	af00      	add	r7, sp, #0
 801b31e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	2b00      	cmp	r3, #0
 801b324:	d106      	bne.n	801b334 <tcp_rexmit_rto_commit+0x1c>
 801b326:	4b0d      	ldr	r3, [pc, #52]	@ (801b35c <tcp_rexmit_rto_commit+0x44>)
 801b328:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801b32c:	490c      	ldr	r1, [pc, #48]	@ (801b360 <tcp_rexmit_rto_commit+0x48>)
 801b32e:	480d      	ldr	r0, [pc, #52]	@ (801b364 <tcp_rexmit_rto_commit+0x4c>)
 801b330:	f005 fdd0 	bl	8020ed4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801b334:	687b      	ldr	r3, [r7, #4]
 801b336:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b33a:	2bff      	cmp	r3, #255	@ 0xff
 801b33c:	d007      	beq.n	801b34e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b344:	3301      	adds	r3, #1
 801b346:	b2da      	uxtb	r2, r3
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801b34e:	6878      	ldr	r0, [r7, #4]
 801b350:	f7ff fc68 	bl	801ac24 <tcp_output>
}
 801b354:	bf00      	nop
 801b356:	3708      	adds	r7, #8
 801b358:	46bd      	mov	sp, r7
 801b35a:	bd80      	pop	{r7, pc}
 801b35c:	08024cc0 	.word	0x08024cc0
 801b360:	0802537c 	.word	0x0802537c
 801b364:	08024d14 	.word	0x08024d14

0801b368 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	b082      	sub	sp, #8
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d106      	bne.n	801b384 <tcp_rexmit_rto+0x1c>
 801b376:	4b0a      	ldr	r3, [pc, #40]	@ (801b3a0 <tcp_rexmit_rto+0x38>)
 801b378:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801b37c:	4909      	ldr	r1, [pc, #36]	@ (801b3a4 <tcp_rexmit_rto+0x3c>)
 801b37e:	480a      	ldr	r0, [pc, #40]	@ (801b3a8 <tcp_rexmit_rto+0x40>)
 801b380:	f005 fda8 	bl	8020ed4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	f7ff ff4d 	bl	801b224 <tcp_rexmit_rto_prepare>
 801b38a:	4603      	mov	r3, r0
 801b38c:	2b00      	cmp	r3, #0
 801b38e:	d102      	bne.n	801b396 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801b390:	6878      	ldr	r0, [r7, #4]
 801b392:	f7ff ffc1 	bl	801b318 <tcp_rexmit_rto_commit>
  }
}
 801b396:	bf00      	nop
 801b398:	3708      	adds	r7, #8
 801b39a:	46bd      	mov	sp, r7
 801b39c:	bd80      	pop	{r7, pc}
 801b39e:	bf00      	nop
 801b3a0:	08024cc0 	.word	0x08024cc0
 801b3a4:	080253a0 	.word	0x080253a0
 801b3a8:	08024d14 	.word	0x08024d14

0801b3ac <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801b3ac:	b590      	push	{r4, r7, lr}
 801b3ae:	b085      	sub	sp, #20
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	2b00      	cmp	r3, #0
 801b3b8:	d106      	bne.n	801b3c8 <tcp_rexmit+0x1c>
 801b3ba:	4b2f      	ldr	r3, [pc, #188]	@ (801b478 <tcp_rexmit+0xcc>)
 801b3bc:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 801b3c0:	492e      	ldr	r1, [pc, #184]	@ (801b47c <tcp_rexmit+0xd0>)
 801b3c2:	482f      	ldr	r0, [pc, #188]	@ (801b480 <tcp_rexmit+0xd4>)
 801b3c4:	f005 fd86 	bl	8020ed4 <iprintf>

  if (pcb->unacked == NULL) {
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d102      	bne.n	801b3d6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801b3d0:	f06f 0305 	mvn.w	r3, #5
 801b3d4:	e04c      	b.n	801b470 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b3da:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801b3dc:	68b8      	ldr	r0, [r7, #8]
 801b3de:	f7ff fe17 	bl	801b010 <tcp_output_segment_busy>
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	2b00      	cmp	r3, #0
 801b3e6:	d002      	beq.n	801b3ee <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801b3e8:	f06f 0305 	mvn.w	r3, #5
 801b3ec:	e040      	b.n	801b470 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801b3ee:	68bb      	ldr	r3, [r7, #8]
 801b3f0:	681a      	ldr	r2, [r3, #0]
 801b3f2:	687b      	ldr	r3, [r7, #4]
 801b3f4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	336c      	adds	r3, #108	@ 0x6c
 801b3fa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b3fc:	e002      	b.n	801b404 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	d011      	beq.n	801b430 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	681b      	ldr	r3, [r3, #0]
 801b410:	691b      	ldr	r3, [r3, #16]
 801b412:	685b      	ldr	r3, [r3, #4]
 801b414:	4618      	mov	r0, r3
 801b416:	f7f7 ff0d 	bl	8013234 <lwip_htonl>
 801b41a:	4604      	mov	r4, r0
 801b41c:	68bb      	ldr	r3, [r7, #8]
 801b41e:	691b      	ldr	r3, [r3, #16]
 801b420:	685b      	ldr	r3, [r3, #4]
 801b422:	4618      	mov	r0, r3
 801b424:	f7f7 ff06 	bl	8013234 <lwip_htonl>
 801b428:	4603      	mov	r3, r0
 801b42a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	dbe6      	blt.n	801b3fe <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	681a      	ldr	r2, [r3, #0]
 801b434:	68bb      	ldr	r3, [r7, #8]
 801b436:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801b438:	68fb      	ldr	r3, [r7, #12]
 801b43a:	68ba      	ldr	r2, [r7, #8]
 801b43c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801b43e:	68bb      	ldr	r3, [r7, #8]
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d103      	bne.n	801b44e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	2200      	movs	r2, #0
 801b44a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b454:	2bff      	cmp	r3, #255	@ 0xff
 801b456:	d007      	beq.n	801b468 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801b45e:	3301      	adds	r3, #1
 801b460:	b2da      	uxtb	r2, r3
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	2200      	movs	r2, #0
 801b46c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801b46e:	2300      	movs	r3, #0
}
 801b470:	4618      	mov	r0, r3
 801b472:	3714      	adds	r7, #20
 801b474:	46bd      	mov	sp, r7
 801b476:	bd90      	pop	{r4, r7, pc}
 801b478:	08024cc0 	.word	0x08024cc0
 801b47c:	080253bc 	.word	0x080253bc
 801b480:	08024d14 	.word	0x08024d14

0801b484 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801b484:	b580      	push	{r7, lr}
 801b486:	b082      	sub	sp, #8
 801b488:	af00      	add	r7, sp, #0
 801b48a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801b48c:	687b      	ldr	r3, [r7, #4]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d106      	bne.n	801b4a0 <tcp_rexmit_fast+0x1c>
 801b492:	4b2a      	ldr	r3, [pc, #168]	@ (801b53c <tcp_rexmit_fast+0xb8>)
 801b494:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 801b498:	4929      	ldr	r1, [pc, #164]	@ (801b540 <tcp_rexmit_fast+0xbc>)
 801b49a:	482a      	ldr	r0, [pc, #168]	@ (801b544 <tcp_rexmit_fast+0xc0>)
 801b49c:	f005 fd1a 	bl	8020ed4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d045      	beq.n	801b534 <tcp_rexmit_fast+0xb0>
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	8b5b      	ldrh	r3, [r3, #26]
 801b4ac:	f003 0304 	and.w	r3, r3, #4
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d13f      	bne.n	801b534 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801b4b4:	6878      	ldr	r0, [r7, #4]
 801b4b6:	f7ff ff79 	bl	801b3ac <tcp_rexmit>
 801b4ba:	4603      	mov	r3, r0
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d139      	bne.n	801b534 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801b4cc:	4293      	cmp	r3, r2
 801b4ce:	bf28      	it	cs
 801b4d0:	4613      	movcs	r3, r2
 801b4d2:	b29b      	uxth	r3, r3
 801b4d4:	2b00      	cmp	r3, #0
 801b4d6:	da00      	bge.n	801b4da <tcp_rexmit_fast+0x56>
 801b4d8:	3301      	adds	r3, #1
 801b4da:	105b      	asrs	r3, r3, #1
 801b4dc:	b29a      	uxth	r2, r3
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801b4ea:	461a      	mov	r2, r3
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b4f0:	005b      	lsls	r3, r3, #1
 801b4f2:	429a      	cmp	r2, r3
 801b4f4:	d206      	bcs.n	801b504 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801b4f6:	687b      	ldr	r3, [r7, #4]
 801b4f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b4fa:	005b      	lsls	r3, r3, #1
 801b4fc:	b29a      	uxth	r2, r3
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801b50e:	4619      	mov	r1, r3
 801b510:	0049      	lsls	r1, r1, #1
 801b512:	440b      	add	r3, r1
 801b514:	b29b      	uxth	r3, r3
 801b516:	4413      	add	r3, r2
 801b518:	b29a      	uxth	r2, r3
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	8b5b      	ldrh	r3, [r3, #26]
 801b524:	f043 0304 	orr.w	r3, r3, #4
 801b528:	b29a      	uxth	r2, r3
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	2200      	movs	r2, #0
 801b532:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 801b534:	bf00      	nop
 801b536:	3708      	adds	r7, #8
 801b538:	46bd      	mov	sp, r7
 801b53a:	bd80      	pop	{r7, pc}
 801b53c:	08024cc0 	.word	0x08024cc0
 801b540:	080253d4 	.word	0x080253d4
 801b544:	08024d14 	.word	0x08024d14

0801b548 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801b548:	b580      	push	{r7, lr}
 801b54a:	b086      	sub	sp, #24
 801b54c:	af00      	add	r7, sp, #0
 801b54e:	60f8      	str	r0, [r7, #12]
 801b550:	607b      	str	r3, [r7, #4]
 801b552:	460b      	mov	r3, r1
 801b554:	817b      	strh	r3, [r7, #10]
 801b556:	4613      	mov	r3, r2
 801b558:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801b55a:	897a      	ldrh	r2, [r7, #10]
 801b55c:	893b      	ldrh	r3, [r7, #8]
 801b55e:	4413      	add	r3, r2
 801b560:	b29b      	uxth	r3, r3
 801b562:	3314      	adds	r3, #20
 801b564:	b29b      	uxth	r3, r3
 801b566:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b56a:	4619      	mov	r1, r3
 801b56c:	2022      	movs	r0, #34	@ 0x22
 801b56e:	f7f9 f94d 	bl	801480c <pbuf_alloc>
 801b572:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801b574:	697b      	ldr	r3, [r7, #20]
 801b576:	2b00      	cmp	r3, #0
 801b578:	d04d      	beq.n	801b616 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801b57a:	897b      	ldrh	r3, [r7, #10]
 801b57c:	3313      	adds	r3, #19
 801b57e:	697a      	ldr	r2, [r7, #20]
 801b580:	8952      	ldrh	r2, [r2, #10]
 801b582:	4293      	cmp	r3, r2
 801b584:	db06      	blt.n	801b594 <tcp_output_alloc_header_common+0x4c>
 801b586:	4b26      	ldr	r3, [pc, #152]	@ (801b620 <tcp_output_alloc_header_common+0xd8>)
 801b588:	f240 7223 	movw	r2, #1827	@ 0x723
 801b58c:	4925      	ldr	r1, [pc, #148]	@ (801b624 <tcp_output_alloc_header_common+0xdc>)
 801b58e:	4826      	ldr	r0, [pc, #152]	@ (801b628 <tcp_output_alloc_header_common+0xe0>)
 801b590:	f005 fca0 	bl	8020ed4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801b594:	697b      	ldr	r3, [r7, #20]
 801b596:	685b      	ldr	r3, [r3, #4]
 801b598:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801b59a:	8c3b      	ldrh	r3, [r7, #32]
 801b59c:	4618      	mov	r0, r3
 801b59e:	f7f7 fe33 	bl	8013208 <lwip_htons>
 801b5a2:	4603      	mov	r3, r0
 801b5a4:	461a      	mov	r2, r3
 801b5a6:	693b      	ldr	r3, [r7, #16]
 801b5a8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801b5aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	f7f7 fe2b 	bl	8013208 <lwip_htons>
 801b5b2:	4603      	mov	r3, r0
 801b5b4:	461a      	mov	r2, r3
 801b5b6:	693b      	ldr	r3, [r7, #16]
 801b5b8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801b5ba:	693b      	ldr	r3, [r7, #16]
 801b5bc:	687a      	ldr	r2, [r7, #4]
 801b5be:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801b5c0:	68f8      	ldr	r0, [r7, #12]
 801b5c2:	f7f7 fe37 	bl	8013234 <lwip_htonl>
 801b5c6:	4602      	mov	r2, r0
 801b5c8:	693b      	ldr	r3, [r7, #16]
 801b5ca:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801b5cc:	897b      	ldrh	r3, [r7, #10]
 801b5ce:	089b      	lsrs	r3, r3, #2
 801b5d0:	b29b      	uxth	r3, r3
 801b5d2:	3305      	adds	r3, #5
 801b5d4:	b29b      	uxth	r3, r3
 801b5d6:	031b      	lsls	r3, r3, #12
 801b5d8:	b29a      	uxth	r2, r3
 801b5da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801b5de:	b29b      	uxth	r3, r3
 801b5e0:	4313      	orrs	r3, r2
 801b5e2:	b29b      	uxth	r3, r3
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7f7 fe0f 	bl	8013208 <lwip_htons>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	461a      	mov	r2, r3
 801b5ee:	693b      	ldr	r3, [r7, #16]
 801b5f0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801b5f2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b5f4:	4618      	mov	r0, r3
 801b5f6:	f7f7 fe07 	bl	8013208 <lwip_htons>
 801b5fa:	4603      	mov	r3, r0
 801b5fc:	461a      	mov	r2, r3
 801b5fe:	693b      	ldr	r3, [r7, #16]
 801b600:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801b602:	693b      	ldr	r3, [r7, #16]
 801b604:	2200      	movs	r2, #0
 801b606:	741a      	strb	r2, [r3, #16]
 801b608:	2200      	movs	r2, #0
 801b60a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801b60c:	693b      	ldr	r3, [r7, #16]
 801b60e:	2200      	movs	r2, #0
 801b610:	749a      	strb	r2, [r3, #18]
 801b612:	2200      	movs	r2, #0
 801b614:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801b616:	697b      	ldr	r3, [r7, #20]
}
 801b618:	4618      	mov	r0, r3
 801b61a:	3718      	adds	r7, #24
 801b61c:	46bd      	mov	sp, r7
 801b61e:	bd80      	pop	{r7, pc}
 801b620:	08024cc0 	.word	0x08024cc0
 801b624:	080253f4 	.word	0x080253f4
 801b628:	08024d14 	.word	0x08024d14

0801b62c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801b62c:	b5b0      	push	{r4, r5, r7, lr}
 801b62e:	b08a      	sub	sp, #40	@ 0x28
 801b630:	af04      	add	r7, sp, #16
 801b632:	60f8      	str	r0, [r7, #12]
 801b634:	607b      	str	r3, [r7, #4]
 801b636:	460b      	mov	r3, r1
 801b638:	817b      	strh	r3, [r7, #10]
 801b63a:	4613      	mov	r3, r2
 801b63c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801b63e:	68fb      	ldr	r3, [r7, #12]
 801b640:	2b00      	cmp	r3, #0
 801b642:	d106      	bne.n	801b652 <tcp_output_alloc_header+0x26>
 801b644:	4b15      	ldr	r3, [pc, #84]	@ (801b69c <tcp_output_alloc_header+0x70>)
 801b646:	f240 7242 	movw	r2, #1858	@ 0x742
 801b64a:	4915      	ldr	r1, [pc, #84]	@ (801b6a0 <tcp_output_alloc_header+0x74>)
 801b64c:	4815      	ldr	r0, [pc, #84]	@ (801b6a4 <tcp_output_alloc_header+0x78>)
 801b64e:	f005 fc41 	bl	8020ed4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	8adb      	ldrh	r3, [r3, #22]
 801b65a:	68fa      	ldr	r2, [r7, #12]
 801b65c:	8b12      	ldrh	r2, [r2, #24]
 801b65e:	68f9      	ldr	r1, [r7, #12]
 801b660:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 801b662:	893d      	ldrh	r5, [r7, #8]
 801b664:	897c      	ldrh	r4, [r7, #10]
 801b666:	9103      	str	r1, [sp, #12]
 801b668:	2110      	movs	r1, #16
 801b66a:	9102      	str	r1, [sp, #8]
 801b66c:	9201      	str	r2, [sp, #4]
 801b66e:	9300      	str	r3, [sp, #0]
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	462a      	mov	r2, r5
 801b674:	4621      	mov	r1, r4
 801b676:	f7ff ff67 	bl	801b548 <tcp_output_alloc_header_common>
 801b67a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801b67c:	697b      	ldr	r3, [r7, #20]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d006      	beq.n	801b690 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801b682:	68fb      	ldr	r3, [r7, #12]
 801b684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b686:	68fa      	ldr	r2, [r7, #12]
 801b688:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801b68a:	441a      	add	r2, r3
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 801b690:	697b      	ldr	r3, [r7, #20]
}
 801b692:	4618      	mov	r0, r3
 801b694:	3718      	adds	r7, #24
 801b696:	46bd      	mov	sp, r7
 801b698:	bdb0      	pop	{r4, r5, r7, pc}
 801b69a:	bf00      	nop
 801b69c:	08024cc0 	.word	0x08024cc0
 801b6a0:	08025424 	.word	0x08025424
 801b6a4:	08024d14 	.word	0x08024d14

0801b6a8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801b6a8:	b580      	push	{r7, lr}
 801b6aa:	b088      	sub	sp, #32
 801b6ac:	af00      	add	r7, sp, #0
 801b6ae:	60f8      	str	r0, [r7, #12]
 801b6b0:	60b9      	str	r1, [r7, #8]
 801b6b2:	4611      	mov	r1, r2
 801b6b4:	461a      	mov	r2, r3
 801b6b6:	460b      	mov	r3, r1
 801b6b8:	71fb      	strb	r3, [r7, #7]
 801b6ba:	4613      	mov	r3, r2
 801b6bc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801b6be:	2300      	movs	r3, #0
 801b6c0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801b6c2:	68bb      	ldr	r3, [r7, #8]
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	d106      	bne.n	801b6d6 <tcp_output_fill_options+0x2e>
 801b6c8:	4b12      	ldr	r3, [pc, #72]	@ (801b714 <tcp_output_fill_options+0x6c>)
 801b6ca:	f240 7256 	movw	r2, #1878	@ 0x756
 801b6ce:	4912      	ldr	r1, [pc, #72]	@ (801b718 <tcp_output_fill_options+0x70>)
 801b6d0:	4812      	ldr	r0, [pc, #72]	@ (801b71c <tcp_output_fill_options+0x74>)
 801b6d2:	f005 fbff 	bl	8020ed4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801b6d6:	68bb      	ldr	r3, [r7, #8]
 801b6d8:	685b      	ldr	r3, [r3, #4]
 801b6da:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801b6dc:	69bb      	ldr	r3, [r7, #24]
 801b6de:	3314      	adds	r3, #20
 801b6e0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801b6e2:	8bfb      	ldrh	r3, [r7, #30]
 801b6e4:	009b      	lsls	r3, r3, #2
 801b6e6:	461a      	mov	r2, r3
 801b6e8:	79fb      	ldrb	r3, [r7, #7]
 801b6ea:	009b      	lsls	r3, r3, #2
 801b6ec:	f003 0304 	and.w	r3, r3, #4
 801b6f0:	4413      	add	r3, r2
 801b6f2:	3314      	adds	r3, #20
 801b6f4:	69ba      	ldr	r2, [r7, #24]
 801b6f6:	4413      	add	r3, r2
 801b6f8:	697a      	ldr	r2, [r7, #20]
 801b6fa:	429a      	cmp	r2, r3
 801b6fc:	d006      	beq.n	801b70c <tcp_output_fill_options+0x64>
 801b6fe:	4b05      	ldr	r3, [pc, #20]	@ (801b714 <tcp_output_fill_options+0x6c>)
 801b700:	f240 7275 	movw	r2, #1909	@ 0x775
 801b704:	4906      	ldr	r1, [pc, #24]	@ (801b720 <tcp_output_fill_options+0x78>)
 801b706:	4805      	ldr	r0, [pc, #20]	@ (801b71c <tcp_output_fill_options+0x74>)
 801b708:	f005 fbe4 	bl	8020ed4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801b70c:	bf00      	nop
 801b70e:	3720      	adds	r7, #32
 801b710:	46bd      	mov	sp, r7
 801b712:	bd80      	pop	{r7, pc}
 801b714:	08024cc0 	.word	0x08024cc0
 801b718:	0802544c 	.word	0x0802544c
 801b71c:	08024d14 	.word	0x08024d14
 801b720:	08025344 	.word	0x08025344

0801b724 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801b724:	b580      	push	{r7, lr}
 801b726:	b08a      	sub	sp, #40	@ 0x28
 801b728:	af04      	add	r7, sp, #16
 801b72a:	60f8      	str	r0, [r7, #12]
 801b72c:	60b9      	str	r1, [r7, #8]
 801b72e:	607a      	str	r2, [r7, #4]
 801b730:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801b732:	68bb      	ldr	r3, [r7, #8]
 801b734:	2b00      	cmp	r3, #0
 801b736:	d106      	bne.n	801b746 <tcp_output_control_segment+0x22>
 801b738:	4b20      	ldr	r3, [pc, #128]	@ (801b7bc <tcp_output_control_segment+0x98>)
 801b73a:	f240 7287 	movw	r2, #1927	@ 0x787
 801b73e:	4920      	ldr	r1, [pc, #128]	@ (801b7c0 <tcp_output_control_segment+0x9c>)
 801b740:	4820      	ldr	r0, [pc, #128]	@ (801b7c4 <tcp_output_control_segment+0xa0>)
 801b742:	f005 fbc7 	bl	8020ed4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801b746:	683a      	ldr	r2, [r7, #0]
 801b748:	6879      	ldr	r1, [r7, #4]
 801b74a:	68f8      	ldr	r0, [r7, #12]
 801b74c:	f7fe fa38 	bl	8019bc0 <tcp_route>
 801b750:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801b752:	693b      	ldr	r3, [r7, #16]
 801b754:	2b00      	cmp	r3, #0
 801b756:	d102      	bne.n	801b75e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801b758:	23fc      	movs	r3, #252	@ 0xfc
 801b75a:	75fb      	strb	r3, [r7, #23]
 801b75c:	e024      	b.n	801b7a8 <tcp_output_control_segment+0x84>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801b75e:	68fb      	ldr	r3, [r7, #12]
 801b760:	2b00      	cmp	r3, #0
 801b762:	d006      	beq.n	801b772 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801b764:	68fb      	ldr	r3, [r7, #12]
 801b766:	7adb      	ldrb	r3, [r3, #11]
 801b768:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	7a9b      	ldrb	r3, [r3, #10]
 801b76e:	757b      	strb	r3, [r7, #21]
 801b770:	e003      	b.n	801b77a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801b772:	23ff      	movs	r3, #255	@ 0xff
 801b774:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801b776:	2300      	movs	r3, #0
 801b778:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
 801b77a:	4b13      	ldr	r3, [pc, #76]	@ (801b7c8 <tcp_output_control_segment+0xa4>)
 801b77c:	f8b3 3090 	ldrh.w	r3, [r3, #144]	@ 0x90
 801b780:	3301      	adds	r3, #1
 801b782:	b29a      	uxth	r2, r3
 801b784:	4b10      	ldr	r3, [pc, #64]	@ (801b7c8 <tcp_output_control_segment+0xa4>)
 801b786:	f8a3 2090 	strh.w	r2, [r3, #144]	@ 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801b78a:	7dba      	ldrb	r2, [r7, #22]
 801b78c:	693b      	ldr	r3, [r7, #16]
 801b78e:	9302      	str	r3, [sp, #8]
 801b790:	2306      	movs	r3, #6
 801b792:	9301      	str	r3, [sp, #4]
 801b794:	7d7b      	ldrb	r3, [r7, #21]
 801b796:	9300      	str	r3, [sp, #0]
 801b798:	4613      	mov	r3, r2
 801b79a:	683a      	ldr	r2, [r7, #0]
 801b79c:	6879      	ldr	r1, [r7, #4]
 801b79e:	68b8      	ldr	r0, [r7, #8]
 801b7a0:	f002 ff42 	bl	801e628 <ip4_output_if>
 801b7a4:	4603      	mov	r3, r0
 801b7a6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801b7a8:	68b8      	ldr	r0, [r7, #8]
 801b7aa:	f7f9 fb5b 	bl	8014e64 <pbuf_free>
  return err;
 801b7ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	3718      	adds	r7, #24
 801b7b6:	46bd      	mov	sp, r7
 801b7b8:	bd80      	pop	{r7, pc}
 801b7ba:	bf00      	nop
 801b7bc:	08024cc0 	.word	0x08024cc0
 801b7c0:	08025474 	.word	0x08025474
 801b7c4:	08024d14 	.word	0x08024d14
 801b7c8:	2002d36c 	.word	0x2002d36c

0801b7cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801b7cc:	b590      	push	{r4, r7, lr}
 801b7ce:	b08b      	sub	sp, #44	@ 0x2c
 801b7d0:	af04      	add	r7, sp, #16
 801b7d2:	60f8      	str	r0, [r7, #12]
 801b7d4:	60b9      	str	r1, [r7, #8]
 801b7d6:	607a      	str	r2, [r7, #4]
 801b7d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801b7da:	683b      	ldr	r3, [r7, #0]
 801b7dc:	2b00      	cmp	r3, #0
 801b7de:	d106      	bne.n	801b7ee <tcp_rst+0x22>
 801b7e0:	4b1f      	ldr	r3, [pc, #124]	@ (801b860 <tcp_rst+0x94>)
 801b7e2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801b7e6:	491f      	ldr	r1, [pc, #124]	@ (801b864 <tcp_rst+0x98>)
 801b7e8:	481f      	ldr	r0, [pc, #124]	@ (801b868 <tcp_rst+0x9c>)
 801b7ea:	f005 fb73 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801b7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d106      	bne.n	801b802 <tcp_rst+0x36>
 801b7f4:	4b1a      	ldr	r3, [pc, #104]	@ (801b860 <tcp_rst+0x94>)
 801b7f6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801b7fa:	491c      	ldr	r1, [pc, #112]	@ (801b86c <tcp_rst+0xa0>)
 801b7fc:	481a      	ldr	r0, [pc, #104]	@ (801b868 <tcp_rst+0x9c>)
 801b7fe:	f005 fb69 	bl	8020ed4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b802:	2300      	movs	r3, #0
 801b804:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801b806:	f246 0308 	movw	r3, #24584	@ 0x6008
 801b80a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801b80c:	7dfb      	ldrb	r3, [r7, #23]
 801b80e:	b29c      	uxth	r4, r3
 801b810:	68b8      	ldr	r0, [r7, #8]
 801b812:	f7f7 fd0f 	bl	8013234 <lwip_htonl>
 801b816:	4602      	mov	r2, r0
 801b818:	8abb      	ldrh	r3, [r7, #20]
 801b81a:	9303      	str	r3, [sp, #12]
 801b81c:	2314      	movs	r3, #20
 801b81e:	9302      	str	r3, [sp, #8]
 801b820:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801b822:	9301      	str	r3, [sp, #4]
 801b824:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b826:	9300      	str	r3, [sp, #0]
 801b828:	4613      	mov	r3, r2
 801b82a:	2200      	movs	r2, #0
 801b82c:	4621      	mov	r1, r4
 801b82e:	6878      	ldr	r0, [r7, #4]
 801b830:	f7ff fe8a 	bl	801b548 <tcp_output_alloc_header_common>
 801b834:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801b836:	693b      	ldr	r3, [r7, #16]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d00c      	beq.n	801b856 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b83c:	7dfb      	ldrb	r3, [r7, #23]
 801b83e:	2200      	movs	r2, #0
 801b840:	6939      	ldr	r1, [r7, #16]
 801b842:	68f8      	ldr	r0, [r7, #12]
 801b844:	f7ff ff30 	bl	801b6a8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801b848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b84a:	683a      	ldr	r2, [r7, #0]
 801b84c:	6939      	ldr	r1, [r7, #16]
 801b84e:	68f8      	ldr	r0, [r7, #12]
 801b850:	f7ff ff68 	bl	801b724 <tcp_output_control_segment>
 801b854:	e000      	b.n	801b858 <tcp_rst+0x8c>
    return;
 801b856:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801b858:	371c      	adds	r7, #28
 801b85a:	46bd      	mov	sp, r7
 801b85c:	bd90      	pop	{r4, r7, pc}
 801b85e:	bf00      	nop
 801b860:	08024cc0 	.word	0x08024cc0
 801b864:	080254a0 	.word	0x080254a0
 801b868:	08024d14 	.word	0x08024d14
 801b86c:	080254bc 	.word	0x080254bc

0801b870 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801b870:	b590      	push	{r4, r7, lr}
 801b872:	b087      	sub	sp, #28
 801b874:	af00      	add	r7, sp, #0
 801b876:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801b878:	2300      	movs	r3, #0
 801b87a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801b87c:	2300      	movs	r3, #0
 801b87e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	2b00      	cmp	r3, #0
 801b884:	d106      	bne.n	801b894 <tcp_send_empty_ack+0x24>
 801b886:	4b28      	ldr	r3, [pc, #160]	@ (801b928 <tcp_send_empty_ack+0xb8>)
 801b888:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801b88c:	4927      	ldr	r1, [pc, #156]	@ (801b92c <tcp_send_empty_ack+0xbc>)
 801b88e:	4828      	ldr	r0, [pc, #160]	@ (801b930 <tcp_send_empty_ack+0xc0>)
 801b890:	f005 fb20 	bl	8020ed4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801b894:	7dfb      	ldrb	r3, [r7, #23]
 801b896:	009b      	lsls	r3, r3, #2
 801b898:	b2db      	uxtb	r3, r3
 801b89a:	f003 0304 	and.w	r3, r3, #4
 801b89e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801b8a0:	7d7b      	ldrb	r3, [r7, #21]
 801b8a2:	b29c      	uxth	r4, r3
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	f7f7 fcc3 	bl	8013234 <lwip_htonl>
 801b8ae:	4603      	mov	r3, r0
 801b8b0:	2200      	movs	r2, #0
 801b8b2:	4621      	mov	r1, r4
 801b8b4:	6878      	ldr	r0, [r7, #4]
 801b8b6:	f7ff feb9 	bl	801b62c <tcp_output_alloc_header>
 801b8ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801b8bc:	693b      	ldr	r3, [r7, #16]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d109      	bne.n	801b8d6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b8c2:	687b      	ldr	r3, [r7, #4]
 801b8c4:	8b5b      	ldrh	r3, [r3, #26]
 801b8c6:	f043 0303 	orr.w	r3, r3, #3
 801b8ca:	b29a      	uxth	r2, r3
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801b8d0:	f06f 0301 	mvn.w	r3, #1
 801b8d4:	e023      	b.n	801b91e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801b8d6:	7dbb      	ldrb	r3, [r7, #22]
 801b8d8:	7dfa      	ldrb	r2, [r7, #23]
 801b8da:	6939      	ldr	r1, [r7, #16]
 801b8dc:	6878      	ldr	r0, [r7, #4]
 801b8de:	f7ff fee3 	bl	801b6a8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b8e2:	687a      	ldr	r2, [r7, #4]
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	3304      	adds	r3, #4
 801b8e8:	6939      	ldr	r1, [r7, #16]
 801b8ea:	6878      	ldr	r0, [r7, #4]
 801b8ec:	f7ff ff1a 	bl	801b724 <tcp_output_control_segment>
 801b8f0:	4603      	mov	r3, r0
 801b8f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801b8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d007      	beq.n	801b90c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	8b5b      	ldrh	r3, [r3, #26]
 801b900:	f043 0303 	orr.w	r3, r3, #3
 801b904:	b29a      	uxth	r2, r3
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	835a      	strh	r2, [r3, #26]
 801b90a:	e006      	b.n	801b91a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	8b5b      	ldrh	r3, [r3, #26]
 801b910:	f023 0303 	bic.w	r3, r3, #3
 801b914:	b29a      	uxth	r2, r3
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801b91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b91e:	4618      	mov	r0, r3
 801b920:	371c      	adds	r7, #28
 801b922:	46bd      	mov	sp, r7
 801b924:	bd90      	pop	{r4, r7, pc}
 801b926:	bf00      	nop
 801b928:	08024cc0 	.word	0x08024cc0
 801b92c:	080254d8 	.word	0x080254d8
 801b930:	08024d14 	.word	0x08024d14

0801b934 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801b934:	b590      	push	{r4, r7, lr}
 801b936:	b085      	sub	sp, #20
 801b938:	af00      	add	r7, sp, #0
 801b93a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b93c:	2300      	movs	r3, #0
 801b93e:	72bb      	strb	r3, [r7, #10]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	2b00      	cmp	r3, #0
 801b944:	d106      	bne.n	801b954 <tcp_keepalive+0x20>
 801b946:	4b18      	ldr	r3, [pc, #96]	@ (801b9a8 <tcp_keepalive+0x74>)
 801b948:	f640 0224 	movw	r2, #2084	@ 0x824
 801b94c:	4917      	ldr	r1, [pc, #92]	@ (801b9ac <tcp_keepalive+0x78>)
 801b94e:	4818      	ldr	r0, [pc, #96]	@ (801b9b0 <tcp_keepalive+0x7c>)
 801b950:	f005 fac0 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801b954:	7abb      	ldrb	r3, [r7, #10]
 801b956:	b29c      	uxth	r4, r3
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b95c:	3b01      	subs	r3, #1
 801b95e:	4618      	mov	r0, r3
 801b960:	f7f7 fc68 	bl	8013234 <lwip_htonl>
 801b964:	4603      	mov	r3, r0
 801b966:	2200      	movs	r2, #0
 801b968:	4621      	mov	r1, r4
 801b96a:	6878      	ldr	r0, [r7, #4]
 801b96c:	f7ff fe5e 	bl	801b62c <tcp_output_alloc_header>
 801b970:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	2b00      	cmp	r3, #0
 801b976:	d102      	bne.n	801b97e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801b978:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801b97c:	e010      	b.n	801b9a0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801b97e:	7abb      	ldrb	r3, [r7, #10]
 801b980:	2200      	movs	r2, #0
 801b982:	68f9      	ldr	r1, [r7, #12]
 801b984:	6878      	ldr	r0, [r7, #4]
 801b986:	f7ff fe8f 	bl	801b6a8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801b98a:	687a      	ldr	r2, [r7, #4]
 801b98c:	687b      	ldr	r3, [r7, #4]
 801b98e:	3304      	adds	r3, #4
 801b990:	68f9      	ldr	r1, [r7, #12]
 801b992:	6878      	ldr	r0, [r7, #4]
 801b994:	f7ff fec6 	bl	801b724 <tcp_output_control_segment>
 801b998:	4603      	mov	r3, r0
 801b99a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801b99c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	3714      	adds	r7, #20
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd90      	pop	{r4, r7, pc}
 801b9a8:	08024cc0 	.word	0x08024cc0
 801b9ac:	080254f8 	.word	0x080254f8
 801b9b0:	08024d14 	.word	0x08024d14

0801b9b4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801b9b4:	b590      	push	{r4, r7, lr}
 801b9b6:	b08b      	sub	sp, #44	@ 0x2c
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801b9bc:	2300      	movs	r3, #0
 801b9be:	74fb      	strb	r3, [r7, #19]

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	d106      	bne.n	801b9d4 <tcp_zero_window_probe+0x20>
 801b9c6:	4b4d      	ldr	r3, [pc, #308]	@ (801bafc <tcp_zero_window_probe+0x148>)
 801b9c8:	f640 024f 	movw	r2, #2127	@ 0x84f
 801b9cc:	494c      	ldr	r1, [pc, #304]	@ (801bb00 <tcp_zero_window_probe+0x14c>)
 801b9ce:	484d      	ldr	r0, [pc, #308]	@ (801bb04 <tcp_zero_window_probe+0x150>)
 801b9d0:	f005 fa80 	bl	8020ed4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b9d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (seg == NULL) {
 801b9da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	d101      	bne.n	801b9e4 <tcp_zero_window_probe+0x30>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801b9e0:	2300      	movs	r3, #0
 801b9e2:	e087      	b.n	801baf4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b9ea:	2bff      	cmp	r3, #255	@ 0xff
 801b9ec:	d007      	beq.n	801b9fe <tcp_zero_window_probe+0x4a>
    ++pcb->persist_probe;
 801b9ee:	687b      	ldr	r3, [r7, #4]
 801b9f0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801b9f4:	3301      	adds	r3, #1
 801b9f6:	b2da      	uxtb	r2, r3
 801b9f8:	687b      	ldr	r3, [r7, #4]
 801b9fa:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801b9fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba00:	691b      	ldr	r3, [r3, #16]
 801ba02:	899b      	ldrh	r3, [r3, #12]
 801ba04:	b29b      	uxth	r3, r3
 801ba06:	4618      	mov	r0, r3
 801ba08:	f7f7 fbfe 	bl	8013208 <lwip_htons>
 801ba0c:	4603      	mov	r3, r0
 801ba0e:	b2db      	uxtb	r3, r3
 801ba10:	f003 0301 	and.w	r3, r3, #1
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d005      	beq.n	801ba24 <tcp_zero_window_probe+0x70>
 801ba18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba1a:	891b      	ldrh	r3, [r3, #8]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d101      	bne.n	801ba24 <tcp_zero_window_probe+0x70>
 801ba20:	2301      	movs	r3, #1
 801ba22:	e000      	b.n	801ba26 <tcp_zero_window_probe+0x72>
 801ba24:	2300      	movs	r3, #0
 801ba26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801ba2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ba2e:	2b00      	cmp	r3, #0
 801ba30:	bf0c      	ite	eq
 801ba32:	2301      	moveq	r3, #1
 801ba34:	2300      	movne	r3, #0
 801ba36:	b2db      	uxtb	r3, r3
 801ba38:	843b      	strh	r3, [r7, #32]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801ba3a:	7cfb      	ldrb	r3, [r7, #19]
 801ba3c:	b299      	uxth	r1, r3
 801ba3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba40:	691b      	ldr	r3, [r3, #16]
 801ba42:	685b      	ldr	r3, [r3, #4]
 801ba44:	8c3a      	ldrh	r2, [r7, #32]
 801ba46:	6878      	ldr	r0, [r7, #4]
 801ba48:	f7ff fdf0 	bl	801b62c <tcp_output_alloc_header>
 801ba4c:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 801ba4e:	69fb      	ldr	r3, [r7, #28]
 801ba50:	2b00      	cmp	r3, #0
 801ba52:	d102      	bne.n	801ba5a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801ba54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ba58:	e04c      	b.n	801baf4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801ba5a:	69fb      	ldr	r3, [r7, #28]
 801ba5c:	685b      	ldr	r3, [r3, #4]
 801ba5e:	61bb      	str	r3, [r7, #24]

  if (is_fin) {
 801ba60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d011      	beq.n	801ba8c <tcp_zero_window_probe+0xd8>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801ba68:	69bb      	ldr	r3, [r7, #24]
 801ba6a:	899b      	ldrh	r3, [r3, #12]
 801ba6c:	b29b      	uxth	r3, r3
 801ba6e:	b21b      	sxth	r3, r3
 801ba70:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801ba74:	b21c      	sxth	r4, r3
 801ba76:	2011      	movs	r0, #17
 801ba78:	f7f7 fbc6 	bl	8013208 <lwip_htons>
 801ba7c:	4603      	mov	r3, r0
 801ba7e:	b21b      	sxth	r3, r3
 801ba80:	4323      	orrs	r3, r4
 801ba82:	b21b      	sxth	r3, r3
 801ba84:	b29a      	uxth	r2, r3
 801ba86:	69bb      	ldr	r3, [r7, #24]
 801ba88:	819a      	strh	r2, [r3, #12]
 801ba8a:	e010      	b.n	801baae <tcp_zero_window_probe+0xfa>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801ba8c:	69fb      	ldr	r3, [r7, #28]
 801ba8e:	685b      	ldr	r3, [r3, #4]
 801ba90:	3314      	adds	r3, #20
 801ba92:	617b      	str	r3, [r7, #20]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801ba94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba96:	6858      	ldr	r0, [r3, #4]
 801ba98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba9a:	685b      	ldr	r3, [r3, #4]
 801ba9c:	891a      	ldrh	r2, [r3, #8]
 801ba9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baa0:	891b      	ldrh	r3, [r3, #8]
 801baa2:	1ad3      	subs	r3, r2, r3
 801baa4:	b29b      	uxth	r3, r3
 801baa6:	2201      	movs	r2, #1
 801baa8:	6979      	ldr	r1, [r7, #20]
 801baaa:	f7f9 fc0d 	bl	80152c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801baae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bab0:	691b      	ldr	r3, [r3, #16]
 801bab2:	685b      	ldr	r3, [r3, #4]
 801bab4:	4618      	mov	r0, r3
 801bab6:	f7f7 fbbd 	bl	8013234 <lwip_htonl>
 801baba:	4603      	mov	r3, r0
 801babc:	3301      	adds	r3, #1
 801babe:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	1ad3      	subs	r3, r2, r3
 801bac8:	2b00      	cmp	r3, #0
 801baca:	da02      	bge.n	801bad2 <tcp_zero_window_probe+0x11e>
    pcb->snd_nxt = snd_nxt;
 801bacc:	687b      	ldr	r3, [r7, #4]
 801bace:	68fa      	ldr	r2, [r7, #12]
 801bad0:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801bad2:	7cfb      	ldrb	r3, [r7, #19]
 801bad4:	2200      	movs	r2, #0
 801bad6:	69f9      	ldr	r1, [r7, #28]
 801bad8:	6878      	ldr	r0, [r7, #4]
 801bada:	f7ff fde5 	bl	801b6a8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801bade:	687a      	ldr	r2, [r7, #4]
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	3304      	adds	r3, #4
 801bae4:	69f9      	ldr	r1, [r7, #28]
 801bae6:	6878      	ldr	r0, [r7, #4]
 801bae8:	f7ff fe1c 	bl	801b724 <tcp_output_control_segment>
 801baec:	4603      	mov	r3, r0
 801baee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801baf0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801baf4:	4618      	mov	r0, r3
 801baf6:	372c      	adds	r7, #44	@ 0x2c
 801baf8:	46bd      	mov	sp, r7
 801bafa:	bd90      	pop	{r4, r7, pc}
 801bafc:	08024cc0 	.word	0x08024cc0
 801bb00:	08025514 	.word	0x08025514
 801bb04:	08024d14 	.word	0x08024d14

0801bb08 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801bb08:	b580      	push	{r7, lr}
 801bb0a:	b082      	sub	sp, #8
 801bb0c:	af00      	add	r7, sp, #0
 801bb0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801bb10:	f7f9 fe46 	bl	80157a0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801bb14:	4b0a      	ldr	r3, [pc, #40]	@ (801bb40 <tcpip_tcp_timer+0x38>)
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d103      	bne.n	801bb24 <tcpip_tcp_timer+0x1c>
 801bb1c:	4b09      	ldr	r3, [pc, #36]	@ (801bb44 <tcpip_tcp_timer+0x3c>)
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	2b00      	cmp	r3, #0
 801bb22:	d005      	beq.n	801bb30 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bb24:	2200      	movs	r2, #0
 801bb26:	4908      	ldr	r1, [pc, #32]	@ (801bb48 <tcpip_tcp_timer+0x40>)
 801bb28:	20fa      	movs	r0, #250	@ 0xfa
 801bb2a:	f000 f8f3 	bl	801bd14 <sys_timeout>
 801bb2e:	e003      	b.n	801bb38 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801bb30:	4b06      	ldr	r3, [pc, #24]	@ (801bb4c <tcpip_tcp_timer+0x44>)
 801bb32:	2200      	movs	r2, #0
 801bb34:	601a      	str	r2, [r3, #0]
  }
}
 801bb36:	bf00      	nop
 801bb38:	bf00      	nop
 801bb3a:	3708      	adds	r7, #8
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	bd80      	pop	{r7, pc}
 801bb40:	2002d478 	.word	0x2002d478
 801bb44:	2002d47c 	.word	0x2002d47c
 801bb48:	0801bb09 	.word	0x0801bb09
 801bb4c:	2002d4c8 	.word	0x2002d4c8

0801bb50 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801bb50:	b580      	push	{r7, lr}
 801bb52:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801bb54:	4b0a      	ldr	r3, [pc, #40]	@ (801bb80 <tcp_timer_needed+0x30>)
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	2b00      	cmp	r3, #0
 801bb5a:	d10f      	bne.n	801bb7c <tcp_timer_needed+0x2c>
 801bb5c:	4b09      	ldr	r3, [pc, #36]	@ (801bb84 <tcp_timer_needed+0x34>)
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	2b00      	cmp	r3, #0
 801bb62:	d103      	bne.n	801bb6c <tcp_timer_needed+0x1c>
 801bb64:	4b08      	ldr	r3, [pc, #32]	@ (801bb88 <tcp_timer_needed+0x38>)
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d007      	beq.n	801bb7c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801bb6c:	4b04      	ldr	r3, [pc, #16]	@ (801bb80 <tcp_timer_needed+0x30>)
 801bb6e:	2201      	movs	r2, #1
 801bb70:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801bb72:	2200      	movs	r2, #0
 801bb74:	4905      	ldr	r1, [pc, #20]	@ (801bb8c <tcp_timer_needed+0x3c>)
 801bb76:	20fa      	movs	r0, #250	@ 0xfa
 801bb78:	f000 f8cc 	bl	801bd14 <sys_timeout>
  }
}
 801bb7c:	bf00      	nop
 801bb7e:	bd80      	pop	{r7, pc}
 801bb80:	2002d4c8 	.word	0x2002d4c8
 801bb84:	2002d478 	.word	0x2002d478
 801bb88:	2002d47c 	.word	0x2002d47c
 801bb8c:	0801bb09 	.word	0x0801bb09

0801bb90 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801bb90:	b580      	push	{r7, lr}
 801bb92:	b086      	sub	sp, #24
 801bb94:	af00      	add	r7, sp, #0
 801bb96:	60f8      	str	r0, [r7, #12]
 801bb98:	60b9      	str	r1, [r7, #8]
 801bb9a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801bb9c:	200a      	movs	r0, #10
 801bb9e:	f7f8 f8ff 	bl	8013da0 <memp_malloc>
 801bba2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801bba4:	693b      	ldr	r3, [r7, #16]
 801bba6:	2b00      	cmp	r3, #0
 801bba8:	d109      	bne.n	801bbbe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801bbaa:	693b      	ldr	r3, [r7, #16]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	d151      	bne.n	801bc54 <sys_timeout_abs+0xc4>
 801bbb0:	4b2a      	ldr	r3, [pc, #168]	@ (801bc5c <sys_timeout_abs+0xcc>)
 801bbb2:	22be      	movs	r2, #190	@ 0xbe
 801bbb4:	492a      	ldr	r1, [pc, #168]	@ (801bc60 <sys_timeout_abs+0xd0>)
 801bbb6:	482b      	ldr	r0, [pc, #172]	@ (801bc64 <sys_timeout_abs+0xd4>)
 801bbb8:	f005 f98c 	bl	8020ed4 <iprintf>
    return;
 801bbbc:	e04a      	b.n	801bc54 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801bbbe:	693b      	ldr	r3, [r7, #16]
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801bbc4:	693b      	ldr	r3, [r7, #16]
 801bbc6:	68ba      	ldr	r2, [r7, #8]
 801bbc8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801bbca:	693b      	ldr	r3, [r7, #16]
 801bbcc:	687a      	ldr	r2, [r7, #4]
 801bbce:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801bbd0:	693b      	ldr	r3, [r7, #16]
 801bbd2:	68fa      	ldr	r2, [r7, #12]
 801bbd4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801bbd6:	4b24      	ldr	r3, [pc, #144]	@ (801bc68 <sys_timeout_abs+0xd8>)
 801bbd8:	681b      	ldr	r3, [r3, #0]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d103      	bne.n	801bbe6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801bbde:	4a22      	ldr	r2, [pc, #136]	@ (801bc68 <sys_timeout_abs+0xd8>)
 801bbe0:	693b      	ldr	r3, [r7, #16]
 801bbe2:	6013      	str	r3, [r2, #0]
    return;
 801bbe4:	e037      	b.n	801bc56 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801bbe6:	693b      	ldr	r3, [r7, #16]
 801bbe8:	685a      	ldr	r2, [r3, #4]
 801bbea:	4b1f      	ldr	r3, [pc, #124]	@ (801bc68 <sys_timeout_abs+0xd8>)
 801bbec:	681b      	ldr	r3, [r3, #0]
 801bbee:	685b      	ldr	r3, [r3, #4]
 801bbf0:	1ad3      	subs	r3, r2, r3
 801bbf2:	0fdb      	lsrs	r3, r3, #31
 801bbf4:	f003 0301 	and.w	r3, r3, #1
 801bbf8:	b2db      	uxtb	r3, r3
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	d007      	beq.n	801bc0e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801bbfe:	4b1a      	ldr	r3, [pc, #104]	@ (801bc68 <sys_timeout_abs+0xd8>)
 801bc00:	681a      	ldr	r2, [r3, #0]
 801bc02:	693b      	ldr	r3, [r7, #16]
 801bc04:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801bc06:	4a18      	ldr	r2, [pc, #96]	@ (801bc68 <sys_timeout_abs+0xd8>)
 801bc08:	693b      	ldr	r3, [r7, #16]
 801bc0a:	6013      	str	r3, [r2, #0]
 801bc0c:	e023      	b.n	801bc56 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801bc0e:	4b16      	ldr	r3, [pc, #88]	@ (801bc68 <sys_timeout_abs+0xd8>)
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	617b      	str	r3, [r7, #20]
 801bc14:	e01a      	b.n	801bc4c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801bc16:	697b      	ldr	r3, [r7, #20]
 801bc18:	681b      	ldr	r3, [r3, #0]
 801bc1a:	2b00      	cmp	r3, #0
 801bc1c:	d00b      	beq.n	801bc36 <sys_timeout_abs+0xa6>
 801bc1e:	693b      	ldr	r3, [r7, #16]
 801bc20:	685a      	ldr	r2, [r3, #4]
 801bc22:	697b      	ldr	r3, [r7, #20]
 801bc24:	681b      	ldr	r3, [r3, #0]
 801bc26:	685b      	ldr	r3, [r3, #4]
 801bc28:	1ad3      	subs	r3, r2, r3
 801bc2a:	0fdb      	lsrs	r3, r3, #31
 801bc2c:	f003 0301 	and.w	r3, r3, #1
 801bc30:	b2db      	uxtb	r3, r3
 801bc32:	2b00      	cmp	r3, #0
 801bc34:	d007      	beq.n	801bc46 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801bc36:	697b      	ldr	r3, [r7, #20]
 801bc38:	681a      	ldr	r2, [r3, #0]
 801bc3a:	693b      	ldr	r3, [r7, #16]
 801bc3c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801bc3e:	697b      	ldr	r3, [r7, #20]
 801bc40:	693a      	ldr	r2, [r7, #16]
 801bc42:	601a      	str	r2, [r3, #0]
        break;
 801bc44:	e007      	b.n	801bc56 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801bc46:	697b      	ldr	r3, [r7, #20]
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	617b      	str	r3, [r7, #20]
 801bc4c:	697b      	ldr	r3, [r7, #20]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d1e1      	bne.n	801bc16 <sys_timeout_abs+0x86>
 801bc52:	e000      	b.n	801bc56 <sys_timeout_abs+0xc6>
    return;
 801bc54:	bf00      	nop
      }
    }
  }
}
 801bc56:	3718      	adds	r7, #24
 801bc58:	46bd      	mov	sp, r7
 801bc5a:	bd80      	pop	{r7, pc}
 801bc5c:	08025538 	.word	0x08025538
 801bc60:	0802556c 	.word	0x0802556c
 801bc64:	080255ac 	.word	0x080255ac
 801bc68:	2002d4c0 	.word	0x2002d4c0

0801bc6c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801bc6c:	b580      	push	{r7, lr}
 801bc6e:	b086      	sub	sp, #24
 801bc70:	af00      	add	r7, sp, #0
 801bc72:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801bc74:	687b      	ldr	r3, [r7, #4]
 801bc76:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801bc78:	697b      	ldr	r3, [r7, #20]
 801bc7a:	685b      	ldr	r3, [r3, #4]
 801bc7c:	4798      	blx	r3

  now = sys_now();
 801bc7e:	f7f0 fd23 	bl	800c6c8 <sys_now>
 801bc82:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801bc84:	697b      	ldr	r3, [r7, #20]
 801bc86:	681a      	ldr	r2, [r3, #0]
 801bc88:	4b0f      	ldr	r3, [pc, #60]	@ (801bcc8 <lwip_cyclic_timer+0x5c>)
 801bc8a:	681b      	ldr	r3, [r3, #0]
 801bc8c:	4413      	add	r3, r2
 801bc8e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801bc90:	68fa      	ldr	r2, [r7, #12]
 801bc92:	693b      	ldr	r3, [r7, #16]
 801bc94:	1ad3      	subs	r3, r2, r3
 801bc96:	0fdb      	lsrs	r3, r3, #31
 801bc98:	f003 0301 	and.w	r3, r3, #1
 801bc9c:	b2db      	uxtb	r3, r3
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d009      	beq.n	801bcb6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801bca2:	697b      	ldr	r3, [r7, #20]
 801bca4:	681a      	ldr	r2, [r3, #0]
 801bca6:	693b      	ldr	r3, [r7, #16]
 801bca8:	4413      	add	r3, r2
 801bcaa:	687a      	ldr	r2, [r7, #4]
 801bcac:	4907      	ldr	r1, [pc, #28]	@ (801bccc <lwip_cyclic_timer+0x60>)
 801bcae:	4618      	mov	r0, r3
 801bcb0:	f7ff ff6e 	bl	801bb90 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801bcb4:	e004      	b.n	801bcc0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801bcb6:	687a      	ldr	r2, [r7, #4]
 801bcb8:	4904      	ldr	r1, [pc, #16]	@ (801bccc <lwip_cyclic_timer+0x60>)
 801bcba:	68f8      	ldr	r0, [r7, #12]
 801bcbc:	f7ff ff68 	bl	801bb90 <sys_timeout_abs>
}
 801bcc0:	bf00      	nop
 801bcc2:	3718      	adds	r7, #24
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	bd80      	pop	{r7, pc}
 801bcc8:	2002d4c4 	.word	0x2002d4c4
 801bccc:	0801bc6d 	.word	0x0801bc6d

0801bcd0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b082      	sub	sp, #8
 801bcd4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bcd6:	2301      	movs	r3, #1
 801bcd8:	607b      	str	r3, [r7, #4]
 801bcda:	e00e      	b.n	801bcfa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801bcdc:	4a0b      	ldr	r2, [pc, #44]	@ (801bd0c <sys_timeouts_init+0x3c>)
 801bcde:	687b      	ldr	r3, [r7, #4]
 801bce0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801bce4:	687b      	ldr	r3, [r7, #4]
 801bce6:	00db      	lsls	r3, r3, #3
 801bce8:	4a08      	ldr	r2, [pc, #32]	@ (801bd0c <sys_timeouts_init+0x3c>)
 801bcea:	4413      	add	r3, r2
 801bcec:	461a      	mov	r2, r3
 801bcee:	4908      	ldr	r1, [pc, #32]	@ (801bd10 <sys_timeouts_init+0x40>)
 801bcf0:	f000 f810 	bl	801bd14 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	3301      	adds	r3, #1
 801bcf8:	607b      	str	r3, [r7, #4]
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	2b02      	cmp	r3, #2
 801bcfe:	d9ed      	bls.n	801bcdc <sys_timeouts_init+0xc>
  }
}
 801bd00:	bf00      	nop
 801bd02:	bf00      	nop
 801bd04:	3708      	adds	r7, #8
 801bd06:	46bd      	mov	sp, r7
 801bd08:	bd80      	pop	{r7, pc}
 801bd0a:	bf00      	nop
 801bd0c:	08026da4 	.word	0x08026da4
 801bd10:	0801bc6d 	.word	0x0801bc6d

0801bd14 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801bd14:	b580      	push	{r7, lr}
 801bd16:	b086      	sub	sp, #24
 801bd18:	af00      	add	r7, sp, #0
 801bd1a:	60f8      	str	r0, [r7, #12]
 801bd1c:	60b9      	str	r1, [r7, #8]
 801bd1e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801bd20:	68fb      	ldr	r3, [r7, #12]
 801bd22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bd26:	d306      	bcc.n	801bd36 <sys_timeout+0x22>
 801bd28:	4b0a      	ldr	r3, [pc, #40]	@ (801bd54 <sys_timeout+0x40>)
 801bd2a:	f240 1229 	movw	r2, #297	@ 0x129
 801bd2e:	490a      	ldr	r1, [pc, #40]	@ (801bd58 <sys_timeout+0x44>)
 801bd30:	480a      	ldr	r0, [pc, #40]	@ (801bd5c <sys_timeout+0x48>)
 801bd32:	f005 f8cf 	bl	8020ed4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801bd36:	f7f0 fcc7 	bl	800c6c8 <sys_now>
 801bd3a:	4602      	mov	r2, r0
 801bd3c:	68fb      	ldr	r3, [r7, #12]
 801bd3e:	4413      	add	r3, r2
 801bd40:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801bd42:	687a      	ldr	r2, [r7, #4]
 801bd44:	68b9      	ldr	r1, [r7, #8]
 801bd46:	6978      	ldr	r0, [r7, #20]
 801bd48:	f7ff ff22 	bl	801bb90 <sys_timeout_abs>
#endif
}
 801bd4c:	bf00      	nop
 801bd4e:	3718      	adds	r7, #24
 801bd50:	46bd      	mov	sp, r7
 801bd52:	bd80      	pop	{r7, pc}
 801bd54:	08025538 	.word	0x08025538
 801bd58:	080255d4 	.word	0x080255d4
 801bd5c:	080255ac 	.word	0x080255ac

0801bd60 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801bd60:	b580      	push	{r7, lr}
 801bd62:	b084      	sub	sp, #16
 801bd64:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801bd66:	f7f0 fcaf 	bl	800c6c8 <sys_now>
 801bd6a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801bd6c:	4b17      	ldr	r3, [pc, #92]	@ (801bdcc <sys_check_timeouts+0x6c>)
 801bd6e:	681b      	ldr	r3, [r3, #0]
 801bd70:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801bd72:	68bb      	ldr	r3, [r7, #8]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d022      	beq.n	801bdbe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801bd78:	68bb      	ldr	r3, [r7, #8]
 801bd7a:	685b      	ldr	r3, [r3, #4]
 801bd7c:	68fa      	ldr	r2, [r7, #12]
 801bd7e:	1ad3      	subs	r3, r2, r3
 801bd80:	0fdb      	lsrs	r3, r3, #31
 801bd82:	f003 0301 	and.w	r3, r3, #1
 801bd86:	b2db      	uxtb	r3, r3
 801bd88:	2b00      	cmp	r3, #0
 801bd8a:	d11a      	bne.n	801bdc2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	4a0e      	ldr	r2, [pc, #56]	@ (801bdcc <sys_check_timeouts+0x6c>)
 801bd92:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801bd94:	68bb      	ldr	r3, [r7, #8]
 801bd96:	689b      	ldr	r3, [r3, #8]
 801bd98:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801bd9a:	68bb      	ldr	r3, [r7, #8]
 801bd9c:	68db      	ldr	r3, [r3, #12]
 801bd9e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801bda0:	68bb      	ldr	r3, [r7, #8]
 801bda2:	685b      	ldr	r3, [r3, #4]
 801bda4:	4a0a      	ldr	r2, [pc, #40]	@ (801bdd0 <sys_check_timeouts+0x70>)
 801bda6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801bda8:	68b9      	ldr	r1, [r7, #8]
 801bdaa:	200a      	movs	r0, #10
 801bdac:	f7f8 f874 	bl	8013e98 <memp_free>
    if (handler != NULL) {
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d0da      	beq.n	801bd6c <sys_check_timeouts+0xc>
      handler(arg);
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	6838      	ldr	r0, [r7, #0]
 801bdba:	4798      	blx	r3
  do {
 801bdbc:	e7d6      	b.n	801bd6c <sys_check_timeouts+0xc>
      return;
 801bdbe:	bf00      	nop
 801bdc0:	e000      	b.n	801bdc4 <sys_check_timeouts+0x64>
      return;
 801bdc2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801bdc4:	3710      	adds	r7, #16
 801bdc6:	46bd      	mov	sp, r7
 801bdc8:	bd80      	pop	{r7, pc}
 801bdca:	bf00      	nop
 801bdcc:	2002d4c0 	.word	0x2002d4c0
 801bdd0:	2002d4c4 	.word	0x2002d4c4

0801bdd4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801bdd4:	b580      	push	{r7, lr}
 801bdd6:	b082      	sub	sp, #8
 801bdd8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801bdda:	4b16      	ldr	r3, [pc, #88]	@ (801be34 <sys_timeouts_sleeptime+0x60>)
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d102      	bne.n	801bde8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801bde2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801bde6:	e020      	b.n	801be2a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801bde8:	f7f0 fc6e 	bl	800c6c8 <sys_now>
 801bdec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801bdee:	4b11      	ldr	r3, [pc, #68]	@ (801be34 <sys_timeouts_sleeptime+0x60>)
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	685a      	ldr	r2, [r3, #4]
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	1ad3      	subs	r3, r2, r3
 801bdf8:	0fdb      	lsrs	r3, r3, #31
 801bdfa:	f003 0301 	and.w	r3, r3, #1
 801bdfe:	b2db      	uxtb	r3, r3
 801be00:	2b00      	cmp	r3, #0
 801be02:	d001      	beq.n	801be08 <sys_timeouts_sleeptime+0x34>
    return 0;
 801be04:	2300      	movs	r3, #0
 801be06:	e010      	b.n	801be2a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801be08:	4b0a      	ldr	r3, [pc, #40]	@ (801be34 <sys_timeouts_sleeptime+0x60>)
 801be0a:	681b      	ldr	r3, [r3, #0]
 801be0c:	685a      	ldr	r2, [r3, #4]
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	1ad3      	subs	r3, r2, r3
 801be12:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801be14:	683b      	ldr	r3, [r7, #0]
 801be16:	2b00      	cmp	r3, #0
 801be18:	da06      	bge.n	801be28 <sys_timeouts_sleeptime+0x54>
 801be1a:	4b07      	ldr	r3, [pc, #28]	@ (801be38 <sys_timeouts_sleeptime+0x64>)
 801be1c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 801be20:	4906      	ldr	r1, [pc, #24]	@ (801be3c <sys_timeouts_sleeptime+0x68>)
 801be22:	4807      	ldr	r0, [pc, #28]	@ (801be40 <sys_timeouts_sleeptime+0x6c>)
 801be24:	f005 f856 	bl	8020ed4 <iprintf>
    return ret;
 801be28:	683b      	ldr	r3, [r7, #0]
  }
}
 801be2a:	4618      	mov	r0, r3
 801be2c:	3708      	adds	r7, #8
 801be2e:	46bd      	mov	sp, r7
 801be30:	bd80      	pop	{r7, pc}
 801be32:	bf00      	nop
 801be34:	2002d4c0 	.word	0x2002d4c0
 801be38:	08025538 	.word	0x08025538
 801be3c:	0802560c 	.word	0x0802560c
 801be40:	080255ac 	.word	0x080255ac

0801be44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801be44:	b580      	push	{r7, lr}
 801be46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801be48:	f004 ff44 	bl	8020cd4 <rand>
 801be4c:	4603      	mov	r3, r0
 801be4e:	b29b      	uxth	r3, r3
 801be50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801be54:	b29b      	uxth	r3, r3
 801be56:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801be5a:	b29a      	uxth	r2, r3
 801be5c:	4b01      	ldr	r3, [pc, #4]	@ (801be64 <udp_init+0x20>)
 801be5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801be60:	bf00      	nop
 801be62:	bd80      	pop	{r7, pc}
 801be64:	20000070 	.word	0x20000070

0801be68 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801be68:	b480      	push	{r7}
 801be6a:	b083      	sub	sp, #12
 801be6c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801be6e:	2300      	movs	r3, #0
 801be70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801be72:	4b17      	ldr	r3, [pc, #92]	@ (801bed0 <udp_new_port+0x68>)
 801be74:	881b      	ldrh	r3, [r3, #0]
 801be76:	1c5a      	adds	r2, r3, #1
 801be78:	b291      	uxth	r1, r2
 801be7a:	4a15      	ldr	r2, [pc, #84]	@ (801bed0 <udp_new_port+0x68>)
 801be7c:	8011      	strh	r1, [r2, #0]
 801be7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801be82:	4293      	cmp	r3, r2
 801be84:	d103      	bne.n	801be8e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801be86:	4b12      	ldr	r3, [pc, #72]	@ (801bed0 <udp_new_port+0x68>)
 801be88:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801be8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801be8e:	4b11      	ldr	r3, [pc, #68]	@ (801bed4 <udp_new_port+0x6c>)
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	603b      	str	r3, [r7, #0]
 801be94:	e011      	b.n	801beba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801be96:	683b      	ldr	r3, [r7, #0]
 801be98:	8a5a      	ldrh	r2, [r3, #18]
 801be9a:	4b0d      	ldr	r3, [pc, #52]	@ (801bed0 <udp_new_port+0x68>)
 801be9c:	881b      	ldrh	r3, [r3, #0]
 801be9e:	429a      	cmp	r2, r3
 801bea0:	d108      	bne.n	801beb4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801bea2:	88fb      	ldrh	r3, [r7, #6]
 801bea4:	3301      	adds	r3, #1
 801bea6:	80fb      	strh	r3, [r7, #6]
 801bea8:	88fb      	ldrh	r3, [r7, #6]
 801beaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801beae:	d3e0      	bcc.n	801be72 <udp_new_port+0xa>
        return 0;
 801beb0:	2300      	movs	r3, #0
 801beb2:	e007      	b.n	801bec4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801beb4:	683b      	ldr	r3, [r7, #0]
 801beb6:	68db      	ldr	r3, [r3, #12]
 801beb8:	603b      	str	r3, [r7, #0]
 801beba:	683b      	ldr	r3, [r7, #0]
 801bebc:	2b00      	cmp	r3, #0
 801bebe:	d1ea      	bne.n	801be96 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801bec0:	4b03      	ldr	r3, [pc, #12]	@ (801bed0 <udp_new_port+0x68>)
 801bec2:	881b      	ldrh	r3, [r3, #0]
}
 801bec4:	4618      	mov	r0, r3
 801bec6:	370c      	adds	r7, #12
 801bec8:	46bd      	mov	sp, r7
 801beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bece:	4770      	bx	lr
 801bed0:	20000070 	.word	0x20000070
 801bed4:	2002d4cc 	.word	0x2002d4cc

0801bed8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801bed8:	b580      	push	{r7, lr}
 801beda:	b084      	sub	sp, #16
 801bedc:	af00      	add	r7, sp, #0
 801bede:	60f8      	str	r0, [r7, #12]
 801bee0:	60b9      	str	r1, [r7, #8]
 801bee2:	4613      	mov	r3, r2
 801bee4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d105      	bne.n	801bef8 <udp_input_local_match+0x20>
 801beec:	4b27      	ldr	r3, [pc, #156]	@ (801bf8c <udp_input_local_match+0xb4>)
 801beee:	2287      	movs	r2, #135	@ 0x87
 801bef0:	4927      	ldr	r1, [pc, #156]	@ (801bf90 <udp_input_local_match+0xb8>)
 801bef2:	4828      	ldr	r0, [pc, #160]	@ (801bf94 <udp_input_local_match+0xbc>)
 801bef4:	f004 ffee 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801bef8:	68bb      	ldr	r3, [r7, #8]
 801befa:	2b00      	cmp	r3, #0
 801befc:	d105      	bne.n	801bf0a <udp_input_local_match+0x32>
 801befe:	4b23      	ldr	r3, [pc, #140]	@ (801bf8c <udp_input_local_match+0xb4>)
 801bf00:	2288      	movs	r2, #136	@ 0x88
 801bf02:	4925      	ldr	r1, [pc, #148]	@ (801bf98 <udp_input_local_match+0xc0>)
 801bf04:	4823      	ldr	r0, [pc, #140]	@ (801bf94 <udp_input_local_match+0xbc>)
 801bf06:	f004 ffe5 	bl	8020ed4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	7a1b      	ldrb	r3, [r3, #8]
 801bf0e:	2b00      	cmp	r3, #0
 801bf10:	d00b      	beq.n	801bf2a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bf12:	68fb      	ldr	r3, [r7, #12]
 801bf14:	7a1a      	ldrb	r2, [r3, #8]
 801bf16:	4b21      	ldr	r3, [pc, #132]	@ (801bf9c <udp_input_local_match+0xc4>)
 801bf18:	685b      	ldr	r3, [r3, #4]
 801bf1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801bf1e:	3301      	adds	r3, #1
 801bf20:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bf22:	429a      	cmp	r2, r3
 801bf24:	d001      	beq.n	801bf2a <udp_input_local_match+0x52>
    return 0;
 801bf26:	2300      	movs	r3, #0
 801bf28:	e02b      	b.n	801bf82 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801bf2a:	79fb      	ldrb	r3, [r7, #7]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d018      	beq.n	801bf62 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d013      	beq.n	801bf5e <udp_input_local_match+0x86>
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	681b      	ldr	r3, [r3, #0]
 801bf3a:	2b00      	cmp	r3, #0
 801bf3c:	d00f      	beq.n	801bf5e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bf3e:	4b17      	ldr	r3, [pc, #92]	@ (801bf9c <udp_input_local_match+0xc4>)
 801bf40:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801bf42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801bf46:	d00a      	beq.n	801bf5e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	681a      	ldr	r2, [r3, #0]
 801bf4c:	4b13      	ldr	r3, [pc, #76]	@ (801bf9c <udp_input_local_match+0xc4>)
 801bf4e:	695b      	ldr	r3, [r3, #20]
 801bf50:	405a      	eors	r2, r3
 801bf52:	68bb      	ldr	r3, [r7, #8]
 801bf54:	3308      	adds	r3, #8
 801bf56:	681b      	ldr	r3, [r3, #0]
 801bf58:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	d110      	bne.n	801bf80 <udp_input_local_match+0xa8>
          return 1;
 801bf5e:	2301      	movs	r3, #1
 801bf60:	e00f      	b.n	801bf82 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	d009      	beq.n	801bf7c <udp_input_local_match+0xa4>
 801bf68:	68fb      	ldr	r3, [r7, #12]
 801bf6a:	681b      	ldr	r3, [r3, #0]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	d005      	beq.n	801bf7c <udp_input_local_match+0xa4>
 801bf70:	68fb      	ldr	r3, [r7, #12]
 801bf72:	681a      	ldr	r2, [r3, #0]
 801bf74:	4b09      	ldr	r3, [pc, #36]	@ (801bf9c <udp_input_local_match+0xc4>)
 801bf76:	695b      	ldr	r3, [r3, #20]
 801bf78:	429a      	cmp	r2, r3
 801bf7a:	d101      	bne.n	801bf80 <udp_input_local_match+0xa8>
        return 1;
 801bf7c:	2301      	movs	r3, #1
 801bf7e:	e000      	b.n	801bf82 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801bf80:	2300      	movs	r3, #0
}
 801bf82:	4618      	mov	r0, r3
 801bf84:	3710      	adds	r7, #16
 801bf86:	46bd      	mov	sp, r7
 801bf88:	bd80      	pop	{r7, pc}
 801bf8a:	bf00      	nop
 801bf8c:	08025620 	.word	0x08025620
 801bf90:	08025650 	.word	0x08025650
 801bf94:	08025674 	.word	0x08025674
 801bf98:	0802569c 	.word	0x0802569c
 801bf9c:	200270fc 	.word	0x200270fc

0801bfa0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801bfa0:	b590      	push	{r4, r7, lr}
 801bfa2:	b08d      	sub	sp, #52	@ 0x34
 801bfa4:	af02      	add	r7, sp, #8
 801bfa6:	6078      	str	r0, [r7, #4]
 801bfa8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801bfaa:	2300      	movs	r3, #0
 801bfac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801bfae:	687b      	ldr	r3, [r7, #4]
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d105      	bne.n	801bfc0 <udp_input+0x20>
 801bfb4:	4b9c      	ldr	r3, [pc, #624]	@ (801c228 <udp_input+0x288>)
 801bfb6:	22cf      	movs	r2, #207	@ 0xcf
 801bfb8:	499c      	ldr	r1, [pc, #624]	@ (801c22c <udp_input+0x28c>)
 801bfba:	489d      	ldr	r0, [pc, #628]	@ (801c230 <udp_input+0x290>)
 801bfbc:	f004 ff8a 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801bfc0:	683b      	ldr	r3, [r7, #0]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d105      	bne.n	801bfd2 <udp_input+0x32>
 801bfc6:	4b98      	ldr	r3, [pc, #608]	@ (801c228 <udp_input+0x288>)
 801bfc8:	22d0      	movs	r2, #208	@ 0xd0
 801bfca:	499a      	ldr	r1, [pc, #616]	@ (801c234 <udp_input+0x294>)
 801bfcc:	4898      	ldr	r0, [pc, #608]	@ (801c230 <udp_input+0x290>)
 801bfce:	f004 ff81 	bl	8020ed4 <iprintf>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801bfd2:	4b99      	ldr	r3, [pc, #612]	@ (801c238 <udp_input+0x298>)
 801bfd4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	@ 0x7a
 801bfd8:	3301      	adds	r3, #1
 801bfda:	b29a      	uxth	r2, r3
 801bfdc:	4b96      	ldr	r3, [pc, #600]	@ (801c238 <udp_input+0x298>)
 801bfde:	f8a3 207a 	strh.w	r2, [r3, #122]	@ 0x7a

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	895b      	ldrh	r3, [r3, #10]
 801bfe6:	2b07      	cmp	r3, #7
 801bfe8:	d819      	bhi.n	801c01e <udp_input+0x7e>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	891b      	ldrh	r3, [r3, #8]
 801bfee:	4619      	mov	r1, r3
 801bff0:	4892      	ldr	r0, [pc, #584]	@ (801c23c <udp_input+0x29c>)
 801bff2:	f004 ff6f 	bl	8020ed4 <iprintf>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
 801bff6:	4b90      	ldr	r3, [pc, #576]	@ (801c238 <udp_input+0x298>)
 801bff8:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 801bffc:	3301      	adds	r3, #1
 801bffe:	b29a      	uxth	r2, r3
 801c000:	4b8d      	ldr	r3, [pc, #564]	@ (801c238 <udp_input+0x298>)
 801c002:	f8a3 2082 	strh.w	r2, [r3, #130]	@ 0x82
    UDP_STATS_INC(udp.drop);
 801c006:	4b8c      	ldr	r3, [pc, #560]	@ (801c238 <udp_input+0x298>)
 801c008:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c00c:	3301      	adds	r3, #1
 801c00e:	b29a      	uxth	r2, r3
 801c010:	4b89      	ldr	r3, [pc, #548]	@ (801c238 <udp_input+0x298>)
 801c012:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801c016:	6878      	ldr	r0, [r7, #4]
 801c018:	f7f8 ff24 	bl	8014e64 <pbuf_free>
    goto end;
 801c01c:	e1ae      	b.n	801c37c <udp_input+0x3dc>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	685b      	ldr	r3, [r3, #4]
 801c022:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801c024:	4b86      	ldr	r3, [pc, #536]	@ (801c240 <udp_input+0x2a0>)
 801c026:	695b      	ldr	r3, [r3, #20]
 801c028:	4a85      	ldr	r2, [pc, #532]	@ (801c240 <udp_input+0x2a0>)
 801c02a:	6812      	ldr	r2, [r2, #0]
 801c02c:	4611      	mov	r1, r2
 801c02e:	4618      	mov	r0, r3
 801c030:	f002 fbec 	bl	801e80c <ip4_addr_isbroadcast_u32>
 801c034:	4603      	mov	r3, r0
 801c036:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 801c038:	687b      	ldr	r3, [r7, #4]
 801c03a:	891b      	ldrh	r3, [r3, #8]
 801c03c:	4619      	mov	r1, r3
 801c03e:	4881      	ldr	r0, [pc, #516]	@ (801c244 <udp_input+0x2a4>)
 801c040:	f004 ff48 	bl	8020ed4 <iprintf>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801c044:	697b      	ldr	r3, [r7, #20]
 801c046:	881b      	ldrh	r3, [r3, #0]
 801c048:	b29b      	uxth	r3, r3
 801c04a:	4618      	mov	r0, r3
 801c04c:	f7f7 f8dc 	bl	8013208 <lwip_htons>
 801c050:	4603      	mov	r3, r0
 801c052:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801c054:	697b      	ldr	r3, [r7, #20]
 801c056:	885b      	ldrh	r3, [r3, #2]
 801c058:	b29b      	uxth	r3, r3
 801c05a:	4618      	mov	r0, r3
 801c05c:	f7f7 f8d4 	bl	8013208 <lwip_htons>
 801c060:	4603      	mov	r3, r0
 801c062:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 801c064:	6978      	ldr	r0, [r7, #20]
 801c066:	f000 fe6d 	bl	801cd44 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 801c06a:	4877      	ldr	r0, [pc, #476]	@ (801c248 <udp_input+0x2a8>)
 801c06c:	f004 ff32 	bl	8020ed4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 801c070:	4b73      	ldr	r3, [pc, #460]	@ (801c240 <udp_input+0x2a0>)
 801c072:	695b      	ldr	r3, [r3, #20]
 801c074:	b2db      	uxtb	r3, r3
 801c076:	4619      	mov	r1, r3
 801c078:	4b71      	ldr	r3, [pc, #452]	@ (801c240 <udp_input+0x2a0>)
 801c07a:	695b      	ldr	r3, [r3, #20]
 801c07c:	0a1b      	lsrs	r3, r3, #8
 801c07e:	b2db      	uxtb	r3, r3
 801c080:	461a      	mov	r2, r3
 801c082:	4b6f      	ldr	r3, [pc, #444]	@ (801c240 <udp_input+0x2a0>)
 801c084:	695b      	ldr	r3, [r3, #20]
 801c086:	0c1b      	lsrs	r3, r3, #16
 801c088:	b2db      	uxtb	r3, r3
 801c08a:	4618      	mov	r0, r3
 801c08c:	4b6c      	ldr	r3, [pc, #432]	@ (801c240 <udp_input+0x2a0>)
 801c08e:	695b      	ldr	r3, [r3, #20]
 801c090:	0e1b      	lsrs	r3, r3, #24
 801c092:	b2db      	uxtb	r3, r3
 801c094:	9300      	str	r3, [sp, #0]
 801c096:	4603      	mov	r3, r0
 801c098:	486c      	ldr	r0, [pc, #432]	@ (801c24c <udp_input+0x2ac>)
 801c09a:	f004 ff1b 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 801c09e:	697b      	ldr	r3, [r7, #20]
 801c0a0:	885b      	ldrh	r3, [r3, #2]
 801c0a2:	b29b      	uxth	r3, r3
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	f7f7 f8af 	bl	8013208 <lwip_htons>
 801c0aa:	4603      	mov	r3, r0
 801c0ac:	4619      	mov	r1, r3
 801c0ae:	4868      	ldr	r0, [pc, #416]	@ (801c250 <udp_input+0x2b0>)
 801c0b0:	f004 ff10 	bl	8020ed4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 801c0b4:	4b62      	ldr	r3, [pc, #392]	@ (801c240 <udp_input+0x2a0>)
 801c0b6:	691b      	ldr	r3, [r3, #16]
 801c0b8:	b2db      	uxtb	r3, r3
 801c0ba:	4619      	mov	r1, r3
 801c0bc:	4b60      	ldr	r3, [pc, #384]	@ (801c240 <udp_input+0x2a0>)
 801c0be:	691b      	ldr	r3, [r3, #16]
 801c0c0:	0a1b      	lsrs	r3, r3, #8
 801c0c2:	b2db      	uxtb	r3, r3
 801c0c4:	461a      	mov	r2, r3
 801c0c6:	4b5e      	ldr	r3, [pc, #376]	@ (801c240 <udp_input+0x2a0>)
 801c0c8:	691b      	ldr	r3, [r3, #16]
 801c0ca:	0c1b      	lsrs	r3, r3, #16
 801c0cc:	b2db      	uxtb	r3, r3
 801c0ce:	4618      	mov	r0, r3
 801c0d0:	4b5b      	ldr	r3, [pc, #364]	@ (801c240 <udp_input+0x2a0>)
 801c0d2:	691b      	ldr	r3, [r3, #16]
 801c0d4:	0e1b      	lsrs	r3, r3, #24
 801c0d6:	b2db      	uxtb	r3, r3
 801c0d8:	9300      	str	r3, [sp, #0]
 801c0da:	4603      	mov	r3, r0
 801c0dc:	485b      	ldr	r0, [pc, #364]	@ (801c24c <udp_input+0x2ac>)
 801c0de:	f004 fef9 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 801c0e2:	697b      	ldr	r3, [r7, #20]
 801c0e4:	881b      	ldrh	r3, [r3, #0]
 801c0e6:	b29b      	uxth	r3, r3
 801c0e8:	4618      	mov	r0, r3
 801c0ea:	f7f7 f88d 	bl	8013208 <lwip_htons>
 801c0ee:	4603      	mov	r3, r0
 801c0f0:	4619      	mov	r1, r3
 801c0f2:	4858      	ldr	r0, [pc, #352]	@ (801c254 <udp_input+0x2b4>)
 801c0f4:	f004 feee 	bl	8020ed4 <iprintf>

  pcb = NULL;
 801c0f8:	2300      	movs	r3, #0
 801c0fa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801c0fc:	2300      	movs	r3, #0
 801c0fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801c100:	2300      	movs	r3, #0
 801c102:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c104:	4b54      	ldr	r3, [pc, #336]	@ (801c258 <udp_input+0x2b8>)
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	627b      	str	r3, [r7, #36]	@ 0x24
 801c10a:	e0b7      	b.n	801c27c <udp_input+0x2dc>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 801c10c:	4853      	ldr	r0, [pc, #332]	@ (801c25c <udp_input+0x2bc>)
 801c10e:	f004 fee1 	bl	8020ed4 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 801c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	b2db      	uxtb	r3, r3
 801c118:	4619      	mov	r1, r3
 801c11a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c11c:	681b      	ldr	r3, [r3, #0]
 801c11e:	0a1b      	lsrs	r3, r3, #8
 801c120:	b2db      	uxtb	r3, r3
 801c122:	461a      	mov	r2, r3
 801c124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c126:	681b      	ldr	r3, [r3, #0]
 801c128:	0c1b      	lsrs	r3, r3, #16
 801c12a:	b2db      	uxtb	r3, r3
 801c12c:	4618      	mov	r0, r3
 801c12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	0e1b      	lsrs	r3, r3, #24
 801c134:	b2db      	uxtb	r3, r3
 801c136:	9300      	str	r3, [sp, #0]
 801c138:	4603      	mov	r3, r0
 801c13a:	4844      	ldr	r0, [pc, #272]	@ (801c24c <udp_input+0x2ac>)
 801c13c:	f004 feca 	bl	8020ed4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 801c140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c142:	8a5b      	ldrh	r3, [r3, #18]
 801c144:	4619      	mov	r1, r3
 801c146:	4842      	ldr	r0, [pc, #264]	@ (801c250 <udp_input+0x2b0>)
 801c148:	f004 fec4 	bl	8020ed4 <iprintf>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 801c14c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c14e:	685b      	ldr	r3, [r3, #4]
 801c150:	b2db      	uxtb	r3, r3
 801c152:	4619      	mov	r1, r3
 801c154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c156:	685b      	ldr	r3, [r3, #4]
 801c158:	0a1b      	lsrs	r3, r3, #8
 801c15a:	b2db      	uxtb	r3, r3
 801c15c:	461a      	mov	r2, r3
 801c15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c160:	685b      	ldr	r3, [r3, #4]
 801c162:	0c1b      	lsrs	r3, r3, #16
 801c164:	b2db      	uxtb	r3, r3
 801c166:	4618      	mov	r0, r3
 801c168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	0e1b      	lsrs	r3, r3, #24
 801c16e:	b2db      	uxtb	r3, r3
 801c170:	9300      	str	r3, [sp, #0]
 801c172:	4603      	mov	r3, r0
 801c174:	4835      	ldr	r0, [pc, #212]	@ (801c24c <udp_input+0x2ac>)
 801c176:	f004 fead 	bl	8020ed4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 801c17a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c17c:	8a9b      	ldrh	r3, [r3, #20]
 801c17e:	4619      	mov	r1, r3
 801c180:	4834      	ldr	r0, [pc, #208]	@ (801c254 <udp_input+0x2b4>)
 801c182:	f004 fea7 	bl	8020ed4 <iprintf>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801c186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c188:	8a5b      	ldrh	r3, [r3, #18]
 801c18a:	89fa      	ldrh	r2, [r7, #14]
 801c18c:	429a      	cmp	r2, r3
 801c18e:	d170      	bne.n	801c272 <udp_input+0x2d2>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801c190:	7cfb      	ldrb	r3, [r7, #19]
 801c192:	461a      	mov	r2, r3
 801c194:	6839      	ldr	r1, [r7, #0]
 801c196:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c198:	f7ff fe9e 	bl	801bed8 <udp_input_local_match>
 801c19c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d067      	beq.n	801c272 <udp_input+0x2d2>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801c1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1a4:	7c1b      	ldrb	r3, [r3, #16]
 801c1a6:	f003 0304 	and.w	r3, r3, #4
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d11d      	bne.n	801c1ea <udp_input+0x24a>
        if (uncon_pcb == NULL) {
 801c1ae:	69fb      	ldr	r3, [r7, #28]
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d102      	bne.n	801c1ba <udp_input+0x21a>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801c1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1b6:	61fb      	str	r3, [r7, #28]
 801c1b8:	e017      	b.n	801c1ea <udp_input+0x24a>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801c1ba:	7cfb      	ldrb	r3, [r7, #19]
 801c1bc:	2b00      	cmp	r3, #0
 801c1be:	d014      	beq.n	801c1ea <udp_input+0x24a>
 801c1c0:	4b1f      	ldr	r3, [pc, #124]	@ (801c240 <udp_input+0x2a0>)
 801c1c2:	695b      	ldr	r3, [r3, #20]
 801c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801c1c8:	d10f      	bne.n	801c1ea <udp_input+0x24a>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801c1ca:	69fb      	ldr	r3, [r7, #28]
 801c1cc:	681a      	ldr	r2, [r3, #0]
 801c1ce:	683b      	ldr	r3, [r7, #0]
 801c1d0:	3304      	adds	r3, #4
 801c1d2:	681b      	ldr	r3, [r3, #0]
 801c1d4:	429a      	cmp	r2, r3
 801c1d6:	d008      	beq.n	801c1ea <udp_input+0x24a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801c1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1da:	681a      	ldr	r2, [r3, #0]
 801c1dc:	683b      	ldr	r3, [r7, #0]
 801c1de:	3304      	adds	r3, #4
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	429a      	cmp	r2, r3
 801c1e4:	d101      	bne.n	801c1ea <udp_input+0x24a>
              /* better match */
              uncon_pcb = pcb;
 801c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1e8:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1ec:	8a9b      	ldrh	r3, [r3, #20]
 801c1ee:	8a3a      	ldrh	r2, [r7, #16]
 801c1f0:	429a      	cmp	r2, r3
 801c1f2:	d13e      	bne.n	801c272 <udp_input+0x2d2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1f6:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d005      	beq.n	801c208 <udp_input+0x268>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801c1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1fe:	685a      	ldr	r2, [r3, #4]
 801c200:	4b0f      	ldr	r3, [pc, #60]	@ (801c240 <udp_input+0x2a0>)
 801c202:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801c204:	429a      	cmp	r2, r3
 801c206:	d134      	bne.n	801c272 <udp_input+0x2d2>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801c208:	6a3b      	ldr	r3, [r7, #32]
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	d028      	beq.n	801c260 <udp_input+0x2c0>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c210:	68da      	ldr	r2, [r3, #12]
 801c212:	6a3b      	ldr	r3, [r7, #32]
 801c214:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801c216:	4b10      	ldr	r3, [pc, #64]	@ (801c258 <udp_input+0x2b8>)
 801c218:	681a      	ldr	r2, [r3, #0]
 801c21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c21c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801c21e:	4a0e      	ldr	r2, [pc, #56]	@ (801c258 <udp_input+0x2b8>)
 801c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c222:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801c224:	e02e      	b.n	801c284 <udp_input+0x2e4>
 801c226:	bf00      	nop
 801c228:	08025620 	.word	0x08025620
 801c22c:	080256c4 	.word	0x080256c4
 801c230:	08025674 	.word	0x08025674
 801c234:	080256dc 	.word	0x080256dc
 801c238:	2002d36c 	.word	0x2002d36c
 801c23c:	080256f8 	.word	0x080256f8
 801c240:	200270fc 	.word	0x200270fc
 801c244:	08025730 	.word	0x08025730
 801c248:	0802575c 	.word	0x0802575c
 801c24c:	08025764 	.word	0x08025764
 801c250:	08025774 	.word	0x08025774
 801c254:	08025784 	.word	0x08025784
 801c258:	2002d4cc 	.word	0x2002d4cc
 801c25c:	0802578c 	.word	0x0802578c
          UDP_STATS_INC(udp.cachehit);
 801c260:	4b48      	ldr	r3, [pc, #288]	@ (801c384 <udp_input+0x3e4>)
 801c262:	f8b3 308e 	ldrh.w	r3, [r3, #142]	@ 0x8e
 801c266:	3301      	adds	r3, #1
 801c268:	b29a      	uxth	r2, r3
 801c26a:	4b46      	ldr	r3, [pc, #280]	@ (801c384 <udp_input+0x3e4>)
 801c26c:	f8a3 208e 	strh.w	r2, [r3, #142]	@ 0x8e
        break;
 801c270:	e008      	b.n	801c284 <udp_input+0x2e4>
      }
    }

    prev = pcb;
 801c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c274:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801c276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c278:	68db      	ldr	r3, [r3, #12]
 801c27a:	627b      	str	r3, [r7, #36]	@ 0x24
 801c27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c27e:	2b00      	cmp	r3, #0
 801c280:	f47f af44 	bne.w	801c10c <udp_input+0x16c>
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801c284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c286:	2b00      	cmp	r3, #0
 801c288:	d101      	bne.n	801c28e <udp_input+0x2ee>
    pcb = uncon_pcb;
 801c28a:	69fb      	ldr	r3, [r7, #28]
 801c28c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801c28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c290:	2b00      	cmp	r3, #0
 801c292:	d002      	beq.n	801c29a <udp_input+0x2fa>
    for_us = 1;
 801c294:	2301      	movs	r3, #1
 801c296:	76fb      	strb	r3, [r7, #27]
 801c298:	e00a      	b.n	801c2b0 <udp_input+0x310>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801c29a:	683b      	ldr	r3, [r7, #0]
 801c29c:	3304      	adds	r3, #4
 801c29e:	681a      	ldr	r2, [r3, #0]
 801c2a0:	4b39      	ldr	r3, [pc, #228]	@ (801c388 <udp_input+0x3e8>)
 801c2a2:	695b      	ldr	r3, [r3, #20]
 801c2a4:	429a      	cmp	r2, r3
 801c2a6:	bf0c      	ite	eq
 801c2a8:	2301      	moveq	r3, #1
 801c2aa:	2300      	movne	r3, #0
 801c2ac:	b2db      	uxtb	r3, r3
 801c2ae:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801c2b0:	7efb      	ldrb	r3, [r7, #27]
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	d05f      	beq.n	801c376 <udp_input+0x3d6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 801c2b6:	4835      	ldr	r0, [pc, #212]	@ (801c38c <udp_input+0x3ec>)
 801c2b8:	f004 fe7c 	bl	8020fb4 <puts>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801c2bc:	2108      	movs	r1, #8
 801c2be:	6878      	ldr	r0, [r7, #4]
 801c2c0:	f7f8 fd42 	bl	8014d48 <pbuf_remove_header>
 801c2c4:	4603      	mov	r3, r0
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d012      	beq.n	801c2f0 <udp_input+0x350>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801c2ca:	4b31      	ldr	r3, [pc, #196]	@ (801c390 <udp_input+0x3f0>)
 801c2cc:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801c2d0:	4930      	ldr	r1, [pc, #192]	@ (801c394 <udp_input+0x3f4>)
 801c2d2:	4831      	ldr	r0, [pc, #196]	@ (801c398 <udp_input+0x3f8>)
 801c2d4:	f004 fdfe 	bl	8020ed4 <iprintf>
      UDP_STATS_INC(udp.drop);
 801c2d8:	4b2a      	ldr	r3, [pc, #168]	@ (801c384 <udp_input+0x3e4>)
 801c2da:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c2de:	3301      	adds	r3, #1
 801c2e0:	b29a      	uxth	r2, r3
 801c2e2:	4b28      	ldr	r3, [pc, #160]	@ (801c384 <udp_input+0x3e4>)
 801c2e4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801c2e8:	6878      	ldr	r0, [r7, #4]
 801c2ea:	f7f8 fdbb 	bl	8014e64 <pbuf_free>
      goto end;
 801c2ee:	e045      	b.n	801c37c <udp_input+0x3dc>
    }

    if (pcb != NULL) {
 801c2f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d012      	beq.n	801c31c <udp_input+0x37c>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801c2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2f8:	699b      	ldr	r3, [r3, #24]
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d00a      	beq.n	801c314 <udp_input+0x374>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801c2fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c300:	699c      	ldr	r4, [r3, #24]
 801c302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c304:	69d8      	ldr	r0, [r3, #28]
 801c306:	8a3b      	ldrh	r3, [r7, #16]
 801c308:	9300      	str	r3, [sp, #0]
 801c30a:	4b24      	ldr	r3, [pc, #144]	@ (801c39c <udp_input+0x3fc>)
 801c30c:	687a      	ldr	r2, [r7, #4]
 801c30e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c310:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801c312:	e034      	b.n	801c37e <udp_input+0x3de>
        pbuf_free(p);
 801c314:	6878      	ldr	r0, [r7, #4]
 801c316:	f7f8 fda5 	bl	8014e64 <pbuf_free>
        goto end;
 801c31a:	e02f      	b.n	801c37c <udp_input+0x3dc>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 801c31c:	4820      	ldr	r0, [pc, #128]	@ (801c3a0 <udp_input+0x400>)
 801c31e:	f004 fe49 	bl	8020fb4 <puts>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801c322:	7cfb      	ldrb	r3, [r7, #19]
 801c324:	2b00      	cmp	r3, #0
 801c326:	d112      	bne.n	801c34e <udp_input+0x3ae>
 801c328:	4b17      	ldr	r3, [pc, #92]	@ (801c388 <udp_input+0x3e8>)
 801c32a:	695b      	ldr	r3, [r3, #20]
 801c32c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801c330:	2be0      	cmp	r3, #224	@ 0xe0
 801c332:	d00c      	beq.n	801c34e <udp_input+0x3ae>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801c334:	4b14      	ldr	r3, [pc, #80]	@ (801c388 <udp_input+0x3e8>)
 801c336:	899b      	ldrh	r3, [r3, #12]
 801c338:	3308      	adds	r3, #8
 801c33a:	b29b      	uxth	r3, r3
 801c33c:	b21b      	sxth	r3, r3
 801c33e:	4619      	mov	r1, r3
 801c340:	6878      	ldr	r0, [r7, #4]
 801c342:	f7f8 fd7c 	bl	8014e3e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801c346:	2103      	movs	r1, #3
 801c348:	6878      	ldr	r0, [r7, #4]
 801c34a:	f001 fe83 	bl	801e054 <icmp_dest_unreach>
      UDP_STATS_INC(udp.proterr);
 801c34e:	4b0d      	ldr	r3, [pc, #52]	@ (801c384 <udp_input+0x3e4>)
 801c350:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 801c354:	3301      	adds	r3, #1
 801c356:	b29a      	uxth	r2, r3
 801c358:	4b0a      	ldr	r3, [pc, #40]	@ (801c384 <udp_input+0x3e4>)
 801c35a:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
      UDP_STATS_INC(udp.drop);
 801c35e:	4b09      	ldr	r3, [pc, #36]	@ (801c384 <udp_input+0x3e4>)
 801c360:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 801c364:	3301      	adds	r3, #1
 801c366:	b29a      	uxth	r2, r3
 801c368:	4b06      	ldr	r3, [pc, #24]	@ (801c384 <udp_input+0x3e4>)
 801c36a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
      pbuf_free(p);
 801c36e:	6878      	ldr	r0, [r7, #4]
 801c370:	f7f8 fd78 	bl	8014e64 <pbuf_free>
  return;
 801c374:	e003      	b.n	801c37e <udp_input+0x3de>
    pbuf_free(p);
 801c376:	6878      	ldr	r0, [r7, #4]
 801c378:	f7f8 fd74 	bl	8014e64 <pbuf_free>
  return;
 801c37c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801c37e:	372c      	adds	r7, #44	@ 0x2c
 801c380:	46bd      	mov	sp, r7
 801c382:	bd90      	pop	{r4, r7, pc}
 801c384:	2002d36c 	.word	0x2002d36c
 801c388:	200270fc 	.word	0x200270fc
 801c38c:	08025794 	.word	0x08025794
 801c390:	08025620 	.word	0x08025620
 801c394:	080257b4 	.word	0x080257b4
 801c398:	08025674 	.word	0x08025674
 801c39c:	2002710c 	.word	0x2002710c
 801c3a0:	080257d0 	.word	0x080257d0

0801c3a4 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b082      	sub	sp, #8
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	6078      	str	r0, [r7, #4]
 801c3ac:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801c3ae:	687b      	ldr	r3, [r7, #4]
 801c3b0:	2b00      	cmp	r3, #0
 801c3b2:	d109      	bne.n	801c3c8 <udp_send+0x24>
 801c3b4:	4b11      	ldr	r3, [pc, #68]	@ (801c3fc <udp_send+0x58>)
 801c3b6:	f240 12d5 	movw	r2, #469	@ 0x1d5
 801c3ba:	4911      	ldr	r1, [pc, #68]	@ (801c400 <udp_send+0x5c>)
 801c3bc:	4811      	ldr	r0, [pc, #68]	@ (801c404 <udp_send+0x60>)
 801c3be:	f004 fd89 	bl	8020ed4 <iprintf>
 801c3c2:	f06f 030f 	mvn.w	r3, #15
 801c3c6:	e015      	b.n	801c3f4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801c3c8:	683b      	ldr	r3, [r7, #0]
 801c3ca:	2b00      	cmp	r3, #0
 801c3cc:	d109      	bne.n	801c3e2 <udp_send+0x3e>
 801c3ce:	4b0b      	ldr	r3, [pc, #44]	@ (801c3fc <udp_send+0x58>)
 801c3d0:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 801c3d4:	490c      	ldr	r1, [pc, #48]	@ (801c408 <udp_send+0x64>)
 801c3d6:	480b      	ldr	r0, [pc, #44]	@ (801c404 <udp_send+0x60>)
 801c3d8:	f004 fd7c 	bl	8020ed4 <iprintf>
 801c3dc:	f06f 030f 	mvn.w	r3, #15
 801c3e0:	e008      	b.n	801c3f4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801c3e2:	687b      	ldr	r3, [r7, #4]
 801c3e4:	1d1a      	adds	r2, r3, #4
 801c3e6:	687b      	ldr	r3, [r7, #4]
 801c3e8:	8a9b      	ldrh	r3, [r3, #20]
 801c3ea:	6839      	ldr	r1, [r7, #0]
 801c3ec:	6878      	ldr	r0, [r7, #4]
 801c3ee:	f000 f80d 	bl	801c40c <udp_sendto>
 801c3f2:	4603      	mov	r3, r0
}
 801c3f4:	4618      	mov	r0, r3
 801c3f6:	3708      	adds	r7, #8
 801c3f8:	46bd      	mov	sp, r7
 801c3fa:	bd80      	pop	{r7, pc}
 801c3fc:	08025620 	.word	0x08025620
 801c400:	080257e8 	.word	0x080257e8
 801c404:	08025674 	.word	0x08025674
 801c408:	08025800 	.word	0x08025800

0801c40c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801c40c:	b580      	push	{r7, lr}
 801c40e:	b088      	sub	sp, #32
 801c410:	af02      	add	r7, sp, #8
 801c412:	60f8      	str	r0, [r7, #12]
 801c414:	60b9      	str	r1, [r7, #8]
 801c416:	607a      	str	r2, [r7, #4]
 801c418:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	2b00      	cmp	r3, #0
 801c41e:	d109      	bne.n	801c434 <udp_sendto+0x28>
 801c420:	4b3f      	ldr	r3, [pc, #252]	@ (801c520 <udp_sendto+0x114>)
 801c422:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801c426:	493f      	ldr	r1, [pc, #252]	@ (801c524 <udp_sendto+0x118>)
 801c428:	483f      	ldr	r0, [pc, #252]	@ (801c528 <udp_sendto+0x11c>)
 801c42a:	f004 fd53 	bl	8020ed4 <iprintf>
 801c42e:	f06f 030f 	mvn.w	r3, #15
 801c432:	e070      	b.n	801c516 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801c434:	68bb      	ldr	r3, [r7, #8]
 801c436:	2b00      	cmp	r3, #0
 801c438:	d109      	bne.n	801c44e <udp_sendto+0x42>
 801c43a:	4b39      	ldr	r3, [pc, #228]	@ (801c520 <udp_sendto+0x114>)
 801c43c:	f240 2219 	movw	r2, #537	@ 0x219
 801c440:	493a      	ldr	r1, [pc, #232]	@ (801c52c <udp_sendto+0x120>)
 801c442:	4839      	ldr	r0, [pc, #228]	@ (801c528 <udp_sendto+0x11c>)
 801c444:	f004 fd46 	bl	8020ed4 <iprintf>
 801c448:	f06f 030f 	mvn.w	r3, #15
 801c44c:	e063      	b.n	801c516 <udp_sendto+0x10a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d109      	bne.n	801c468 <udp_sendto+0x5c>
 801c454:	4b32      	ldr	r3, [pc, #200]	@ (801c520 <udp_sendto+0x114>)
 801c456:	f240 221a 	movw	r2, #538	@ 0x21a
 801c45a:	4935      	ldr	r1, [pc, #212]	@ (801c530 <udp_sendto+0x124>)
 801c45c:	4832      	ldr	r0, [pc, #200]	@ (801c528 <udp_sendto+0x11c>)
 801c45e:	f004 fd39 	bl	8020ed4 <iprintf>
 801c462:	f06f 030f 	mvn.w	r3, #15
 801c466:	e056      	b.n	801c516 <udp_sendto+0x10a>

  if (!IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));
 801c468:	4832      	ldr	r0, [pc, #200]	@ (801c534 <udp_sendto+0x128>)
 801c46a:	f004 fda3 	bl	8020fb4 <puts>

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	7a1b      	ldrb	r3, [r3, #8]
 801c472:	2b00      	cmp	r3, #0
 801c474:	d006      	beq.n	801c484 <udp_sendto+0x78>
    netif = netif_get_by_index(pcb->netif_idx);
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	7a1b      	ldrb	r3, [r3, #8]
 801c47a:	4618      	mov	r0, r3
 801c47c:	f7f8 f918 	bl	80146b0 <netif_get_by_index>
 801c480:	6178      	str	r0, [r7, #20]
 801c482:	e003      	b.n	801c48c <udp_sendto+0x80>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801c484:	6878      	ldr	r0, [r7, #4]
 801c486:	f001 feb9 	bl	801e1fc <ip4_route>
 801c48a:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801c48c:	697b      	ldr	r3, [r7, #20]
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d137      	bne.n	801c502 <udp_sendto+0xf6>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
 801c492:	4829      	ldr	r0, [pc, #164]	@ (801c538 <udp_sendto+0x12c>)
 801c494:	f004 fd1e 	bl	8020ed4 <iprintf>
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	2b00      	cmp	r3, #0
 801c49c:	d003      	beq.n	801c4a6 <udp_sendto+0x9a>
 801c49e:	687b      	ldr	r3, [r7, #4]
 801c4a0:	781b      	ldrb	r3, [r3, #0]
 801c4a2:	4619      	mov	r1, r3
 801c4a4:	e000      	b.n	801c4a8 <udp_sendto+0x9c>
 801c4a6:	2100      	movs	r1, #0
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d004      	beq.n	801c4b8 <udp_sendto+0xac>
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	3301      	adds	r3, #1
 801c4b2:	781b      	ldrb	r3, [r3, #0]
 801c4b4:	461a      	mov	r2, r3
 801c4b6:	e000      	b.n	801c4ba <udp_sendto+0xae>
 801c4b8:	2200      	movs	r2, #0
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	2b00      	cmp	r3, #0
 801c4be:	d004      	beq.n	801c4ca <udp_sendto+0xbe>
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	3302      	adds	r3, #2
 801c4c4:	781b      	ldrb	r3, [r3, #0]
 801c4c6:	4618      	mov	r0, r3
 801c4c8:	e000      	b.n	801c4cc <udp_sendto+0xc0>
 801c4ca:	2000      	movs	r0, #0
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	2b00      	cmp	r3, #0
 801c4d0:	d003      	beq.n	801c4da <udp_sendto+0xce>
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	3303      	adds	r3, #3
 801c4d6:	781b      	ldrb	r3, [r3, #0]
 801c4d8:	e000      	b.n	801c4dc <udp_sendto+0xd0>
 801c4da:	2300      	movs	r3, #0
 801c4dc:	9300      	str	r3, [sp, #0]
 801c4de:	4603      	mov	r3, r0
 801c4e0:	4816      	ldr	r0, [pc, #88]	@ (801c53c <udp_sendto+0x130>)
 801c4e2:	f004 fcf7 	bl	8020ed4 <iprintf>
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
 801c4e6:	200a      	movs	r0, #10
 801c4e8:	f004 fd06 	bl	8020ef8 <putchar>
    UDP_STATS_INC(udp.rterr);
 801c4ec:	4b14      	ldr	r3, [pc, #80]	@ (801c540 <udp_sendto+0x134>)
 801c4ee:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 801c4f2:	3301      	adds	r3, #1
 801c4f4:	b29a      	uxth	r2, r3
 801c4f6:	4b12      	ldr	r3, [pc, #72]	@ (801c540 <udp_sendto+0x134>)
 801c4f8:	f8a3 2086 	strh.w	r2, [r3, #134]	@ 0x86
    return ERR_RTE;
 801c4fc:	f06f 0303 	mvn.w	r3, #3
 801c500:	e009      	b.n	801c516 <udp_sendto+0x10a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801c502:	887a      	ldrh	r2, [r7, #2]
 801c504:	697b      	ldr	r3, [r7, #20]
 801c506:	9300      	str	r3, [sp, #0]
 801c508:	4613      	mov	r3, r2
 801c50a:	687a      	ldr	r2, [r7, #4]
 801c50c:	68b9      	ldr	r1, [r7, #8]
 801c50e:	68f8      	ldr	r0, [r7, #12]
 801c510:	f000 f818 	bl	801c544 <udp_sendto_if>
 801c514:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c516:	4618      	mov	r0, r3
 801c518:	3718      	adds	r7, #24
 801c51a:	46bd      	mov	sp, r7
 801c51c:	bd80      	pop	{r7, pc}
 801c51e:	bf00      	nop
 801c520:	08025620 	.word	0x08025620
 801c524:	08025818 	.word	0x08025818
 801c528:	08025674 	.word	0x08025674
 801c52c:	08025830 	.word	0x08025830
 801c530:	0802584c 	.word	0x0802584c
 801c534:	08025868 	.word	0x08025868
 801c538:	08025874 	.word	0x08025874
 801c53c:	08025764 	.word	0x08025764
 801c540:	2002d36c 	.word	0x2002d36c

0801c544 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801c544:	b580      	push	{r7, lr}
 801c546:	b088      	sub	sp, #32
 801c548:	af02      	add	r7, sp, #8
 801c54a:	60f8      	str	r0, [r7, #12]
 801c54c:	60b9      	str	r1, [r7, #8]
 801c54e:	607a      	str	r2, [r7, #4]
 801c550:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801c552:	68fb      	ldr	r3, [r7, #12]
 801c554:	2b00      	cmp	r3, #0
 801c556:	d109      	bne.n	801c56c <udp_sendto_if+0x28>
 801c558:	4b2e      	ldr	r3, [pc, #184]	@ (801c614 <udp_sendto_if+0xd0>)
 801c55a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c55e:	492e      	ldr	r1, [pc, #184]	@ (801c618 <udp_sendto_if+0xd4>)
 801c560:	482e      	ldr	r0, [pc, #184]	@ (801c61c <udp_sendto_if+0xd8>)
 801c562:	f004 fcb7 	bl	8020ed4 <iprintf>
 801c566:	f06f 030f 	mvn.w	r3, #15
 801c56a:	e04f      	b.n	801c60c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801c56c:	68bb      	ldr	r3, [r7, #8]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d109      	bne.n	801c586 <udp_sendto_if+0x42>
 801c572:	4b28      	ldr	r3, [pc, #160]	@ (801c614 <udp_sendto_if+0xd0>)
 801c574:	f240 2281 	movw	r2, #641	@ 0x281
 801c578:	4929      	ldr	r1, [pc, #164]	@ (801c620 <udp_sendto_if+0xdc>)
 801c57a:	4828      	ldr	r0, [pc, #160]	@ (801c61c <udp_sendto_if+0xd8>)
 801c57c:	f004 fcaa 	bl	8020ed4 <iprintf>
 801c580:	f06f 030f 	mvn.w	r3, #15
 801c584:	e042      	b.n	801c60c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	2b00      	cmp	r3, #0
 801c58a:	d109      	bne.n	801c5a0 <udp_sendto_if+0x5c>
 801c58c:	4b21      	ldr	r3, [pc, #132]	@ (801c614 <udp_sendto_if+0xd0>)
 801c58e:	f240 2282 	movw	r2, #642	@ 0x282
 801c592:	4924      	ldr	r1, [pc, #144]	@ (801c624 <udp_sendto_if+0xe0>)
 801c594:	4821      	ldr	r0, [pc, #132]	@ (801c61c <udp_sendto_if+0xd8>)
 801c596:	f004 fc9d 	bl	8020ed4 <iprintf>
 801c59a:	f06f 030f 	mvn.w	r3, #15
 801c59e:	e035      	b.n	801c60c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801c5a0:	6a3b      	ldr	r3, [r7, #32]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d109      	bne.n	801c5ba <udp_sendto_if+0x76>
 801c5a6:	4b1b      	ldr	r3, [pc, #108]	@ (801c614 <udp_sendto_if+0xd0>)
 801c5a8:	f240 2283 	movw	r2, #643	@ 0x283
 801c5ac:	491e      	ldr	r1, [pc, #120]	@ (801c628 <udp_sendto_if+0xe4>)
 801c5ae:	481b      	ldr	r0, [pc, #108]	@ (801c61c <udp_sendto_if+0xd8>)
 801c5b0:	f004 fc90 	bl	8020ed4 <iprintf>
 801c5b4:	f06f 030f 	mvn.w	r3, #15
 801c5b8:	e028      	b.n	801c60c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c5ba:	68fb      	ldr	r3, [r7, #12]
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d009      	beq.n	801c5d4 <udp_sendto_if+0x90>
 801c5c0:	68fb      	ldr	r3, [r7, #12]
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	2b00      	cmp	r3, #0
 801c5c6:	d005      	beq.n	801c5d4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801c5c8:	68fb      	ldr	r3, [r7, #12]
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801c5d0:	2be0      	cmp	r3, #224	@ 0xe0
 801c5d2:	d103      	bne.n	801c5dc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801c5d4:	6a3b      	ldr	r3, [r7, #32]
 801c5d6:	3304      	adds	r3, #4
 801c5d8:	617b      	str	r3, [r7, #20]
 801c5da:	e00b      	b.n	801c5f4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	681a      	ldr	r2, [r3, #0]
 801c5e0:	6a3b      	ldr	r3, [r7, #32]
 801c5e2:	3304      	adds	r3, #4
 801c5e4:	681b      	ldr	r3, [r3, #0]
 801c5e6:	429a      	cmp	r2, r3
 801c5e8:	d002      	beq.n	801c5f0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801c5ea:	f06f 0303 	mvn.w	r3, #3
 801c5ee:	e00d      	b.n	801c60c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801c5f4:	887a      	ldrh	r2, [r7, #2]
 801c5f6:	697b      	ldr	r3, [r7, #20]
 801c5f8:	9301      	str	r3, [sp, #4]
 801c5fa:	6a3b      	ldr	r3, [r7, #32]
 801c5fc:	9300      	str	r3, [sp, #0]
 801c5fe:	4613      	mov	r3, r2
 801c600:	687a      	ldr	r2, [r7, #4]
 801c602:	68b9      	ldr	r1, [r7, #8]
 801c604:	68f8      	ldr	r0, [r7, #12]
 801c606:	f000 f811 	bl	801c62c <udp_sendto_if_src>
 801c60a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801c60c:	4618      	mov	r0, r3
 801c60e:	3718      	adds	r7, #24
 801c610:	46bd      	mov	sp, r7
 801c612:	bd80      	pop	{r7, pc}
 801c614:	08025620 	.word	0x08025620
 801c618:	0802588c 	.word	0x0802588c
 801c61c:	08025674 	.word	0x08025674
 801c620:	080258a8 	.word	0x080258a8
 801c624:	080258c4 	.word	0x080258c4
 801c628:	080258e4 	.word	0x080258e4

0801c62c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801c62c:	b580      	push	{r7, lr}
 801c62e:	b08c      	sub	sp, #48	@ 0x30
 801c630:	af04      	add	r7, sp, #16
 801c632:	60f8      	str	r0, [r7, #12]
 801c634:	60b9      	str	r1, [r7, #8]
 801c636:	607a      	str	r2, [r7, #4]
 801c638:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	2b00      	cmp	r3, #0
 801c63e:	d109      	bne.n	801c654 <udp_sendto_if_src+0x28>
 801c640:	4b7e      	ldr	r3, [pc, #504]	@ (801c83c <udp_sendto_if_src+0x210>)
 801c642:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801c646:	497e      	ldr	r1, [pc, #504]	@ (801c840 <udp_sendto_if_src+0x214>)
 801c648:	487e      	ldr	r0, [pc, #504]	@ (801c844 <udp_sendto_if_src+0x218>)
 801c64a:	f004 fc43 	bl	8020ed4 <iprintf>
 801c64e:	f06f 030f 	mvn.w	r3, #15
 801c652:	e0ee      	b.n	801c832 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801c654:	68bb      	ldr	r3, [r7, #8]
 801c656:	2b00      	cmp	r3, #0
 801c658:	d109      	bne.n	801c66e <udp_sendto_if_src+0x42>
 801c65a:	4b78      	ldr	r3, [pc, #480]	@ (801c83c <udp_sendto_if_src+0x210>)
 801c65c:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801c660:	4979      	ldr	r1, [pc, #484]	@ (801c848 <udp_sendto_if_src+0x21c>)
 801c662:	4878      	ldr	r0, [pc, #480]	@ (801c844 <udp_sendto_if_src+0x218>)
 801c664:	f004 fc36 	bl	8020ed4 <iprintf>
 801c668:	f06f 030f 	mvn.w	r3, #15
 801c66c:	e0e1      	b.n	801c832 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	2b00      	cmp	r3, #0
 801c672:	d109      	bne.n	801c688 <udp_sendto_if_src+0x5c>
 801c674:	4b71      	ldr	r3, [pc, #452]	@ (801c83c <udp_sendto_if_src+0x210>)
 801c676:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801c67a:	4974      	ldr	r1, [pc, #464]	@ (801c84c <udp_sendto_if_src+0x220>)
 801c67c:	4871      	ldr	r0, [pc, #452]	@ (801c844 <udp_sendto_if_src+0x218>)
 801c67e:	f004 fc29 	bl	8020ed4 <iprintf>
 801c682:	f06f 030f 	mvn.w	r3, #15
 801c686:	e0d4      	b.n	801c832 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801c688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d109      	bne.n	801c6a2 <udp_sendto_if_src+0x76>
 801c68e:	4b6b      	ldr	r3, [pc, #428]	@ (801c83c <udp_sendto_if_src+0x210>)
 801c690:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 801c694:	496e      	ldr	r1, [pc, #440]	@ (801c850 <udp_sendto_if_src+0x224>)
 801c696:	486b      	ldr	r0, [pc, #428]	@ (801c844 <udp_sendto_if_src+0x218>)
 801c698:	f004 fc1c 	bl	8020ed4 <iprintf>
 801c69c:	f06f 030f 	mvn.w	r3, #15
 801c6a0:	e0c7      	b.n	801c832 <udp_sendto_if_src+0x206>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801c6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d109      	bne.n	801c6bc <udp_sendto_if_src+0x90>
 801c6a8:	4b64      	ldr	r3, [pc, #400]	@ (801c83c <udp_sendto_if_src+0x210>)
 801c6aa:	f240 22d5 	movw	r2, #725	@ 0x2d5
 801c6ae:	4969      	ldr	r1, [pc, #420]	@ (801c854 <udp_sendto_if_src+0x228>)
 801c6b0:	4864      	ldr	r0, [pc, #400]	@ (801c844 <udp_sendto_if_src+0x218>)
 801c6b2:	f004 fc0f 	bl	8020ed4 <iprintf>
 801c6b6:	f06f 030f 	mvn.w	r3, #15
 801c6ba:	e0ba      	b.n	801c832 <udp_sendto_if_src+0x206>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801c6bc:	68fb      	ldr	r3, [r7, #12]
 801c6be:	8a5b      	ldrh	r3, [r3, #18]
 801c6c0:	2b00      	cmp	r3, #0
 801c6c2:	d115      	bne.n	801c6f0 <udp_sendto_if_src+0xc4>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801c6c4:	4864      	ldr	r0, [pc, #400]	@ (801c858 <udp_sendto_if_src+0x22c>)
 801c6c6:	f004 fc75 	bl	8020fb4 <puts>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801c6ca:	68f9      	ldr	r1, [r7, #12]
 801c6cc:	68fb      	ldr	r3, [r7, #12]
 801c6ce:	8a5b      	ldrh	r3, [r3, #18]
 801c6d0:	461a      	mov	r2, r3
 801c6d2:	68f8      	ldr	r0, [r7, #12]
 801c6d4:	f000 f8d6 	bl	801c884 <udp_bind>
 801c6d8:	4603      	mov	r3, r0
 801c6da:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801c6dc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d005      	beq.n	801c6f0 <udp_sendto_if_src+0xc4>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 801c6e4:	485d      	ldr	r0, [pc, #372]	@ (801c85c <udp_sendto_if_src+0x230>)
 801c6e6:	f004 fc65 	bl	8020fb4 <puts>
      return err;
 801c6ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801c6ee:	e0a0      	b.n	801c832 <udp_sendto_if_src+0x206>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801c6f0:	68bb      	ldr	r3, [r7, #8]
 801c6f2:	891b      	ldrh	r3, [r3, #8]
 801c6f4:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801c6f8:	4293      	cmp	r3, r2
 801c6fa:	d902      	bls.n	801c702 <udp_sendto_if_src+0xd6>
    return ERR_MEM;
 801c6fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c700:	e097      	b.n	801c832 <udp_sendto_if_src+0x206>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801c702:	2108      	movs	r1, #8
 801c704:	68b8      	ldr	r0, [r7, #8]
 801c706:	f7f8 fb0f 	bl	8014d28 <pbuf_add_header>
 801c70a:	4603      	mov	r3, r0
 801c70c:	2b00      	cmp	r3, #0
 801c70e:	d01d      	beq.n	801c74c <udp_sendto_if_src+0x120>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801c710:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c714:	2108      	movs	r1, #8
 801c716:	2022      	movs	r0, #34	@ 0x22
 801c718:	f7f8 f878 	bl	801480c <pbuf_alloc>
 801c71c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801c71e:	69fb      	ldr	r3, [r7, #28]
 801c720:	2b00      	cmp	r3, #0
 801c722:	d105      	bne.n	801c730 <udp_sendto_if_src+0x104>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 801c724:	484e      	ldr	r0, [pc, #312]	@ (801c860 <udp_sendto_if_src+0x234>)
 801c726:	f004 fc45 	bl	8020fb4 <puts>
      return ERR_MEM;
 801c72a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801c72e:	e080      	b.n	801c832 <udp_sendto_if_src+0x206>
    }
    if (p->tot_len != 0) {
 801c730:	68bb      	ldr	r3, [r7, #8]
 801c732:	891b      	ldrh	r3, [r3, #8]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d003      	beq.n	801c740 <udp_sendto_if_src+0x114>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801c738:	68b9      	ldr	r1, [r7, #8]
 801c73a:	69f8      	ldr	r0, [r7, #28]
 801c73c:	f7f8 fcce 	bl	80150dc <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 801c740:	68ba      	ldr	r2, [r7, #8]
 801c742:	69f9      	ldr	r1, [r7, #28]
 801c744:	4847      	ldr	r0, [pc, #284]	@ (801c864 <udp_sendto_if_src+0x238>)
 801c746:	f004 fbc5 	bl	8020ed4 <iprintf>
 801c74a:	e005      	b.n	801c758 <udp_sendto_if_src+0x12c>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801c74c:	68bb      	ldr	r3, [r7, #8]
 801c74e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 801c750:	68b9      	ldr	r1, [r7, #8]
 801c752:	4845      	ldr	r0, [pc, #276]	@ (801c868 <udp_sendto_if_src+0x23c>)
 801c754:	f004 fbbe 	bl	8020ed4 <iprintf>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801c758:	69fb      	ldr	r3, [r7, #28]
 801c75a:	895b      	ldrh	r3, [r3, #10]
 801c75c:	2b07      	cmp	r3, #7
 801c75e:	d806      	bhi.n	801c76e <udp_sendto_if_src+0x142>
 801c760:	4b36      	ldr	r3, [pc, #216]	@ (801c83c <udp_sendto_if_src+0x210>)
 801c762:	f240 320d 	movw	r2, #781	@ 0x30d
 801c766:	4941      	ldr	r1, [pc, #260]	@ (801c86c <udp_sendto_if_src+0x240>)
 801c768:	4836      	ldr	r0, [pc, #216]	@ (801c844 <udp_sendto_if_src+0x218>)
 801c76a:	f004 fbb3 	bl	8020ed4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801c76e:	69fb      	ldr	r3, [r7, #28]
 801c770:	685b      	ldr	r3, [r3, #4]
 801c772:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801c774:	68fb      	ldr	r3, [r7, #12]
 801c776:	8a5b      	ldrh	r3, [r3, #18]
 801c778:	4618      	mov	r0, r3
 801c77a:	f7f6 fd45 	bl	8013208 <lwip_htons>
 801c77e:	4603      	mov	r3, r0
 801c780:	461a      	mov	r2, r3
 801c782:	697b      	ldr	r3, [r7, #20]
 801c784:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801c786:	887b      	ldrh	r3, [r7, #2]
 801c788:	4618      	mov	r0, r3
 801c78a:	f7f6 fd3d 	bl	8013208 <lwip_htons>
 801c78e:	4603      	mov	r3, r0
 801c790:	461a      	mov	r2, r3
 801c792:	697b      	ldr	r3, [r7, #20]
 801c794:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801c796:	697b      	ldr	r3, [r7, #20]
 801c798:	2200      	movs	r2, #0
 801c79a:	719a      	strb	r2, [r3, #6]
 801c79c:	2200      	movs	r2, #0
 801c79e:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801c7a0:	69fb      	ldr	r3, [r7, #28]
 801c7a2:	891b      	ldrh	r3, [r3, #8]
 801c7a4:	4619      	mov	r1, r3
 801c7a6:	4832      	ldr	r0, [pc, #200]	@ (801c870 <udp_sendto_if_src+0x244>)
 801c7a8:	f004 fb94 	bl	8020ed4 <iprintf>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801c7ac:	69fb      	ldr	r3, [r7, #28]
 801c7ae:	891b      	ldrh	r3, [r3, #8]
 801c7b0:	4619      	mov	r1, r3
 801c7b2:	4830      	ldr	r0, [pc, #192]	@ (801c874 <udp_sendto_if_src+0x248>)
 801c7b4:	f004 fb8e 	bl	8020ed4 <iprintf>
    udphdr->len = lwip_htons(q->tot_len);
 801c7b8:	69fb      	ldr	r3, [r7, #28]
 801c7ba:	891b      	ldrh	r3, [r3, #8]
 801c7bc:	4618      	mov	r0, r3
 801c7be:	f7f6 fd23 	bl	8013208 <lwip_htons>
 801c7c2:	4603      	mov	r3, r0
 801c7c4:	461a      	mov	r2, r3
 801c7c6:	697b      	ldr	r3, [r7, #20]
 801c7c8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801c7ca:	2311      	movs	r3, #17
 801c7cc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801c7ce:	68fb      	ldr	r3, [r7, #12]
 801c7d0:	7adb      	ldrb	r3, [r3, #11]
 801c7d2:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801c7d4:	697b      	ldr	r3, [r7, #20]
 801c7d6:	88db      	ldrh	r3, [r3, #6]
 801c7d8:	b29b      	uxth	r3, r3
 801c7da:	4619      	mov	r1, r3
 801c7dc:	4826      	ldr	r0, [pc, #152]	@ (801c878 <udp_sendto_if_src+0x24c>)
 801c7de:	f004 fb79 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801c7e2:	7cfb      	ldrb	r3, [r7, #19]
 801c7e4:	4619      	mov	r1, r3
 801c7e6:	4825      	ldr	r0, [pc, #148]	@ (801c87c <udp_sendto_if_src+0x250>)
 801c7e8:	f004 fb74 	bl	8020ed4 <iprintf>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801c7ec:	68fb      	ldr	r3, [r7, #12]
 801c7ee:	7a9b      	ldrb	r3, [r3, #10]
 801c7f0:	7cb9      	ldrb	r1, [r7, #18]
 801c7f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c7f4:	9202      	str	r2, [sp, #8]
 801c7f6:	7cfa      	ldrb	r2, [r7, #19]
 801c7f8:	9201      	str	r2, [sp, #4]
 801c7fa:	9300      	str	r3, [sp, #0]
 801c7fc:	460b      	mov	r3, r1
 801c7fe:	687a      	ldr	r2, [r7, #4]
 801c800:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c802:	69f8      	ldr	r0, [r7, #28]
 801c804:	f001 ff3a 	bl	801e67c <ip4_output_if_src>
 801c808:	4603      	mov	r3, r0
 801c80a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801c80c:	69fa      	ldr	r2, [r7, #28]
 801c80e:	68bb      	ldr	r3, [r7, #8]
 801c810:	429a      	cmp	r2, r3
 801c812:	d004      	beq.n	801c81e <udp_sendto_if_src+0x1f2>
    /* free the header pbuf */
    pbuf_free(q);
 801c814:	69f8      	ldr	r0, [r7, #28]
 801c816:	f7f8 fb25 	bl	8014e64 <pbuf_free>
    q = NULL;
 801c81a:	2300      	movs	r3, #0
 801c81c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
 801c81e:	4b18      	ldr	r3, [pc, #96]	@ (801c880 <udp_sendto_if_src+0x254>)
 801c820:	f8b3 3078 	ldrh.w	r3, [r3, #120]	@ 0x78
 801c824:	3301      	adds	r3, #1
 801c826:	b29a      	uxth	r2, r3
 801c828:	4b15      	ldr	r3, [pc, #84]	@ (801c880 <udp_sendto_if_src+0x254>)
 801c82a:	f8a3 2078 	strh.w	r2, [r3, #120]	@ 0x78
  return err;
 801c82e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801c832:	4618      	mov	r0, r3
 801c834:	3720      	adds	r7, #32
 801c836:	46bd      	mov	sp, r7
 801c838:	bd80      	pop	{r7, pc}
 801c83a:	bf00      	nop
 801c83c:	08025620 	.word	0x08025620
 801c840:	08025904 	.word	0x08025904
 801c844:	08025674 	.word	0x08025674
 801c848:	08025924 	.word	0x08025924
 801c84c:	08025944 	.word	0x08025944
 801c850:	08025968 	.word	0x08025968
 801c854:	0802598c 	.word	0x0802598c
 801c858:	080259b0 	.word	0x080259b0
 801c85c:	080259e0 	.word	0x080259e0
 801c860:	08025a04 	.word	0x08025a04
 801c864:	08025a28 	.word	0x08025a28
 801c868:	08025a60 	.word	0x08025a60
 801c86c:	08025a8c 	.word	0x08025a8c
 801c870:	08025abc 	.word	0x08025abc
 801c874:	08025ae8 	.word	0x08025ae8
 801c878:	08025b0c 	.word	0x08025b0c
 801c87c:	08025b2c 	.word	0x08025b2c
 801c880:	2002d36c 	.word	0x2002d36c

0801c884 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801c884:	b580      	push	{r7, lr}
 801c886:	b088      	sub	sp, #32
 801c888:	af02      	add	r7, sp, #8
 801c88a:	60f8      	str	r0, [r7, #12]
 801c88c:	60b9      	str	r1, [r7, #8]
 801c88e:	4613      	mov	r3, r2
 801c890:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801c892:	68bb      	ldr	r3, [r7, #8]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d101      	bne.n	801c89c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801c898:	4b65      	ldr	r3, [pc, #404]	@ (801ca30 <udp_bind+0x1ac>)
 801c89a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	2b00      	cmp	r3, #0
 801c8a0:	d109      	bne.n	801c8b6 <udp_bind+0x32>
 801c8a2:	4b64      	ldr	r3, [pc, #400]	@ (801ca34 <udp_bind+0x1b0>)
 801c8a4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 801c8a8:	4963      	ldr	r1, [pc, #396]	@ (801ca38 <udp_bind+0x1b4>)
 801c8aa:	4864      	ldr	r0, [pc, #400]	@ (801ca3c <udp_bind+0x1b8>)
 801c8ac:	f004 fb12 	bl	8020ed4 <iprintf>
 801c8b0:	f06f 030f 	mvn.w	r3, #15
 801c8b4:	e0b7      	b.n	801ca26 <udp_bind+0x1a2>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 801c8b6:	4862      	ldr	r0, [pc, #392]	@ (801ca40 <udp_bind+0x1bc>)
 801c8b8:	f004 fb0c 	bl	8020ed4 <iprintf>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 801c8bc:	68bb      	ldr	r3, [r7, #8]
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d003      	beq.n	801c8ca <udp_bind+0x46>
 801c8c2:	68bb      	ldr	r3, [r7, #8]
 801c8c4:	781b      	ldrb	r3, [r3, #0]
 801c8c6:	4619      	mov	r1, r3
 801c8c8:	e000      	b.n	801c8cc <udp_bind+0x48>
 801c8ca:	2100      	movs	r1, #0
 801c8cc:	68bb      	ldr	r3, [r7, #8]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d004      	beq.n	801c8dc <udp_bind+0x58>
 801c8d2:	68bb      	ldr	r3, [r7, #8]
 801c8d4:	3301      	adds	r3, #1
 801c8d6:	781b      	ldrb	r3, [r3, #0]
 801c8d8:	461a      	mov	r2, r3
 801c8da:	e000      	b.n	801c8de <udp_bind+0x5a>
 801c8dc:	2200      	movs	r2, #0
 801c8de:	68bb      	ldr	r3, [r7, #8]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d004      	beq.n	801c8ee <udp_bind+0x6a>
 801c8e4:	68bb      	ldr	r3, [r7, #8]
 801c8e6:	3302      	adds	r3, #2
 801c8e8:	781b      	ldrb	r3, [r3, #0]
 801c8ea:	4618      	mov	r0, r3
 801c8ec:	e000      	b.n	801c8f0 <udp_bind+0x6c>
 801c8ee:	2000      	movs	r0, #0
 801c8f0:	68bb      	ldr	r3, [r7, #8]
 801c8f2:	2b00      	cmp	r3, #0
 801c8f4:	d003      	beq.n	801c8fe <udp_bind+0x7a>
 801c8f6:	68bb      	ldr	r3, [r7, #8]
 801c8f8:	3303      	adds	r3, #3
 801c8fa:	781b      	ldrb	r3, [r3, #0]
 801c8fc:	e000      	b.n	801c900 <udp_bind+0x7c>
 801c8fe:	2300      	movs	r3, #0
 801c900:	9300      	str	r3, [sp, #0]
 801c902:	4603      	mov	r3, r0
 801c904:	484f      	ldr	r0, [pc, #316]	@ (801ca44 <udp_bind+0x1c0>)
 801c906:	f004 fae5 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 801c90a:	88fb      	ldrh	r3, [r7, #6]
 801c90c:	4619      	mov	r1, r3
 801c90e:	484e      	ldr	r0, [pc, #312]	@ (801ca48 <udp_bind+0x1c4>)
 801c910:	f004 fae0 	bl	8020ed4 <iprintf>

  rebind = 0;
 801c914:	2300      	movs	r3, #0
 801c916:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c918:	4b4c      	ldr	r3, [pc, #304]	@ (801ca4c <udp_bind+0x1c8>)
 801c91a:	681b      	ldr	r3, [r3, #0]
 801c91c:	617b      	str	r3, [r7, #20]
 801c91e:	e009      	b.n	801c934 <udp_bind+0xb0>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801c920:	68fa      	ldr	r2, [r7, #12]
 801c922:	697b      	ldr	r3, [r7, #20]
 801c924:	429a      	cmp	r2, r3
 801c926:	d102      	bne.n	801c92e <udp_bind+0xaa>
      rebind = 1;
 801c928:	2301      	movs	r3, #1
 801c92a:	74fb      	strb	r3, [r7, #19]
      break;
 801c92c:	e005      	b.n	801c93a <udp_bind+0xb6>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c92e:	697b      	ldr	r3, [r7, #20]
 801c930:	68db      	ldr	r3, [r3, #12]
 801c932:	617b      	str	r3, [r7, #20]
 801c934:	697b      	ldr	r3, [r7, #20]
 801c936:	2b00      	cmp	r3, #0
 801c938:	d1f2      	bne.n	801c920 <udp_bind+0x9c>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801c93a:	88fb      	ldrh	r3, [r7, #6]
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d10c      	bne.n	801c95a <udp_bind+0xd6>
    port = udp_new_port();
 801c940:	f7ff fa92 	bl	801be68 <udp_new_port>
 801c944:	4603      	mov	r3, r0
 801c946:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801c948:	88fb      	ldrh	r3, [r7, #6]
 801c94a:	2b00      	cmp	r3, #0
 801c94c:	d134      	bne.n	801c9b8 <udp_bind+0x134>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 801c94e:	4840      	ldr	r0, [pc, #256]	@ (801ca50 <udp_bind+0x1cc>)
 801c950:	f004 fb30 	bl	8020fb4 <puts>
      return ERR_USE;
 801c954:	f06f 0307 	mvn.w	r3, #7
 801c958:	e065      	b.n	801ca26 <udp_bind+0x1a2>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c95a:	4b3c      	ldr	r3, [pc, #240]	@ (801ca4c <udp_bind+0x1c8>)
 801c95c:	681b      	ldr	r3, [r3, #0]
 801c95e:	617b      	str	r3, [r7, #20]
 801c960:	e027      	b.n	801c9b2 <udp_bind+0x12e>
      if (pcb != ipcb) {
 801c962:	68fa      	ldr	r2, [r7, #12]
 801c964:	697b      	ldr	r3, [r7, #20]
 801c966:	429a      	cmp	r2, r3
 801c968:	d020      	beq.n	801c9ac <udp_bind+0x128>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801c96a:	697b      	ldr	r3, [r7, #20]
 801c96c:	8a5b      	ldrh	r3, [r3, #18]
 801c96e:	88fa      	ldrh	r2, [r7, #6]
 801c970:	429a      	cmp	r2, r3
 801c972:	d11b      	bne.n	801c9ac <udp_bind+0x128>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c974:	697b      	ldr	r3, [r7, #20]
 801c976:	681a      	ldr	r2, [r3, #0]
 801c978:	68bb      	ldr	r3, [r7, #8]
 801c97a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801c97c:	429a      	cmp	r2, r3
 801c97e:	d00d      	beq.n	801c99c <udp_bind+0x118>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c980:	68bb      	ldr	r3, [r7, #8]
 801c982:	2b00      	cmp	r3, #0
 801c984:	d00a      	beq.n	801c99c <udp_bind+0x118>
 801c986:	68bb      	ldr	r3, [r7, #8]
 801c988:	681b      	ldr	r3, [r3, #0]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d006      	beq.n	801c99c <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c98e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801c990:	2b00      	cmp	r3, #0
 801c992:	d003      	beq.n	801c99c <udp_bind+0x118>
              ip_addr_isany(&ipcb->local_ip))) {
 801c994:	697b      	ldr	r3, [r7, #20]
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d107      	bne.n	801c9ac <udp_bind+0x128>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 801c99c:	88fb      	ldrh	r3, [r7, #6]
 801c99e:	4619      	mov	r1, r3
 801c9a0:	482c      	ldr	r0, [pc, #176]	@ (801ca54 <udp_bind+0x1d0>)
 801c9a2:	f004 fa97 	bl	8020ed4 <iprintf>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801c9a6:	f06f 0307 	mvn.w	r3, #7
 801c9aa:	e03c      	b.n	801ca26 <udp_bind+0x1a2>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801c9ac:	697b      	ldr	r3, [r7, #20]
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	617b      	str	r3, [r7, #20]
 801c9b2:	697b      	ldr	r3, [r7, #20]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d1d4      	bne.n	801c962 <udp_bind+0xde>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801c9b8:	68bb      	ldr	r3, [r7, #8]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d002      	beq.n	801c9c4 <udp_bind+0x140>
 801c9be:	68bb      	ldr	r3, [r7, #8]
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	e000      	b.n	801c9c6 <udp_bind+0x142>
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	68fa      	ldr	r2, [r7, #12]
 801c9c8:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801c9ca:	68fb      	ldr	r3, [r7, #12]
 801c9cc:	88fa      	ldrh	r2, [r7, #6]
 801c9ce:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801c9d0:	7cfb      	ldrb	r3, [r7, #19]
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	d106      	bne.n	801c9e4 <udp_bind+0x160>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801c9d6:	4b1d      	ldr	r3, [pc, #116]	@ (801ca4c <udp_bind+0x1c8>)
 801c9d8:	681a      	ldr	r2, [r3, #0]
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801c9de:	4a1b      	ldr	r2, [pc, #108]	@ (801ca4c <udp_bind+0x1c8>)
 801c9e0:	68fb      	ldr	r3, [r7, #12]
 801c9e2:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 801c9e4:	481c      	ldr	r0, [pc, #112]	@ (801ca58 <udp_bind+0x1d4>)
 801c9e6:	f004 fa75 	bl	8020ed4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	681b      	ldr	r3, [r3, #0]
 801c9ee:	b2db      	uxtb	r3, r3
 801c9f0:	4619      	mov	r1, r3
 801c9f2:	68fb      	ldr	r3, [r7, #12]
 801c9f4:	681b      	ldr	r3, [r3, #0]
 801c9f6:	0a1b      	lsrs	r3, r3, #8
 801c9f8:	b2db      	uxtb	r3, r3
 801c9fa:	461a      	mov	r2, r3
 801c9fc:	68fb      	ldr	r3, [r7, #12]
 801c9fe:	681b      	ldr	r3, [r3, #0]
 801ca00:	0c1b      	lsrs	r3, r3, #16
 801ca02:	b2db      	uxtb	r3, r3
 801ca04:	4618      	mov	r0, r3
 801ca06:	68fb      	ldr	r3, [r7, #12]
 801ca08:	681b      	ldr	r3, [r3, #0]
 801ca0a:	0e1b      	lsrs	r3, r3, #24
 801ca0c:	b2db      	uxtb	r3, r3
 801ca0e:	9300      	str	r3, [sp, #0]
 801ca10:	4603      	mov	r3, r0
 801ca12:	480c      	ldr	r0, [pc, #48]	@ (801ca44 <udp_bind+0x1c0>)
 801ca14:	f004 fa5e 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 801ca18:	68fb      	ldr	r3, [r7, #12]
 801ca1a:	8a5b      	ldrh	r3, [r3, #18]
 801ca1c:	4619      	mov	r1, r3
 801ca1e:	480f      	ldr	r0, [pc, #60]	@ (801ca5c <udp_bind+0x1d8>)
 801ca20:	f004 fa58 	bl	8020ed4 <iprintf>
  return ERR_OK;
 801ca24:	2300      	movs	r3, #0
}
 801ca26:	4618      	mov	r0, r3
 801ca28:	3718      	adds	r7, #24
 801ca2a:	46bd      	mov	sp, r7
 801ca2c:	bd80      	pop	{r7, pc}
 801ca2e:	bf00      	nop
 801ca30:	08026dbc 	.word	0x08026dbc
 801ca34:	08025620 	.word	0x08025620
 801ca38:	08025b54 	.word	0x08025b54
 801ca3c:	08025674 	.word	0x08025674
 801ca40:	08025b6c 	.word	0x08025b6c
 801ca44:	08025764 	.word	0x08025764
 801ca48:	08025b80 	.word	0x08025b80
 801ca4c:	2002d4cc 	.word	0x2002d4cc
 801ca50:	08025b90 	.word	0x08025b90
 801ca54:	08025bb0 	.word	0x08025bb0
 801ca58:	08025be8 	.word	0x08025be8
 801ca5c:	08025bfc 	.word	0x08025bfc

0801ca60 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801ca60:	b580      	push	{r7, lr}
 801ca62:	b088      	sub	sp, #32
 801ca64:	af02      	add	r7, sp, #8
 801ca66:	60f8      	str	r0, [r7, #12]
 801ca68:	60b9      	str	r1, [r7, #8]
 801ca6a:	4613      	mov	r3, r2
 801ca6c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d109      	bne.n	801ca88 <udp_connect+0x28>
 801ca74:	4b3c      	ldr	r3, [pc, #240]	@ (801cb68 <udp_connect+0x108>)
 801ca76:	f240 4235 	movw	r2, #1077	@ 0x435
 801ca7a:	493c      	ldr	r1, [pc, #240]	@ (801cb6c <udp_connect+0x10c>)
 801ca7c:	483c      	ldr	r0, [pc, #240]	@ (801cb70 <udp_connect+0x110>)
 801ca7e:	f004 fa29 	bl	8020ed4 <iprintf>
 801ca82:	f06f 030f 	mvn.w	r3, #15
 801ca86:	e06b      	b.n	801cb60 <udp_connect+0x100>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801ca88:	68bb      	ldr	r3, [r7, #8]
 801ca8a:	2b00      	cmp	r3, #0
 801ca8c:	d109      	bne.n	801caa2 <udp_connect+0x42>
 801ca8e:	4b36      	ldr	r3, [pc, #216]	@ (801cb68 <udp_connect+0x108>)
 801ca90:	f240 4236 	movw	r2, #1078	@ 0x436
 801ca94:	4937      	ldr	r1, [pc, #220]	@ (801cb74 <udp_connect+0x114>)
 801ca96:	4836      	ldr	r0, [pc, #216]	@ (801cb70 <udp_connect+0x110>)
 801ca98:	f004 fa1c 	bl	8020ed4 <iprintf>
 801ca9c:	f06f 030f 	mvn.w	r3, #15
 801caa0:	e05e      	b.n	801cb60 <udp_connect+0x100>

  if (pcb->local_port == 0) {
 801caa2:	68fb      	ldr	r3, [r7, #12]
 801caa4:	8a5b      	ldrh	r3, [r3, #18]
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d10f      	bne.n	801caca <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801caaa:	68f9      	ldr	r1, [r7, #12]
 801caac:	68fb      	ldr	r3, [r7, #12]
 801caae:	8a5b      	ldrh	r3, [r3, #18]
 801cab0:	461a      	mov	r2, r3
 801cab2:	68f8      	ldr	r0, [r7, #12]
 801cab4:	f7ff fee6 	bl	801c884 <udp_bind>
 801cab8:	4603      	mov	r3, r0
 801caba:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801cabc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cac0:	2b00      	cmp	r3, #0
 801cac2:	d002      	beq.n	801caca <udp_connect+0x6a>
      return err;
 801cac4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801cac8:	e04a      	b.n	801cb60 <udp_connect+0x100>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801caca:	68bb      	ldr	r3, [r7, #8]
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d002      	beq.n	801cad6 <udp_connect+0x76>
 801cad0:	68bb      	ldr	r3, [r7, #8]
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	e000      	b.n	801cad8 <udp_connect+0x78>
 801cad6:	2300      	movs	r3, #0
 801cad8:	68fa      	ldr	r2, [r7, #12]
 801cada:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801cadc:	68fb      	ldr	r3, [r7, #12]
 801cade:	88fa      	ldrh	r2, [r7, #6]
 801cae0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801cae2:	68fb      	ldr	r3, [r7, #12]
 801cae4:	7c1b      	ldrb	r3, [r3, #16]
 801cae6:	f043 0304 	orr.w	r3, r3, #4
 801caea:	b2da      	uxtb	r2, r3
 801caec:	68fb      	ldr	r3, [r7, #12]
 801caee:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 801caf0:	4821      	ldr	r0, [pc, #132]	@ (801cb78 <udp_connect+0x118>)
 801caf2:	f004 f9ef 	bl	8020ed4 <iprintf>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 801caf6:	68fb      	ldr	r3, [r7, #12]
 801caf8:	685b      	ldr	r3, [r3, #4]
 801cafa:	b2db      	uxtb	r3, r3
 801cafc:	4619      	mov	r1, r3
 801cafe:	68fb      	ldr	r3, [r7, #12]
 801cb00:	685b      	ldr	r3, [r3, #4]
 801cb02:	0a1b      	lsrs	r3, r3, #8
 801cb04:	b2db      	uxtb	r3, r3
 801cb06:	461a      	mov	r2, r3
 801cb08:	68fb      	ldr	r3, [r7, #12]
 801cb0a:	685b      	ldr	r3, [r3, #4]
 801cb0c:	0c1b      	lsrs	r3, r3, #16
 801cb0e:	b2db      	uxtb	r3, r3
 801cb10:	4618      	mov	r0, r3
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	685b      	ldr	r3, [r3, #4]
 801cb16:	0e1b      	lsrs	r3, r3, #24
 801cb18:	b2db      	uxtb	r3, r3
 801cb1a:	9300      	str	r3, [sp, #0]
 801cb1c:	4603      	mov	r3, r0
 801cb1e:	4817      	ldr	r0, [pc, #92]	@ (801cb7c <udp_connect+0x11c>)
 801cb20:	f004 f9d8 	bl	8020ed4 <iprintf>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 801cb24:	68fb      	ldr	r3, [r7, #12]
 801cb26:	8a9b      	ldrh	r3, [r3, #20]
 801cb28:	4619      	mov	r1, r3
 801cb2a:	4815      	ldr	r0, [pc, #84]	@ (801cb80 <udp_connect+0x120>)
 801cb2c:	f004 f9d2 	bl	8020ed4 <iprintf>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cb30:	4b14      	ldr	r3, [pc, #80]	@ (801cb84 <udp_connect+0x124>)
 801cb32:	681b      	ldr	r3, [r3, #0]
 801cb34:	617b      	str	r3, [r7, #20]
 801cb36:	e008      	b.n	801cb4a <udp_connect+0xea>
    if (pcb == ipcb) {
 801cb38:	68fa      	ldr	r2, [r7, #12]
 801cb3a:	697b      	ldr	r3, [r7, #20]
 801cb3c:	429a      	cmp	r2, r3
 801cb3e:	d101      	bne.n	801cb44 <udp_connect+0xe4>
      /* already on the list, just return */
      return ERR_OK;
 801cb40:	2300      	movs	r3, #0
 801cb42:	e00d      	b.n	801cb60 <udp_connect+0x100>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801cb44:	697b      	ldr	r3, [r7, #20]
 801cb46:	68db      	ldr	r3, [r3, #12]
 801cb48:	617b      	str	r3, [r7, #20]
 801cb4a:	697b      	ldr	r3, [r7, #20]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d1f3      	bne.n	801cb38 <udp_connect+0xd8>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801cb50:	4b0c      	ldr	r3, [pc, #48]	@ (801cb84 <udp_connect+0x124>)
 801cb52:	681a      	ldr	r2, [r3, #0]
 801cb54:	68fb      	ldr	r3, [r7, #12]
 801cb56:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801cb58:	4a0a      	ldr	r2, [pc, #40]	@ (801cb84 <udp_connect+0x124>)
 801cb5a:	68fb      	ldr	r3, [r7, #12]
 801cb5c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801cb5e:	2300      	movs	r3, #0
}
 801cb60:	4618      	mov	r0, r3
 801cb62:	3718      	adds	r7, #24
 801cb64:	46bd      	mov	sp, r7
 801cb66:	bd80      	pop	{r7, pc}
 801cb68:	08025620 	.word	0x08025620
 801cb6c:	08025c0c 	.word	0x08025c0c
 801cb70:	08025674 	.word	0x08025674
 801cb74:	08025c28 	.word	0x08025c28
 801cb78:	08025c44 	.word	0x08025c44
 801cb7c:	08025764 	.word	0x08025764
 801cb80:	08025bfc 	.word	0x08025bfc
 801cb84:	2002d4cc 	.word	0x2002d4cc

0801cb88 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b082      	sub	sp, #8
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	2b00      	cmp	r3, #0
 801cb94:	d107      	bne.n	801cba6 <udp_disconnect+0x1e>
 801cb96:	4b0d      	ldr	r3, [pc, #52]	@ (801cbcc <udp_disconnect+0x44>)
 801cb98:	f240 426a 	movw	r2, #1130	@ 0x46a
 801cb9c:	490c      	ldr	r1, [pc, #48]	@ (801cbd0 <udp_disconnect+0x48>)
 801cb9e:	480d      	ldr	r0, [pc, #52]	@ (801cbd4 <udp_disconnect+0x4c>)
 801cba0:	f004 f998 	bl	8020ed4 <iprintf>
 801cba4:	e00f      	b.n	801cbc6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	2200      	movs	r2, #0
 801cbaa:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	2200      	movs	r2, #0
 801cbb0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	2200      	movs	r2, #0
 801cbb6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	7c1b      	ldrb	r3, [r3, #16]
 801cbbc:	f023 0304 	bic.w	r3, r3, #4
 801cbc0:	b2da      	uxtb	r2, r3
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	741a      	strb	r2, [r3, #16]
}
 801cbc6:	3708      	adds	r7, #8
 801cbc8:	46bd      	mov	sp, r7
 801cbca:	bd80      	pop	{r7, pc}
 801cbcc:	08025620 	.word	0x08025620
 801cbd0:	08025c60 	.word	0x08025c60
 801cbd4:	08025674 	.word	0x08025674

0801cbd8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801cbd8:	b580      	push	{r7, lr}
 801cbda:	b084      	sub	sp, #16
 801cbdc:	af00      	add	r7, sp, #0
 801cbde:	60f8      	str	r0, [r7, #12]
 801cbe0:	60b9      	str	r1, [r7, #8]
 801cbe2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801cbe4:	68fb      	ldr	r3, [r7, #12]
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d107      	bne.n	801cbfa <udp_recv+0x22>
 801cbea:	4b08      	ldr	r3, [pc, #32]	@ (801cc0c <udp_recv+0x34>)
 801cbec:	f240 428a 	movw	r2, #1162	@ 0x48a
 801cbf0:	4907      	ldr	r1, [pc, #28]	@ (801cc10 <udp_recv+0x38>)
 801cbf2:	4808      	ldr	r0, [pc, #32]	@ (801cc14 <udp_recv+0x3c>)
 801cbf4:	f004 f96e 	bl	8020ed4 <iprintf>
 801cbf8:	e005      	b.n	801cc06 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801cbfa:	68fb      	ldr	r3, [r7, #12]
 801cbfc:	68ba      	ldr	r2, [r7, #8]
 801cbfe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	687a      	ldr	r2, [r7, #4]
 801cc04:	61da      	str	r2, [r3, #28]
}
 801cc06:	3710      	adds	r7, #16
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	bd80      	pop	{r7, pc}
 801cc0c:	08025620 	.word	0x08025620
 801cc10:	08025c7c 	.word	0x08025c7c
 801cc14:	08025674 	.word	0x08025674

0801cc18 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b084      	sub	sp, #16
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801cc20:	687b      	ldr	r3, [r7, #4]
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d107      	bne.n	801cc36 <udp_remove+0x1e>
 801cc26:	4b19      	ldr	r3, [pc, #100]	@ (801cc8c <udp_remove+0x74>)
 801cc28:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801cc2c:	4918      	ldr	r1, [pc, #96]	@ (801cc90 <udp_remove+0x78>)
 801cc2e:	4819      	ldr	r0, [pc, #100]	@ (801cc94 <udp_remove+0x7c>)
 801cc30:	f004 f950 	bl	8020ed4 <iprintf>
 801cc34:	e026      	b.n	801cc84 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801cc36:	4b18      	ldr	r3, [pc, #96]	@ (801cc98 <udp_remove+0x80>)
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	687a      	ldr	r2, [r7, #4]
 801cc3c:	429a      	cmp	r2, r3
 801cc3e:	d105      	bne.n	801cc4c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801cc40:	4b15      	ldr	r3, [pc, #84]	@ (801cc98 <udp_remove+0x80>)
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	68db      	ldr	r3, [r3, #12]
 801cc46:	4a14      	ldr	r2, [pc, #80]	@ (801cc98 <udp_remove+0x80>)
 801cc48:	6013      	str	r3, [r2, #0]
 801cc4a:	e017      	b.n	801cc7c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801cc4c:	4b12      	ldr	r3, [pc, #72]	@ (801cc98 <udp_remove+0x80>)
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	60fb      	str	r3, [r7, #12]
 801cc52:	e010      	b.n	801cc76 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801cc54:	68fb      	ldr	r3, [r7, #12]
 801cc56:	68db      	ldr	r3, [r3, #12]
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d009      	beq.n	801cc70 <udp_remove+0x58>
 801cc5c:	68fb      	ldr	r3, [r7, #12]
 801cc5e:	68db      	ldr	r3, [r3, #12]
 801cc60:	687a      	ldr	r2, [r7, #4]
 801cc62:	429a      	cmp	r2, r3
 801cc64:	d104      	bne.n	801cc70 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	68da      	ldr	r2, [r3, #12]
 801cc6a:	68fb      	ldr	r3, [r7, #12]
 801cc6c:	60da      	str	r2, [r3, #12]
        break;
 801cc6e:	e005      	b.n	801cc7c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	68db      	ldr	r3, [r3, #12]
 801cc74:	60fb      	str	r3, [r7, #12]
 801cc76:	68fb      	ldr	r3, [r7, #12]
 801cc78:	2b00      	cmp	r3, #0
 801cc7a:	d1eb      	bne.n	801cc54 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801cc7c:	6879      	ldr	r1, [r7, #4]
 801cc7e:	2000      	movs	r0, #0
 801cc80:	f7f7 f90a 	bl	8013e98 <memp_free>
}
 801cc84:	3710      	adds	r7, #16
 801cc86:	46bd      	mov	sp, r7
 801cc88:	bd80      	pop	{r7, pc}
 801cc8a:	bf00      	nop
 801cc8c:	08025620 	.word	0x08025620
 801cc90:	08025c94 	.word	0x08025c94
 801cc94:	08025674 	.word	0x08025674
 801cc98:	2002d4cc 	.word	0x2002d4cc

0801cc9c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	b082      	sub	sp, #8
 801cca0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801cca2:	2000      	movs	r0, #0
 801cca4:	f7f7 f87c 	bl	8013da0 <memp_malloc>
 801cca8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ccaa:	687b      	ldr	r3, [r7, #4]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d007      	beq.n	801ccc0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ccb0:	2220      	movs	r2, #32
 801ccb2:	2100      	movs	r1, #0
 801ccb4:	6878      	ldr	r0, [r7, #4]
 801ccb6:	f004 fa6d 	bl	8021194 <memset>
    pcb->ttl = UDP_TTL;
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	22ff      	movs	r2, #255	@ 0xff
 801ccbe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ccc0:	687b      	ldr	r3, [r7, #4]
}
 801ccc2:	4618      	mov	r0, r3
 801ccc4:	3708      	adds	r7, #8
 801ccc6:	46bd      	mov	sp, r7
 801ccc8:	bd80      	pop	{r7, pc}

0801ccca <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ccca:	b580      	push	{r7, lr}
 801cccc:	b084      	sub	sp, #16
 801ccce:	af00      	add	r7, sp, #0
 801ccd0:	4603      	mov	r3, r0
 801ccd2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801ccd4:	f7ff ffe2 	bl	801cc9c <udp_new>
 801ccd8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ccda:	68fb      	ldr	r3, [r7, #12]
}
 801ccdc:	4618      	mov	r0, r3
 801ccde:	3710      	adds	r7, #16
 801cce0:	46bd      	mov	sp, r7
 801cce2:	bd80      	pop	{r7, pc}

0801cce4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801cce4:	b480      	push	{r7}
 801cce6:	b085      	sub	sp, #20
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	6078      	str	r0, [r7, #4]
 801ccec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d01e      	beq.n	801cd32 <udp_netif_ip_addr_changed+0x4e>
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	681b      	ldr	r3, [r3, #0]
 801ccf8:	2b00      	cmp	r3, #0
 801ccfa:	d01a      	beq.n	801cd32 <udp_netif_ip_addr_changed+0x4e>
 801ccfc:	683b      	ldr	r3, [r7, #0]
 801ccfe:	2b00      	cmp	r3, #0
 801cd00:	d017      	beq.n	801cd32 <udp_netif_ip_addr_changed+0x4e>
 801cd02:	683b      	ldr	r3, [r7, #0]
 801cd04:	681b      	ldr	r3, [r3, #0]
 801cd06:	2b00      	cmp	r3, #0
 801cd08:	d013      	beq.n	801cd32 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cd0a:	4b0d      	ldr	r3, [pc, #52]	@ (801cd40 <udp_netif_ip_addr_changed+0x5c>)
 801cd0c:	681b      	ldr	r3, [r3, #0]
 801cd0e:	60fb      	str	r3, [r7, #12]
 801cd10:	e00c      	b.n	801cd2c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801cd12:	68fb      	ldr	r3, [r7, #12]
 801cd14:	681a      	ldr	r2, [r3, #0]
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	681b      	ldr	r3, [r3, #0]
 801cd1a:	429a      	cmp	r2, r3
 801cd1c:	d103      	bne.n	801cd26 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801cd1e:	683b      	ldr	r3, [r7, #0]
 801cd20:	681a      	ldr	r2, [r3, #0]
 801cd22:	68fb      	ldr	r3, [r7, #12]
 801cd24:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	68db      	ldr	r3, [r3, #12]
 801cd2a:	60fb      	str	r3, [r7, #12]
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d1ef      	bne.n	801cd12 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801cd32:	bf00      	nop
 801cd34:	3714      	adds	r7, #20
 801cd36:	46bd      	mov	sp, r7
 801cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd3c:	4770      	bx	lr
 801cd3e:	bf00      	nop
 801cd40:	2002d4cc 	.word	0x2002d4cc

0801cd44 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 801cd44:	b590      	push	{r4, r7, lr}
 801cd46:	b083      	sub	sp, #12
 801cd48:	af00      	add	r7, sp, #0
 801cd4a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 801cd4c:	481b      	ldr	r0, [pc, #108]	@ (801cdbc <udp_debug_print+0x78>)
 801cd4e:	f004 f931 	bl	8020fb4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cd52:	481b      	ldr	r0, [pc, #108]	@ (801cdc0 <udp_debug_print+0x7c>)
 801cd54:	f004 f92e 	bl	8020fb4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 801cd58:	687b      	ldr	r3, [r7, #4]
 801cd5a:	881b      	ldrh	r3, [r3, #0]
 801cd5c:	b29b      	uxth	r3, r3
 801cd5e:	4618      	mov	r0, r3
 801cd60:	f7f6 fa52 	bl	8013208 <lwip_htons>
 801cd64:	4603      	mov	r3, r0
 801cd66:	461c      	mov	r4, r3
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	885b      	ldrh	r3, [r3, #2]
 801cd6c:	b29b      	uxth	r3, r3
 801cd6e:	4618      	mov	r0, r3
 801cd70:	f7f6 fa4a 	bl	8013208 <lwip_htons>
 801cd74:	4603      	mov	r3, r0
 801cd76:	461a      	mov	r2, r3
 801cd78:	4621      	mov	r1, r4
 801cd7a:	4812      	ldr	r0, [pc, #72]	@ (801cdc4 <udp_debug_print+0x80>)
 801cd7c:	f004 f8aa 	bl	8020ed4 <iprintf>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cd80:	480f      	ldr	r0, [pc, #60]	@ (801cdc0 <udp_debug_print+0x7c>)
 801cd82:	f004 f917 	bl	8020fb4 <puts>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801cd86:	687b      	ldr	r3, [r7, #4]
 801cd88:	889b      	ldrh	r3, [r3, #4]
 801cd8a:	b29b      	uxth	r3, r3
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	f7f6 fa3b 	bl	8013208 <lwip_htons>
 801cd92:	4603      	mov	r3, r0
 801cd94:	461c      	mov	r4, r3
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	88db      	ldrh	r3, [r3, #6]
 801cd9a:	b29b      	uxth	r3, r3
 801cd9c:	4618      	mov	r0, r3
 801cd9e:	f7f6 fa33 	bl	8013208 <lwip_htons>
 801cda2:	4603      	mov	r3, r0
 801cda4:	461a      	mov	r2, r3
 801cda6:	4621      	mov	r1, r4
 801cda8:	4807      	ldr	r0, [pc, #28]	@ (801cdc8 <udp_debug_print+0x84>)
 801cdaa:	f004 f893 	bl	8020ed4 <iprintf>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801cdae:	4804      	ldr	r0, [pc, #16]	@ (801cdc0 <udp_debug_print+0x7c>)
 801cdb0:	f004 f900 	bl	8020fb4 <puts>
}
 801cdb4:	bf00      	nop
 801cdb6:	370c      	adds	r7, #12
 801cdb8:	46bd      	mov	sp, r7
 801cdba:	bd90      	pop	{r4, r7, pc}
 801cdbc:	08025cac 	.word	0x08025cac
 801cdc0:	08025cb8 	.word	0x08025cb8
 801cdc4:	08025cdc 	.word	0x08025cdc
 801cdc8:	08025d14 	.word	0x08025d14

0801cdcc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b082      	sub	sp, #8
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801cdd4:	492b      	ldr	r1, [pc, #172]	@ (801ce84 <etharp_free_entry+0xb8>)
 801cdd6:	687a      	ldr	r2, [r7, #4]
 801cdd8:	4613      	mov	r3, r2
 801cdda:	005b      	lsls	r3, r3, #1
 801cddc:	4413      	add	r3, r2
 801cdde:	00db      	lsls	r3, r3, #3
 801cde0:	440b      	add	r3, r1
 801cde2:	681b      	ldr	r3, [r3, #0]
 801cde4:	2b00      	cmp	r3, #0
 801cde6:	d013      	beq.n	801ce10 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801cde8:	4926      	ldr	r1, [pc, #152]	@ (801ce84 <etharp_free_entry+0xb8>)
 801cdea:	687a      	ldr	r2, [r7, #4]
 801cdec:	4613      	mov	r3, r2
 801cdee:	005b      	lsls	r3, r3, #1
 801cdf0:	4413      	add	r3, r2
 801cdf2:	00db      	lsls	r3, r3, #3
 801cdf4:	440b      	add	r3, r1
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	4618      	mov	r0, r3
 801cdfa:	f7f8 f833 	bl	8014e64 <pbuf_free>
    arp_table[i].q = NULL;
 801cdfe:	4921      	ldr	r1, [pc, #132]	@ (801ce84 <etharp_free_entry+0xb8>)
 801ce00:	687a      	ldr	r2, [r7, #4]
 801ce02:	4613      	mov	r3, r2
 801ce04:	005b      	lsls	r3, r3, #1
 801ce06:	4413      	add	r3, r2
 801ce08:	00db      	lsls	r3, r3, #3
 801ce0a:	440b      	add	r3, r1
 801ce0c:	2200      	movs	r2, #0
 801ce0e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ce10:	491c      	ldr	r1, [pc, #112]	@ (801ce84 <etharp_free_entry+0xb8>)
 801ce12:	687a      	ldr	r2, [r7, #4]
 801ce14:	4613      	mov	r3, r2
 801ce16:	005b      	lsls	r3, r3, #1
 801ce18:	4413      	add	r3, r2
 801ce1a:	00db      	lsls	r3, r3, #3
 801ce1c:	440b      	add	r3, r1
 801ce1e:	3314      	adds	r3, #20
 801ce20:	2200      	movs	r2, #0
 801ce22:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 801ce24:	4917      	ldr	r1, [pc, #92]	@ (801ce84 <etharp_free_entry+0xb8>)
 801ce26:	687a      	ldr	r2, [r7, #4]
 801ce28:	4613      	mov	r3, r2
 801ce2a:	005b      	lsls	r3, r3, #1
 801ce2c:	4413      	add	r3, r2
 801ce2e:	00db      	lsls	r3, r3, #3
 801ce30:	440b      	add	r3, r1
 801ce32:	3312      	adds	r3, #18
 801ce34:	2200      	movs	r2, #0
 801ce36:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 801ce38:	4912      	ldr	r1, [pc, #72]	@ (801ce84 <etharp_free_entry+0xb8>)
 801ce3a:	687a      	ldr	r2, [r7, #4]
 801ce3c:	4613      	mov	r3, r2
 801ce3e:	005b      	lsls	r3, r3, #1
 801ce40:	4413      	add	r3, r2
 801ce42:	00db      	lsls	r3, r3, #3
 801ce44:	440b      	add	r3, r1
 801ce46:	3308      	adds	r3, #8
 801ce48:	2200      	movs	r2, #0
 801ce4a:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 801ce4c:	490d      	ldr	r1, [pc, #52]	@ (801ce84 <etharp_free_entry+0xb8>)
 801ce4e:	687a      	ldr	r2, [r7, #4]
 801ce50:	4613      	mov	r3, r2
 801ce52:	005b      	lsls	r3, r3, #1
 801ce54:	4413      	add	r3, r2
 801ce56:	00db      	lsls	r3, r3, #3
 801ce58:	440b      	add	r3, r1
 801ce5a:	3304      	adds	r3, #4
 801ce5c:	2200      	movs	r2, #0
 801ce5e:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 801ce60:	4908      	ldr	r1, [pc, #32]	@ (801ce84 <etharp_free_entry+0xb8>)
 801ce62:	687a      	ldr	r2, [r7, #4]
 801ce64:	4613      	mov	r3, r2
 801ce66:	005b      	lsls	r3, r3, #1
 801ce68:	4413      	add	r3, r2
 801ce6a:	00db      	lsls	r3, r3, #3
 801ce6c:	440b      	add	r3, r1
 801ce6e:	3308      	adds	r3, #8
 801ce70:	4a05      	ldr	r2, [pc, #20]	@ (801ce88 <etharp_free_entry+0xbc>)
 801ce72:	3304      	adds	r3, #4
 801ce74:	6810      	ldr	r0, [r2, #0]
 801ce76:	6018      	str	r0, [r3, #0]
 801ce78:	8892      	ldrh	r2, [r2, #4]
 801ce7a:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 801ce7c:	bf00      	nop
 801ce7e:	3708      	adds	r7, #8
 801ce80:	46bd      	mov	sp, r7
 801ce82:	bd80      	pop	{r7, pc}
 801ce84:	2002d4d0 	.word	0x2002d4d0
 801ce88:	08026dc8 	.word	0x08026dc8

0801ce8c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ce8c:	b580      	push	{r7, lr}
 801ce8e:	b082      	sub	sp, #8
 801ce90:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ce92:	2300      	movs	r3, #0
 801ce94:	607b      	str	r3, [r7, #4]
 801ce96:	e096      	b.n	801cfc6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801ce98:	494f      	ldr	r1, [pc, #316]	@ (801cfd8 <etharp_tmr+0x14c>)
 801ce9a:	687a      	ldr	r2, [r7, #4]
 801ce9c:	4613      	mov	r3, r2
 801ce9e:	005b      	lsls	r3, r3, #1
 801cea0:	4413      	add	r3, r2
 801cea2:	00db      	lsls	r3, r3, #3
 801cea4:	440b      	add	r3, r1
 801cea6:	3314      	adds	r3, #20
 801cea8:	781b      	ldrb	r3, [r3, #0]
 801ceaa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801ceac:	78fb      	ldrb	r3, [r7, #3]
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	f000 8086 	beq.w	801cfc0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801ceb4:	4948      	ldr	r1, [pc, #288]	@ (801cfd8 <etharp_tmr+0x14c>)
 801ceb6:	687a      	ldr	r2, [r7, #4]
 801ceb8:	4613      	mov	r3, r2
 801ceba:	005b      	lsls	r3, r3, #1
 801cebc:	4413      	add	r3, r2
 801cebe:	00db      	lsls	r3, r3, #3
 801cec0:	440b      	add	r3, r1
 801cec2:	3312      	adds	r3, #18
 801cec4:	881b      	ldrh	r3, [r3, #0]
 801cec6:	3301      	adds	r3, #1
 801cec8:	b298      	uxth	r0, r3
 801ceca:	4943      	ldr	r1, [pc, #268]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cecc:	687a      	ldr	r2, [r7, #4]
 801cece:	4613      	mov	r3, r2
 801ced0:	005b      	lsls	r3, r3, #1
 801ced2:	4413      	add	r3, r2
 801ced4:	00db      	lsls	r3, r3, #3
 801ced6:	440b      	add	r3, r1
 801ced8:	3312      	adds	r3, #18
 801ceda:	4602      	mov	r2, r0
 801cedc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cede:	493e      	ldr	r1, [pc, #248]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cee0:	687a      	ldr	r2, [r7, #4]
 801cee2:	4613      	mov	r3, r2
 801cee4:	005b      	lsls	r3, r3, #1
 801cee6:	4413      	add	r3, r2
 801cee8:	00db      	lsls	r3, r3, #3
 801ceea:	440b      	add	r3, r1
 801ceec:	3312      	adds	r3, #18
 801ceee:	881b      	ldrh	r3, [r3, #0]
 801cef0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801cef4:	d215      	bcs.n	801cf22 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cef6:	4938      	ldr	r1, [pc, #224]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cef8:	687a      	ldr	r2, [r7, #4]
 801cefa:	4613      	mov	r3, r2
 801cefc:	005b      	lsls	r3, r3, #1
 801cefe:	4413      	add	r3, r2
 801cf00:	00db      	lsls	r3, r3, #3
 801cf02:	440b      	add	r3, r1
 801cf04:	3314      	adds	r3, #20
 801cf06:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801cf08:	2b01      	cmp	r3, #1
 801cf0a:	d10e      	bne.n	801cf2a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801cf0c:	4932      	ldr	r1, [pc, #200]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cf0e:	687a      	ldr	r2, [r7, #4]
 801cf10:	4613      	mov	r3, r2
 801cf12:	005b      	lsls	r3, r3, #1
 801cf14:	4413      	add	r3, r2
 801cf16:	00db      	lsls	r3, r3, #3
 801cf18:	440b      	add	r3, r1
 801cf1a:	3312      	adds	r3, #18
 801cf1c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801cf1e:	2b04      	cmp	r3, #4
 801cf20:	d903      	bls.n	801cf2a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801cf22:	6878      	ldr	r0, [r7, #4]
 801cf24:	f7ff ff52 	bl	801cdcc <etharp_free_entry>
 801cf28:	e04a      	b.n	801cfc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801cf2a:	492b      	ldr	r1, [pc, #172]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cf2c:	687a      	ldr	r2, [r7, #4]
 801cf2e:	4613      	mov	r3, r2
 801cf30:	005b      	lsls	r3, r3, #1
 801cf32:	4413      	add	r3, r2
 801cf34:	00db      	lsls	r3, r3, #3
 801cf36:	440b      	add	r3, r1
 801cf38:	3314      	adds	r3, #20
 801cf3a:	781b      	ldrb	r3, [r3, #0]
 801cf3c:	2b03      	cmp	r3, #3
 801cf3e:	d10a      	bne.n	801cf56 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801cf40:	4925      	ldr	r1, [pc, #148]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cf42:	687a      	ldr	r2, [r7, #4]
 801cf44:	4613      	mov	r3, r2
 801cf46:	005b      	lsls	r3, r3, #1
 801cf48:	4413      	add	r3, r2
 801cf4a:	00db      	lsls	r3, r3, #3
 801cf4c:	440b      	add	r3, r1
 801cf4e:	3314      	adds	r3, #20
 801cf50:	2204      	movs	r2, #4
 801cf52:	701a      	strb	r2, [r3, #0]
 801cf54:	e034      	b.n	801cfc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801cf56:	4920      	ldr	r1, [pc, #128]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cf58:	687a      	ldr	r2, [r7, #4]
 801cf5a:	4613      	mov	r3, r2
 801cf5c:	005b      	lsls	r3, r3, #1
 801cf5e:	4413      	add	r3, r2
 801cf60:	00db      	lsls	r3, r3, #3
 801cf62:	440b      	add	r3, r1
 801cf64:	3314      	adds	r3, #20
 801cf66:	781b      	ldrb	r3, [r3, #0]
 801cf68:	2b04      	cmp	r3, #4
 801cf6a:	d10a      	bne.n	801cf82 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801cf6c:	491a      	ldr	r1, [pc, #104]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cf6e:	687a      	ldr	r2, [r7, #4]
 801cf70:	4613      	mov	r3, r2
 801cf72:	005b      	lsls	r3, r3, #1
 801cf74:	4413      	add	r3, r2
 801cf76:	00db      	lsls	r3, r3, #3
 801cf78:	440b      	add	r3, r1
 801cf7a:	3314      	adds	r3, #20
 801cf7c:	2202      	movs	r2, #2
 801cf7e:	701a      	strb	r2, [r3, #0]
 801cf80:	e01e      	b.n	801cfc0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801cf82:	4915      	ldr	r1, [pc, #84]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cf84:	687a      	ldr	r2, [r7, #4]
 801cf86:	4613      	mov	r3, r2
 801cf88:	005b      	lsls	r3, r3, #1
 801cf8a:	4413      	add	r3, r2
 801cf8c:	00db      	lsls	r3, r3, #3
 801cf8e:	440b      	add	r3, r1
 801cf90:	3314      	adds	r3, #20
 801cf92:	781b      	ldrb	r3, [r3, #0]
 801cf94:	2b01      	cmp	r3, #1
 801cf96:	d113      	bne.n	801cfc0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801cf98:	490f      	ldr	r1, [pc, #60]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cf9a:	687a      	ldr	r2, [r7, #4]
 801cf9c:	4613      	mov	r3, r2
 801cf9e:	005b      	lsls	r3, r3, #1
 801cfa0:	4413      	add	r3, r2
 801cfa2:	00db      	lsls	r3, r3, #3
 801cfa4:	440b      	add	r3, r1
 801cfa6:	3308      	adds	r3, #8
 801cfa8:	6818      	ldr	r0, [r3, #0]
 801cfaa:	687a      	ldr	r2, [r7, #4]
 801cfac:	4613      	mov	r3, r2
 801cfae:	005b      	lsls	r3, r3, #1
 801cfb0:	4413      	add	r3, r2
 801cfb2:	00db      	lsls	r3, r3, #3
 801cfb4:	4a08      	ldr	r2, [pc, #32]	@ (801cfd8 <etharp_tmr+0x14c>)
 801cfb6:	4413      	add	r3, r2
 801cfb8:	3304      	adds	r3, #4
 801cfba:	4619      	mov	r1, r3
 801cfbc:	f000 feae 	bl	801dd1c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	3301      	adds	r3, #1
 801cfc4:	607b      	str	r3, [r7, #4]
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	2b09      	cmp	r3, #9
 801cfca:	f77f af65 	ble.w	801ce98 <etharp_tmr+0xc>
      }
    }
  }
}
 801cfce:	bf00      	nop
 801cfd0:	bf00      	nop
 801cfd2:	3708      	adds	r7, #8
 801cfd4:	46bd      	mov	sp, r7
 801cfd6:	bd80      	pop	{r7, pc}
 801cfd8:	2002d4d0 	.word	0x2002d4d0

0801cfdc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801cfdc:	b580      	push	{r7, lr}
 801cfde:	b08a      	sub	sp, #40	@ 0x28
 801cfe0:	af00      	add	r7, sp, #0
 801cfe2:	60f8      	str	r0, [r7, #12]
 801cfe4:	460b      	mov	r3, r1
 801cfe6:	607a      	str	r2, [r7, #4]
 801cfe8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801cfea:	230a      	movs	r3, #10
 801cfec:	843b      	strh	r3, [r7, #32]
 801cfee:	230a      	movs	r3, #10
 801cff0:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t empty = ARP_TABLE_SIZE;
 801cff2:	230a      	movs	r3, #10
 801cff4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t i = 0;
 801cff6:	2300      	movs	r3, #0
 801cff8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801cffa:	230a      	movs	r3, #10
 801cffc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801cffe:	2300      	movs	r3, #0
 801d000:	83bb      	strh	r3, [r7, #28]
 801d002:	2300      	movs	r3, #0
 801d004:	837b      	strh	r3, [r7, #26]
 801d006:	2300      	movs	r3, #0
 801d008:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d00a:	2300      	movs	r3, #0
 801d00c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d00e:	e0ae      	b.n	801d16e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d010:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d014:	49a6      	ldr	r1, [pc, #664]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d016:	4613      	mov	r3, r2
 801d018:	005b      	lsls	r3, r3, #1
 801d01a:	4413      	add	r3, r2
 801d01c:	00db      	lsls	r3, r3, #3
 801d01e:	440b      	add	r3, r1
 801d020:	3314      	adds	r3, #20
 801d022:	781b      	ldrb	r3, [r3, #0]
 801d024:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d026:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d02a:	2b0a      	cmp	r3, #10
 801d02c:	d105      	bne.n	801d03a <etharp_find_entry+0x5e>
 801d02e:	7dfb      	ldrb	r3, [r7, #23]
 801d030:	2b00      	cmp	r3, #0
 801d032:	d102      	bne.n	801d03a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d034:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d036:	84bb      	strh	r3, [r7, #36]	@ 0x24
 801d038:	e095      	b.n	801d166 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d03a:	7dfb      	ldrb	r3, [r7, #23]
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	f000 8092 	beq.w	801d166 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d042:	7dfb      	ldrb	r3, [r7, #23]
 801d044:	2b01      	cmp	r3, #1
 801d046:	d009      	beq.n	801d05c <etharp_find_entry+0x80>
 801d048:	7dfb      	ldrb	r3, [r7, #23]
 801d04a:	2b01      	cmp	r3, #1
 801d04c:	d806      	bhi.n	801d05c <etharp_find_entry+0x80>
 801d04e:	4b99      	ldr	r3, [pc, #612]	@ (801d2b4 <etharp_find_entry+0x2d8>)
 801d050:	f240 1223 	movw	r2, #291	@ 0x123
 801d054:	4998      	ldr	r1, [pc, #608]	@ (801d2b8 <etharp_find_entry+0x2dc>)
 801d056:	4899      	ldr	r0, [pc, #612]	@ (801d2bc <etharp_find_entry+0x2e0>)
 801d058:	f003 ff3c 	bl	8020ed4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d05c:	68fb      	ldr	r3, [r7, #12]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d020      	beq.n	801d0a4 <etharp_find_entry+0xc8>
 801d062:	68fb      	ldr	r3, [r7, #12]
 801d064:	6819      	ldr	r1, [r3, #0]
 801d066:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d06a:	4891      	ldr	r0, [pc, #580]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d06c:	4613      	mov	r3, r2
 801d06e:	005b      	lsls	r3, r3, #1
 801d070:	4413      	add	r3, r2
 801d072:	00db      	lsls	r3, r3, #3
 801d074:	4403      	add	r3, r0
 801d076:	3304      	adds	r3, #4
 801d078:	681b      	ldr	r3, [r3, #0]
 801d07a:	4299      	cmp	r1, r3
 801d07c:	d112      	bne.n	801d0a4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	2b00      	cmp	r3, #0
 801d082:	d00c      	beq.n	801d09e <etharp_find_entry+0xc2>
 801d084:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d088:	4989      	ldr	r1, [pc, #548]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d08a:	4613      	mov	r3, r2
 801d08c:	005b      	lsls	r3, r3, #1
 801d08e:	4413      	add	r3, r2
 801d090:	00db      	lsls	r3, r3, #3
 801d092:	440b      	add	r3, r1
 801d094:	3308      	adds	r3, #8
 801d096:	681b      	ldr	r3, [r3, #0]
 801d098:	687a      	ldr	r2, [r7, #4]
 801d09a:	429a      	cmp	r2, r3
 801d09c:	d102      	bne.n	801d0a4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d09e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d0a2:	e100      	b.n	801d2a6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d0a4:	7dfb      	ldrb	r3, [r7, #23]
 801d0a6:	2b01      	cmp	r3, #1
 801d0a8:	d140      	bne.n	801d12c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d0aa:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d0ae:	4980      	ldr	r1, [pc, #512]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d0b0:	4613      	mov	r3, r2
 801d0b2:	005b      	lsls	r3, r3, #1
 801d0b4:	4413      	add	r3, r2
 801d0b6:	00db      	lsls	r3, r3, #3
 801d0b8:	440b      	add	r3, r1
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	2b00      	cmp	r3, #0
 801d0be:	d01a      	beq.n	801d0f6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d0c0:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d0c4:	497a      	ldr	r1, [pc, #488]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d0c6:	4613      	mov	r3, r2
 801d0c8:	005b      	lsls	r3, r3, #1
 801d0ca:	4413      	add	r3, r2
 801d0cc:	00db      	lsls	r3, r3, #3
 801d0ce:	440b      	add	r3, r1
 801d0d0:	3312      	adds	r3, #18
 801d0d2:	881b      	ldrh	r3, [r3, #0]
 801d0d4:	8bba      	ldrh	r2, [r7, #28]
 801d0d6:	429a      	cmp	r2, r3
 801d0d8:	d845      	bhi.n	801d166 <etharp_find_entry+0x18a>
            old_queue = i;
 801d0da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d0dc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d0de:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d0e2:	4973      	ldr	r1, [pc, #460]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d0e4:	4613      	mov	r3, r2
 801d0e6:	005b      	lsls	r3, r3, #1
 801d0e8:	4413      	add	r3, r2
 801d0ea:	00db      	lsls	r3, r3, #3
 801d0ec:	440b      	add	r3, r1
 801d0ee:	3312      	adds	r3, #18
 801d0f0:	881b      	ldrh	r3, [r3, #0]
 801d0f2:	83bb      	strh	r3, [r7, #28]
 801d0f4:	e037      	b.n	801d166 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d0f6:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d0fa:	496d      	ldr	r1, [pc, #436]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d0fc:	4613      	mov	r3, r2
 801d0fe:	005b      	lsls	r3, r3, #1
 801d100:	4413      	add	r3, r2
 801d102:	00db      	lsls	r3, r3, #3
 801d104:	440b      	add	r3, r1
 801d106:	3312      	adds	r3, #18
 801d108:	881b      	ldrh	r3, [r3, #0]
 801d10a:	8b7a      	ldrh	r2, [r7, #26]
 801d10c:	429a      	cmp	r2, r3
 801d10e:	d82a      	bhi.n	801d166 <etharp_find_entry+0x18a>
            old_pending = i;
 801d110:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d112:	843b      	strh	r3, [r7, #32]
            age_pending = arp_table[i].ctime;
 801d114:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d118:	4965      	ldr	r1, [pc, #404]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d11a:	4613      	mov	r3, r2
 801d11c:	005b      	lsls	r3, r3, #1
 801d11e:	4413      	add	r3, r2
 801d120:	00db      	lsls	r3, r3, #3
 801d122:	440b      	add	r3, r1
 801d124:	3312      	adds	r3, #18
 801d126:	881b      	ldrh	r3, [r3, #0]
 801d128:	837b      	strh	r3, [r7, #26]
 801d12a:	e01c      	b.n	801d166 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801d12c:	7dfb      	ldrb	r3, [r7, #23]
 801d12e:	2b01      	cmp	r3, #1
 801d130:	d919      	bls.n	801d166 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d132:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d136:	495e      	ldr	r1, [pc, #376]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d138:	4613      	mov	r3, r2
 801d13a:	005b      	lsls	r3, r3, #1
 801d13c:	4413      	add	r3, r2
 801d13e:	00db      	lsls	r3, r3, #3
 801d140:	440b      	add	r3, r1
 801d142:	3312      	adds	r3, #18
 801d144:	881b      	ldrh	r3, [r3, #0]
 801d146:	8b3a      	ldrh	r2, [r7, #24]
 801d148:	429a      	cmp	r2, r3
 801d14a:	d80c      	bhi.n	801d166 <etharp_find_entry+0x18a>
            old_stable = i;
 801d14c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d14e:	847b      	strh	r3, [r7, #34]	@ 0x22
            age_stable = arp_table[i].ctime;
 801d150:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d154:	4956      	ldr	r1, [pc, #344]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d156:	4613      	mov	r3, r2
 801d158:	005b      	lsls	r3, r3, #1
 801d15a:	4413      	add	r3, r2
 801d15c:	00db      	lsls	r3, r3, #3
 801d15e:	440b      	add	r3, r1
 801d160:	3312      	adds	r3, #18
 801d162:	881b      	ldrh	r3, [r3, #0]
 801d164:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d166:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801d168:	3301      	adds	r3, #1
 801d16a:	b29b      	uxth	r3, r3
 801d16c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d16e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d172:	2b09      	cmp	r3, #9
 801d174:	f77f af4c 	ble.w	801d010 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d178:	7afb      	ldrb	r3, [r7, #11]
 801d17a:	f003 0302 	and.w	r3, r3, #2
 801d17e:	2b00      	cmp	r3, #0
 801d180:	d108      	bne.n	801d194 <etharp_find_entry+0x1b8>
 801d182:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d186:	2b0a      	cmp	r3, #10
 801d188:	d107      	bne.n	801d19a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801d18a:	7afb      	ldrb	r3, [r7, #11]
 801d18c:	f003 0301 	and.w	r3, r3, #1
 801d190:	2b00      	cmp	r3, #0
 801d192:	d102      	bne.n	801d19a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801d194:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d198:	e085      	b.n	801d2a6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801d19a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801d19e:	2b09      	cmp	r3, #9
 801d1a0:	dc02      	bgt.n	801d1a8 <etharp_find_entry+0x1cc>
    i = empty;
 801d1a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801d1a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d1a6:	e039      	b.n	801d21c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801d1a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801d1ac:	2b09      	cmp	r3, #9
 801d1ae:	dc14      	bgt.n	801d1da <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801d1b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801d1b2:	84fb      	strh	r3, [r7, #38]	@ 0x26
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d1b4:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d1b8:	493d      	ldr	r1, [pc, #244]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d1ba:	4613      	mov	r3, r2
 801d1bc:	005b      	lsls	r3, r3, #1
 801d1be:	4413      	add	r3, r2
 801d1c0:	00db      	lsls	r3, r3, #3
 801d1c2:	440b      	add	r3, r1
 801d1c4:	681b      	ldr	r3, [r3, #0]
 801d1c6:	2b00      	cmp	r3, #0
 801d1c8:	d018      	beq.n	801d1fc <etharp_find_entry+0x220>
 801d1ca:	4b3a      	ldr	r3, [pc, #232]	@ (801d2b4 <etharp_find_entry+0x2d8>)
 801d1cc:	f240 126d 	movw	r2, #365	@ 0x16d
 801d1d0:	493b      	ldr	r1, [pc, #236]	@ (801d2c0 <etharp_find_entry+0x2e4>)
 801d1d2:	483a      	ldr	r0, [pc, #232]	@ (801d2bc <etharp_find_entry+0x2e0>)
 801d1d4:	f003 fe7e 	bl	8020ed4 <iprintf>
 801d1d8:	e010      	b.n	801d1fc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d1da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d1de:	2b09      	cmp	r3, #9
 801d1e0:	dc02      	bgt.n	801d1e8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d1e2:	8c3b      	ldrh	r3, [r7, #32]
 801d1e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d1e6:	e009      	b.n	801d1fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d1e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d1ec:	2b09      	cmp	r3, #9
 801d1ee:	dc02      	bgt.n	801d1f6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d1f0:	8bfb      	ldrh	r3, [r7, #30]
 801d1f2:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801d1f4:	e002      	b.n	801d1fc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d1f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801d1fa:	e054      	b.n	801d2a6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d1fc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d200:	2b09      	cmp	r3, #9
 801d202:	dd06      	ble.n	801d212 <etharp_find_entry+0x236>
 801d204:	4b2b      	ldr	r3, [pc, #172]	@ (801d2b4 <etharp_find_entry+0x2d8>)
 801d206:	f240 127f 	movw	r2, #383	@ 0x17f
 801d20a:	492e      	ldr	r1, [pc, #184]	@ (801d2c4 <etharp_find_entry+0x2e8>)
 801d20c:	482b      	ldr	r0, [pc, #172]	@ (801d2bc <etharp_find_entry+0x2e0>)
 801d20e:	f003 fe61 	bl	8020ed4 <iprintf>
    etharp_free_entry(i);
 801d212:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d216:	4618      	mov	r0, r3
 801d218:	f7ff fdd8 	bl	801cdcc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d21c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801d220:	2b09      	cmp	r3, #9
 801d222:	dd06      	ble.n	801d232 <etharp_find_entry+0x256>
 801d224:	4b23      	ldr	r3, [pc, #140]	@ (801d2b4 <etharp_find_entry+0x2d8>)
 801d226:	f240 1283 	movw	r2, #387	@ 0x183
 801d22a:	4926      	ldr	r1, [pc, #152]	@ (801d2c4 <etharp_find_entry+0x2e8>)
 801d22c:	4823      	ldr	r0, [pc, #140]	@ (801d2bc <etharp_find_entry+0x2e0>)
 801d22e:	f003 fe51 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d232:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d236:	491e      	ldr	r1, [pc, #120]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d238:	4613      	mov	r3, r2
 801d23a:	005b      	lsls	r3, r3, #1
 801d23c:	4413      	add	r3, r2
 801d23e:	00db      	lsls	r3, r3, #3
 801d240:	440b      	add	r3, r1
 801d242:	3314      	adds	r3, #20
 801d244:	781b      	ldrb	r3, [r3, #0]
 801d246:	2b00      	cmp	r3, #0
 801d248:	d006      	beq.n	801d258 <etharp_find_entry+0x27c>
 801d24a:	4b1a      	ldr	r3, [pc, #104]	@ (801d2b4 <etharp_find_entry+0x2d8>)
 801d24c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801d250:	491d      	ldr	r1, [pc, #116]	@ (801d2c8 <etharp_find_entry+0x2ec>)
 801d252:	481a      	ldr	r0, [pc, #104]	@ (801d2bc <etharp_find_entry+0x2e0>)
 801d254:	f003 fe3e 	bl	8020ed4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d00b      	beq.n	801d276 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d25e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	6819      	ldr	r1, [r3, #0]
 801d266:	4812      	ldr	r0, [pc, #72]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d268:	4613      	mov	r3, r2
 801d26a:	005b      	lsls	r3, r3, #1
 801d26c:	4413      	add	r3, r2
 801d26e:	00db      	lsls	r3, r3, #3
 801d270:	4403      	add	r3, r0
 801d272:	3304      	adds	r3, #4
 801d274:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d276:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d27a:	490d      	ldr	r1, [pc, #52]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d27c:	4613      	mov	r3, r2
 801d27e:	005b      	lsls	r3, r3, #1
 801d280:	4413      	add	r3, r2
 801d282:	00db      	lsls	r3, r3, #3
 801d284:	440b      	add	r3, r1
 801d286:	3312      	adds	r3, #18
 801d288:	2200      	movs	r2, #0
 801d28a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d28c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 801d290:	4907      	ldr	r1, [pc, #28]	@ (801d2b0 <etharp_find_entry+0x2d4>)
 801d292:	4613      	mov	r3, r2
 801d294:	005b      	lsls	r3, r3, #1
 801d296:	4413      	add	r3, r2
 801d298:	00db      	lsls	r3, r3, #3
 801d29a:	440b      	add	r3, r1
 801d29c:	3308      	adds	r3, #8
 801d29e:	687a      	ldr	r2, [r7, #4]
 801d2a0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d2a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
}
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	3728      	adds	r7, #40	@ 0x28
 801d2aa:	46bd      	mov	sp, r7
 801d2ac:	bd80      	pop	{r7, pc}
 801d2ae:	bf00      	nop
 801d2b0:	2002d4d0 	.word	0x2002d4d0
 801d2b4:	08025d48 	.word	0x08025d48
 801d2b8:	08025d80 	.word	0x08025d80
 801d2bc:	08025dc0 	.word	0x08025dc0
 801d2c0:	08025de8 	.word	0x08025de8
 801d2c4:	08025e00 	.word	0x08025e00
 801d2c8:	08025e14 	.word	0x08025e14

0801d2cc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d2cc:	b580      	push	{r7, lr}
 801d2ce:	b088      	sub	sp, #32
 801d2d0:	af02      	add	r7, sp, #8
 801d2d2:	60f8      	str	r0, [r7, #12]
 801d2d4:	60b9      	str	r1, [r7, #8]
 801d2d6:	607a      	str	r2, [r7, #4]
 801d2d8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d2da:	68fb      	ldr	r3, [r7, #12]
 801d2dc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801d2e0:	2b06      	cmp	r3, #6
 801d2e2:	d006      	beq.n	801d2f2 <etharp_update_arp_entry+0x26>
 801d2e4:	4b48      	ldr	r3, [pc, #288]	@ (801d408 <etharp_update_arp_entry+0x13c>)
 801d2e6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801d2ea:	4948      	ldr	r1, [pc, #288]	@ (801d40c <etharp_update_arp_entry+0x140>)
 801d2ec:	4848      	ldr	r0, [pc, #288]	@ (801d410 <etharp_update_arp_entry+0x144>)
 801d2ee:	f003 fdf1 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801d2f2:	68bb      	ldr	r3, [r7, #8]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d012      	beq.n	801d31e <etharp_update_arp_entry+0x52>
 801d2f8:	68bb      	ldr	r3, [r7, #8]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	2b00      	cmp	r3, #0
 801d2fe:	d00e      	beq.n	801d31e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d300:	68bb      	ldr	r3, [r7, #8]
 801d302:	681b      	ldr	r3, [r3, #0]
 801d304:	68f9      	ldr	r1, [r7, #12]
 801d306:	4618      	mov	r0, r3
 801d308:	f001 fa80 	bl	801e80c <ip4_addr_isbroadcast_u32>
 801d30c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d105      	bne.n	801d31e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801d312:	68bb      	ldr	r3, [r7, #8]
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d31a:	2be0      	cmp	r3, #224	@ 0xe0
 801d31c:	d102      	bne.n	801d324 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d31e:	f06f 030f 	mvn.w	r3, #15
 801d322:	e06c      	b.n	801d3fe <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801d324:	78fb      	ldrb	r3, [r7, #3]
 801d326:	68fa      	ldr	r2, [r7, #12]
 801d328:	4619      	mov	r1, r3
 801d32a:	68b8      	ldr	r0, [r7, #8]
 801d32c:	f7ff fe56 	bl	801cfdc <etharp_find_entry>
 801d330:	4603      	mov	r3, r0
 801d332:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d334:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	da02      	bge.n	801d342 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d33c:	8afb      	ldrh	r3, [r7, #22]
 801d33e:	b25b      	sxtb	r3, r3
 801d340:	e05d      	b.n	801d3fe <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d342:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d346:	4933      	ldr	r1, [pc, #204]	@ (801d414 <etharp_update_arp_entry+0x148>)
 801d348:	4613      	mov	r3, r2
 801d34a:	005b      	lsls	r3, r3, #1
 801d34c:	4413      	add	r3, r2
 801d34e:	00db      	lsls	r3, r3, #3
 801d350:	440b      	add	r3, r1
 801d352:	3314      	adds	r3, #20
 801d354:	2202      	movs	r2, #2
 801d356:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d358:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d35c:	492d      	ldr	r1, [pc, #180]	@ (801d414 <etharp_update_arp_entry+0x148>)
 801d35e:	4613      	mov	r3, r2
 801d360:	005b      	lsls	r3, r3, #1
 801d362:	4413      	add	r3, r2
 801d364:	00db      	lsls	r3, r3, #3
 801d366:	440b      	add	r3, r1
 801d368:	3308      	adds	r3, #8
 801d36a:	68fa      	ldr	r2, [r7, #12]
 801d36c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d36e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d372:	4613      	mov	r3, r2
 801d374:	005b      	lsls	r3, r3, #1
 801d376:	4413      	add	r3, r2
 801d378:	00db      	lsls	r3, r3, #3
 801d37a:	3308      	adds	r3, #8
 801d37c:	4a25      	ldr	r2, [pc, #148]	@ (801d414 <etharp_update_arp_entry+0x148>)
 801d37e:	4413      	add	r3, r2
 801d380:	3304      	adds	r3, #4
 801d382:	2206      	movs	r2, #6
 801d384:	6879      	ldr	r1, [r7, #4]
 801d386:	4618      	mov	r0, r3
 801d388:	f003 ffd7 	bl	802133a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801d38c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d390:	4920      	ldr	r1, [pc, #128]	@ (801d414 <etharp_update_arp_entry+0x148>)
 801d392:	4613      	mov	r3, r2
 801d394:	005b      	lsls	r3, r3, #1
 801d396:	4413      	add	r3, r2
 801d398:	00db      	lsls	r3, r3, #3
 801d39a:	440b      	add	r3, r1
 801d39c:	3312      	adds	r3, #18
 801d39e:	2200      	movs	r2, #0
 801d3a0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801d3a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d3a6:	491b      	ldr	r1, [pc, #108]	@ (801d414 <etharp_update_arp_entry+0x148>)
 801d3a8:	4613      	mov	r3, r2
 801d3aa:	005b      	lsls	r3, r3, #1
 801d3ac:	4413      	add	r3, r2
 801d3ae:	00db      	lsls	r3, r3, #3
 801d3b0:	440b      	add	r3, r1
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	2b00      	cmp	r3, #0
 801d3b6:	d021      	beq.n	801d3fc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801d3b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d3bc:	4915      	ldr	r1, [pc, #84]	@ (801d414 <etharp_update_arp_entry+0x148>)
 801d3be:	4613      	mov	r3, r2
 801d3c0:	005b      	lsls	r3, r3, #1
 801d3c2:	4413      	add	r3, r2
 801d3c4:	00db      	lsls	r3, r3, #3
 801d3c6:	440b      	add	r3, r1
 801d3c8:	681b      	ldr	r3, [r3, #0]
 801d3ca:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801d3cc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d3d0:	4910      	ldr	r1, [pc, #64]	@ (801d414 <etharp_update_arp_entry+0x148>)
 801d3d2:	4613      	mov	r3, r2
 801d3d4:	005b      	lsls	r3, r3, #1
 801d3d6:	4413      	add	r3, r2
 801d3d8:	00db      	lsls	r3, r3, #3
 801d3da:	440b      	add	r3, r1
 801d3dc:	2200      	movs	r2, #0
 801d3de:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d3e0:	68fb      	ldr	r3, [r7, #12]
 801d3e2:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801d3e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d3ea:	9300      	str	r3, [sp, #0]
 801d3ec:	687b      	ldr	r3, [r7, #4]
 801d3ee:	6939      	ldr	r1, [r7, #16]
 801d3f0:	68f8      	ldr	r0, [r7, #12]
 801d3f2:	f002 f96b 	bl	801f6cc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d3f6:	6938      	ldr	r0, [r7, #16]
 801d3f8:	f7f7 fd34 	bl	8014e64 <pbuf_free>
  }
  return ERR_OK;
 801d3fc:	2300      	movs	r3, #0
}
 801d3fe:	4618      	mov	r0, r3
 801d400:	3718      	adds	r7, #24
 801d402:	46bd      	mov	sp, r7
 801d404:	bd80      	pop	{r7, pc}
 801d406:	bf00      	nop
 801d408:	08025d48 	.word	0x08025d48
 801d40c:	08025e40 	.word	0x08025e40
 801d410:	08025dc0 	.word	0x08025dc0
 801d414:	2002d4d0 	.word	0x2002d4d0

0801d418 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d418:	b580      	push	{r7, lr}
 801d41a:	b084      	sub	sp, #16
 801d41c:	af00      	add	r7, sp, #0
 801d41e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d420:	2300      	movs	r3, #0
 801d422:	60fb      	str	r3, [r7, #12]
 801d424:	e01e      	b.n	801d464 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801d426:	4913      	ldr	r1, [pc, #76]	@ (801d474 <etharp_cleanup_netif+0x5c>)
 801d428:	68fa      	ldr	r2, [r7, #12]
 801d42a:	4613      	mov	r3, r2
 801d42c:	005b      	lsls	r3, r3, #1
 801d42e:	4413      	add	r3, r2
 801d430:	00db      	lsls	r3, r3, #3
 801d432:	440b      	add	r3, r1
 801d434:	3314      	adds	r3, #20
 801d436:	781b      	ldrb	r3, [r3, #0]
 801d438:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d43a:	7afb      	ldrb	r3, [r7, #11]
 801d43c:	2b00      	cmp	r3, #0
 801d43e:	d00e      	beq.n	801d45e <etharp_cleanup_netif+0x46>
 801d440:	490c      	ldr	r1, [pc, #48]	@ (801d474 <etharp_cleanup_netif+0x5c>)
 801d442:	68fa      	ldr	r2, [r7, #12]
 801d444:	4613      	mov	r3, r2
 801d446:	005b      	lsls	r3, r3, #1
 801d448:	4413      	add	r3, r2
 801d44a:	00db      	lsls	r3, r3, #3
 801d44c:	440b      	add	r3, r1
 801d44e:	3308      	adds	r3, #8
 801d450:	681b      	ldr	r3, [r3, #0]
 801d452:	687a      	ldr	r2, [r7, #4]
 801d454:	429a      	cmp	r2, r3
 801d456:	d102      	bne.n	801d45e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801d458:	68f8      	ldr	r0, [r7, #12]
 801d45a:	f7ff fcb7 	bl	801cdcc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	3301      	adds	r3, #1
 801d462:	60fb      	str	r3, [r7, #12]
 801d464:	68fb      	ldr	r3, [r7, #12]
 801d466:	2b09      	cmp	r3, #9
 801d468:	dddd      	ble.n	801d426 <etharp_cleanup_netif+0xe>
    }
  }
}
 801d46a:	bf00      	nop
 801d46c:	bf00      	nop
 801d46e:	3710      	adds	r7, #16
 801d470:	46bd      	mov	sp, r7
 801d472:	bd80      	pop	{r7, pc}
 801d474:	2002d4d0 	.word	0x2002d4d0

0801d478 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d478:	b5b0      	push	{r4, r5, r7, lr}
 801d47a:	b08a      	sub	sp, #40	@ 0x28
 801d47c:	af04      	add	r7, sp, #16
 801d47e:	6078      	str	r0, [r7, #4]
 801d480:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d482:	683b      	ldr	r3, [r7, #0]
 801d484:	2b00      	cmp	r3, #0
 801d486:	d107      	bne.n	801d498 <etharp_input+0x20>
 801d488:	4b49      	ldr	r3, [pc, #292]	@ (801d5b0 <etharp_input+0x138>)
 801d48a:	f240 228a 	movw	r2, #650	@ 0x28a
 801d48e:	4949      	ldr	r1, [pc, #292]	@ (801d5b4 <etharp_input+0x13c>)
 801d490:	4849      	ldr	r0, [pc, #292]	@ (801d5b8 <etharp_input+0x140>)
 801d492:	f003 fd1f 	bl	8020ed4 <iprintf>
 801d496:	e088      	b.n	801d5aa <etharp_input+0x132>

  hdr = (struct etharp_hdr *)p->payload;
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	685b      	ldr	r3, [r3, #4]
 801d49c:	617b      	str	r3, [r7, #20]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d49e:	697b      	ldr	r3, [r7, #20]
 801d4a0:	881b      	ldrh	r3, [r3, #0]
 801d4a2:	b29b      	uxth	r3, r3
 801d4a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d4a8:	d10c      	bne.n	801d4c4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d4aa:	697b      	ldr	r3, [r7, #20]
 801d4ac:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d4ae:	2b06      	cmp	r3, #6
 801d4b0:	d108      	bne.n	801d4c4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d4b2:	697b      	ldr	r3, [r7, #20]
 801d4b4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d4b6:	2b04      	cmp	r3, #4
 801d4b8:	d104      	bne.n	801d4c4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d4ba:	697b      	ldr	r3, [r7, #20]
 801d4bc:	885b      	ldrh	r3, [r3, #2]
 801d4be:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d4c0:	2b08      	cmp	r3, #8
 801d4c2:	d00f      	beq.n	801d4e4 <etharp_input+0x6c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
 801d4c4:	4b3d      	ldr	r3, [pc, #244]	@ (801d5bc <etharp_input+0x144>)
 801d4c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801d4c8:	3301      	adds	r3, #1
 801d4ca:	b29a      	uxth	r2, r3
 801d4cc:	4b3b      	ldr	r3, [pc, #236]	@ (801d5bc <etharp_input+0x144>)
 801d4ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801d4d0:	4b3a      	ldr	r3, [pc, #232]	@ (801d5bc <etharp_input+0x144>)
 801d4d2:	8bdb      	ldrh	r3, [r3, #30]
 801d4d4:	3301      	adds	r3, #1
 801d4d6:	b29a      	uxth	r2, r3
 801d4d8:	4b38      	ldr	r3, [pc, #224]	@ (801d5bc <etharp_input+0x144>)
 801d4da:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801d4dc:	6878      	ldr	r0, [r7, #4]
 801d4de:	f7f7 fcc1 	bl	8014e64 <pbuf_free>
    return;
 801d4e2:	e062      	b.n	801d5aa <etharp_input+0x132>
  }
  ETHARP_STATS_INC(etharp.recv);
 801d4e4:	4b35      	ldr	r3, [pc, #212]	@ (801d5bc <etharp_input+0x144>)
 801d4e6:	8b5b      	ldrh	r3, [r3, #26]
 801d4e8:	3301      	adds	r3, #1
 801d4ea:	b29a      	uxth	r2, r3
 801d4ec:	4b33      	ldr	r3, [pc, #204]	@ (801d5bc <etharp_input+0x144>)
 801d4ee:	835a      	strh	r2, [r3, #26]
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d4f0:	697b      	ldr	r3, [r7, #20]
 801d4f2:	330e      	adds	r3, #14
 801d4f4:	681b      	ldr	r3, [r3, #0]
 801d4f6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d4f8:	697b      	ldr	r3, [r7, #20]
 801d4fa:	3318      	adds	r3, #24
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d500:	683b      	ldr	r3, [r7, #0]
 801d502:	3304      	adds	r3, #4
 801d504:	681b      	ldr	r3, [r3, #0]
 801d506:	2b00      	cmp	r3, #0
 801d508:	d102      	bne.n	801d510 <etharp_input+0x98>
    for_us = 0;
 801d50a:	2300      	movs	r3, #0
 801d50c:	74fb      	strb	r3, [r7, #19]
 801d50e:	e009      	b.n	801d524 <etharp_input+0xac>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d510:	68ba      	ldr	r2, [r7, #8]
 801d512:	683b      	ldr	r3, [r7, #0]
 801d514:	3304      	adds	r3, #4
 801d516:	681b      	ldr	r3, [r3, #0]
 801d518:	429a      	cmp	r2, r3
 801d51a:	bf0c      	ite	eq
 801d51c:	2301      	moveq	r3, #1
 801d51e:	2300      	movne	r3, #0
 801d520:	b2db      	uxtb	r3, r3
 801d522:	74fb      	strb	r3, [r7, #19]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d524:	697b      	ldr	r3, [r7, #20]
 801d526:	f103 0208 	add.w	r2, r3, #8
 801d52a:	7cfb      	ldrb	r3, [r7, #19]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d001      	beq.n	801d534 <etharp_input+0xbc>
 801d530:	2301      	movs	r3, #1
 801d532:	e000      	b.n	801d536 <etharp_input+0xbe>
 801d534:	2302      	movs	r3, #2
 801d536:	f107 010c 	add.w	r1, r7, #12
 801d53a:	6838      	ldr	r0, [r7, #0]
 801d53c:	f7ff fec6 	bl	801d2cc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d540:	697b      	ldr	r3, [r7, #20]
 801d542:	88db      	ldrh	r3, [r3, #6]
 801d544:	b29b      	uxth	r3, r3
 801d546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d54a:	d003      	beq.n	801d554 <etharp_input+0xdc>
 801d54c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d550:	d025      	beq.n	801d59e <etharp_input+0x126>
 801d552:	e01d      	b.n	801d590 <etharp_input+0x118>
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
      /* ARP request for our address? */
      if (for_us) {
 801d554:	7cfb      	ldrb	r3, [r7, #19]
 801d556:	2b00      	cmp	r3, #0
 801d558:	d023      	beq.n	801d5a2 <etharp_input+0x12a>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d55a:	683b      	ldr	r3, [r7, #0]
 801d55c:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801d560:	697b      	ldr	r3, [r7, #20]
 801d562:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d566:	683b      	ldr	r3, [r7, #0]
 801d568:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 801d56c:	683b      	ldr	r3, [r7, #0]
 801d56e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d570:	697a      	ldr	r2, [r7, #20]
 801d572:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d574:	2102      	movs	r1, #2
 801d576:	9103      	str	r1, [sp, #12]
 801d578:	f107 010c 	add.w	r1, r7, #12
 801d57c:	9102      	str	r1, [sp, #8]
 801d57e:	9201      	str	r2, [sp, #4]
 801d580:	9300      	str	r3, [sp, #0]
 801d582:	462b      	mov	r3, r5
 801d584:	4622      	mov	r2, r4
 801d586:	4601      	mov	r1, r0
 801d588:	6838      	ldr	r0, [r7, #0]
 801d58a:	f000 fb0b 	bl	801dba4 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801d58e:	e008      	b.n	801d5a2 <etharp_input+0x12a>
      dhcp_arp_reply(netif, &sipaddr);
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
 801d590:	4b0a      	ldr	r3, [pc, #40]	@ (801d5bc <etharp_input+0x144>)
 801d592:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801d594:	3301      	adds	r3, #1
 801d596:	b29a      	uxth	r2, r3
 801d598:	4b08      	ldr	r3, [pc, #32]	@ (801d5bc <etharp_input+0x144>)
 801d59a:	859a      	strh	r2, [r3, #44]	@ 0x2c
      break;
 801d59c:	e002      	b.n	801d5a4 <etharp_input+0x12c>
      break;
 801d59e:	bf00      	nop
 801d5a0:	e000      	b.n	801d5a4 <etharp_input+0x12c>
      break;
 801d5a2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d5a4:	6878      	ldr	r0, [r7, #4]
 801d5a6:	f7f7 fc5d 	bl	8014e64 <pbuf_free>
}
 801d5aa:	3718      	adds	r7, #24
 801d5ac:	46bd      	mov	sp, r7
 801d5ae:	bdb0      	pop	{r4, r5, r7, pc}
 801d5b0:	08025d48 	.word	0x08025d48
 801d5b4:	08025e98 	.word	0x08025e98
 801d5b8:	08025dc0 	.word	0x08025dc0
 801d5bc:	2002d36c 	.word	0x2002d36c

0801d5c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	b086      	sub	sp, #24
 801d5c4:	af02      	add	r7, sp, #8
 801d5c6:	60f8      	str	r0, [r7, #12]
 801d5c8:	60b9      	str	r1, [r7, #8]
 801d5ca:	4613      	mov	r3, r2
 801d5cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d5ce:	79fa      	ldrb	r2, [r7, #7]
 801d5d0:	4944      	ldr	r1, [pc, #272]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d5d2:	4613      	mov	r3, r2
 801d5d4:	005b      	lsls	r3, r3, #1
 801d5d6:	4413      	add	r3, r2
 801d5d8:	00db      	lsls	r3, r3, #3
 801d5da:	440b      	add	r3, r1
 801d5dc:	3314      	adds	r3, #20
 801d5de:	781b      	ldrb	r3, [r3, #0]
 801d5e0:	2b01      	cmp	r3, #1
 801d5e2:	d806      	bhi.n	801d5f2 <etharp_output_to_arp_index+0x32>
 801d5e4:	4b40      	ldr	r3, [pc, #256]	@ (801d6e8 <etharp_output_to_arp_index+0x128>)
 801d5e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801d5ea:	4940      	ldr	r1, [pc, #256]	@ (801d6ec <etharp_output_to_arp_index+0x12c>)
 801d5ec:	4840      	ldr	r0, [pc, #256]	@ (801d6f0 <etharp_output_to_arp_index+0x130>)
 801d5ee:	f003 fc71 	bl	8020ed4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d5f2:	79fa      	ldrb	r2, [r7, #7]
 801d5f4:	493b      	ldr	r1, [pc, #236]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d5f6:	4613      	mov	r3, r2
 801d5f8:	005b      	lsls	r3, r3, #1
 801d5fa:	4413      	add	r3, r2
 801d5fc:	00db      	lsls	r3, r3, #3
 801d5fe:	440b      	add	r3, r1
 801d600:	3314      	adds	r3, #20
 801d602:	781b      	ldrb	r3, [r3, #0]
 801d604:	2b02      	cmp	r3, #2
 801d606:	d153      	bne.n	801d6b0 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d608:	79fa      	ldrb	r2, [r7, #7]
 801d60a:	4936      	ldr	r1, [pc, #216]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d60c:	4613      	mov	r3, r2
 801d60e:	005b      	lsls	r3, r3, #1
 801d610:	4413      	add	r3, r2
 801d612:	00db      	lsls	r3, r3, #3
 801d614:	440b      	add	r3, r1
 801d616:	3312      	adds	r3, #18
 801d618:	881b      	ldrh	r3, [r3, #0]
 801d61a:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801d61e:	d919      	bls.n	801d654 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d620:	79fa      	ldrb	r2, [r7, #7]
 801d622:	4613      	mov	r3, r2
 801d624:	005b      	lsls	r3, r3, #1
 801d626:	4413      	add	r3, r2
 801d628:	00db      	lsls	r3, r3, #3
 801d62a:	4a2e      	ldr	r2, [pc, #184]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d62c:	4413      	add	r3, r2
 801d62e:	3304      	adds	r3, #4
 801d630:	4619      	mov	r1, r3
 801d632:	68f8      	ldr	r0, [r7, #12]
 801d634:	f000 fb72 	bl	801dd1c <etharp_request>
 801d638:	4603      	mov	r3, r0
 801d63a:	2b00      	cmp	r3, #0
 801d63c:	d138      	bne.n	801d6b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d63e:	79fa      	ldrb	r2, [r7, #7]
 801d640:	4928      	ldr	r1, [pc, #160]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d642:	4613      	mov	r3, r2
 801d644:	005b      	lsls	r3, r3, #1
 801d646:	4413      	add	r3, r2
 801d648:	00db      	lsls	r3, r3, #3
 801d64a:	440b      	add	r3, r1
 801d64c:	3314      	adds	r3, #20
 801d64e:	2203      	movs	r2, #3
 801d650:	701a      	strb	r2, [r3, #0]
 801d652:	e02d      	b.n	801d6b0 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801d654:	79fa      	ldrb	r2, [r7, #7]
 801d656:	4923      	ldr	r1, [pc, #140]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d658:	4613      	mov	r3, r2
 801d65a:	005b      	lsls	r3, r3, #1
 801d65c:	4413      	add	r3, r2
 801d65e:	00db      	lsls	r3, r3, #3
 801d660:	440b      	add	r3, r1
 801d662:	3312      	adds	r3, #18
 801d664:	881b      	ldrh	r3, [r3, #0]
 801d666:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801d66a:	d321      	bcc.n	801d6b0 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801d66c:	79fa      	ldrb	r2, [r7, #7]
 801d66e:	4613      	mov	r3, r2
 801d670:	005b      	lsls	r3, r3, #1
 801d672:	4413      	add	r3, r2
 801d674:	00db      	lsls	r3, r3, #3
 801d676:	4a1b      	ldr	r2, [pc, #108]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d678:	4413      	add	r3, r2
 801d67a:	1d19      	adds	r1, r3, #4
 801d67c:	79fa      	ldrb	r2, [r7, #7]
 801d67e:	4613      	mov	r3, r2
 801d680:	005b      	lsls	r3, r3, #1
 801d682:	4413      	add	r3, r2
 801d684:	00db      	lsls	r3, r3, #3
 801d686:	3308      	adds	r3, #8
 801d688:	4a16      	ldr	r2, [pc, #88]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d68a:	4413      	add	r3, r2
 801d68c:	3304      	adds	r3, #4
 801d68e:	461a      	mov	r2, r3
 801d690:	68f8      	ldr	r0, [r7, #12]
 801d692:	f000 fb21 	bl	801dcd8 <etharp_request_dst>
 801d696:	4603      	mov	r3, r0
 801d698:	2b00      	cmp	r3, #0
 801d69a:	d109      	bne.n	801d6b0 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d69c:	79fa      	ldrb	r2, [r7, #7]
 801d69e:	4911      	ldr	r1, [pc, #68]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d6a0:	4613      	mov	r3, r2
 801d6a2:	005b      	lsls	r3, r3, #1
 801d6a4:	4413      	add	r3, r2
 801d6a6:	00db      	lsls	r3, r3, #3
 801d6a8:	440b      	add	r3, r1
 801d6aa:	3314      	adds	r3, #20
 801d6ac:	2203      	movs	r2, #3
 801d6ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 801d6b6:	79fa      	ldrb	r2, [r7, #7]
 801d6b8:	4613      	mov	r3, r2
 801d6ba:	005b      	lsls	r3, r3, #1
 801d6bc:	4413      	add	r3, r2
 801d6be:	00db      	lsls	r3, r3, #3
 801d6c0:	3308      	adds	r3, #8
 801d6c2:	4a08      	ldr	r2, [pc, #32]	@ (801d6e4 <etharp_output_to_arp_index+0x124>)
 801d6c4:	4413      	add	r3, r2
 801d6c6:	3304      	adds	r3, #4
 801d6c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801d6cc:	9200      	str	r2, [sp, #0]
 801d6ce:	460a      	mov	r2, r1
 801d6d0:	68b9      	ldr	r1, [r7, #8]
 801d6d2:	68f8      	ldr	r0, [r7, #12]
 801d6d4:	f001 fffa 	bl	801f6cc <ethernet_output>
 801d6d8:	4603      	mov	r3, r0
}
 801d6da:	4618      	mov	r0, r3
 801d6dc:	3710      	adds	r7, #16
 801d6de:	46bd      	mov	sp, r7
 801d6e0:	bd80      	pop	{r7, pc}
 801d6e2:	bf00      	nop
 801d6e4:	2002d4d0 	.word	0x2002d4d0
 801d6e8:	08025d48 	.word	0x08025d48
 801d6ec:	08025eb8 	.word	0x08025eb8
 801d6f0:	08025dc0 	.word	0x08025dc0

0801d6f4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b08a      	sub	sp, #40	@ 0x28
 801d6f8:	af02      	add	r7, sp, #8
 801d6fa:	60f8      	str	r0, [r7, #12]
 801d6fc:	60b9      	str	r1, [r7, #8]
 801d6fe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801d700:	687b      	ldr	r3, [r7, #4]
 801d702:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801d704:	68fb      	ldr	r3, [r7, #12]
 801d706:	2b00      	cmp	r3, #0
 801d708:	d106      	bne.n	801d718 <etharp_output+0x24>
 801d70a:	4b76      	ldr	r3, [pc, #472]	@ (801d8e4 <etharp_output+0x1f0>)
 801d70c:	f240 321e 	movw	r2, #798	@ 0x31e
 801d710:	4975      	ldr	r1, [pc, #468]	@ (801d8e8 <etharp_output+0x1f4>)
 801d712:	4876      	ldr	r0, [pc, #472]	@ (801d8ec <etharp_output+0x1f8>)
 801d714:	f003 fbde 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801d718:	68bb      	ldr	r3, [r7, #8]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	d106      	bne.n	801d72c <etharp_output+0x38>
 801d71e:	4b71      	ldr	r3, [pc, #452]	@ (801d8e4 <etharp_output+0x1f0>)
 801d720:	f240 321f 	movw	r2, #799	@ 0x31f
 801d724:	4972      	ldr	r1, [pc, #456]	@ (801d8f0 <etharp_output+0x1fc>)
 801d726:	4871      	ldr	r0, [pc, #452]	@ (801d8ec <etharp_output+0x1f8>)
 801d728:	f003 fbd4 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d106      	bne.n	801d740 <etharp_output+0x4c>
 801d732:	4b6c      	ldr	r3, [pc, #432]	@ (801d8e4 <etharp_output+0x1f0>)
 801d734:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801d738:	496e      	ldr	r1, [pc, #440]	@ (801d8f4 <etharp_output+0x200>)
 801d73a:	486c      	ldr	r0, [pc, #432]	@ (801d8ec <etharp_output+0x1f8>)
 801d73c:	f003 fbca 	bl	8020ed4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	681b      	ldr	r3, [r3, #0]
 801d744:	68f9      	ldr	r1, [r7, #12]
 801d746:	4618      	mov	r0, r3
 801d748:	f001 f860 	bl	801e80c <ip4_addr_isbroadcast_u32>
 801d74c:	4603      	mov	r3, r0
 801d74e:	2b00      	cmp	r3, #0
 801d750:	d002      	beq.n	801d758 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801d752:	4b69      	ldr	r3, [pc, #420]	@ (801d8f8 <etharp_output+0x204>)
 801d754:	61fb      	str	r3, [r7, #28]
 801d756:	e0b5      	b.n	801d8c4 <etharp_output+0x1d0>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	681b      	ldr	r3, [r3, #0]
 801d75c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801d760:	2be0      	cmp	r3, #224	@ 0xe0
 801d762:	d118      	bne.n	801d796 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801d764:	2301      	movs	r3, #1
 801d766:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801d768:	2300      	movs	r3, #0
 801d76a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801d76c:	235e      	movs	r3, #94	@ 0x5e
 801d76e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	3301      	adds	r3, #1
 801d774:	781b      	ldrb	r3, [r3, #0]
 801d776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d77a:	b2db      	uxtb	r3, r3
 801d77c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	3302      	adds	r3, #2
 801d782:	781b      	ldrb	r3, [r3, #0]
 801d784:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801d786:	687b      	ldr	r3, [r7, #4]
 801d788:	3303      	adds	r3, #3
 801d78a:	781b      	ldrb	r3, [r3, #0]
 801d78c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801d78e:	f107 0310 	add.w	r3, r7, #16
 801d792:	61fb      	str	r3, [r7, #28]
 801d794:	e096      	b.n	801d8c4 <etharp_output+0x1d0>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	681a      	ldr	r2, [r3, #0]
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	3304      	adds	r3, #4
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	405a      	eors	r2, r3
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	3308      	adds	r3, #8
 801d7a6:	681b      	ldr	r3, [r3, #0]
 801d7a8:	4013      	ands	r3, r2
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	d012      	beq.n	801d7d4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801d7b4:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801d7b8:	4293      	cmp	r3, r2
 801d7ba:	d00b      	beq.n	801d7d4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	330c      	adds	r3, #12
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d003      	beq.n	801d7ce <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801d7c6:	68fb      	ldr	r3, [r7, #12]
 801d7c8:	330c      	adds	r3, #12
 801d7ca:	61bb      	str	r3, [r7, #24]
 801d7cc:	e002      	b.n	801d7d4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801d7ce:	f06f 0303 	mvn.w	r3, #3
 801d7d2:	e083      	b.n	801d8dc <etharp_output+0x1e8>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d7d4:	4b49      	ldr	r3, [pc, #292]	@ (801d8fc <etharp_output+0x208>)
 801d7d6:	781b      	ldrb	r3, [r3, #0]
 801d7d8:	4619      	mov	r1, r3
 801d7da:	4a49      	ldr	r2, [pc, #292]	@ (801d900 <etharp_output+0x20c>)
 801d7dc:	460b      	mov	r3, r1
 801d7de:	005b      	lsls	r3, r3, #1
 801d7e0:	440b      	add	r3, r1
 801d7e2:	00db      	lsls	r3, r3, #3
 801d7e4:	4413      	add	r3, r2
 801d7e6:	3314      	adds	r3, #20
 801d7e8:	781b      	ldrb	r3, [r3, #0]
 801d7ea:	2b01      	cmp	r3, #1
 801d7ec:	d92b      	bls.n	801d846 <etharp_output+0x152>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d7ee:	4b43      	ldr	r3, [pc, #268]	@ (801d8fc <etharp_output+0x208>)
 801d7f0:	781b      	ldrb	r3, [r3, #0]
 801d7f2:	4619      	mov	r1, r3
 801d7f4:	4a42      	ldr	r2, [pc, #264]	@ (801d900 <etharp_output+0x20c>)
 801d7f6:	460b      	mov	r3, r1
 801d7f8:	005b      	lsls	r3, r3, #1
 801d7fa:	440b      	add	r3, r1
 801d7fc:	00db      	lsls	r3, r3, #3
 801d7fe:	4413      	add	r3, r2
 801d800:	3308      	adds	r3, #8
 801d802:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801d804:	68fa      	ldr	r2, [r7, #12]
 801d806:	429a      	cmp	r2, r3
 801d808:	d11d      	bne.n	801d846 <etharp_output+0x152>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801d80a:	69bb      	ldr	r3, [r7, #24]
 801d80c:	681a      	ldr	r2, [r3, #0]
 801d80e:	4b3b      	ldr	r3, [pc, #236]	@ (801d8fc <etharp_output+0x208>)
 801d810:	781b      	ldrb	r3, [r3, #0]
 801d812:	4618      	mov	r0, r3
 801d814:	493a      	ldr	r1, [pc, #232]	@ (801d900 <etharp_output+0x20c>)
 801d816:	4603      	mov	r3, r0
 801d818:	005b      	lsls	r3, r3, #1
 801d81a:	4403      	add	r3, r0
 801d81c:	00db      	lsls	r3, r3, #3
 801d81e:	440b      	add	r3, r1
 801d820:	3304      	adds	r3, #4
 801d822:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801d824:	429a      	cmp	r2, r3
 801d826:	d10e      	bne.n	801d846 <etharp_output+0x152>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
 801d828:	4b36      	ldr	r3, [pc, #216]	@ (801d904 <etharp_output+0x210>)
 801d82a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801d82c:	3301      	adds	r3, #1
 801d82e:	b29a      	uxth	r2, r3
 801d830:	4b34      	ldr	r3, [pc, #208]	@ (801d904 <etharp_output+0x210>)
 801d832:	85da      	strh	r2, [r3, #46]	@ 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801d834:	4b31      	ldr	r3, [pc, #196]	@ (801d8fc <etharp_output+0x208>)
 801d836:	781b      	ldrb	r3, [r3, #0]
 801d838:	461a      	mov	r2, r3
 801d83a:	68b9      	ldr	r1, [r7, #8]
 801d83c:	68f8      	ldr	r0, [r7, #12]
 801d83e:	f7ff febf 	bl	801d5c0 <etharp_output_to_arp_index>
 801d842:	4603      	mov	r3, r0
 801d844:	e04a      	b.n	801d8dc <etharp_output+0x1e8>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d846:	2300      	movs	r3, #0
 801d848:	75fb      	strb	r3, [r7, #23]
 801d84a:	e031      	b.n	801d8b0 <etharp_output+0x1bc>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d84c:	7dfa      	ldrb	r2, [r7, #23]
 801d84e:	492c      	ldr	r1, [pc, #176]	@ (801d900 <etharp_output+0x20c>)
 801d850:	4613      	mov	r3, r2
 801d852:	005b      	lsls	r3, r3, #1
 801d854:	4413      	add	r3, r2
 801d856:	00db      	lsls	r3, r3, #3
 801d858:	440b      	add	r3, r1
 801d85a:	3314      	adds	r3, #20
 801d85c:	781b      	ldrb	r3, [r3, #0]
 801d85e:	2b01      	cmp	r3, #1
 801d860:	d923      	bls.n	801d8aa <etharp_output+0x1b6>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801d862:	7dfa      	ldrb	r2, [r7, #23]
 801d864:	4926      	ldr	r1, [pc, #152]	@ (801d900 <etharp_output+0x20c>)
 801d866:	4613      	mov	r3, r2
 801d868:	005b      	lsls	r3, r3, #1
 801d86a:	4413      	add	r3, r2
 801d86c:	00db      	lsls	r3, r3, #3
 801d86e:	440b      	add	r3, r1
 801d870:	3308      	adds	r3, #8
 801d872:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801d874:	68fa      	ldr	r2, [r7, #12]
 801d876:	429a      	cmp	r2, r3
 801d878:	d117      	bne.n	801d8aa <etharp_output+0x1b6>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801d87a:	69bb      	ldr	r3, [r7, #24]
 801d87c:	6819      	ldr	r1, [r3, #0]
 801d87e:	7dfa      	ldrb	r2, [r7, #23]
 801d880:	481f      	ldr	r0, [pc, #124]	@ (801d900 <etharp_output+0x20c>)
 801d882:	4613      	mov	r3, r2
 801d884:	005b      	lsls	r3, r3, #1
 801d886:	4413      	add	r3, r2
 801d888:	00db      	lsls	r3, r3, #3
 801d88a:	4403      	add	r3, r0
 801d88c:	3304      	adds	r3, #4
 801d88e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801d890:	4299      	cmp	r1, r3
 801d892:	d10a      	bne.n	801d8aa <etharp_output+0x1b6>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801d894:	4a19      	ldr	r2, [pc, #100]	@ (801d8fc <etharp_output+0x208>)
 801d896:	7dfb      	ldrb	r3, [r7, #23]
 801d898:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801d89a:	7dfb      	ldrb	r3, [r7, #23]
 801d89c:	461a      	mov	r2, r3
 801d89e:	68b9      	ldr	r1, [r7, #8]
 801d8a0:	68f8      	ldr	r0, [r7, #12]
 801d8a2:	f7ff fe8d 	bl	801d5c0 <etharp_output_to_arp_index>
 801d8a6:	4603      	mov	r3, r0
 801d8a8:	e018      	b.n	801d8dc <etharp_output+0x1e8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801d8aa:	7dfb      	ldrb	r3, [r7, #23]
 801d8ac:	3301      	adds	r3, #1
 801d8ae:	75fb      	strb	r3, [r7, #23]
 801d8b0:	7dfb      	ldrb	r3, [r7, #23]
 801d8b2:	2b09      	cmp	r3, #9
 801d8b4:	d9ca      	bls.n	801d84c <etharp_output+0x158>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801d8b6:	68ba      	ldr	r2, [r7, #8]
 801d8b8:	69b9      	ldr	r1, [r7, #24]
 801d8ba:	68f8      	ldr	r0, [r7, #12]
 801d8bc:	f000 f824 	bl	801d908 <etharp_query>
 801d8c0:	4603      	mov	r3, r0
 801d8c2:	e00b      	b.n	801d8dc <etharp_output+0x1e8>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 801d8ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801d8ce:	9300      	str	r3, [sp, #0]
 801d8d0:	69fb      	ldr	r3, [r7, #28]
 801d8d2:	68b9      	ldr	r1, [r7, #8]
 801d8d4:	68f8      	ldr	r0, [r7, #12]
 801d8d6:	f001 fef9 	bl	801f6cc <ethernet_output>
 801d8da:	4603      	mov	r3, r0
}
 801d8dc:	4618      	mov	r0, r3
 801d8de:	3720      	adds	r7, #32
 801d8e0:	46bd      	mov	sp, r7
 801d8e2:	bd80      	pop	{r7, pc}
 801d8e4:	08025d48 	.word	0x08025d48
 801d8e8:	08025e98 	.word	0x08025e98
 801d8ec:	08025dc0 	.word	0x08025dc0
 801d8f0:	08025ee8 	.word	0x08025ee8
 801d8f4:	08025e88 	.word	0x08025e88
 801d8f8:	08026dc0 	.word	0x08026dc0
 801d8fc:	2002d5c0 	.word	0x2002d5c0
 801d900:	2002d4d0 	.word	0x2002d4d0
 801d904:	2002d36c 	.word	0x2002d36c

0801d908 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801d908:	b580      	push	{r7, lr}
 801d90a:	b08c      	sub	sp, #48	@ 0x30
 801d90c:	af02      	add	r7, sp, #8
 801d90e:	60f8      	str	r0, [r7, #12]
 801d910:	60b9      	str	r1, [r7, #8]
 801d912:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	3326      	adds	r3, #38	@ 0x26
 801d918:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801d91a:	23ff      	movs	r3, #255	@ 0xff
 801d91c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801d920:	2300      	movs	r3, #0
 801d922:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d924:	68bb      	ldr	r3, [r7, #8]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	68f9      	ldr	r1, [r7, #12]
 801d92a:	4618      	mov	r0, r3
 801d92c:	f000 ff6e 	bl	801e80c <ip4_addr_isbroadcast_u32>
 801d930:	4603      	mov	r3, r0
 801d932:	2b00      	cmp	r3, #0
 801d934:	d10c      	bne.n	801d950 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d936:	68bb      	ldr	r3, [r7, #8]
 801d938:	681b      	ldr	r3, [r3, #0]
 801d93a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801d93e:	2be0      	cmp	r3, #224	@ 0xe0
 801d940:	d006      	beq.n	801d950 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801d942:	68bb      	ldr	r3, [r7, #8]
 801d944:	2b00      	cmp	r3, #0
 801d946:	d003      	beq.n	801d950 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801d948:	68bb      	ldr	r3, [r7, #8]
 801d94a:	681b      	ldr	r3, [r3, #0]
 801d94c:	2b00      	cmp	r3, #0
 801d94e:	d102      	bne.n	801d956 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d950:	f06f 030f 	mvn.w	r3, #15
 801d954:	e110      	b.n	801db78 <etharp_query+0x270>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801d956:	68fa      	ldr	r2, [r7, #12]
 801d958:	2101      	movs	r1, #1
 801d95a:	68b8      	ldr	r0, [r7, #8]
 801d95c:	f7ff fb3e 	bl	801cfdc <etharp_find_entry>
 801d960:	4603      	mov	r3, r0
 801d962:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801d964:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801d968:	2b00      	cmp	r3, #0
 801d96a:	da0b      	bge.n	801d984 <etharp_query+0x7c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	2b00      	cmp	r3, #0
 801d970:	d005      	beq.n	801d97e <etharp_query+0x76>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
 801d972:	4b83      	ldr	r3, [pc, #524]	@ (801db80 <etharp_query+0x278>)
 801d974:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801d976:	3301      	adds	r3, #1
 801d978:	b29a      	uxth	r2, r3
 801d97a:	4b81      	ldr	r3, [pc, #516]	@ (801db80 <etharp_query+0x278>)
 801d97c:	849a      	strh	r2, [r3, #36]	@ 0x24
    }
    return (err_t)i_err;
 801d97e:	8a7b      	ldrh	r3, [r7, #18]
 801d980:	b25b      	sxtb	r3, r3
 801d982:	e0f9      	b.n	801db78 <etharp_query+0x270>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801d984:	8a7b      	ldrh	r3, [r7, #18]
 801d986:	2b7e      	cmp	r3, #126	@ 0x7e
 801d988:	d906      	bls.n	801d998 <etharp_query+0x90>
 801d98a:	4b7e      	ldr	r3, [pc, #504]	@ (801db84 <etharp_query+0x27c>)
 801d98c:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801d990:	497d      	ldr	r1, [pc, #500]	@ (801db88 <etharp_query+0x280>)
 801d992:	487e      	ldr	r0, [pc, #504]	@ (801db8c <etharp_query+0x284>)
 801d994:	f003 fa9e 	bl	8020ed4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801d998:	8a7b      	ldrh	r3, [r7, #18]
 801d99a:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801d99c:	7c7a      	ldrb	r2, [r7, #17]
 801d99e:	497c      	ldr	r1, [pc, #496]	@ (801db90 <etharp_query+0x288>)
 801d9a0:	4613      	mov	r3, r2
 801d9a2:	005b      	lsls	r3, r3, #1
 801d9a4:	4413      	add	r3, r2
 801d9a6:	00db      	lsls	r3, r3, #3
 801d9a8:	440b      	add	r3, r1
 801d9aa:	3314      	adds	r3, #20
 801d9ac:	781b      	ldrb	r3, [r3, #0]
 801d9ae:	2b00      	cmp	r3, #0
 801d9b0:	d115      	bne.n	801d9de <etharp_query+0xd6>
    is_new_entry = 1;
 801d9b2:	2301      	movs	r3, #1
 801d9b4:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801d9b6:	7c7a      	ldrb	r2, [r7, #17]
 801d9b8:	4975      	ldr	r1, [pc, #468]	@ (801db90 <etharp_query+0x288>)
 801d9ba:	4613      	mov	r3, r2
 801d9bc:	005b      	lsls	r3, r3, #1
 801d9be:	4413      	add	r3, r2
 801d9c0:	00db      	lsls	r3, r3, #3
 801d9c2:	440b      	add	r3, r1
 801d9c4:	3314      	adds	r3, #20
 801d9c6:	2201      	movs	r2, #1
 801d9c8:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801d9ca:	7c7a      	ldrb	r2, [r7, #17]
 801d9cc:	4970      	ldr	r1, [pc, #448]	@ (801db90 <etharp_query+0x288>)
 801d9ce:	4613      	mov	r3, r2
 801d9d0:	005b      	lsls	r3, r3, #1
 801d9d2:	4413      	add	r3, r2
 801d9d4:	00db      	lsls	r3, r3, #3
 801d9d6:	440b      	add	r3, r1
 801d9d8:	3308      	adds	r3, #8
 801d9da:	68fa      	ldr	r2, [r7, #12]
 801d9dc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801d9de:	7c7a      	ldrb	r2, [r7, #17]
 801d9e0:	496b      	ldr	r1, [pc, #428]	@ (801db90 <etharp_query+0x288>)
 801d9e2:	4613      	mov	r3, r2
 801d9e4:	005b      	lsls	r3, r3, #1
 801d9e6:	4413      	add	r3, r2
 801d9e8:	00db      	lsls	r3, r3, #3
 801d9ea:	440b      	add	r3, r1
 801d9ec:	3314      	adds	r3, #20
 801d9ee:	781b      	ldrb	r3, [r3, #0]
 801d9f0:	2b01      	cmp	r3, #1
 801d9f2:	d011      	beq.n	801da18 <etharp_query+0x110>
 801d9f4:	7c7a      	ldrb	r2, [r7, #17]
 801d9f6:	4966      	ldr	r1, [pc, #408]	@ (801db90 <etharp_query+0x288>)
 801d9f8:	4613      	mov	r3, r2
 801d9fa:	005b      	lsls	r3, r3, #1
 801d9fc:	4413      	add	r3, r2
 801d9fe:	00db      	lsls	r3, r3, #3
 801da00:	440b      	add	r3, r1
 801da02:	3314      	adds	r3, #20
 801da04:	781b      	ldrb	r3, [r3, #0]
 801da06:	2b01      	cmp	r3, #1
 801da08:	d806      	bhi.n	801da18 <etharp_query+0x110>
 801da0a:	4b5e      	ldr	r3, [pc, #376]	@ (801db84 <etharp_query+0x27c>)
 801da0c:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801da10:	4960      	ldr	r1, [pc, #384]	@ (801db94 <etharp_query+0x28c>)
 801da12:	485e      	ldr	r0, [pc, #376]	@ (801db8c <etharp_query+0x284>)
 801da14:	f003 fa5e 	bl	8020ed4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801da18:	6a3b      	ldr	r3, [r7, #32]
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d102      	bne.n	801da24 <etharp_query+0x11c>
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	2b00      	cmp	r3, #0
 801da22:	d10c      	bne.n	801da3e <etharp_query+0x136>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801da24:	68b9      	ldr	r1, [r7, #8]
 801da26:	68f8      	ldr	r0, [r7, #12]
 801da28:	f000 f978 	bl	801dd1c <etharp_request>
 801da2c:	4603      	mov	r3, r0
 801da2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	2b00      	cmp	r3, #0
 801da36:	d102      	bne.n	801da3e <etharp_query+0x136>
      return result;
 801da38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801da3c:	e09c      	b.n	801db78 <etharp_query+0x270>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801da3e:	687b      	ldr	r3, [r7, #4]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d106      	bne.n	801da52 <etharp_query+0x14a>
 801da44:	4b4f      	ldr	r3, [pc, #316]	@ (801db84 <etharp_query+0x27c>)
 801da46:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801da4a:	4953      	ldr	r1, [pc, #332]	@ (801db98 <etharp_query+0x290>)
 801da4c:	484f      	ldr	r0, [pc, #316]	@ (801db8c <etharp_query+0x284>)
 801da4e:	f003 fa41 	bl	8020ed4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801da52:	7c7a      	ldrb	r2, [r7, #17]
 801da54:	494e      	ldr	r1, [pc, #312]	@ (801db90 <etharp_query+0x288>)
 801da56:	4613      	mov	r3, r2
 801da58:	005b      	lsls	r3, r3, #1
 801da5a:	4413      	add	r3, r2
 801da5c:	00db      	lsls	r3, r3, #3
 801da5e:	440b      	add	r3, r1
 801da60:	3314      	adds	r3, #20
 801da62:	781b      	ldrb	r3, [r3, #0]
 801da64:	2b01      	cmp	r3, #1
 801da66:	d917      	bls.n	801da98 <etharp_query+0x190>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801da68:	4a4c      	ldr	r2, [pc, #304]	@ (801db9c <etharp_query+0x294>)
 801da6a:	7c7b      	ldrb	r3, [r7, #17]
 801da6c:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801da6e:	7c7a      	ldrb	r2, [r7, #17]
 801da70:	4613      	mov	r3, r2
 801da72:	005b      	lsls	r3, r3, #1
 801da74:	4413      	add	r3, r2
 801da76:	00db      	lsls	r3, r3, #3
 801da78:	3308      	adds	r3, #8
 801da7a:	4a45      	ldr	r2, [pc, #276]	@ (801db90 <etharp_query+0x288>)
 801da7c:	4413      	add	r3, r2
 801da7e:	3304      	adds	r3, #4
 801da80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801da84:	9200      	str	r2, [sp, #0]
 801da86:	697a      	ldr	r2, [r7, #20]
 801da88:	6879      	ldr	r1, [r7, #4]
 801da8a:	68f8      	ldr	r0, [r7, #12]
 801da8c:	f001 fe1e 	bl	801f6cc <ethernet_output>
 801da90:	4603      	mov	r3, r0
 801da92:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801da96:	e06d      	b.n	801db74 <etharp_query+0x26c>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801da98:	7c7a      	ldrb	r2, [r7, #17]
 801da9a:	493d      	ldr	r1, [pc, #244]	@ (801db90 <etharp_query+0x288>)
 801da9c:	4613      	mov	r3, r2
 801da9e:	005b      	lsls	r3, r3, #1
 801daa0:	4413      	add	r3, r2
 801daa2:	00db      	lsls	r3, r3, #3
 801daa4:	440b      	add	r3, r1
 801daa6:	3314      	adds	r3, #20
 801daa8:	781b      	ldrb	r3, [r3, #0]
 801daaa:	2b01      	cmp	r3, #1
 801daac:	d162      	bne.n	801db74 <etharp_query+0x26c>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801daae:	2300      	movs	r3, #0
 801dab0:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	61fb      	str	r3, [r7, #28]
    while (p) {
 801dab6:	e01c      	b.n	801daf2 <etharp_query+0x1ea>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801dab8:	69fb      	ldr	r3, [r7, #28]
 801daba:	895a      	ldrh	r2, [r3, #10]
 801dabc:	69fb      	ldr	r3, [r7, #28]
 801dabe:	891b      	ldrh	r3, [r3, #8]
 801dac0:	429a      	cmp	r2, r3
 801dac2:	d10a      	bne.n	801dada <etharp_query+0x1d2>
 801dac4:	69fb      	ldr	r3, [r7, #28]
 801dac6:	681b      	ldr	r3, [r3, #0]
 801dac8:	2b00      	cmp	r3, #0
 801daca:	d006      	beq.n	801dada <etharp_query+0x1d2>
 801dacc:	4b2d      	ldr	r3, [pc, #180]	@ (801db84 <etharp_query+0x27c>)
 801dace:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801dad2:	4933      	ldr	r1, [pc, #204]	@ (801dba0 <etharp_query+0x298>)
 801dad4:	482d      	ldr	r0, [pc, #180]	@ (801db8c <etharp_query+0x284>)
 801dad6:	f003 f9fd 	bl	8020ed4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801dada:	69fb      	ldr	r3, [r7, #28]
 801dadc:	7b1b      	ldrb	r3, [r3, #12]
 801dade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d002      	beq.n	801daec <etharp_query+0x1e4>
        copy_needed = 1;
 801dae6:	2301      	movs	r3, #1
 801dae8:	61bb      	str	r3, [r7, #24]
        break;
 801daea:	e005      	b.n	801daf8 <etharp_query+0x1f0>
      }
      p = p->next;
 801daec:	69fb      	ldr	r3, [r7, #28]
 801daee:	681b      	ldr	r3, [r3, #0]
 801daf0:	61fb      	str	r3, [r7, #28]
    while (p) {
 801daf2:	69fb      	ldr	r3, [r7, #28]
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d1df      	bne.n	801dab8 <etharp_query+0x1b0>
    }
    if (copy_needed) {
 801daf8:	69bb      	ldr	r3, [r7, #24]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d007      	beq.n	801db0e <etharp_query+0x206>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801dafe:	687a      	ldr	r2, [r7, #4]
 801db00:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801db04:	200e      	movs	r0, #14
 801db06:	f7f7 fc51 	bl	80153ac <pbuf_clone>
 801db0a:	61f8      	str	r0, [r7, #28]
 801db0c:	e004      	b.n	801db18 <etharp_query+0x210>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801db12:	69f8      	ldr	r0, [r7, #28]
 801db14:	f7f7 fa64 	bl	8014fe0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801db18:	69fb      	ldr	r3, [r7, #28]
 801db1a:	2b00      	cmp	r3, #0
 801db1c:	d021      	beq.n	801db62 <etharp_query+0x25a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801db1e:	7c7a      	ldrb	r2, [r7, #17]
 801db20:	491b      	ldr	r1, [pc, #108]	@ (801db90 <etharp_query+0x288>)
 801db22:	4613      	mov	r3, r2
 801db24:	005b      	lsls	r3, r3, #1
 801db26:	4413      	add	r3, r2
 801db28:	00db      	lsls	r3, r3, #3
 801db2a:	440b      	add	r3, r1
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	2b00      	cmp	r3, #0
 801db30:	d00a      	beq.n	801db48 <etharp_query+0x240>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801db32:	7c7a      	ldrb	r2, [r7, #17]
 801db34:	4916      	ldr	r1, [pc, #88]	@ (801db90 <etharp_query+0x288>)
 801db36:	4613      	mov	r3, r2
 801db38:	005b      	lsls	r3, r3, #1
 801db3a:	4413      	add	r3, r2
 801db3c:	00db      	lsls	r3, r3, #3
 801db3e:	440b      	add	r3, r1
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	4618      	mov	r0, r3
 801db44:	f7f7 f98e 	bl	8014e64 <pbuf_free>
      }
      arp_table[i].q = p;
 801db48:	7c7a      	ldrb	r2, [r7, #17]
 801db4a:	4911      	ldr	r1, [pc, #68]	@ (801db90 <etharp_query+0x288>)
 801db4c:	4613      	mov	r3, r2
 801db4e:	005b      	lsls	r3, r3, #1
 801db50:	4413      	add	r3, r2
 801db52:	00db      	lsls	r3, r3, #3
 801db54:	440b      	add	r3, r1
 801db56:	69fa      	ldr	r2, [r7, #28]
 801db58:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801db5a:	2300      	movs	r3, #0
 801db5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801db60:	e008      	b.n	801db74 <etharp_query+0x26c>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
 801db62:	4b07      	ldr	r3, [pc, #28]	@ (801db80 <etharp_query+0x278>)
 801db64:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801db66:	3301      	adds	r3, #1
 801db68:	b29a      	uxth	r2, r3
 801db6a:	4b05      	ldr	r3, [pc, #20]	@ (801db80 <etharp_query+0x278>)
 801db6c:	849a      	strh	r2, [r3, #36]	@ 0x24
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801db6e:	23ff      	movs	r3, #255	@ 0xff
 801db70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801db74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801db78:	4618      	mov	r0, r3
 801db7a:	3728      	adds	r7, #40	@ 0x28
 801db7c:	46bd      	mov	sp, r7
 801db7e:	bd80      	pop	{r7, pc}
 801db80:	2002d36c 	.word	0x2002d36c
 801db84:	08025d48 	.word	0x08025d48
 801db88:	08025ef4 	.word	0x08025ef4
 801db8c:	08025dc0 	.word	0x08025dc0
 801db90:	2002d4d0 	.word	0x2002d4d0
 801db94:	08025f04 	.word	0x08025f04
 801db98:	08025ee8 	.word	0x08025ee8
 801db9c:	2002d5c0 	.word	0x2002d5c0
 801dba0:	08025f2c 	.word	0x08025f2c

0801dba4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801dba4:	b580      	push	{r7, lr}
 801dba6:	b08a      	sub	sp, #40	@ 0x28
 801dba8:	af02      	add	r7, sp, #8
 801dbaa:	60f8      	str	r0, [r7, #12]
 801dbac:	60b9      	str	r1, [r7, #8]
 801dbae:	607a      	str	r2, [r7, #4]
 801dbb0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801dbb2:	2300      	movs	r3, #0
 801dbb4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801dbb6:	68fb      	ldr	r3, [r7, #12]
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d106      	bne.n	801dbca <etharp_raw+0x26>
 801dbbc:	4b40      	ldr	r3, [pc, #256]	@ (801dcc0 <etharp_raw+0x11c>)
 801dbbe:	f240 4257 	movw	r2, #1111	@ 0x457
 801dbc2:	4940      	ldr	r1, [pc, #256]	@ (801dcc4 <etharp_raw+0x120>)
 801dbc4:	4840      	ldr	r0, [pc, #256]	@ (801dcc8 <etharp_raw+0x124>)
 801dbc6:	f003 f985 	bl	8020ed4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801dbca:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801dbce:	211c      	movs	r1, #28
 801dbd0:	200e      	movs	r0, #14
 801dbd2:	f7f6 fe1b 	bl	801480c <pbuf_alloc>
 801dbd6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801dbd8:	69bb      	ldr	r3, [r7, #24]
 801dbda:	2b00      	cmp	r3, #0
 801dbdc:	d108      	bne.n	801dbf0 <etharp_raw+0x4c>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
 801dbde:	4b3b      	ldr	r3, [pc, #236]	@ (801dccc <etharp_raw+0x128>)
 801dbe0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801dbe2:	3301      	adds	r3, #1
 801dbe4:	b29a      	uxth	r2, r3
 801dbe6:	4b39      	ldr	r3, [pc, #228]	@ (801dccc <etharp_raw+0x128>)
 801dbe8:	849a      	strh	r2, [r3, #36]	@ 0x24
    return ERR_MEM;
 801dbea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801dbee:	e063      	b.n	801dcb8 <etharp_raw+0x114>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801dbf0:	69bb      	ldr	r3, [r7, #24]
 801dbf2:	895b      	ldrh	r3, [r3, #10]
 801dbf4:	2b1b      	cmp	r3, #27
 801dbf6:	d806      	bhi.n	801dc06 <etharp_raw+0x62>
 801dbf8:	4b31      	ldr	r3, [pc, #196]	@ (801dcc0 <etharp_raw+0x11c>)
 801dbfa:	f240 4262 	movw	r2, #1122	@ 0x462
 801dbfe:	4934      	ldr	r1, [pc, #208]	@ (801dcd0 <etharp_raw+0x12c>)
 801dc00:	4831      	ldr	r0, [pc, #196]	@ (801dcc8 <etharp_raw+0x124>)
 801dc02:	f003 f967 	bl	8020ed4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801dc06:	69bb      	ldr	r3, [r7, #24]
 801dc08:	685b      	ldr	r3, [r3, #4]
 801dc0a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801dc0c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801dc0e:	4618      	mov	r0, r3
 801dc10:	f7f5 fafa 	bl	8013208 <lwip_htons>
 801dc14:	4603      	mov	r3, r0
 801dc16:	461a      	mov	r2, r3
 801dc18:	697b      	ldr	r3, [r7, #20]
 801dc1a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801dc1c:	68fb      	ldr	r3, [r7, #12]
 801dc1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801dc22:	2b06      	cmp	r3, #6
 801dc24:	d006      	beq.n	801dc34 <etharp_raw+0x90>
 801dc26:	4b26      	ldr	r3, [pc, #152]	@ (801dcc0 <etharp_raw+0x11c>)
 801dc28:	f240 4269 	movw	r2, #1129	@ 0x469
 801dc2c:	4929      	ldr	r1, [pc, #164]	@ (801dcd4 <etharp_raw+0x130>)
 801dc2e:	4826      	ldr	r0, [pc, #152]	@ (801dcc8 <etharp_raw+0x124>)
 801dc30:	f003 f950 	bl	8020ed4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801dc34:	697b      	ldr	r3, [r7, #20]
 801dc36:	3308      	adds	r3, #8
 801dc38:	2206      	movs	r2, #6
 801dc3a:	6839      	ldr	r1, [r7, #0]
 801dc3c:	4618      	mov	r0, r3
 801dc3e:	f003 fb7c 	bl	802133a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801dc42:	697b      	ldr	r3, [r7, #20]
 801dc44:	3312      	adds	r3, #18
 801dc46:	2206      	movs	r2, #6
 801dc48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801dc4a:	4618      	mov	r0, r3
 801dc4c:	f003 fb75 	bl	802133a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801dc50:	697b      	ldr	r3, [r7, #20]
 801dc52:	330e      	adds	r3, #14
 801dc54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801dc56:	6812      	ldr	r2, [r2, #0]
 801dc58:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801dc5a:	697b      	ldr	r3, [r7, #20]
 801dc5c:	3318      	adds	r3, #24
 801dc5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801dc60:	6812      	ldr	r2, [r2, #0]
 801dc62:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801dc64:	697b      	ldr	r3, [r7, #20]
 801dc66:	2200      	movs	r2, #0
 801dc68:	701a      	strb	r2, [r3, #0]
 801dc6a:	2200      	movs	r2, #0
 801dc6c:	f042 0201 	orr.w	r2, r2, #1
 801dc70:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801dc72:	697b      	ldr	r3, [r7, #20]
 801dc74:	2200      	movs	r2, #0
 801dc76:	f042 0208 	orr.w	r2, r2, #8
 801dc7a:	709a      	strb	r2, [r3, #2]
 801dc7c:	2200      	movs	r2, #0
 801dc7e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801dc80:	697b      	ldr	r3, [r7, #20]
 801dc82:	2206      	movs	r2, #6
 801dc84:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801dc86:	697b      	ldr	r3, [r7, #20]
 801dc88:	2204      	movs	r2, #4
 801dc8a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801dc8c:	f640 0306 	movw	r3, #2054	@ 0x806
 801dc90:	9300      	str	r3, [sp, #0]
 801dc92:	687b      	ldr	r3, [r7, #4]
 801dc94:	68ba      	ldr	r2, [r7, #8]
 801dc96:	69b9      	ldr	r1, [r7, #24]
 801dc98:	68f8      	ldr	r0, [r7, #12]
 801dc9a:	f001 fd17 	bl	801f6cc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801dc9e:	4b0b      	ldr	r3, [pc, #44]	@ (801dccc <etharp_raw+0x128>)
 801dca0:	8b1b      	ldrh	r3, [r3, #24]
 801dca2:	3301      	adds	r3, #1
 801dca4:	b29a      	uxth	r2, r3
 801dca6:	4b09      	ldr	r3, [pc, #36]	@ (801dccc <etharp_raw+0x128>)
 801dca8:	831a      	strh	r2, [r3, #24]
  /* free ARP query packet */
  pbuf_free(p);
 801dcaa:	69b8      	ldr	r0, [r7, #24]
 801dcac:	f7f7 f8da 	bl	8014e64 <pbuf_free>
  p = NULL;
 801dcb0:	2300      	movs	r3, #0
 801dcb2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801dcb4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801dcb8:	4618      	mov	r0, r3
 801dcba:	3720      	adds	r7, #32
 801dcbc:	46bd      	mov	sp, r7
 801dcbe:	bd80      	pop	{r7, pc}
 801dcc0:	08025d48 	.word	0x08025d48
 801dcc4:	08025e98 	.word	0x08025e98
 801dcc8:	08025dc0 	.word	0x08025dc0
 801dccc:	2002d36c 	.word	0x2002d36c
 801dcd0:	08025f48 	.word	0x08025f48
 801dcd4:	08025f7c 	.word	0x08025f7c

0801dcd8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801dcd8:	b580      	push	{r7, lr}
 801dcda:	b088      	sub	sp, #32
 801dcdc:	af04      	add	r7, sp, #16
 801dcde:	60f8      	str	r0, [r7, #12]
 801dce0:	60b9      	str	r1, [r7, #8]
 801dce2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dce4:	68fb      	ldr	r3, [r7, #12]
 801dce6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801dcea:	68fb      	ldr	r3, [r7, #12]
 801dcec:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801dcf4:	2201      	movs	r2, #1
 801dcf6:	9203      	str	r2, [sp, #12]
 801dcf8:	68ba      	ldr	r2, [r7, #8]
 801dcfa:	9202      	str	r2, [sp, #8]
 801dcfc:	4a06      	ldr	r2, [pc, #24]	@ (801dd18 <etharp_request_dst+0x40>)
 801dcfe:	9201      	str	r2, [sp, #4]
 801dd00:	9300      	str	r3, [sp, #0]
 801dd02:	4603      	mov	r3, r0
 801dd04:	687a      	ldr	r2, [r7, #4]
 801dd06:	68f8      	ldr	r0, [r7, #12]
 801dd08:	f7ff ff4c 	bl	801dba4 <etharp_raw>
 801dd0c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801dd0e:	4618      	mov	r0, r3
 801dd10:	3710      	adds	r7, #16
 801dd12:	46bd      	mov	sp, r7
 801dd14:	bd80      	pop	{r7, pc}
 801dd16:	bf00      	nop
 801dd18:	08026dc8 	.word	0x08026dc8

0801dd1c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801dd1c:	b580      	push	{r7, lr}
 801dd1e:	b082      	sub	sp, #8
 801dd20:	af00      	add	r7, sp, #0
 801dd22:	6078      	str	r0, [r7, #4]
 801dd24:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801dd26:	4a05      	ldr	r2, [pc, #20]	@ (801dd3c <etharp_request+0x20>)
 801dd28:	6839      	ldr	r1, [r7, #0]
 801dd2a:	6878      	ldr	r0, [r7, #4]
 801dd2c:	f7ff ffd4 	bl	801dcd8 <etharp_request_dst>
 801dd30:	4603      	mov	r3, r0
}
 801dd32:	4618      	mov	r0, r3
 801dd34:	3708      	adds	r7, #8
 801dd36:	46bd      	mov	sp, r7
 801dd38:	bd80      	pop	{r7, pc}
 801dd3a:	bf00      	nop
 801dd3c:	08026dc0 	.word	0x08026dc0

0801dd40 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801dd40:	b580      	push	{r7, lr}
 801dd42:	b08e      	sub	sp, #56	@ 0x38
 801dd44:	af04      	add	r7, sp, #16
 801dd46:	6078      	str	r0, [r7, #4]
 801dd48:	6039      	str	r1, [r7, #0]
  struct icmp_echo_hdr *iecho;
  const struct ip_hdr *iphdr_in;
  u16_t hlen;
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
 801dd4a:	4ba5      	ldr	r3, [pc, #660]	@ (801dfe0 <icmp_input+0x2a0>)
 801dd4c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 801dd50:	3301      	adds	r3, #1
 801dd52:	b29a      	uxth	r2, r3
 801dd54:	4ba2      	ldr	r3, [pc, #648]	@ (801dfe0 <icmp_input+0x2a0>)
 801dd56:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801dd5a:	4ba2      	ldr	r3, [pc, #648]	@ (801dfe4 <icmp_input+0x2a4>)
 801dd5c:	689b      	ldr	r3, [r3, #8]
 801dd5e:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801dd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801dd62:	781b      	ldrb	r3, [r3, #0]
 801dd64:	f003 030f 	and.w	r3, r3, #15
 801dd68:	b2db      	uxtb	r3, r3
 801dd6a:	009b      	lsls	r3, r3, #2
 801dd6c:	b2db      	uxtb	r3, r3
 801dd6e:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801dd70:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dd72:	2b13      	cmp	r3, #19
 801dd74:	d805      	bhi.n	801dd82 <icmp_input+0x42>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 801dd76:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801dd78:	4619      	mov	r1, r3
 801dd7a:	489b      	ldr	r0, [pc, #620]	@ (801dfe8 <icmp_input+0x2a8>)
 801dd7c:	f003 f8aa 	bl	8020ed4 <iprintf>
    goto lenerr;
 801dd80:	e122      	b.n	801dfc8 <icmp_input+0x288>
  }
  if (p->len < sizeof(u16_t) * 2) {
 801dd82:	687b      	ldr	r3, [r7, #4]
 801dd84:	895b      	ldrh	r3, [r3, #10]
 801dd86:	2b03      	cmp	r3, #3
 801dd88:	d806      	bhi.n	801dd98 <icmp_input+0x58>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801dd8a:	687b      	ldr	r3, [r7, #4]
 801dd8c:	891b      	ldrh	r3, [r3, #8]
 801dd8e:	4619      	mov	r1, r3
 801dd90:	4896      	ldr	r0, [pc, #600]	@ (801dfec <icmp_input+0x2ac>)
 801dd92:	f003 f89f 	bl	8020ed4 <iprintf>
    goto lenerr;
 801dd96:	e117      	b.n	801dfc8 <icmp_input+0x288>
  }

  type = *((u8_t *)p->payload);
 801dd98:	687b      	ldr	r3, [r7, #4]
 801dd9a:	685b      	ldr	r3, [r3, #4]
 801dd9c:	781b      	ldrb	r3, [r3, #0]
 801dd9e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801dda2:	687b      	ldr	r3, [r7, #4]
 801dda4:	685b      	ldr	r3, [r3, #4]
 801dda6:	785b      	ldrb	r3, [r3, #1]
 801dda8:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801ddac:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801ddb0:	2b00      	cmp	r3, #0
 801ddb2:	f000 8102 	beq.w	801dfba <icmp_input+0x27a>
 801ddb6:	2b08      	cmp	r3, #8
 801ddb8:	f040 80e6 	bne.w	801df88 <icmp_input+0x248>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801ddbc:	4b8c      	ldr	r3, [pc, #560]	@ (801dff0 <icmp_input+0x2b0>)
 801ddbe:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ddc0:	4b88      	ldr	r3, [pc, #544]	@ (801dfe4 <icmp_input+0x2a4>)
 801ddc2:	695b      	ldr	r3, [r3, #20]
 801ddc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ddc8:	2be0      	cmp	r3, #224	@ 0xe0
 801ddca:	d103      	bne.n	801ddd4 <icmp_input+0x94>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 801ddcc:	4889      	ldr	r0, [pc, #548]	@ (801dff4 <icmp_input+0x2b4>)
 801ddce:	f003 f8f1 	bl	8020fb4 <puts>
        goto icmperr;
 801ddd2:	e12d      	b.n	801e030 <icmp_input+0x2f0>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801ddd4:	4b83      	ldr	r3, [pc, #524]	@ (801dfe4 <icmp_input+0x2a4>)
 801ddd6:	695b      	ldr	r3, [r3, #20]
 801ddd8:	4a82      	ldr	r2, [pc, #520]	@ (801dfe4 <icmp_input+0x2a4>)
 801ddda:	6812      	ldr	r2, [r2, #0]
 801dddc:	4611      	mov	r1, r2
 801ddde:	4618      	mov	r0, r3
 801dde0:	f000 fd14 	bl	801e80c <ip4_addr_isbroadcast_u32>
 801dde4:	4603      	mov	r3, r0
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d003      	beq.n	801ddf2 <icmp_input+0xb2>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 801ddea:	4883      	ldr	r0, [pc, #524]	@ (801dff8 <icmp_input+0x2b8>)
 801ddec:	f003 f8e2 	bl	8020fb4 <puts>
        goto icmperr;
 801ddf0:	e11e      	b.n	801e030 <icmp_input+0x2f0>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 801ddf2:	4882      	ldr	r0, [pc, #520]	@ (801dffc <icmp_input+0x2bc>)
 801ddf4:	f003 f8de 	bl	8020fb4 <puts>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801ddf8:	687b      	ldr	r3, [r7, #4]
 801ddfa:	891b      	ldrh	r3, [r3, #8]
 801ddfc:	2b07      	cmp	r3, #7
 801ddfe:	d803      	bhi.n	801de08 <icmp_input+0xc8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 801de00:	487f      	ldr	r0, [pc, #508]	@ (801e000 <icmp_input+0x2c0>)
 801de02:	f003 f8d7 	bl	8020fb4 <puts>
        goto lenerr;
 801de06:	e0df      	b.n	801dfc8 <icmp_input+0x288>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801de08:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801de0a:	330e      	adds	r3, #14
 801de0c:	4619      	mov	r1, r3
 801de0e:	6878      	ldr	r0, [r7, #4]
 801de10:	f7f6 ff8a 	bl	8014d28 <pbuf_add_header>
 801de14:	4603      	mov	r3, r0
 801de16:	2b00      	cmp	r3, #0
 801de18:	d057      	beq.n	801deca <icmp_input+0x18a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	891a      	ldrh	r2, [r3, #8]
 801de1e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801de20:	4413      	add	r3, r2
 801de22:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	891b      	ldrh	r3, [r3, #8]
 801de28:	8b7a      	ldrh	r2, [r7, #26]
 801de2a:	429a      	cmp	r2, r3
 801de2c:	d203      	bcs.n	801de36 <icmp_input+0xf6>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 801de2e:	4875      	ldr	r0, [pc, #468]	@ (801e004 <icmp_input+0x2c4>)
 801de30:	f003 f8c0 	bl	8020fb4 <puts>
          goto icmperr;
 801de34:	e0fc      	b.n	801e030 <icmp_input+0x2f0>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801de36:	8b7b      	ldrh	r3, [r7, #26]
 801de38:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801de3c:	4619      	mov	r1, r3
 801de3e:	200e      	movs	r0, #14
 801de40:	f7f6 fce4 	bl	801480c <pbuf_alloc>
 801de44:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801de46:	697b      	ldr	r3, [r7, #20]
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d103      	bne.n	801de54 <icmp_input+0x114>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 801de4c:	486e      	ldr	r0, [pc, #440]	@ (801e008 <icmp_input+0x2c8>)
 801de4e:	f003 f8b1 	bl	8020fb4 <puts>
          goto icmperr;
 801de52:	e0ed      	b.n	801e030 <icmp_input+0x2f0>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801de54:	697b      	ldr	r3, [r7, #20]
 801de56:	895b      	ldrh	r3, [r3, #10]
 801de58:	461a      	mov	r2, r3
 801de5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801de5c:	3308      	adds	r3, #8
 801de5e:	429a      	cmp	r2, r3
 801de60:	d206      	bcs.n	801de70 <icmp_input+0x130>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801de62:	486a      	ldr	r0, [pc, #424]	@ (801e00c <icmp_input+0x2cc>)
 801de64:	f003 f836 	bl	8020ed4 <iprintf>
          pbuf_free(r);
 801de68:	6978      	ldr	r0, [r7, #20]
 801de6a:	f7f6 fffb 	bl	8014e64 <pbuf_free>
          goto icmperr;
 801de6e:	e0df      	b.n	801e030 <icmp_input+0x2f0>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801de70:	697b      	ldr	r3, [r7, #20]
 801de72:	685b      	ldr	r3, [r3, #4]
 801de74:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801de76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801de78:	4618      	mov	r0, r3
 801de7a:	f003 fa5e 	bl	802133a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801de7e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801de80:	4619      	mov	r1, r3
 801de82:	6978      	ldr	r0, [r7, #20]
 801de84:	f7f6 ff60 	bl	8014d48 <pbuf_remove_header>
 801de88:	4603      	mov	r3, r0
 801de8a:	2b00      	cmp	r3, #0
 801de8c:	d009      	beq.n	801dea2 <icmp_input+0x162>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801de8e:	4b60      	ldr	r3, [pc, #384]	@ (801e010 <icmp_input+0x2d0>)
 801de90:	22b6      	movs	r2, #182	@ 0xb6
 801de92:	4960      	ldr	r1, [pc, #384]	@ (801e014 <icmp_input+0x2d4>)
 801de94:	4860      	ldr	r0, [pc, #384]	@ (801e018 <icmp_input+0x2d8>)
 801de96:	f003 f81d 	bl	8020ed4 <iprintf>
          pbuf_free(r);
 801de9a:	6978      	ldr	r0, [r7, #20]
 801de9c:	f7f6 ffe2 	bl	8014e64 <pbuf_free>
          goto icmperr;
 801dea0:	e0c6      	b.n	801e030 <icmp_input+0x2f0>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801dea2:	6879      	ldr	r1, [r7, #4]
 801dea4:	6978      	ldr	r0, [r7, #20]
 801dea6:	f7f7 f931 	bl	801510c <pbuf_copy>
 801deaa:	4603      	mov	r3, r0
 801deac:	2b00      	cmp	r3, #0
 801deae:	d006      	beq.n	801debe <icmp_input+0x17e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 801deb0:	485a      	ldr	r0, [pc, #360]	@ (801e01c <icmp_input+0x2dc>)
 801deb2:	f003 f80f 	bl	8020ed4 <iprintf>
          pbuf_free(r);
 801deb6:	6978      	ldr	r0, [r7, #20]
 801deb8:	f7f6 ffd4 	bl	8014e64 <pbuf_free>
          goto icmperr;
 801debc:	e0b8      	b.n	801e030 <icmp_input+0x2f0>
        }
        /* free the original p */
        pbuf_free(p);
 801debe:	6878      	ldr	r0, [r7, #4]
 801dec0:	f7f6 ffd0 	bl	8014e64 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801dec4:	697b      	ldr	r3, [r7, #20]
 801dec6:	607b      	str	r3, [r7, #4]
 801dec8:	e00f      	b.n	801deea <icmp_input+0x1aa>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801deca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801decc:	330e      	adds	r3, #14
 801dece:	4619      	mov	r1, r3
 801ded0:	6878      	ldr	r0, [r7, #4]
 801ded2:	f7f6 ff39 	bl	8014d48 <pbuf_remove_header>
 801ded6:	4603      	mov	r3, r0
 801ded8:	2b00      	cmp	r3, #0
 801deda:	d006      	beq.n	801deea <icmp_input+0x1aa>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801dedc:	4b4c      	ldr	r3, [pc, #304]	@ (801e010 <icmp_input+0x2d0>)
 801dede:	22c7      	movs	r2, #199	@ 0xc7
 801dee0:	494f      	ldr	r1, [pc, #316]	@ (801e020 <icmp_input+0x2e0>)
 801dee2:	484d      	ldr	r0, [pc, #308]	@ (801e018 <icmp_input+0x2d8>)
 801dee4:	f002 fff6 	bl	8020ed4 <iprintf>
          goto icmperr;
 801dee8:	e0a2      	b.n	801e030 <icmp_input+0x2f0>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801deea:	687b      	ldr	r3, [r7, #4]
 801deec:	685b      	ldr	r3, [r3, #4]
 801deee:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801def0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801def2:	4619      	mov	r1, r3
 801def4:	6878      	ldr	r0, [r7, #4]
 801def6:	f7f6 ff17 	bl	8014d28 <pbuf_add_header>
 801defa:	4603      	mov	r3, r0
 801defc:	2b00      	cmp	r3, #0
 801defe:	d003      	beq.n	801df08 <icmp_input+0x1c8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 801df00:	4848      	ldr	r0, [pc, #288]	@ (801e024 <icmp_input+0x2e4>)
 801df02:	f002 ffe7 	bl	8020ed4 <iprintf>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801df06:	e05a      	b.n	801dfbe <icmp_input+0x27e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801df08:	687b      	ldr	r3, [r7, #4]
 801df0a:	685b      	ldr	r3, [r3, #4]
 801df0c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801df0e:	69fb      	ldr	r3, [r7, #28]
 801df10:	681a      	ldr	r2, [r3, #0]
 801df12:	68fb      	ldr	r3, [r7, #12]
 801df14:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801df16:	4b33      	ldr	r3, [pc, #204]	@ (801dfe4 <icmp_input+0x2a4>)
 801df18:	691a      	ldr	r2, [r3, #16]
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801df1e:	693b      	ldr	r3, [r7, #16]
 801df20:	2200      	movs	r2, #0
 801df22:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 801df24:	693b      	ldr	r3, [r7, #16]
 801df26:	2200      	movs	r2, #0
 801df28:	709a      	strb	r2, [r3, #2]
 801df2a:	2200      	movs	r2, #0
 801df2c:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	22ff      	movs	r2, #255	@ 0xff
 801df32:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	2200      	movs	r2, #0
 801df38:	729a      	strb	r2, [r3, #10]
 801df3a:	2200      	movs	r2, #0
 801df3c:	72da      	strb	r2, [r3, #11]
        ICMP_STATS_INC(icmp.xmit);
 801df3e:	4b28      	ldr	r3, [pc, #160]	@ (801dfe0 <icmp_input+0x2a0>)
 801df40:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801df44:	3301      	adds	r3, #1
 801df46:	b29a      	uxth	r2, r3
 801df48:	4b25      	ldr	r3, [pc, #148]	@ (801dfe0 <icmp_input+0x2a0>)
 801df4a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801df4e:	683b      	ldr	r3, [r7, #0]
 801df50:	9302      	str	r3, [sp, #8]
 801df52:	2301      	movs	r3, #1
 801df54:	9301      	str	r3, [sp, #4]
 801df56:	2300      	movs	r3, #0
 801df58:	9300      	str	r3, [sp, #0]
 801df5a:	23ff      	movs	r3, #255	@ 0xff
 801df5c:	2200      	movs	r2, #0
 801df5e:	69f9      	ldr	r1, [r7, #28]
 801df60:	6878      	ldr	r0, [r7, #4]
 801df62:	f000 fb61 	bl	801e628 <ip4_output_if>
 801df66:	4603      	mov	r3, r0
 801df68:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 801df6a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801df6e:	2b00      	cmp	r3, #0
 801df70:	d025      	beq.n	801dfbe <icmp_input+0x27e>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801df72:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801df76:	4618      	mov	r0, r3
 801df78:	f7f4 fea6 	bl	8012cc8 <lwip_strerr>
 801df7c:	4603      	mov	r3, r0
 801df7e:	4619      	mov	r1, r3
 801df80:	4829      	ldr	r0, [pc, #164]	@ (801e028 <icmp_input+0x2e8>)
 801df82:	f002 ffa7 	bl	8020ed4 <iprintf>
      break;
 801df86:	e01a      	b.n	801dfbe <icmp_input+0x27e>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 801df88:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801df8c:	f897 2020 	ldrb.w	r2, [r7, #32]
 801df90:	4619      	mov	r1, r3
 801df92:	4826      	ldr	r0, [pc, #152]	@ (801e02c <icmp_input+0x2ec>)
 801df94:	f002 ff9e 	bl	8020ed4 <iprintf>
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
 801df98:	4b11      	ldr	r3, [pc, #68]	@ (801dfe0 <icmp_input+0x2a0>)
 801df9a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801df9e:	3301      	adds	r3, #1
 801dfa0:	b29a      	uxth	r2, r3
 801dfa2:	4b0f      	ldr	r3, [pc, #60]	@ (801dfe0 <icmp_input+0x2a0>)
 801dfa4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
      ICMP_STATS_INC(icmp.drop);
 801dfa8:	4b0d      	ldr	r3, [pc, #52]	@ (801dfe0 <icmp_input+0x2a0>)
 801dfaa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801dfae:	3301      	adds	r3, #1
 801dfb0:	b29a      	uxth	r2, r3
 801dfb2:	4b0b      	ldr	r3, [pc, #44]	@ (801dfe0 <icmp_input+0x2a0>)
 801dfb4:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
 801dfb8:	e002      	b.n	801dfc0 <icmp_input+0x280>
      break;
 801dfba:	bf00      	nop
 801dfbc:	e000      	b.n	801dfc0 <icmp_input+0x280>
      break;
 801dfbe:	bf00      	nop
  }
  pbuf_free(p);
 801dfc0:	6878      	ldr	r0, [r7, #4]
 801dfc2:	f7f6 ff4f 	bl	8014e64 <pbuf_free>
  return;
 801dfc6:	e03f      	b.n	801e048 <icmp_input+0x308>
lenerr:
  pbuf_free(p);
 801dfc8:	6878      	ldr	r0, [r7, #4]
 801dfca:	f7f6 ff4b 	bl	8014e64 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 801dfce:	4b04      	ldr	r3, [pc, #16]	@ (801dfe0 <icmp_input+0x2a0>)
 801dfd0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801dfd4:	3301      	adds	r3, #1
 801dfd6:	b29a      	uxth	r2, r3
 801dfd8:	4b01      	ldr	r3, [pc, #4]	@ (801dfe0 <icmp_input+0x2a0>)
 801dfda:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801dfde:	e033      	b.n	801e048 <icmp_input+0x308>
 801dfe0:	2002d36c 	.word	0x2002d36c
 801dfe4:	200270fc 	.word	0x200270fc
 801dfe8:	08025fc0 	.word	0x08025fc0
 801dfec:	08025ff4 	.word	0x08025ff4
 801dff0:	20027110 	.word	0x20027110
 801dff4:	08026024 	.word	0x08026024
 801dff8:	08026050 	.word	0x08026050
 801dffc:	0802607c 	.word	0x0802607c
 801e000:	08026090 	.word	0x08026090
 801e004:	080260b4 	.word	0x080260b4
 801e008:	080260f0 	.word	0x080260f0
 801e00c:	08026118 	.word	0x08026118
 801e010:	08026140 	.word	0x08026140
 801e014:	08026178 	.word	0x08026178
 801e018:	080261b0 	.word	0x080261b0
 801e01c:	080261d8 	.word	0x080261d8
 801e020:	08026200 	.word	0x08026200
 801e024:	08026234 	.word	0x08026234
 801e028:	08026258 	.word	0x08026258
 801e02c:	08026288 	.word	0x08026288
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e030:	6878      	ldr	r0, [r7, #4]
 801e032:	f7f6 ff17 	bl	8014e64 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 801e036:	4b06      	ldr	r3, [pc, #24]	@ (801e050 <icmp_input+0x310>)
 801e038:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801e03c:	3301      	adds	r3, #1
 801e03e:	b29a      	uxth	r2, r3
 801e040:	4b03      	ldr	r3, [pc, #12]	@ (801e050 <icmp_input+0x310>)
 801e042:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e046:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e048:	3728      	adds	r7, #40	@ 0x28
 801e04a:	46bd      	mov	sp, r7
 801e04c:	bd80      	pop	{r7, pc}
 801e04e:	bf00      	nop
 801e050:	2002d36c 	.word	0x2002d36c

0801e054 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e054:	b580      	push	{r7, lr}
 801e056:	b082      	sub	sp, #8
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
 801e05c:	460b      	mov	r3, r1
 801e05e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e060:	78fb      	ldrb	r3, [r7, #3]
 801e062:	461a      	mov	r2, r3
 801e064:	2103      	movs	r1, #3
 801e066:	6878      	ldr	r0, [r7, #4]
 801e068:	f000 f814 	bl	801e094 <icmp_send_response>
}
 801e06c:	bf00      	nop
 801e06e:	3708      	adds	r7, #8
 801e070:	46bd      	mov	sp, r7
 801e072:	bd80      	pop	{r7, pc}

0801e074 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e074:	b580      	push	{r7, lr}
 801e076:	b082      	sub	sp, #8
 801e078:	af00      	add	r7, sp, #0
 801e07a:	6078      	str	r0, [r7, #4]
 801e07c:	460b      	mov	r3, r1
 801e07e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e080:	78fb      	ldrb	r3, [r7, #3]
 801e082:	461a      	mov	r2, r3
 801e084:	210b      	movs	r1, #11
 801e086:	6878      	ldr	r0, [r7, #4]
 801e088:	f000 f804 	bl	801e094 <icmp_send_response>
}
 801e08c:	bf00      	nop
 801e08e:	3708      	adds	r7, #8
 801e090:	46bd      	mov	sp, r7
 801e092:	bd80      	pop	{r7, pc}

0801e094 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e094:	b580      	push	{r7, lr}
 801e096:	b08c      	sub	sp, #48	@ 0x30
 801e098:	af04      	add	r7, sp, #16
 801e09a:	6078      	str	r0, [r7, #4]
 801e09c:	460b      	mov	r3, r1
 801e09e:	70fb      	strb	r3, [r7, #3]
 801e0a0:	4613      	mov	r3, r2
 801e0a2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e0a4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801e0a8:	2124      	movs	r1, #36	@ 0x24
 801e0aa:	2022      	movs	r0, #34	@ 0x22
 801e0ac:	f7f6 fbae 	bl	801480c <pbuf_alloc>
 801e0b0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e0b2:	69fb      	ldr	r3, [r7, #28]
 801e0b4:	2b00      	cmp	r3, #0
 801e0b6:	d103      	bne.n	801e0c0 <icmp_send_response+0x2c>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 801e0b8:	4848      	ldr	r0, [pc, #288]	@ (801e1dc <icmp_send_response+0x148>)
 801e0ba:	f002 ff7b 	bl	8020fb4 <puts>
 801e0be:	e08a      	b.n	801e1d6 <icmp_send_response+0x142>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e0c0:	69fb      	ldr	r3, [r7, #28]
 801e0c2:	895b      	ldrh	r3, [r3, #10]
 801e0c4:	2b23      	cmp	r3, #35	@ 0x23
 801e0c6:	d806      	bhi.n	801e0d6 <icmp_send_response+0x42>
 801e0c8:	4b45      	ldr	r3, [pc, #276]	@ (801e1e0 <icmp_send_response+0x14c>)
 801e0ca:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801e0ce:	4945      	ldr	r1, [pc, #276]	@ (801e1e4 <icmp_send_response+0x150>)
 801e0d0:	4845      	ldr	r0, [pc, #276]	@ (801e1e8 <icmp_send_response+0x154>)
 801e0d2:	f002 feff 	bl	8020ed4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	685b      	ldr	r3, [r3, #4]
 801e0da:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 801e0dc:	4843      	ldr	r0, [pc, #268]	@ (801e1ec <icmp_send_response+0x158>)
 801e0de:	f002 fef9 	bl	8020ed4 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 801e0e2:	69bb      	ldr	r3, [r7, #24]
 801e0e4:	68db      	ldr	r3, [r3, #12]
 801e0e6:	b2db      	uxtb	r3, r3
 801e0e8:	4619      	mov	r1, r3
 801e0ea:	69bb      	ldr	r3, [r7, #24]
 801e0ec:	68db      	ldr	r3, [r3, #12]
 801e0ee:	0a1b      	lsrs	r3, r3, #8
 801e0f0:	b2db      	uxtb	r3, r3
 801e0f2:	461a      	mov	r2, r3
 801e0f4:	69bb      	ldr	r3, [r7, #24]
 801e0f6:	68db      	ldr	r3, [r3, #12]
 801e0f8:	0c1b      	lsrs	r3, r3, #16
 801e0fa:	b2db      	uxtb	r3, r3
 801e0fc:	4618      	mov	r0, r3
 801e0fe:	69bb      	ldr	r3, [r7, #24]
 801e100:	68db      	ldr	r3, [r3, #12]
 801e102:	0e1b      	lsrs	r3, r3, #24
 801e104:	b2db      	uxtb	r3, r3
 801e106:	9300      	str	r3, [sp, #0]
 801e108:	4603      	mov	r3, r0
 801e10a:	4839      	ldr	r0, [pc, #228]	@ (801e1f0 <icmp_send_response+0x15c>)
 801e10c:	f002 fee2 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 801e110:	4838      	ldr	r0, [pc, #224]	@ (801e1f4 <icmp_send_response+0x160>)
 801e112:	f002 fedf 	bl	8020ed4 <iprintf>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 801e116:	69bb      	ldr	r3, [r7, #24]
 801e118:	691b      	ldr	r3, [r3, #16]
 801e11a:	b2db      	uxtb	r3, r3
 801e11c:	4619      	mov	r1, r3
 801e11e:	69bb      	ldr	r3, [r7, #24]
 801e120:	691b      	ldr	r3, [r3, #16]
 801e122:	0a1b      	lsrs	r3, r3, #8
 801e124:	b2db      	uxtb	r3, r3
 801e126:	461a      	mov	r2, r3
 801e128:	69bb      	ldr	r3, [r7, #24]
 801e12a:	691b      	ldr	r3, [r3, #16]
 801e12c:	0c1b      	lsrs	r3, r3, #16
 801e12e:	b2db      	uxtb	r3, r3
 801e130:	4618      	mov	r0, r3
 801e132:	69bb      	ldr	r3, [r7, #24]
 801e134:	691b      	ldr	r3, [r3, #16]
 801e136:	0e1b      	lsrs	r3, r3, #24
 801e138:	b2db      	uxtb	r3, r3
 801e13a:	9300      	str	r3, [sp, #0]
 801e13c:	4603      	mov	r3, r0
 801e13e:	482c      	ldr	r0, [pc, #176]	@ (801e1f0 <icmp_send_response+0x15c>)
 801e140:	f002 fec8 	bl	8020ed4 <iprintf>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 801e144:	200a      	movs	r0, #10
 801e146:	f002 fed7 	bl	8020ef8 <putchar>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e14a:	69fb      	ldr	r3, [r7, #28]
 801e14c:	685b      	ldr	r3, [r3, #4]
 801e14e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e150:	697b      	ldr	r3, [r7, #20]
 801e152:	78fa      	ldrb	r2, [r7, #3]
 801e154:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e156:	697b      	ldr	r3, [r7, #20]
 801e158:	78ba      	ldrb	r2, [r7, #2]
 801e15a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e15c:	697b      	ldr	r3, [r7, #20]
 801e15e:	2200      	movs	r2, #0
 801e160:	711a      	strb	r2, [r3, #4]
 801e162:	2200      	movs	r2, #0
 801e164:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e166:	697b      	ldr	r3, [r7, #20]
 801e168:	2200      	movs	r2, #0
 801e16a:	719a      	strb	r2, [r3, #6]
 801e16c:	2200      	movs	r2, #0
 801e16e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e170:	69fb      	ldr	r3, [r7, #28]
 801e172:	685b      	ldr	r3, [r3, #4]
 801e174:	f103 0008 	add.w	r0, r3, #8
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	685b      	ldr	r3, [r3, #4]
 801e17c:	221c      	movs	r2, #28
 801e17e:	4619      	mov	r1, r3
 801e180:	f003 f8db 	bl	802133a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e184:	69bb      	ldr	r3, [r7, #24]
 801e186:	68db      	ldr	r3, [r3, #12]
 801e188:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e18a:	f107 030c 	add.w	r3, r7, #12
 801e18e:	4618      	mov	r0, r3
 801e190:	f000 f834 	bl	801e1fc <ip4_route>
 801e194:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e196:	693b      	ldr	r3, [r7, #16]
 801e198:	2b00      	cmp	r3, #0
 801e19a:	d019      	beq.n	801e1d0 <icmp_send_response+0x13c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e19c:	697b      	ldr	r3, [r7, #20]
 801e19e:	2200      	movs	r2, #0
 801e1a0:	709a      	strb	r2, [r3, #2]
 801e1a2:	2200      	movs	r2, #0
 801e1a4:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 801e1a6:	4b14      	ldr	r3, [pc, #80]	@ (801e1f8 <icmp_send_response+0x164>)
 801e1a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801e1ac:	3301      	adds	r3, #1
 801e1ae:	b29a      	uxth	r2, r3
 801e1b0:	4b11      	ldr	r3, [pc, #68]	@ (801e1f8 <icmp_send_response+0x164>)
 801e1b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e1b6:	f107 020c 	add.w	r2, r7, #12
 801e1ba:	693b      	ldr	r3, [r7, #16]
 801e1bc:	9302      	str	r3, [sp, #8]
 801e1be:	2301      	movs	r3, #1
 801e1c0:	9301      	str	r3, [sp, #4]
 801e1c2:	2300      	movs	r3, #0
 801e1c4:	9300      	str	r3, [sp, #0]
 801e1c6:	23ff      	movs	r3, #255	@ 0xff
 801e1c8:	2100      	movs	r1, #0
 801e1ca:	69f8      	ldr	r0, [r7, #28]
 801e1cc:	f000 fa2c 	bl	801e628 <ip4_output_if>
  }
  pbuf_free(q);
 801e1d0:	69f8      	ldr	r0, [r7, #28]
 801e1d2:	f7f6 fe47 	bl	8014e64 <pbuf_free>
}
 801e1d6:	3720      	adds	r7, #32
 801e1d8:	46bd      	mov	sp, r7
 801e1da:	bd80      	pop	{r7, pc}
 801e1dc:	080262bc 	.word	0x080262bc
 801e1e0:	08026140 	.word	0x08026140
 801e1e4:	080262fc 	.word	0x080262fc
 801e1e8:	080261b0 	.word	0x080261b0
 801e1ec:	08026328 	.word	0x08026328
 801e1f0:	08026344 	.word	0x08026344
 801e1f4:	08026354 	.word	0x08026354
 801e1f8:	2002d36c 	.word	0x2002d36c

0801e1fc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801e1fc:	b480      	push	{r7}
 801e1fe:	b085      	sub	sp, #20
 801e200:	af00      	add	r7, sp, #0
 801e202:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801e204:	4b37      	ldr	r3, [pc, #220]	@ (801e2e4 <ip4_route+0xe8>)
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	60fb      	str	r3, [r7, #12]
 801e20a:	e036      	b.n	801e27a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e20c:	68fb      	ldr	r3, [r7, #12]
 801e20e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e212:	f003 0301 	and.w	r3, r3, #1
 801e216:	b2db      	uxtb	r3, r3
 801e218:	2b00      	cmp	r3, #0
 801e21a:	d02b      	beq.n	801e274 <ip4_route+0x78>
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e222:	089b      	lsrs	r3, r3, #2
 801e224:	f003 0301 	and.w	r3, r3, #1
 801e228:	b2db      	uxtb	r3, r3
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d022      	beq.n	801e274 <ip4_route+0x78>
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	3304      	adds	r3, #4
 801e232:	681b      	ldr	r3, [r3, #0]
 801e234:	2b00      	cmp	r3, #0
 801e236:	d01d      	beq.n	801e274 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	681a      	ldr	r2, [r3, #0]
 801e23c:	68fb      	ldr	r3, [r7, #12]
 801e23e:	3304      	adds	r3, #4
 801e240:	681b      	ldr	r3, [r3, #0]
 801e242:	405a      	eors	r2, r3
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	3308      	adds	r3, #8
 801e248:	681b      	ldr	r3, [r3, #0]
 801e24a:	4013      	ands	r3, r2
 801e24c:	2b00      	cmp	r3, #0
 801e24e:	d101      	bne.n	801e254 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	e040      	b.n	801e2d6 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e254:	68fb      	ldr	r3, [r7, #12]
 801e256:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e25a:	f003 0302 	and.w	r3, r3, #2
 801e25e:	2b00      	cmp	r3, #0
 801e260:	d108      	bne.n	801e274 <ip4_route+0x78>
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	681a      	ldr	r2, [r3, #0]
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	330c      	adds	r3, #12
 801e26a:	681b      	ldr	r3, [r3, #0]
 801e26c:	429a      	cmp	r2, r3
 801e26e:	d101      	bne.n	801e274 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801e270:	68fb      	ldr	r3, [r7, #12]
 801e272:	e030      	b.n	801e2d6 <ip4_route+0xda>
  NETIF_FOREACH(netif) {
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	681b      	ldr	r3, [r3, #0]
 801e278:	60fb      	str	r3, [r7, #12]
 801e27a:	68fb      	ldr	r3, [r7, #12]
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d1c5      	bne.n	801e20c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e280:	4b19      	ldr	r3, [pc, #100]	@ (801e2e8 <ip4_route+0xec>)
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	2b00      	cmp	r3, #0
 801e286:	d01a      	beq.n	801e2be <ip4_route+0xc2>
 801e288:	4b17      	ldr	r3, [pc, #92]	@ (801e2e8 <ip4_route+0xec>)
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e290:	f003 0301 	and.w	r3, r3, #1
 801e294:	2b00      	cmp	r3, #0
 801e296:	d012      	beq.n	801e2be <ip4_route+0xc2>
 801e298:	4b13      	ldr	r3, [pc, #76]	@ (801e2e8 <ip4_route+0xec>)
 801e29a:	681b      	ldr	r3, [r3, #0]
 801e29c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e2a0:	f003 0304 	and.w	r3, r3, #4
 801e2a4:	2b00      	cmp	r3, #0
 801e2a6:	d00a      	beq.n	801e2be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e2a8:	4b0f      	ldr	r3, [pc, #60]	@ (801e2e8 <ip4_route+0xec>)
 801e2aa:	681b      	ldr	r3, [r3, #0]
 801e2ac:	3304      	adds	r3, #4
 801e2ae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d004      	beq.n	801e2be <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e2b4:	687b      	ldr	r3, [r7, #4]
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	b2db      	uxtb	r3, r3
 801e2ba:	2b7f      	cmp	r3, #127	@ 0x7f
 801e2bc:	d109      	bne.n	801e2d2 <ip4_route+0xd6>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
 801e2be:	4b0b      	ldr	r3, [pc, #44]	@ (801e2ec <ip4_route+0xf0>)
 801e2c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 801e2c4:	3301      	adds	r3, #1
 801e2c6:	b29a      	uxth	r2, r3
 801e2c8:	4b08      	ldr	r3, [pc, #32]	@ (801e2ec <ip4_route+0xf0>)
 801e2ca:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801e2ce:	2300      	movs	r3, #0
 801e2d0:	e001      	b.n	801e2d6 <ip4_route+0xda>
  }

  return netif_default;
 801e2d2:	4b05      	ldr	r3, [pc, #20]	@ (801e2e8 <ip4_route+0xec>)
 801e2d4:	681b      	ldr	r3, [r3, #0]
}
 801e2d6:	4618      	mov	r0, r3
 801e2d8:	3714      	adds	r7, #20
 801e2da:	46bd      	mov	sp, r7
 801e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2e0:	4770      	bx	lr
 801e2e2:	bf00      	nop
 801e2e4:	2002d360 	.word	0x2002d360
 801e2e8:	2002d364 	.word	0x2002d364
 801e2ec:	2002d36c 	.word	0x2002d36c

0801e2f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e2f0:	b580      	push	{r7, lr}
 801e2f2:	b082      	sub	sp, #8
 801e2f4:	af00      	add	r7, sp, #0
 801e2f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e2f8:	687b      	ldr	r3, [r7, #4]
 801e2fa:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e2fe:	f003 0301 	and.w	r3, r3, #1
 801e302:	b2db      	uxtb	r3, r3
 801e304:	2b00      	cmp	r3, #0
 801e306:	d016      	beq.n	801e336 <ip4_input_accept+0x46>
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	3304      	adds	r3, #4
 801e30c:	681b      	ldr	r3, [r3, #0]
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d011      	beq.n	801e336 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e312:	4b0b      	ldr	r3, [pc, #44]	@ (801e340 <ip4_input_accept+0x50>)
 801e314:	695a      	ldr	r2, [r3, #20]
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	3304      	adds	r3, #4
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	429a      	cmp	r2, r3
 801e31e:	d008      	beq.n	801e332 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e320:	4b07      	ldr	r3, [pc, #28]	@ (801e340 <ip4_input_accept+0x50>)
 801e322:	695b      	ldr	r3, [r3, #20]
 801e324:	6879      	ldr	r1, [r7, #4]
 801e326:	4618      	mov	r0, r3
 801e328:	f000 fa70 	bl	801e80c <ip4_addr_isbroadcast_u32>
 801e32c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e32e:	2b00      	cmp	r3, #0
 801e330:	d001      	beq.n	801e336 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801e332:	2301      	movs	r3, #1
 801e334:	e000      	b.n	801e338 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801e336:	2300      	movs	r3, #0
}
 801e338:	4618      	mov	r0, r3
 801e33a:	3708      	adds	r7, #8
 801e33c:	46bd      	mov	sp, r7
 801e33e:	bd80      	pop	{r7, pc}
 801e340:	200270fc 	.word	0x200270fc

0801e344 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e344:	b580      	push	{r7, lr}
 801e346:	b086      	sub	sp, #24
 801e348:	af00      	add	r7, sp, #0
 801e34a:	6078      	str	r0, [r7, #4]
 801e34c:	6039      	str	r1, [r7, #0]
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 801e34e:	4b8f      	ldr	r3, [pc, #572]	@ (801e58c <ip4_input+0x248>)
 801e350:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801e354:	3301      	adds	r3, #1
 801e356:	b29a      	uxth	r2, r3
 801e358:	4b8c      	ldr	r3, [pc, #560]	@ (801e58c <ip4_input+0x248>)
 801e35a:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	685b      	ldr	r3, [r3, #4]
 801e362:	613b      	str	r3, [r7, #16]
  if (IPH_V(iphdr) != 4) {
 801e364:	693b      	ldr	r3, [r7, #16]
 801e366:	781b      	ldrb	r3, [r3, #0]
 801e368:	091b      	lsrs	r3, r3, #4
 801e36a:	b2db      	uxtb	r3, r3
 801e36c:	2b04      	cmp	r3, #4
 801e36e:	d014      	beq.n	801e39a <ip4_input+0x56>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e370:	6878      	ldr	r0, [r7, #4]
 801e372:	f7f6 fd77 	bl	8014e64 <pbuf_free>
    IP_STATS_INC(ip.err);
 801e376:	4b85      	ldr	r3, [pc, #532]	@ (801e58c <ip4_input+0x248>)
 801e378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e37c:	3301      	adds	r3, #1
 801e37e:	b29a      	uxth	r2, r3
 801e380:	4b82      	ldr	r3, [pc, #520]	@ (801e58c <ip4_input+0x248>)
 801e382:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    IP_STATS_INC(ip.drop);
 801e386:	4b81      	ldr	r3, [pc, #516]	@ (801e58c <ip4_input+0x248>)
 801e388:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e38c:	3301      	adds	r3, #1
 801e38e:	b29a      	uxth	r2, r3
 801e390:	4b7e      	ldr	r3, [pc, #504]	@ (801e58c <ip4_input+0x248>)
 801e392:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801e396:	2300      	movs	r3, #0
 801e398:	e13e      	b.n	801e618 <ip4_input+0x2d4>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e39a:	693b      	ldr	r3, [r7, #16]
 801e39c:	781b      	ldrb	r3, [r3, #0]
 801e39e:	f003 030f 	and.w	r3, r3, #15
 801e3a2:	b2db      	uxtb	r3, r3
 801e3a4:	009b      	lsls	r3, r3, #2
 801e3a6:	b2db      	uxtb	r3, r3
 801e3a8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e3aa:	693b      	ldr	r3, [r7, #16]
 801e3ac:	885b      	ldrh	r3, [r3, #2]
 801e3ae:	b29b      	uxth	r3, r3
 801e3b0:	4618      	mov	r0, r3
 801e3b2:	f7f4 ff29 	bl	8013208 <lwip_htons>
 801e3b6:	4603      	mov	r3, r0
 801e3b8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	891b      	ldrh	r3, [r3, #8]
 801e3be:	89ba      	ldrh	r2, [r7, #12]
 801e3c0:	429a      	cmp	r2, r3
 801e3c2:	d204      	bcs.n	801e3ce <ip4_input+0x8a>
    pbuf_realloc(p, iphdr_len);
 801e3c4:	89bb      	ldrh	r3, [r7, #12]
 801e3c6:	4619      	mov	r1, r3
 801e3c8:	6878      	ldr	r0, [r7, #4]
 801e3ca:	f7f6 fbab 	bl	8014b24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	895b      	ldrh	r3, [r3, #10]
 801e3d2:	89fa      	ldrh	r2, [r7, #14]
 801e3d4:	429a      	cmp	r2, r3
 801e3d6:	d807      	bhi.n	801e3e8 <ip4_input+0xa4>
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	891b      	ldrh	r3, [r3, #8]
 801e3dc:	89ba      	ldrh	r2, [r7, #12]
 801e3de:	429a      	cmp	r2, r3
 801e3e0:	d802      	bhi.n	801e3e8 <ip4_input+0xa4>
 801e3e2:	89fb      	ldrh	r3, [r7, #14]
 801e3e4:	2b13      	cmp	r3, #19
 801e3e6:	d814      	bhi.n	801e412 <ip4_input+0xce>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801e3e8:	6878      	ldr	r0, [r7, #4]
 801e3ea:	f7f6 fd3b 	bl	8014e64 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 801e3ee:	4b67      	ldr	r3, [pc, #412]	@ (801e58c <ip4_input+0x248>)
 801e3f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 801e3f4:	3301      	adds	r3, #1
 801e3f6:	b29a      	uxth	r2, r3
 801e3f8:	4b64      	ldr	r3, [pc, #400]	@ (801e58c <ip4_input+0x248>)
 801e3fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    IP_STATS_INC(ip.drop);
 801e3fe:	4b63      	ldr	r3, [pc, #396]	@ (801e58c <ip4_input+0x248>)
 801e400:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e404:	3301      	adds	r3, #1
 801e406:	b29a      	uxth	r2, r3
 801e408:	4b60      	ldr	r3, [pc, #384]	@ (801e58c <ip4_input+0x248>)
 801e40a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801e40e:	2300      	movs	r3, #0
 801e410:	e102      	b.n	801e618 <ip4_input+0x2d4>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e412:	693b      	ldr	r3, [r7, #16]
 801e414:	691b      	ldr	r3, [r3, #16]
 801e416:	4a5e      	ldr	r2, [pc, #376]	@ (801e590 <ip4_input+0x24c>)
 801e418:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e41a:	693b      	ldr	r3, [r7, #16]
 801e41c:	68db      	ldr	r3, [r3, #12]
 801e41e:	4a5c      	ldr	r2, [pc, #368]	@ (801e590 <ip4_input+0x24c>)
 801e420:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e422:	4b5b      	ldr	r3, [pc, #364]	@ (801e590 <ip4_input+0x24c>)
 801e424:	695b      	ldr	r3, [r3, #20]
 801e426:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801e42a:	2be0      	cmp	r3, #224	@ 0xe0
 801e42c:	d112      	bne.n	801e454 <ip4_input+0x110>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e42e:	683b      	ldr	r3, [r7, #0]
 801e430:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e434:	f003 0301 	and.w	r3, r3, #1
 801e438:	b2db      	uxtb	r3, r3
 801e43a:	2b00      	cmp	r3, #0
 801e43c:	d007      	beq.n	801e44e <ip4_input+0x10a>
 801e43e:	683b      	ldr	r3, [r7, #0]
 801e440:	3304      	adds	r3, #4
 801e442:	681b      	ldr	r3, [r3, #0]
 801e444:	2b00      	cmp	r3, #0
 801e446:	d002      	beq.n	801e44e <ip4_input+0x10a>
      netif = inp;
 801e448:	683b      	ldr	r3, [r7, #0]
 801e44a:	617b      	str	r3, [r7, #20]
 801e44c:	e02a      	b.n	801e4a4 <ip4_input+0x160>
    } else {
      netif = NULL;
 801e44e:	2300      	movs	r3, #0
 801e450:	617b      	str	r3, [r7, #20]
 801e452:	e027      	b.n	801e4a4 <ip4_input+0x160>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801e454:	6838      	ldr	r0, [r7, #0]
 801e456:	f7ff ff4b 	bl	801e2f0 <ip4_input_accept>
 801e45a:	4603      	mov	r3, r0
 801e45c:	2b00      	cmp	r3, #0
 801e45e:	d002      	beq.n	801e466 <ip4_input+0x122>
      netif = inp;
 801e460:	683b      	ldr	r3, [r7, #0]
 801e462:	617b      	str	r3, [r7, #20]
 801e464:	e01e      	b.n	801e4a4 <ip4_input+0x160>
    } else {
      netif = NULL;
 801e466:	2300      	movs	r3, #0
 801e468:	617b      	str	r3, [r7, #20]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e46a:	4b49      	ldr	r3, [pc, #292]	@ (801e590 <ip4_input+0x24c>)
 801e46c:	695b      	ldr	r3, [r3, #20]
 801e46e:	b2db      	uxtb	r3, r3
 801e470:	2b7f      	cmp	r3, #127	@ 0x7f
 801e472:	d017      	beq.n	801e4a4 <ip4_input+0x160>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801e474:	4b47      	ldr	r3, [pc, #284]	@ (801e594 <ip4_input+0x250>)
 801e476:	681b      	ldr	r3, [r3, #0]
 801e478:	617b      	str	r3, [r7, #20]
 801e47a:	e00e      	b.n	801e49a <ip4_input+0x156>
          if (netif == inp) {
 801e47c:	697a      	ldr	r2, [r7, #20]
 801e47e:	683b      	ldr	r3, [r7, #0]
 801e480:	429a      	cmp	r2, r3
 801e482:	d006      	beq.n	801e492 <ip4_input+0x14e>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801e484:	6978      	ldr	r0, [r7, #20]
 801e486:	f7ff ff33 	bl	801e2f0 <ip4_input_accept>
 801e48a:	4603      	mov	r3, r0
 801e48c:	2b00      	cmp	r3, #0
 801e48e:	d108      	bne.n	801e4a2 <ip4_input+0x15e>
 801e490:	e000      	b.n	801e494 <ip4_input+0x150>
            continue;
 801e492:	bf00      	nop
        NETIF_FOREACH(netif) {
 801e494:	697b      	ldr	r3, [r7, #20]
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	617b      	str	r3, [r7, #20]
 801e49a:	697b      	ldr	r3, [r7, #20]
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d1ed      	bne.n	801e47c <ip4_input+0x138>
 801e4a0:	e000      	b.n	801e4a4 <ip4_input+0x160>
            break;
 801e4a2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e4a4:	4b3a      	ldr	r3, [pc, #232]	@ (801e590 <ip4_input+0x24c>)
 801e4a6:	691b      	ldr	r3, [r3, #16]
 801e4a8:	6839      	ldr	r1, [r7, #0]
 801e4aa:	4618      	mov	r0, r3
 801e4ac:	f000 f9ae 	bl	801e80c <ip4_addr_isbroadcast_u32>
 801e4b0:	4603      	mov	r3, r0
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	d105      	bne.n	801e4c2 <ip4_input+0x17e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e4b6:	4b36      	ldr	r3, [pc, #216]	@ (801e590 <ip4_input+0x24c>)
 801e4b8:	691b      	ldr	r3, [r3, #16]
 801e4ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e4be:	2be0      	cmp	r3, #224	@ 0xe0
 801e4c0:	d10c      	bne.n	801e4dc <ip4_input+0x198>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801e4c2:	6878      	ldr	r0, [r7, #4]
 801e4c4:	f7f6 fcce 	bl	8014e64 <pbuf_free>
      IP_STATS_INC(ip.drop);
 801e4c8:	4b30      	ldr	r3, [pc, #192]	@ (801e58c <ip4_input+0x248>)
 801e4ca:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e4ce:	3301      	adds	r3, #1
 801e4d0:	b29a      	uxth	r2, r3
 801e4d2:	4b2e      	ldr	r3, [pc, #184]	@ (801e58c <ip4_input+0x248>)
 801e4d4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801e4d8:	2300      	movs	r3, #0
 801e4da:	e09d      	b.n	801e618 <ip4_input+0x2d4>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801e4dc:	697b      	ldr	r3, [r7, #20]
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d10c      	bne.n	801e4fc <ip4_input+0x1b8>
      /* try to forward IP packet on (other) interfaces */
      ip4_forward(p, (struct ip_hdr *)p->payload, inp);
    } else
#endif /* IP_FORWARD */
    {
      IP_STATS_INC(ip.drop);
 801e4e2:	4b2a      	ldr	r3, [pc, #168]	@ (801e58c <ip4_input+0x248>)
 801e4e4:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e4e8:	3301      	adds	r3, #1
 801e4ea:	b29a      	uxth	r2, r3
 801e4ec:	4b27      	ldr	r3, [pc, #156]	@ (801e58c <ip4_input+0x248>)
 801e4ee:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801e4f2:	6878      	ldr	r0, [r7, #4]
 801e4f4:	f7f6 fcb6 	bl	8014e64 <pbuf_free>
    return ERR_OK;
 801e4f8:	2300      	movs	r3, #0
 801e4fa:	e08d      	b.n	801e618 <ip4_input+0x2d4>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e4fc:	693b      	ldr	r3, [r7, #16]
 801e4fe:	88db      	ldrh	r3, [r3, #6]
 801e500:	b29b      	uxth	r3, r3
 801e502:	461a      	mov	r2, r3
 801e504:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801e508:	4013      	ands	r3, r2
 801e50a:	2b00      	cmp	r3, #0
 801e50c:	d00b      	beq.n	801e526 <ip4_input+0x1e2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801e50e:	6878      	ldr	r0, [r7, #4]
 801e510:	f000 fcca 	bl	801eea8 <ip4_reass>
 801e514:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801e516:	687b      	ldr	r3, [r7, #4]
 801e518:	2b00      	cmp	r3, #0
 801e51a:	d101      	bne.n	801e520 <ip4_input+0x1dc>
      return ERR_OK;
 801e51c:	2300      	movs	r3, #0
 801e51e:	e07b      	b.n	801e618 <ip4_input+0x2d4>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801e520:	687b      	ldr	r3, [r7, #4]
 801e522:	685b      	ldr	r3, [r3, #4]
 801e524:	613b      	str	r3, [r7, #16]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801e526:	4a1a      	ldr	r2, [pc, #104]	@ (801e590 <ip4_input+0x24c>)
 801e528:	697b      	ldr	r3, [r7, #20]
 801e52a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801e52c:	4a18      	ldr	r2, [pc, #96]	@ (801e590 <ip4_input+0x24c>)
 801e52e:	683b      	ldr	r3, [r7, #0]
 801e530:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801e532:	4a17      	ldr	r2, [pc, #92]	@ (801e590 <ip4_input+0x24c>)
 801e534:	693b      	ldr	r3, [r7, #16]
 801e536:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801e538:	693b      	ldr	r3, [r7, #16]
 801e53a:	781b      	ldrb	r3, [r3, #0]
 801e53c:	f003 030f 	and.w	r3, r3, #15
 801e540:	b2db      	uxtb	r3, r3
 801e542:	009b      	lsls	r3, r3, #2
 801e544:	b2db      	uxtb	r3, r3
 801e546:	461a      	mov	r2, r3
 801e548:	4b11      	ldr	r3, [pc, #68]	@ (801e590 <ip4_input+0x24c>)
 801e54a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801e54c:	89fb      	ldrh	r3, [r7, #14]
 801e54e:	4619      	mov	r1, r3
 801e550:	6878      	ldr	r0, [r7, #4]
 801e552:	f7f6 fbf9 	bl	8014d48 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801e556:	693b      	ldr	r3, [r7, #16]
 801e558:	7a5b      	ldrb	r3, [r3, #9]
 801e55a:	2b11      	cmp	r3, #17
 801e55c:	d006      	beq.n	801e56c <ip4_input+0x228>
 801e55e:	2b11      	cmp	r3, #17
 801e560:	dc1a      	bgt.n	801e598 <ip4_input+0x254>
 801e562:	2b01      	cmp	r3, #1
 801e564:	d00c      	beq.n	801e580 <ip4_input+0x23c>
 801e566:	2b06      	cmp	r3, #6
 801e568:	d005      	beq.n	801e576 <ip4_input+0x232>
 801e56a:	e015      	b.n	801e598 <ip4_input+0x254>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801e56c:	6839      	ldr	r1, [r7, #0]
 801e56e:	6878      	ldr	r0, [r7, #4]
 801e570:	f7fd fd16 	bl	801bfa0 <udp_input>
        break;
 801e574:	e03d      	b.n	801e5f2 <ip4_input+0x2ae>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801e576:	6839      	ldr	r1, [r7, #0]
 801e578:	6878      	ldr	r0, [r7, #4]
 801e57a:	f7f8 ffb3 	bl	80174e4 <tcp_input>
        break;
 801e57e:	e038      	b.n	801e5f2 <ip4_input+0x2ae>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801e580:	6839      	ldr	r1, [r7, #0]
 801e582:	6878      	ldr	r0, [r7, #4]
 801e584:	f7ff fbdc 	bl	801dd40 <icmp_input>
        break;
 801e588:	e033      	b.n	801e5f2 <ip4_input+0x2ae>
 801e58a:	bf00      	nop
 801e58c:	2002d36c 	.word	0x2002d36c
 801e590:	200270fc 	.word	0x200270fc
 801e594:	2002d360 	.word	0x2002d360
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e598:	4b21      	ldr	r3, [pc, #132]	@ (801e620 <ip4_input+0x2dc>)
 801e59a:	695b      	ldr	r3, [r3, #20]
 801e59c:	6979      	ldr	r1, [r7, #20]
 801e59e:	4618      	mov	r0, r3
 801e5a0:	f000 f934 	bl	801e80c <ip4_addr_isbroadcast_u32>
 801e5a4:	4603      	mov	r3, r0
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d10f      	bne.n	801e5ca <ip4_input+0x286>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e5aa:	4b1d      	ldr	r3, [pc, #116]	@ (801e620 <ip4_input+0x2dc>)
 801e5ac:	695b      	ldr	r3, [r3, #20]
 801e5ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e5b2:	2be0      	cmp	r3, #224	@ 0xe0
 801e5b4:	d009      	beq.n	801e5ca <ip4_input+0x286>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e5b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801e5ba:	4619      	mov	r1, r3
 801e5bc:	6878      	ldr	r0, [r7, #4]
 801e5be:	f7f6 fc3e 	bl	8014e3e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e5c2:	2102      	movs	r1, #2
 801e5c4:	6878      	ldr	r0, [r7, #4]
 801e5c6:	f7ff fd45 	bl	801e054 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));

          IP_STATS_INC(ip.proterr);
 801e5ca:	4b16      	ldr	r3, [pc, #88]	@ (801e624 <ip4_input+0x2e0>)
 801e5cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 801e5d0:	3301      	adds	r3, #1
 801e5d2:	b29a      	uxth	r2, r3
 801e5d4:	4b13      	ldr	r3, [pc, #76]	@ (801e624 <ip4_input+0x2e0>)
 801e5d6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
          IP_STATS_INC(ip.drop);
 801e5da:	4b12      	ldr	r3, [pc, #72]	@ (801e624 <ip4_input+0x2e0>)
 801e5dc:	f8b3 304e 	ldrh.w	r3, [r3, #78]	@ 0x4e
 801e5e0:	3301      	adds	r3, #1
 801e5e2:	b29a      	uxth	r2, r3
 801e5e4:	4b0f      	ldr	r3, [pc, #60]	@ (801e624 <ip4_input+0x2e0>)
 801e5e6:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801e5ea:	6878      	ldr	r0, [r7, #4]
 801e5ec:	f7f6 fc3a 	bl	8014e64 <pbuf_free>
        break;
 801e5f0:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801e5f2:	4b0b      	ldr	r3, [pc, #44]	@ (801e620 <ip4_input+0x2dc>)
 801e5f4:	2200      	movs	r2, #0
 801e5f6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801e5f8:	4b09      	ldr	r3, [pc, #36]	@ (801e620 <ip4_input+0x2dc>)
 801e5fa:	2200      	movs	r2, #0
 801e5fc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801e5fe:	4b08      	ldr	r3, [pc, #32]	@ (801e620 <ip4_input+0x2dc>)
 801e600:	2200      	movs	r2, #0
 801e602:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e604:	4b06      	ldr	r3, [pc, #24]	@ (801e620 <ip4_input+0x2dc>)
 801e606:	2200      	movs	r2, #0
 801e608:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e60a:	4b05      	ldr	r3, [pc, #20]	@ (801e620 <ip4_input+0x2dc>)
 801e60c:	2200      	movs	r2, #0
 801e60e:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e610:	4b03      	ldr	r3, [pc, #12]	@ (801e620 <ip4_input+0x2dc>)
 801e612:	2200      	movs	r2, #0
 801e614:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e616:	2300      	movs	r3, #0
}
 801e618:	4618      	mov	r0, r3
 801e61a:	3718      	adds	r7, #24
 801e61c:	46bd      	mov	sp, r7
 801e61e:	bd80      	pop	{r7, pc}
 801e620:	200270fc 	.word	0x200270fc
 801e624:	2002d36c 	.word	0x2002d36c

0801e628 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801e628:	b580      	push	{r7, lr}
 801e62a:	b08a      	sub	sp, #40	@ 0x28
 801e62c:	af04      	add	r7, sp, #16
 801e62e:	60f8      	str	r0, [r7, #12]
 801e630:	60b9      	str	r1, [r7, #8]
 801e632:	607a      	str	r2, [r7, #4]
 801e634:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e636:	68bb      	ldr	r3, [r7, #8]
 801e638:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d009      	beq.n	801e654 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e640:	68bb      	ldr	r3, [r7, #8]
 801e642:	2b00      	cmp	r3, #0
 801e644:	d003      	beq.n	801e64e <ip4_output_if+0x26>
 801e646:	68bb      	ldr	r3, [r7, #8]
 801e648:	681b      	ldr	r3, [r3, #0]
 801e64a:	2b00      	cmp	r3, #0
 801e64c:	d102      	bne.n	801e654 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e64e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e650:	3304      	adds	r3, #4
 801e652:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e654:	78fa      	ldrb	r2, [r7, #3]
 801e656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801e658:	9302      	str	r3, [sp, #8]
 801e65a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801e65e:	9301      	str	r3, [sp, #4]
 801e660:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e664:	9300      	str	r3, [sp, #0]
 801e666:	4613      	mov	r3, r2
 801e668:	687a      	ldr	r2, [r7, #4]
 801e66a:	6979      	ldr	r1, [r7, #20]
 801e66c:	68f8      	ldr	r0, [r7, #12]
 801e66e:	f000 f805 	bl	801e67c <ip4_output_if_src>
 801e672:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e674:	4618      	mov	r0, r3
 801e676:	3718      	adds	r7, #24
 801e678:	46bd      	mov	sp, r7
 801e67a:	bd80      	pop	{r7, pc}

0801e67c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e67c:	b580      	push	{r7, lr}
 801e67e:	b088      	sub	sp, #32
 801e680:	af00      	add	r7, sp, #0
 801e682:	60f8      	str	r0, [r7, #12]
 801e684:	60b9      	str	r1, [r7, #8]
 801e686:	607a      	str	r2, [r7, #4]
 801e688:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	7b9b      	ldrb	r3, [r3, #14]
 801e68e:	2b01      	cmp	r3, #1
 801e690:	d006      	beq.n	801e6a0 <ip4_output_if_src+0x24>
 801e692:	4b57      	ldr	r3, [pc, #348]	@ (801e7f0 <ip4_output_if_src+0x174>)
 801e694:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801e698:	4956      	ldr	r1, [pc, #344]	@ (801e7f4 <ip4_output_if_src+0x178>)
 801e69a:	4857      	ldr	r0, [pc, #348]	@ (801e7f8 <ip4_output_if_src+0x17c>)
 801e69c:	f002 fc1a 	bl	8020ed4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d068      	beq.n	801e778 <ip4_output_if_src+0xfc>
    u16_t ip_hlen = IP_HLEN;
 801e6a6:	2314      	movs	r3, #20
 801e6a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e6aa:	2114      	movs	r1, #20
 801e6ac:	68f8      	ldr	r0, [r7, #12]
 801e6ae:	f7f6 fb3b 	bl	8014d28 <pbuf_add_header>
 801e6b2:	4603      	mov	r3, r0
 801e6b4:	2b00      	cmp	r3, #0
 801e6b6:	d00a      	beq.n	801e6ce <ip4_output_if_src+0x52>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
 801e6b8:	4b50      	ldr	r3, [pc, #320]	@ (801e7fc <ip4_output_if_src+0x180>)
 801e6ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e6be:	3301      	adds	r3, #1
 801e6c0:	b29a      	uxth	r2, r3
 801e6c2:	4b4e      	ldr	r3, [pc, #312]	@ (801e7fc <ip4_output_if_src+0x180>)
 801e6c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e6c8:	f06f 0301 	mvn.w	r3, #1
 801e6cc:	e08c      	b.n	801e7e8 <ip4_output_if_src+0x16c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	685b      	ldr	r3, [r3, #4]
 801e6d2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e6d4:	68fb      	ldr	r3, [r7, #12]
 801e6d6:	895b      	ldrh	r3, [r3, #10]
 801e6d8:	2b13      	cmp	r3, #19
 801e6da:	d806      	bhi.n	801e6ea <ip4_output_if_src+0x6e>
 801e6dc:	4b44      	ldr	r3, [pc, #272]	@ (801e7f0 <ip4_output_if_src+0x174>)
 801e6de:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801e6e2:	4947      	ldr	r1, [pc, #284]	@ (801e800 <ip4_output_if_src+0x184>)
 801e6e4:	4844      	ldr	r0, [pc, #272]	@ (801e7f8 <ip4_output_if_src+0x17c>)
 801e6e6:	f002 fbf5 	bl	8020ed4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e6ea:	69fb      	ldr	r3, [r7, #28]
 801e6ec:	78fa      	ldrb	r2, [r7, #3]
 801e6ee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e6f0:	69fb      	ldr	r3, [r7, #28]
 801e6f2:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801e6f6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	681a      	ldr	r2, [r3, #0]
 801e6fc:	69fb      	ldr	r3, [r7, #28]
 801e6fe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e700:	8b7b      	ldrh	r3, [r7, #26]
 801e702:	089b      	lsrs	r3, r3, #2
 801e704:	b29b      	uxth	r3, r3
 801e706:	b2db      	uxtb	r3, r3
 801e708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e70c:	b2da      	uxtb	r2, r3
 801e70e:	69fb      	ldr	r3, [r7, #28]
 801e710:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e712:	69fb      	ldr	r3, [r7, #28]
 801e714:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801e718:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e71a:	68fb      	ldr	r3, [r7, #12]
 801e71c:	891b      	ldrh	r3, [r3, #8]
 801e71e:	4618      	mov	r0, r3
 801e720:	f7f4 fd72 	bl	8013208 <lwip_htons>
 801e724:	4603      	mov	r3, r0
 801e726:	461a      	mov	r2, r3
 801e728:	69fb      	ldr	r3, [r7, #28]
 801e72a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e72c:	69fb      	ldr	r3, [r7, #28]
 801e72e:	2200      	movs	r2, #0
 801e730:	719a      	strb	r2, [r3, #6]
 801e732:	2200      	movs	r2, #0
 801e734:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e736:	4b33      	ldr	r3, [pc, #204]	@ (801e804 <ip4_output_if_src+0x188>)
 801e738:	881b      	ldrh	r3, [r3, #0]
 801e73a:	4618      	mov	r0, r3
 801e73c:	f7f4 fd64 	bl	8013208 <lwip_htons>
 801e740:	4603      	mov	r3, r0
 801e742:	461a      	mov	r2, r3
 801e744:	69fb      	ldr	r3, [r7, #28]
 801e746:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e748:	4b2e      	ldr	r3, [pc, #184]	@ (801e804 <ip4_output_if_src+0x188>)
 801e74a:	881b      	ldrh	r3, [r3, #0]
 801e74c:	3301      	adds	r3, #1
 801e74e:	b29a      	uxth	r2, r3
 801e750:	4b2c      	ldr	r3, [pc, #176]	@ (801e804 <ip4_output_if_src+0x188>)
 801e752:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801e754:	68bb      	ldr	r3, [r7, #8]
 801e756:	2b00      	cmp	r3, #0
 801e758:	d104      	bne.n	801e764 <ip4_output_if_src+0xe8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e75a:	4b2b      	ldr	r3, [pc, #172]	@ (801e808 <ip4_output_if_src+0x18c>)
 801e75c:	681a      	ldr	r2, [r3, #0]
 801e75e:	69fb      	ldr	r3, [r7, #28]
 801e760:	60da      	str	r2, [r3, #12]
 801e762:	e003      	b.n	801e76c <ip4_output_if_src+0xf0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e764:	68bb      	ldr	r3, [r7, #8]
 801e766:	681a      	ldr	r2, [r3, #0]
 801e768:	69fb      	ldr	r3, [r7, #28]
 801e76a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801e76c:	69fb      	ldr	r3, [r7, #28]
 801e76e:	2200      	movs	r2, #0
 801e770:	729a      	strb	r2, [r3, #10]
 801e772:	2200      	movs	r2, #0
 801e774:	72da      	strb	r2, [r3, #11]
 801e776:	e017      	b.n	801e7a8 <ip4_output_if_src+0x12c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801e778:	68fb      	ldr	r3, [r7, #12]
 801e77a:	895b      	ldrh	r3, [r3, #10]
 801e77c:	2b13      	cmp	r3, #19
 801e77e:	d80a      	bhi.n	801e796 <ip4_output_if_src+0x11a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
 801e780:	4b1e      	ldr	r3, [pc, #120]	@ (801e7fc <ip4_output_if_src+0x180>)
 801e782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801e786:	3301      	adds	r3, #1
 801e788:	b29a      	uxth	r2, r3
 801e78a:	4b1c      	ldr	r3, [pc, #112]	@ (801e7fc <ip4_output_if_src+0x180>)
 801e78c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e790:	f06f 0301 	mvn.w	r3, #1
 801e794:	e028      	b.n	801e7e8 <ip4_output_if_src+0x16c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	685b      	ldr	r3, [r3, #4]
 801e79a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e79c:	69fb      	ldr	r3, [r7, #28]
 801e79e:	691b      	ldr	r3, [r3, #16]
 801e7a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801e7a2:	f107 0314 	add.w	r3, r7, #20
 801e7a6:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);
 801e7a8:	4b14      	ldr	r3, [pc, #80]	@ (801e7fc <ip4_output_if_src+0x180>)
 801e7aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801e7ae:	3301      	adds	r3, #1
 801e7b0:	b29a      	uxth	r2, r3
 801e7b2:	4b12      	ldr	r3, [pc, #72]	@ (801e7fc <ip4_output_if_src+0x180>)
 801e7b4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e7ba:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e7bc:	2b00      	cmp	r3, #0
 801e7be:	d00c      	beq.n	801e7da <ip4_output_if_src+0x15e>
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	891a      	ldrh	r2, [r3, #8]
 801e7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e7c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801e7c8:	429a      	cmp	r2, r3
 801e7ca:	d906      	bls.n	801e7da <ip4_output_if_src+0x15e>
    return ip4_frag(p, netif, dest);
 801e7cc:	687a      	ldr	r2, [r7, #4]
 801e7ce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801e7d0:	68f8      	ldr	r0, [r7, #12]
 801e7d2:	f000 fd7b 	bl	801f2cc <ip4_frag>
 801e7d6:	4603      	mov	r3, r0
 801e7d8:	e006      	b.n	801e7e8 <ip4_output_if_src+0x16c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e7da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801e7dc:	695b      	ldr	r3, [r3, #20]
 801e7de:	687a      	ldr	r2, [r7, #4]
 801e7e0:	68f9      	ldr	r1, [r7, #12]
 801e7e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801e7e4:	4798      	blx	r3
 801e7e6:	4603      	mov	r3, r0
}
 801e7e8:	4618      	mov	r0, r3
 801e7ea:	3720      	adds	r7, #32
 801e7ec:	46bd      	mov	sp, r7
 801e7ee:	bd80      	pop	{r7, pc}
 801e7f0:	0802635c 	.word	0x0802635c
 801e7f4:	08026390 	.word	0x08026390
 801e7f8:	0802639c 	.word	0x0802639c
 801e7fc:	2002d36c 	.word	0x2002d36c
 801e800:	080263c4 	.word	0x080263c4
 801e804:	2002d5c2 	.word	0x2002d5c2
 801e808:	08026dbc 	.word	0x08026dbc

0801e80c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e80c:	b480      	push	{r7}
 801e80e:	b085      	sub	sp, #20
 801e810:	af00      	add	r7, sp, #0
 801e812:	6078      	str	r0, [r7, #4]
 801e814:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801e820:	d002      	beq.n	801e828 <ip4_addr_isbroadcast_u32+0x1c>
 801e822:	687b      	ldr	r3, [r7, #4]
 801e824:	2b00      	cmp	r3, #0
 801e826:	d101      	bne.n	801e82c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e828:	2301      	movs	r3, #1
 801e82a:	e02a      	b.n	801e882 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e82c:	683b      	ldr	r3, [r7, #0]
 801e82e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801e832:	f003 0302 	and.w	r3, r3, #2
 801e836:	2b00      	cmp	r3, #0
 801e838:	d101      	bne.n	801e83e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e83a:	2300      	movs	r3, #0
 801e83c:	e021      	b.n	801e882 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e83e:	683b      	ldr	r3, [r7, #0]
 801e840:	3304      	adds	r3, #4
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	687a      	ldr	r2, [r7, #4]
 801e846:	429a      	cmp	r2, r3
 801e848:	d101      	bne.n	801e84e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e84a:	2300      	movs	r3, #0
 801e84c:	e019      	b.n	801e882 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e84e:	68fa      	ldr	r2, [r7, #12]
 801e850:	683b      	ldr	r3, [r7, #0]
 801e852:	3304      	adds	r3, #4
 801e854:	681b      	ldr	r3, [r3, #0]
 801e856:	405a      	eors	r2, r3
 801e858:	683b      	ldr	r3, [r7, #0]
 801e85a:	3308      	adds	r3, #8
 801e85c:	681b      	ldr	r3, [r3, #0]
 801e85e:	4013      	ands	r3, r2
 801e860:	2b00      	cmp	r3, #0
 801e862:	d10d      	bne.n	801e880 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e864:	683b      	ldr	r3, [r7, #0]
 801e866:	3308      	adds	r3, #8
 801e868:	681b      	ldr	r3, [r3, #0]
 801e86a:	43da      	mvns	r2, r3
 801e86c:	687b      	ldr	r3, [r7, #4]
 801e86e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e870:	683b      	ldr	r3, [r7, #0]
 801e872:	3308      	adds	r3, #8
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e878:	429a      	cmp	r2, r3
 801e87a:	d101      	bne.n	801e880 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e87c:	2301      	movs	r3, #1
 801e87e:	e000      	b.n	801e882 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e880:	2300      	movs	r3, #0
  }
}
 801e882:	4618      	mov	r0, r3
 801e884:	3714      	adds	r7, #20
 801e886:	46bd      	mov	sp, r7
 801e888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e88c:	4770      	bx	lr
	...

0801e890 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801e890:	b580      	push	{r7, lr}
 801e892:	b084      	sub	sp, #16
 801e894:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801e896:	2300      	movs	r3, #0
 801e898:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801e89a:	4b12      	ldr	r3, [pc, #72]	@ (801e8e4 <ip_reass_tmr+0x54>)
 801e89c:	681b      	ldr	r3, [r3, #0]
 801e89e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801e8a0:	e018      	b.n	801e8d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	7fdb      	ldrb	r3, [r3, #31]
 801e8a6:	2b00      	cmp	r3, #0
 801e8a8:	d00b      	beq.n	801e8c2 <ip_reass_tmr+0x32>
      r->timer--;
 801e8aa:	68fb      	ldr	r3, [r7, #12]
 801e8ac:	7fdb      	ldrb	r3, [r3, #31]
 801e8ae:	3b01      	subs	r3, #1
 801e8b0:	b2da      	uxtb	r2, r3
 801e8b2:	68fb      	ldr	r3, [r7, #12]
 801e8b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801e8ba:	68fb      	ldr	r3, [r7, #12]
 801e8bc:	681b      	ldr	r3, [r3, #0]
 801e8be:	60fb      	str	r3, [r7, #12]
 801e8c0:	e008      	b.n	801e8d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801e8c2:	68fb      	ldr	r3, [r7, #12]
 801e8c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801e8c6:	68fb      	ldr	r3, [r7, #12]
 801e8c8:	681b      	ldr	r3, [r3, #0]
 801e8ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801e8cc:	68b9      	ldr	r1, [r7, #8]
 801e8ce:	6878      	ldr	r0, [r7, #4]
 801e8d0:	f000 f80a 	bl	801e8e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801e8d4:	68fb      	ldr	r3, [r7, #12]
 801e8d6:	2b00      	cmp	r3, #0
 801e8d8:	d1e3      	bne.n	801e8a2 <ip_reass_tmr+0x12>
    }
  }
}
 801e8da:	bf00      	nop
 801e8dc:	bf00      	nop
 801e8de:	3710      	adds	r7, #16
 801e8e0:	46bd      	mov	sp, r7
 801e8e2:	bd80      	pop	{r7, pc}
 801e8e4:	2002d5c4 	.word	0x2002d5c4

0801e8e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801e8e8:	b580      	push	{r7, lr}
 801e8ea:	b088      	sub	sp, #32
 801e8ec:	af00      	add	r7, sp, #0
 801e8ee:	6078      	str	r0, [r7, #4]
 801e8f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801e8f2:	2300      	movs	r3, #0
 801e8f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801e8f6:	683a      	ldr	r2, [r7, #0]
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	429a      	cmp	r2, r3
 801e8fc:	d105      	bne.n	801e90a <ip_reass_free_complete_datagram+0x22>
 801e8fe:	4b45      	ldr	r3, [pc, #276]	@ (801ea14 <ip_reass_free_complete_datagram+0x12c>)
 801e900:	22ab      	movs	r2, #171	@ 0xab
 801e902:	4945      	ldr	r1, [pc, #276]	@ (801ea18 <ip_reass_free_complete_datagram+0x130>)
 801e904:	4845      	ldr	r0, [pc, #276]	@ (801ea1c <ip_reass_free_complete_datagram+0x134>)
 801e906:	f002 fae5 	bl	8020ed4 <iprintf>
  if (prev != NULL) {
 801e90a:	683b      	ldr	r3, [r7, #0]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	d00a      	beq.n	801e926 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801e910:	683b      	ldr	r3, [r7, #0]
 801e912:	681b      	ldr	r3, [r3, #0]
 801e914:	687a      	ldr	r2, [r7, #4]
 801e916:	429a      	cmp	r2, r3
 801e918:	d005      	beq.n	801e926 <ip_reass_free_complete_datagram+0x3e>
 801e91a:	4b3e      	ldr	r3, [pc, #248]	@ (801ea14 <ip_reass_free_complete_datagram+0x12c>)
 801e91c:	22ad      	movs	r2, #173	@ 0xad
 801e91e:	4940      	ldr	r1, [pc, #256]	@ (801ea20 <ip_reass_free_complete_datagram+0x138>)
 801e920:	483e      	ldr	r0, [pc, #248]	@ (801ea1c <ip_reass_free_complete_datagram+0x134>)
 801e922:	f002 fad7 	bl	8020ed4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801e926:	687b      	ldr	r3, [r7, #4]
 801e928:	685b      	ldr	r3, [r3, #4]
 801e92a:	685b      	ldr	r3, [r3, #4]
 801e92c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801e92e:	697b      	ldr	r3, [r7, #20]
 801e930:	889b      	ldrh	r3, [r3, #4]
 801e932:	b29b      	uxth	r3, r3
 801e934:	2b00      	cmp	r3, #0
 801e936:	d12a      	bne.n	801e98e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	685b      	ldr	r3, [r3, #4]
 801e93c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801e93e:	697b      	ldr	r3, [r7, #20]
 801e940:	681a      	ldr	r2, [r3, #0]
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801e946:	69bb      	ldr	r3, [r7, #24]
 801e948:	6858      	ldr	r0, [r3, #4]
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	3308      	adds	r3, #8
 801e94e:	2214      	movs	r2, #20
 801e950:	4619      	mov	r1, r3
 801e952:	f002 fcf2 	bl	802133a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801e956:	2101      	movs	r1, #1
 801e958:	69b8      	ldr	r0, [r7, #24]
 801e95a:	f7ff fb8b 	bl	801e074 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801e95e:	69b8      	ldr	r0, [r7, #24]
 801e960:	f7f6 fb26 	bl	8014fb0 <pbuf_clen>
 801e964:	4603      	mov	r3, r0
 801e966:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e968:	8bfa      	ldrh	r2, [r7, #30]
 801e96a:	8a7b      	ldrh	r3, [r7, #18]
 801e96c:	4413      	add	r3, r2
 801e96e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e972:	db05      	blt.n	801e980 <ip_reass_free_complete_datagram+0x98>
 801e974:	4b27      	ldr	r3, [pc, #156]	@ (801ea14 <ip_reass_free_complete_datagram+0x12c>)
 801e976:	22bc      	movs	r2, #188	@ 0xbc
 801e978:	492a      	ldr	r1, [pc, #168]	@ (801ea24 <ip_reass_free_complete_datagram+0x13c>)
 801e97a:	4828      	ldr	r0, [pc, #160]	@ (801ea1c <ip_reass_free_complete_datagram+0x134>)
 801e97c:	f002 faaa 	bl	8020ed4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e980:	8bfa      	ldrh	r2, [r7, #30]
 801e982:	8a7b      	ldrh	r3, [r7, #18]
 801e984:	4413      	add	r3, r2
 801e986:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801e988:	69b8      	ldr	r0, [r7, #24]
 801e98a:	f7f6 fa6b 	bl	8014e64 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801e98e:	687b      	ldr	r3, [r7, #4]
 801e990:	685b      	ldr	r3, [r3, #4]
 801e992:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801e994:	e01f      	b.n	801e9d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801e996:	69bb      	ldr	r3, [r7, #24]
 801e998:	685b      	ldr	r3, [r3, #4]
 801e99a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801e99c:	69bb      	ldr	r3, [r7, #24]
 801e99e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801e9a0:	697b      	ldr	r3, [r7, #20]
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801e9a6:	68f8      	ldr	r0, [r7, #12]
 801e9a8:	f7f6 fb02 	bl	8014fb0 <pbuf_clen>
 801e9ac:	4603      	mov	r3, r0
 801e9ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801e9b0:	8bfa      	ldrh	r2, [r7, #30]
 801e9b2:	8a7b      	ldrh	r3, [r7, #18]
 801e9b4:	4413      	add	r3, r2
 801e9b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e9ba:	db05      	blt.n	801e9c8 <ip_reass_free_complete_datagram+0xe0>
 801e9bc:	4b15      	ldr	r3, [pc, #84]	@ (801ea14 <ip_reass_free_complete_datagram+0x12c>)
 801e9be:	22cc      	movs	r2, #204	@ 0xcc
 801e9c0:	4918      	ldr	r1, [pc, #96]	@ (801ea24 <ip_reass_free_complete_datagram+0x13c>)
 801e9c2:	4816      	ldr	r0, [pc, #88]	@ (801ea1c <ip_reass_free_complete_datagram+0x134>)
 801e9c4:	f002 fa86 	bl	8020ed4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801e9c8:	8bfa      	ldrh	r2, [r7, #30]
 801e9ca:	8a7b      	ldrh	r3, [r7, #18]
 801e9cc:	4413      	add	r3, r2
 801e9ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801e9d0:	68f8      	ldr	r0, [r7, #12]
 801e9d2:	f7f6 fa47 	bl	8014e64 <pbuf_free>
  while (p != NULL) {
 801e9d6:	69bb      	ldr	r3, [r7, #24]
 801e9d8:	2b00      	cmp	r3, #0
 801e9da:	d1dc      	bne.n	801e996 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801e9dc:	6839      	ldr	r1, [r7, #0]
 801e9de:	6878      	ldr	r0, [r7, #4]
 801e9e0:	f000 f8ca 	bl	801eb78 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801e9e4:	4b10      	ldr	r3, [pc, #64]	@ (801ea28 <ip_reass_free_complete_datagram+0x140>)
 801e9e6:	881b      	ldrh	r3, [r3, #0]
 801e9e8:	8bfa      	ldrh	r2, [r7, #30]
 801e9ea:	429a      	cmp	r2, r3
 801e9ec:	d905      	bls.n	801e9fa <ip_reass_free_complete_datagram+0x112>
 801e9ee:	4b09      	ldr	r3, [pc, #36]	@ (801ea14 <ip_reass_free_complete_datagram+0x12c>)
 801e9f0:	22d2      	movs	r2, #210	@ 0xd2
 801e9f2:	490e      	ldr	r1, [pc, #56]	@ (801ea2c <ip_reass_free_complete_datagram+0x144>)
 801e9f4:	4809      	ldr	r0, [pc, #36]	@ (801ea1c <ip_reass_free_complete_datagram+0x134>)
 801e9f6:	f002 fa6d 	bl	8020ed4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801e9fa:	4b0b      	ldr	r3, [pc, #44]	@ (801ea28 <ip_reass_free_complete_datagram+0x140>)
 801e9fc:	881a      	ldrh	r2, [r3, #0]
 801e9fe:	8bfb      	ldrh	r3, [r7, #30]
 801ea00:	1ad3      	subs	r3, r2, r3
 801ea02:	b29a      	uxth	r2, r3
 801ea04:	4b08      	ldr	r3, [pc, #32]	@ (801ea28 <ip_reass_free_complete_datagram+0x140>)
 801ea06:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ea08:	8bfb      	ldrh	r3, [r7, #30]
}
 801ea0a:	4618      	mov	r0, r3
 801ea0c:	3720      	adds	r7, #32
 801ea0e:	46bd      	mov	sp, r7
 801ea10:	bd80      	pop	{r7, pc}
 801ea12:	bf00      	nop
 801ea14:	080263f4 	.word	0x080263f4
 801ea18:	08026430 	.word	0x08026430
 801ea1c:	0802643c 	.word	0x0802643c
 801ea20:	08026464 	.word	0x08026464
 801ea24:	08026478 	.word	0x08026478
 801ea28:	2002d5c8 	.word	0x2002d5c8
 801ea2c:	08026498 	.word	0x08026498

0801ea30 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ea30:	b580      	push	{r7, lr}
 801ea32:	b08a      	sub	sp, #40	@ 0x28
 801ea34:	af00      	add	r7, sp, #0
 801ea36:	6078      	str	r0, [r7, #4]
 801ea38:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ea3a:	2300      	movs	r3, #0
 801ea3c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ea3e:	2300      	movs	r3, #0
 801ea40:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ea42:	2300      	movs	r3, #0
 801ea44:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ea46:	2300      	movs	r3, #0
 801ea48:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ea4a:	2300      	movs	r3, #0
 801ea4c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ea4e:	4b28      	ldr	r3, [pc, #160]	@ (801eaf0 <ip_reass_remove_oldest_datagram+0xc0>)
 801ea50:	681b      	ldr	r3, [r3, #0]
 801ea52:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801ea54:	e030      	b.n	801eab8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ea56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea58:	695a      	ldr	r2, [r3, #20]
 801ea5a:	687b      	ldr	r3, [r7, #4]
 801ea5c:	68db      	ldr	r3, [r3, #12]
 801ea5e:	429a      	cmp	r2, r3
 801ea60:	d10c      	bne.n	801ea7c <ip_reass_remove_oldest_datagram+0x4c>
 801ea62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea64:	699a      	ldr	r2, [r3, #24]
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	691b      	ldr	r3, [r3, #16]
 801ea6a:	429a      	cmp	r2, r3
 801ea6c:	d106      	bne.n	801ea7c <ip_reass_remove_oldest_datagram+0x4c>
 801ea6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea70:	899a      	ldrh	r2, [r3, #12]
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	889b      	ldrh	r3, [r3, #4]
 801ea76:	b29b      	uxth	r3, r3
 801ea78:	429a      	cmp	r2, r3
 801ea7a:	d014      	beq.n	801eaa6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ea7c:	693b      	ldr	r3, [r7, #16]
 801ea7e:	3301      	adds	r3, #1
 801ea80:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ea82:	6a3b      	ldr	r3, [r7, #32]
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d104      	bne.n	801ea92 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ea88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea8a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ea8c:	69fb      	ldr	r3, [r7, #28]
 801ea8e:	61bb      	str	r3, [r7, #24]
 801ea90:	e009      	b.n	801eaa6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ea92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ea94:	7fda      	ldrb	r2, [r3, #31]
 801ea96:	6a3b      	ldr	r3, [r7, #32]
 801ea98:	7fdb      	ldrb	r3, [r3, #31]
 801ea9a:	429a      	cmp	r2, r3
 801ea9c:	d803      	bhi.n	801eaa6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ea9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eaa0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801eaa2:	69fb      	ldr	r3, [r7, #28]
 801eaa4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801eaa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eaa8:	681b      	ldr	r3, [r3, #0]
 801eaaa:	2b00      	cmp	r3, #0
 801eaac:	d001      	beq.n	801eab2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801eaae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eab0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801eab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eab4:	681b      	ldr	r3, [r3, #0]
 801eab6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801eab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801eaba:	2b00      	cmp	r3, #0
 801eabc:	d1cb      	bne.n	801ea56 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801eabe:	6a3b      	ldr	r3, [r7, #32]
 801eac0:	2b00      	cmp	r3, #0
 801eac2:	d008      	beq.n	801ead6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801eac4:	69b9      	ldr	r1, [r7, #24]
 801eac6:	6a38      	ldr	r0, [r7, #32]
 801eac8:	f7ff ff0e 	bl	801e8e8 <ip_reass_free_complete_datagram>
 801eacc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801eace:	697a      	ldr	r2, [r7, #20]
 801ead0:	68fb      	ldr	r3, [r7, #12]
 801ead2:	4413      	add	r3, r2
 801ead4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ead6:	697a      	ldr	r2, [r7, #20]
 801ead8:	683b      	ldr	r3, [r7, #0]
 801eada:	429a      	cmp	r2, r3
 801eadc:	da02      	bge.n	801eae4 <ip_reass_remove_oldest_datagram+0xb4>
 801eade:	693b      	ldr	r3, [r7, #16]
 801eae0:	2b01      	cmp	r3, #1
 801eae2:	dcac      	bgt.n	801ea3e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801eae4:	697b      	ldr	r3, [r7, #20]
}
 801eae6:	4618      	mov	r0, r3
 801eae8:	3728      	adds	r7, #40	@ 0x28
 801eaea:	46bd      	mov	sp, r7
 801eaec:	bd80      	pop	{r7, pc}
 801eaee:	bf00      	nop
 801eaf0:	2002d5c4 	.word	0x2002d5c4

0801eaf4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801eaf4:	b580      	push	{r7, lr}
 801eaf6:	b084      	sub	sp, #16
 801eaf8:	af00      	add	r7, sp, #0
 801eafa:	6078      	str	r0, [r7, #4]
 801eafc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801eafe:	2004      	movs	r0, #4
 801eb00:	f7f5 f94e 	bl	8013da0 <memp_malloc>
 801eb04:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801eb06:	68fb      	ldr	r3, [r7, #12]
 801eb08:	2b00      	cmp	r3, #0
 801eb0a:	d116      	bne.n	801eb3a <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801eb0c:	6839      	ldr	r1, [r7, #0]
 801eb0e:	6878      	ldr	r0, [r7, #4]
 801eb10:	f7ff ff8e 	bl	801ea30 <ip_reass_remove_oldest_datagram>
 801eb14:	4602      	mov	r2, r0
 801eb16:	683b      	ldr	r3, [r7, #0]
 801eb18:	4293      	cmp	r3, r2
 801eb1a:	dc03      	bgt.n	801eb24 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801eb1c:	2004      	movs	r0, #4
 801eb1e:	f7f5 f93f 	bl	8013da0 <memp_malloc>
 801eb22:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801eb24:	68fb      	ldr	r3, [r7, #12]
 801eb26:	2b00      	cmp	r3, #0
 801eb28:	d107      	bne.n	801eb3a <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
 801eb2a:	4b11      	ldr	r3, [pc, #68]	@ (801eb70 <ip_reass_enqueue_new_datagram+0x7c>)
 801eb2c:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801eb2e:	3301      	adds	r3, #1
 801eb30:	b29a      	uxth	r2, r3
 801eb32:	4b0f      	ldr	r3, [pc, #60]	@ (801eb70 <ip_reass_enqueue_new_datagram+0x7c>)
 801eb34:	879a      	strh	r2, [r3, #60]	@ 0x3c
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801eb36:	2300      	movs	r3, #0
 801eb38:	e016      	b.n	801eb68 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801eb3a:	2220      	movs	r2, #32
 801eb3c:	2100      	movs	r1, #0
 801eb3e:	68f8      	ldr	r0, [r7, #12]
 801eb40:	f002 fb28 	bl	8021194 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801eb44:	68fb      	ldr	r3, [r7, #12]
 801eb46:	220f      	movs	r2, #15
 801eb48:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801eb4a:	4b0a      	ldr	r3, [pc, #40]	@ (801eb74 <ip_reass_enqueue_new_datagram+0x80>)
 801eb4c:	681a      	ldr	r2, [r3, #0]
 801eb4e:	68fb      	ldr	r3, [r7, #12]
 801eb50:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801eb52:	4a08      	ldr	r2, [pc, #32]	@ (801eb74 <ip_reass_enqueue_new_datagram+0x80>)
 801eb54:	68fb      	ldr	r3, [r7, #12]
 801eb56:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801eb58:	68fb      	ldr	r3, [r7, #12]
 801eb5a:	3308      	adds	r3, #8
 801eb5c:	2214      	movs	r2, #20
 801eb5e:	6879      	ldr	r1, [r7, #4]
 801eb60:	4618      	mov	r0, r3
 801eb62:	f002 fbea 	bl	802133a <memcpy>
  return ipr;
 801eb66:	68fb      	ldr	r3, [r7, #12]
}
 801eb68:	4618      	mov	r0, r3
 801eb6a:	3710      	adds	r7, #16
 801eb6c:	46bd      	mov	sp, r7
 801eb6e:	bd80      	pop	{r7, pc}
 801eb70:	2002d36c 	.word	0x2002d36c
 801eb74:	2002d5c4 	.word	0x2002d5c4

0801eb78 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801eb78:	b580      	push	{r7, lr}
 801eb7a:	b082      	sub	sp, #8
 801eb7c:	af00      	add	r7, sp, #0
 801eb7e:	6078      	str	r0, [r7, #4]
 801eb80:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801eb82:	4b10      	ldr	r3, [pc, #64]	@ (801ebc4 <ip_reass_dequeue_datagram+0x4c>)
 801eb84:	681b      	ldr	r3, [r3, #0]
 801eb86:	687a      	ldr	r2, [r7, #4]
 801eb88:	429a      	cmp	r2, r3
 801eb8a:	d104      	bne.n	801eb96 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	681b      	ldr	r3, [r3, #0]
 801eb90:	4a0c      	ldr	r2, [pc, #48]	@ (801ebc4 <ip_reass_dequeue_datagram+0x4c>)
 801eb92:	6013      	str	r3, [r2, #0]
 801eb94:	e00d      	b.n	801ebb2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801eb96:	683b      	ldr	r3, [r7, #0]
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d106      	bne.n	801ebaa <ip_reass_dequeue_datagram+0x32>
 801eb9c:	4b0a      	ldr	r3, [pc, #40]	@ (801ebc8 <ip_reass_dequeue_datagram+0x50>)
 801eb9e:	f240 1245 	movw	r2, #325	@ 0x145
 801eba2:	490a      	ldr	r1, [pc, #40]	@ (801ebcc <ip_reass_dequeue_datagram+0x54>)
 801eba4:	480a      	ldr	r0, [pc, #40]	@ (801ebd0 <ip_reass_dequeue_datagram+0x58>)
 801eba6:	f002 f995 	bl	8020ed4 <iprintf>
    prev->next = ipr->next;
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	681a      	ldr	r2, [r3, #0]
 801ebae:	683b      	ldr	r3, [r7, #0]
 801ebb0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801ebb2:	6879      	ldr	r1, [r7, #4]
 801ebb4:	2004      	movs	r0, #4
 801ebb6:	f7f5 f96f 	bl	8013e98 <memp_free>
}
 801ebba:	bf00      	nop
 801ebbc:	3708      	adds	r7, #8
 801ebbe:	46bd      	mov	sp, r7
 801ebc0:	bd80      	pop	{r7, pc}
 801ebc2:	bf00      	nop
 801ebc4:	2002d5c4 	.word	0x2002d5c4
 801ebc8:	080263f4 	.word	0x080263f4
 801ebcc:	080264bc 	.word	0x080264bc
 801ebd0:	0802643c 	.word	0x0802643c

0801ebd4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ebd4:	b580      	push	{r7, lr}
 801ebd6:	b08c      	sub	sp, #48	@ 0x30
 801ebd8:	af00      	add	r7, sp, #0
 801ebda:	60f8      	str	r0, [r7, #12]
 801ebdc:	60b9      	str	r1, [r7, #8]
 801ebde:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ebe0:	2300      	movs	r3, #0
 801ebe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ebe4:	2301      	movs	r3, #1
 801ebe6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ebe8:	68bb      	ldr	r3, [r7, #8]
 801ebea:	685b      	ldr	r3, [r3, #4]
 801ebec:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ebee:	69fb      	ldr	r3, [r7, #28]
 801ebf0:	885b      	ldrh	r3, [r3, #2]
 801ebf2:	b29b      	uxth	r3, r3
 801ebf4:	4618      	mov	r0, r3
 801ebf6:	f7f4 fb07 	bl	8013208 <lwip_htons>
 801ebfa:	4603      	mov	r3, r0
 801ebfc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ebfe:	69fb      	ldr	r3, [r7, #28]
 801ec00:	781b      	ldrb	r3, [r3, #0]
 801ec02:	f003 030f 	and.w	r3, r3, #15
 801ec06:	b2db      	uxtb	r3, r3
 801ec08:	009b      	lsls	r3, r3, #2
 801ec0a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ec0c:	7e7b      	ldrb	r3, [r7, #25]
 801ec0e:	b29b      	uxth	r3, r3
 801ec10:	8b7a      	ldrh	r2, [r7, #26]
 801ec12:	429a      	cmp	r2, r3
 801ec14:	d202      	bcs.n	801ec1c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ec16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ec1a:	e135      	b.n	801ee88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ec1c:	7e7b      	ldrb	r3, [r7, #25]
 801ec1e:	b29b      	uxth	r3, r3
 801ec20:	8b7a      	ldrh	r2, [r7, #26]
 801ec22:	1ad3      	subs	r3, r2, r3
 801ec24:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ec26:	69fb      	ldr	r3, [r7, #28]
 801ec28:	88db      	ldrh	r3, [r3, #6]
 801ec2a:	b29b      	uxth	r3, r3
 801ec2c:	4618      	mov	r0, r3
 801ec2e:	f7f4 faeb 	bl	8013208 <lwip_htons>
 801ec32:	4603      	mov	r3, r0
 801ec34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ec38:	b29b      	uxth	r3, r3
 801ec3a:	00db      	lsls	r3, r3, #3
 801ec3c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ec3e:	68bb      	ldr	r3, [r7, #8]
 801ec40:	685b      	ldr	r3, [r3, #4]
 801ec42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801ec44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec46:	2200      	movs	r2, #0
 801ec48:	701a      	strb	r2, [r3, #0]
 801ec4a:	2200      	movs	r2, #0
 801ec4c:	705a      	strb	r2, [r3, #1]
 801ec4e:	2200      	movs	r2, #0
 801ec50:	709a      	strb	r2, [r3, #2]
 801ec52:	2200      	movs	r2, #0
 801ec54:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ec56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec58:	8afa      	ldrh	r2, [r7, #22]
 801ec5a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ec5c:	8afa      	ldrh	r2, [r7, #22]
 801ec5e:	8b7b      	ldrh	r3, [r7, #26]
 801ec60:	4413      	add	r3, r2
 801ec62:	b29a      	uxth	r2, r3
 801ec64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec66:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ec68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec6a:	88db      	ldrh	r3, [r3, #6]
 801ec6c:	b29b      	uxth	r3, r3
 801ec6e:	8afa      	ldrh	r2, [r7, #22]
 801ec70:	429a      	cmp	r2, r3
 801ec72:	d902      	bls.n	801ec7a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ec74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ec78:	e106      	b.n	801ee88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	685b      	ldr	r3, [r3, #4]
 801ec7e:	627b      	str	r3, [r7, #36]	@ 0x24
 801ec80:	e068      	b.n	801ed54 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801ec82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec84:	685b      	ldr	r3, [r3, #4]
 801ec86:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801ec88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec8a:	889b      	ldrh	r3, [r3, #4]
 801ec8c:	b29a      	uxth	r2, r3
 801ec8e:	693b      	ldr	r3, [r7, #16]
 801ec90:	889b      	ldrh	r3, [r3, #4]
 801ec92:	b29b      	uxth	r3, r3
 801ec94:	429a      	cmp	r2, r3
 801ec96:	d235      	bcs.n	801ed04 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801ec98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ec9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ec9c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801ec9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	d020      	beq.n	801ece6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801eca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801eca6:	889b      	ldrh	r3, [r3, #4]
 801eca8:	b29a      	uxth	r2, r3
 801ecaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ecac:	88db      	ldrh	r3, [r3, #6]
 801ecae:	b29b      	uxth	r3, r3
 801ecb0:	429a      	cmp	r2, r3
 801ecb2:	d307      	bcc.n	801ecc4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801ecb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecb6:	88db      	ldrh	r3, [r3, #6]
 801ecb8:	b29a      	uxth	r2, r3
 801ecba:	693b      	ldr	r3, [r7, #16]
 801ecbc:	889b      	ldrh	r3, [r3, #4]
 801ecbe:	b29b      	uxth	r3, r3
 801ecc0:	429a      	cmp	r2, r3
 801ecc2:	d902      	bls.n	801ecca <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ecc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ecc8:	e0de      	b.n	801ee88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801ecca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eccc:	68ba      	ldr	r2, [r7, #8]
 801ecce:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801ecd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ecd2:	88db      	ldrh	r3, [r3, #6]
 801ecd4:	b29a      	uxth	r2, r3
 801ecd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ecd8:	889b      	ldrh	r3, [r3, #4]
 801ecda:	b29b      	uxth	r3, r3
 801ecdc:	429a      	cmp	r2, r3
 801ecde:	d03d      	beq.n	801ed5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ece0:	2300      	movs	r3, #0
 801ece2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ece4:	e03a      	b.n	801ed5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ece6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ece8:	88db      	ldrh	r3, [r3, #6]
 801ecea:	b29a      	uxth	r2, r3
 801ecec:	693b      	ldr	r3, [r7, #16]
 801ecee:	889b      	ldrh	r3, [r3, #4]
 801ecf0:	b29b      	uxth	r3, r3
 801ecf2:	429a      	cmp	r2, r3
 801ecf4:	d902      	bls.n	801ecfc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ecf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ecfa:	e0c5      	b.n	801ee88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ecfc:	68fb      	ldr	r3, [r7, #12]
 801ecfe:	68ba      	ldr	r2, [r7, #8]
 801ed00:	605a      	str	r2, [r3, #4]
      break;
 801ed02:	e02b      	b.n	801ed5c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ed04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed06:	889b      	ldrh	r3, [r3, #4]
 801ed08:	b29a      	uxth	r2, r3
 801ed0a:	693b      	ldr	r3, [r7, #16]
 801ed0c:	889b      	ldrh	r3, [r3, #4]
 801ed0e:	b29b      	uxth	r3, r3
 801ed10:	429a      	cmp	r2, r3
 801ed12:	d102      	bne.n	801ed1a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ed14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ed18:	e0b6      	b.n	801ee88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ed1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed1c:	889b      	ldrh	r3, [r3, #4]
 801ed1e:	b29a      	uxth	r2, r3
 801ed20:	693b      	ldr	r3, [r7, #16]
 801ed22:	88db      	ldrh	r3, [r3, #6]
 801ed24:	b29b      	uxth	r3, r3
 801ed26:	429a      	cmp	r2, r3
 801ed28:	d202      	bcs.n	801ed30 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ed2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801ed2e:	e0ab      	b.n	801ee88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ed30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	d009      	beq.n	801ed4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ed36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed38:	88db      	ldrh	r3, [r3, #6]
 801ed3a:	b29a      	uxth	r2, r3
 801ed3c:	693b      	ldr	r3, [r7, #16]
 801ed3e:	889b      	ldrh	r3, [r3, #4]
 801ed40:	b29b      	uxth	r3, r3
 801ed42:	429a      	cmp	r2, r3
 801ed44:	d001      	beq.n	801ed4a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ed46:	2300      	movs	r3, #0
 801ed48:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ed4a:	693b      	ldr	r3, [r7, #16]
 801ed4c:	681b      	ldr	r3, [r3, #0]
 801ed4e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801ed50:	693b      	ldr	r3, [r7, #16]
 801ed52:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801ed54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed56:	2b00      	cmp	r3, #0
 801ed58:	d193      	bne.n	801ec82 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ed5a:	e000      	b.n	801ed5e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ed5c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ed5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	d12d      	bne.n	801edc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ed64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed66:	2b00      	cmp	r3, #0
 801ed68:	d01c      	beq.n	801eda4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ed6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed6c:	88db      	ldrh	r3, [r3, #6]
 801ed6e:	b29a      	uxth	r2, r3
 801ed70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed72:	889b      	ldrh	r3, [r3, #4]
 801ed74:	b29b      	uxth	r3, r3
 801ed76:	429a      	cmp	r2, r3
 801ed78:	d906      	bls.n	801ed88 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801ed7a:	4b45      	ldr	r3, [pc, #276]	@ (801ee90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ed7c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801ed80:	4944      	ldr	r1, [pc, #272]	@ (801ee94 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801ed82:	4845      	ldr	r0, [pc, #276]	@ (801ee98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ed84:	f002 f8a6 	bl	8020ed4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801ed88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed8a:	68ba      	ldr	r2, [r7, #8]
 801ed8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801ed8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ed90:	88db      	ldrh	r3, [r3, #6]
 801ed92:	b29a      	uxth	r2, r3
 801ed94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ed96:	889b      	ldrh	r3, [r3, #4]
 801ed98:	b29b      	uxth	r3, r3
 801ed9a:	429a      	cmp	r2, r3
 801ed9c:	d010      	beq.n	801edc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801ed9e:	2300      	movs	r3, #0
 801eda0:	623b      	str	r3, [r7, #32]
 801eda2:	e00d      	b.n	801edc0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801eda4:	68fb      	ldr	r3, [r7, #12]
 801eda6:	685b      	ldr	r3, [r3, #4]
 801eda8:	2b00      	cmp	r3, #0
 801edaa:	d006      	beq.n	801edba <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801edac:	4b38      	ldr	r3, [pc, #224]	@ (801ee90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801edae:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801edb2:	493a      	ldr	r1, [pc, #232]	@ (801ee9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801edb4:	4838      	ldr	r0, [pc, #224]	@ (801ee98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801edb6:	f002 f88d 	bl	8020ed4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801edba:	68fb      	ldr	r3, [r7, #12]
 801edbc:	68ba      	ldr	r2, [r7, #8]
 801edbe:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801edc0:	687b      	ldr	r3, [r7, #4]
 801edc2:	2b00      	cmp	r3, #0
 801edc4:	d105      	bne.n	801edd2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801edc6:	68fb      	ldr	r3, [r7, #12]
 801edc8:	7f9b      	ldrb	r3, [r3, #30]
 801edca:	f003 0301 	and.w	r3, r3, #1
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d059      	beq.n	801ee86 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801edd2:	6a3b      	ldr	r3, [r7, #32]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d04f      	beq.n	801ee78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801edd8:	68fb      	ldr	r3, [r7, #12]
 801edda:	685b      	ldr	r3, [r3, #4]
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d006      	beq.n	801edee <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801ede0:	68fb      	ldr	r3, [r7, #12]
 801ede2:	685b      	ldr	r3, [r3, #4]
 801ede4:	685b      	ldr	r3, [r3, #4]
 801ede6:	889b      	ldrh	r3, [r3, #4]
 801ede8:	b29b      	uxth	r3, r3
 801edea:	2b00      	cmp	r3, #0
 801edec:	d002      	beq.n	801edf4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801edee:	2300      	movs	r3, #0
 801edf0:	623b      	str	r3, [r7, #32]
 801edf2:	e041      	b.n	801ee78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801edf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edf6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801edf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801edfe:	e012      	b.n	801ee26 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801ee00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee02:	685b      	ldr	r3, [r3, #4]
 801ee04:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801ee06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ee08:	88db      	ldrh	r3, [r3, #6]
 801ee0a:	b29a      	uxth	r2, r3
 801ee0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee0e:	889b      	ldrh	r3, [r3, #4]
 801ee10:	b29b      	uxth	r3, r3
 801ee12:	429a      	cmp	r2, r3
 801ee14:	d002      	beq.n	801ee1c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801ee16:	2300      	movs	r3, #0
 801ee18:	623b      	str	r3, [r7, #32]
            break;
 801ee1a:	e007      	b.n	801ee2c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801ee1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee1e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801ee20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee22:	681b      	ldr	r3, [r3, #0]
 801ee24:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801ee26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	d1e9      	bne.n	801ee00 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801ee2c:	6a3b      	ldr	r3, [r7, #32]
 801ee2e:	2b00      	cmp	r3, #0
 801ee30:	d022      	beq.n	801ee78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801ee32:	68fb      	ldr	r3, [r7, #12]
 801ee34:	685b      	ldr	r3, [r3, #4]
 801ee36:	2b00      	cmp	r3, #0
 801ee38:	d106      	bne.n	801ee48 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801ee3a:	4b15      	ldr	r3, [pc, #84]	@ (801ee90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ee3c:	f240 12df 	movw	r2, #479	@ 0x1df
 801ee40:	4917      	ldr	r1, [pc, #92]	@ (801eea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ee42:	4815      	ldr	r0, [pc, #84]	@ (801ee98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ee44:	f002 f846 	bl	8020ed4 <iprintf>
          LWIP_ASSERT("sanity check",
 801ee48:	68fb      	ldr	r3, [r7, #12]
 801ee4a:	685b      	ldr	r3, [r3, #4]
 801ee4c:	685b      	ldr	r3, [r3, #4]
 801ee4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ee50:	429a      	cmp	r2, r3
 801ee52:	d106      	bne.n	801ee62 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801ee54:	4b0e      	ldr	r3, [pc, #56]	@ (801ee90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ee56:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801ee5a:	4911      	ldr	r1, [pc, #68]	@ (801eea0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801ee5c:	480e      	ldr	r0, [pc, #56]	@ (801ee98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ee5e:	f002 f839 	bl	8020ed4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801ee62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ee64:	681b      	ldr	r3, [r3, #0]
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	d006      	beq.n	801ee78 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801ee6a:	4b09      	ldr	r3, [pc, #36]	@ (801ee90 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801ee6c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801ee70:	490c      	ldr	r1, [pc, #48]	@ (801eea4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801ee72:	4809      	ldr	r0, [pc, #36]	@ (801ee98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801ee74:	f002 f82e 	bl	8020ed4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801ee78:	6a3b      	ldr	r3, [r7, #32]
 801ee7a:	2b00      	cmp	r3, #0
 801ee7c:	bf14      	ite	ne
 801ee7e:	2301      	movne	r3, #1
 801ee80:	2300      	moveq	r3, #0
 801ee82:	b2db      	uxtb	r3, r3
 801ee84:	e000      	b.n	801ee88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801ee86:	2300      	movs	r3, #0
}
 801ee88:	4618      	mov	r0, r3
 801ee8a:	3730      	adds	r7, #48	@ 0x30
 801ee8c:	46bd      	mov	sp, r7
 801ee8e:	bd80      	pop	{r7, pc}
 801ee90:	080263f4 	.word	0x080263f4
 801ee94:	080264d8 	.word	0x080264d8
 801ee98:	0802643c 	.word	0x0802643c
 801ee9c:	080264f8 	.word	0x080264f8
 801eea0:	08026530 	.word	0x08026530
 801eea4:	08026540 	.word	0x08026540

0801eea8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801eea8:	b580      	push	{r7, lr}
 801eeaa:	b08e      	sub	sp, #56	@ 0x38
 801eeac:	af00      	add	r7, sp, #0
 801eeae:	6078      	str	r0, [r7, #4]
  u16_t offset, len, clen;
  u8_t hlen;
  int valid;
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
 801eeb0:	4b9d      	ldr	r3, [pc, #628]	@ (801f128 <ip4_reass+0x280>)
 801eeb2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801eeb4:	3301      	adds	r3, #1
 801eeb6:	b29a      	uxth	r2, r3
 801eeb8:	4b9b      	ldr	r3, [pc, #620]	@ (801f128 <ip4_reass+0x280>)
 801eeba:	865a      	strh	r2, [r3, #50]	@ 0x32
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	685b      	ldr	r3, [r3, #4]
 801eec0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801eec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eec4:	781b      	ldrb	r3, [r3, #0]
 801eec6:	f003 030f 	and.w	r3, r3, #15
 801eeca:	b2db      	uxtb	r3, r3
 801eecc:	009b      	lsls	r3, r3, #2
 801eece:	b2db      	uxtb	r3, r3
 801eed0:	2b14      	cmp	r3, #20
 801eed2:	d008      	beq.n	801eee6 <ip4_reass+0x3e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
 801eed4:	4b94      	ldr	r3, [pc, #592]	@ (801f128 <ip4_reass+0x280>)
 801eed6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 801eeda:	3301      	adds	r3, #1
 801eedc:	b29a      	uxth	r2, r3
 801eede:	4b92      	ldr	r3, [pc, #584]	@ (801f128 <ip4_reass+0x280>)
 801eee0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    goto nullreturn;
 801eee4:	e17c      	b.n	801f1e0 <ip4_reass+0x338>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801eee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801eee8:	88db      	ldrh	r3, [r3, #6]
 801eeea:	b29b      	uxth	r3, r3
 801eeec:	4618      	mov	r0, r3
 801eeee:	f7f4 f98b 	bl	8013208 <lwip_htons>
 801eef2:	4603      	mov	r3, r0
 801eef4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eef8:	b29b      	uxth	r3, r3
 801eefa:	00db      	lsls	r3, r3, #3
 801eefc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801eefe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef00:	885b      	ldrh	r3, [r3, #2]
 801ef02:	b29b      	uxth	r3, r3
 801ef04:	4618      	mov	r0, r3
 801ef06:	f7f4 f97f 	bl	8013208 <lwip_htons>
 801ef0a:	4603      	mov	r3, r0
 801ef0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ef0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef10:	781b      	ldrb	r3, [r3, #0]
 801ef12:	f003 030f 	and.w	r3, r3, #15
 801ef16:	b2db      	uxtb	r3, r3
 801ef18:	009b      	lsls	r3, r3, #2
 801ef1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801ef1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ef22:	b29b      	uxth	r3, r3
 801ef24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ef26:	429a      	cmp	r2, r3
 801ef28:	f0c0 8157 	bcc.w	801f1da <ip4_reass+0x332>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ef2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ef30:	b29b      	uxth	r3, r3
 801ef32:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ef34:	1ad3      	subs	r3, r2, r3
 801ef36:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ef38:	6878      	ldr	r0, [r7, #4]
 801ef3a:	f7f6 f839 	bl	8014fb0 <pbuf_clen>
 801ef3e:	4603      	mov	r3, r0
 801ef40:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ef42:	4b7a      	ldr	r3, [pc, #488]	@ (801f12c <ip4_reass+0x284>)
 801ef44:	881b      	ldrh	r3, [r3, #0]
 801ef46:	461a      	mov	r2, r3
 801ef48:	8c3b      	ldrh	r3, [r7, #32]
 801ef4a:	4413      	add	r3, r2
 801ef4c:	2b0a      	cmp	r3, #10
 801ef4e:	dd15      	ble.n	801ef7c <ip4_reass+0xd4>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ef50:	8c3b      	ldrh	r3, [r7, #32]
 801ef52:	4619      	mov	r1, r3
 801ef54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ef56:	f7ff fd6b 	bl	801ea30 <ip_reass_remove_oldest_datagram>
 801ef5a:	4603      	mov	r3, r0
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	d006      	beq.n	801ef6e <ip4_reass+0xc6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ef60:	4b72      	ldr	r3, [pc, #456]	@ (801f12c <ip4_reass+0x284>)
 801ef62:	881b      	ldrh	r3, [r3, #0]
 801ef64:	461a      	mov	r2, r3
 801ef66:	8c3b      	ldrh	r3, [r7, #32]
 801ef68:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ef6a:	2b0a      	cmp	r3, #10
 801ef6c:	dd06      	ble.n	801ef7c <ip4_reass+0xd4>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
 801ef6e:	4b6e      	ldr	r3, [pc, #440]	@ (801f128 <ip4_reass+0x280>)
 801ef70:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801ef72:	3301      	adds	r3, #1
 801ef74:	b29a      	uxth	r2, r3
 801ef76:	4b6c      	ldr	r3, [pc, #432]	@ (801f128 <ip4_reass+0x280>)
 801ef78:	879a      	strh	r2, [r3, #60]	@ 0x3c
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801ef7a:	e131      	b.n	801f1e0 <ip4_reass+0x338>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ef7c:	4b6c      	ldr	r3, [pc, #432]	@ (801f130 <ip4_reass+0x288>)
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	633b      	str	r3, [r7, #48]	@ 0x30
 801ef82:	e01e      	b.n	801efc2 <ip4_reass+0x11a>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ef84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ef86:	695a      	ldr	r2, [r3, #20]
 801ef88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef8a:	68db      	ldr	r3, [r3, #12]
 801ef8c:	429a      	cmp	r2, r3
 801ef8e:	d115      	bne.n	801efbc <ip4_reass+0x114>
 801ef90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ef92:	699a      	ldr	r2, [r3, #24]
 801ef94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ef96:	691b      	ldr	r3, [r3, #16]
 801ef98:	429a      	cmp	r2, r3
 801ef9a:	d10f      	bne.n	801efbc <ip4_reass+0x114>
 801ef9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ef9e:	899a      	ldrh	r2, [r3, #12]
 801efa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efa2:	889b      	ldrh	r3, [r3, #4]
 801efa4:	b29b      	uxth	r3, r3
 801efa6:	429a      	cmp	r2, r3
 801efa8:	d108      	bne.n	801efbc <ip4_reass+0x114>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
 801efaa:	4b5f      	ldr	r3, [pc, #380]	@ (801f128 <ip4_reass+0x280>)
 801efac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 801efb0:	3301      	adds	r3, #1
 801efb2:	b29a      	uxth	r2, r3
 801efb4:	4b5c      	ldr	r3, [pc, #368]	@ (801f128 <ip4_reass+0x280>)
 801efb6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      break;
 801efba:	e005      	b.n	801efc8 <ip4_reass+0x120>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801efbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801efbe:	681b      	ldr	r3, [r3, #0]
 801efc0:	633b      	str	r3, [r7, #48]	@ 0x30
 801efc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	d1dd      	bne.n	801ef84 <ip4_reass+0xdc>
    }
  }

  if (ipr == NULL) {
 801efc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801efca:	2b00      	cmp	r3, #0
 801efcc:	d109      	bne.n	801efe2 <ip4_reass+0x13a>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801efce:	8c3b      	ldrh	r3, [r7, #32]
 801efd0:	4619      	mov	r1, r3
 801efd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801efd4:	f7ff fd8e 	bl	801eaf4 <ip_reass_enqueue_new_datagram>
 801efd8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801efda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801efdc:	2b00      	cmp	r3, #0
 801efde:	d11c      	bne.n	801f01a <ip4_reass+0x172>
      goto nullreturn;
 801efe0:	e0fe      	b.n	801f1e0 <ip4_reass+0x338>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801efe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801efe4:	88db      	ldrh	r3, [r3, #6]
 801efe6:	b29b      	uxth	r3, r3
 801efe8:	4618      	mov	r0, r3
 801efea:	f7f4 f90d 	bl	8013208 <lwip_htons>
 801efee:	4603      	mov	r3, r0
 801eff0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eff4:	2b00      	cmp	r3, #0
 801eff6:	d110      	bne.n	801f01a <ip4_reass+0x172>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801eff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801effa:	89db      	ldrh	r3, [r3, #14]
 801effc:	4618      	mov	r0, r3
 801effe:	f7f4 f903 	bl	8013208 <lwip_htons>
 801f002:	4603      	mov	r3, r0
 801f004:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d006      	beq.n	801f01a <ip4_reass+0x172>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f00e:	3308      	adds	r3, #8
 801f010:	2214      	movs	r2, #20
 801f012:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f014:	4618      	mov	r0, r3
 801f016:	f002 f990 	bl	802133a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f01c:	88db      	ldrh	r3, [r3, #6]
 801f01e:	b29b      	uxth	r3, r3
 801f020:	f003 0320 	and.w	r3, r3, #32
 801f024:	2b00      	cmp	r3, #0
 801f026:	bf0c      	ite	eq
 801f028:	2301      	moveq	r3, #1
 801f02a:	2300      	movne	r3, #0
 801f02c:	b2db      	uxtb	r3, r3
 801f02e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f030:	69fb      	ldr	r3, [r7, #28]
 801f032:	2b00      	cmp	r3, #0
 801f034:	d00e      	beq.n	801f054 <ip4_reass+0x1ac>
    u16_t datagram_len = (u16_t)(offset + len);
 801f036:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f038:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f03a:	4413      	add	r3, r2
 801f03c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f03e:	8b7a      	ldrh	r2, [r7, #26]
 801f040:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801f042:	429a      	cmp	r2, r3
 801f044:	f0c0 80a7 	bcc.w	801f196 <ip4_reass+0x2ee>
 801f048:	8b7b      	ldrh	r3, [r7, #26]
 801f04a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801f04e:	4293      	cmp	r3, r2
 801f050:	f200 80a1 	bhi.w	801f196 <ip4_reass+0x2ee>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f054:	69fa      	ldr	r2, [r7, #28]
 801f056:	6879      	ldr	r1, [r7, #4]
 801f058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f05a:	f7ff fdbb 	bl	801ebd4 <ip_reass_chain_frag_into_datagram_and_validate>
 801f05e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f060:	697b      	ldr	r3, [r7, #20]
 801f062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801f066:	f000 8098 	beq.w	801f19a <ip4_reass+0x2f2>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f06a:	4b30      	ldr	r3, [pc, #192]	@ (801f12c <ip4_reass+0x284>)
 801f06c:	881a      	ldrh	r2, [r3, #0]
 801f06e:	8c3b      	ldrh	r3, [r7, #32]
 801f070:	4413      	add	r3, r2
 801f072:	b29a      	uxth	r2, r3
 801f074:	4b2d      	ldr	r3, [pc, #180]	@ (801f12c <ip4_reass+0x284>)
 801f076:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f078:	69fb      	ldr	r3, [r7, #28]
 801f07a:	2b00      	cmp	r3, #0
 801f07c:	d00d      	beq.n	801f09a <ip4_reass+0x1f2>
    u16_t datagram_len = (u16_t)(offset + len);
 801f07e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801f080:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801f082:	4413      	add	r3, r2
 801f084:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f088:	8a7a      	ldrh	r2, [r7, #18]
 801f08a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f08c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f08e:	7f9b      	ldrb	r3, [r3, #30]
 801f090:	f043 0301 	orr.w	r3, r3, #1
 801f094:	b2da      	uxtb	r2, r3
 801f096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f098:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f09a:	697b      	ldr	r3, [r7, #20]
 801f09c:	2b01      	cmp	r3, #1
 801f09e:	d178      	bne.n	801f192 <ip4_reass+0x2ea>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f0a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0a2:	8b9b      	ldrh	r3, [r3, #28]
 801f0a4:	3314      	adds	r3, #20
 801f0a6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0aa:	685b      	ldr	r3, [r3, #4]
 801f0ac:	685b      	ldr	r3, [r3, #4]
 801f0ae:	681b      	ldr	r3, [r3, #0]
 801f0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0b4:	685b      	ldr	r3, [r3, #4]
 801f0b6:	685b      	ldr	r3, [r3, #4]
 801f0b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f0ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0bc:	3308      	adds	r3, #8
 801f0be:	2214      	movs	r2, #20
 801f0c0:	4619      	mov	r1, r3
 801f0c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801f0c4:	f002 f939 	bl	802133a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f0c8:	8a3b      	ldrh	r3, [r7, #16]
 801f0ca:	4618      	mov	r0, r3
 801f0cc:	f7f4 f89c 	bl	8013208 <lwip_htons>
 801f0d0:	4603      	mov	r3, r0
 801f0d2:	461a      	mov	r2, r3
 801f0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0d6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0da:	2200      	movs	r2, #0
 801f0dc:	719a      	strb	r2, [r3, #6]
 801f0de:	2200      	movs	r2, #0
 801f0e0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f0e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f0e4:	2200      	movs	r2, #0
 801f0e6:	729a      	strb	r2, [r3, #10]
 801f0e8:	2200      	movs	r2, #0
 801f0ea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f0ee:	685b      	ldr	r3, [r3, #4]
 801f0f0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f0f2:	e00d      	b.n	801f110 <ip4_reass+0x268>
      iprh = (struct ip_reass_helper *)r->payload;
 801f0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f0f6:	685b      	ldr	r3, [r3, #4]
 801f0f8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f0fa:	2114      	movs	r1, #20
 801f0fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801f0fe:	f7f5 fe23 	bl	8014d48 <pbuf_remove_header>
      pbuf_cat(p, r);
 801f102:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801f104:	6878      	ldr	r0, [r7, #4]
 801f106:	f7f5 ff93 	bl	8015030 <pbuf_cat>
      r = iprh->next_pbuf;
 801f10a:	68fb      	ldr	r3, [r7, #12]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (r != NULL) {
 801f110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f112:	2b00      	cmp	r3, #0
 801f114:	d1ee      	bne.n	801f0f4 <ip4_reass+0x24c>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f116:	4b06      	ldr	r3, [pc, #24]	@ (801f130 <ip4_reass+0x288>)
 801f118:	681b      	ldr	r3, [r3, #0]
 801f11a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f11c:	429a      	cmp	r2, r3
 801f11e:	d109      	bne.n	801f134 <ip4_reass+0x28c>
      ipr_prev = NULL;
 801f120:	2300      	movs	r3, #0
 801f122:	637b      	str	r3, [r7, #52]	@ 0x34
 801f124:	e017      	b.n	801f156 <ip4_reass+0x2ae>
 801f126:	bf00      	nop
 801f128:	2002d36c 	.word	0x2002d36c
 801f12c:	2002d5c8 	.word	0x2002d5c8
 801f130:	2002d5c4 	.word	0x2002d5c4
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f134:	4b31      	ldr	r3, [pc, #196]	@ (801f1fc <ip4_reass+0x354>)
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	637b      	str	r3, [r7, #52]	@ 0x34
 801f13a:	e007      	b.n	801f14c <ip4_reass+0x2a4>
        if (ipr_prev->next == ipr) {
 801f13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f142:	429a      	cmp	r2, r3
 801f144:	d006      	beq.n	801f154 <ip4_reass+0x2ac>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f148:	681b      	ldr	r3, [r3, #0]
 801f14a:	637b      	str	r3, [r7, #52]	@ 0x34
 801f14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f14e:	2b00      	cmp	r3, #0
 801f150:	d1f4      	bne.n	801f13c <ip4_reass+0x294>
 801f152:	e000      	b.n	801f156 <ip4_reass+0x2ae>
          break;
 801f154:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f156:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f15a:	f7ff fd0d 	bl	801eb78 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f15e:	6878      	ldr	r0, [r7, #4]
 801f160:	f7f5 ff26 	bl	8014fb0 <pbuf_clen>
 801f164:	4603      	mov	r3, r0
 801f166:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f168:	4b25      	ldr	r3, [pc, #148]	@ (801f200 <ip4_reass+0x358>)
 801f16a:	881b      	ldrh	r3, [r3, #0]
 801f16c:	8c3a      	ldrh	r2, [r7, #32]
 801f16e:	429a      	cmp	r2, r3
 801f170:	d906      	bls.n	801f180 <ip4_reass+0x2d8>
 801f172:	4b24      	ldr	r3, [pc, #144]	@ (801f204 <ip4_reass+0x35c>)
 801f174:	f240 229b 	movw	r2, #667	@ 0x29b
 801f178:	4923      	ldr	r1, [pc, #140]	@ (801f208 <ip4_reass+0x360>)
 801f17a:	4824      	ldr	r0, [pc, #144]	@ (801f20c <ip4_reass+0x364>)
 801f17c:	f001 feaa 	bl	8020ed4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f180:	4b1f      	ldr	r3, [pc, #124]	@ (801f200 <ip4_reass+0x358>)
 801f182:	881a      	ldrh	r2, [r3, #0]
 801f184:	8c3b      	ldrh	r3, [r7, #32]
 801f186:	1ad3      	subs	r3, r2, r3
 801f188:	b29a      	uxth	r2, r3
 801f18a:	4b1d      	ldr	r3, [pc, #116]	@ (801f200 <ip4_reass+0x358>)
 801f18c:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	e030      	b.n	801f1f4 <ip4_reass+0x34c>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f192:	2300      	movs	r3, #0
 801f194:	e02e      	b.n	801f1f4 <ip4_reass+0x34c>
      goto nullreturn_ipr;
 801f196:	bf00      	nop
 801f198:	e000      	b.n	801f19c <ip4_reass+0x2f4>
    goto nullreturn_ipr;
 801f19a:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	d106      	bne.n	801f1b0 <ip4_reass+0x308>
 801f1a2:	4b18      	ldr	r3, [pc, #96]	@ (801f204 <ip4_reass+0x35c>)
 801f1a4:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801f1a8:	4919      	ldr	r1, [pc, #100]	@ (801f210 <ip4_reass+0x368>)
 801f1aa:	4818      	ldr	r0, [pc, #96]	@ (801f20c <ip4_reass+0x364>)
 801f1ac:	f001 fe92 	bl	8020ed4 <iprintf>
  if (ipr->p == NULL) {
 801f1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f1b2:	685b      	ldr	r3, [r3, #4]
 801f1b4:	2b00      	cmp	r3, #0
 801f1b6:	d112      	bne.n	801f1de <ip4_reass+0x336>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f1b8:	4b10      	ldr	r3, [pc, #64]	@ (801f1fc <ip4_reass+0x354>)
 801f1ba:	681b      	ldr	r3, [r3, #0]
 801f1bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f1be:	429a      	cmp	r2, r3
 801f1c0:	d006      	beq.n	801f1d0 <ip4_reass+0x328>
 801f1c2:	4b10      	ldr	r3, [pc, #64]	@ (801f204 <ip4_reass+0x35c>)
 801f1c4:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801f1c8:	4912      	ldr	r1, [pc, #72]	@ (801f214 <ip4_reass+0x36c>)
 801f1ca:	4810      	ldr	r0, [pc, #64]	@ (801f20c <ip4_reass+0x364>)
 801f1cc:	f001 fe82 	bl	8020ed4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f1d0:	2100      	movs	r1, #0
 801f1d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801f1d4:	f7ff fcd0 	bl	801eb78 <ip_reass_dequeue_datagram>
 801f1d8:	e002      	b.n	801f1e0 <ip4_reass+0x338>
    goto nullreturn;
 801f1da:	bf00      	nop
 801f1dc:	e000      	b.n	801f1e0 <ip4_reass+0x338>
  }

nullreturn:
 801f1de:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
 801f1e0:	4b0d      	ldr	r3, [pc, #52]	@ (801f218 <ip4_reass+0x370>)
 801f1e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801f1e4:	3301      	adds	r3, #1
 801f1e6:	b29a      	uxth	r2, r3
 801f1e8:	4b0b      	ldr	r3, [pc, #44]	@ (801f218 <ip4_reass+0x370>)
 801f1ea:	86da      	strh	r2, [r3, #54]	@ 0x36
  pbuf_free(p);
 801f1ec:	6878      	ldr	r0, [r7, #4]
 801f1ee:	f7f5 fe39 	bl	8014e64 <pbuf_free>
  return NULL;
 801f1f2:	2300      	movs	r3, #0
}
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	3738      	adds	r7, #56	@ 0x38
 801f1f8:	46bd      	mov	sp, r7
 801f1fa:	bd80      	pop	{r7, pc}
 801f1fc:	2002d5c4 	.word	0x2002d5c4
 801f200:	2002d5c8 	.word	0x2002d5c8
 801f204:	080263f4 	.word	0x080263f4
 801f208:	08026564 	.word	0x08026564
 801f20c:	0802643c 	.word	0x0802643c
 801f210:	08026580 	.word	0x08026580
 801f214:	0802658c 	.word	0x0802658c
 801f218:	2002d36c 	.word	0x2002d36c

0801f21c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f21c:	b580      	push	{r7, lr}
 801f21e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f220:	2005      	movs	r0, #5
 801f222:	f7f4 fdbd 	bl	8013da0 <memp_malloc>
 801f226:	4603      	mov	r3, r0
}
 801f228:	4618      	mov	r0, r3
 801f22a:	bd80      	pop	{r7, pc}

0801f22c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f22c:	b580      	push	{r7, lr}
 801f22e:	b082      	sub	sp, #8
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	2b00      	cmp	r3, #0
 801f238:	d106      	bne.n	801f248 <ip_frag_free_pbuf_custom_ref+0x1c>
 801f23a:	4b07      	ldr	r3, [pc, #28]	@ (801f258 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f23c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801f240:	4906      	ldr	r1, [pc, #24]	@ (801f25c <ip_frag_free_pbuf_custom_ref+0x30>)
 801f242:	4807      	ldr	r0, [pc, #28]	@ (801f260 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f244:	f001 fe46 	bl	8020ed4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f248:	6879      	ldr	r1, [r7, #4]
 801f24a:	2005      	movs	r0, #5
 801f24c:	f7f4 fe24 	bl	8013e98 <memp_free>
}
 801f250:	bf00      	nop
 801f252:	3708      	adds	r7, #8
 801f254:	46bd      	mov	sp, r7
 801f256:	bd80      	pop	{r7, pc}
 801f258:	080263f4 	.word	0x080263f4
 801f25c:	080265ac 	.word	0x080265ac
 801f260:	0802643c 	.word	0x0802643c

0801f264 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f264:	b580      	push	{r7, lr}
 801f266:	b084      	sub	sp, #16
 801f268:	af00      	add	r7, sp, #0
 801f26a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f270:	68fb      	ldr	r3, [r7, #12]
 801f272:	2b00      	cmp	r3, #0
 801f274:	d106      	bne.n	801f284 <ipfrag_free_pbuf_custom+0x20>
 801f276:	4b11      	ldr	r3, [pc, #68]	@ (801f2bc <ipfrag_free_pbuf_custom+0x58>)
 801f278:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801f27c:	4910      	ldr	r1, [pc, #64]	@ (801f2c0 <ipfrag_free_pbuf_custom+0x5c>)
 801f27e:	4811      	ldr	r0, [pc, #68]	@ (801f2c4 <ipfrag_free_pbuf_custom+0x60>)
 801f280:	f001 fe28 	bl	8020ed4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801f284:	68fa      	ldr	r2, [r7, #12]
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	429a      	cmp	r2, r3
 801f28a:	d006      	beq.n	801f29a <ipfrag_free_pbuf_custom+0x36>
 801f28c:	4b0b      	ldr	r3, [pc, #44]	@ (801f2bc <ipfrag_free_pbuf_custom+0x58>)
 801f28e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801f292:	490d      	ldr	r1, [pc, #52]	@ (801f2c8 <ipfrag_free_pbuf_custom+0x64>)
 801f294:	480b      	ldr	r0, [pc, #44]	@ (801f2c4 <ipfrag_free_pbuf_custom+0x60>)
 801f296:	f001 fe1d 	bl	8020ed4 <iprintf>
  if (pcr->original != NULL) {
 801f29a:	68fb      	ldr	r3, [r7, #12]
 801f29c:	695b      	ldr	r3, [r3, #20]
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d004      	beq.n	801f2ac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f2a2:	68fb      	ldr	r3, [r7, #12]
 801f2a4:	695b      	ldr	r3, [r3, #20]
 801f2a6:	4618      	mov	r0, r3
 801f2a8:	f7f5 fddc 	bl	8014e64 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f2ac:	68f8      	ldr	r0, [r7, #12]
 801f2ae:	f7ff ffbd 	bl	801f22c <ip_frag_free_pbuf_custom_ref>
}
 801f2b2:	bf00      	nop
 801f2b4:	3710      	adds	r7, #16
 801f2b6:	46bd      	mov	sp, r7
 801f2b8:	bd80      	pop	{r7, pc}
 801f2ba:	bf00      	nop
 801f2bc:	080263f4 	.word	0x080263f4
 801f2c0:	080265b8 	.word	0x080265b8
 801f2c4:	0802643c 	.word	0x0802643c
 801f2c8:	080265c4 	.word	0x080265c4

0801f2cc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f2cc:	b580      	push	{r7, lr}
 801f2ce:	b094      	sub	sp, #80	@ 0x50
 801f2d0:	af02      	add	r7, sp, #8
 801f2d2:	60f8      	str	r0, [r7, #12]
 801f2d4:	60b9      	str	r1, [r7, #8]
 801f2d6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f2d8:	2300      	movs	r3, #0
 801f2da:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801f2de:	68bb      	ldr	r3, [r7, #8]
 801f2e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f2e2:	3b14      	subs	r3, #20
 801f2e4:	2b00      	cmp	r3, #0
 801f2e6:	da00      	bge.n	801f2ea <ip4_frag+0x1e>
 801f2e8:	3307      	adds	r3, #7
 801f2ea:	10db      	asrs	r3, r3, #3
 801f2ec:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f2ee:	2314      	movs	r3, #20
 801f2f0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f2f2:	68fb      	ldr	r3, [r7, #12]
 801f2f4:	685b      	ldr	r3, [r3, #4]
 801f2f6:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801f2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801f2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f2fe:	781b      	ldrb	r3, [r3, #0]
 801f300:	f003 030f 	and.w	r3, r3, #15
 801f304:	b2db      	uxtb	r3, r3
 801f306:	009b      	lsls	r3, r3, #2
 801f308:	b2db      	uxtb	r3, r3
 801f30a:	2b14      	cmp	r3, #20
 801f30c:	d002      	beq.n	801f314 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801f30e:	f06f 0305 	mvn.w	r3, #5
 801f312:	e116      	b.n	801f542 <ip4_frag+0x276>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f314:	68fb      	ldr	r3, [r7, #12]
 801f316:	895b      	ldrh	r3, [r3, #10]
 801f318:	2b13      	cmp	r3, #19
 801f31a:	d809      	bhi.n	801f330 <ip4_frag+0x64>
 801f31c:	4b8b      	ldr	r3, [pc, #556]	@ (801f54c <ip4_frag+0x280>)
 801f31e:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801f322:	498b      	ldr	r1, [pc, #556]	@ (801f550 <ip4_frag+0x284>)
 801f324:	488b      	ldr	r0, [pc, #556]	@ (801f554 <ip4_frag+0x288>)
 801f326:	f001 fdd5 	bl	8020ed4 <iprintf>
 801f32a:	f06f 0305 	mvn.w	r3, #5
 801f32e:	e108      	b.n	801f542 <ip4_frag+0x276>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f332:	88db      	ldrh	r3, [r3, #6]
 801f334:	b29b      	uxth	r3, r3
 801f336:	4618      	mov	r0, r3
 801f338:	f7f3 ff66 	bl	8013208 <lwip_htons>
 801f33c:	4603      	mov	r3, r0
 801f33e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801f340:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f342:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f346:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801f34a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f34c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801f350:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f352:	68fb      	ldr	r3, [r7, #12]
 801f354:	891b      	ldrh	r3, [r3, #8]
 801f356:	3b14      	subs	r3, #20
 801f358:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801f35c:	e0e7      	b.n	801f52e <ip4_frag+0x262>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f35e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f360:	00db      	lsls	r3, r3, #3
 801f362:	b29b      	uxth	r3, r3
 801f364:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f368:	4293      	cmp	r3, r2
 801f36a:	bf28      	it	cs
 801f36c:	4613      	movcs	r3, r2
 801f36e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f370:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801f374:	2114      	movs	r1, #20
 801f376:	200e      	movs	r0, #14
 801f378:	f7f5 fa48 	bl	801480c <pbuf_alloc>
 801f37c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801f37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f380:	2b00      	cmp	r3, #0
 801f382:	f000 80db 	beq.w	801f53c <ip4_frag+0x270>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f388:	895b      	ldrh	r3, [r3, #10]
 801f38a:	2b13      	cmp	r3, #19
 801f38c:	d806      	bhi.n	801f39c <ip4_frag+0xd0>
 801f38e:	4b6f      	ldr	r3, [pc, #444]	@ (801f54c <ip4_frag+0x280>)
 801f390:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801f394:	4970      	ldr	r1, [pc, #448]	@ (801f558 <ip4_frag+0x28c>)
 801f396:	486f      	ldr	r0, [pc, #444]	@ (801f554 <ip4_frag+0x288>)
 801f398:	f001 fd9c 	bl	8020ed4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f39e:	685b      	ldr	r3, [r3, #4]
 801f3a0:	2214      	movs	r2, #20
 801f3a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801f3a4:	4618      	mov	r0, r3
 801f3a6:	f001 ffc8 	bl	802133a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f3ac:	685b      	ldr	r3, [r3, #4]
 801f3ae:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801f3b0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f3b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801f3b6:	e064      	b.n	801f482 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	895a      	ldrh	r2, [r3, #10]
 801f3bc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f3be:	1ad3      	subs	r3, r2, r3
 801f3c0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f3c2:	68fb      	ldr	r3, [r7, #12]
 801f3c4:	895b      	ldrh	r3, [r3, #10]
 801f3c6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f3c8:	429a      	cmp	r2, r3
 801f3ca:	d906      	bls.n	801f3da <ip4_frag+0x10e>
 801f3cc:	4b5f      	ldr	r3, [pc, #380]	@ (801f54c <ip4_frag+0x280>)
 801f3ce:	f240 322d 	movw	r2, #813	@ 0x32d
 801f3d2:	4962      	ldr	r1, [pc, #392]	@ (801f55c <ip4_frag+0x290>)
 801f3d4:	485f      	ldr	r0, [pc, #380]	@ (801f554 <ip4_frag+0x288>)
 801f3d6:	f001 fd7d 	bl	8020ed4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f3da:	8bfa      	ldrh	r2, [r7, #30]
 801f3dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f3e0:	4293      	cmp	r3, r2
 801f3e2:	bf28      	it	cs
 801f3e4:	4613      	movcs	r3, r2
 801f3e6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f3ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d105      	bne.n	801f3fe <ip4_frag+0x132>
        poff = 0;
 801f3f2:	2300      	movs	r3, #0
 801f3f4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	60fb      	str	r3, [r7, #12]
        continue;
 801f3fc:	e041      	b.n	801f482 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f3fe:	f7ff ff0d 	bl	801f21c <ip_frag_alloc_pbuf_custom_ref>
 801f402:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801f404:	69bb      	ldr	r3, [r7, #24]
 801f406:	2b00      	cmp	r3, #0
 801f408:	d103      	bne.n	801f412 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801f40a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f40c:	f7f5 fd2a 	bl	8014e64 <pbuf_free>
        goto memerr;
 801f410:	e095      	b.n	801f53e <ip4_frag+0x272>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f412:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801f414:	68fb      	ldr	r3, [r7, #12]
 801f416:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f418:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801f41a:	4413      	add	r3, r2
 801f41c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801f420:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801f424:	9201      	str	r2, [sp, #4]
 801f426:	9300      	str	r3, [sp, #0]
 801f428:	4603      	mov	r3, r0
 801f42a:	2241      	movs	r2, #65	@ 0x41
 801f42c:	2000      	movs	r0, #0
 801f42e:	f7f5 fb37 	bl	8014aa0 <pbuf_alloced_custom>
 801f432:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801f434:	697b      	ldr	r3, [r7, #20]
 801f436:	2b00      	cmp	r3, #0
 801f438:	d106      	bne.n	801f448 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f43a:	69b8      	ldr	r0, [r7, #24]
 801f43c:	f7ff fef6 	bl	801f22c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f440:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f442:	f7f5 fd0f 	bl	8014e64 <pbuf_free>
        goto memerr;
 801f446:	e07a      	b.n	801f53e <ip4_frag+0x272>
      }
      pbuf_ref(p);
 801f448:	68f8      	ldr	r0, [r7, #12]
 801f44a:	f7f5 fdc9 	bl	8014fe0 <pbuf_ref>
      pcr->original = p;
 801f44e:	69bb      	ldr	r3, [r7, #24]
 801f450:	68fa      	ldr	r2, [r7, #12]
 801f452:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f454:	69bb      	ldr	r3, [r7, #24]
 801f456:	4a42      	ldr	r2, [pc, #264]	@ (801f560 <ip4_frag+0x294>)
 801f458:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801f45a:	6979      	ldr	r1, [r7, #20]
 801f45c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f45e:	f7f5 fde7 	bl	8015030 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f462:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801f466:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f46a:	1ad3      	subs	r3, r2, r3
 801f46c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801f470:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f474:	2b00      	cmp	r3, #0
 801f476:	d004      	beq.n	801f482 <ip4_frag+0x1b6>
        poff = 0;
 801f478:	2300      	movs	r3, #0
 801f47a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801f47c:	68fb      	ldr	r3, [r7, #12]
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801f482:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801f486:	2b00      	cmp	r3, #0
 801f488:	d196      	bne.n	801f3b8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801f48a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801f48c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801f490:	4413      	add	r3, r2
 801f492:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f494:	68bb      	ldr	r3, [r7, #8]
 801f496:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801f498:	f1a3 0213 	sub.w	r2, r3, #19
 801f49c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f4a0:	429a      	cmp	r2, r3
 801f4a2:	bfcc      	ite	gt
 801f4a4:	2301      	movgt	r3, #1
 801f4a6:	2300      	movle	r3, #0
 801f4a8:	b2db      	uxtb	r3, r3
 801f4aa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f4ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801f4b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f4b4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801f4b6:	6a3b      	ldr	r3, [r7, #32]
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d002      	beq.n	801f4c2 <ip4_frag+0x1f6>
 801f4bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d003      	beq.n	801f4ca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801f4c2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f4c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801f4c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f4ca:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801f4cc:	4618      	mov	r0, r3
 801f4ce:	f7f3 fe9b 	bl	8013208 <lwip_htons>
 801f4d2:	4603      	mov	r3, r0
 801f4d4:	461a      	mov	r2, r3
 801f4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4d8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f4da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f4dc:	3314      	adds	r3, #20
 801f4de:	b29b      	uxth	r3, r3
 801f4e0:	4618      	mov	r0, r3
 801f4e2:	f7f3 fe91 	bl	8013208 <lwip_htons>
 801f4e6:	4603      	mov	r3, r0
 801f4e8:	461a      	mov	r2, r3
 801f4ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4ec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801f4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f4f0:	2200      	movs	r2, #0
 801f4f2:	729a      	strb	r2, [r3, #10]
 801f4f4:	2200      	movs	r2, #0
 801f4f6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801f4f8:	68bb      	ldr	r3, [r7, #8]
 801f4fa:	695b      	ldr	r3, [r3, #20]
 801f4fc:	687a      	ldr	r2, [r7, #4]
 801f4fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801f500:	68b8      	ldr	r0, [r7, #8]
 801f502:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 801f504:	4b17      	ldr	r3, [pc, #92]	@ (801f564 <ip4_frag+0x298>)
 801f506:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 801f508:	3301      	adds	r3, #1
 801f50a:	b29a      	uxth	r2, r3
 801f50c:	4b15      	ldr	r3, [pc, #84]	@ (801f564 <ip4_frag+0x298>)
 801f50e:	861a      	strh	r2, [r3, #48]	@ 0x30
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801f510:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801f512:	f7f5 fca7 	bl	8014e64 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801f516:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801f51a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801f51c:	1ad3      	subs	r3, r2, r3
 801f51e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801f522:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801f526:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801f528:	4413      	add	r3, r2
 801f52a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801f52e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801f532:	2b00      	cmp	r3, #0
 801f534:	f47f af13 	bne.w	801f35e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801f538:	2300      	movs	r3, #0
 801f53a:	e002      	b.n	801f542 <ip4_frag+0x276>
      goto memerr;
 801f53c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801f53e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 801f542:	4618      	mov	r0, r3
 801f544:	3748      	adds	r7, #72	@ 0x48
 801f546:	46bd      	mov	sp, r7
 801f548:	bd80      	pop	{r7, pc}
 801f54a:	bf00      	nop
 801f54c:	080263f4 	.word	0x080263f4
 801f550:	080265d0 	.word	0x080265d0
 801f554:	0802643c 	.word	0x0802643c
 801f558:	080265ec 	.word	0x080265ec
 801f55c:	0802660c 	.word	0x0802660c
 801f560:	0801f265 	.word	0x0801f265
 801f564:	2002d36c 	.word	0x2002d36c

0801f568 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801f568:	b580      	push	{r7, lr}
 801f56a:	b086      	sub	sp, #24
 801f56c:	af00      	add	r7, sp, #0
 801f56e:	6078      	str	r0, [r7, #4]
 801f570:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801f572:	230e      	movs	r3, #14
 801f574:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801f576:	687b      	ldr	r3, [r7, #4]
 801f578:	895b      	ldrh	r3, [r3, #10]
 801f57a:	2b0e      	cmp	r3, #14
 801f57c:	d80c      	bhi.n	801f598 <ethernet_input+0x30>
    /* a packet with only an ethernet header (or less) is not valid for us */
    ETHARP_STATS_INC(etharp.proterr);
 801f57e:	4b51      	ldr	r3, [pc, #324]	@ (801f6c4 <ethernet_input+0x15c>)
 801f580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f582:	3301      	adds	r3, #1
 801f584:	b29a      	uxth	r2, r3
 801f586:	4b4f      	ldr	r3, [pc, #316]	@ (801f6c4 <ethernet_input+0x15c>)
 801f588:	851a      	strh	r2, [r3, #40]	@ 0x28
    ETHARP_STATS_INC(etharp.drop);
 801f58a:	4b4e      	ldr	r3, [pc, #312]	@ (801f6c4 <ethernet_input+0x15c>)
 801f58c:	8bdb      	ldrh	r3, [r3, #30]
 801f58e:	3301      	adds	r3, #1
 801f590:	b29a      	uxth	r2, r3
 801f592:	4b4c      	ldr	r3, [pc, #304]	@ (801f6c4 <ethernet_input+0x15c>)
 801f594:	83da      	strh	r2, [r3, #30]
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
 801f596:	e08d      	b.n	801f6b4 <ethernet_input+0x14c>
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801f598:	687b      	ldr	r3, [r7, #4]
 801f59a:	7bdb      	ldrb	r3, [r3, #15]
 801f59c:	2b00      	cmp	r3, #0
 801f59e:	d106      	bne.n	801f5ae <ethernet_input+0x46>
    p->if_idx = netif_get_index(netif);
 801f5a0:	683b      	ldr	r3, [r7, #0]
 801f5a2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f5a6:	3301      	adds	r3, #1
 801f5a8:	b2da      	uxtb	r2, r3
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801f5ae:	687b      	ldr	r3, [r7, #4]
 801f5b0:	685b      	ldr	r3, [r3, #4]
 801f5b2:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801f5b4:	693b      	ldr	r3, [r7, #16]
 801f5b6:	7b1a      	ldrb	r2, [r3, #12]
 801f5b8:	7b5b      	ldrb	r3, [r3, #13]
 801f5ba:	021b      	lsls	r3, r3, #8
 801f5bc:	4313      	orrs	r3, r2
 801f5be:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801f5c0:	693b      	ldr	r3, [r7, #16]
 801f5c2:	781b      	ldrb	r3, [r3, #0]
 801f5c4:	f003 0301 	and.w	r3, r3, #1
 801f5c8:	2b00      	cmp	r3, #0
 801f5ca:	d023      	beq.n	801f614 <ethernet_input+0xac>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801f5cc:	693b      	ldr	r3, [r7, #16]
 801f5ce:	781b      	ldrb	r3, [r3, #0]
 801f5d0:	2b01      	cmp	r3, #1
 801f5d2:	d10f      	bne.n	801f5f4 <ethernet_input+0x8c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f5d4:	693b      	ldr	r3, [r7, #16]
 801f5d6:	785b      	ldrb	r3, [r3, #1]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d11b      	bne.n	801f614 <ethernet_input+0xac>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801f5dc:	693b      	ldr	r3, [r7, #16]
 801f5de:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f5e0:	2b5e      	cmp	r3, #94	@ 0x5e
 801f5e2:	d117      	bne.n	801f614 <ethernet_input+0xac>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	7b5b      	ldrb	r3, [r3, #13]
 801f5e8:	f043 0310 	orr.w	r3, r3, #16
 801f5ec:	b2da      	uxtb	r2, r3
 801f5ee:	687b      	ldr	r3, [r7, #4]
 801f5f0:	735a      	strb	r2, [r3, #13]
 801f5f2:	e00f      	b.n	801f614 <ethernet_input+0xac>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801f5f4:	693b      	ldr	r3, [r7, #16]
 801f5f6:	2206      	movs	r2, #6
 801f5f8:	4933      	ldr	r1, [pc, #204]	@ (801f6c8 <ethernet_input+0x160>)
 801f5fa:	4618      	mov	r0, r3
 801f5fc:	f001 fdba 	bl	8021174 <memcmp>
 801f600:	4603      	mov	r3, r0
 801f602:	2b00      	cmp	r3, #0
 801f604:	d106      	bne.n	801f614 <ethernet_input+0xac>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801f606:	687b      	ldr	r3, [r7, #4]
 801f608:	7b5b      	ldrb	r3, [r3, #13]
 801f60a:	f043 0308 	orr.w	r3, r3, #8
 801f60e:	b2da      	uxtb	r2, r3
 801f610:	687b      	ldr	r3, [r7, #4]
 801f612:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801f614:	89fb      	ldrh	r3, [r7, #14]
 801f616:	2b08      	cmp	r3, #8
 801f618:	d003      	beq.n	801f622 <ethernet_input+0xba>
 801f61a:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801f61e:	d014      	beq.n	801f64a <ethernet_input+0xe2>
 801f620:	e034      	b.n	801f68c <ethernet_input+0x124>
#if LWIP_IPV4 && LWIP_ARP
    /* IP packet? */
    case PP_HTONS(ETHTYPE_IP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f622:	683b      	ldr	r3, [r7, #0]
 801f624:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801f628:	f003 0308 	and.w	r3, r3, #8
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d03c      	beq.n	801f6aa <ethernet_input+0x142>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f630:	8afb      	ldrh	r3, [r7, #22]
 801f632:	4619      	mov	r1, r3
 801f634:	6878      	ldr	r0, [r7, #4]
 801f636:	f7f5 fb87 	bl	8014d48 <pbuf_remove_header>
 801f63a:	4603      	mov	r3, r0
 801f63c:	2b00      	cmp	r3, #0
 801f63e:	d136      	bne.n	801f6ae <ethernet_input+0x146>
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        goto free_and_return;
      } else {
        /* pass to IP layer */
        ip4_input(p, netif);
 801f640:	6839      	ldr	r1, [r7, #0]
 801f642:	6878      	ldr	r0, [r7, #4]
 801f644:	f7fe fe7e 	bl	801e344 <ip4_input>
      }
      break;
 801f648:	e02d      	b.n	801f6a6 <ethernet_input+0x13e>

    case PP_HTONS(ETHTYPE_ARP):
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f64a:	683b      	ldr	r3, [r7, #0]
 801f64c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801f650:	f003 0308 	and.w	r3, r3, #8
 801f654:	2b00      	cmp	r3, #0
 801f656:	d02c      	beq.n	801f6b2 <ethernet_input+0x14a>
        goto free_and_return;
      }
      /* skip Ethernet header (min. size checked above) */
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f658:	8afb      	ldrh	r3, [r7, #22]
 801f65a:	4619      	mov	r1, r3
 801f65c:	6878      	ldr	r0, [r7, #4]
 801f65e:	f7f5 fb73 	bl	8014d48 <pbuf_remove_header>
 801f662:	4603      	mov	r3, r0
 801f664:	2b00      	cmp	r3, #0
 801f666:	d00c      	beq.n	801f682 <ethernet_input+0x11a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                    ("ethernet_input: ARP response packet dropped, too short (%"U16_F"/%"U16_F")\n",
                     p->tot_len, next_hdr_offset));
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
        ETHARP_STATS_INC(etharp.lenerr);
 801f668:	4b16      	ldr	r3, [pc, #88]	@ (801f6c4 <ethernet_input+0x15c>)
 801f66a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801f66c:	3301      	adds	r3, #1
 801f66e:	b29a      	uxth	r2, r3
 801f670:	4b14      	ldr	r3, [pc, #80]	@ (801f6c4 <ethernet_input+0x15c>)
 801f672:	845a      	strh	r2, [r3, #34]	@ 0x22
        ETHARP_STATS_INC(etharp.drop);
 801f674:	4b13      	ldr	r3, [pc, #76]	@ (801f6c4 <ethernet_input+0x15c>)
 801f676:	8bdb      	ldrh	r3, [r3, #30]
 801f678:	3301      	adds	r3, #1
 801f67a:	b29a      	uxth	r2, r3
 801f67c:	4b11      	ldr	r3, [pc, #68]	@ (801f6c4 <ethernet_input+0x15c>)
 801f67e:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 801f680:	e018      	b.n	801f6b4 <ethernet_input+0x14c>
      } else {
        /* pass p to ARP module */
        etharp_input(p, netif);
 801f682:	6839      	ldr	r1, [r7, #0]
 801f684:	6878      	ldr	r0, [r7, #4]
 801f686:	f7fd fef7 	bl	801d478 <etharp_input>
      }
      break;
 801f68a:	e00c      	b.n	801f6a6 <ethernet_input+0x13e>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 801f68c:	4b0d      	ldr	r3, [pc, #52]	@ (801f6c4 <ethernet_input+0x15c>)
 801f68e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801f690:	3301      	adds	r3, #1
 801f692:	b29a      	uxth	r2, r3
 801f694:	4b0b      	ldr	r3, [pc, #44]	@ (801f6c4 <ethernet_input+0x15c>)
 801f696:	851a      	strh	r2, [r3, #40]	@ 0x28
      ETHARP_STATS_INC(etharp.drop);
 801f698:	4b0a      	ldr	r3, [pc, #40]	@ (801f6c4 <ethernet_input+0x15c>)
 801f69a:	8bdb      	ldrh	r3, [r3, #30]
 801f69c:	3301      	adds	r3, #1
 801f69e:	b29a      	uxth	r2, r3
 801f6a0:	4b08      	ldr	r3, [pc, #32]	@ (801f6c4 <ethernet_input+0x15c>)
 801f6a2:	83da      	strh	r2, [r3, #30]
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801f6a4:	e006      	b.n	801f6b4 <ethernet_input+0x14c>
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801f6a6:	2300      	movs	r3, #0
 801f6a8:	e008      	b.n	801f6bc <ethernet_input+0x154>
        goto free_and_return;
 801f6aa:	bf00      	nop
 801f6ac:	e002      	b.n	801f6b4 <ethernet_input+0x14c>
        goto free_and_return;
 801f6ae:	bf00      	nop
 801f6b0:	e000      	b.n	801f6b4 <ethernet_input+0x14c>
        goto free_and_return;
 801f6b2:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801f6b4:	6878      	ldr	r0, [r7, #4]
 801f6b6:	f7f5 fbd5 	bl	8014e64 <pbuf_free>
  return ERR_OK;
 801f6ba:	2300      	movs	r3, #0
}
 801f6bc:	4618      	mov	r0, r3
 801f6be:	3718      	adds	r7, #24
 801f6c0:	46bd      	mov	sp, r7
 801f6c2:	bd80      	pop	{r7, pc}
 801f6c4:	2002d36c 	.word	0x2002d36c
 801f6c8:	08026dc0 	.word	0x08026dc0

0801f6cc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f6cc:	b580      	push	{r7, lr}
 801f6ce:	b086      	sub	sp, #24
 801f6d0:	af00      	add	r7, sp, #0
 801f6d2:	60f8      	str	r0, [r7, #12]
 801f6d4:	60b9      	str	r1, [r7, #8]
 801f6d6:	607a      	str	r2, [r7, #4]
 801f6d8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f6da:	8c3b      	ldrh	r3, [r7, #32]
 801f6dc:	4618      	mov	r0, r3
 801f6de:	f7f3 fd93 	bl	8013208 <lwip_htons>
 801f6e2:	4603      	mov	r3, r0
 801f6e4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f6e6:	210e      	movs	r1, #14
 801f6e8:	68b8      	ldr	r0, [r7, #8]
 801f6ea:	f7f5 fb1d 	bl	8014d28 <pbuf_add_header>
 801f6ee:	4603      	mov	r3, r0
 801f6f0:	2b00      	cmp	r3, #0
 801f6f2:	d125      	bne.n	801f740 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f6f4:	68bb      	ldr	r3, [r7, #8]
 801f6f6:	685b      	ldr	r3, [r3, #4]
 801f6f8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f6fa:	693b      	ldr	r3, [r7, #16]
 801f6fc:	8afa      	ldrh	r2, [r7, #22]
 801f6fe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f700:	693b      	ldr	r3, [r7, #16]
 801f702:	2206      	movs	r2, #6
 801f704:	6839      	ldr	r1, [r7, #0]
 801f706:	4618      	mov	r0, r3
 801f708:	f001 fe17 	bl	802133a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f70c:	693b      	ldr	r3, [r7, #16]
 801f70e:	3306      	adds	r3, #6
 801f710:	2206      	movs	r2, #6
 801f712:	6879      	ldr	r1, [r7, #4]
 801f714:	4618      	mov	r0, r3
 801f716:	f001 fe10 	bl	802133a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f71a:	68fb      	ldr	r3, [r7, #12]
 801f71c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801f720:	2b06      	cmp	r3, #6
 801f722:	d006      	beq.n	801f732 <ethernet_output+0x66>
 801f724:	4b0d      	ldr	r3, [pc, #52]	@ (801f75c <ethernet_output+0x90>)
 801f726:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801f72a:	490d      	ldr	r1, [pc, #52]	@ (801f760 <ethernet_output+0x94>)
 801f72c:	480d      	ldr	r0, [pc, #52]	@ (801f764 <ethernet_output+0x98>)
 801f72e:	f001 fbd1 	bl	8020ed4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f732:	68fb      	ldr	r3, [r7, #12]
 801f734:	699b      	ldr	r3, [r3, #24]
 801f736:	68b9      	ldr	r1, [r7, #8]
 801f738:	68f8      	ldr	r0, [r7, #12]
 801f73a:	4798      	blx	r3
 801f73c:	4603      	mov	r3, r0
 801f73e:	e008      	b.n	801f752 <ethernet_output+0x86>
      goto pbuf_header_failed;
 801f740:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
 801f742:	4b09      	ldr	r3, [pc, #36]	@ (801f768 <ethernet_output+0x9c>)
 801f744:	895b      	ldrh	r3, [r3, #10]
 801f746:	3301      	adds	r3, #1
 801f748:	b29a      	uxth	r2, r3
 801f74a:	4b07      	ldr	r3, [pc, #28]	@ (801f768 <ethernet_output+0x9c>)
 801f74c:	815a      	strh	r2, [r3, #10]
  return ERR_BUF;
 801f74e:	f06f 0301 	mvn.w	r3, #1
}
 801f752:	4618      	mov	r0, r3
 801f754:	3718      	adds	r7, #24
 801f756:	46bd      	mov	sp, r7
 801f758:	bd80      	pop	{r7, pc}
 801f75a:	bf00      	nop
 801f75c:	0802661c 	.word	0x0802661c
 801f760:	08026654 	.word	0x08026654
 801f764:	08026688 	.word	0x08026688
 801f768:	2002d36c 	.word	0x2002d36c

0801f76c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f76c:	b580      	push	{r7, lr}
 801f76e:	b082      	sub	sp, #8
 801f770:	af00      	add	r7, sp, #0
 801f772:	6078      	str	r0, [r7, #4]
 801f774:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801f776:	683b      	ldr	r3, [r7, #0]
 801f778:	2200      	movs	r2, #0
 801f77a:	2104      	movs	r1, #4
 801f77c:	4618      	mov	r0, r3
 801f77e:	f7ed fe19 	bl	800d3b4 <osMessageQueueNew>
 801f782:	4602      	mov	r2, r0
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	601a      	str	r2, [r3, #0]
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 801f788:	4b10      	ldr	r3, [pc, #64]	@ (801f7cc <sys_mbox_new+0x60>)
 801f78a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f78e:	3301      	adds	r3, #1
 801f790:	b29a      	uxth	r2, r3
 801f792:	4b0e      	ldr	r3, [pc, #56]	@ (801f7cc <sys_mbox_new+0x60>)
 801f794:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 801f798:	4b0c      	ldr	r3, [pc, #48]	@ (801f7cc <sys_mbox_new+0x60>)
 801f79a:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 801f79e:	4b0b      	ldr	r3, [pc, #44]	@ (801f7cc <sys_mbox_new+0x60>)
 801f7a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f7a4:	429a      	cmp	r2, r3
 801f7a6:	d205      	bcs.n	801f7b4 <sys_mbox_new+0x48>
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 801f7a8:	4b08      	ldr	r3, [pc, #32]	@ (801f7cc <sys_mbox_new+0x60>)
 801f7aa:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	@ 0xf8
 801f7ae:	4b07      	ldr	r3, [pc, #28]	@ (801f7cc <sys_mbox_new+0x60>)
 801f7b0:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	681b      	ldr	r3, [r3, #0]
 801f7b8:	2b00      	cmp	r3, #0
 801f7ba:	d102      	bne.n	801f7c2 <sys_mbox_new+0x56>
    return ERR_MEM;
 801f7bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f7c0:	e000      	b.n	801f7c4 <sys_mbox_new+0x58>

  return ERR_OK;
 801f7c2:	2300      	movs	r3, #0
}
 801f7c4:	4618      	mov	r0, r3
 801f7c6:	3708      	adds	r7, #8
 801f7c8:	46bd      	mov	sp, r7
 801f7ca:	bd80      	pop	{r7, pc}
 801f7cc:	2002d36c 	.word	0x2002d36c

0801f7d0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801f7d0:	b580      	push	{r7, lr}
 801f7d2:	b082      	sub	sp, #8
 801f7d4:	af00      	add	r7, sp, #0
 801f7d6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801f7d8:	687b      	ldr	r3, [r7, #4]
 801f7da:	681b      	ldr	r3, [r3, #0]
 801f7dc:	4618      	mov	r0, r3
 801f7de:	f7ed ff55 	bl	800d68c <osMessageQueueGetCount>
 801f7e2:	4603      	mov	r3, r0
 801f7e4:	2b00      	cmp	r3, #0
 801f7e6:	d007      	beq.n	801f7f8 <sys_mbox_free+0x28>
#endif
  {
    /* Line for breakpoint.  Should never break here! */
    portNOP();
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801f7e8:	4b0c      	ldr	r3, [pc, #48]	@ (801f81c <sys_mbox_free+0x4c>)
 801f7ea:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801f7ee:	3301      	adds	r3, #1
 801f7f0:	b29a      	uxth	r2, r3
 801f7f2:	4b0a      	ldr	r3, [pc, #40]	@ (801f81c <sys_mbox_free+0x4c>)
 801f7f4:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	4618      	mov	r0, r3
 801f7fe:	f7ed ff77 	bl	800d6f0 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
 801f802:	4b06      	ldr	r3, [pc, #24]	@ (801f81c <sys_mbox_free+0x4c>)
 801f804:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 801f808:	3b01      	subs	r3, #1
 801f80a:	b29a      	uxth	r2, r3
 801f80c:	4b03      	ldr	r3, [pc, #12]	@ (801f81c <sys_mbox_free+0x4c>)
 801f80e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
#endif /* SYS_STATS */
}
 801f812:	bf00      	nop
 801f814:	3708      	adds	r7, #8
 801f816:	46bd      	mov	sp, r7
 801f818:	bd80      	pop	{r7, pc}
 801f81a:	bf00      	nop
 801f81c:	2002d36c 	.word	0x2002d36c

0801f820 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f820:	b580      	push	{r7, lr}
 801f822:	b084      	sub	sp, #16
 801f824:	af00      	add	r7, sp, #0
 801f826:	6078      	str	r0, [r7, #4]
 801f828:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	6818      	ldr	r0, [r3, #0]
 801f82e:	4639      	mov	r1, r7
 801f830:	2300      	movs	r3, #0
 801f832:	2200      	movs	r2, #0
 801f834:	f7ed fe44 	bl	800d4c0 <osMessageQueuePut>
 801f838:	4603      	mov	r3, r0
 801f83a:	2b00      	cmp	r3, #0
 801f83c:	d102      	bne.n	801f844 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801f83e:	2300      	movs	r3, #0
 801f840:	73fb      	strb	r3, [r7, #15]
 801f842:	e009      	b.n	801f858 <sys_mbox_trypost+0x38>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801f844:	23ff      	movs	r3, #255	@ 0xff
 801f846:	73fb      	strb	r3, [r7, #15]

#if SYS_STATS
    lwip_stats.sys.mbox.err++;
 801f848:	4b06      	ldr	r3, [pc, #24]	@ (801f864 <sys_mbox_trypost+0x44>)
 801f84a:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	@ 0xfc
 801f84e:	3301      	adds	r3, #1
 801f850:	b29a      	uxth	r2, r3
 801f852:	4b04      	ldr	r3, [pc, #16]	@ (801f864 <sys_mbox_trypost+0x44>)
 801f854:	f8a3 20fc 	strh.w	r2, [r3, #252]	@ 0xfc
#endif /* SYS_STATS */
  }

  return result;
 801f858:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f85c:	4618      	mov	r0, r3
 801f85e:	3710      	adds	r7, #16
 801f860:	46bd      	mov	sp, r7
 801f862:	bd80      	pop	{r7, pc}
 801f864:	2002d36c 	.word	0x2002d36c

0801f868 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f868:	b580      	push	{r7, lr}
 801f86a:	b086      	sub	sp, #24
 801f86c:	af00      	add	r7, sp, #0
 801f86e:	60f8      	str	r0, [r7, #12]
 801f870:	60b9      	str	r1, [r7, #8]
 801f872:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801f874:	f7ed f9c2 	bl	800cbfc <osKernelGetTickCount>
 801f878:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801f87a:	687b      	ldr	r3, [r7, #4]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	d013      	beq.n	801f8a8 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	6818      	ldr	r0, [r3, #0]
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	2200      	movs	r2, #0
 801f888:	68b9      	ldr	r1, [r7, #8]
 801f88a:	f7ed fe8d 	bl	800d5a8 <osMessageQueueGet>
 801f88e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801f890:	693b      	ldr	r3, [r7, #16]
 801f892:	2b00      	cmp	r3, #0
 801f894:	d105      	bne.n	801f8a2 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801f896:	f7ed f9b1 	bl	800cbfc <osKernelGetTickCount>
 801f89a:	4602      	mov	r2, r0
 801f89c:	697b      	ldr	r3, [r7, #20]
 801f89e:	1ad3      	subs	r3, r2, r3
 801f8a0:	e00f      	b.n	801f8c2 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f8a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8a6:	e00c      	b.n	801f8c2 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801f8a8:	68fb      	ldr	r3, [r7, #12]
 801f8aa:	6818      	ldr	r0, [r3, #0]
 801f8ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8b0:	2200      	movs	r2, #0
 801f8b2:	68b9      	ldr	r1, [r7, #8]
 801f8b4:	f7ed fe78 	bl	800d5a8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801f8b8:	f7ed f9a0 	bl	800cbfc <osKernelGetTickCount>
 801f8bc:	4602      	mov	r2, r0
 801f8be:	697b      	ldr	r3, [r7, #20]
 801f8c0:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801f8c2:	4618      	mov	r0, r3
 801f8c4:	3718      	adds	r7, #24
 801f8c6:	46bd      	mov	sp, r7
 801f8c8:	bd80      	pop	{r7, pc}

0801f8ca <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801f8ca:	b580      	push	{r7, lr}
 801f8cc:	b082      	sub	sp, #8
 801f8ce:	af00      	add	r7, sp, #0
 801f8d0:	6078      	str	r0, [r7, #4]
 801f8d2:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801f8d4:	687b      	ldr	r3, [r7, #4]
 801f8d6:	6818      	ldr	r0, [r3, #0]
 801f8d8:	2300      	movs	r3, #0
 801f8da:	2200      	movs	r2, #0
 801f8dc:	6839      	ldr	r1, [r7, #0]
 801f8de:	f7ed fe63 	bl	800d5a8 <osMessageQueueGet>
 801f8e2:	4603      	mov	r3, r0
 801f8e4:	2b00      	cmp	r3, #0
 801f8e6:	d101      	bne.n	801f8ec <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801f8e8:	2300      	movs	r3, #0
 801f8ea:	e001      	b.n	801f8f0 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801f8ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  }
}
 801f8f0:	4618      	mov	r0, r3
 801f8f2:	3708      	adds	r7, #8
 801f8f4:	46bd      	mov	sp, r7
 801f8f6:	bd80      	pop	{r7, pc}

0801f8f8 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801f8f8:	b480      	push	{r7}
 801f8fa:	b083      	sub	sp, #12
 801f8fc:	af00      	add	r7, sp, #0
 801f8fe:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	2b00      	cmp	r3, #0
 801f906:	d101      	bne.n	801f90c <sys_mbox_valid+0x14>
    return 0;
 801f908:	2300      	movs	r3, #0
 801f90a:	e000      	b.n	801f90e <sys_mbox_valid+0x16>
  else
    return 1;
 801f90c:	2301      	movs	r3, #1
}
 801f90e:	4618      	mov	r0, r3
 801f910:	370c      	adds	r7, #12
 801f912:	46bd      	mov	sp, r7
 801f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f918:	4770      	bx	lr

0801f91a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801f91a:	b480      	push	{r7}
 801f91c:	b083      	sub	sp, #12
 801f91e:	af00      	add	r7, sp, #0
 801f920:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	2200      	movs	r2, #0
 801f926:	601a      	str	r2, [r3, #0]
}
 801f928:	bf00      	nop
 801f92a:	370c      	adds	r7, #12
 801f92c:	46bd      	mov	sp, r7
 801f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f932:	4770      	bx	lr

0801f934 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801f934:	b580      	push	{r7, lr}
 801f936:	b082      	sub	sp, #8
 801f938:	af00      	add	r7, sp, #0
 801f93a:	6078      	str	r0, [r7, #4]
 801f93c:	460b      	mov	r3, r1
 801f93e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801f940:	78fb      	ldrb	r3, [r7, #3]
 801f942:	2200      	movs	r2, #0
 801f944:	4619      	mov	r1, r3
 801f946:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801f94a:	f7ed fba3 	bl	800d094 <osSemaphoreNew>
 801f94e:	4602      	mov	r2, r0
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	681b      	ldr	r3, [r3, #0]
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d10a      	bne.n	801f972 <sys_sem_new+0x3e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
 801f95c:	4b17      	ldr	r3, [pc, #92]	@ (801f9bc <sys_sem_new+0x88>)
 801f95e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 801f962:	3301      	adds	r3, #1
 801f964:	b29a      	uxth	r2, r3
 801f966:	4b15      	ldr	r3, [pc, #84]	@ (801f9bc <sys_sem_new+0x88>)
 801f968:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
#endif /* SYS_STATS */
    return ERR_MEM;
 801f96c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f970:	e01f      	b.n	801f9b2 <sys_sem_new+0x7e>
  }

  if(count == 0)	// Means it can't be taken
 801f972:	78fb      	ldrb	r3, [r7, #3]
 801f974:	2b00      	cmp	r3, #0
 801f976:	d105      	bne.n	801f984 <sys_sem_new+0x50>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801f978:	687b      	ldr	r3, [r7, #4]
 801f97a:	681b      	ldr	r3, [r3, #0]
 801f97c:	2100      	movs	r1, #0
 801f97e:	4618      	mov	r0, r3
 801f980:	f7ed fc24 	bl	800d1cc <osSemaphoreAcquire>
#endif
  }

#if SYS_STATS
  ++lwip_stats.sys.sem.used;
 801f984:	4b0d      	ldr	r3, [pc, #52]	@ (801f9bc <sys_sem_new+0x88>)
 801f986:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801f98a:	3301      	adds	r3, #1
 801f98c:	b29a      	uxth	r2, r3
 801f98e:	4b0b      	ldr	r3, [pc, #44]	@ (801f9bc <sys_sem_new+0x88>)
 801f990:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
 801f994:	4b09      	ldr	r3, [pc, #36]	@ (801f9bc <sys_sem_new+0x88>)
 801f996:	f8b3 20ee 	ldrh.w	r2, [r3, #238]	@ 0xee
 801f99a:	4b08      	ldr	r3, [pc, #32]	@ (801f9bc <sys_sem_new+0x88>)
 801f99c:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801f9a0:	429a      	cmp	r2, r3
 801f9a2:	d205      	bcs.n	801f9b0 <sys_sem_new+0x7c>
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
 801f9a4:	4b05      	ldr	r3, [pc, #20]	@ (801f9bc <sys_sem_new+0x88>)
 801f9a6:	f8b3 20ec 	ldrh.w	r2, [r3, #236]	@ 0xec
 801f9aa:	4b04      	ldr	r3, [pc, #16]	@ (801f9bc <sys_sem_new+0x88>)
 801f9ac:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801f9b0:	2300      	movs	r3, #0
}
 801f9b2:	4618      	mov	r0, r3
 801f9b4:	3708      	adds	r7, #8
 801f9b6:	46bd      	mov	sp, r7
 801f9b8:	bd80      	pop	{r7, pc}
 801f9ba:	bf00      	nop
 801f9bc:	2002d36c 	.word	0x2002d36c

0801f9c0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801f9c0:	b580      	push	{r7, lr}
 801f9c2:	b084      	sub	sp, #16
 801f9c4:	af00      	add	r7, sp, #0
 801f9c6:	6078      	str	r0, [r7, #4]
 801f9c8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801f9ca:	f7ed f917 	bl	800cbfc <osKernelGetTickCount>
 801f9ce:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801f9d0:	683b      	ldr	r3, [r7, #0]
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	d011      	beq.n	801f9fa <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801f9d6:	687b      	ldr	r3, [r7, #4]
 801f9d8:	681b      	ldr	r3, [r3, #0]
 801f9da:	6839      	ldr	r1, [r7, #0]
 801f9dc:	4618      	mov	r0, r3
 801f9de:	f7ed fbf5 	bl	800d1cc <osSemaphoreAcquire>
 801f9e2:	4603      	mov	r3, r0
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	d105      	bne.n	801f9f4 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801f9e8:	f7ed f908 	bl	800cbfc <osKernelGetTickCount>
 801f9ec:	4602      	mov	r2, r0
 801f9ee:	68fb      	ldr	r3, [r7, #12]
 801f9f0:	1ad3      	subs	r3, r2, r3
 801f9f2:	e012      	b.n	801fa1a <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f9f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f9f8:	e00f      	b.n	801fa1a <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801f9fa:	bf00      	nop
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fa04:	4618      	mov	r0, r3
 801fa06:	f7ed fbe1 	bl	800d1cc <osSemaphoreAcquire>
 801fa0a:	4603      	mov	r3, r0
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	d1f5      	bne.n	801f9fc <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801fa10:	f7ed f8f4 	bl	800cbfc <osKernelGetTickCount>
 801fa14:	4602      	mov	r2, r0
 801fa16:	68fb      	ldr	r3, [r7, #12]
 801fa18:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801fa1a:	4618      	mov	r0, r3
 801fa1c:	3710      	adds	r7, #16
 801fa1e:	46bd      	mov	sp, r7
 801fa20:	bd80      	pop	{r7, pc}

0801fa22 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801fa22:	b580      	push	{r7, lr}
 801fa24:	b082      	sub	sp, #8
 801fa26:	af00      	add	r7, sp, #0
 801fa28:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801fa2a:	687b      	ldr	r3, [r7, #4]
 801fa2c:	681b      	ldr	r3, [r3, #0]
 801fa2e:	4618      	mov	r0, r3
 801fa30:	f7ed fc32 	bl	800d298 <osSemaphoreRelease>
}
 801fa34:	bf00      	nop
 801fa36:	3708      	adds	r7, #8
 801fa38:	46bd      	mov	sp, r7
 801fa3a:	bd80      	pop	{r7, pc}

0801fa3c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801fa3c:	b580      	push	{r7, lr}
 801fa3e:	b082      	sub	sp, #8
 801fa40:	af00      	add	r7, sp, #0
 801fa42:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
 801fa44:	4b08      	ldr	r3, [pc, #32]	@ (801fa68 <sys_sem_free+0x2c>)
 801fa46:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 801fa4a:	3b01      	subs	r3, #1
 801fa4c:	b29a      	uxth	r2, r3
 801fa4e:	4b06      	ldr	r3, [pc, #24]	@ (801fa68 <sys_sem_free+0x2c>)
 801fa50:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	681b      	ldr	r3, [r3, #0]
 801fa58:	4618      	mov	r0, r3
 801fa5a:	f7ed fc75 	bl	800d348 <osSemaphoreDelete>
}
 801fa5e:	bf00      	nop
 801fa60:	3708      	adds	r7, #8
 801fa62:	46bd      	mov	sp, r7
 801fa64:	bd80      	pop	{r7, pc}
 801fa66:	bf00      	nop
 801fa68:	2002d36c 	.word	0x2002d36c

0801fa6c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801fa6c:	b480      	push	{r7}
 801fa6e:	b083      	sub	sp, #12
 801fa70:	af00      	add	r7, sp, #0
 801fa72:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	681b      	ldr	r3, [r3, #0]
 801fa78:	2b00      	cmp	r3, #0
 801fa7a:	d101      	bne.n	801fa80 <sys_sem_valid+0x14>
    return 0;
 801fa7c:	2300      	movs	r3, #0
 801fa7e:	e000      	b.n	801fa82 <sys_sem_valid+0x16>
  else
    return 1;
 801fa80:	2301      	movs	r3, #1
}
 801fa82:	4618      	mov	r0, r3
 801fa84:	370c      	adds	r7, #12
 801fa86:	46bd      	mov	sp, r7
 801fa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa8c:	4770      	bx	lr

0801fa8e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801fa8e:	b480      	push	{r7}
 801fa90:	b083      	sub	sp, #12
 801fa92:	af00      	add	r7, sp, #0
 801fa94:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801fa96:	687b      	ldr	r3, [r7, #4]
 801fa98:	2200      	movs	r2, #0
 801fa9a:	601a      	str	r2, [r3, #0]
}
 801fa9c:	bf00      	nop
 801fa9e:	370c      	adds	r7, #12
 801faa0:	46bd      	mov	sp, r7
 801faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faa6:	4770      	bx	lr

0801faa8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801faa8:	b580      	push	{r7, lr}
 801faaa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801faac:	2000      	movs	r0, #0
 801faae:	f7ed f9a9 	bl	800ce04 <osMutexNew>
 801fab2:	4603      	mov	r3, r0
 801fab4:	4a01      	ldr	r2, [pc, #4]	@ (801fabc <sys_init+0x14>)
 801fab6:	6013      	str	r3, [r2, #0]
#endif
}
 801fab8:	bf00      	nop
 801faba:	bd80      	pop	{r7, pc}
 801fabc:	2002d5cc 	.word	0x2002d5cc

0801fac0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801fac0:	b580      	push	{r7, lr}
 801fac2:	b082      	sub	sp, #8
 801fac4:	af00      	add	r7, sp, #0
 801fac6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801fac8:	2000      	movs	r0, #0
 801faca:	f7ed f99b 	bl	800ce04 <osMutexNew>
 801face:	4602      	mov	r2, r0
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	681b      	ldr	r3, [r3, #0]
 801fad8:	2b00      	cmp	r3, #0
 801fada:	d10a      	bne.n	801faf2 <sys_mutex_new+0x32>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 801fadc:	4b12      	ldr	r3, [pc, #72]	@ (801fb28 <sys_mutex_new+0x68>)
 801fade:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	@ 0xf6
 801fae2:	3301      	adds	r3, #1
 801fae4:	b29a      	uxth	r2, r3
 801fae6:	4b10      	ldr	r3, [pc, #64]	@ (801fb28 <sys_mutex_new+0x68>)
 801fae8:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
#endif /* SYS_STATS */
    return ERR_MEM;
 801faec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801faf0:	e016      	b.n	801fb20 <sys_mutex_new+0x60>
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 801faf2:	4b0d      	ldr	r3, [pc, #52]	@ (801fb28 <sys_mutex_new+0x68>)
 801faf4:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801faf8:	3301      	adds	r3, #1
 801fafa:	b29a      	uxth	r2, r3
 801fafc:	4b0a      	ldr	r3, [pc, #40]	@ (801fb28 <sys_mutex_new+0x68>)
 801fafe:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 801fb02:	4b09      	ldr	r3, [pc, #36]	@ (801fb28 <sys_mutex_new+0x68>)
 801fb04:	f8b3 20f4 	ldrh.w	r2, [r3, #244]	@ 0xf4
 801fb08:	4b07      	ldr	r3, [pc, #28]	@ (801fb28 <sys_mutex_new+0x68>)
 801fb0a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 801fb0e:	429a      	cmp	r2, r3
 801fb10:	d205      	bcs.n	801fb1e <sys_mutex_new+0x5e>
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 801fb12:	4b05      	ldr	r3, [pc, #20]	@ (801fb28 <sys_mutex_new+0x68>)
 801fb14:	f8b3 20f2 	ldrh.w	r2, [r3, #242]	@ 0xf2
 801fb18:	4b03      	ldr	r3, [pc, #12]	@ (801fb28 <sys_mutex_new+0x68>)
 801fb1a:	f8a3 20f4 	strh.w	r2, [r3, #244]	@ 0xf4
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801fb1e:	2300      	movs	r3, #0
}
 801fb20:	4618      	mov	r0, r3
 801fb22:	3708      	adds	r7, #8
 801fb24:	46bd      	mov	sp, r7
 801fb26:	bd80      	pop	{r7, pc}
 801fb28:	2002d36c 	.word	0x2002d36c

0801fb2c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801fb2c:	b580      	push	{r7, lr}
 801fb2e:	b082      	sub	sp, #8
 801fb30:	af00      	add	r7, sp, #0
 801fb32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801fb34:	687b      	ldr	r3, [r7, #4]
 801fb36:	681b      	ldr	r3, [r3, #0]
 801fb38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fb3c:	4618      	mov	r0, r3
 801fb3e:	f7ed f9fb 	bl	800cf38 <osMutexAcquire>
#endif
}
 801fb42:	bf00      	nop
 801fb44:	3708      	adds	r7, #8
 801fb46:	46bd      	mov	sp, r7
 801fb48:	bd80      	pop	{r7, pc}

0801fb4a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801fb4a:	b580      	push	{r7, lr}
 801fb4c:	b082      	sub	sp, #8
 801fb4e:	af00      	add	r7, sp, #0
 801fb50:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	681b      	ldr	r3, [r3, #0]
 801fb56:	4618      	mov	r0, r3
 801fb58:	f7ed fa4c 	bl	800cff4 <osMutexRelease>
}
 801fb5c:	bf00      	nop
 801fb5e:	3708      	adds	r7, #8
 801fb60:	46bd      	mov	sp, r7
 801fb62:	bd80      	pop	{r7, pc}

0801fb64 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801fb64:	b580      	push	{r7, lr}
 801fb66:	b08e      	sub	sp, #56	@ 0x38
 801fb68:	af00      	add	r7, sp, #0
 801fb6a:	60f8      	str	r0, [r7, #12]
 801fb6c:	60b9      	str	r1, [r7, #8]
 801fb6e:	607a      	str	r2, [r7, #4]
 801fb70:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801fb72:	f107 0314 	add.w	r3, r7, #20
 801fb76:	2224      	movs	r2, #36	@ 0x24
 801fb78:	2100      	movs	r1, #0
 801fb7a:	4618      	mov	r0, r3
 801fb7c:	f001 fb0a 	bl	8021194 <memset>
 801fb80:	68fb      	ldr	r3, [r7, #12]
 801fb82:	617b      	str	r3, [r7, #20]
 801fb84:	683b      	ldr	r3, [r7, #0]
 801fb86:	62bb      	str	r3, [r7, #40]	@ 0x28
 801fb88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801fb8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801fb8c:	f107 0314 	add.w	r3, r7, #20
 801fb90:	461a      	mov	r2, r3
 801fb92:	6879      	ldr	r1, [r7, #4]
 801fb94:	68b8      	ldr	r0, [r7, #8]
 801fb96:	f7ed f859 	bl	800cc4c <osThreadNew>
 801fb9a:	4603      	mov	r3, r0
#endif
}
 801fb9c:	4618      	mov	r0, r3
 801fb9e:	3738      	adds	r7, #56	@ 0x38
 801fba0:	46bd      	mov	sp, r7
 801fba2:	bd80      	pop	{r7, pc}

0801fba4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801fba4:	b580      	push	{r7, lr}
 801fba6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801fba8:	4b04      	ldr	r3, [pc, #16]	@ (801fbbc <sys_arch_protect+0x18>)
 801fbaa:	681b      	ldr	r3, [r3, #0]
 801fbac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801fbb0:	4618      	mov	r0, r3
 801fbb2:	f7ed f9c1 	bl	800cf38 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801fbb6:	2301      	movs	r3, #1
}
 801fbb8:	4618      	mov	r0, r3
 801fbba:	bd80      	pop	{r7, pc}
 801fbbc:	2002d5cc 	.word	0x2002d5cc

0801fbc0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801fbc0:	b580      	push	{r7, lr}
 801fbc2:	b082      	sub	sp, #8
 801fbc4:	af00      	add	r7, sp, #0
 801fbc6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801fbc8:	4b04      	ldr	r3, [pc, #16]	@ (801fbdc <sys_arch_unprotect+0x1c>)
 801fbca:	681b      	ldr	r3, [r3, #0]
 801fbcc:	4618      	mov	r0, r3
 801fbce:	f7ed fa11 	bl	800cff4 <osMutexRelease>
}
 801fbd2:	bf00      	nop
 801fbd4:	3708      	adds	r7, #8
 801fbd6:	46bd      	mov	sp, r7
 801fbd8:	bd80      	pop	{r7, pc}
 801fbda:	bf00      	nop
 801fbdc:	2002d5cc 	.word	0x2002d5cc

0801fbe0 <AdcTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void AdcTestTask(void)
{
 801fbe0:	b580      	push	{r7, lr}
 801fbe2:	b0ca      	sub	sp, #296	@ 0x128
 801fbe4:	af00      	add	r7, sp, #0
	osStatus_t status;

	while (1)
	{
		//printf("adc waiting for messages\n");
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, 10);
 801fbe6:	4b3a      	ldr	r3, [pc, #232]	@ (801fcd0 <AdcTestTask+0xf0>)
 801fbe8:	6818      	ldr	r0, [r3, #0]
 801fbea:	f107 0110 	add.w	r1, r7, #16
 801fbee:	230a      	movs	r3, #10
 801fbf0:	2200      	movs	r2, #0
 801fbf2:	f7ed fcd9 	bl	800d5a8 <osMessageQueueGet>
 801fbf6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 801fbfa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d153      	bne.n	801fcaa <AdcTestTask+0xca>
		{
			printf("adc received test ID: %lu\n", test_data.test_id);
 801fc02:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc06:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801fc0a:	689b      	ldr	r3, [r3, #8]
 801fc0c:	4619      	mov	r1, r3
 801fc0e:	4831      	ldr	r0, [pc, #196]	@ (801fcd4 <AdcTestTask+0xf4>)
 801fc10:	f001 f960 	bl	8020ed4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fc14:	2300      	movs	r3, #0
 801fc16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fc1a:	e00d      	b.n	801fc38 <AdcTestTask+0x58>
			{
				result = ADC_Test_Perform();
 801fc1c:	f000 f860 	bl	801fce0 <ADC_Test_Perform>
 801fc20:	4603      	mov	r3, r0
 801fc22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 801fc26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801fc2a:	2bff      	cmp	r3, #255	@ 0xff
 801fc2c:	d00e      	beq.n	801fc4c <AdcTestTask+0x6c>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 801fc2e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801fc32:	3301      	adds	r3, #1
 801fc34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801fc38:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801fc40:	7b1b      	ldrb	r3, [r3, #12]
 801fc42:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 801fc46:	429a      	cmp	r2, r3
 801fc48:	d3e8      	bcc.n	801fc1c <AdcTestTask+0x3c>
 801fc4a:	e000      	b.n	801fc4e <AdcTestTask+0x6e>
					break;
 801fc4c:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 801fc4e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc52:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801fc56:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 801fc5a:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 801fc5e:	6812      	ldr	r2, [r2, #0]
 801fc60:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 801fc62:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc66:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801fc6a:	889a      	ldrh	r2, [r3, #4]
 801fc6c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc70:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801fc74:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 801fc76:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc7a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 801fc7e:	689a      	ldr	r2, [r3, #8]
 801fc80:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc84:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801fc88:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 801fc8a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801fc8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801fc92:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 801fc96:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 801fc98:	4b0f      	ldr	r3, [pc, #60]	@ (801fcd8 <AdcTestTask+0xf8>)
 801fc9a:	6818      	ldr	r0, [r3, #0]
 801fc9c:	4639      	mov	r1, r7
 801fc9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fca2:	2200      	movs	r2, #0
 801fca4:	f7ed fc0c 	bl	800d4c0 <osMessageQueuePut>
 801fca8:	e79d      	b.n	801fbe6 <AdcTestTask+0x6>
		}
		else if (status == osErrorTimeout)
 801fcaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801fcae:	f113 0f02 	cmn.w	r3, #2
 801fcb2:	d103      	bne.n	801fcbc <AdcTestTask+0xdc>
		{
			osDelay(1);
 801fcb4:	2001      	movs	r0, #1
 801fcb6:	f7ed f877 	bl	800cda8 <osDelay>
 801fcba:	e794      	b.n	801fbe6 <AdcTestTask+0x6>
		}
		else
		{
			printf("adc msg read error: %d\n", status);
 801fcbc:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 801fcc0:	4806      	ldr	r0, [pc, #24]	@ (801fcdc <AdcTestTask+0xfc>)
 801fcc2:	f001 f907 	bl	8020ed4 <iprintf>
			osDelay(1);
 801fcc6:	2001      	movs	r0, #1
 801fcc8:	f7ed f86e 	bl	800cda8 <osDelay>
		status = osMessageQueueGet(adcQueueHandle, &test_data, 0, 10);
 801fccc:	e78b      	b.n	801fbe6 <AdcTestTask+0x6>
 801fcce:	bf00      	nop
 801fcd0:	20000334 	.word	0x20000334
 801fcd4:	080266b0 	.word	0x080266b0
 801fcd8:	20000324 	.word	0x20000324
 801fcdc:	080266cc 	.word	0x080266cc

0801fce0 <ADC_Test_Perform>:
		}
	}
}

uint8_t ADC_Test_Perform(void)
{
 801fce0:	b580      	push	{r7, lr}
 801fce2:	b082      	sub	sp, #8
 801fce4:	af00      	add	r7, sp, #0
	printf("Performing adc test\n");
#endif

	HAL_StatusTypeDef status;

	status = HAL_ADC_Start_DMA(&hadc1,(uint32_t*)adc_buf,1);
 801fce6:	2201      	movs	r2, #1
 801fce8:	490f      	ldr	r1, [pc, #60]	@ (801fd28 <ADC_Test_Perform+0x48>)
 801fcea:	4810      	ldr	r0, [pc, #64]	@ (801fd2c <ADC_Test_Perform+0x4c>)
 801fcec:	f7e2 fc50 	bl	8002590 <HAL_ADC_Start_DMA>
 801fcf0:	4603      	mov	r3, r0
 801fcf2:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK)
 801fcf4:	79fb      	ldrb	r3, [r7, #7]
 801fcf6:	2b00      	cmp	r3, #0
 801fcf8:	d001      	beq.n	801fcfe <ADC_Test_Perform+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Start_DMA failed\n");
#endif
		return TEST_FAILED;
 801fcfa:	23ff      	movs	r3, #255	@ 0xff
 801fcfc:	e00f      	b.n	801fd1e <ADC_Test_Perform+0x3e>
	}

	while (!adc_ready);
 801fcfe:	bf00      	nop
 801fd00:	4b0b      	ldr	r3, [pc, #44]	@ (801fd30 <ADC_Test_Perform+0x50>)
 801fd02:	681b      	ldr	r3, [r3, #0]
 801fd04:	2b00      	cmp	r3, #0
 801fd06:	d0fb      	beq.n	801fd00 <ADC_Test_Perform+0x20>
	adc_ready=0;
 801fd08:	4b09      	ldr	r3, [pc, #36]	@ (801fd30 <ADC_Test_Perform+0x50>)
 801fd0a:	2200      	movs	r2, #0
 801fd0c:	601a      	str	r2, [r3, #0]

#ifdef PRINT_TESTS_DEBUG
	printf("adc value = %d\n",adc_buf[0]);
#endif

	if(adc_buf[0] >= EXPECTED_3V3 - ERR_TOLERANCE_3V3) return TEST_SUCCESS;
 801fd0e:	4b06      	ldr	r3, [pc, #24]	@ (801fd28 <ADC_Test_Perform+0x48>)
 801fd10:	881b      	ldrh	r3, [r3, #0]
 801fd12:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 801fd16:	d301      	bcc.n	801fd1c <ADC_Test_Perform+0x3c>
 801fd18:	2301      	movs	r3, #1
 801fd1a:	e000      	b.n	801fd1e <ADC_Test_Perform+0x3e>

	return TEST_FAILED;
 801fd1c:	23ff      	movs	r3, #255	@ 0xff
}
 801fd1e:	4618      	mov	r0, r3
 801fd20:	3708      	adds	r7, #8
 801fd22:	46bd      	mov	sp, r7
 801fd24:	bd80      	pop	{r7, pc}
 801fd26:	bf00      	nop
 801fd28:	2002d5d0 	.word	0x2002d5d0
 801fd2c:	2000022c 	.word	0x2000022c
 801fd30:	2002d7d0 	.word	0x2002d7d0

0801fd34 <HAL_ADC_ConvCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801fd34:	b580      	push	{r7, lr}
 801fd36:	b082      	sub	sp, #8
 801fd38:	af00      	add	r7, sp, #0
 801fd3a:	6078      	str	r0, [r7, #4]
	adc_ready=1;
 801fd3c:	4b07      	ldr	r3, [pc, #28]	@ (801fd5c <HAL_ADC_ConvCpltCallback+0x28>)
 801fd3e:	2201      	movs	r2, #1
 801fd40:	601a      	str	r2, [r3, #0]
	if(HAL_ADC_Stop_DMA(&hadc1) != HAL_OK)
 801fd42:	4807      	ldr	r0, [pc, #28]	@ (801fd60 <HAL_ADC_ConvCpltCallback+0x2c>)
 801fd44:	f7e2 fd22 	bl	800278c <HAL_ADC_Stop_DMA>
 801fd48:	4603      	mov	r3, r0
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d001      	beq.n	801fd52 <HAL_ADC_ConvCpltCallback+0x1e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("ADC_Stop_DMA failed\n");
#endif
		Error_Handler();
 801fd4e:	f7e1 faef 	bl	8001330 <Error_Handler>
	}
}
 801fd52:	bf00      	nop
 801fd54:	3708      	adds	r7, #8
 801fd56:	46bd      	mov	sp, r7
 801fd58:	bd80      	pop	{r7, pc}
 801fd5a:	bf00      	nop
 801fd5c:	2002d7d0 	.word	0x2002d7d0
 801fd60:	2000022c 	.word	0x2000022c

0801fd64 <TestDispatcher>:
extern osMessageQueueId_t spiQueueHandle;
extern osMessageQueueId_t adcQueueHandle;
extern osMessageQueueId_t timQueueHandle;

void TestDispatcher(void)
{
 801fd64:	b580      	push	{r7, lr}
 801fd66:	f5ad 7d08 	sub.w	sp, sp, #544	@ 0x220
 801fd6a:	af00      	add	r7, sp, #0
	while(1)
	{
		InMsg_t in_msg;
		TestData_t test_data;

		if(osMessageQueueGet(inMsgQueueHandle, &in_msg, 0, osWaitForever) == osOK)
 801fd6c:	4b74      	ldr	r3, [pc, #464]	@ (801ff40 <TestDispatcher+0x1dc>)
 801fd6e:	6818      	ldr	r0, [r3, #0]
 801fd70:	4639      	mov	r1, r7
 801fd72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801fd76:	2200      	movs	r2, #0
 801fd78:	f7ed fc16 	bl	800d5a8 <osMessageQueueGet>
 801fd7c:	4603      	mov	r3, r0
 801fd7e:	2b00      	cmp	r3, #0
 801fd80:	d1f4      	bne.n	801fd6c <TestDispatcher+0x8>
		{
			printf("Dispatcher got msg to periph %d!\n", in_msg.peripheral);
 801fd82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fd86:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fd8a:	7b1b      	ldrb	r3, [r3, #12]
 801fd8c:	4619      	mov	r1, r3
 801fd8e:	486d      	ldr	r0, [pc, #436]	@ (801ff44 <TestDispatcher+0x1e0>)
 801fd90:	f001 f8a0 	bl	8020ed4 <iprintf>

			// load test_data
			test_data.addr = in_msg.addr;
 801fd94:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fd98:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801fd9c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 801fda0:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 801fda4:	6812      	ldr	r2, [r2, #0]
 801fda6:	601a      	str	r2, [r3, #0]
			test_data.port = in_msg.port;
 801fda8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fdac:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fdb0:	889a      	ldrh	r2, [r3, #4]
 801fdb2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fdb6:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801fdba:	809a      	strh	r2, [r3, #4]
			test_data.test_id = in_msg.test_id;
 801fdbc:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fdc0:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fdc4:	689a      	ldr	r2, [r3, #8]
 801fdc6:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fdca:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801fdce:	609a      	str	r2, [r3, #8]
			test_data.n_iter = in_msg.n_iter;
 801fdd0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fdd4:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fdd8:	7b5a      	ldrb	r2, [r3, #13]
 801fdda:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fdde:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801fde2:	731a      	strb	r2, [r3, #12]
			test_data.p_len = in_msg.p_len;
 801fde4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fde8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fdec:	7b9a      	ldrb	r2, [r3, #14]
 801fdee:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fdf2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 801fdf6:	735a      	strb	r2, [r3, #13]
			memcpy(test_data.payload, in_msg.payload, in_msg.p_len);
 801fdf8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fdfc:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fe00:	7b9b      	ldrb	r3, [r3, #14]
 801fe02:	461a      	mov	r2, r3
 801fe04:	463b      	mov	r3, r7
 801fe06:	f103 010f 	add.w	r1, r3, #15
 801fe0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801fe0e:	330e      	adds	r3, #14
 801fe10:	4618      	mov	r0, r3
 801fe12:	f001 fa92 	bl	802133a <memcpy>

			// send to relevant test queue
			if(in_msg.peripheral & TEST_UART)
 801fe16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fe1a:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fe1e:	7b1b      	ldrb	r3, [r3, #12]
 801fe20:	f003 0302 	and.w	r3, r3, #2
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	d013      	beq.n	801fe50 <TestDispatcher+0xec>
			{
				printf("dispatcher sent to UART\n");
 801fe28:	4847      	ldr	r0, [pc, #284]	@ (801ff48 <TestDispatcher+0x1e4>)
 801fe2a:	f001 f8c3 	bl	8020fb4 <puts>
				if (osMessageQueuePut(uartQueueHandle, &test_data, 0, 0) != osOK)
 801fe2e:	4b47      	ldr	r3, [pc, #284]	@ (801ff4c <TestDispatcher+0x1e8>)
 801fe30:	6818      	ldr	r0, [r3, #0]
 801fe32:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801fe36:	2300      	movs	r3, #0
 801fe38:	2200      	movs	r2, #0
 801fe3a:	f7ed fb41 	bl	800d4c0 <osMessageQueuePut>
 801fe3e:	4603      	mov	r3, r0
 801fe40:	2b00      	cmp	r3, #0
 801fe42:	d005      	beq.n	801fe50 <TestDispatcher+0xec>
				{
					printf("uart q full!\n");
 801fe44:	4842      	ldr	r0, [pc, #264]	@ (801ff50 <TestDispatcher+0x1ec>)
 801fe46:	f001 f8b5 	bl	8020fb4 <puts>
					osDelay(1);
 801fe4a:	2001      	movs	r0, #1
 801fe4c:	f7ec ffac 	bl	800cda8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_I2C)
 801fe50:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fe54:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fe58:	7b1b      	ldrb	r3, [r3, #12]
 801fe5a:	f003 0308 	and.w	r3, r3, #8
 801fe5e:	2b00      	cmp	r3, #0
 801fe60:	d013      	beq.n	801fe8a <TestDispatcher+0x126>
			{
				printf("dispatcher sent to I2C\n");
 801fe62:	483c      	ldr	r0, [pc, #240]	@ (801ff54 <TestDispatcher+0x1f0>)
 801fe64:	f001 f8a6 	bl	8020fb4 <puts>
				if (osMessageQueuePut(i2cQueueHandle, &test_data, 0, 0) != osOK)
 801fe68:	4b3b      	ldr	r3, [pc, #236]	@ (801ff58 <TestDispatcher+0x1f4>)
 801fe6a:	6818      	ldr	r0, [r3, #0]
 801fe6c:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801fe70:	2300      	movs	r3, #0
 801fe72:	2200      	movs	r2, #0
 801fe74:	f7ed fb24 	bl	800d4c0 <osMessageQueuePut>
 801fe78:	4603      	mov	r3, r0
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d005      	beq.n	801fe8a <TestDispatcher+0x126>
				{
					printf("i2c q full!\n");
 801fe7e:	4837      	ldr	r0, [pc, #220]	@ (801ff5c <TestDispatcher+0x1f8>)
 801fe80:	f001 f898 	bl	8020fb4 <puts>
					osDelay(1);
 801fe84:	2001      	movs	r0, #1
 801fe86:	f7ec ff8f 	bl	800cda8 <osDelay>
    			}
			}
			if(in_msg.peripheral & TEST_SPI)
 801fe8a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fe8e:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fe92:	7b1b      	ldrb	r3, [r3, #12]
 801fe94:	f003 0304 	and.w	r3, r3, #4
 801fe98:	2b00      	cmp	r3, #0
 801fe9a:	d013      	beq.n	801fec4 <TestDispatcher+0x160>
			{
				printf("dispatcher sent to SPI\n");
 801fe9c:	4830      	ldr	r0, [pc, #192]	@ (801ff60 <TestDispatcher+0x1fc>)
 801fe9e:	f001 f889 	bl	8020fb4 <puts>
				if (osMessageQueuePut(spiQueueHandle, &test_data, 0, 0) != osOK)
 801fea2:	4b30      	ldr	r3, [pc, #192]	@ (801ff64 <TestDispatcher+0x200>)
 801fea4:	6818      	ldr	r0, [r3, #0]
 801fea6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801feaa:	2300      	movs	r3, #0
 801feac:	2200      	movs	r2, #0
 801feae:	f7ed fb07 	bl	800d4c0 <osMessageQueuePut>
 801feb2:	4603      	mov	r3, r0
 801feb4:	2b00      	cmp	r3, #0
 801feb6:	d005      	beq.n	801fec4 <TestDispatcher+0x160>
				{
					printf("spi q full!\n");
 801feb8:	482b      	ldr	r0, [pc, #172]	@ (801ff68 <TestDispatcher+0x204>)
 801feba:	f001 f87b 	bl	8020fb4 <puts>
					osDelay(1);
 801febe:	2001      	movs	r0, #1
 801fec0:	f7ec ff72 	bl	800cda8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_ADC)
 801fec4:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801fec8:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801fecc:	7b1b      	ldrb	r3, [r3, #12]
 801fece:	f003 0310 	and.w	r3, r3, #16
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d013      	beq.n	801fefe <TestDispatcher+0x19a>
			{
				printf("dispatcher sent to ADC\n");
 801fed6:	4825      	ldr	r0, [pc, #148]	@ (801ff6c <TestDispatcher+0x208>)
 801fed8:	f001 f86c 	bl	8020fb4 <puts>
				if (osMessageQueuePut(adcQueueHandle, &test_data, 0, 0) != osOK)
 801fedc:	4b24      	ldr	r3, [pc, #144]	@ (801ff70 <TestDispatcher+0x20c>)
 801fede:	6818      	ldr	r0, [r3, #0]
 801fee0:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801fee4:	2300      	movs	r3, #0
 801fee6:	2200      	movs	r2, #0
 801fee8:	f7ed faea 	bl	800d4c0 <osMessageQueuePut>
 801feec:	4603      	mov	r3, r0
 801feee:	2b00      	cmp	r3, #0
 801fef0:	d005      	beq.n	801fefe <TestDispatcher+0x19a>
				{
					printf("adc q full!\n");
 801fef2:	4820      	ldr	r0, [pc, #128]	@ (801ff74 <TestDispatcher+0x210>)
 801fef4:	f001 f85e 	bl	8020fb4 <puts>
					osDelay(1);
 801fef8:	2001      	movs	r0, #1
 801fefa:	f7ec ff55 	bl	800cda8 <osDelay>
				}
			}
			if(in_msg.peripheral & TEST_TIM)
 801fefe:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 801ff02:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 801ff06:	7b1b      	ldrb	r3, [r3, #12]
 801ff08:	f003 0301 	and.w	r3, r3, #1
 801ff0c:	2b00      	cmp	r3, #0
 801ff0e:	f43f af2d 	beq.w	801fd6c <TestDispatcher+0x8>
			{
				printf("dispatcher sent to TIM\n");
 801ff12:	4819      	ldr	r0, [pc, #100]	@ (801ff78 <TestDispatcher+0x214>)
 801ff14:	f001 f84e 	bl	8020fb4 <puts>
				if (osMessageQueuePut(timQueueHandle, &test_data, 0, 0) != osOK)
 801ff18:	4b18      	ldr	r3, [pc, #96]	@ (801ff7c <TestDispatcher+0x218>)
 801ff1a:	6818      	ldr	r0, [r3, #0]
 801ff1c:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 801ff20:	2300      	movs	r3, #0
 801ff22:	2200      	movs	r2, #0
 801ff24:	f7ed facc 	bl	800d4c0 <osMessageQueuePut>
 801ff28:	4603      	mov	r3, r0
 801ff2a:	2b00      	cmp	r3, #0
 801ff2c:	f43f af1e 	beq.w	801fd6c <TestDispatcher+0x8>
				{
					printf("tim q full!\n");
 801ff30:	4813      	ldr	r0, [pc, #76]	@ (801ff80 <TestDispatcher+0x21c>)
 801ff32:	f001 f83f 	bl	8020fb4 <puts>
					osDelay(1);
 801ff36:	2001      	movs	r0, #1
 801ff38:	f7ec ff36 	bl	800cda8 <osDelay>
	{
 801ff3c:	e716      	b.n	801fd6c <TestDispatcher+0x8>
 801ff3e:	bf00      	nop
 801ff40:	20000320 	.word	0x20000320
 801ff44:	080266e4 	.word	0x080266e4
 801ff48:	08026708 	.word	0x08026708
 801ff4c:	20000328 	.word	0x20000328
 801ff50:	08026720 	.word	0x08026720
 801ff54:	08026730 	.word	0x08026730
 801ff58:	2000032c 	.word	0x2000032c
 801ff5c:	08026748 	.word	0x08026748
 801ff60:	08026754 	.word	0x08026754
 801ff64:	20000330 	.word	0x20000330
 801ff68:	0802676c 	.word	0x0802676c
 801ff6c:	08026778 	.word	0x08026778
 801ff70:	20000334 	.word	0x20000334
 801ff74:	08026790 	.word	0x08026790
 801ff78:	0802679c 	.word	0x0802679c
 801ff7c:	20000338 	.word	0x20000338
 801ff80:	080267b4 	.word	0x080267b4

0801ff84 <Match_CRC>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

int Match_CRC(uint8_t *buf1, uint8_t buf1_len, uint8_t *buf2, uint8_t buf2_len)
{
 801ff84:	b580      	push	{r7, lr}
 801ff86:	b086      	sub	sp, #24
 801ff88:	af00      	add	r7, sp, #0
 801ff8a:	60f8      	str	r0, [r7, #12]
 801ff8c:	607a      	str	r2, [r7, #4]
 801ff8e:	461a      	mov	r2, r3
 801ff90:	460b      	mov	r3, r1
 801ff92:	72fb      	strb	r3, [r7, #11]
 801ff94:	4613      	mov	r3, r2
 801ff96:	72bb      	strb	r3, [r7, #10]
	uint32_t buf1_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf1, (uint32_t) buf1_len);
 801ff98:	7afb      	ldrb	r3, [r7, #11]
 801ff9a:	461a      	mov	r2, r3
 801ff9c:	68f9      	ldr	r1, [r7, #12]
 801ff9e:	480b      	ldr	r0, [pc, #44]	@ (801ffcc <Match_CRC+0x48>)
 801ffa0:	f7e3 f87e 	bl	80030a0 <HAL_CRC_Calculate>
 801ffa4:	6178      	str	r0, [r7, #20]
	uint32_t buf2_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)buf2, (uint32_t) buf2_len);
 801ffa6:	7abb      	ldrb	r3, [r7, #10]
 801ffa8:	461a      	mov	r2, r3
 801ffaa:	6879      	ldr	r1, [r7, #4]
 801ffac:	4807      	ldr	r0, [pc, #28]	@ (801ffcc <Match_CRC+0x48>)
 801ffae:	f7e3 f877 	bl	80030a0 <HAL_CRC_Calculate>
 801ffb2:	6138      	str	r0, [r7, #16]

	if(buf1_crc == buf2_crc)
 801ffb4:	697a      	ldr	r2, [r7, #20]
 801ffb6:	693b      	ldr	r3, [r7, #16]
 801ffb8:	429a      	cmp	r2, r3
 801ffba:	d101      	bne.n	801ffc0 <Match_CRC+0x3c>
		return CRC_MATCH_OK;
 801ffbc:	2301      	movs	r3, #1
 801ffbe:	e000      	b.n	801ffc2 <Match_CRC+0x3e>

	return CRC_MATCH_FAIL;
 801ffc0:	2300      	movs	r3, #0
}
 801ffc2:	4618      	mov	r0, r3
 801ffc4:	3718      	adds	r7, #24
 801ffc6:	46bd      	mov	sp, r7
 801ffc8:	bd80      	pop	{r7, pc}
 801ffca:	bf00      	nop
 801ffcc:	200002d4 	.word	0x200002d4

0801ffd0 <UDP_Listen>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UDP_Listen(void)
{
 801ffd0:	b580      	push	{r7, lr}
 801ffd2:	b0ca      	sub	sp, #296	@ 0x128
 801ffd4:	af00      	add	r7, sp, #0
	void *raw_data;
	uint16_t len;
	InMsg_t in_msg;
	int n_read;

	conn_recv = netconn_new(NETCONN_UDP);
 801ffd6:	2200      	movs	r2, #0
 801ffd8:	2100      	movs	r1, #0
 801ffda:	2020      	movs	r0, #32
 801ffdc:	f7f0 ff02 	bl	8010de4 <netconn_new_with_proto_and_callback>
 801ffe0:	4603      	mov	r3, r0
 801ffe2:	4a6a      	ldr	r2, [pc, #424]	@ (802018c <UDP_Listen+0x1bc>)
 801ffe4:	6013      	str	r3, [r2, #0]
	if (conn_recv == NULL)
 801ffe6:	4b69      	ldr	r3, [pc, #420]	@ (802018c <UDP_Listen+0x1bc>)
 801ffe8:	681b      	ldr	r3, [r3, #0]
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	d104      	bne.n	801fff8 <UDP_Listen+0x28>
	{
		printf("error initializing UDP receive netconn\n");
 801ffee:	4868      	ldr	r0, [pc, #416]	@ (8020190 <UDP_Listen+0x1c0>)
 801fff0:	f000 ffe0 	bl	8020fb4 <puts>
		osThreadExit();
 801fff4:	f7ec fed0 	bl	800cd98 <osThreadExit>
	}

	if (netconn_bind(conn_recv, IP_ADDR_ANY, SERVER_PORT) != ERR_OK)
 801fff8:	4b64      	ldr	r3, [pc, #400]	@ (802018c <UDP_Listen+0x1bc>)
 801fffa:	681b      	ldr	r3, [r3, #0]
 801fffc:	f24d 4231 	movw	r2, #54321	@ 0xd431
 8020000:	4964      	ldr	r1, [pc, #400]	@ (8020194 <UDP_Listen+0x1c4>)
 8020002:	4618      	mov	r0, r3
 8020004:	f7f0 ffa8 	bl	8010f58 <netconn_bind>
 8020008:	4603      	mov	r3, r0
 802000a:	2b00      	cmp	r3, #0
 802000c:	d00c      	beq.n	8020028 <UDP_Listen+0x58>
	{
		printf("error binding UDP port\n");
 802000e:	4862      	ldr	r0, [pc, #392]	@ (8020198 <UDP_Listen+0x1c8>)
 8020010:	f000 ffd0 	bl	8020fb4 <puts>
		netconn_delete(conn_recv);
 8020014:	4b5d      	ldr	r3, [pc, #372]	@ (802018c <UDP_Listen+0x1bc>)
 8020016:	681b      	ldr	r3, [r3, #0]
 8020018:	4618      	mov	r0, r3
 802001a:	f7f0 ff81 	bl	8010f20 <netconn_delete>
		conn_recv = NULL;
 802001e:	4b5b      	ldr	r3, [pc, #364]	@ (802018c <UDP_Listen+0x1bc>)
 8020020:	2200      	movs	r2, #0
 8020022:	601a      	str	r2, [r3, #0]
		osThreadExit();
 8020024:	f7ec feb8 	bl	800cd98 <osThreadExit>
	}

	printf("Listening started\n");
 8020028:	485c      	ldr	r0, [pc, #368]	@ (802019c <UDP_Listen+0x1cc>)
 802002a:	f000 ffc3 	bl	8020fb4 <puts>

	while (1)
	{
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 802002e:	4b57      	ldr	r3, [pc, #348]	@ (802018c <UDP_Listen+0x1bc>)
 8020030:	681b      	ldr	r3, [r3, #0]
 8020032:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8020036:	4611      	mov	r1, r2
 8020038:	4618      	mov	r0, r3
 802003a:	f7f1 f9a3 	bl	8011384 <netconn_recv>
 802003e:	4603      	mov	r3, r0
 8020040:	2b00      	cmp	r3, #0
 8020042:	d1f4      	bne.n	802002e <UDP_Listen+0x5e>
		{
			printf("listener got a message\n");
 8020044:	4856      	ldr	r0, [pc, #344]	@ (80201a0 <UDP_Listen+0x1d0>)
 8020046:	f000 ffb5 	bl	8020fb4 <puts>
			// Load in_msg
			in_msg.addr = *netbuf_fromaddr(buf);
 802004a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 802004e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020052:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020056:	6892      	ldr	r2, [r2, #8]
 8020058:	601a      	str	r2, [r3, #0]
			in_msg.port = netbuf_fromport(buf);
 802005a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 802005e:	899a      	ldrh	r2, [r3, #12]
 8020060:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020064:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020068:	809a      	strh	r2, [r3, #4]

			netbuf_data(buf, &raw_data, &len);
 802006a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 802006e:	f507 728b 	add.w	r2, r7, #278	@ 0x116
 8020072:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8020076:	4618      	mov	r0, r3
 8020078:	f7f2 fec4 	bl	8012e04 <netbuf_data>

			n_read = 0;
 802007c:	2300      	movs	r3, #0
 802007e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
			memcpy(&in_msg.test_id, raw_data, sizeof(in_msg.test_id));
 8020082:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8020086:	681b      	ldr	r3, [r3, #0]
 8020088:	461a      	mov	r2, r3
 802008a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802008e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020092:	609a      	str	r2, [r3, #8]
			n_read += sizeof(in_msg.test_id);
 8020094:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8020098:	3304      	adds	r3, #4
 802009a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

			memcpy(&in_msg.peripheral, &raw_data[n_read++], 1);
 802009e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80200a2:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80200a6:	1c59      	adds	r1, r3, #1
 80200a8:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 80200ac:	4413      	add	r3, r2
 80200ae:	781a      	ldrb	r2, [r3, #0]
 80200b0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200b4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80200b8:	731a      	strb	r2, [r3, #12]
			memcpy(&in_msg.n_iter, &raw_data[n_read++], 1);
 80200ba:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80200be:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80200c2:	1c59      	adds	r1, r3, #1
 80200c4:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 80200c8:	4413      	add	r3, r2
 80200ca:	781a      	ldrb	r2, [r3, #0]
 80200cc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80200d4:	735a      	strb	r2, [r3, #13]
			memcpy(&in_msg.p_len, &raw_data[n_read++], 1);
 80200d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80200da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80200de:	1c59      	adds	r1, r3, #1
 80200e0:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 80200e4:	4413      	add	r3, r2
 80200e6:	781a      	ldrb	r2, [r3, #0]
 80200e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80200ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80200f0:	739a      	strb	r2, [r3, #14]
			memcpy(&in_msg.payload, &raw_data[n_read], in_msg.p_len);
 80200f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80200f6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80200fa:	18d1      	adds	r1, r2, r3
 80200fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020100:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020104:	7b9b      	ldrb	r3, [r3, #14]
 8020106:	461a      	mov	r2, r3
 8020108:	1d3b      	adds	r3, r7, #4
 802010a:	330f      	adds	r3, #15
 802010c:	4618      	mov	r0, r3
 802010e:	f001 f914 	bl	802133a <memcpy>

			if (in_msg.p_len < sizeof(in_msg.payload))
				in_msg.payload[in_msg.p_len] = '\0';
 8020112:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020116:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802011a:	7b9b      	ldrb	r3, [r3, #14]
 802011c:	461a      	mov	r2, r3
 802011e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020122:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020126:	4413      	add	r3, r2
 8020128:	2200      	movs	r2, #0
 802012a:	73da      	strb	r2, [r3, #15]
			printf("Peripheral is: %d\n", in_msg.peripheral);
 802012c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020130:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020134:	7b1b      	ldrb	r3, [r3, #12]
 8020136:	4619      	mov	r1, r3
 8020138:	481a      	ldr	r0, [pc, #104]	@ (80201a4 <UDP_Listen+0x1d4>)
 802013a:	f000 fecb 	bl	8020ed4 <iprintf>
			printf("n iterations is: %d\n", in_msg.n_iter);
 802013e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020142:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020146:	7b5b      	ldrb	r3, [r3, #13]
 8020148:	4619      	mov	r1, r3
 802014a:	4817      	ldr	r0, [pc, #92]	@ (80201a8 <UDP_Listen+0x1d8>)
 802014c:	f000 fec2 	bl	8020ed4 <iprintf>
			printf("Message is: %s\n", in_msg.payload);
 8020150:	1d3b      	adds	r3, r7, #4
 8020152:	330f      	adds	r3, #15
 8020154:	4619      	mov	r1, r3
 8020156:	4815      	ldr	r0, [pc, #84]	@ (80201ac <UDP_Listen+0x1dc>)
 8020158:	f000 febc 	bl	8020ed4 <iprintf>

			// send in_msg to InMsgQueue
			osStatus_t status = osMessageQueuePut(inMsgQueueHandle, &in_msg, 0, 0);
 802015c:	4b14      	ldr	r3, [pc, #80]	@ (80201b0 <UDP_Listen+0x1e0>)
 802015e:	6818      	ldr	r0, [r3, #0]
 8020160:	1d39      	adds	r1, r7, #4
 8020162:	2300      	movs	r3, #0
 8020164:	2200      	movs	r2, #0
 8020166:	f7ed f9ab 	bl	800d4c0 <osMessageQueuePut>
 802016a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
			if (status != osOK)
 802016e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020172:	2b00      	cmp	r3, #0
 8020174:	d004      	beq.n	8020180 <UDP_Listen+0x1b0>
			{
				printf("inMsg put error: %d\n", status);
 8020176:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 802017a:	480e      	ldr	r0, [pc, #56]	@ (80201b4 <UDP_Listen+0x1e4>)
 802017c:	f000 feaa 	bl	8020ed4 <iprintf>
			}

			netbuf_delete(buf);
 8020180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8020184:	4618      	mov	r0, r3
 8020186:	f7f2 fdd3 	bl	8012d30 <netbuf_delete>
		if (netconn_recv(conn_recv, &buf) == ERR_OK)
 802018a:	e750      	b.n	802002e <UDP_Listen+0x5e>
 802018c:	2002d7d4 	.word	0x2002d7d4
 8020190:	080267c0 	.word	0x080267c0
 8020194:	08026dbc 	.word	0x08026dbc
 8020198:	080267e8 	.word	0x080267e8
 802019c:	08026800 	.word	0x08026800
 80201a0:	08026814 	.word	0x08026814
 80201a4:	0802682c 	.word	0x0802682c
 80201a8:	08026840 	.word	0x08026840
 80201ac:	08026858 	.word	0x08026858
 80201b0:	20000320 	.word	0x20000320
 80201b4:	08026868 	.word	0x08026868

080201b8 <UDP_Response>:
		}
	}
}

void UDP_Response(void)
{
 80201b8:	b580      	push	{r7, lr}
 80201ba:	b086      	sub	sp, #24
 80201bc:	af00      	add	r7, sp, #0
	struct netbuf *buf;
	OutMsg_t out_msg;

	conn_send = netconn_new(NETCONN_UDP);
 80201be:	2200      	movs	r2, #0
 80201c0:	2100      	movs	r1, #0
 80201c2:	2020      	movs	r0, #32
 80201c4:	f7f0 fe0e 	bl	8010de4 <netconn_new_with_proto_and_callback>
 80201c8:	4603      	mov	r3, r0
 80201ca:	4a27      	ldr	r2, [pc, #156]	@ (8020268 <UDP_Response+0xb0>)
 80201cc:	6013      	str	r3, [r2, #0]
	if (conn_send == NULL)
 80201ce:	4b26      	ldr	r3, [pc, #152]	@ (8020268 <UDP_Response+0xb0>)
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	2b00      	cmp	r3, #0
 80201d4:	d104      	bne.n	80201e0 <UDP_Response+0x28>
	{
		printf("error initializing UDP send netconn\n");
 80201d6:	4825      	ldr	r0, [pc, #148]	@ (802026c <UDP_Response+0xb4>)
 80201d8:	f000 feec 	bl	8020fb4 <puts>
		osThreadExit();
 80201dc:	f7ec fddc 	bl	800cd98 <osThreadExit>
	}

	while(1)
	{
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 80201e0:	4b23      	ldr	r3, [pc, #140]	@ (8020270 <UDP_Response+0xb8>)
 80201e2:	6818      	ldr	r0, [r3, #0]
 80201e4:	4639      	mov	r1, r7
 80201e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80201ea:	2200      	movs	r2, #0
 80201ec:	f7ed f9dc 	bl	800d5a8 <osMessageQueueGet>
 80201f0:	4603      	mov	r3, r0
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d1f4      	bne.n	80201e0 <UDP_Response+0x28>
		{
			printf("responder got a response to send\n");
 80201f6:	481f      	ldr	r0, [pc, #124]	@ (8020274 <UDP_Response+0xbc>)
 80201f8:	f000 fedc 	bl	8020fb4 <puts>
			//Load response buffer
			buf = netbuf_new();
 80201fc:	f7f2 fd84 	bl	8012d08 <netbuf_new>
 8020200:	6178      	str	r0, [r7, #20]
			if (!buf)
 8020202:	697b      	ldr	r3, [r7, #20]
 8020204:	2b00      	cmp	r3, #0
 8020206:	d103      	bne.n	8020210 <UDP_Response+0x58>
			{
				printf("responder netbuf_new() failed");
 8020208:	481b      	ldr	r0, [pc, #108]	@ (8020278 <UDP_Response+0xc0>)
 802020a:	f000 fe63 	bl	8020ed4 <iprintf>
				continue;
 802020e:	e02a      	b.n	8020266 <UDP_Response+0xae>
			}

			void *data = netbuf_alloc(buf, RESPONSE_SIZE);
 8020210:	2105      	movs	r1, #5
 8020212:	6978      	ldr	r0, [r7, #20]
 8020214:	f7f2 fdac 	bl	8012d70 <netbuf_alloc>
 8020218:	6138      	str	r0, [r7, #16]
			if (!data)
 802021a:	693b      	ldr	r3, [r7, #16]
 802021c:	2b00      	cmp	r3, #0
 802021e:	d106      	bne.n	802022e <UDP_Response+0x76>
			{
				printf("responder netbuf_alloc() failed");
 8020220:	4816      	ldr	r0, [pc, #88]	@ (802027c <UDP_Response+0xc4>)
 8020222:	f000 fe57 	bl	8020ed4 <iprintf>
			    netbuf_delete(buf);
 8020226:	6978      	ldr	r0, [r7, #20]
 8020228:	f7f2 fd82 	bl	8012d30 <netbuf_delete>
			    continue;
 802022c:	e01b      	b.n	8020266 <UDP_Response+0xae>
			}
			memcpy(data, &out_msg.test_id, sizeof(out_msg.test_id));
 802022e:	68ba      	ldr	r2, [r7, #8]
 8020230:	693b      	ldr	r3, [r7, #16]
 8020232:	601a      	str	r2, [r3, #0]
			((uint8_t *)data)[sizeof(out_msg.test_id)] = out_msg.test_result;
 8020234:	693b      	ldr	r3, [r7, #16]
 8020236:	3304      	adds	r3, #4
 8020238:	7b3a      	ldrb	r2, [r7, #12]
 802023a:	701a      	strb	r2, [r3, #0]

			// Send response
			netconn_connect(conn_send, &out_msg.addr, out_msg.port);
 802023c:	4b0a      	ldr	r3, [pc, #40]	@ (8020268 <UDP_Response+0xb0>)
 802023e:	681b      	ldr	r3, [r3, #0]
 8020240:	88ba      	ldrh	r2, [r7, #4]
 8020242:	4639      	mov	r1, r7
 8020244:	4618      	mov	r0, r3
 8020246:	f7f0 febf 	bl	8010fc8 <netconn_connect>
			netconn_send(conn_send, buf);
 802024a:	4b07      	ldr	r3, [pc, #28]	@ (8020268 <UDP_Response+0xb0>)
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	6979      	ldr	r1, [r7, #20]
 8020250:	4618      	mov	r0, r3
 8020252:	f7f1 f911 	bl	8011478 <netconn_send>
			netconn_disconnect(conn_send);
 8020256:	4b04      	ldr	r3, [pc, #16]	@ (8020268 <UDP_Response+0xb0>)
 8020258:	681b      	ldr	r3, [r3, #0]
 802025a:	4618      	mov	r0, r3
 802025c:	f7f0 feec 	bl	8011038 <netconn_disconnect>
			netbuf_delete(buf);
 8020260:	6978      	ldr	r0, [r7, #20]
 8020262:	f7f2 fd65 	bl	8012d30 <netbuf_delete>
		if(osMessageQueueGet(outMsgQueueHandle, &out_msg, 0, osWaitForever) == osOK)
 8020266:	e7bb      	b.n	80201e0 <UDP_Response+0x28>
 8020268:	2002d7d8 	.word	0x2002d7d8
 802026c:	08026880 	.word	0x08026880
 8020270:	20000324 	.word	0x20000324
 8020274:	080268a4 	.word	0x080268a4
 8020278:	080268c8 	.word	0x080268c8
 802027c:	080268e8 	.word	0x080268e8

08020280 <I2cTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void I2cTestTask(void)
{
 8020280:	b580      	push	{r7, lr}
 8020282:	b0ca      	sub	sp, #296	@ 0x128
 8020284:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("i2c waiting for messages\n");
 8020286:	4838      	ldr	r0, [pc, #224]	@ (8020368 <I2cTestTask+0xe8>)
 8020288:	f000 fe94 	bl	8020fb4 <puts>
		if(osMessageQueueGet(i2cQueueHandle, &test_data, 0, osWaitForever) == osOK)
 802028c:	4b37      	ldr	r3, [pc, #220]	@ (802036c <I2cTestTask+0xec>)
 802028e:	6818      	ldr	r0, [r3, #0]
 8020290:	f107 0114 	add.w	r1, r7, #20
 8020294:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020298:	2200      	movs	r2, #0
 802029a:	f7ed f985 	bl	800d5a8 <osMessageQueueGet>
 802029e:	4603      	mov	r3, r0
 80202a0:	2b00      	cmp	r3, #0
 80202a2:	d15d      	bne.n	8020360 <I2cTestTask+0xe0>
		{
			printf("i2c received test ID: %lu\n", test_data.test_id);
 80202a4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202a8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80202ac:	689b      	ldr	r3, [r3, #8]
 80202ae:	4619      	mov	r1, r3
 80202b0:	482f      	ldr	r0, [pc, #188]	@ (8020370 <I2cTestTask+0xf0>)
 80202b2:	f000 fe0f 	bl	8020ed4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 80202b6:	2300      	movs	r3, #0
 80202b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80202bc:	e017      	b.n	80202ee <I2cTestTask+0x6e>
			{
				result = I2C_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 80202be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80202c6:	7b5a      	ldrb	r2, [r3, #13]
 80202c8:	f107 0314 	add.w	r3, r7, #20
 80202cc:	330e      	adds	r3, #14
 80202ce:	4611      	mov	r1, r2
 80202d0:	4618      	mov	r0, r3
 80202d2:	f000 f851 	bl	8020378 <I2C_Test_Perform>
 80202d6:	4603      	mov	r3, r0
 80202d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 80202dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80202e0:	2bff      	cmp	r3, #255	@ 0xff
 80202e2:	d00e      	beq.n	8020302 <I2cTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 80202e4:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80202e8:	3301      	adds	r3, #1
 80202ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80202ee:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80202f2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80202f6:	7b1b      	ldrb	r3, [r3, #12]
 80202f8:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80202fc:	429a      	cmp	r2, r3
 80202fe:	d3de      	bcc.n	80202be <I2cTestTask+0x3e>
 8020300:	e000      	b.n	8020304 <I2cTestTask+0x84>
					break;
 8020302:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020304:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020308:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802030c:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020310:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020314:	6812      	ldr	r2, [r2, #0]
 8020316:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020318:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802031c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020320:	889a      	ldrh	r2, [r3, #4]
 8020322:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020326:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802032a:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 802032c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020330:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020334:	689a      	ldr	r2, [r3, #8]
 8020336:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802033a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802033e:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020340:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020344:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020348:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 802034c:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 802034e:	4b09      	ldr	r3, [pc, #36]	@ (8020374 <I2cTestTask+0xf4>)
 8020350:	6818      	ldr	r0, [r3, #0]
 8020352:	1d39      	adds	r1, r7, #4
 8020354:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020358:	2200      	movs	r2, #0
 802035a:	f7ed f8b1 	bl	800d4c0 <osMessageQueuePut>
 802035e:	e792      	b.n	8020286 <I2cTestTask+0x6>
		}
		else osDelay(1);
 8020360:	2001      	movs	r0, #1
 8020362:	f7ec fd21 	bl	800cda8 <osDelay>
		printf("i2c waiting for messages\n");
 8020366:	e78e      	b.n	8020286 <I2cTestTask+0x6>
 8020368:	08026908 	.word	0x08026908
 802036c:	2000032c 	.word	0x2000032c
 8020370:	08026924 	.word	0x08026924
 8020374:	20000324 	.word	0x20000324

08020378 <I2C_Test_Perform>:
	}
}

uint8_t I2C_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8020378:	b590      	push	{r4, r7, lr}
 802037a:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 802037e:	af00      	add	r7, sp, #0
 8020380:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020384:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020388:	6018      	str	r0, [r3, #0]
 802038a:	460a      	mov	r2, r1
 802038c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020390:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020394:	701a      	strb	r2, [r3, #0]
	printf("Performing i2c test\n");
#endif

	HAL_StatusTypeDef status;

	i2c1_tx_done = 0;
 8020396:	4b4d      	ldr	r3, [pc, #308]	@ (80204cc <I2C_Test_Perform+0x154>)
 8020398:	2200      	movs	r2, #0
 802039a:	701a      	strb	r2, [r3, #0]
	i2c1_rx_done = 0;
 802039c:	4b4c      	ldr	r3, [pc, #304]	@ (80204d0 <I2C_Test_Perform+0x158>)
 802039e:	2200      	movs	r2, #0
 80203a0:	701a      	strb	r2, [r3, #0]
	i2c2_tx_done = 0;
 80203a2:	4b4c      	ldr	r3, [pc, #304]	@ (80204d4 <I2C_Test_Perform+0x15c>)
 80203a4:	2200      	movs	r2, #0
 80203a6:	701a      	strb	r2, [r3, #0]
	i2c2_rx_done = 0;
 80203a8:	4b4b      	ldr	r3, [pc, #300]	@ (80204d8 <I2C_Test_Perform+0x160>)
 80203aa:	2200      	movs	r2, #0
 80203ac:	701a      	strb	r2, [r3, #0]

	uint8_t i2c1_rx[MAX_BUF];
	uint8_t i2c2_rx[MAX_BUF];

	// Send msg i2c1 -> i2c2
	status = HAL_I2C_Slave_Receive_DMA(&hi2c2, i2c2_rx, msg_len);
 80203ae:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80203b2:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80203b6:	781b      	ldrb	r3, [r3, #0]
 80203b8:	b29a      	uxth	r2, r3
 80203ba:	f107 0308 	add.w	r3, r7, #8
 80203be:	4619      	mov	r1, r3
 80203c0:	4846      	ldr	r0, [pc, #280]	@ (80204dc <I2C_Test_Perform+0x164>)
 80203c2:	f7e5 fbe5 	bl	8005b90 <HAL_I2C_Slave_Receive_DMA>
 80203c6:	4603      	mov	r3, r0
 80203c8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80203cc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	d001      	beq.n	80203d8 <I2C_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 RX failed\n");
#endif
		return TEST_FAILED;
 80203d4:	23ff      	movs	r3, #255	@ 0xff
 80203d6:	e074      	b.n	80204c2 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Master_Transmit_DMA(&hi2c1, 10<<1, msg, msg_len);
 80203d8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80203dc:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80203e0:	781b      	ldrb	r3, [r3, #0]
 80203e2:	b29b      	uxth	r3, r3
 80203e4:	f507 7204 	add.w	r2, r7, #528	@ 0x210
 80203e8:	f5a2 7203 	sub.w	r2, r2, #524	@ 0x20c
 80203ec:	6812      	ldr	r2, [r2, #0]
 80203ee:	2114      	movs	r1, #20
 80203f0:	483b      	ldr	r0, [pc, #236]	@ (80204e0 <I2C_Test_Perform+0x168>)
 80203f2:	f7e5 f8dd 	bl	80055b0 <HAL_I2C_Master_Transmit_DMA>
 80203f6:	4603      	mov	r3, r0
 80203f8:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80203fc:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020400:	2b00      	cmp	r3, #0
 8020402:	d001      	beq.n	8020408 <I2C_Test_Perform+0x90>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c1 -> i2c2 TX failed\n");
#endif
		return TEST_FAILED;
 8020404:	23ff      	movs	r3, #255	@ 0xff
 8020406:	e05c      	b.n	80204c2 <I2C_Test_Perform+0x14a>
	}
	while (!i2c2_rx_done || !i2c1_tx_done);
 8020408:	bf00      	nop
 802040a:	4b33      	ldr	r3, [pc, #204]	@ (80204d8 <I2C_Test_Perform+0x160>)
 802040c:	781b      	ldrb	r3, [r3, #0]
 802040e:	b2db      	uxtb	r3, r3
 8020410:	2b00      	cmp	r3, #0
 8020412:	d0fa      	beq.n	802040a <I2C_Test_Perform+0x92>
 8020414:	4b2d      	ldr	r3, [pc, #180]	@ (80204cc <I2C_Test_Perform+0x154>)
 8020416:	781b      	ldrb	r3, [r3, #0]
 8020418:	b2db      	uxtb	r3, r3
 802041a:	2b00      	cmp	r3, #0
 802041c:	d0f5      	beq.n	802040a <I2C_Test_Perform+0x92>

	// Send msg i2c2 -> i2c1
	status = HAL_I2C_Master_Receive_DMA(&hi2c1, 10<<1, i2c1_rx, msg_len);
 802041e:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020422:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020426:	781b      	ldrb	r3, [r3, #0]
 8020428:	b29b      	uxth	r3, r3
 802042a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 802042e:	2114      	movs	r1, #20
 8020430:	482b      	ldr	r0, [pc, #172]	@ (80204e0 <I2C_Test_Perform+0x168>)
 8020432:	f7e5 f9d1 	bl	80057d8 <HAL_I2C_Master_Receive_DMA>
 8020436:	4603      	mov	r3, r0
 8020438:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 802043c:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020440:	2b00      	cmp	r3, #0
 8020442:	d001      	beq.n	8020448 <I2C_Test_Perform+0xd0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 RX failed\n");
#endif
		return TEST_FAILED;
 8020444:	23ff      	movs	r3, #255	@ 0xff
 8020446:	e03c      	b.n	80204c2 <I2C_Test_Perform+0x14a>
	}

	status = HAL_I2C_Slave_Transmit_DMA(&hi2c2, i2c2_rx, msg_len);
 8020448:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802044c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020450:	781b      	ldrb	r3, [r3, #0]
 8020452:	b29a      	uxth	r2, r3
 8020454:	f107 0308 	add.w	r3, r7, #8
 8020458:	4619      	mov	r1, r3
 802045a:	4820      	ldr	r0, [pc, #128]	@ (80204dc <I2C_Test_Perform+0x164>)
 802045c:	f7e5 faac 	bl	80059b8 <HAL_I2C_Slave_Transmit_DMA>
 8020460:	4603      	mov	r3, r0
 8020462:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020466:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 802046a:	2b00      	cmp	r3, #0
 802046c:	d001      	beq.n	8020472 <I2C_Test_Perform+0xfa>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("i2c2 -> i2c1 TX failed\n");
#endif
		return TEST_FAILED;
 802046e:	23ff      	movs	r3, #255	@ 0xff
 8020470:	e027      	b.n	80204c2 <I2C_Test_Perform+0x14a>
	}
	while (!i2c1_rx_done || !i2c2_tx_done);
 8020472:	bf00      	nop
 8020474:	4b16      	ldr	r3, [pc, #88]	@ (80204d0 <I2C_Test_Perform+0x158>)
 8020476:	781b      	ldrb	r3, [r3, #0]
 8020478:	b2db      	uxtb	r3, r3
 802047a:	2b00      	cmp	r3, #0
 802047c:	d0fa      	beq.n	8020474 <I2C_Test_Perform+0xfc>
 802047e:	4b15      	ldr	r3, [pc, #84]	@ (80204d4 <I2C_Test_Perform+0x15c>)
 8020480:	781b      	ldrb	r3, [r3, #0]
 8020482:	b2db      	uxtb	r3, r3
 8020484:	2b00      	cmp	r3, #0
 8020486:	d0f5      	beq.n	8020474 <I2C_Test_Perform+0xfc>

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, i2c1_rx, msg_len);
 8020488:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802048c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020490:	781c      	ldrb	r4, [r3, #0]
 8020492:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8020496:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802049a:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 802049e:	7819      	ldrb	r1, [r3, #0]
 80204a0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80204a4:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80204a8:	4623      	mov	r3, r4
 80204aa:	6800      	ldr	r0, [r0, #0]
 80204ac:	f7ff fd6a 	bl	801ff84 <Match_CRC>
 80204b0:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80204b4:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80204b8:	2b01      	cmp	r3, #1
 80204ba:	d101      	bne.n	80204c0 <I2C_Test_Perform+0x148>
 80204bc:	2301      	movs	r3, #1
 80204be:	e000      	b.n	80204c2 <I2C_Test_Perform+0x14a>

	return TEST_FAILED;
 80204c0:	23ff      	movs	r3, #255	@ 0xff
}
 80204c2:	4618      	mov	r0, r3
 80204c4:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80204c8:	46bd      	mov	sp, r7
 80204ca:	bd90      	pop	{r4, r7, pc}
 80204cc:	2002d7dc 	.word	0x2002d7dc
 80204d0:	2002d7dd 	.word	0x2002d7dd
 80204d4:	2002d7de 	.word	0x2002d7de
 80204d8:	2002d7df 	.word	0x2002d7df
 80204dc:	20000390 	.word	0x20000390
 80204e0:	2000033c 	.word	0x2000033c

080204e4 <HAL_I2C_MasterTxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80204e4:	b480      	push	{r7}
 80204e6:	b083      	sub	sp, #12
 80204e8:	af00      	add	r7, sp, #0
 80204ea:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_tx_done = 1;
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	4a06      	ldr	r2, [pc, #24]	@ (8020508 <HAL_I2C_MasterTxCpltCallback+0x24>)
 80204f0:	4293      	cmp	r3, r2
 80204f2:	d102      	bne.n	80204fa <HAL_I2C_MasterTxCpltCallback+0x16>
 80204f4:	4b05      	ldr	r3, [pc, #20]	@ (802050c <HAL_I2C_MasterTxCpltCallback+0x28>)
 80204f6:	2201      	movs	r2, #1
 80204f8:	701a      	strb	r2, [r3, #0]
}
 80204fa:	bf00      	nop
 80204fc:	370c      	adds	r7, #12
 80204fe:	46bd      	mov	sp, r7
 8020500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020504:	4770      	bx	lr
 8020506:	bf00      	nop
 8020508:	2000033c 	.word	0x2000033c
 802050c:	2002d7dc 	.word	0x2002d7dc

08020510 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020510:	b480      	push	{r7}
 8020512:	b083      	sub	sp, #12
 8020514:	af00      	add	r7, sp, #0
 8020516:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c1) i2c1_rx_done = 1;
 8020518:	687b      	ldr	r3, [r7, #4]
 802051a:	4a06      	ldr	r2, [pc, #24]	@ (8020534 <HAL_I2C_MasterRxCpltCallback+0x24>)
 802051c:	4293      	cmp	r3, r2
 802051e:	d102      	bne.n	8020526 <HAL_I2C_MasterRxCpltCallback+0x16>
 8020520:	4b05      	ldr	r3, [pc, #20]	@ (8020538 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8020522:	2201      	movs	r2, #1
 8020524:	701a      	strb	r2, [r3, #0]
}
 8020526:	bf00      	nop
 8020528:	370c      	adds	r7, #12
 802052a:	46bd      	mov	sp, r7
 802052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020530:	4770      	bx	lr
 8020532:	bf00      	nop
 8020534:	2000033c 	.word	0x2000033c
 8020538:	2002d7dd 	.word	0x2002d7dd

0802053c <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 802053c:	b480      	push	{r7}
 802053e:	b083      	sub	sp, #12
 8020540:	af00      	add	r7, sp, #0
 8020542:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_tx_done = 1;
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	4a06      	ldr	r2, [pc, #24]	@ (8020560 <HAL_I2C_SlaveTxCpltCallback+0x24>)
 8020548:	4293      	cmp	r3, r2
 802054a:	d102      	bne.n	8020552 <HAL_I2C_SlaveTxCpltCallback+0x16>
 802054c:	4b05      	ldr	r3, [pc, #20]	@ (8020564 <HAL_I2C_SlaveTxCpltCallback+0x28>)
 802054e:	2201      	movs	r2, #1
 8020550:	701a      	strb	r2, [r3, #0]
}
 8020552:	bf00      	nop
 8020554:	370c      	adds	r7, #12
 8020556:	46bd      	mov	sp, r7
 8020558:	f85d 7b04 	ldr.w	r7, [sp], #4
 802055c:	4770      	bx	lr
 802055e:	bf00      	nop
 8020560:	20000390 	.word	0x20000390
 8020564:	2002d7de 	.word	0x2002d7de

08020568 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8020568:	b480      	push	{r7}
 802056a:	b083      	sub	sp, #12
 802056c:	af00      	add	r7, sp, #0
 802056e:	6078      	str	r0, [r7, #4]
	if (hi2c == &hi2c2) i2c2_rx_done = 1;
 8020570:	687b      	ldr	r3, [r7, #4]
 8020572:	4a06      	ldr	r2, [pc, #24]	@ (802058c <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8020574:	4293      	cmp	r3, r2
 8020576:	d102      	bne.n	802057e <HAL_I2C_SlaveRxCpltCallback+0x16>
 8020578:	4b05      	ldr	r3, [pc, #20]	@ (8020590 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 802057a:	2201      	movs	r2, #1
 802057c:	701a      	strb	r2, [r3, #0]
}
 802057e:	bf00      	nop
 8020580:	370c      	adds	r7, #12
 8020582:	46bd      	mov	sp, r7
 8020584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020588:	4770      	bx	lr
 802058a:	bf00      	nop
 802058c:	20000390 	.word	0x20000390
 8020590:	2002d7df 	.word	0x2002d7df

08020594 <SpiTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void SpiTestTask(void)
{
 8020594:	b580      	push	{r7, lr}
 8020596:	b0ca      	sub	sp, #296	@ 0x128
 8020598:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("spi waiting for messages\n");
 802059a:	4838      	ldr	r0, [pc, #224]	@ (802067c <SpiTestTask+0xe8>)
 802059c:	f000 fd0a 	bl	8020fb4 <puts>
		if(osMessageQueueGet(spiQueueHandle, &test_data, 0, osWaitForever) == osOK)
 80205a0:	4b37      	ldr	r3, [pc, #220]	@ (8020680 <SpiTestTask+0xec>)
 80205a2:	6818      	ldr	r0, [r3, #0]
 80205a4:	f107 0114 	add.w	r1, r7, #20
 80205a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80205ac:	2200      	movs	r2, #0
 80205ae:	f7ec fffb 	bl	800d5a8 <osMessageQueueGet>
 80205b2:	4603      	mov	r3, r0
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d15d      	bne.n	8020674 <SpiTestTask+0xe0>
		{
			printf("spi received test ID: %lu\n", test_data.test_id);
 80205b8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80205bc:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80205c0:	689b      	ldr	r3, [r3, #8]
 80205c2:	4619      	mov	r1, r3
 80205c4:	482f      	ldr	r0, [pc, #188]	@ (8020684 <SpiTestTask+0xf0>)
 80205c6:	f000 fc85 	bl	8020ed4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 80205ca:	2300      	movs	r3, #0
 80205cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80205d0:	e017      	b.n	8020602 <SpiTestTask+0x6e>
			{
				result = SPI_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 80205d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80205d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80205da:	7b5a      	ldrb	r2, [r3, #13]
 80205dc:	f107 0314 	add.w	r3, r7, #20
 80205e0:	330e      	adds	r3, #14
 80205e2:	4611      	mov	r1, r2
 80205e4:	4618      	mov	r0, r3
 80205e6:	f000 f851 	bl	802068c <SPI_Test_Perform>
 80205ea:	4603      	mov	r3, r0
 80205ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 80205f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80205f4:	2bff      	cmp	r3, #255	@ 0xff
 80205f6:	d00e      	beq.n	8020616 <SpiTestTask+0x82>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 80205f8:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80205fc:	3301      	adds	r3, #1
 80205fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020602:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020606:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 802060a:	7b1b      	ldrb	r3, [r3, #12]
 802060c:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020610:	429a      	cmp	r2, r3
 8020612:	d3de      	bcc.n	80205d2 <SpiTestTask+0x3e>
 8020614:	e000      	b.n	8020618 <SpiTestTask+0x84>
					break;
 8020616:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020618:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802061c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020620:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020624:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 8020628:	6812      	ldr	r2, [r2, #0]
 802062a:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 802062c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020630:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020634:	889a      	ldrh	r2, [r3, #4]
 8020636:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802063a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802063e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020640:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020644:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020648:	689a      	ldr	r2, [r3, #8]
 802064a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802064e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020652:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020654:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020658:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802065c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020660:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8020662:	4b09      	ldr	r3, [pc, #36]	@ (8020688 <SpiTestTask+0xf4>)
 8020664:	6818      	ldr	r0, [r3, #0]
 8020666:	1d39      	adds	r1, r7, #4
 8020668:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802066c:	2200      	movs	r2, #0
 802066e:	f7ec ff27 	bl	800d4c0 <osMessageQueuePut>
 8020672:	e792      	b.n	802059a <SpiTestTask+0x6>
		}
		else osDelay(1);
 8020674:	2001      	movs	r0, #1
 8020676:	f7ec fb97 	bl	800cda8 <osDelay>
		printf("spi waiting for messages\n");
 802067a:	e78e      	b.n	802059a <SpiTestTask+0x6>
 802067c:	08026940 	.word	0x08026940
 8020680:	20000330 	.word	0x20000330
 8020684:	0802695c 	.word	0x0802695c
 8020688:	20000324 	.word	0x20000324

0802068c <SPI_Test_Perform>:
	}
}

uint8_t SPI_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 802068c:	b590      	push	{r4, r7, lr}
 802068e:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8020692:	af00      	add	r7, sp, #0
 8020694:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020698:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 802069c:	6018      	str	r0, [r3, #0]
 802069e:	460a      	mov	r2, r1
 80206a0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80206a4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80206a8:	701a      	strb	r2, [r3, #0]
	printf("Performing SPI test\n");
#endif

	HAL_StatusTypeDef status;

	spi1_tx_done = 0;
 80206aa:	4b4d      	ldr	r3, [pc, #308]	@ (80207e0 <SPI_Test_Perform+0x154>)
 80206ac:	2200      	movs	r2, #0
 80206ae:	701a      	strb	r2, [r3, #0]
	spi1_rx_done = 0;
 80206b0:	4b4c      	ldr	r3, [pc, #304]	@ (80207e4 <SPI_Test_Perform+0x158>)
 80206b2:	2200      	movs	r2, #0
 80206b4:	701a      	strb	r2, [r3, #0]
	spi4_tx_done = 0;
 80206b6:	4b4c      	ldr	r3, [pc, #304]	@ (80207e8 <SPI_Test_Perform+0x15c>)
 80206b8:	2200      	movs	r2, #0
 80206ba:	701a      	strb	r2, [r3, #0]
	spi4_rx_done = 0;
 80206bc:	4b4b      	ldr	r3, [pc, #300]	@ (80207ec <SPI_Test_Perform+0x160>)
 80206be:	2200      	movs	r2, #0
 80206c0:	701a      	strb	r2, [r3, #0]

	uint8_t spi1_rx[MAX_BUF];
	uint8_t spi4_rx_tx[MAX_BUF];

	// send msg spi1 -> spi4
	status = HAL_SPI_Receive_DMA(&hspi4, spi4_rx_tx, msg_len);
 80206c2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80206c6:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80206ca:	781b      	ldrb	r3, [r3, #0]
 80206cc:	b29a      	uxth	r2, r3
 80206ce:	f107 0308 	add.w	r3, r7, #8
 80206d2:	4619      	mov	r1, r3
 80206d4:	4846      	ldr	r0, [pc, #280]	@ (80207f0 <SPI_Test_Perform+0x164>)
 80206d6:	f7e8 fba9 	bl	8008e2c <HAL_SPI_Receive_DMA>
 80206da:	4603      	mov	r3, r0
 80206dc:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 80206e0:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 80206e4:	2b00      	cmp	r3, #0
 80206e6:	d001      	beq.n	80206ec <SPI_Test_Perform+0x60>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 RX failed\n");
#endif
		return TEST_FAILED;
 80206e8:	23ff      	movs	r3, #255	@ 0xff
 80206ea:	e073      	b.n	80207d4 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Transmit_DMA(&hspi1, msg, msg_len);
 80206ec:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80206f0:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80206f4:	781b      	ldrb	r3, [r3, #0]
 80206f6:	b29a      	uxth	r2, r3
 80206f8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80206fc:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020700:	6819      	ldr	r1, [r3, #0]
 8020702:	483c      	ldr	r0, [pc, #240]	@ (80207f4 <SPI_Test_Perform+0x168>)
 8020704:	f7e8 faa4 	bl	8008c50 <HAL_SPI_Transmit_DMA>
 8020708:	4603      	mov	r3, r0
 802070a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 802070e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020712:	2b00      	cmp	r3, #0
 8020714:	d001      	beq.n	802071a <SPI_Test_Perform+0x8e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi1 -> spi4 TX failed\n");
#endif
		return TEST_FAILED;
 8020716:	23ff      	movs	r3, #255	@ 0xff
 8020718:	e05c      	b.n	80207d4 <SPI_Test_Perform+0x148>
	}
	while(!spi4_rx_done || !spi1_tx_done);
 802071a:	bf00      	nop
 802071c:	4b33      	ldr	r3, [pc, #204]	@ (80207ec <SPI_Test_Perform+0x160>)
 802071e:	781b      	ldrb	r3, [r3, #0]
 8020720:	b2db      	uxtb	r3, r3
 8020722:	2b00      	cmp	r3, #0
 8020724:	d0fa      	beq.n	802071c <SPI_Test_Perform+0x90>
 8020726:	4b2e      	ldr	r3, [pc, #184]	@ (80207e0 <SPI_Test_Perform+0x154>)
 8020728:	781b      	ldrb	r3, [r3, #0]
 802072a:	b2db      	uxtb	r3, r3
 802072c:	2b00      	cmp	r3, #0
 802072e:	d0f5      	beq.n	802071c <SPI_Test_Perform+0x90>

	// send msg spi4 -> spi1
	status = HAL_SPI_Transmit_DMA(&hspi4, spi4_rx_tx, msg_len);
 8020730:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020734:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020738:	781b      	ldrb	r3, [r3, #0]
 802073a:	b29a      	uxth	r2, r3
 802073c:	f107 0308 	add.w	r3, r7, #8
 8020740:	4619      	mov	r1, r3
 8020742:	482b      	ldr	r0, [pc, #172]	@ (80207f0 <SPI_Test_Perform+0x164>)
 8020744:	f7e8 fa84 	bl	8008c50 <HAL_SPI_Transmit_DMA>
 8020748:	4603      	mov	r3, r0
 802074a:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 802074e:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 8020752:	2b00      	cmp	r3, #0
 8020754:	d001      	beq.n	802075a <SPI_Test_Perform+0xce>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 TX failed\n");
#endif
		return TEST_FAILED;
 8020756:	23ff      	movs	r3, #255	@ 0xff
 8020758:	e03c      	b.n	80207d4 <SPI_Test_Perform+0x148>
	}
	status = HAL_SPI_Receive_DMA(&hspi1, spi1_rx, msg_len);
 802075a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802075e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020762:	781b      	ldrb	r3, [r3, #0]
 8020764:	b29a      	uxth	r2, r3
 8020766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 802076a:	4619      	mov	r1, r3
 802076c:	4821      	ldr	r0, [pc, #132]	@ (80207f4 <SPI_Test_Perform+0x168>)
 802076e:	f7e8 fb5d 	bl	8008e2c <HAL_SPI_Receive_DMA>
 8020772:	4603      	mov	r3, r0
 8020774:	f887 320f 	strb.w	r3, [r7, #527]	@ 0x20f
	if (status != HAL_OK)
 8020778:	f897 320f 	ldrb.w	r3, [r7, #527]	@ 0x20f
 802077c:	2b00      	cmp	r3, #0
 802077e:	d001      	beq.n	8020784 <SPI_Test_Perform+0xf8>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("spi4 -> spi1 RX failed\n");
#endif
		return TEST_FAILED;
 8020780:	23ff      	movs	r3, #255	@ 0xff
 8020782:	e027      	b.n	80207d4 <SPI_Test_Perform+0x148>
	}
	while(!spi1_rx_done || !spi4_tx_done);
 8020784:	bf00      	nop
 8020786:	4b17      	ldr	r3, [pc, #92]	@ (80207e4 <SPI_Test_Perform+0x158>)
 8020788:	781b      	ldrb	r3, [r3, #0]
 802078a:	b2db      	uxtb	r3, r3
 802078c:	2b00      	cmp	r3, #0
 802078e:	d0fa      	beq.n	8020786 <SPI_Test_Perform+0xfa>
 8020790:	4b15      	ldr	r3, [pc, #84]	@ (80207e8 <SPI_Test_Perform+0x15c>)
 8020792:	781b      	ldrb	r3, [r3, #0]
 8020794:	b2db      	uxtb	r3, r3
 8020796:	2b00      	cmp	r3, #0
 8020798:	d0f5      	beq.n	8020786 <SPI_Test_Perform+0xfa>

	// Compare CRC
	int crc_result = Match_CRC(msg, msg_len, spi1_rx, msg_len);
 802079a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 802079e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80207a2:	781c      	ldrb	r4, [r3, #0]
 80207a4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80207a8:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80207ac:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 80207b0:	7819      	ldrb	r1, [r3, #0]
 80207b2:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 80207b6:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 80207ba:	4623      	mov	r3, r4
 80207bc:	6800      	ldr	r0, [r0, #0]
 80207be:	f7ff fbe1 	bl	801ff84 <Match_CRC>
 80207c2:	f8c7 0208 	str.w	r0, [r7, #520]	@ 0x208
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 80207c6:	f8d7 3208 	ldr.w	r3, [r7, #520]	@ 0x208
 80207ca:	2b01      	cmp	r3, #1
 80207cc:	d101      	bne.n	80207d2 <SPI_Test_Perform+0x146>
 80207ce:	2301      	movs	r3, #1
 80207d0:	e000      	b.n	80207d4 <SPI_Test_Perform+0x148>

	return TEST_FAILED;
 80207d2:	23ff      	movs	r3, #255	@ 0xff
}
 80207d4:	4618      	mov	r0, r3
 80207d6:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 80207da:	46bd      	mov	sp, r7
 80207dc:	bd90      	pop	{r4, r7, pc}
 80207de:	bf00      	nop
 80207e0:	2002d7e0 	.word	0x2002d7e0
 80207e4:	2002d7e1 	.word	0x2002d7e1
 80207e8:	2002d7e2 	.word	0x2002d7e2
 80207ec:	2002d7e3 	.word	0x2002d7e3
 80207f0:	200005c8 	.word	0x200005c8
 80207f4:	20000564 	.word	0x20000564

080207f8 <HAL_SPI_TxCpltCallback>:
/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80207f8:	b480      	push	{r7}
 80207fa:	b083      	sub	sp, #12
 80207fc:	af00      	add	r7, sp, #0
 80207fe:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_tx_done = 1;
 8020800:	687b      	ldr	r3, [r7, #4]
 8020802:	4a09      	ldr	r2, [pc, #36]	@ (8020828 <HAL_SPI_TxCpltCallback+0x30>)
 8020804:	4293      	cmp	r3, r2
 8020806:	d102      	bne.n	802080e <HAL_SPI_TxCpltCallback+0x16>
 8020808:	4b08      	ldr	r3, [pc, #32]	@ (802082c <HAL_SPI_TxCpltCallback+0x34>)
 802080a:	2201      	movs	r2, #1
 802080c:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_tx_done = 1;
 802080e:	687b      	ldr	r3, [r7, #4]
 8020810:	4a07      	ldr	r2, [pc, #28]	@ (8020830 <HAL_SPI_TxCpltCallback+0x38>)
 8020812:	4293      	cmp	r3, r2
 8020814:	d102      	bne.n	802081c <HAL_SPI_TxCpltCallback+0x24>
 8020816:	4b07      	ldr	r3, [pc, #28]	@ (8020834 <HAL_SPI_TxCpltCallback+0x3c>)
 8020818:	2201      	movs	r2, #1
 802081a:	701a      	strb	r2, [r3, #0]
}
 802081c:	bf00      	nop
 802081e:	370c      	adds	r7, #12
 8020820:	46bd      	mov	sp, r7
 8020822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020826:	4770      	bx	lr
 8020828:	20000564 	.word	0x20000564
 802082c:	2002d7e0 	.word	0x2002d7e0
 8020830:	200005c8 	.word	0x200005c8
 8020834:	2002d7e2 	.word	0x2002d7e2

08020838 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8020838:	b480      	push	{r7}
 802083a:	b083      	sub	sp, #12
 802083c:	af00      	add	r7, sp, #0
 802083e:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi1) spi1_rx_done = 1;
 8020840:	687b      	ldr	r3, [r7, #4]
 8020842:	4a09      	ldr	r2, [pc, #36]	@ (8020868 <HAL_SPI_RxCpltCallback+0x30>)
 8020844:	4293      	cmp	r3, r2
 8020846:	d102      	bne.n	802084e <HAL_SPI_RxCpltCallback+0x16>
 8020848:	4b08      	ldr	r3, [pc, #32]	@ (802086c <HAL_SPI_RxCpltCallback+0x34>)
 802084a:	2201      	movs	r2, #1
 802084c:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi4) spi4_rx_done = 1;
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	4a07      	ldr	r2, [pc, #28]	@ (8020870 <HAL_SPI_RxCpltCallback+0x38>)
 8020852:	4293      	cmp	r3, r2
 8020854:	d102      	bne.n	802085c <HAL_SPI_RxCpltCallback+0x24>
 8020856:	4b07      	ldr	r3, [pc, #28]	@ (8020874 <HAL_SPI_RxCpltCallback+0x3c>)
 8020858:	2201      	movs	r2, #1
 802085a:	701a      	strb	r2, [r3, #0]
}
 802085c:	bf00      	nop
 802085e:	370c      	adds	r7, #12
 8020860:	46bd      	mov	sp, r7
 8020862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020866:	4770      	bx	lr
 8020868:	20000564 	.word	0x20000564
 802086c:	2002d7e1 	.word	0x2002d7e1
 8020870:	200005c8 	.word	0x200005c8
 8020874:	2002d7e3 	.word	0x2002d7e3

08020878 <TimTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void TimTestTask(void)
{
 8020878:	b580      	push	{r7, lr}
 802087a:	b0ca      	sub	sp, #296	@ 0x128
 802087c:	af00      	add	r7, sp, #0
	OutMsg_t out_msg;
	uint8_t result;

	while (1)
	{
		printf("timer waiting for messages\n");
 802087e:	4833      	ldr	r0, [pc, #204]	@ (802094c <TimTestTask+0xd4>)
 8020880:	f000 fb98 	bl	8020fb4 <puts>
		if(osMessageQueueGet(timQueueHandle, &test_data, 0, osWaitForever) == osOK)
 8020884:	4b32      	ldr	r3, [pc, #200]	@ (8020950 <TimTestTask+0xd8>)
 8020886:	6818      	ldr	r0, [r3, #0]
 8020888:	f107 0114 	add.w	r1, r7, #20
 802088c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020890:	2200      	movs	r2, #0
 8020892:	f7ec fe89 	bl	800d5a8 <osMessageQueueGet>
 8020896:	4603      	mov	r3, r0
 8020898:	2b00      	cmp	r3, #0
 802089a:	d153      	bne.n	8020944 <TimTestTask+0xcc>
		{
			printf("timer received test ID: %lu\n", test_data.test_id);
 802089c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80208a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80208a4:	689b      	ldr	r3, [r3, #8]
 80208a6:	4619      	mov	r1, r3
 80208a8:	482a      	ldr	r0, [pc, #168]	@ (8020954 <TimTestTask+0xdc>)
 80208aa:	f000 fb13 	bl	8020ed4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 80208ae:	2300      	movs	r3, #0
 80208b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80208b4:	e00d      	b.n	80208d2 <TimTestTask+0x5a>
			{
				result = TIM_Test_Perform();
 80208b6:	f000 f851 	bl	802095c <TIM_Test_Perform>
 80208ba:	4603      	mov	r3, r0
 80208bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 80208c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80208c4:	2bff      	cmp	r3, #255	@ 0xff
 80208c6:	d00e      	beq.n	80208e6 <TimTestTask+0x6e>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 80208c8:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80208cc:	3301      	adds	r3, #1
 80208ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80208d2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80208d6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80208da:	7b1b      	ldrb	r3, [r3, #12]
 80208dc:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 80208e0:	429a      	cmp	r2, r3
 80208e2:	d3e8      	bcc.n	80208b6 <TimTestTask+0x3e>
 80208e4:	e000      	b.n	80208e8 <TimTestTask+0x70>
					break;
 80208e6:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 80208e8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80208ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80208f0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80208f4:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 80208f8:	6812      	ldr	r2, [r2, #0]
 80208fa:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 80208fc:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020900:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020904:	889a      	ldrh	r2, [r3, #4]
 8020906:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802090a:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802090e:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020910:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020914:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8020918:	689a      	ldr	r2, [r3, #8]
 802091a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 802091e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8020922:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020924:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020928:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 802092c:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020930:	731a      	strb	r2, [r3, #12]

			// send result to queue
			osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever);
 8020932:	4b09      	ldr	r3, [pc, #36]	@ (8020958 <TimTestTask+0xe0>)
 8020934:	6818      	ldr	r0, [r3, #0]
 8020936:	1d39      	adds	r1, r7, #4
 8020938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 802093c:	2200      	movs	r2, #0
 802093e:	f7ec fdbf 	bl	800d4c0 <osMessageQueuePut>
 8020942:	e79c      	b.n	802087e <TimTestTask+0x6>
		}
		else osDelay(1);
 8020944:	2001      	movs	r0, #1
 8020946:	f7ec fa2f 	bl	800cda8 <osDelay>
		printf("timer waiting for messages\n");
 802094a:	e798      	b.n	802087e <TimTestTask+0x6>
 802094c:	08026978 	.word	0x08026978
 8020950:	20000338 	.word	0x20000338
 8020954:	08026994 	.word	0x08026994
 8020958:	20000324 	.word	0x20000324

0802095c <TIM_Test_Perform>:
	}
}

uint8_t TIM_Test_Perform(void)
{
 802095c:	b580      	push	{r7, lr}
 802095e:	b082      	sub	sp, #8
 8020960:	af00      	add	r7, sp, #0
#ifdef PRINT_TESTS_DEBUG
	printf("Performing timer test\n");
#endif

	tim6_count = 0;
 8020962:	4b27      	ldr	r3, [pc, #156]	@ (8020a00 <TIM_Test_Perform+0xa4>)
 8020964:	2200      	movs	r2, #0
 8020966:	601a      	str	r2, [r3, #0]
	test_running = 1;
 8020968:	4b26      	ldr	r3, [pc, #152]	@ (8020a04 <TIM_Test_Perform+0xa8>)
 802096a:	2201      	movs	r2, #1
 802096c:	601a      	str	r2, [r3, #0]

	HAL_TIM_Base_Start(&htim2);
 802096e:	4826      	ldr	r0, [pc, #152]	@ (8020a08 <TIM_Test_Perform+0xac>)
 8020970:	f7e9 f9e2 	bl	8009d38 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim6);
 8020974:	4825      	ldr	r0, [pc, #148]	@ (8020a0c <TIM_Test_Perform+0xb0>)
 8020976:	f7e9 f9df 	bl	8009d38 <HAL_TIM_Base_Start>

	if(HAL_DMA_Start_IT(&hdma_tim6_up, (uint32_t)&htim2.Instance->CNT,
 802097a:	4b23      	ldr	r3, [pc, #140]	@ (8020a08 <TIM_Test_Perform+0xac>)
 802097c:	681b      	ldr	r3, [r3, #0]
 802097e:	3324      	adds	r3, #36	@ 0x24
 8020980:	4619      	mov	r1, r3
 8020982:	4a23      	ldr	r2, [pc, #140]	@ (8020a10 <TIM_Test_Perform+0xb4>)
 8020984:	230a      	movs	r3, #10
 8020986:	4823      	ldr	r0, [pc, #140]	@ (8020a14 <TIM_Test_Perform+0xb8>)
 8020988:	f7e2 fdde 	bl	8003548 <HAL_DMA_Start_IT>
 802098c:	4603      	mov	r3, r0
 802098e:	2b00      	cmp	r3, #0
 8020990:	d001      	beq.n	8020996 <TIM_Test_Perform+0x3a>
			            (uint32_t)tim2_samples, N_SAMPLES) != HAL_OK)
	{
#ifdef PRINT_TESTS_DEBUG
	printf("Timer test: DMA init error\n");
#endif
		return TEST_FAILED;
 8020992:	23ff      	movs	r3, #255	@ 0xff
 8020994:	e02f      	b.n	80209f6 <TIM_Test_Perform+0x9a>
	}
    __HAL_TIM_ENABLE_DMA(&htim6, TIM_DMA_UPDATE);
 8020996:	4b1d      	ldr	r3, [pc, #116]	@ (8020a0c <TIM_Test_Perform+0xb0>)
 8020998:	681b      	ldr	r3, [r3, #0]
 802099a:	68da      	ldr	r2, [r3, #12]
 802099c:	4b1b      	ldr	r3, [pc, #108]	@ (8020a0c <TIM_Test_Perform+0xb0>)
 802099e:	681b      	ldr	r3, [r3, #0]
 80209a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80209a4:	60da      	str	r2, [r3, #12]

	while (test_running) osDelay(1);
 80209a6:	e002      	b.n	80209ae <TIM_Test_Perform+0x52>
 80209a8:	2001      	movs	r0, #1
 80209aa:	f7ec f9fd 	bl	800cda8 <osDelay>
 80209ae:	4b15      	ldr	r3, [pc, #84]	@ (8020a04 <TIM_Test_Perform+0xa8>)
 80209b0:	681b      	ldr	r3, [r3, #0]
 80209b2:	2b00      	cmp	r3, #0
 80209b4:	d1f8      	bne.n	80209a8 <TIM_Test_Perform+0x4c>

	HAL_TIM_Base_Stop(&htim6);
 80209b6:	4815      	ldr	r0, [pc, #84]	@ (8020a0c <TIM_Test_Perform+0xb0>)
 80209b8:	f7e9 fa2e 	bl	8009e18 <HAL_TIM_Base_Stop>
	HAL_TIM_Base_Stop(&htim2);
 80209bc:	4812      	ldr	r0, [pc, #72]	@ (8020a08 <TIM_Test_Perform+0xac>)
 80209be:	f7e9 fa2b 	bl	8009e18 <HAL_TIM_Base_Stop>

#ifdef PRINT_TESTS_DEBUG
	printf("Sampling complete\n");
#endif
	for (int i = 1; i < N_SAMPLES; i++)
 80209c2:	2301      	movs	r3, #1
 80209c4:	607b      	str	r3, [r7, #4]
 80209c6:	e012      	b.n	80209ee <TIM_Test_Perform+0x92>
#ifdef PRINT_TESTS_DEBUG
		printf("Sample[%d] - sample[%d] = %lu\n", i, i-1,
			   tim2_samples[i] - tim2_samples[i-1]);
#endif

		if (tim2_samples[i] - tim2_samples[i-1] != EXPECTED_INTERVAL)
 80209c8:	4a11      	ldr	r2, [pc, #68]	@ (8020a10 <TIM_Test_Perform+0xb4>)
 80209ca:	687b      	ldr	r3, [r7, #4]
 80209cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	3b01      	subs	r3, #1
 80209d4:	490e      	ldr	r1, [pc, #56]	@ (8020a10 <TIM_Test_Perform+0xb4>)
 80209d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80209da:	1ad3      	subs	r3, r2, r3
 80209dc:	f24d 22f0 	movw	r2, #54000	@ 0xd2f0
 80209e0:	4293      	cmp	r3, r2
 80209e2:	d001      	beq.n	80209e8 <TIM_Test_Perform+0x8c>
			return TEST_FAILED;
 80209e4:	23ff      	movs	r3, #255	@ 0xff
 80209e6:	e006      	b.n	80209f6 <TIM_Test_Perform+0x9a>
	for (int i = 1; i < N_SAMPLES; i++)
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	3301      	adds	r3, #1
 80209ec:	607b      	str	r3, [r7, #4]
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	2b09      	cmp	r3, #9
 80209f2:	dde9      	ble.n	80209c8 <TIM_Test_Perform+0x6c>
	}

	return TEST_SUCCESS;
 80209f4:	2301      	movs	r3, #1
}
 80209f6:	4618      	mov	r0, r3
 80209f8:	3708      	adds	r7, #8
 80209fa:	46bd      	mov	sp, r7
 80209fc:	bd80      	pop	{r7, pc}
 80209fe:	bf00      	nop
 8020a00:	2002d7e8 	.word	0x2002d7e8
 8020a04:	2002d7e4 	.word	0x2002d7e4
 8020a08:	200007fc 	.word	0x200007fc
 8020a0c:	20000848 	.word	0x20000848
 8020a10:	2002d7ec 	.word	0x2002d7ec
 8020a14:	20000894 	.word	0x20000894

08020a18 <UartTestTask>:
/****************************
 * FUNCTION IMPLEMENTATION  *
 ****************************/

void UartTestTask(void)
{
 8020a18:	b580      	push	{r7, lr}
 8020a1a:	b0ca      	sub	sp, #296	@ 0x128
 8020a1c:	af00      	add	r7, sp, #0
	TestData_t test_data;
	OutMsg_t out_msg;
	uint8_t result;
	osStatus_t status;

	uart4RxSem = osSemaphoreNew(1, 0, NULL);
 8020a1e:	2200      	movs	r2, #0
 8020a20:	2100      	movs	r1, #0
 8020a22:	2001      	movs	r0, #1
 8020a24:	f7ec fb36 	bl	800d094 <osSemaphoreNew>
 8020a28:	4603      	mov	r3, r0
 8020a2a:	4a47      	ldr	r2, [pc, #284]	@ (8020b48 <UartTestTask+0x130>)
 8020a2c:	6013      	str	r3, [r2, #0]
	uart5RxSem = osSemaphoreNew(1, 0, NULL);
 8020a2e:	2200      	movs	r2, #0
 8020a30:	2100      	movs	r1, #0
 8020a32:	2001      	movs	r0, #1
 8020a34:	f7ec fb2e 	bl	800d094 <osSemaphoreNew>
 8020a38:	4603      	mov	r3, r0
 8020a3a:	4a44      	ldr	r2, [pc, #272]	@ (8020b4c <UartTestTask+0x134>)
 8020a3c:	6013      	str	r3, [r2, #0]

	while (1)
	{
		//printf("uart waiting for messages\n");
		status = osMessageQueueGet(uartQueueHandle, &test_data, 0, 10);
 8020a3e:	4b44      	ldr	r3, [pc, #272]	@ (8020b50 <UartTestTask+0x138>)
 8020a40:	6818      	ldr	r0, [r3, #0]
 8020a42:	f107 0110 	add.w	r1, r7, #16
 8020a46:	230a      	movs	r3, #10
 8020a48:	2200      	movs	r2, #0
 8020a4a:	f7ec fdad 	bl	800d5a8 <osMessageQueueGet>
 8020a4e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
		if(status == osOK)
 8020a52:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	d163      	bne.n	8020b22 <UartTestTask+0x10a>
		{
			printf("uart received test ID: %lu\n", test_data.test_id);
 8020a5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020a5e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020a62:	689b      	ldr	r3, [r3, #8]
 8020a64:	4619      	mov	r1, r3
 8020a66:	483b      	ldr	r0, [pc, #236]	@ (8020b54 <UartTestTask+0x13c>)
 8020a68:	f000 fa34 	bl	8020ed4 <iprintf>

			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020a6c:	2300      	movs	r3, #0
 8020a6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020a72:	e017      	b.n	8020aa4 <UartTestTask+0x8c>
			{
				result = UART_Test_Perform((uint8_t *)test_data.payload, test_data.p_len);
 8020a74:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020a78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020a7c:	7b5a      	ldrb	r2, [r3, #13]
 8020a7e:	f107 0310 	add.w	r3, r7, #16
 8020a82:	330e      	adds	r3, #14
 8020a84:	4611      	mov	r1, r2
 8020a86:	4618      	mov	r0, r3
 8020a88:	f000 f86c 	bl	8020b64 <UART_Test_Perform>
 8020a8c:	4603      	mov	r3, r0
 8020a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
				if (result == TEST_FAILED)
 8020a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8020a96:	2bff      	cmp	r3, #255	@ 0xff
 8020a98:	d00e      	beq.n	8020ab8 <UartTestTask+0xa0>
			for (uint8_t i=0; i<test_data.n_iter; i++)
 8020a9a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8020a9e:	3301      	adds	r3, #1
 8020aa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8020aa4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020aa8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020aac:	7b1b      	ldrb	r3, [r3, #12]
 8020aae:	f897 2126 	ldrb.w	r2, [r7, #294]	@ 0x126
 8020ab2:	429a      	cmp	r2, r3
 8020ab4:	d3de      	bcc.n	8020a74 <UartTestTask+0x5c>
 8020ab6:	e000      	b.n	8020aba <UartTestTask+0xa2>
					break;
 8020ab8:	bf00      	nop
			}

			// load out_msg
			out_msg.addr = test_data.addr;
 8020aba:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020abe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020ac2:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8020ac6:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8020aca:	6812      	ldr	r2, [r2, #0]
 8020acc:	601a      	str	r2, [r3, #0]
			out_msg.port = test_data.port;
 8020ace:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020ad2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020ad6:	889a      	ldrh	r2, [r3, #4]
 8020ad8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020adc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020ae0:	809a      	strh	r2, [r3, #4]
			out_msg.test_id = test_data.test_id;
 8020ae2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020ae6:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8020aea:	689a      	ldr	r2, [r3, #8]
 8020aec:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020af0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020af4:	609a      	str	r2, [r3, #8]
			out_msg.test_result = result;
 8020af6:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8020afa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8020afe:	f897 2127 	ldrb.w	r2, [r7, #295]	@ 0x127
 8020b02:	731a      	strb	r2, [r3, #12]

			// send result to queue
			if (osMessageQueuePut(outMsgQueueHandle, &out_msg, 0, osWaitForever) != osOK)
 8020b04:	4b14      	ldr	r3, [pc, #80]	@ (8020b58 <UartTestTask+0x140>)
 8020b06:	6818      	ldr	r0, [r3, #0]
 8020b08:	4639      	mov	r1, r7
 8020b0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020b0e:	2200      	movs	r2, #0
 8020b10:	f7ec fcd6 	bl	800d4c0 <osMessageQueuePut>
 8020b14:	4603      	mov	r3, r0
 8020b16:	2b00      	cmp	r3, #0
 8020b18:	d091      	beq.n	8020a3e <UartTestTask+0x26>
			{
				printf("outMsg q full!\n");
 8020b1a:	4810      	ldr	r0, [pc, #64]	@ (8020b5c <UartTestTask+0x144>)
 8020b1c:	f000 fa4a 	bl	8020fb4 <puts>
 8020b20:	e78d      	b.n	8020a3e <UartTestTask+0x26>
			}
		}
		else if (status == osErrorTimeout)
 8020b22:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8020b26:	f113 0f02 	cmn.w	r3, #2
 8020b2a:	d103      	bne.n	8020b34 <UartTestTask+0x11c>
		{
			osDelay(1);
 8020b2c:	2001      	movs	r0, #1
 8020b2e:	f7ec f93b 	bl	800cda8 <osDelay>
 8020b32:	e784      	b.n	8020a3e <UartTestTask+0x26>
		}
		else
		{
			printf("uart msg read error: %d\n", status);
 8020b34:	f8d7 1120 	ldr.w	r1, [r7, #288]	@ 0x120
 8020b38:	4809      	ldr	r0, [pc, #36]	@ (8020b60 <UartTestTask+0x148>)
 8020b3a:	f000 f9cb 	bl	8020ed4 <iprintf>
			osDelay(1);
 8020b3e:	2001      	movs	r0, #1
 8020b40:	f7ec f932 	bl	800cda8 <osDelay>
		status = osMessageQueueGet(uartQueueHandle, &test_data, 0, 10);
 8020b44:	e77b      	b.n	8020a3e <UartTestTask+0x26>
 8020b46:	bf00      	nop
 8020b48:	2002d814 	.word	0x2002d814
 8020b4c:	2002d818 	.word	0x2002d818
 8020b50:	20000328 	.word	0x20000328
 8020b54:	080269b4 	.word	0x080269b4
 8020b58:	20000324 	.word	0x20000324
 8020b5c:	080269d0 	.word	0x080269d0
 8020b60:	080269e0 	.word	0x080269e0

08020b64 <UART_Test_Perform>:


}

uint8_t UART_Test_Perform(uint8_t *msg, uint8_t msg_len)
{
 8020b64:	b590      	push	{r4, r7, lr}
 8020b66:	f5ad 7d05 	sub.w	sp, sp, #532	@ 0x214
 8020b6a:	af00      	add	r7, sp, #0
 8020b6c:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020b70:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020b74:	6018      	str	r0, [r3, #0]
 8020b76:	460a      	mov	r2, r1
 8020b78:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020b7c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020b80:	701a      	strb	r2, [r3, #0]

	uint8_t uart4_rx[MAX_BUF];
	uint8_t uart5_rx[MAX_BUF];

	// Send msg uart4 -> uart5
	if (HAL_UART_Receive_DMA(&huart5, uart5_rx, msg_len) != HAL_OK)
 8020b82:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020b86:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020b8a:	781b      	ldrb	r3, [r3, #0]
 8020b8c:	b29a      	uxth	r2, r3
 8020b8e:	f107 030c 	add.w	r3, r7, #12
 8020b92:	4619      	mov	r1, r3
 8020b94:	483a      	ldr	r0, [pc, #232]	@ (8020c80 <UART_Test_Perform+0x11c>)
 8020b96:	f7e9 fefb 	bl	800a990 <HAL_UART_Receive_DMA>
 8020b9a:	4603      	mov	r3, r0
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d001      	beq.n	8020ba4 <UART_Test_Perform+0x40>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 RX1 failed\n");
#endif
		return TEST_FAILED;
 8020ba0:	23ff      	movs	r3, #255	@ 0xff
 8020ba2:	e067      	b.n	8020c74 <UART_Test_Perform+0x110>
	}
	if (HAL_UART_Transmit_IT(&huart4, msg, msg_len) != HAL_OK)
 8020ba4:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020ba8:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020bac:	781b      	ldrb	r3, [r3, #0]
 8020bae:	b29a      	uxth	r2, r3
 8020bb0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020bb4:	f5a3 7303 	sub.w	r3, r3, #524	@ 0x20c
 8020bb8:	6819      	ldr	r1, [r3, #0]
 8020bba:	4832      	ldr	r0, [pc, #200]	@ (8020c84 <UART_Test_Perform+0x120>)
 8020bbc:	f7e9 fe8a 	bl	800a8d4 <HAL_UART_Transmit_IT>
 8020bc0:	4603      	mov	r3, r0
 8020bc2:	2b00      	cmp	r3, #0
 8020bc4:	d001      	beq.n	8020bca <UART_Test_Perform+0x66>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart4 -> uart5 TX failed\n");
#endif
		return TEST_FAILED;
 8020bc6:	23ff      	movs	r3, #255	@ 0xff
 8020bc8:	e054      	b.n	8020c74 <UART_Test_Perform+0x110>
	}
	if (osSemaphoreAcquire(uart5RxSem, 10) != osOK) {
 8020bca:	4b2f      	ldr	r3, [pc, #188]	@ (8020c88 <UART_Test_Perform+0x124>)
 8020bcc:	681b      	ldr	r3, [r3, #0]
 8020bce:	210a      	movs	r1, #10
 8020bd0:	4618      	mov	r0, r3
 8020bd2:	f7ec fafb 	bl	800d1cc <osSemaphoreAcquire>
 8020bd6:	4603      	mov	r3, r0
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d001      	beq.n	8020be0 <UART_Test_Perform+0x7c>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart5 RX semaphore timeout\n");
#endif
	    return TEST_FAILED;
 8020bdc:	23ff      	movs	r3, #255	@ 0xff
 8020bde:	e049      	b.n	8020c74 <UART_Test_Perform+0x110>
	}

	// Send msg uart5 -> uart4
	if (HAL_UART_Receive_DMA(&huart4, uart4_rx, msg_len) != HAL_OK)
 8020be0:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020be4:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020be8:	781b      	ldrb	r3, [r3, #0]
 8020bea:	b29a      	uxth	r2, r3
 8020bec:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8020bf0:	4619      	mov	r1, r3
 8020bf2:	4824      	ldr	r0, [pc, #144]	@ (8020c84 <UART_Test_Perform+0x120>)
 8020bf4:	f7e9 fecc 	bl	800a990 <HAL_UART_Receive_DMA>
 8020bf8:	4603      	mov	r3, r0
 8020bfa:	2b00      	cmp	r3, #0
 8020bfc:	d001      	beq.n	8020c02 <UART_Test_Perform+0x9e>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 RX failed\n");
#endif
		return TEST_FAILED;
 8020bfe:	23ff      	movs	r3, #255	@ 0xff
 8020c00:	e038      	b.n	8020c74 <UART_Test_Perform+0x110>
	}
	if (HAL_UART_Transmit_IT(&huart5, uart5_rx, msg_len) != HAL_OK)
 8020c02:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020c06:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020c0a:	781b      	ldrb	r3, [r3, #0]
 8020c0c:	b29a      	uxth	r2, r3
 8020c0e:	f107 030c 	add.w	r3, r7, #12
 8020c12:	4619      	mov	r1, r3
 8020c14:	481a      	ldr	r0, [pc, #104]	@ (8020c80 <UART_Test_Perform+0x11c>)
 8020c16:	f7e9 fe5d 	bl	800a8d4 <HAL_UART_Transmit_IT>
 8020c1a:	4603      	mov	r3, r0
 8020c1c:	2b00      	cmp	r3, #0
 8020c1e:	d001      	beq.n	8020c24 <UART_Test_Perform+0xc0>
	{
#ifdef PRINT_TESTS_DEBUG
		printf("uart5 -> uart4 TX failed\n");
#endif
		return TEST_FAILED;
 8020c20:	23ff      	movs	r3, #255	@ 0xff
 8020c22:	e027      	b.n	8020c74 <UART_Test_Perform+0x110>
	}
	if (osSemaphoreAcquire(uart4RxSem, 10) != osOK) {
 8020c24:	4b19      	ldr	r3, [pc, #100]	@ (8020c8c <UART_Test_Perform+0x128>)
 8020c26:	681b      	ldr	r3, [r3, #0]
 8020c28:	210a      	movs	r1, #10
 8020c2a:	4618      	mov	r0, r3
 8020c2c:	f7ec face 	bl	800d1cc <osSemaphoreAcquire>
 8020c30:	4603      	mov	r3, r0
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d001      	beq.n	8020c3a <UART_Test_Perform+0xd6>
#ifdef PRINT_TESTS_DEBUG
	    printf("uart4 RX semaphore timeout\n");
#endif
	    return TEST_FAILED;
 8020c36:	23ff      	movs	r3, #255	@ 0xff
 8020c38:	e01c      	b.n	8020c74 <UART_Test_Perform+0x110>
	}

	// compare crc
	int crc_result = Match_CRC(msg, msg_len, uart4_rx, msg_len);
 8020c3a:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020c3e:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020c42:	781c      	ldrb	r4, [r3, #0]
 8020c44:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8020c48:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020c4c:	f2a3 230d 	subw	r3, r3, #525	@ 0x20d
 8020c50:	7819      	ldrb	r1, [r3, #0]
 8020c52:	f507 7304 	add.w	r3, r7, #528	@ 0x210
 8020c56:	f5a3 7003 	sub.w	r0, r3, #524	@ 0x20c
 8020c5a:	4623      	mov	r3, r4
 8020c5c:	6800      	ldr	r0, [r0, #0]
 8020c5e:	f7ff f991 	bl	801ff84 <Match_CRC>
 8020c62:	f8c7 020c 	str.w	r0, [r7, #524]	@ 0x20c
	if (crc_result == CRC_MATCH_OK) return TEST_SUCCESS;
 8020c66:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8020c6a:	2b01      	cmp	r3, #1
 8020c6c:	d101      	bne.n	8020c72 <UART_Test_Perform+0x10e>
 8020c6e:	2301      	movs	r3, #1
 8020c70:	e000      	b.n	8020c74 <UART_Test_Perform+0x110>

	return TEST_FAILED;
 8020c72:	23ff      	movs	r3, #255	@ 0xff
}
 8020c74:	4618      	mov	r0, r3
 8020c76:	f507 7705 	add.w	r7, r7, #532	@ 0x214
 8020c7a:	46bd      	mov	sp, r7
 8020c7c:	bd90      	pop	{r4, r7, pc}
 8020c7e:	bf00      	nop
 8020c80:	2000097c 	.word	0x2000097c
 8020c84:	200008f4 	.word	0x200008f4
 8020c88:	2002d818 	.word	0x2002d818
 8020c8c:	2002d814 	.word	0x2002d814

08020c90 <HAL_UART_RxCpltCallback>:

/****************************
 * CALLBACK IMPLEMENTATION  *
 ****************************/

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8020c90:	b580      	push	{r7, lr}
 8020c92:	b082      	sub	sp, #8
 8020c94:	af00      	add	r7, sp, #0
 8020c96:	6078      	str	r0, [r7, #4]
    if (huart == &huart4) osSemaphoreRelease(uart4RxSem);;
 8020c98:	687b      	ldr	r3, [r7, #4]
 8020c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8020cc4 <HAL_UART_RxCpltCallback+0x34>)
 8020c9c:	4293      	cmp	r3, r2
 8020c9e:	d104      	bne.n	8020caa <HAL_UART_RxCpltCallback+0x1a>
 8020ca0:	4b09      	ldr	r3, [pc, #36]	@ (8020cc8 <HAL_UART_RxCpltCallback+0x38>)
 8020ca2:	681b      	ldr	r3, [r3, #0]
 8020ca4:	4618      	mov	r0, r3
 8020ca6:	f7ec faf7 	bl	800d298 <osSemaphoreRelease>
    if (huart == &huart5) osSemaphoreRelease(uart5RxSem);;
 8020caa:	687b      	ldr	r3, [r7, #4]
 8020cac:	4a07      	ldr	r2, [pc, #28]	@ (8020ccc <HAL_UART_RxCpltCallback+0x3c>)
 8020cae:	4293      	cmp	r3, r2
 8020cb0:	d104      	bne.n	8020cbc <HAL_UART_RxCpltCallback+0x2c>
 8020cb2:	4b07      	ldr	r3, [pc, #28]	@ (8020cd0 <HAL_UART_RxCpltCallback+0x40>)
 8020cb4:	681b      	ldr	r3, [r3, #0]
 8020cb6:	4618      	mov	r0, r3
 8020cb8:	f7ec faee 	bl	800d298 <osSemaphoreRelease>
}
 8020cbc:	bf00      	nop
 8020cbe:	3708      	adds	r7, #8
 8020cc0:	46bd      	mov	sp, r7
 8020cc2:	bd80      	pop	{r7, pc}
 8020cc4:	200008f4 	.word	0x200008f4
 8020cc8:	2002d814 	.word	0x2002d814
 8020ccc:	2000097c 	.word	0x2000097c
 8020cd0:	2002d818 	.word	0x2002d818

08020cd4 <rand>:
 8020cd4:	4b16      	ldr	r3, [pc, #88]	@ (8020d30 <rand+0x5c>)
 8020cd6:	b510      	push	{r4, lr}
 8020cd8:	681c      	ldr	r4, [r3, #0]
 8020cda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020cdc:	b9b3      	cbnz	r3, 8020d0c <rand+0x38>
 8020cde:	2018      	movs	r0, #24
 8020ce0:	f000 fba2 	bl	8021428 <malloc>
 8020ce4:	4602      	mov	r2, r0
 8020ce6:	6320      	str	r0, [r4, #48]	@ 0x30
 8020ce8:	b920      	cbnz	r0, 8020cf4 <rand+0x20>
 8020cea:	4b12      	ldr	r3, [pc, #72]	@ (8020d34 <rand+0x60>)
 8020cec:	4812      	ldr	r0, [pc, #72]	@ (8020d38 <rand+0x64>)
 8020cee:	2152      	movs	r1, #82	@ 0x52
 8020cf0:	f000 fb32 	bl	8021358 <__assert_func>
 8020cf4:	4911      	ldr	r1, [pc, #68]	@ (8020d3c <rand+0x68>)
 8020cf6:	4b12      	ldr	r3, [pc, #72]	@ (8020d40 <rand+0x6c>)
 8020cf8:	e9c0 1300 	strd	r1, r3, [r0]
 8020cfc:	4b11      	ldr	r3, [pc, #68]	@ (8020d44 <rand+0x70>)
 8020cfe:	6083      	str	r3, [r0, #8]
 8020d00:	230b      	movs	r3, #11
 8020d02:	8183      	strh	r3, [r0, #12]
 8020d04:	2100      	movs	r1, #0
 8020d06:	2001      	movs	r0, #1
 8020d08:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8020d0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8020d0e:	480e      	ldr	r0, [pc, #56]	@ (8020d48 <rand+0x74>)
 8020d10:	690b      	ldr	r3, [r1, #16]
 8020d12:	694c      	ldr	r4, [r1, #20]
 8020d14:	4a0d      	ldr	r2, [pc, #52]	@ (8020d4c <rand+0x78>)
 8020d16:	4358      	muls	r0, r3
 8020d18:	fb02 0004 	mla	r0, r2, r4, r0
 8020d1c:	fba3 3202 	umull	r3, r2, r3, r2
 8020d20:	3301      	adds	r3, #1
 8020d22:	eb40 0002 	adc.w	r0, r0, r2
 8020d26:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8020d2a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8020d2e:	bd10      	pop	{r4, pc}
 8020d30:	20000080 	.word	0x20000080
 8020d34:	08026dce 	.word	0x08026dce
 8020d38:	08026de5 	.word	0x08026de5
 8020d3c:	abcd330e 	.word	0xabcd330e
 8020d40:	e66d1234 	.word	0xe66d1234
 8020d44:	0005deec 	.word	0x0005deec
 8020d48:	5851f42d 	.word	0x5851f42d
 8020d4c:	4c957f2d 	.word	0x4c957f2d

08020d50 <std>:
 8020d50:	2300      	movs	r3, #0
 8020d52:	b510      	push	{r4, lr}
 8020d54:	4604      	mov	r4, r0
 8020d56:	e9c0 3300 	strd	r3, r3, [r0]
 8020d5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8020d5e:	6083      	str	r3, [r0, #8]
 8020d60:	8181      	strh	r1, [r0, #12]
 8020d62:	6643      	str	r3, [r0, #100]	@ 0x64
 8020d64:	81c2      	strh	r2, [r0, #14]
 8020d66:	6183      	str	r3, [r0, #24]
 8020d68:	4619      	mov	r1, r3
 8020d6a:	2208      	movs	r2, #8
 8020d6c:	305c      	adds	r0, #92	@ 0x5c
 8020d6e:	f000 fa11 	bl	8021194 <memset>
 8020d72:	4b0d      	ldr	r3, [pc, #52]	@ (8020da8 <std+0x58>)
 8020d74:	6263      	str	r3, [r4, #36]	@ 0x24
 8020d76:	4b0d      	ldr	r3, [pc, #52]	@ (8020dac <std+0x5c>)
 8020d78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8020d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8020db0 <std+0x60>)
 8020d7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8020db4 <std+0x64>)
 8020d80:	6323      	str	r3, [r4, #48]	@ 0x30
 8020d82:	4b0d      	ldr	r3, [pc, #52]	@ (8020db8 <std+0x68>)
 8020d84:	6224      	str	r4, [r4, #32]
 8020d86:	429c      	cmp	r4, r3
 8020d88:	d006      	beq.n	8020d98 <std+0x48>
 8020d8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020d8e:	4294      	cmp	r4, r2
 8020d90:	d002      	beq.n	8020d98 <std+0x48>
 8020d92:	33d0      	adds	r3, #208	@ 0xd0
 8020d94:	429c      	cmp	r4, r3
 8020d96:	d105      	bne.n	8020da4 <std+0x54>
 8020d98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020da0:	f000 bac8 	b.w	8021334 <__retarget_lock_init_recursive>
 8020da4:	bd10      	pop	{r4, pc}
 8020da6:	bf00      	nop
 8020da8:	08020fc5 	.word	0x08020fc5
 8020dac:	08020fe7 	.word	0x08020fe7
 8020db0:	0802101f 	.word	0x0802101f
 8020db4:	08021043 	.word	0x08021043
 8020db8:	2002d81c 	.word	0x2002d81c

08020dbc <stdio_exit_handler>:
 8020dbc:	4a02      	ldr	r2, [pc, #8]	@ (8020dc8 <stdio_exit_handler+0xc>)
 8020dbe:	4903      	ldr	r1, [pc, #12]	@ (8020dcc <stdio_exit_handler+0x10>)
 8020dc0:	4803      	ldr	r0, [pc, #12]	@ (8020dd0 <stdio_exit_handler+0x14>)
 8020dc2:	f000 b869 	b.w	8020e98 <_fwalk_sglue>
 8020dc6:	bf00      	nop
 8020dc8:	20000074 	.word	0x20000074
 8020dcc:	08021c39 	.word	0x08021c39
 8020dd0:	20000084 	.word	0x20000084

08020dd4 <cleanup_stdio>:
 8020dd4:	6841      	ldr	r1, [r0, #4]
 8020dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8020e08 <cleanup_stdio+0x34>)
 8020dd8:	4299      	cmp	r1, r3
 8020dda:	b510      	push	{r4, lr}
 8020ddc:	4604      	mov	r4, r0
 8020dde:	d001      	beq.n	8020de4 <cleanup_stdio+0x10>
 8020de0:	f000 ff2a 	bl	8021c38 <_fflush_r>
 8020de4:	68a1      	ldr	r1, [r4, #8]
 8020de6:	4b09      	ldr	r3, [pc, #36]	@ (8020e0c <cleanup_stdio+0x38>)
 8020de8:	4299      	cmp	r1, r3
 8020dea:	d002      	beq.n	8020df2 <cleanup_stdio+0x1e>
 8020dec:	4620      	mov	r0, r4
 8020dee:	f000 ff23 	bl	8021c38 <_fflush_r>
 8020df2:	68e1      	ldr	r1, [r4, #12]
 8020df4:	4b06      	ldr	r3, [pc, #24]	@ (8020e10 <cleanup_stdio+0x3c>)
 8020df6:	4299      	cmp	r1, r3
 8020df8:	d004      	beq.n	8020e04 <cleanup_stdio+0x30>
 8020dfa:	4620      	mov	r0, r4
 8020dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020e00:	f000 bf1a 	b.w	8021c38 <_fflush_r>
 8020e04:	bd10      	pop	{r4, pc}
 8020e06:	bf00      	nop
 8020e08:	2002d81c 	.word	0x2002d81c
 8020e0c:	2002d884 	.word	0x2002d884
 8020e10:	2002d8ec 	.word	0x2002d8ec

08020e14 <global_stdio_init.part.0>:
 8020e14:	b510      	push	{r4, lr}
 8020e16:	4b0b      	ldr	r3, [pc, #44]	@ (8020e44 <global_stdio_init.part.0+0x30>)
 8020e18:	4c0b      	ldr	r4, [pc, #44]	@ (8020e48 <global_stdio_init.part.0+0x34>)
 8020e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8020e4c <global_stdio_init.part.0+0x38>)
 8020e1c:	601a      	str	r2, [r3, #0]
 8020e1e:	4620      	mov	r0, r4
 8020e20:	2200      	movs	r2, #0
 8020e22:	2104      	movs	r1, #4
 8020e24:	f7ff ff94 	bl	8020d50 <std>
 8020e28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020e2c:	2201      	movs	r2, #1
 8020e2e:	2109      	movs	r1, #9
 8020e30:	f7ff ff8e 	bl	8020d50 <std>
 8020e34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020e38:	2202      	movs	r2, #2
 8020e3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020e3e:	2112      	movs	r1, #18
 8020e40:	f7ff bf86 	b.w	8020d50 <std>
 8020e44:	2002d954 	.word	0x2002d954
 8020e48:	2002d81c 	.word	0x2002d81c
 8020e4c:	08020dbd 	.word	0x08020dbd

08020e50 <__sfp_lock_acquire>:
 8020e50:	4801      	ldr	r0, [pc, #4]	@ (8020e58 <__sfp_lock_acquire+0x8>)
 8020e52:	f000 ba70 	b.w	8021336 <__retarget_lock_acquire_recursive>
 8020e56:	bf00      	nop
 8020e58:	2002d95d 	.word	0x2002d95d

08020e5c <__sfp_lock_release>:
 8020e5c:	4801      	ldr	r0, [pc, #4]	@ (8020e64 <__sfp_lock_release+0x8>)
 8020e5e:	f000 ba6b 	b.w	8021338 <__retarget_lock_release_recursive>
 8020e62:	bf00      	nop
 8020e64:	2002d95d 	.word	0x2002d95d

08020e68 <__sinit>:
 8020e68:	b510      	push	{r4, lr}
 8020e6a:	4604      	mov	r4, r0
 8020e6c:	f7ff fff0 	bl	8020e50 <__sfp_lock_acquire>
 8020e70:	6a23      	ldr	r3, [r4, #32]
 8020e72:	b11b      	cbz	r3, 8020e7c <__sinit+0x14>
 8020e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020e78:	f7ff bff0 	b.w	8020e5c <__sfp_lock_release>
 8020e7c:	4b04      	ldr	r3, [pc, #16]	@ (8020e90 <__sinit+0x28>)
 8020e7e:	6223      	str	r3, [r4, #32]
 8020e80:	4b04      	ldr	r3, [pc, #16]	@ (8020e94 <__sinit+0x2c>)
 8020e82:	681b      	ldr	r3, [r3, #0]
 8020e84:	2b00      	cmp	r3, #0
 8020e86:	d1f5      	bne.n	8020e74 <__sinit+0xc>
 8020e88:	f7ff ffc4 	bl	8020e14 <global_stdio_init.part.0>
 8020e8c:	e7f2      	b.n	8020e74 <__sinit+0xc>
 8020e8e:	bf00      	nop
 8020e90:	08020dd5 	.word	0x08020dd5
 8020e94:	2002d954 	.word	0x2002d954

08020e98 <_fwalk_sglue>:
 8020e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020e9c:	4607      	mov	r7, r0
 8020e9e:	4688      	mov	r8, r1
 8020ea0:	4614      	mov	r4, r2
 8020ea2:	2600      	movs	r6, #0
 8020ea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020ea8:	f1b9 0901 	subs.w	r9, r9, #1
 8020eac:	d505      	bpl.n	8020eba <_fwalk_sglue+0x22>
 8020eae:	6824      	ldr	r4, [r4, #0]
 8020eb0:	2c00      	cmp	r4, #0
 8020eb2:	d1f7      	bne.n	8020ea4 <_fwalk_sglue+0xc>
 8020eb4:	4630      	mov	r0, r6
 8020eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020eba:	89ab      	ldrh	r3, [r5, #12]
 8020ebc:	2b01      	cmp	r3, #1
 8020ebe:	d907      	bls.n	8020ed0 <_fwalk_sglue+0x38>
 8020ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020ec4:	3301      	adds	r3, #1
 8020ec6:	d003      	beq.n	8020ed0 <_fwalk_sglue+0x38>
 8020ec8:	4629      	mov	r1, r5
 8020eca:	4638      	mov	r0, r7
 8020ecc:	47c0      	blx	r8
 8020ece:	4306      	orrs	r6, r0
 8020ed0:	3568      	adds	r5, #104	@ 0x68
 8020ed2:	e7e9      	b.n	8020ea8 <_fwalk_sglue+0x10>

08020ed4 <iprintf>:
 8020ed4:	b40f      	push	{r0, r1, r2, r3}
 8020ed6:	b507      	push	{r0, r1, r2, lr}
 8020ed8:	4906      	ldr	r1, [pc, #24]	@ (8020ef4 <iprintf+0x20>)
 8020eda:	ab04      	add	r3, sp, #16
 8020edc:	6808      	ldr	r0, [r1, #0]
 8020ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ee2:	6881      	ldr	r1, [r0, #8]
 8020ee4:	9301      	str	r3, [sp, #4]
 8020ee6:	f000 fb7f 	bl	80215e8 <_vfiprintf_r>
 8020eea:	b003      	add	sp, #12
 8020eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8020ef0:	b004      	add	sp, #16
 8020ef2:	4770      	bx	lr
 8020ef4:	20000080 	.word	0x20000080

08020ef8 <putchar>:
 8020ef8:	4b02      	ldr	r3, [pc, #8]	@ (8020f04 <putchar+0xc>)
 8020efa:	4601      	mov	r1, r0
 8020efc:	6818      	ldr	r0, [r3, #0]
 8020efe:	6882      	ldr	r2, [r0, #8]
 8020f00:	f000 bf36 	b.w	8021d70 <_putc_r>
 8020f04:	20000080 	.word	0x20000080

08020f08 <_puts_r>:
 8020f08:	6a03      	ldr	r3, [r0, #32]
 8020f0a:	b570      	push	{r4, r5, r6, lr}
 8020f0c:	6884      	ldr	r4, [r0, #8]
 8020f0e:	4605      	mov	r5, r0
 8020f10:	460e      	mov	r6, r1
 8020f12:	b90b      	cbnz	r3, 8020f18 <_puts_r+0x10>
 8020f14:	f7ff ffa8 	bl	8020e68 <__sinit>
 8020f18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020f1a:	07db      	lsls	r3, r3, #31
 8020f1c:	d405      	bmi.n	8020f2a <_puts_r+0x22>
 8020f1e:	89a3      	ldrh	r3, [r4, #12]
 8020f20:	0598      	lsls	r0, r3, #22
 8020f22:	d402      	bmi.n	8020f2a <_puts_r+0x22>
 8020f24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020f26:	f000 fa06 	bl	8021336 <__retarget_lock_acquire_recursive>
 8020f2a:	89a3      	ldrh	r3, [r4, #12]
 8020f2c:	0719      	lsls	r1, r3, #28
 8020f2e:	d502      	bpl.n	8020f36 <_puts_r+0x2e>
 8020f30:	6923      	ldr	r3, [r4, #16]
 8020f32:	2b00      	cmp	r3, #0
 8020f34:	d135      	bne.n	8020fa2 <_puts_r+0x9a>
 8020f36:	4621      	mov	r1, r4
 8020f38:	4628      	mov	r0, r5
 8020f3a:	f000 f8c5 	bl	80210c8 <__swsetup_r>
 8020f3e:	b380      	cbz	r0, 8020fa2 <_puts_r+0x9a>
 8020f40:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8020f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020f46:	07da      	lsls	r2, r3, #31
 8020f48:	d405      	bmi.n	8020f56 <_puts_r+0x4e>
 8020f4a:	89a3      	ldrh	r3, [r4, #12]
 8020f4c:	059b      	lsls	r3, r3, #22
 8020f4e:	d402      	bmi.n	8020f56 <_puts_r+0x4e>
 8020f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020f52:	f000 f9f1 	bl	8021338 <__retarget_lock_release_recursive>
 8020f56:	4628      	mov	r0, r5
 8020f58:	bd70      	pop	{r4, r5, r6, pc}
 8020f5a:	2b00      	cmp	r3, #0
 8020f5c:	da04      	bge.n	8020f68 <_puts_r+0x60>
 8020f5e:	69a2      	ldr	r2, [r4, #24]
 8020f60:	429a      	cmp	r2, r3
 8020f62:	dc17      	bgt.n	8020f94 <_puts_r+0x8c>
 8020f64:	290a      	cmp	r1, #10
 8020f66:	d015      	beq.n	8020f94 <_puts_r+0x8c>
 8020f68:	6823      	ldr	r3, [r4, #0]
 8020f6a:	1c5a      	adds	r2, r3, #1
 8020f6c:	6022      	str	r2, [r4, #0]
 8020f6e:	7019      	strb	r1, [r3, #0]
 8020f70:	68a3      	ldr	r3, [r4, #8]
 8020f72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020f76:	3b01      	subs	r3, #1
 8020f78:	60a3      	str	r3, [r4, #8]
 8020f7a:	2900      	cmp	r1, #0
 8020f7c:	d1ed      	bne.n	8020f5a <_puts_r+0x52>
 8020f7e:	2b00      	cmp	r3, #0
 8020f80:	da11      	bge.n	8020fa6 <_puts_r+0x9e>
 8020f82:	4622      	mov	r2, r4
 8020f84:	210a      	movs	r1, #10
 8020f86:	4628      	mov	r0, r5
 8020f88:	f000 f85f 	bl	802104a <__swbuf_r>
 8020f8c:	3001      	adds	r0, #1
 8020f8e:	d0d7      	beq.n	8020f40 <_puts_r+0x38>
 8020f90:	250a      	movs	r5, #10
 8020f92:	e7d7      	b.n	8020f44 <_puts_r+0x3c>
 8020f94:	4622      	mov	r2, r4
 8020f96:	4628      	mov	r0, r5
 8020f98:	f000 f857 	bl	802104a <__swbuf_r>
 8020f9c:	3001      	adds	r0, #1
 8020f9e:	d1e7      	bne.n	8020f70 <_puts_r+0x68>
 8020fa0:	e7ce      	b.n	8020f40 <_puts_r+0x38>
 8020fa2:	3e01      	subs	r6, #1
 8020fa4:	e7e4      	b.n	8020f70 <_puts_r+0x68>
 8020fa6:	6823      	ldr	r3, [r4, #0]
 8020fa8:	1c5a      	adds	r2, r3, #1
 8020faa:	6022      	str	r2, [r4, #0]
 8020fac:	220a      	movs	r2, #10
 8020fae:	701a      	strb	r2, [r3, #0]
 8020fb0:	e7ee      	b.n	8020f90 <_puts_r+0x88>
	...

08020fb4 <puts>:
 8020fb4:	4b02      	ldr	r3, [pc, #8]	@ (8020fc0 <puts+0xc>)
 8020fb6:	4601      	mov	r1, r0
 8020fb8:	6818      	ldr	r0, [r3, #0]
 8020fba:	f7ff bfa5 	b.w	8020f08 <_puts_r>
 8020fbe:	bf00      	nop
 8020fc0:	20000080 	.word	0x20000080

08020fc4 <__sread>:
 8020fc4:	b510      	push	{r4, lr}
 8020fc6:	460c      	mov	r4, r1
 8020fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020fcc:	f000 f96a 	bl	80212a4 <_read_r>
 8020fd0:	2800      	cmp	r0, #0
 8020fd2:	bfab      	itete	ge
 8020fd4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020fd6:	89a3      	ldrhlt	r3, [r4, #12]
 8020fd8:	181b      	addge	r3, r3, r0
 8020fda:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020fde:	bfac      	ite	ge
 8020fe0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020fe2:	81a3      	strhlt	r3, [r4, #12]
 8020fe4:	bd10      	pop	{r4, pc}

08020fe6 <__swrite>:
 8020fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020fea:	461f      	mov	r7, r3
 8020fec:	898b      	ldrh	r3, [r1, #12]
 8020fee:	05db      	lsls	r3, r3, #23
 8020ff0:	4605      	mov	r5, r0
 8020ff2:	460c      	mov	r4, r1
 8020ff4:	4616      	mov	r6, r2
 8020ff6:	d505      	bpl.n	8021004 <__swrite+0x1e>
 8020ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020ffc:	2302      	movs	r3, #2
 8020ffe:	2200      	movs	r2, #0
 8021000:	f000 f93e 	bl	8021280 <_lseek_r>
 8021004:	89a3      	ldrh	r3, [r4, #12]
 8021006:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802100a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802100e:	81a3      	strh	r3, [r4, #12]
 8021010:	4632      	mov	r2, r6
 8021012:	463b      	mov	r3, r7
 8021014:	4628      	mov	r0, r5
 8021016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802101a:	f000 b955 	b.w	80212c8 <_write_r>

0802101e <__sseek>:
 802101e:	b510      	push	{r4, lr}
 8021020:	460c      	mov	r4, r1
 8021022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021026:	f000 f92b 	bl	8021280 <_lseek_r>
 802102a:	1c43      	adds	r3, r0, #1
 802102c:	89a3      	ldrh	r3, [r4, #12]
 802102e:	bf15      	itete	ne
 8021030:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021032:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021036:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802103a:	81a3      	strheq	r3, [r4, #12]
 802103c:	bf18      	it	ne
 802103e:	81a3      	strhne	r3, [r4, #12]
 8021040:	bd10      	pop	{r4, pc}

08021042 <__sclose>:
 8021042:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021046:	f000 b8ad 	b.w	80211a4 <_close_r>

0802104a <__swbuf_r>:
 802104a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802104c:	460e      	mov	r6, r1
 802104e:	4614      	mov	r4, r2
 8021050:	4605      	mov	r5, r0
 8021052:	b118      	cbz	r0, 802105c <__swbuf_r+0x12>
 8021054:	6a03      	ldr	r3, [r0, #32]
 8021056:	b90b      	cbnz	r3, 802105c <__swbuf_r+0x12>
 8021058:	f7ff ff06 	bl	8020e68 <__sinit>
 802105c:	69a3      	ldr	r3, [r4, #24]
 802105e:	60a3      	str	r3, [r4, #8]
 8021060:	89a3      	ldrh	r3, [r4, #12]
 8021062:	071a      	lsls	r2, r3, #28
 8021064:	d501      	bpl.n	802106a <__swbuf_r+0x20>
 8021066:	6923      	ldr	r3, [r4, #16]
 8021068:	b943      	cbnz	r3, 802107c <__swbuf_r+0x32>
 802106a:	4621      	mov	r1, r4
 802106c:	4628      	mov	r0, r5
 802106e:	f000 f82b 	bl	80210c8 <__swsetup_r>
 8021072:	b118      	cbz	r0, 802107c <__swbuf_r+0x32>
 8021074:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8021078:	4638      	mov	r0, r7
 802107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802107c:	6823      	ldr	r3, [r4, #0]
 802107e:	6922      	ldr	r2, [r4, #16]
 8021080:	1a98      	subs	r0, r3, r2
 8021082:	6963      	ldr	r3, [r4, #20]
 8021084:	b2f6      	uxtb	r6, r6
 8021086:	4283      	cmp	r3, r0
 8021088:	4637      	mov	r7, r6
 802108a:	dc05      	bgt.n	8021098 <__swbuf_r+0x4e>
 802108c:	4621      	mov	r1, r4
 802108e:	4628      	mov	r0, r5
 8021090:	f000 fdd2 	bl	8021c38 <_fflush_r>
 8021094:	2800      	cmp	r0, #0
 8021096:	d1ed      	bne.n	8021074 <__swbuf_r+0x2a>
 8021098:	68a3      	ldr	r3, [r4, #8]
 802109a:	3b01      	subs	r3, #1
 802109c:	60a3      	str	r3, [r4, #8]
 802109e:	6823      	ldr	r3, [r4, #0]
 80210a0:	1c5a      	adds	r2, r3, #1
 80210a2:	6022      	str	r2, [r4, #0]
 80210a4:	701e      	strb	r6, [r3, #0]
 80210a6:	6962      	ldr	r2, [r4, #20]
 80210a8:	1c43      	adds	r3, r0, #1
 80210aa:	429a      	cmp	r2, r3
 80210ac:	d004      	beq.n	80210b8 <__swbuf_r+0x6e>
 80210ae:	89a3      	ldrh	r3, [r4, #12]
 80210b0:	07db      	lsls	r3, r3, #31
 80210b2:	d5e1      	bpl.n	8021078 <__swbuf_r+0x2e>
 80210b4:	2e0a      	cmp	r6, #10
 80210b6:	d1df      	bne.n	8021078 <__swbuf_r+0x2e>
 80210b8:	4621      	mov	r1, r4
 80210ba:	4628      	mov	r0, r5
 80210bc:	f000 fdbc 	bl	8021c38 <_fflush_r>
 80210c0:	2800      	cmp	r0, #0
 80210c2:	d0d9      	beq.n	8021078 <__swbuf_r+0x2e>
 80210c4:	e7d6      	b.n	8021074 <__swbuf_r+0x2a>
	...

080210c8 <__swsetup_r>:
 80210c8:	b538      	push	{r3, r4, r5, lr}
 80210ca:	4b29      	ldr	r3, [pc, #164]	@ (8021170 <__swsetup_r+0xa8>)
 80210cc:	4605      	mov	r5, r0
 80210ce:	6818      	ldr	r0, [r3, #0]
 80210d0:	460c      	mov	r4, r1
 80210d2:	b118      	cbz	r0, 80210dc <__swsetup_r+0x14>
 80210d4:	6a03      	ldr	r3, [r0, #32]
 80210d6:	b90b      	cbnz	r3, 80210dc <__swsetup_r+0x14>
 80210d8:	f7ff fec6 	bl	8020e68 <__sinit>
 80210dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80210e0:	0719      	lsls	r1, r3, #28
 80210e2:	d422      	bmi.n	802112a <__swsetup_r+0x62>
 80210e4:	06da      	lsls	r2, r3, #27
 80210e6:	d407      	bmi.n	80210f8 <__swsetup_r+0x30>
 80210e8:	2209      	movs	r2, #9
 80210ea:	602a      	str	r2, [r5, #0]
 80210ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80210f0:	81a3      	strh	r3, [r4, #12]
 80210f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80210f6:	e033      	b.n	8021160 <__swsetup_r+0x98>
 80210f8:	0758      	lsls	r0, r3, #29
 80210fa:	d512      	bpl.n	8021122 <__swsetup_r+0x5a>
 80210fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80210fe:	b141      	cbz	r1, 8021112 <__swsetup_r+0x4a>
 8021100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021104:	4299      	cmp	r1, r3
 8021106:	d002      	beq.n	802110e <__swsetup_r+0x46>
 8021108:	4628      	mov	r0, r5
 802110a:	f000 f943 	bl	8021394 <_free_r>
 802110e:	2300      	movs	r3, #0
 8021110:	6363      	str	r3, [r4, #52]	@ 0x34
 8021112:	89a3      	ldrh	r3, [r4, #12]
 8021114:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021118:	81a3      	strh	r3, [r4, #12]
 802111a:	2300      	movs	r3, #0
 802111c:	6063      	str	r3, [r4, #4]
 802111e:	6923      	ldr	r3, [r4, #16]
 8021120:	6023      	str	r3, [r4, #0]
 8021122:	89a3      	ldrh	r3, [r4, #12]
 8021124:	f043 0308 	orr.w	r3, r3, #8
 8021128:	81a3      	strh	r3, [r4, #12]
 802112a:	6923      	ldr	r3, [r4, #16]
 802112c:	b94b      	cbnz	r3, 8021142 <__swsetup_r+0x7a>
 802112e:	89a3      	ldrh	r3, [r4, #12]
 8021130:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021134:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021138:	d003      	beq.n	8021142 <__swsetup_r+0x7a>
 802113a:	4621      	mov	r1, r4
 802113c:	4628      	mov	r0, r5
 802113e:	f000 fddb 	bl	8021cf8 <__smakebuf_r>
 8021142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021146:	f013 0201 	ands.w	r2, r3, #1
 802114a:	d00a      	beq.n	8021162 <__swsetup_r+0x9a>
 802114c:	2200      	movs	r2, #0
 802114e:	60a2      	str	r2, [r4, #8]
 8021150:	6962      	ldr	r2, [r4, #20]
 8021152:	4252      	negs	r2, r2
 8021154:	61a2      	str	r2, [r4, #24]
 8021156:	6922      	ldr	r2, [r4, #16]
 8021158:	b942      	cbnz	r2, 802116c <__swsetup_r+0xa4>
 802115a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802115e:	d1c5      	bne.n	80210ec <__swsetup_r+0x24>
 8021160:	bd38      	pop	{r3, r4, r5, pc}
 8021162:	0799      	lsls	r1, r3, #30
 8021164:	bf58      	it	pl
 8021166:	6962      	ldrpl	r2, [r4, #20]
 8021168:	60a2      	str	r2, [r4, #8]
 802116a:	e7f4      	b.n	8021156 <__swsetup_r+0x8e>
 802116c:	2000      	movs	r0, #0
 802116e:	e7f7      	b.n	8021160 <__swsetup_r+0x98>
 8021170:	20000080 	.word	0x20000080

08021174 <memcmp>:
 8021174:	b510      	push	{r4, lr}
 8021176:	3901      	subs	r1, #1
 8021178:	4402      	add	r2, r0
 802117a:	4290      	cmp	r0, r2
 802117c:	d101      	bne.n	8021182 <memcmp+0xe>
 802117e:	2000      	movs	r0, #0
 8021180:	e005      	b.n	802118e <memcmp+0x1a>
 8021182:	7803      	ldrb	r3, [r0, #0]
 8021184:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021188:	42a3      	cmp	r3, r4
 802118a:	d001      	beq.n	8021190 <memcmp+0x1c>
 802118c:	1b18      	subs	r0, r3, r4
 802118e:	bd10      	pop	{r4, pc}
 8021190:	3001      	adds	r0, #1
 8021192:	e7f2      	b.n	802117a <memcmp+0x6>

08021194 <memset>:
 8021194:	4402      	add	r2, r0
 8021196:	4603      	mov	r3, r0
 8021198:	4293      	cmp	r3, r2
 802119a:	d100      	bne.n	802119e <memset+0xa>
 802119c:	4770      	bx	lr
 802119e:	f803 1b01 	strb.w	r1, [r3], #1
 80211a2:	e7f9      	b.n	8021198 <memset+0x4>

080211a4 <_close_r>:
 80211a4:	b538      	push	{r3, r4, r5, lr}
 80211a6:	4d06      	ldr	r5, [pc, #24]	@ (80211c0 <_close_r+0x1c>)
 80211a8:	2300      	movs	r3, #0
 80211aa:	4604      	mov	r4, r0
 80211ac:	4608      	mov	r0, r1
 80211ae:	602b      	str	r3, [r5, #0]
 80211b0:	f7e0 fca2 	bl	8001af8 <_close>
 80211b4:	1c43      	adds	r3, r0, #1
 80211b6:	d102      	bne.n	80211be <_close_r+0x1a>
 80211b8:	682b      	ldr	r3, [r5, #0]
 80211ba:	b103      	cbz	r3, 80211be <_close_r+0x1a>
 80211bc:	6023      	str	r3, [r4, #0]
 80211be:	bd38      	pop	{r3, r4, r5, pc}
 80211c0:	2002d958 	.word	0x2002d958

080211c4 <_reclaim_reent>:
 80211c4:	4b2d      	ldr	r3, [pc, #180]	@ (802127c <_reclaim_reent+0xb8>)
 80211c6:	681b      	ldr	r3, [r3, #0]
 80211c8:	4283      	cmp	r3, r0
 80211ca:	b570      	push	{r4, r5, r6, lr}
 80211cc:	4604      	mov	r4, r0
 80211ce:	d053      	beq.n	8021278 <_reclaim_reent+0xb4>
 80211d0:	69c3      	ldr	r3, [r0, #28]
 80211d2:	b31b      	cbz	r3, 802121c <_reclaim_reent+0x58>
 80211d4:	68db      	ldr	r3, [r3, #12]
 80211d6:	b163      	cbz	r3, 80211f2 <_reclaim_reent+0x2e>
 80211d8:	2500      	movs	r5, #0
 80211da:	69e3      	ldr	r3, [r4, #28]
 80211dc:	68db      	ldr	r3, [r3, #12]
 80211de:	5959      	ldr	r1, [r3, r5]
 80211e0:	b9b1      	cbnz	r1, 8021210 <_reclaim_reent+0x4c>
 80211e2:	3504      	adds	r5, #4
 80211e4:	2d80      	cmp	r5, #128	@ 0x80
 80211e6:	d1f8      	bne.n	80211da <_reclaim_reent+0x16>
 80211e8:	69e3      	ldr	r3, [r4, #28]
 80211ea:	4620      	mov	r0, r4
 80211ec:	68d9      	ldr	r1, [r3, #12]
 80211ee:	f000 f8d1 	bl	8021394 <_free_r>
 80211f2:	69e3      	ldr	r3, [r4, #28]
 80211f4:	6819      	ldr	r1, [r3, #0]
 80211f6:	b111      	cbz	r1, 80211fe <_reclaim_reent+0x3a>
 80211f8:	4620      	mov	r0, r4
 80211fa:	f000 f8cb 	bl	8021394 <_free_r>
 80211fe:	69e3      	ldr	r3, [r4, #28]
 8021200:	689d      	ldr	r5, [r3, #8]
 8021202:	b15d      	cbz	r5, 802121c <_reclaim_reent+0x58>
 8021204:	4629      	mov	r1, r5
 8021206:	4620      	mov	r0, r4
 8021208:	682d      	ldr	r5, [r5, #0]
 802120a:	f000 f8c3 	bl	8021394 <_free_r>
 802120e:	e7f8      	b.n	8021202 <_reclaim_reent+0x3e>
 8021210:	680e      	ldr	r6, [r1, #0]
 8021212:	4620      	mov	r0, r4
 8021214:	f000 f8be 	bl	8021394 <_free_r>
 8021218:	4631      	mov	r1, r6
 802121a:	e7e1      	b.n	80211e0 <_reclaim_reent+0x1c>
 802121c:	6961      	ldr	r1, [r4, #20]
 802121e:	b111      	cbz	r1, 8021226 <_reclaim_reent+0x62>
 8021220:	4620      	mov	r0, r4
 8021222:	f000 f8b7 	bl	8021394 <_free_r>
 8021226:	69e1      	ldr	r1, [r4, #28]
 8021228:	b111      	cbz	r1, 8021230 <_reclaim_reent+0x6c>
 802122a:	4620      	mov	r0, r4
 802122c:	f000 f8b2 	bl	8021394 <_free_r>
 8021230:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021232:	b111      	cbz	r1, 802123a <_reclaim_reent+0x76>
 8021234:	4620      	mov	r0, r4
 8021236:	f000 f8ad 	bl	8021394 <_free_r>
 802123a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802123c:	b111      	cbz	r1, 8021244 <_reclaim_reent+0x80>
 802123e:	4620      	mov	r0, r4
 8021240:	f000 f8a8 	bl	8021394 <_free_r>
 8021244:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8021246:	b111      	cbz	r1, 802124e <_reclaim_reent+0x8a>
 8021248:	4620      	mov	r0, r4
 802124a:	f000 f8a3 	bl	8021394 <_free_r>
 802124e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8021250:	b111      	cbz	r1, 8021258 <_reclaim_reent+0x94>
 8021252:	4620      	mov	r0, r4
 8021254:	f000 f89e 	bl	8021394 <_free_r>
 8021258:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 802125a:	b111      	cbz	r1, 8021262 <_reclaim_reent+0x9e>
 802125c:	4620      	mov	r0, r4
 802125e:	f000 f899 	bl	8021394 <_free_r>
 8021262:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8021264:	b111      	cbz	r1, 802126c <_reclaim_reent+0xa8>
 8021266:	4620      	mov	r0, r4
 8021268:	f000 f894 	bl	8021394 <_free_r>
 802126c:	6a23      	ldr	r3, [r4, #32]
 802126e:	b11b      	cbz	r3, 8021278 <_reclaim_reent+0xb4>
 8021270:	4620      	mov	r0, r4
 8021272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021276:	4718      	bx	r3
 8021278:	bd70      	pop	{r4, r5, r6, pc}
 802127a:	bf00      	nop
 802127c:	20000080 	.word	0x20000080

08021280 <_lseek_r>:
 8021280:	b538      	push	{r3, r4, r5, lr}
 8021282:	4d07      	ldr	r5, [pc, #28]	@ (80212a0 <_lseek_r+0x20>)
 8021284:	4604      	mov	r4, r0
 8021286:	4608      	mov	r0, r1
 8021288:	4611      	mov	r1, r2
 802128a:	2200      	movs	r2, #0
 802128c:	602a      	str	r2, [r5, #0]
 802128e:	461a      	mov	r2, r3
 8021290:	f7e0 fc59 	bl	8001b46 <_lseek>
 8021294:	1c43      	adds	r3, r0, #1
 8021296:	d102      	bne.n	802129e <_lseek_r+0x1e>
 8021298:	682b      	ldr	r3, [r5, #0]
 802129a:	b103      	cbz	r3, 802129e <_lseek_r+0x1e>
 802129c:	6023      	str	r3, [r4, #0]
 802129e:	bd38      	pop	{r3, r4, r5, pc}
 80212a0:	2002d958 	.word	0x2002d958

080212a4 <_read_r>:
 80212a4:	b538      	push	{r3, r4, r5, lr}
 80212a6:	4d07      	ldr	r5, [pc, #28]	@ (80212c4 <_read_r+0x20>)
 80212a8:	4604      	mov	r4, r0
 80212aa:	4608      	mov	r0, r1
 80212ac:	4611      	mov	r1, r2
 80212ae:	2200      	movs	r2, #0
 80212b0:	602a      	str	r2, [r5, #0]
 80212b2:	461a      	mov	r2, r3
 80212b4:	f7e0 fc03 	bl	8001abe <_read>
 80212b8:	1c43      	adds	r3, r0, #1
 80212ba:	d102      	bne.n	80212c2 <_read_r+0x1e>
 80212bc:	682b      	ldr	r3, [r5, #0]
 80212be:	b103      	cbz	r3, 80212c2 <_read_r+0x1e>
 80212c0:	6023      	str	r3, [r4, #0]
 80212c2:	bd38      	pop	{r3, r4, r5, pc}
 80212c4:	2002d958 	.word	0x2002d958

080212c8 <_write_r>:
 80212c8:	b538      	push	{r3, r4, r5, lr}
 80212ca:	4d07      	ldr	r5, [pc, #28]	@ (80212e8 <_write_r+0x20>)
 80212cc:	4604      	mov	r4, r0
 80212ce:	4608      	mov	r0, r1
 80212d0:	4611      	mov	r1, r2
 80212d2:	2200      	movs	r2, #0
 80212d4:	602a      	str	r2, [r5, #0]
 80212d6:	461a      	mov	r2, r3
 80212d8:	f7df ff62 	bl	80011a0 <_write>
 80212dc:	1c43      	adds	r3, r0, #1
 80212de:	d102      	bne.n	80212e6 <_write_r+0x1e>
 80212e0:	682b      	ldr	r3, [r5, #0]
 80212e2:	b103      	cbz	r3, 80212e6 <_write_r+0x1e>
 80212e4:	6023      	str	r3, [r4, #0]
 80212e6:	bd38      	pop	{r3, r4, r5, pc}
 80212e8:	2002d958 	.word	0x2002d958

080212ec <__libc_init_array>:
 80212ec:	b570      	push	{r4, r5, r6, lr}
 80212ee:	4d0d      	ldr	r5, [pc, #52]	@ (8021324 <__libc_init_array+0x38>)
 80212f0:	4c0d      	ldr	r4, [pc, #52]	@ (8021328 <__libc_init_array+0x3c>)
 80212f2:	1b64      	subs	r4, r4, r5
 80212f4:	10a4      	asrs	r4, r4, #2
 80212f6:	2600      	movs	r6, #0
 80212f8:	42a6      	cmp	r6, r4
 80212fa:	d109      	bne.n	8021310 <__libc_init_array+0x24>
 80212fc:	4d0b      	ldr	r5, [pc, #44]	@ (802132c <__libc_init_array+0x40>)
 80212fe:	4c0c      	ldr	r4, [pc, #48]	@ (8021330 <__libc_init_array+0x44>)
 8021300:	f000 fde8 	bl	8021ed4 <_init>
 8021304:	1b64      	subs	r4, r4, r5
 8021306:	10a4      	asrs	r4, r4, #2
 8021308:	2600      	movs	r6, #0
 802130a:	42a6      	cmp	r6, r4
 802130c:	d105      	bne.n	802131a <__libc_init_array+0x2e>
 802130e:	bd70      	pop	{r4, r5, r6, pc}
 8021310:	f855 3b04 	ldr.w	r3, [r5], #4
 8021314:	4798      	blx	r3
 8021316:	3601      	adds	r6, #1
 8021318:	e7ee      	b.n	80212f8 <__libc_init_array+0xc>
 802131a:	f855 3b04 	ldr.w	r3, [r5], #4
 802131e:	4798      	blx	r3
 8021320:	3601      	adds	r6, #1
 8021322:	e7f2      	b.n	802130a <__libc_init_array+0x1e>
 8021324:	08026eb4 	.word	0x08026eb4
 8021328:	08026eb4 	.word	0x08026eb4
 802132c:	08026eb4 	.word	0x08026eb4
 8021330:	08026eb8 	.word	0x08026eb8

08021334 <__retarget_lock_init_recursive>:
 8021334:	4770      	bx	lr

08021336 <__retarget_lock_acquire_recursive>:
 8021336:	4770      	bx	lr

08021338 <__retarget_lock_release_recursive>:
 8021338:	4770      	bx	lr

0802133a <memcpy>:
 802133a:	440a      	add	r2, r1
 802133c:	4291      	cmp	r1, r2
 802133e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8021342:	d100      	bne.n	8021346 <memcpy+0xc>
 8021344:	4770      	bx	lr
 8021346:	b510      	push	{r4, lr}
 8021348:	f811 4b01 	ldrb.w	r4, [r1], #1
 802134c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021350:	4291      	cmp	r1, r2
 8021352:	d1f9      	bne.n	8021348 <memcpy+0xe>
 8021354:	bd10      	pop	{r4, pc}
	...

08021358 <__assert_func>:
 8021358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802135a:	4614      	mov	r4, r2
 802135c:	461a      	mov	r2, r3
 802135e:	4b09      	ldr	r3, [pc, #36]	@ (8021384 <__assert_func+0x2c>)
 8021360:	681b      	ldr	r3, [r3, #0]
 8021362:	4605      	mov	r5, r0
 8021364:	68d8      	ldr	r0, [r3, #12]
 8021366:	b14c      	cbz	r4, 802137c <__assert_func+0x24>
 8021368:	4b07      	ldr	r3, [pc, #28]	@ (8021388 <__assert_func+0x30>)
 802136a:	9100      	str	r1, [sp, #0]
 802136c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021370:	4906      	ldr	r1, [pc, #24]	@ (802138c <__assert_func+0x34>)
 8021372:	462b      	mov	r3, r5
 8021374:	f000 fc88 	bl	8021c88 <fiprintf>
 8021378:	f000 fd60 	bl	8021e3c <abort>
 802137c:	4b04      	ldr	r3, [pc, #16]	@ (8021390 <__assert_func+0x38>)
 802137e:	461c      	mov	r4, r3
 8021380:	e7f3      	b.n	802136a <__assert_func+0x12>
 8021382:	bf00      	nop
 8021384:	20000080 	.word	0x20000080
 8021388:	08026e3d 	.word	0x08026e3d
 802138c:	08026e4a 	.word	0x08026e4a
 8021390:	08026e78 	.word	0x08026e78

08021394 <_free_r>:
 8021394:	b538      	push	{r3, r4, r5, lr}
 8021396:	4605      	mov	r5, r0
 8021398:	2900      	cmp	r1, #0
 802139a:	d041      	beq.n	8021420 <_free_r+0x8c>
 802139c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80213a0:	1f0c      	subs	r4, r1, #4
 80213a2:	2b00      	cmp	r3, #0
 80213a4:	bfb8      	it	lt
 80213a6:	18e4      	addlt	r4, r4, r3
 80213a8:	f000 f8e8 	bl	802157c <__malloc_lock>
 80213ac:	4a1d      	ldr	r2, [pc, #116]	@ (8021424 <_free_r+0x90>)
 80213ae:	6813      	ldr	r3, [r2, #0]
 80213b0:	b933      	cbnz	r3, 80213c0 <_free_r+0x2c>
 80213b2:	6063      	str	r3, [r4, #4]
 80213b4:	6014      	str	r4, [r2, #0]
 80213b6:	4628      	mov	r0, r5
 80213b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80213bc:	f000 b8e4 	b.w	8021588 <__malloc_unlock>
 80213c0:	42a3      	cmp	r3, r4
 80213c2:	d908      	bls.n	80213d6 <_free_r+0x42>
 80213c4:	6820      	ldr	r0, [r4, #0]
 80213c6:	1821      	adds	r1, r4, r0
 80213c8:	428b      	cmp	r3, r1
 80213ca:	bf01      	itttt	eq
 80213cc:	6819      	ldreq	r1, [r3, #0]
 80213ce:	685b      	ldreq	r3, [r3, #4]
 80213d0:	1809      	addeq	r1, r1, r0
 80213d2:	6021      	streq	r1, [r4, #0]
 80213d4:	e7ed      	b.n	80213b2 <_free_r+0x1e>
 80213d6:	461a      	mov	r2, r3
 80213d8:	685b      	ldr	r3, [r3, #4]
 80213da:	b10b      	cbz	r3, 80213e0 <_free_r+0x4c>
 80213dc:	42a3      	cmp	r3, r4
 80213de:	d9fa      	bls.n	80213d6 <_free_r+0x42>
 80213e0:	6811      	ldr	r1, [r2, #0]
 80213e2:	1850      	adds	r0, r2, r1
 80213e4:	42a0      	cmp	r0, r4
 80213e6:	d10b      	bne.n	8021400 <_free_r+0x6c>
 80213e8:	6820      	ldr	r0, [r4, #0]
 80213ea:	4401      	add	r1, r0
 80213ec:	1850      	adds	r0, r2, r1
 80213ee:	4283      	cmp	r3, r0
 80213f0:	6011      	str	r1, [r2, #0]
 80213f2:	d1e0      	bne.n	80213b6 <_free_r+0x22>
 80213f4:	6818      	ldr	r0, [r3, #0]
 80213f6:	685b      	ldr	r3, [r3, #4]
 80213f8:	6053      	str	r3, [r2, #4]
 80213fa:	4408      	add	r0, r1
 80213fc:	6010      	str	r0, [r2, #0]
 80213fe:	e7da      	b.n	80213b6 <_free_r+0x22>
 8021400:	d902      	bls.n	8021408 <_free_r+0x74>
 8021402:	230c      	movs	r3, #12
 8021404:	602b      	str	r3, [r5, #0]
 8021406:	e7d6      	b.n	80213b6 <_free_r+0x22>
 8021408:	6820      	ldr	r0, [r4, #0]
 802140a:	1821      	adds	r1, r4, r0
 802140c:	428b      	cmp	r3, r1
 802140e:	bf04      	itt	eq
 8021410:	6819      	ldreq	r1, [r3, #0]
 8021412:	685b      	ldreq	r3, [r3, #4]
 8021414:	6063      	str	r3, [r4, #4]
 8021416:	bf04      	itt	eq
 8021418:	1809      	addeq	r1, r1, r0
 802141a:	6021      	streq	r1, [r4, #0]
 802141c:	6054      	str	r4, [r2, #4]
 802141e:	e7ca      	b.n	80213b6 <_free_r+0x22>
 8021420:	bd38      	pop	{r3, r4, r5, pc}
 8021422:	bf00      	nop
 8021424:	2002d964 	.word	0x2002d964

08021428 <malloc>:
 8021428:	4b02      	ldr	r3, [pc, #8]	@ (8021434 <malloc+0xc>)
 802142a:	4601      	mov	r1, r0
 802142c:	6818      	ldr	r0, [r3, #0]
 802142e:	f000 b825 	b.w	802147c <_malloc_r>
 8021432:	bf00      	nop
 8021434:	20000080 	.word	0x20000080

08021438 <sbrk_aligned>:
 8021438:	b570      	push	{r4, r5, r6, lr}
 802143a:	4e0f      	ldr	r6, [pc, #60]	@ (8021478 <sbrk_aligned+0x40>)
 802143c:	460c      	mov	r4, r1
 802143e:	6831      	ldr	r1, [r6, #0]
 8021440:	4605      	mov	r5, r0
 8021442:	b911      	cbnz	r1, 802144a <sbrk_aligned+0x12>
 8021444:	f000 fcea 	bl	8021e1c <_sbrk_r>
 8021448:	6030      	str	r0, [r6, #0]
 802144a:	4621      	mov	r1, r4
 802144c:	4628      	mov	r0, r5
 802144e:	f000 fce5 	bl	8021e1c <_sbrk_r>
 8021452:	1c43      	adds	r3, r0, #1
 8021454:	d103      	bne.n	802145e <sbrk_aligned+0x26>
 8021456:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 802145a:	4620      	mov	r0, r4
 802145c:	bd70      	pop	{r4, r5, r6, pc}
 802145e:	1cc4      	adds	r4, r0, #3
 8021460:	f024 0403 	bic.w	r4, r4, #3
 8021464:	42a0      	cmp	r0, r4
 8021466:	d0f8      	beq.n	802145a <sbrk_aligned+0x22>
 8021468:	1a21      	subs	r1, r4, r0
 802146a:	4628      	mov	r0, r5
 802146c:	f000 fcd6 	bl	8021e1c <_sbrk_r>
 8021470:	3001      	adds	r0, #1
 8021472:	d1f2      	bne.n	802145a <sbrk_aligned+0x22>
 8021474:	e7ef      	b.n	8021456 <sbrk_aligned+0x1e>
 8021476:	bf00      	nop
 8021478:	2002d960 	.word	0x2002d960

0802147c <_malloc_r>:
 802147c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021480:	1ccd      	adds	r5, r1, #3
 8021482:	f025 0503 	bic.w	r5, r5, #3
 8021486:	3508      	adds	r5, #8
 8021488:	2d0c      	cmp	r5, #12
 802148a:	bf38      	it	cc
 802148c:	250c      	movcc	r5, #12
 802148e:	2d00      	cmp	r5, #0
 8021490:	4606      	mov	r6, r0
 8021492:	db01      	blt.n	8021498 <_malloc_r+0x1c>
 8021494:	42a9      	cmp	r1, r5
 8021496:	d904      	bls.n	80214a2 <_malloc_r+0x26>
 8021498:	230c      	movs	r3, #12
 802149a:	6033      	str	r3, [r6, #0]
 802149c:	2000      	movs	r0, #0
 802149e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80214a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021578 <_malloc_r+0xfc>
 80214a6:	f000 f869 	bl	802157c <__malloc_lock>
 80214aa:	f8d8 3000 	ldr.w	r3, [r8]
 80214ae:	461c      	mov	r4, r3
 80214b0:	bb44      	cbnz	r4, 8021504 <_malloc_r+0x88>
 80214b2:	4629      	mov	r1, r5
 80214b4:	4630      	mov	r0, r6
 80214b6:	f7ff ffbf 	bl	8021438 <sbrk_aligned>
 80214ba:	1c43      	adds	r3, r0, #1
 80214bc:	4604      	mov	r4, r0
 80214be:	d158      	bne.n	8021572 <_malloc_r+0xf6>
 80214c0:	f8d8 4000 	ldr.w	r4, [r8]
 80214c4:	4627      	mov	r7, r4
 80214c6:	2f00      	cmp	r7, #0
 80214c8:	d143      	bne.n	8021552 <_malloc_r+0xd6>
 80214ca:	2c00      	cmp	r4, #0
 80214cc:	d04b      	beq.n	8021566 <_malloc_r+0xea>
 80214ce:	6823      	ldr	r3, [r4, #0]
 80214d0:	4639      	mov	r1, r7
 80214d2:	4630      	mov	r0, r6
 80214d4:	eb04 0903 	add.w	r9, r4, r3
 80214d8:	f000 fca0 	bl	8021e1c <_sbrk_r>
 80214dc:	4581      	cmp	r9, r0
 80214de:	d142      	bne.n	8021566 <_malloc_r+0xea>
 80214e0:	6821      	ldr	r1, [r4, #0]
 80214e2:	1a6d      	subs	r5, r5, r1
 80214e4:	4629      	mov	r1, r5
 80214e6:	4630      	mov	r0, r6
 80214e8:	f7ff ffa6 	bl	8021438 <sbrk_aligned>
 80214ec:	3001      	adds	r0, #1
 80214ee:	d03a      	beq.n	8021566 <_malloc_r+0xea>
 80214f0:	6823      	ldr	r3, [r4, #0]
 80214f2:	442b      	add	r3, r5
 80214f4:	6023      	str	r3, [r4, #0]
 80214f6:	f8d8 3000 	ldr.w	r3, [r8]
 80214fa:	685a      	ldr	r2, [r3, #4]
 80214fc:	bb62      	cbnz	r2, 8021558 <_malloc_r+0xdc>
 80214fe:	f8c8 7000 	str.w	r7, [r8]
 8021502:	e00f      	b.n	8021524 <_malloc_r+0xa8>
 8021504:	6822      	ldr	r2, [r4, #0]
 8021506:	1b52      	subs	r2, r2, r5
 8021508:	d420      	bmi.n	802154c <_malloc_r+0xd0>
 802150a:	2a0b      	cmp	r2, #11
 802150c:	d917      	bls.n	802153e <_malloc_r+0xc2>
 802150e:	1961      	adds	r1, r4, r5
 8021510:	42a3      	cmp	r3, r4
 8021512:	6025      	str	r5, [r4, #0]
 8021514:	bf18      	it	ne
 8021516:	6059      	strne	r1, [r3, #4]
 8021518:	6863      	ldr	r3, [r4, #4]
 802151a:	bf08      	it	eq
 802151c:	f8c8 1000 	streq.w	r1, [r8]
 8021520:	5162      	str	r2, [r4, r5]
 8021522:	604b      	str	r3, [r1, #4]
 8021524:	4630      	mov	r0, r6
 8021526:	f000 f82f 	bl	8021588 <__malloc_unlock>
 802152a:	f104 000b 	add.w	r0, r4, #11
 802152e:	1d23      	adds	r3, r4, #4
 8021530:	f020 0007 	bic.w	r0, r0, #7
 8021534:	1ac2      	subs	r2, r0, r3
 8021536:	bf1c      	itt	ne
 8021538:	1a1b      	subne	r3, r3, r0
 802153a:	50a3      	strne	r3, [r4, r2]
 802153c:	e7af      	b.n	802149e <_malloc_r+0x22>
 802153e:	6862      	ldr	r2, [r4, #4]
 8021540:	42a3      	cmp	r3, r4
 8021542:	bf0c      	ite	eq
 8021544:	f8c8 2000 	streq.w	r2, [r8]
 8021548:	605a      	strne	r2, [r3, #4]
 802154a:	e7eb      	b.n	8021524 <_malloc_r+0xa8>
 802154c:	4623      	mov	r3, r4
 802154e:	6864      	ldr	r4, [r4, #4]
 8021550:	e7ae      	b.n	80214b0 <_malloc_r+0x34>
 8021552:	463c      	mov	r4, r7
 8021554:	687f      	ldr	r7, [r7, #4]
 8021556:	e7b6      	b.n	80214c6 <_malloc_r+0x4a>
 8021558:	461a      	mov	r2, r3
 802155a:	685b      	ldr	r3, [r3, #4]
 802155c:	42a3      	cmp	r3, r4
 802155e:	d1fb      	bne.n	8021558 <_malloc_r+0xdc>
 8021560:	2300      	movs	r3, #0
 8021562:	6053      	str	r3, [r2, #4]
 8021564:	e7de      	b.n	8021524 <_malloc_r+0xa8>
 8021566:	230c      	movs	r3, #12
 8021568:	6033      	str	r3, [r6, #0]
 802156a:	4630      	mov	r0, r6
 802156c:	f000 f80c 	bl	8021588 <__malloc_unlock>
 8021570:	e794      	b.n	802149c <_malloc_r+0x20>
 8021572:	6005      	str	r5, [r0, #0]
 8021574:	e7d6      	b.n	8021524 <_malloc_r+0xa8>
 8021576:	bf00      	nop
 8021578:	2002d964 	.word	0x2002d964

0802157c <__malloc_lock>:
 802157c:	4801      	ldr	r0, [pc, #4]	@ (8021584 <__malloc_lock+0x8>)
 802157e:	f7ff beda 	b.w	8021336 <__retarget_lock_acquire_recursive>
 8021582:	bf00      	nop
 8021584:	2002d95c 	.word	0x2002d95c

08021588 <__malloc_unlock>:
 8021588:	4801      	ldr	r0, [pc, #4]	@ (8021590 <__malloc_unlock+0x8>)
 802158a:	f7ff bed5 	b.w	8021338 <__retarget_lock_release_recursive>
 802158e:	bf00      	nop
 8021590:	2002d95c 	.word	0x2002d95c

08021594 <__sfputc_r>:
 8021594:	6893      	ldr	r3, [r2, #8]
 8021596:	3b01      	subs	r3, #1
 8021598:	2b00      	cmp	r3, #0
 802159a:	b410      	push	{r4}
 802159c:	6093      	str	r3, [r2, #8]
 802159e:	da08      	bge.n	80215b2 <__sfputc_r+0x1e>
 80215a0:	6994      	ldr	r4, [r2, #24]
 80215a2:	42a3      	cmp	r3, r4
 80215a4:	db01      	blt.n	80215aa <__sfputc_r+0x16>
 80215a6:	290a      	cmp	r1, #10
 80215a8:	d103      	bne.n	80215b2 <__sfputc_r+0x1e>
 80215aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80215ae:	f7ff bd4c 	b.w	802104a <__swbuf_r>
 80215b2:	6813      	ldr	r3, [r2, #0]
 80215b4:	1c58      	adds	r0, r3, #1
 80215b6:	6010      	str	r0, [r2, #0]
 80215b8:	7019      	strb	r1, [r3, #0]
 80215ba:	4608      	mov	r0, r1
 80215bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80215c0:	4770      	bx	lr

080215c2 <__sfputs_r>:
 80215c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215c4:	4606      	mov	r6, r0
 80215c6:	460f      	mov	r7, r1
 80215c8:	4614      	mov	r4, r2
 80215ca:	18d5      	adds	r5, r2, r3
 80215cc:	42ac      	cmp	r4, r5
 80215ce:	d101      	bne.n	80215d4 <__sfputs_r+0x12>
 80215d0:	2000      	movs	r0, #0
 80215d2:	e007      	b.n	80215e4 <__sfputs_r+0x22>
 80215d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80215d8:	463a      	mov	r2, r7
 80215da:	4630      	mov	r0, r6
 80215dc:	f7ff ffda 	bl	8021594 <__sfputc_r>
 80215e0:	1c43      	adds	r3, r0, #1
 80215e2:	d1f3      	bne.n	80215cc <__sfputs_r+0xa>
 80215e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080215e8 <_vfiprintf_r>:
 80215e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80215ec:	460d      	mov	r5, r1
 80215ee:	b09d      	sub	sp, #116	@ 0x74
 80215f0:	4614      	mov	r4, r2
 80215f2:	4698      	mov	r8, r3
 80215f4:	4606      	mov	r6, r0
 80215f6:	b118      	cbz	r0, 8021600 <_vfiprintf_r+0x18>
 80215f8:	6a03      	ldr	r3, [r0, #32]
 80215fa:	b90b      	cbnz	r3, 8021600 <_vfiprintf_r+0x18>
 80215fc:	f7ff fc34 	bl	8020e68 <__sinit>
 8021600:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021602:	07d9      	lsls	r1, r3, #31
 8021604:	d405      	bmi.n	8021612 <_vfiprintf_r+0x2a>
 8021606:	89ab      	ldrh	r3, [r5, #12]
 8021608:	059a      	lsls	r2, r3, #22
 802160a:	d402      	bmi.n	8021612 <_vfiprintf_r+0x2a>
 802160c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802160e:	f7ff fe92 	bl	8021336 <__retarget_lock_acquire_recursive>
 8021612:	89ab      	ldrh	r3, [r5, #12]
 8021614:	071b      	lsls	r3, r3, #28
 8021616:	d501      	bpl.n	802161c <_vfiprintf_r+0x34>
 8021618:	692b      	ldr	r3, [r5, #16]
 802161a:	b99b      	cbnz	r3, 8021644 <_vfiprintf_r+0x5c>
 802161c:	4629      	mov	r1, r5
 802161e:	4630      	mov	r0, r6
 8021620:	f7ff fd52 	bl	80210c8 <__swsetup_r>
 8021624:	b170      	cbz	r0, 8021644 <_vfiprintf_r+0x5c>
 8021626:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021628:	07dc      	lsls	r4, r3, #31
 802162a:	d504      	bpl.n	8021636 <_vfiprintf_r+0x4e>
 802162c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021630:	b01d      	add	sp, #116	@ 0x74
 8021632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021636:	89ab      	ldrh	r3, [r5, #12]
 8021638:	0598      	lsls	r0, r3, #22
 802163a:	d4f7      	bmi.n	802162c <_vfiprintf_r+0x44>
 802163c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802163e:	f7ff fe7b 	bl	8021338 <__retarget_lock_release_recursive>
 8021642:	e7f3      	b.n	802162c <_vfiprintf_r+0x44>
 8021644:	2300      	movs	r3, #0
 8021646:	9309      	str	r3, [sp, #36]	@ 0x24
 8021648:	2320      	movs	r3, #32
 802164a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802164e:	f8cd 800c 	str.w	r8, [sp, #12]
 8021652:	2330      	movs	r3, #48	@ 0x30
 8021654:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8021804 <_vfiprintf_r+0x21c>
 8021658:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802165c:	f04f 0901 	mov.w	r9, #1
 8021660:	4623      	mov	r3, r4
 8021662:	469a      	mov	sl, r3
 8021664:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021668:	b10a      	cbz	r2, 802166e <_vfiprintf_r+0x86>
 802166a:	2a25      	cmp	r2, #37	@ 0x25
 802166c:	d1f9      	bne.n	8021662 <_vfiprintf_r+0x7a>
 802166e:	ebba 0b04 	subs.w	fp, sl, r4
 8021672:	d00b      	beq.n	802168c <_vfiprintf_r+0xa4>
 8021674:	465b      	mov	r3, fp
 8021676:	4622      	mov	r2, r4
 8021678:	4629      	mov	r1, r5
 802167a:	4630      	mov	r0, r6
 802167c:	f7ff ffa1 	bl	80215c2 <__sfputs_r>
 8021680:	3001      	adds	r0, #1
 8021682:	f000 80a7 	beq.w	80217d4 <_vfiprintf_r+0x1ec>
 8021686:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021688:	445a      	add	r2, fp
 802168a:	9209      	str	r2, [sp, #36]	@ 0x24
 802168c:	f89a 3000 	ldrb.w	r3, [sl]
 8021690:	2b00      	cmp	r3, #0
 8021692:	f000 809f 	beq.w	80217d4 <_vfiprintf_r+0x1ec>
 8021696:	2300      	movs	r3, #0
 8021698:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 802169c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80216a0:	f10a 0a01 	add.w	sl, sl, #1
 80216a4:	9304      	str	r3, [sp, #16]
 80216a6:	9307      	str	r3, [sp, #28]
 80216a8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80216ac:	931a      	str	r3, [sp, #104]	@ 0x68
 80216ae:	4654      	mov	r4, sl
 80216b0:	2205      	movs	r2, #5
 80216b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80216b6:	4853      	ldr	r0, [pc, #332]	@ (8021804 <_vfiprintf_r+0x21c>)
 80216b8:	f7de fdaa 	bl	8000210 <memchr>
 80216bc:	9a04      	ldr	r2, [sp, #16]
 80216be:	b9d8      	cbnz	r0, 80216f8 <_vfiprintf_r+0x110>
 80216c0:	06d1      	lsls	r1, r2, #27
 80216c2:	bf44      	itt	mi
 80216c4:	2320      	movmi	r3, #32
 80216c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80216ca:	0713      	lsls	r3, r2, #28
 80216cc:	bf44      	itt	mi
 80216ce:	232b      	movmi	r3, #43	@ 0x2b
 80216d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80216d4:	f89a 3000 	ldrb.w	r3, [sl]
 80216d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80216da:	d015      	beq.n	8021708 <_vfiprintf_r+0x120>
 80216dc:	9a07      	ldr	r2, [sp, #28]
 80216de:	4654      	mov	r4, sl
 80216e0:	2000      	movs	r0, #0
 80216e2:	f04f 0c0a 	mov.w	ip, #10
 80216e6:	4621      	mov	r1, r4
 80216e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80216ec:	3b30      	subs	r3, #48	@ 0x30
 80216ee:	2b09      	cmp	r3, #9
 80216f0:	d94b      	bls.n	802178a <_vfiprintf_r+0x1a2>
 80216f2:	b1b0      	cbz	r0, 8021722 <_vfiprintf_r+0x13a>
 80216f4:	9207      	str	r2, [sp, #28]
 80216f6:	e014      	b.n	8021722 <_vfiprintf_r+0x13a>
 80216f8:	eba0 0308 	sub.w	r3, r0, r8
 80216fc:	fa09 f303 	lsl.w	r3, r9, r3
 8021700:	4313      	orrs	r3, r2
 8021702:	9304      	str	r3, [sp, #16]
 8021704:	46a2      	mov	sl, r4
 8021706:	e7d2      	b.n	80216ae <_vfiprintf_r+0xc6>
 8021708:	9b03      	ldr	r3, [sp, #12]
 802170a:	1d19      	adds	r1, r3, #4
 802170c:	681b      	ldr	r3, [r3, #0]
 802170e:	9103      	str	r1, [sp, #12]
 8021710:	2b00      	cmp	r3, #0
 8021712:	bfbb      	ittet	lt
 8021714:	425b      	neglt	r3, r3
 8021716:	f042 0202 	orrlt.w	r2, r2, #2
 802171a:	9307      	strge	r3, [sp, #28]
 802171c:	9307      	strlt	r3, [sp, #28]
 802171e:	bfb8      	it	lt
 8021720:	9204      	strlt	r2, [sp, #16]
 8021722:	7823      	ldrb	r3, [r4, #0]
 8021724:	2b2e      	cmp	r3, #46	@ 0x2e
 8021726:	d10a      	bne.n	802173e <_vfiprintf_r+0x156>
 8021728:	7863      	ldrb	r3, [r4, #1]
 802172a:	2b2a      	cmp	r3, #42	@ 0x2a
 802172c:	d132      	bne.n	8021794 <_vfiprintf_r+0x1ac>
 802172e:	9b03      	ldr	r3, [sp, #12]
 8021730:	1d1a      	adds	r2, r3, #4
 8021732:	681b      	ldr	r3, [r3, #0]
 8021734:	9203      	str	r2, [sp, #12]
 8021736:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802173a:	3402      	adds	r4, #2
 802173c:	9305      	str	r3, [sp, #20]
 802173e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8021814 <_vfiprintf_r+0x22c>
 8021742:	7821      	ldrb	r1, [r4, #0]
 8021744:	2203      	movs	r2, #3
 8021746:	4650      	mov	r0, sl
 8021748:	f7de fd62 	bl	8000210 <memchr>
 802174c:	b138      	cbz	r0, 802175e <_vfiprintf_r+0x176>
 802174e:	9b04      	ldr	r3, [sp, #16]
 8021750:	eba0 000a 	sub.w	r0, r0, sl
 8021754:	2240      	movs	r2, #64	@ 0x40
 8021756:	4082      	lsls	r2, r0
 8021758:	4313      	orrs	r3, r2
 802175a:	3401      	adds	r4, #1
 802175c:	9304      	str	r3, [sp, #16]
 802175e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021762:	4829      	ldr	r0, [pc, #164]	@ (8021808 <_vfiprintf_r+0x220>)
 8021764:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021768:	2206      	movs	r2, #6
 802176a:	f7de fd51 	bl	8000210 <memchr>
 802176e:	2800      	cmp	r0, #0
 8021770:	d03f      	beq.n	80217f2 <_vfiprintf_r+0x20a>
 8021772:	4b26      	ldr	r3, [pc, #152]	@ (802180c <_vfiprintf_r+0x224>)
 8021774:	bb1b      	cbnz	r3, 80217be <_vfiprintf_r+0x1d6>
 8021776:	9b03      	ldr	r3, [sp, #12]
 8021778:	3307      	adds	r3, #7
 802177a:	f023 0307 	bic.w	r3, r3, #7
 802177e:	3308      	adds	r3, #8
 8021780:	9303      	str	r3, [sp, #12]
 8021782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021784:	443b      	add	r3, r7
 8021786:	9309      	str	r3, [sp, #36]	@ 0x24
 8021788:	e76a      	b.n	8021660 <_vfiprintf_r+0x78>
 802178a:	fb0c 3202 	mla	r2, ip, r2, r3
 802178e:	460c      	mov	r4, r1
 8021790:	2001      	movs	r0, #1
 8021792:	e7a8      	b.n	80216e6 <_vfiprintf_r+0xfe>
 8021794:	2300      	movs	r3, #0
 8021796:	3401      	adds	r4, #1
 8021798:	9305      	str	r3, [sp, #20]
 802179a:	4619      	mov	r1, r3
 802179c:	f04f 0c0a 	mov.w	ip, #10
 80217a0:	4620      	mov	r0, r4
 80217a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80217a6:	3a30      	subs	r2, #48	@ 0x30
 80217a8:	2a09      	cmp	r2, #9
 80217aa:	d903      	bls.n	80217b4 <_vfiprintf_r+0x1cc>
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d0c6      	beq.n	802173e <_vfiprintf_r+0x156>
 80217b0:	9105      	str	r1, [sp, #20]
 80217b2:	e7c4      	b.n	802173e <_vfiprintf_r+0x156>
 80217b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80217b8:	4604      	mov	r4, r0
 80217ba:	2301      	movs	r3, #1
 80217bc:	e7f0      	b.n	80217a0 <_vfiprintf_r+0x1b8>
 80217be:	ab03      	add	r3, sp, #12
 80217c0:	9300      	str	r3, [sp, #0]
 80217c2:	462a      	mov	r2, r5
 80217c4:	4b12      	ldr	r3, [pc, #72]	@ (8021810 <_vfiprintf_r+0x228>)
 80217c6:	a904      	add	r1, sp, #16
 80217c8:	4630      	mov	r0, r6
 80217ca:	f3af 8000 	nop.w
 80217ce:	4607      	mov	r7, r0
 80217d0:	1c78      	adds	r0, r7, #1
 80217d2:	d1d6      	bne.n	8021782 <_vfiprintf_r+0x19a>
 80217d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80217d6:	07d9      	lsls	r1, r3, #31
 80217d8:	d405      	bmi.n	80217e6 <_vfiprintf_r+0x1fe>
 80217da:	89ab      	ldrh	r3, [r5, #12]
 80217dc:	059a      	lsls	r2, r3, #22
 80217de:	d402      	bmi.n	80217e6 <_vfiprintf_r+0x1fe>
 80217e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80217e2:	f7ff fda9 	bl	8021338 <__retarget_lock_release_recursive>
 80217e6:	89ab      	ldrh	r3, [r5, #12]
 80217e8:	065b      	lsls	r3, r3, #25
 80217ea:	f53f af1f 	bmi.w	802162c <_vfiprintf_r+0x44>
 80217ee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80217f0:	e71e      	b.n	8021630 <_vfiprintf_r+0x48>
 80217f2:	ab03      	add	r3, sp, #12
 80217f4:	9300      	str	r3, [sp, #0]
 80217f6:	462a      	mov	r2, r5
 80217f8:	4b05      	ldr	r3, [pc, #20]	@ (8021810 <_vfiprintf_r+0x228>)
 80217fa:	a904      	add	r1, sp, #16
 80217fc:	4630      	mov	r0, r6
 80217fe:	f000 f879 	bl	80218f4 <_printf_i>
 8021802:	e7e4      	b.n	80217ce <_vfiprintf_r+0x1e6>
 8021804:	08026e79 	.word	0x08026e79
 8021808:	08026e83 	.word	0x08026e83
 802180c:	00000000 	.word	0x00000000
 8021810:	080215c3 	.word	0x080215c3
 8021814:	08026e7f 	.word	0x08026e7f

08021818 <_printf_common>:
 8021818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802181c:	4616      	mov	r6, r2
 802181e:	4698      	mov	r8, r3
 8021820:	688a      	ldr	r2, [r1, #8]
 8021822:	690b      	ldr	r3, [r1, #16]
 8021824:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8021828:	4293      	cmp	r3, r2
 802182a:	bfb8      	it	lt
 802182c:	4613      	movlt	r3, r2
 802182e:	6033      	str	r3, [r6, #0]
 8021830:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8021834:	4607      	mov	r7, r0
 8021836:	460c      	mov	r4, r1
 8021838:	b10a      	cbz	r2, 802183e <_printf_common+0x26>
 802183a:	3301      	adds	r3, #1
 802183c:	6033      	str	r3, [r6, #0]
 802183e:	6823      	ldr	r3, [r4, #0]
 8021840:	0699      	lsls	r1, r3, #26
 8021842:	bf42      	ittt	mi
 8021844:	6833      	ldrmi	r3, [r6, #0]
 8021846:	3302      	addmi	r3, #2
 8021848:	6033      	strmi	r3, [r6, #0]
 802184a:	6825      	ldr	r5, [r4, #0]
 802184c:	f015 0506 	ands.w	r5, r5, #6
 8021850:	d106      	bne.n	8021860 <_printf_common+0x48>
 8021852:	f104 0a19 	add.w	sl, r4, #25
 8021856:	68e3      	ldr	r3, [r4, #12]
 8021858:	6832      	ldr	r2, [r6, #0]
 802185a:	1a9b      	subs	r3, r3, r2
 802185c:	42ab      	cmp	r3, r5
 802185e:	dc26      	bgt.n	80218ae <_printf_common+0x96>
 8021860:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021864:	6822      	ldr	r2, [r4, #0]
 8021866:	3b00      	subs	r3, #0
 8021868:	bf18      	it	ne
 802186a:	2301      	movne	r3, #1
 802186c:	0692      	lsls	r2, r2, #26
 802186e:	d42b      	bmi.n	80218c8 <_printf_common+0xb0>
 8021870:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021874:	4641      	mov	r1, r8
 8021876:	4638      	mov	r0, r7
 8021878:	47c8      	blx	r9
 802187a:	3001      	adds	r0, #1
 802187c:	d01e      	beq.n	80218bc <_printf_common+0xa4>
 802187e:	6823      	ldr	r3, [r4, #0]
 8021880:	6922      	ldr	r2, [r4, #16]
 8021882:	f003 0306 	and.w	r3, r3, #6
 8021886:	2b04      	cmp	r3, #4
 8021888:	bf02      	ittt	eq
 802188a:	68e5      	ldreq	r5, [r4, #12]
 802188c:	6833      	ldreq	r3, [r6, #0]
 802188e:	1aed      	subeq	r5, r5, r3
 8021890:	68a3      	ldr	r3, [r4, #8]
 8021892:	bf0c      	ite	eq
 8021894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021898:	2500      	movne	r5, #0
 802189a:	4293      	cmp	r3, r2
 802189c:	bfc4      	itt	gt
 802189e:	1a9b      	subgt	r3, r3, r2
 80218a0:	18ed      	addgt	r5, r5, r3
 80218a2:	2600      	movs	r6, #0
 80218a4:	341a      	adds	r4, #26
 80218a6:	42b5      	cmp	r5, r6
 80218a8:	d11a      	bne.n	80218e0 <_printf_common+0xc8>
 80218aa:	2000      	movs	r0, #0
 80218ac:	e008      	b.n	80218c0 <_printf_common+0xa8>
 80218ae:	2301      	movs	r3, #1
 80218b0:	4652      	mov	r2, sl
 80218b2:	4641      	mov	r1, r8
 80218b4:	4638      	mov	r0, r7
 80218b6:	47c8      	blx	r9
 80218b8:	3001      	adds	r0, #1
 80218ba:	d103      	bne.n	80218c4 <_printf_common+0xac>
 80218bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80218c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80218c4:	3501      	adds	r5, #1
 80218c6:	e7c6      	b.n	8021856 <_printf_common+0x3e>
 80218c8:	18e1      	adds	r1, r4, r3
 80218ca:	1c5a      	adds	r2, r3, #1
 80218cc:	2030      	movs	r0, #48	@ 0x30
 80218ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80218d2:	4422      	add	r2, r4
 80218d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80218d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80218dc:	3302      	adds	r3, #2
 80218de:	e7c7      	b.n	8021870 <_printf_common+0x58>
 80218e0:	2301      	movs	r3, #1
 80218e2:	4622      	mov	r2, r4
 80218e4:	4641      	mov	r1, r8
 80218e6:	4638      	mov	r0, r7
 80218e8:	47c8      	blx	r9
 80218ea:	3001      	adds	r0, #1
 80218ec:	d0e6      	beq.n	80218bc <_printf_common+0xa4>
 80218ee:	3601      	adds	r6, #1
 80218f0:	e7d9      	b.n	80218a6 <_printf_common+0x8e>
	...

080218f4 <_printf_i>:
 80218f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80218f8:	7e0f      	ldrb	r7, [r1, #24]
 80218fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80218fc:	2f78      	cmp	r7, #120	@ 0x78
 80218fe:	4691      	mov	r9, r2
 8021900:	4680      	mov	r8, r0
 8021902:	460c      	mov	r4, r1
 8021904:	469a      	mov	sl, r3
 8021906:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802190a:	d807      	bhi.n	802191c <_printf_i+0x28>
 802190c:	2f62      	cmp	r7, #98	@ 0x62
 802190e:	d80a      	bhi.n	8021926 <_printf_i+0x32>
 8021910:	2f00      	cmp	r7, #0
 8021912:	f000 80d1 	beq.w	8021ab8 <_printf_i+0x1c4>
 8021916:	2f58      	cmp	r7, #88	@ 0x58
 8021918:	f000 80b8 	beq.w	8021a8c <_printf_i+0x198>
 802191c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021920:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8021924:	e03a      	b.n	802199c <_printf_i+0xa8>
 8021926:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 802192a:	2b15      	cmp	r3, #21
 802192c:	d8f6      	bhi.n	802191c <_printf_i+0x28>
 802192e:	a101      	add	r1, pc, #4	@ (adr r1, 8021934 <_printf_i+0x40>)
 8021930:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021934:	0802198d 	.word	0x0802198d
 8021938:	080219a1 	.word	0x080219a1
 802193c:	0802191d 	.word	0x0802191d
 8021940:	0802191d 	.word	0x0802191d
 8021944:	0802191d 	.word	0x0802191d
 8021948:	0802191d 	.word	0x0802191d
 802194c:	080219a1 	.word	0x080219a1
 8021950:	0802191d 	.word	0x0802191d
 8021954:	0802191d 	.word	0x0802191d
 8021958:	0802191d 	.word	0x0802191d
 802195c:	0802191d 	.word	0x0802191d
 8021960:	08021a9f 	.word	0x08021a9f
 8021964:	080219cb 	.word	0x080219cb
 8021968:	08021a59 	.word	0x08021a59
 802196c:	0802191d 	.word	0x0802191d
 8021970:	0802191d 	.word	0x0802191d
 8021974:	08021ac1 	.word	0x08021ac1
 8021978:	0802191d 	.word	0x0802191d
 802197c:	080219cb 	.word	0x080219cb
 8021980:	0802191d 	.word	0x0802191d
 8021984:	0802191d 	.word	0x0802191d
 8021988:	08021a61 	.word	0x08021a61
 802198c:	6833      	ldr	r3, [r6, #0]
 802198e:	1d1a      	adds	r2, r3, #4
 8021990:	681b      	ldr	r3, [r3, #0]
 8021992:	6032      	str	r2, [r6, #0]
 8021994:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021998:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802199c:	2301      	movs	r3, #1
 802199e:	e09c      	b.n	8021ada <_printf_i+0x1e6>
 80219a0:	6833      	ldr	r3, [r6, #0]
 80219a2:	6820      	ldr	r0, [r4, #0]
 80219a4:	1d19      	adds	r1, r3, #4
 80219a6:	6031      	str	r1, [r6, #0]
 80219a8:	0606      	lsls	r6, r0, #24
 80219aa:	d501      	bpl.n	80219b0 <_printf_i+0xbc>
 80219ac:	681d      	ldr	r5, [r3, #0]
 80219ae:	e003      	b.n	80219b8 <_printf_i+0xc4>
 80219b0:	0645      	lsls	r5, r0, #25
 80219b2:	d5fb      	bpl.n	80219ac <_printf_i+0xb8>
 80219b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80219b8:	2d00      	cmp	r5, #0
 80219ba:	da03      	bge.n	80219c4 <_printf_i+0xd0>
 80219bc:	232d      	movs	r3, #45	@ 0x2d
 80219be:	426d      	negs	r5, r5
 80219c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80219c4:	4858      	ldr	r0, [pc, #352]	@ (8021b28 <_printf_i+0x234>)
 80219c6:	230a      	movs	r3, #10
 80219c8:	e011      	b.n	80219ee <_printf_i+0xfa>
 80219ca:	6821      	ldr	r1, [r4, #0]
 80219cc:	6833      	ldr	r3, [r6, #0]
 80219ce:	0608      	lsls	r0, r1, #24
 80219d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80219d4:	d402      	bmi.n	80219dc <_printf_i+0xe8>
 80219d6:	0649      	lsls	r1, r1, #25
 80219d8:	bf48      	it	mi
 80219da:	b2ad      	uxthmi	r5, r5
 80219dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80219de:	4852      	ldr	r0, [pc, #328]	@ (8021b28 <_printf_i+0x234>)
 80219e0:	6033      	str	r3, [r6, #0]
 80219e2:	bf14      	ite	ne
 80219e4:	230a      	movne	r3, #10
 80219e6:	2308      	moveq	r3, #8
 80219e8:	2100      	movs	r1, #0
 80219ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80219ee:	6866      	ldr	r6, [r4, #4]
 80219f0:	60a6      	str	r6, [r4, #8]
 80219f2:	2e00      	cmp	r6, #0
 80219f4:	db05      	blt.n	8021a02 <_printf_i+0x10e>
 80219f6:	6821      	ldr	r1, [r4, #0]
 80219f8:	432e      	orrs	r6, r5
 80219fa:	f021 0104 	bic.w	r1, r1, #4
 80219fe:	6021      	str	r1, [r4, #0]
 8021a00:	d04b      	beq.n	8021a9a <_printf_i+0x1a6>
 8021a02:	4616      	mov	r6, r2
 8021a04:	fbb5 f1f3 	udiv	r1, r5, r3
 8021a08:	fb03 5711 	mls	r7, r3, r1, r5
 8021a0c:	5dc7      	ldrb	r7, [r0, r7]
 8021a0e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8021a12:	462f      	mov	r7, r5
 8021a14:	42bb      	cmp	r3, r7
 8021a16:	460d      	mov	r5, r1
 8021a18:	d9f4      	bls.n	8021a04 <_printf_i+0x110>
 8021a1a:	2b08      	cmp	r3, #8
 8021a1c:	d10b      	bne.n	8021a36 <_printf_i+0x142>
 8021a1e:	6823      	ldr	r3, [r4, #0]
 8021a20:	07df      	lsls	r7, r3, #31
 8021a22:	d508      	bpl.n	8021a36 <_printf_i+0x142>
 8021a24:	6923      	ldr	r3, [r4, #16]
 8021a26:	6861      	ldr	r1, [r4, #4]
 8021a28:	4299      	cmp	r1, r3
 8021a2a:	bfde      	ittt	le
 8021a2c:	2330      	movle	r3, #48	@ 0x30
 8021a2e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8021a32:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8021a36:	1b92      	subs	r2, r2, r6
 8021a38:	6122      	str	r2, [r4, #16]
 8021a3a:	f8cd a000 	str.w	sl, [sp]
 8021a3e:	464b      	mov	r3, r9
 8021a40:	aa03      	add	r2, sp, #12
 8021a42:	4621      	mov	r1, r4
 8021a44:	4640      	mov	r0, r8
 8021a46:	f7ff fee7 	bl	8021818 <_printf_common>
 8021a4a:	3001      	adds	r0, #1
 8021a4c:	d14a      	bne.n	8021ae4 <_printf_i+0x1f0>
 8021a4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021a52:	b004      	add	sp, #16
 8021a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021a58:	6823      	ldr	r3, [r4, #0]
 8021a5a:	f043 0320 	orr.w	r3, r3, #32
 8021a5e:	6023      	str	r3, [r4, #0]
 8021a60:	4832      	ldr	r0, [pc, #200]	@ (8021b2c <_printf_i+0x238>)
 8021a62:	2778      	movs	r7, #120	@ 0x78
 8021a64:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8021a68:	6823      	ldr	r3, [r4, #0]
 8021a6a:	6831      	ldr	r1, [r6, #0]
 8021a6c:	061f      	lsls	r7, r3, #24
 8021a6e:	f851 5b04 	ldr.w	r5, [r1], #4
 8021a72:	d402      	bmi.n	8021a7a <_printf_i+0x186>
 8021a74:	065f      	lsls	r7, r3, #25
 8021a76:	bf48      	it	mi
 8021a78:	b2ad      	uxthmi	r5, r5
 8021a7a:	6031      	str	r1, [r6, #0]
 8021a7c:	07d9      	lsls	r1, r3, #31
 8021a7e:	bf44      	itt	mi
 8021a80:	f043 0320 	orrmi.w	r3, r3, #32
 8021a84:	6023      	strmi	r3, [r4, #0]
 8021a86:	b11d      	cbz	r5, 8021a90 <_printf_i+0x19c>
 8021a88:	2310      	movs	r3, #16
 8021a8a:	e7ad      	b.n	80219e8 <_printf_i+0xf4>
 8021a8c:	4826      	ldr	r0, [pc, #152]	@ (8021b28 <_printf_i+0x234>)
 8021a8e:	e7e9      	b.n	8021a64 <_printf_i+0x170>
 8021a90:	6823      	ldr	r3, [r4, #0]
 8021a92:	f023 0320 	bic.w	r3, r3, #32
 8021a96:	6023      	str	r3, [r4, #0]
 8021a98:	e7f6      	b.n	8021a88 <_printf_i+0x194>
 8021a9a:	4616      	mov	r6, r2
 8021a9c:	e7bd      	b.n	8021a1a <_printf_i+0x126>
 8021a9e:	6833      	ldr	r3, [r6, #0]
 8021aa0:	6825      	ldr	r5, [r4, #0]
 8021aa2:	6961      	ldr	r1, [r4, #20]
 8021aa4:	1d18      	adds	r0, r3, #4
 8021aa6:	6030      	str	r0, [r6, #0]
 8021aa8:	062e      	lsls	r6, r5, #24
 8021aaa:	681b      	ldr	r3, [r3, #0]
 8021aac:	d501      	bpl.n	8021ab2 <_printf_i+0x1be>
 8021aae:	6019      	str	r1, [r3, #0]
 8021ab0:	e002      	b.n	8021ab8 <_printf_i+0x1c4>
 8021ab2:	0668      	lsls	r0, r5, #25
 8021ab4:	d5fb      	bpl.n	8021aae <_printf_i+0x1ba>
 8021ab6:	8019      	strh	r1, [r3, #0]
 8021ab8:	2300      	movs	r3, #0
 8021aba:	6123      	str	r3, [r4, #16]
 8021abc:	4616      	mov	r6, r2
 8021abe:	e7bc      	b.n	8021a3a <_printf_i+0x146>
 8021ac0:	6833      	ldr	r3, [r6, #0]
 8021ac2:	1d1a      	adds	r2, r3, #4
 8021ac4:	6032      	str	r2, [r6, #0]
 8021ac6:	681e      	ldr	r6, [r3, #0]
 8021ac8:	6862      	ldr	r2, [r4, #4]
 8021aca:	2100      	movs	r1, #0
 8021acc:	4630      	mov	r0, r6
 8021ace:	f7de fb9f 	bl	8000210 <memchr>
 8021ad2:	b108      	cbz	r0, 8021ad8 <_printf_i+0x1e4>
 8021ad4:	1b80      	subs	r0, r0, r6
 8021ad6:	6060      	str	r0, [r4, #4]
 8021ad8:	6863      	ldr	r3, [r4, #4]
 8021ada:	6123      	str	r3, [r4, #16]
 8021adc:	2300      	movs	r3, #0
 8021ade:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021ae2:	e7aa      	b.n	8021a3a <_printf_i+0x146>
 8021ae4:	6923      	ldr	r3, [r4, #16]
 8021ae6:	4632      	mov	r2, r6
 8021ae8:	4649      	mov	r1, r9
 8021aea:	4640      	mov	r0, r8
 8021aec:	47d0      	blx	sl
 8021aee:	3001      	adds	r0, #1
 8021af0:	d0ad      	beq.n	8021a4e <_printf_i+0x15a>
 8021af2:	6823      	ldr	r3, [r4, #0]
 8021af4:	079b      	lsls	r3, r3, #30
 8021af6:	d413      	bmi.n	8021b20 <_printf_i+0x22c>
 8021af8:	68e0      	ldr	r0, [r4, #12]
 8021afa:	9b03      	ldr	r3, [sp, #12]
 8021afc:	4298      	cmp	r0, r3
 8021afe:	bfb8      	it	lt
 8021b00:	4618      	movlt	r0, r3
 8021b02:	e7a6      	b.n	8021a52 <_printf_i+0x15e>
 8021b04:	2301      	movs	r3, #1
 8021b06:	4632      	mov	r2, r6
 8021b08:	4649      	mov	r1, r9
 8021b0a:	4640      	mov	r0, r8
 8021b0c:	47d0      	blx	sl
 8021b0e:	3001      	adds	r0, #1
 8021b10:	d09d      	beq.n	8021a4e <_printf_i+0x15a>
 8021b12:	3501      	adds	r5, #1
 8021b14:	68e3      	ldr	r3, [r4, #12]
 8021b16:	9903      	ldr	r1, [sp, #12]
 8021b18:	1a5b      	subs	r3, r3, r1
 8021b1a:	42ab      	cmp	r3, r5
 8021b1c:	dcf2      	bgt.n	8021b04 <_printf_i+0x210>
 8021b1e:	e7eb      	b.n	8021af8 <_printf_i+0x204>
 8021b20:	2500      	movs	r5, #0
 8021b22:	f104 0619 	add.w	r6, r4, #25
 8021b26:	e7f5      	b.n	8021b14 <_printf_i+0x220>
 8021b28:	08026e8a 	.word	0x08026e8a
 8021b2c:	08026e9b 	.word	0x08026e9b

08021b30 <__sflush_r>:
 8021b30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b38:	0716      	lsls	r6, r2, #28
 8021b3a:	4605      	mov	r5, r0
 8021b3c:	460c      	mov	r4, r1
 8021b3e:	d454      	bmi.n	8021bea <__sflush_r+0xba>
 8021b40:	684b      	ldr	r3, [r1, #4]
 8021b42:	2b00      	cmp	r3, #0
 8021b44:	dc02      	bgt.n	8021b4c <__sflush_r+0x1c>
 8021b46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021b48:	2b00      	cmp	r3, #0
 8021b4a:	dd48      	ble.n	8021bde <__sflush_r+0xae>
 8021b4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021b4e:	2e00      	cmp	r6, #0
 8021b50:	d045      	beq.n	8021bde <__sflush_r+0xae>
 8021b52:	2300      	movs	r3, #0
 8021b54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021b58:	682f      	ldr	r7, [r5, #0]
 8021b5a:	6a21      	ldr	r1, [r4, #32]
 8021b5c:	602b      	str	r3, [r5, #0]
 8021b5e:	d030      	beq.n	8021bc2 <__sflush_r+0x92>
 8021b60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021b62:	89a3      	ldrh	r3, [r4, #12]
 8021b64:	0759      	lsls	r1, r3, #29
 8021b66:	d505      	bpl.n	8021b74 <__sflush_r+0x44>
 8021b68:	6863      	ldr	r3, [r4, #4]
 8021b6a:	1ad2      	subs	r2, r2, r3
 8021b6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021b6e:	b10b      	cbz	r3, 8021b74 <__sflush_r+0x44>
 8021b70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021b72:	1ad2      	subs	r2, r2, r3
 8021b74:	2300      	movs	r3, #0
 8021b76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021b78:	6a21      	ldr	r1, [r4, #32]
 8021b7a:	4628      	mov	r0, r5
 8021b7c:	47b0      	blx	r6
 8021b7e:	1c43      	adds	r3, r0, #1
 8021b80:	89a3      	ldrh	r3, [r4, #12]
 8021b82:	d106      	bne.n	8021b92 <__sflush_r+0x62>
 8021b84:	6829      	ldr	r1, [r5, #0]
 8021b86:	291d      	cmp	r1, #29
 8021b88:	d82b      	bhi.n	8021be2 <__sflush_r+0xb2>
 8021b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8021c34 <__sflush_r+0x104>)
 8021b8c:	40ca      	lsrs	r2, r1
 8021b8e:	07d6      	lsls	r6, r2, #31
 8021b90:	d527      	bpl.n	8021be2 <__sflush_r+0xb2>
 8021b92:	2200      	movs	r2, #0
 8021b94:	6062      	str	r2, [r4, #4]
 8021b96:	04d9      	lsls	r1, r3, #19
 8021b98:	6922      	ldr	r2, [r4, #16]
 8021b9a:	6022      	str	r2, [r4, #0]
 8021b9c:	d504      	bpl.n	8021ba8 <__sflush_r+0x78>
 8021b9e:	1c42      	adds	r2, r0, #1
 8021ba0:	d101      	bne.n	8021ba6 <__sflush_r+0x76>
 8021ba2:	682b      	ldr	r3, [r5, #0]
 8021ba4:	b903      	cbnz	r3, 8021ba8 <__sflush_r+0x78>
 8021ba6:	6560      	str	r0, [r4, #84]	@ 0x54
 8021ba8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021baa:	602f      	str	r7, [r5, #0]
 8021bac:	b1b9      	cbz	r1, 8021bde <__sflush_r+0xae>
 8021bae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021bb2:	4299      	cmp	r1, r3
 8021bb4:	d002      	beq.n	8021bbc <__sflush_r+0x8c>
 8021bb6:	4628      	mov	r0, r5
 8021bb8:	f7ff fbec 	bl	8021394 <_free_r>
 8021bbc:	2300      	movs	r3, #0
 8021bbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8021bc0:	e00d      	b.n	8021bde <__sflush_r+0xae>
 8021bc2:	2301      	movs	r3, #1
 8021bc4:	4628      	mov	r0, r5
 8021bc6:	47b0      	blx	r6
 8021bc8:	4602      	mov	r2, r0
 8021bca:	1c50      	adds	r0, r2, #1
 8021bcc:	d1c9      	bne.n	8021b62 <__sflush_r+0x32>
 8021bce:	682b      	ldr	r3, [r5, #0]
 8021bd0:	2b00      	cmp	r3, #0
 8021bd2:	d0c6      	beq.n	8021b62 <__sflush_r+0x32>
 8021bd4:	2b1d      	cmp	r3, #29
 8021bd6:	d001      	beq.n	8021bdc <__sflush_r+0xac>
 8021bd8:	2b16      	cmp	r3, #22
 8021bda:	d11e      	bne.n	8021c1a <__sflush_r+0xea>
 8021bdc:	602f      	str	r7, [r5, #0]
 8021bde:	2000      	movs	r0, #0
 8021be0:	e022      	b.n	8021c28 <__sflush_r+0xf8>
 8021be2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021be6:	b21b      	sxth	r3, r3
 8021be8:	e01b      	b.n	8021c22 <__sflush_r+0xf2>
 8021bea:	690f      	ldr	r7, [r1, #16]
 8021bec:	2f00      	cmp	r7, #0
 8021bee:	d0f6      	beq.n	8021bde <__sflush_r+0xae>
 8021bf0:	0793      	lsls	r3, r2, #30
 8021bf2:	680e      	ldr	r6, [r1, #0]
 8021bf4:	bf08      	it	eq
 8021bf6:	694b      	ldreq	r3, [r1, #20]
 8021bf8:	600f      	str	r7, [r1, #0]
 8021bfa:	bf18      	it	ne
 8021bfc:	2300      	movne	r3, #0
 8021bfe:	eba6 0807 	sub.w	r8, r6, r7
 8021c02:	608b      	str	r3, [r1, #8]
 8021c04:	f1b8 0f00 	cmp.w	r8, #0
 8021c08:	dde9      	ble.n	8021bde <__sflush_r+0xae>
 8021c0a:	6a21      	ldr	r1, [r4, #32]
 8021c0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021c0e:	4643      	mov	r3, r8
 8021c10:	463a      	mov	r2, r7
 8021c12:	4628      	mov	r0, r5
 8021c14:	47b0      	blx	r6
 8021c16:	2800      	cmp	r0, #0
 8021c18:	dc08      	bgt.n	8021c2c <__sflush_r+0xfc>
 8021c1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021c22:	81a3      	strh	r3, [r4, #12]
 8021c24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021c2c:	4407      	add	r7, r0
 8021c2e:	eba8 0800 	sub.w	r8, r8, r0
 8021c32:	e7e7      	b.n	8021c04 <__sflush_r+0xd4>
 8021c34:	20400001 	.word	0x20400001

08021c38 <_fflush_r>:
 8021c38:	b538      	push	{r3, r4, r5, lr}
 8021c3a:	690b      	ldr	r3, [r1, #16]
 8021c3c:	4605      	mov	r5, r0
 8021c3e:	460c      	mov	r4, r1
 8021c40:	b913      	cbnz	r3, 8021c48 <_fflush_r+0x10>
 8021c42:	2500      	movs	r5, #0
 8021c44:	4628      	mov	r0, r5
 8021c46:	bd38      	pop	{r3, r4, r5, pc}
 8021c48:	b118      	cbz	r0, 8021c52 <_fflush_r+0x1a>
 8021c4a:	6a03      	ldr	r3, [r0, #32]
 8021c4c:	b90b      	cbnz	r3, 8021c52 <_fflush_r+0x1a>
 8021c4e:	f7ff f90b 	bl	8020e68 <__sinit>
 8021c52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c56:	2b00      	cmp	r3, #0
 8021c58:	d0f3      	beq.n	8021c42 <_fflush_r+0xa>
 8021c5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021c5c:	07d0      	lsls	r0, r2, #31
 8021c5e:	d404      	bmi.n	8021c6a <_fflush_r+0x32>
 8021c60:	0599      	lsls	r1, r3, #22
 8021c62:	d402      	bmi.n	8021c6a <_fflush_r+0x32>
 8021c64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021c66:	f7ff fb66 	bl	8021336 <__retarget_lock_acquire_recursive>
 8021c6a:	4628      	mov	r0, r5
 8021c6c:	4621      	mov	r1, r4
 8021c6e:	f7ff ff5f 	bl	8021b30 <__sflush_r>
 8021c72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021c74:	07da      	lsls	r2, r3, #31
 8021c76:	4605      	mov	r5, r0
 8021c78:	d4e4      	bmi.n	8021c44 <_fflush_r+0xc>
 8021c7a:	89a3      	ldrh	r3, [r4, #12]
 8021c7c:	059b      	lsls	r3, r3, #22
 8021c7e:	d4e1      	bmi.n	8021c44 <_fflush_r+0xc>
 8021c80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021c82:	f7ff fb59 	bl	8021338 <__retarget_lock_release_recursive>
 8021c86:	e7dd      	b.n	8021c44 <_fflush_r+0xc>

08021c88 <fiprintf>:
 8021c88:	b40e      	push	{r1, r2, r3}
 8021c8a:	b503      	push	{r0, r1, lr}
 8021c8c:	4601      	mov	r1, r0
 8021c8e:	ab03      	add	r3, sp, #12
 8021c90:	4805      	ldr	r0, [pc, #20]	@ (8021ca8 <fiprintf+0x20>)
 8021c92:	f853 2b04 	ldr.w	r2, [r3], #4
 8021c96:	6800      	ldr	r0, [r0, #0]
 8021c98:	9301      	str	r3, [sp, #4]
 8021c9a:	f7ff fca5 	bl	80215e8 <_vfiprintf_r>
 8021c9e:	b002      	add	sp, #8
 8021ca0:	f85d eb04 	ldr.w	lr, [sp], #4
 8021ca4:	b003      	add	sp, #12
 8021ca6:	4770      	bx	lr
 8021ca8:	20000080 	.word	0x20000080

08021cac <__swhatbuf_r>:
 8021cac:	b570      	push	{r4, r5, r6, lr}
 8021cae:	460c      	mov	r4, r1
 8021cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021cb4:	2900      	cmp	r1, #0
 8021cb6:	b096      	sub	sp, #88	@ 0x58
 8021cb8:	4615      	mov	r5, r2
 8021cba:	461e      	mov	r6, r3
 8021cbc:	da0d      	bge.n	8021cda <__swhatbuf_r+0x2e>
 8021cbe:	89a3      	ldrh	r3, [r4, #12]
 8021cc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021cc4:	f04f 0100 	mov.w	r1, #0
 8021cc8:	bf14      	ite	ne
 8021cca:	2340      	movne	r3, #64	@ 0x40
 8021ccc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021cd0:	2000      	movs	r0, #0
 8021cd2:	6031      	str	r1, [r6, #0]
 8021cd4:	602b      	str	r3, [r5, #0]
 8021cd6:	b016      	add	sp, #88	@ 0x58
 8021cd8:	bd70      	pop	{r4, r5, r6, pc}
 8021cda:	466a      	mov	r2, sp
 8021cdc:	f000 f87c 	bl	8021dd8 <_fstat_r>
 8021ce0:	2800      	cmp	r0, #0
 8021ce2:	dbec      	blt.n	8021cbe <__swhatbuf_r+0x12>
 8021ce4:	9901      	ldr	r1, [sp, #4]
 8021ce6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021cea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021cee:	4259      	negs	r1, r3
 8021cf0:	4159      	adcs	r1, r3
 8021cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021cf6:	e7eb      	b.n	8021cd0 <__swhatbuf_r+0x24>

08021cf8 <__smakebuf_r>:
 8021cf8:	898b      	ldrh	r3, [r1, #12]
 8021cfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021cfc:	079d      	lsls	r5, r3, #30
 8021cfe:	4606      	mov	r6, r0
 8021d00:	460c      	mov	r4, r1
 8021d02:	d507      	bpl.n	8021d14 <__smakebuf_r+0x1c>
 8021d04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021d08:	6023      	str	r3, [r4, #0]
 8021d0a:	6123      	str	r3, [r4, #16]
 8021d0c:	2301      	movs	r3, #1
 8021d0e:	6163      	str	r3, [r4, #20]
 8021d10:	b003      	add	sp, #12
 8021d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021d14:	ab01      	add	r3, sp, #4
 8021d16:	466a      	mov	r2, sp
 8021d18:	f7ff ffc8 	bl	8021cac <__swhatbuf_r>
 8021d1c:	9f00      	ldr	r7, [sp, #0]
 8021d1e:	4605      	mov	r5, r0
 8021d20:	4639      	mov	r1, r7
 8021d22:	4630      	mov	r0, r6
 8021d24:	f7ff fbaa 	bl	802147c <_malloc_r>
 8021d28:	b948      	cbnz	r0, 8021d3e <__smakebuf_r+0x46>
 8021d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021d2e:	059a      	lsls	r2, r3, #22
 8021d30:	d4ee      	bmi.n	8021d10 <__smakebuf_r+0x18>
 8021d32:	f023 0303 	bic.w	r3, r3, #3
 8021d36:	f043 0302 	orr.w	r3, r3, #2
 8021d3a:	81a3      	strh	r3, [r4, #12]
 8021d3c:	e7e2      	b.n	8021d04 <__smakebuf_r+0xc>
 8021d3e:	89a3      	ldrh	r3, [r4, #12]
 8021d40:	6020      	str	r0, [r4, #0]
 8021d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021d46:	81a3      	strh	r3, [r4, #12]
 8021d48:	9b01      	ldr	r3, [sp, #4]
 8021d4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021d4e:	b15b      	cbz	r3, 8021d68 <__smakebuf_r+0x70>
 8021d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021d54:	4630      	mov	r0, r6
 8021d56:	f000 f851 	bl	8021dfc <_isatty_r>
 8021d5a:	b128      	cbz	r0, 8021d68 <__smakebuf_r+0x70>
 8021d5c:	89a3      	ldrh	r3, [r4, #12]
 8021d5e:	f023 0303 	bic.w	r3, r3, #3
 8021d62:	f043 0301 	orr.w	r3, r3, #1
 8021d66:	81a3      	strh	r3, [r4, #12]
 8021d68:	89a3      	ldrh	r3, [r4, #12]
 8021d6a:	431d      	orrs	r5, r3
 8021d6c:	81a5      	strh	r5, [r4, #12]
 8021d6e:	e7cf      	b.n	8021d10 <__smakebuf_r+0x18>

08021d70 <_putc_r>:
 8021d70:	b570      	push	{r4, r5, r6, lr}
 8021d72:	460d      	mov	r5, r1
 8021d74:	4614      	mov	r4, r2
 8021d76:	4606      	mov	r6, r0
 8021d78:	b118      	cbz	r0, 8021d82 <_putc_r+0x12>
 8021d7a:	6a03      	ldr	r3, [r0, #32]
 8021d7c:	b90b      	cbnz	r3, 8021d82 <_putc_r+0x12>
 8021d7e:	f7ff f873 	bl	8020e68 <__sinit>
 8021d82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021d84:	07d8      	lsls	r0, r3, #31
 8021d86:	d405      	bmi.n	8021d94 <_putc_r+0x24>
 8021d88:	89a3      	ldrh	r3, [r4, #12]
 8021d8a:	0599      	lsls	r1, r3, #22
 8021d8c:	d402      	bmi.n	8021d94 <_putc_r+0x24>
 8021d8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021d90:	f7ff fad1 	bl	8021336 <__retarget_lock_acquire_recursive>
 8021d94:	68a3      	ldr	r3, [r4, #8]
 8021d96:	3b01      	subs	r3, #1
 8021d98:	2b00      	cmp	r3, #0
 8021d9a:	60a3      	str	r3, [r4, #8]
 8021d9c:	da05      	bge.n	8021daa <_putc_r+0x3a>
 8021d9e:	69a2      	ldr	r2, [r4, #24]
 8021da0:	4293      	cmp	r3, r2
 8021da2:	db12      	blt.n	8021dca <_putc_r+0x5a>
 8021da4:	b2eb      	uxtb	r3, r5
 8021da6:	2b0a      	cmp	r3, #10
 8021da8:	d00f      	beq.n	8021dca <_putc_r+0x5a>
 8021daa:	6823      	ldr	r3, [r4, #0]
 8021dac:	1c5a      	adds	r2, r3, #1
 8021dae:	6022      	str	r2, [r4, #0]
 8021db0:	701d      	strb	r5, [r3, #0]
 8021db2:	b2ed      	uxtb	r5, r5
 8021db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021db6:	07da      	lsls	r2, r3, #31
 8021db8:	d405      	bmi.n	8021dc6 <_putc_r+0x56>
 8021dba:	89a3      	ldrh	r3, [r4, #12]
 8021dbc:	059b      	lsls	r3, r3, #22
 8021dbe:	d402      	bmi.n	8021dc6 <_putc_r+0x56>
 8021dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021dc2:	f7ff fab9 	bl	8021338 <__retarget_lock_release_recursive>
 8021dc6:	4628      	mov	r0, r5
 8021dc8:	bd70      	pop	{r4, r5, r6, pc}
 8021dca:	4629      	mov	r1, r5
 8021dcc:	4622      	mov	r2, r4
 8021dce:	4630      	mov	r0, r6
 8021dd0:	f7ff f93b 	bl	802104a <__swbuf_r>
 8021dd4:	4605      	mov	r5, r0
 8021dd6:	e7ed      	b.n	8021db4 <_putc_r+0x44>

08021dd8 <_fstat_r>:
 8021dd8:	b538      	push	{r3, r4, r5, lr}
 8021dda:	4d07      	ldr	r5, [pc, #28]	@ (8021df8 <_fstat_r+0x20>)
 8021ddc:	2300      	movs	r3, #0
 8021dde:	4604      	mov	r4, r0
 8021de0:	4608      	mov	r0, r1
 8021de2:	4611      	mov	r1, r2
 8021de4:	602b      	str	r3, [r5, #0]
 8021de6:	f7df fe93 	bl	8001b10 <_fstat>
 8021dea:	1c43      	adds	r3, r0, #1
 8021dec:	d102      	bne.n	8021df4 <_fstat_r+0x1c>
 8021dee:	682b      	ldr	r3, [r5, #0]
 8021df0:	b103      	cbz	r3, 8021df4 <_fstat_r+0x1c>
 8021df2:	6023      	str	r3, [r4, #0]
 8021df4:	bd38      	pop	{r3, r4, r5, pc}
 8021df6:	bf00      	nop
 8021df8:	2002d958 	.word	0x2002d958

08021dfc <_isatty_r>:
 8021dfc:	b538      	push	{r3, r4, r5, lr}
 8021dfe:	4d06      	ldr	r5, [pc, #24]	@ (8021e18 <_isatty_r+0x1c>)
 8021e00:	2300      	movs	r3, #0
 8021e02:	4604      	mov	r4, r0
 8021e04:	4608      	mov	r0, r1
 8021e06:	602b      	str	r3, [r5, #0]
 8021e08:	f7df fe92 	bl	8001b30 <_isatty>
 8021e0c:	1c43      	adds	r3, r0, #1
 8021e0e:	d102      	bne.n	8021e16 <_isatty_r+0x1a>
 8021e10:	682b      	ldr	r3, [r5, #0]
 8021e12:	b103      	cbz	r3, 8021e16 <_isatty_r+0x1a>
 8021e14:	6023      	str	r3, [r4, #0]
 8021e16:	bd38      	pop	{r3, r4, r5, pc}
 8021e18:	2002d958 	.word	0x2002d958

08021e1c <_sbrk_r>:
 8021e1c:	b538      	push	{r3, r4, r5, lr}
 8021e1e:	4d06      	ldr	r5, [pc, #24]	@ (8021e38 <_sbrk_r+0x1c>)
 8021e20:	2300      	movs	r3, #0
 8021e22:	4604      	mov	r4, r0
 8021e24:	4608      	mov	r0, r1
 8021e26:	602b      	str	r3, [r5, #0]
 8021e28:	f7df fe9a 	bl	8001b60 <_sbrk>
 8021e2c:	1c43      	adds	r3, r0, #1
 8021e2e:	d102      	bne.n	8021e36 <_sbrk_r+0x1a>
 8021e30:	682b      	ldr	r3, [r5, #0]
 8021e32:	b103      	cbz	r3, 8021e36 <_sbrk_r+0x1a>
 8021e34:	6023      	str	r3, [r4, #0]
 8021e36:	bd38      	pop	{r3, r4, r5, pc}
 8021e38:	2002d958 	.word	0x2002d958

08021e3c <abort>:
 8021e3c:	b508      	push	{r3, lr}
 8021e3e:	2006      	movs	r0, #6
 8021e40:	f000 f82c 	bl	8021e9c <raise>
 8021e44:	2001      	movs	r0, #1
 8021e46:	f7df fe2f 	bl	8001aa8 <_exit>

08021e4a <_raise_r>:
 8021e4a:	291f      	cmp	r1, #31
 8021e4c:	b538      	push	{r3, r4, r5, lr}
 8021e4e:	4605      	mov	r5, r0
 8021e50:	460c      	mov	r4, r1
 8021e52:	d904      	bls.n	8021e5e <_raise_r+0x14>
 8021e54:	2316      	movs	r3, #22
 8021e56:	6003      	str	r3, [r0, #0]
 8021e58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8021e5c:	bd38      	pop	{r3, r4, r5, pc}
 8021e5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021e60:	b112      	cbz	r2, 8021e68 <_raise_r+0x1e>
 8021e62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021e66:	b94b      	cbnz	r3, 8021e7c <_raise_r+0x32>
 8021e68:	4628      	mov	r0, r5
 8021e6a:	f000 f831 	bl	8021ed0 <_getpid_r>
 8021e6e:	4622      	mov	r2, r4
 8021e70:	4601      	mov	r1, r0
 8021e72:	4628      	mov	r0, r5
 8021e74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021e78:	f000 b818 	b.w	8021eac <_kill_r>
 8021e7c:	2b01      	cmp	r3, #1
 8021e7e:	d00a      	beq.n	8021e96 <_raise_r+0x4c>
 8021e80:	1c59      	adds	r1, r3, #1
 8021e82:	d103      	bne.n	8021e8c <_raise_r+0x42>
 8021e84:	2316      	movs	r3, #22
 8021e86:	6003      	str	r3, [r0, #0]
 8021e88:	2001      	movs	r0, #1
 8021e8a:	e7e7      	b.n	8021e5c <_raise_r+0x12>
 8021e8c:	2100      	movs	r1, #0
 8021e8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021e92:	4620      	mov	r0, r4
 8021e94:	4798      	blx	r3
 8021e96:	2000      	movs	r0, #0
 8021e98:	e7e0      	b.n	8021e5c <_raise_r+0x12>
	...

08021e9c <raise>:
 8021e9c:	4b02      	ldr	r3, [pc, #8]	@ (8021ea8 <raise+0xc>)
 8021e9e:	4601      	mov	r1, r0
 8021ea0:	6818      	ldr	r0, [r3, #0]
 8021ea2:	f7ff bfd2 	b.w	8021e4a <_raise_r>
 8021ea6:	bf00      	nop
 8021ea8:	20000080 	.word	0x20000080

08021eac <_kill_r>:
 8021eac:	b538      	push	{r3, r4, r5, lr}
 8021eae:	4d07      	ldr	r5, [pc, #28]	@ (8021ecc <_kill_r+0x20>)
 8021eb0:	2300      	movs	r3, #0
 8021eb2:	4604      	mov	r4, r0
 8021eb4:	4608      	mov	r0, r1
 8021eb6:	4611      	mov	r1, r2
 8021eb8:	602b      	str	r3, [r5, #0]
 8021eba:	f7df fde3 	bl	8001a84 <_kill>
 8021ebe:	1c43      	adds	r3, r0, #1
 8021ec0:	d102      	bne.n	8021ec8 <_kill_r+0x1c>
 8021ec2:	682b      	ldr	r3, [r5, #0]
 8021ec4:	b103      	cbz	r3, 8021ec8 <_kill_r+0x1c>
 8021ec6:	6023      	str	r3, [r4, #0]
 8021ec8:	bd38      	pop	{r3, r4, r5, pc}
 8021eca:	bf00      	nop
 8021ecc:	2002d958 	.word	0x2002d958

08021ed0 <_getpid_r>:
 8021ed0:	f7df bdd0 	b.w	8001a74 <_getpid>

08021ed4 <_init>:
 8021ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ed6:	bf00      	nop
 8021ed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021eda:	bc08      	pop	{r3}
 8021edc:	469e      	mov	lr, r3
 8021ede:	4770      	bx	lr

08021ee0 <_fini>:
 8021ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021ee2:	bf00      	nop
 8021ee4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021ee6:	bc08      	pop	{r3}
 8021ee8:	469e      	mov	lr, r3
 8021eea:	4770      	bx	lr
